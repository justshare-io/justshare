// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file python.proto (package python, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum python.IndexType
 */
export enum IndexType {
  /**
   * @generated from enum value: LLAMA = 0;
   */
  LLAMA = 0,

  /**
   * @generated from enum value: FAISS = 1;
   */
  FAISS = 1,

  /**
   * @generated from enum value: BM25 = 2;
   */
  BM25 = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(IndexType)
proto3.util.setEnumType(IndexType, "python.IndexType", [
  { no: 0, name: "LLAMA" },
  { no: 1, name: "FAISS" },
  { no: 2, name: "BM25" },
]);

/**
 * @generated from enum python.Categorizer
 */
export enum Categorizer {
  /**
   * @generated from enum value: T5_TAG = 0;
   */
  T5_TAG = 0,

  /**
   * @generated from enum value: KEYBERT = 1;
   */
  KEYBERT = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Categorizer)
proto3.util.setEnumType(Categorizer, "python.Categorizer", [
  { no: 0, name: "T5_TAG" },
  { no: 1, name: "KEYBERT" },
]);

/**
 * @generated from enum python.Summarizer
 */
export enum Summarizer {
  /**
   * @generated from enum value: LANGCHAIN = 0;
   */
  LANGCHAIN = 0,

  /**
   * @generated from enum value: BERT = 1;
   */
  BERT = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Summarizer)
proto3.util.setEnumType(Summarizer, "python.Summarizer", [
  { no: 0, name: "LANGCHAIN" },
  { no: 1, name: "BERT" },
]);

/**
 * @generated from message python.IndexQuery
 */
export class IndexQuery extends Message<IndexQuery> {
  /**
   * @generated from field: string index = 1;
   */
  index = "";

  /**
   * @generated from field: string query = 2;
   */
  query = "";

  constructor(data?: PartialMessage<IndexQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.IndexQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexQuery {
    return new IndexQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexQuery {
    return new IndexQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexQuery {
    return new IndexQuery().fromJsonString(jsonString, options);
  }

  static equals(a: IndexQuery | PlainMessage<IndexQuery> | undefined, b: IndexQuery | PlainMessage<IndexQuery> | undefined): boolean {
    return proto3.util.equals(IndexQuery, a, b);
  }
}

/**
 * @generated from message python.QueryResult
 */
export class QueryResult extends Message<QueryResult> {
  /**
   * @generated from field: repeated string results = 1;
   */
  results: string[] = [];

  constructor(data?: PartialMessage<QueryResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.QueryResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResult {
    return new QueryResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResult {
    return new QueryResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResult {
    return new QueryResult().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResult | PlainMessage<QueryResult> | undefined, b: QueryResult | PlainMessage<QueryResult> | undefined): boolean {
    return proto3.util.equals(QueryResult, a, b);
  }
}

/**
 * @generated from message python.IndexDirectoryRequest
 */
export class IndexDirectoryRequest extends Message<IndexDirectoryRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: python.IndexType type = 2;
   */
  type = IndexType.LLAMA;

  constructor(data?: PartialMessage<IndexDirectoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.IndexDirectoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(IndexType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexDirectoryRequest {
    return new IndexDirectoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexDirectoryRequest {
    return new IndexDirectoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexDirectoryRequest {
    return new IndexDirectoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IndexDirectoryRequest | PlainMessage<IndexDirectoryRequest> | undefined, b: IndexDirectoryRequest | PlainMessage<IndexDirectoryRequest> | undefined): boolean {
    return proto3.util.equals(IndexDirectoryRequest, a, b);
  }
}

/**
 * @generated from message python.Index
 */
export class Index extends Message<Index> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: python.IndexType type = 2;
   */
  type = IndexType.LLAMA;

  constructor(data?: PartialMessage<Index>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.Index";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(IndexType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Index {
    return new Index().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Index {
    return new Index().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Index {
    return new Index().fromJsonString(jsonString, options);
  }

  static equals(a: Index | PlainMessage<Index> | undefined, b: Index | PlainMessage<Index> | undefined): boolean {
    return proto3.util.equals(Index, a, b);
  }
}

/**
 * @generated from message python.Text
 */
export class Text extends Message<Text> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<Text>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.Text";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Text {
    return new Text().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Text {
    return new Text().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Text {
    return new Text().fromJsonString(jsonString, options);
  }

  static equals(a: Text | PlainMessage<Text> | undefined, b: Text | PlainMessage<Text> | undefined): boolean {
    return proto3.util.equals(Text, a, b);
  }
}

/**
 * @generated from message python.Categories
 */
export class Categories extends Message<Categories> {
  /**
   * @generated from field: repeated string categories = 1;
   */
  categories: string[] = [];

  constructor(data?: PartialMessage<Categories>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.Categories";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categories", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Categories {
    return new Categories().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Categories {
    return new Categories().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Categories {
    return new Categories().fromJsonString(jsonString, options);
  }

  static equals(a: Categories | PlainMessage<Categories> | undefined, b: Categories | PlainMessage<Categories> | undefined): boolean {
    return proto3.util.equals(Categories, a, b);
  }
}

/**
 * @generated from message python.CategorizeRequest
 */
export class CategorizeRequest extends Message<CategorizeRequest> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: python.Categorizer categorizer = 2;
   */
  categorizer = Categorizer.T5_TAG;

  constructor(data?: PartialMessage<CategorizeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.CategorizeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "categorizer", kind: "enum", T: proto3.getEnumType(Categorizer) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CategorizeRequest {
    return new CategorizeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CategorizeRequest {
    return new CategorizeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CategorizeRequest {
    return new CategorizeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CategorizeRequest | PlainMessage<CategorizeRequest> | undefined, b: CategorizeRequest | PlainMessage<CategorizeRequest> | undefined): boolean {
    return proto3.util.equals(CategorizeRequest, a, b);
  }
}

/**
 * @generated from message python.SummarizeRequest
 */
export class SummarizeRequest extends Message<SummarizeRequest> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: python.Summarizer summarizer = 2;
   */
  summarizer = Summarizer.LANGCHAIN;

  constructor(data?: PartialMessage<SummarizeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.SummarizeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "summarizer", kind: "enum", T: proto3.getEnumType(Summarizer) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeRequest {
    return new SummarizeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeRequest {
    return new SummarizeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeRequest {
    return new SummarizeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeRequest | PlainMessage<SummarizeRequest> | undefined, b: SummarizeRequest | PlainMessage<SummarizeRequest> | undefined): boolean {
    return proto3.util.equals(SummarizeRequest, a, b);
  }
}

/**
 * @generated from message python.SummarizeResponse
 */
export class SummarizeResponse extends Message<SummarizeResponse> {
  /**
   * @generated from field: string summary = 1;
   */
  summary = "";

  constructor(data?: PartialMessage<SummarizeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.SummarizeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeResponse {
    return new SummarizeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeResponse {
    return new SummarizeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeResponse {
    return new SummarizeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeResponse | PlainMessage<SummarizeResponse> | undefined, b: SummarizeResponse | PlainMessage<SummarizeResponse> | undefined): boolean {
    return proto3.util.equals(SummarizeResponse, a, b);
  }
}

/**
 * @generated from message python.TranscribeRequest
 */
export class TranscribeRequest extends Message<TranscribeRequest> {
  /**
   * @generated from field: string file = 1;
   */
  file = "";

  constructor(data?: PartialMessage<TranscribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.TranscribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TranscribeRequest {
    return new TranscribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TranscribeRequest {
    return new TranscribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TranscribeRequest {
    return new TranscribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TranscribeRequest | PlainMessage<TranscribeRequest> | undefined, b: TranscribeRequest | PlainMessage<TranscribeRequest> | undefined): boolean {
    return proto3.util.equals(TranscribeRequest, a, b);
  }
}

/**
 * @generated from message python.TranscribeResponse
 */
export class TranscribeResponse extends Message<TranscribeResponse> {
  /**
   * @generated from field: string transcription = 1;
   */
  transcription = "";

  constructor(data?: PartialMessage<TranscribeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.TranscribeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transcription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TranscribeResponse {
    return new TranscribeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TranscribeResponse {
    return new TranscribeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TranscribeResponse {
    return new TranscribeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TranscribeResponse | PlainMessage<TranscribeResponse> | undefined, b: TranscribeResponse | PlainMessage<TranscribeResponse> | undefined): boolean {
    return proto3.util.equals(TranscribeResponse, a, b);
  }
}

/**
 * @generated from message python.Video
 */
export class Video extends Message<Video> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<Video>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.Video";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Video {
    return new Video().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Video {
    return new Video().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Video {
    return new Video().fromJsonString(jsonString, options);
  }

  static equals(a: Video | PlainMessage<Video> | undefined, b: Video | PlainMessage<Video> | undefined): boolean {
    return proto3.util.equals(Video, a, b);
  }
}

/**
 * @generated from message python.TranscriptSection
 */
export class TranscriptSection extends Message<TranscriptSection> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: float start = 2;
   */
  start = 0;

  /**
   * @generated from field: float duration = 3;
   */
  duration = 0;

  constructor(data?: PartialMessage<TranscriptSection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.TranscriptSection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "duration", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TranscriptSection {
    return new TranscriptSection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TranscriptSection {
    return new TranscriptSection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TranscriptSection {
    return new TranscriptSection().fromJsonString(jsonString, options);
  }

  static equals(a: TranscriptSection | PlainMessage<TranscriptSection> | undefined, b: TranscriptSection | PlainMessage<TranscriptSection> | undefined): boolean {
    return proto3.util.equals(TranscriptSection, a, b);
  }
}

/**
 * @generated from message python.Transcript
 */
export class Transcript extends Message<Transcript> {
  /**
   * @generated from field: repeated python.TranscriptSection transcript = 1;
   */
  transcript: TranscriptSection[] = [];

  constructor(data?: PartialMessage<Transcript>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "python.Transcript";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transcript", kind: "message", T: TranscriptSection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transcript {
    return new Transcript().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transcript {
    return new Transcript().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transcript {
    return new Transcript().fromJsonString(jsonString, options);
  }

  static equals(a: Transcript | PlainMessage<Transcript> | undefined, b: Transcript | PlainMessage<Transcript> | undefined): boolean {
    return proto3.util.equals(Transcript, a, b);
  }
}


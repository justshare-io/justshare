// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file ai.proto (package ai, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message ai.AnalyzeConversationResponse
 */
export class AnalyzeConversationResponse extends Message<AnalyzeConversationResponse> {
  /**
   * Phone numbers of the participants
   *
   * @generated from field: repeated string phone_numbers = 1;
   */
  phoneNumbers: string[] = [];

  /**
   * The summary of the conversation
   *
   * @generated from field: string summary = 2;
   */
  summary = "";

  /**
   * Based on the content of the conversation, the system will generate a list of questions
   *
   * @generated from field: repeated string questions = 3;
   */
  questions: string[] = [];

  constructor(data?: PartialMessage<AnalyzeConversationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.AnalyzeConversationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone_numbers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "questions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeConversationResponse {
    return new AnalyzeConversationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeConversationResponse {
    return new AnalyzeConversationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeConversationResponse {
    return new AnalyzeConversationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzeConversationResponse | PlainMessage<AnalyzeConversationResponse> | undefined, b: AnalyzeConversationResponse | PlainMessage<AnalyzeConversationResponse> | undefined): boolean {
    return proto3.util.equals(AnalyzeConversationResponse, a, b);
  }
}

/**
 * @generated from message ai.AnalyzeContent
 */
export class AnalyzeContent extends Message<AnalyzeContent> {
  /**
   * Potential categories for the content in the form: category/subcategory/other-category. The category is all lowercase and spaces are replaced with dashes.
   *
   * @generated from field: repeated string categories = 1;
   */
  categories: string[] = [];

  constructor(data?: PartialMessage<AnalyzeContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.AnalyzeContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categories", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeContent {
    return new AnalyzeContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeContent {
    return new AnalyzeContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeContent {
    return new AnalyzeContent().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyzeContent | PlainMessage<AnalyzeContent> | undefined, b: AnalyzeContent | PlainMessage<AnalyzeContent> | undefined): boolean {
    return proto3.util.equals(AnalyzeContent, a, b);
  }
}


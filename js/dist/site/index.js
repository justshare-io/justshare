"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all3) => {
    for (var name in all3)
      __defProp(target, name, { get: all3[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // ../node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn2(format2) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign4 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component18(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component18.prototype.isReactComponent = {};
          Component18.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component18.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component18.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component18.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign4(pureComponentPrototype, Component18.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef7() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a3) {
            return isArrayImpl(a3);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element2 = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element2._store = {};
              Object.defineProperty(element2._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element2, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element2, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element2.props);
                Object.freeze(element2);
              }
            }
            return element2;
          };
          function createElement62(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i4 = 0; i4 < childrenLength; i4++) {
                childArray[i4] = arguments[i4 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement5(element2, config, children) {
            if (element2 === null || element2 === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element2 + ".");
            }
            var propName;
            var props = assign4({}, element2.props);
            var key = element2.key;
            var ref = element2.ref;
            var self2 = element2._self;
            var source = element2._source;
            var owner = element2._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element2.type && element2.type.defaultProps) {
                defaultProps = element2.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i4 = 0; i4 < childrenLength; i4++) {
                childArray[i4] = arguments[i4 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element2.type, key, ref, self2, source, owner, props);
          }
          function isValidElement10(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text4) {
            return text4.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element2, index2) {
            if (typeof element2 === "object" && element2 !== null && element2.key != null) {
              {
                checkKeyStringCoercion(element2.key);
              }
              return escape("" + element2.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                  return c3;
                });
              } else if (mappedChild != null) {
                if (isValidElement10(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i4 = 0; i4 < children.length; i4++) {
                child = children[i4];
                nextName = nextNamePrefix + getElementKey(child, i4);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n6 = 0;
            mapChildren(children, function() {
              n6++;
            });
            return n6;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement10(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext35(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef53(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo8(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext39(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState46(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer4(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef58(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect54(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create3, deps);
          }
          function useInsertionEffect7(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create3, deps);
          }
          function useLayoutEffect8(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create3, deps);
          }
          function useCallback38(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo25(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create3, deps);
          }
          function useImperativeHandle3(ref, create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create3, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId5() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign4({}, props, {
                    value: prevLog
                  }),
                  info: assign4({}, props, {
                    value: prevInfo
                  }),
                  warn: assign4({}, props, {
                    value: prevWarn
                  }),
                  error: assign4({}, props, {
                    value: prevError
                  }),
                  group: assign4({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign4({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign4({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component19) {
            var prototype = Component19.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element2) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element2, parentType) {
            if (!element2._store || element2._store.validated || element2.key != null) {
              return;
            }
            element2._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element2 && element2._owner && element2._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element2._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element2);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node5, parentType) {
            if (typeof node5 !== "object") {
              return;
            }
            if (isArray(node5)) {
              for (var i4 = 0; i4 < node5.length; i4++) {
                var child = node5[i4];
                if (isValidElement10(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement10(node5)) {
              if (node5._store) {
                node5._store.validated = true;
              }
            } else if (node5) {
              var iteratorFn = getIteratorFn(node5);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node5.entries) {
                  var iterator = iteratorFn.call(node5);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement10(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element2) {
            {
              var type = element2.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element2.props, "prop", name, element2);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment2) {
            {
              var keys2 = Object.keys(fragment2.props);
              for (var i4 = 0; i4 < keys2.length; i4++) {
                var key = keys2[i4];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment2);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment2.ref !== null) {
                setCurrentlyValidatingElement$1(fragment2);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element2 = createElement62.apply(this, arguments);
            if (element2 == null) {
              return element2;
            }
            if (validType) {
              for (var i4 = 2; i4 < arguments.length; i4++) {
                validateChildKeys(arguments[i4], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element2);
            } else {
              validatePropTypes(element2);
            }
            return element2;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element2, props, children) {
            var newElement = cloneElement5.apply(this, arguments);
            for (var i4 = 2; i4 < arguments.length; i4++) {
              validateChildKeys(arguments[i4], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve2, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve2, reject);
                      } else {
                        resolve2(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve2, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                      } else {
                        resolve2(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve2, reject) {
                      resolve2(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve2, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve2(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve2(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i4 = 0;
                try {
                  for (; i4 < queue.length; i4++) {
                    var callback = queue[i4];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i4 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory2 = createFactoryWithValidation;
          var Children11 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children11;
          exports.Component = Component18;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE2;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext35;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory2;
          exports.createRef = createRef7;
          exports.forwardRef = forwardRef53;
          exports.isValidElement = isValidElement10;
          exports.lazy = lazy;
          exports.memo = memo8;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback38;
          exports.useContext = useContext39;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect54;
          exports.useId = useId5;
          exports.useImperativeHandle = useImperativeHandle3;
          exports.useInsertionEffect = useInsertionEffect7;
          exports.useLayoutEffect = useLayoutEffect8;
          exports.useMemo = useMemo25;
          exports.useReducer = useReducer4;
          exports.useRef = useRef58;
          exports.useState = useState46;
          exports.useSyncExternalStore = useSyncExternalStore2;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react/index.js
  var require_react = __commonJS({
    "../node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // ../node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push2(heap, node5) {
            var index2 = heap.length;
            heap.push(node5);
            siftUp(heap, node5, index2);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first2 = heap[0];
            var last2 = heap.pop();
            if (last2 !== first2) {
              heap[0] = last2;
              siftDown(heap, last2, 0);
            }
            return first2;
          }
          function siftUp(heap, node5, i4) {
            var index2 = i4;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent3 = heap[parentIndex];
              if (compare(parent3, node5) > 0) {
                heap[parentIndex] = node5;
                heap[index2] = parent3;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node5, i4) {
            var index2 = i4;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node5) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node5;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node5;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node5) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node5;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a3, b4) {
            var diff = a3.sortIndex - b4.sortIndex;
            return diff !== 0 ? diff : a3.id - b4.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority2 = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority2;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority2;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
                priorityLevel = NormalPriority2;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority2:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push2(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority2;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react-dom/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../node_modules/react-dom/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // ../node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React248 = require_react();
          var Scheduler2 = require_scheduler();
          var ReactSharedInternals = React248.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn2(format2) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment20 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i4 = 0; i4 < dependencies.length; i4++) {
              allNativeEvents.add(dependencies[i4]);
            }
          }
          var canUseDOM4 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node5, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node5[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node5.hasAttribute(attributeName)) {
                    var value = node5.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node5.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node5.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node5.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node5, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node5.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node5.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node5, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node5.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node5.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node5[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node5[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node5.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node5.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node5.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign4 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign4({}, props, {
                    value: prevLog
                  }),
                  info: assign4({}, props, {
                    value: prevInfo
                  }),
                  warn: assign4({}, props, {
                    value: prevWarn
                  }),
                  error: assign4({}, props, {
                    value: prevError
                  }),
                  group: assign4({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign4({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign4({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component18) {
            var prototype = Component18.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node5 = workInProgress2;
              do {
                info += describeFiber(node5);
                node5 = node5.return;
              } while (node5);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment20:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE2) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString2(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node5) {
            return node5._valueTracker;
          }
          function detachTracker(node5) {
            node5._valueTracker = null;
          }
          function getValueFromNode(node5) {
            var value = "";
            if (!node5) {
              return value;
            }
            if (isCheckable(node5)) {
              value = node5.checked ? "true" : "false";
            } else {
              value = node5.value;
            }
            return value;
          }
          function trackValueOnNode(node5) {
            var valueField = isCheckable(node5) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node5.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node5[valueField]);
            }
            var currentValue = "" + node5[valueField];
            if (node5.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node5, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node5, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node5);
                delete node5[valueField];
              }
            };
            return tracker;
          }
          function track(node5) {
            if (getTracker(node5)) {
              return;
            }
            node5._valueTracker = trackValueOnNode(node5);
          }
          function updateValueIfChanged(node5) {
            if (!node5) {
              return false;
            }
            var tracker = getTracker(node5);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node5);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e3) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled2(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element2, props) {
            var node5 = element2;
            var checked = props.checked;
            var hostProps = assign4({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node5._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element2, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node5 = element2;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node5._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled2(props)
            };
          }
          function updateChecked(element2, props) {
            var node5 = element2;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node5, "checked", checked, false);
            }
          }
          function updateWrapper(element2, props) {
            var node5 = element2;
            {
              var controlled = isControlled2(props);
              if (!node5._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node5._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element2, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node5.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node5.value != value) {
                  node5.value = toString2(value);
                }
              } else if (node5.value !== toString2(value)) {
                node5.value = toString2(value);
              }
            } else if (type === "submit" || type === "reset") {
              node5.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node5, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node5, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node5.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element2, props, isHydrating2) {
            var node5 = element2;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString2(node5._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node5.value) {
                    node5.value = initialValue;
                  }
                }
              }
              {
                node5.defaultValue = initialValue;
              }
            }
            var name = node5.name;
            if (name !== "") {
              node5.name = "";
            }
            {
              node5.defaultChecked = !node5.defaultChecked;
              node5.defaultChecked = !!node5._wrapperState.initialChecked;
            }
            if (name !== "") {
              node5.name = name;
            }
          }
          function restoreControlledState(element2, props) {
            var node5 = element2;
            updateWrapper(node5, props);
            updateNamedCousins(node5, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i4 = 0; i4 < group.length; i4++) {
                var otherNode = group[i4];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node5, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node5.ownerDocument) !== node5
            ) {
              if (value == null) {
                node5.defaultValue = toString2(node5._wrapperState.initialValue);
              } else if (node5.defaultValue !== toString2(value)) {
                node5.defaultValue = toString2(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element2, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React248.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element2, props) {
            if (props.value != null) {
              element2.setAttribute("value", toString2(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a3) {
            return isArrayImpl(a3);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i4 = 0; i4 < valuePropNames.length; i4++) {
                var propName = valuePropNames[i4];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node5, multiple, propValue, setDefaultSelected) {
            var options2 = node5.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i4 = 0; i4 < selectedValues.length; i4++) {
                selectedValue["$" + selectedValues[i4]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element2, props) {
            return assign4({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element2, props) {
            var node5 = element2;
            {
              checkSelectPropTypes(props);
            }
            node5._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element2, props) {
            var node5 = element2;
            node5.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node5, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node5, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element2, props) {
            var node5 = element2;
            var wasMultiple = node5._wrapperState.wasMultiple;
            node5._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node5, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node5, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node5, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element2, props) {
            var node5 = element2;
            var value = props.value;
            if (value != null) {
              updateOptions(node5, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element2, props) {
            var node5 = element2;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign4({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node5._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element2, props) {
            var node5 = element2;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node5._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element2, props) {
            var node5 = element2;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString2(value);
              if (newValue !== node5.value) {
                node5.value = newValue;
              }
              if (props.defaultValue == null && node5.defaultValue !== newValue) {
                node5.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node5.defaultValue = toString2(defaultValue);
            }
          }
          function postMountWrapper$3(element2, props) {
            var node5 = element2;
            var textContent2 = node5.textContent;
            if (textContent2 === node5._wrapperState.initialValue) {
              if (textContent2 !== "" && textContent2 !== null) {
                node5.value = textContent2;
              }
            }
          }
          function restoreControlledState$2(element2, props) {
            updateWrapper$1(element2, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node5, html4) {
            if (node5.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node5)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html4.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node5.firstChild) {
                  node5.removeChild(node5.firstChild);
                }
                while (svgNode.firstChild) {
                  node5.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node5.innerHTML = html4;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node5, text4) {
            if (text4) {
              var firstChild = node5.firstChild;
              if (firstChild && firstChild === node5.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text4;
                return;
              }
            }
            node5.textContent = text4;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty2 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty2) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern2 = /([A-Z])/g;
          var msPattern2 = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern2, "-$1").toLowerCase().replace(msPattern2, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string5) {
              return string5.replace(hyphenPattern, function(_3, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles4) {
            {
              var serialized = "";
              var delimiter3 = "";
              for (var styleName in styles4) {
                if (!styles4.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles4[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter3 + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter3 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node5, styles4) {
            var style2 = node5.style;
            for (var styleName in styles4) {
              if (!styles4.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles4[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles4[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles4) {
            var expanded = {};
            for (var key in styles4) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i4 = 0; i4 < longhands.length; i4++) {
                expanded[longhands[i4]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign4({
            menuitem: true
          }, omittedCloseTags);
          var HTML2 = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML2 in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i4 = 0; i4 < queuedTargets.length; i4++) {
                restoreStateOfTarget(queuedTargets[i4]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, a3, b4) {
            if (isInsideEventHandler) {
              return fn2(a3, b4);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, a3, b4);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM4) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e3) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a3, b4, c3, d3, e3, f4) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a3, b4, c3, d3, e3, f4) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a3, b4, c3, d3, e3, f4) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a3, b4, c3, d3, e3, f4) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node5 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node5;
              do {
                node5 = nextNode;
                if ((node5.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node5.return;
                }
                nextNode = node5.return;
              } while (nextNode);
            } else {
              while (node5.return) {
                node5 = node5.return;
              }
            }
            if (node5.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a3 = fiber;
            var b4 = alternate;
            while (true) {
              var parentA = a3.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a3 = b4 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a3) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b4) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a3.return !== b4.return) {
                a3 = parentA;
                b4 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentA;
                    b4 = parentB;
                    break;
                  }
                  if (_child === b4) {
                    didFindChild = true;
                    b4 = parentA;
                    a3 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a3) {
                      didFindChild = true;
                      a3 = parentB;
                      b4 = parentA;
                      break;
                    }
                    if (_child === b4) {
                      didFindChild = true;
                      b4 = parentB;
                      a3 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a3.alternate !== b4) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a3.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a3.stateNode.current === a3) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent3) {
            var currentParent = findCurrentFiberUsingSlowPath(parent3);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node5) {
            if (node5.tag === HostComponent || node5.tag === HostText) {
              return node5;
            }
            var child = node5.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent3) {
            var currentParent = findCurrentFiberUsingSlowPath(parent3);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node5) {
            if (node5.tag === HostComponent || node5.tag === HostText) {
              return node5;
            }
            var child = node5.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler2.unstable_scheduleCallback;
          var cancelCallback = Scheduler2.unstable_cancelCallback;
          var shouldYield = Scheduler2.unstable_shouldYield;
          var requestPaint = Scheduler2.unstable_requestPaint;
          var now = Scheduler2.unstable_now;
          var getCurrentPriorityLevel = Scheduler2.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler2.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler2.unstable_UserBlockingPriority;
          var NormalPriority2 = Scheduler2.unstable_NormalPriority;
          var LowPriority = Scheduler2.unstable_LowPriority;
          var IdlePriority = Scheduler2.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler2.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler2.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign4({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root4, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root4, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root4, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root4.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority2;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority2;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root4, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root4, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root4) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root4);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x2) {
            var asUint = x2 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root4, wipLanes) {
            var pendingLanes = root4.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root4.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root4.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root4, lanes) {
            var eventTimes = root4.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root4, currentTime) {
            var pendingLanes = root4.pendingLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root4.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root4) {
            return getHighestPriorityLanes(root4.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root4) {
            var everythingButOffscreen = root4.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root4, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root4, lanes) {
            return (lanes & root4.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a3, b4) {
            return (a3 & b4) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a3, b4) {
            return a3 | b4;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a3, b4) {
            return a3 & b4;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a3, b4) {
            return a3 !== NoLane && a3 < b4 ? a3 : b4;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i4 = 0; i4 < TotalLanes; i4++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root4, updateLane, eventTime) {
            root4.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root4.suspendedLanes = NoLanes;
              root4.pingedLanes = NoLanes;
            }
            var eventTimes = root4.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root4, suspendedLanes) {
            root4.suspendedLanes |= suspendedLanes;
            root4.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root4, pingedLanes, eventTime) {
            root4.pingedLanes |= root4.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root4, remainingLanes) {
            var noLongerPendingLanes = root4.pendingLanes & ~remainingLanes;
            root4.pendingLanes = remainingLanes;
            root4.suspendedLanes = NoLanes;
            root4.pingedLanes = NoLanes;
            root4.expiredLanes &= remainingLanes;
            root4.mutableReadLanes &= remainingLanes;
            root4.entangledLanes &= remainingLanes;
            var entanglements = root4.entanglements;
            var eventTimes = root4.eventTimes;
            var expirationTimes = root4.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root4, entangledLanes) {
            var rootEntangledLanes = root4.entangledLanes |= entangledLanes;
            var entanglements = root4.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root4, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root4.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root4, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root4, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            var memoizedUpdaters = root4.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root4, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority2(priority, fn2) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn2();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a3, b4) {
            return a3 !== 0 && a3 < b4 ? a3 : b4;
          }
          function lowerEventPriority(a3, b4) {
            return a3 === 0 || a3 > b4 ? a3 : b4;
          }
          function isHigherEventPriority(a3, b4) {
            return a3 !== 0 && a3 < b4;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root4) {
            var currentState = root4.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn2) {
            _attemptSynchronousHydration = fn2;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn2) {
            getCurrentUpdatePriority$1 = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i4 = 0;
            for (; i4 < queuedExplicitHydrationTargets.length; i4++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i4].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i4, 0, queuedTarget);
            if (i4 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler2.unstable_scheduleCallback(Scheduler2.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i4 = 1; i4 < queuedDiscreteEvents.length; i4++) {
                var queuedEvent = queuedDiscreteEvents[i4];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority2:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root3 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root3 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root3 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end2;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end2 = 1; end2 <= minEnd; end2++) {
              if (startValue[startLength - end2] !== endValue[endLength - end2]) {
                break;
              }
            }
            var sliceTail = end2 > 1 ? 1 - end2 : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root3) {
              return root3.value;
            }
            return root3.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize8 = Interface[_propName];
                if (normalize8) {
                  this[_propName] = normalize8(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign4(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign4({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign4({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign4({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign4({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign4({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign4({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign4({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign4({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign4({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign4({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign4({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign4({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM4 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM4 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM4 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM4 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM4) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element2 = document.createElement("div");
              element2.setAttribute(eventName, "return;");
              isSupported = typeof element2[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM4) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node5) {
            var state = node5._wrapperState;
            if (!state || !state.controlled || node5.type !== "number") {
              return;
            }
            {
              setDefaultValue(node5, "number", node5.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win2;
            if (nativeEventTarget.window === nativeEventTarget) {
              win2 = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win2 = doc.defaultView || doc.parentWindow;
              } else {
                win2 = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win2 : getNodeFromInstance(from2);
            var toNode = to == null ? win2 : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is3(x2, y3) {
            return x2 === y3 && (x2 !== 0 || 1 / x2 === 1 / y3) || x2 !== x2 && y3 !== y3;
          }
          var objectIs2 = typeof Object.is === "function" ? Object.is : is3;
          function shallowEqual(objA, objB) {
            if (objectIs2(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i4 = 0; i4 < keysA.length; i4++) {
              var currentKey = keysA[i4];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs2(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node5) {
            while (node5 && node5.firstChild) {
              node5 = node5.firstChild;
            }
            return node5;
          }
          function getSiblingNode(node5) {
            while (node5) {
              if (node5.nextSibling) {
                return node5.nextSibling;
              }
              node5 = node5.parentNode;
            }
          }
          function getNodeForCharacterOffset(root4, offset3) {
            var node5 = getLeafNode(root4);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node5) {
              if (node5.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node5.textContent.length;
                if (nodeStart <= offset3 && nodeEnd >= offset3) {
                  return {
                    node: node5,
                    offset: offset3 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node5 = getLeafNode(getSiblingNode(node5));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win2 = ownerDocument && ownerDocument.defaultView || window;
            var selection = win2.getSelection && win2.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e3) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end2 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node5 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next4 = null;
                while (true) {
                  if (node5 === anchorNode && (anchorOffset === 0 || node5.nodeType === TEXT_NODE)) {
                    start2 = length2 + anchorOffset;
                  }
                  if (node5 === focusNode && (focusOffset === 0 || node5.nodeType === TEXT_NODE)) {
                    end2 = length2 + focusOffset;
                  }
                  if (node5.nodeType === TEXT_NODE) {
                    length2 += node5.nodeValue.length;
                  }
                  if ((next4 = node5.firstChild) === null) {
                    break;
                  }
                  parentNode = node5;
                  node5 = next4;
                }
                while (true) {
                  if (node5 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start2 = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end2 = length2;
                  }
                  if ((next4 = node5.nextSibling) !== null) {
                    break;
                  }
                  node5 = parentNode;
                  parentNode = node5.parentNode;
                }
                node5 = next4;
              }
            if (start2 === -1 || end2 === -1) {
              return null;
            }
            return {
              start: start2,
              end: end2
            };
          }
          function setOffsets(node5, offsets) {
            var doc = node5.ownerDocument || document;
            var win2 = doc && doc.defaultView || window;
            if (!win2.getSelection) {
              return;
            }
            var selection = win2.getSelection();
            var length2 = node5.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection.extend && start2 > end2) {
              var temp = end2;
              end2 = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node5, start2);
            var endMarker = getNodeForCharacterOffset(node5, end2);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range2 = doc.createRange();
              range2.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end2) {
                selection.addRange(range2);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range2.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range2);
              }
            }
          }
          function isTextNode(node5) {
            return node5 && node5.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node5) {
            return node5 && node5.ownerDocument && containsNode(node5.ownerDocument.documentElement, node5);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win2 = window;
            var element2 = getActiveElement();
            while (element2 instanceof win2.HTMLIFrameElement) {
              if (isSameOriginFrame(element2)) {
                win2 = element2.contentWindow;
              } else {
                return element2;
              }
              element2 = getActiveElement(win2.document);
            }
            return element2;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection2(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i4 = 0; i4 < ancestors.length; i4++) {
                var info = ancestors[i4];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection2(input, offsets) {
            var start2 = offsets.start;
            var end2 = offsets.end;
            if (end2 === void 0) {
              end2 = start2;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start2;
              input.selectionEnd = Math.min(end2, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM4 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node5) {
            if ("selectionStart" in node5 && hasSelectionCapabilities(node5)) {
              return {
                start: node5.selectionStart,
                end: node5.selectionEnd
              };
            } else {
              var win2 = node5.ownerDocument && node5.ownerDocument.defaultView || window;
              var selection = win2.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM4) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i4 = 0; i4 < simpleEventPluginEvents.length; i4++) {
              var eventName = simpleEventPluginEvents[i4];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i4 = dispatchListeners.length - 1; i4 >= 0; i4--) {
                var _dispatchListeners$i = dispatchListeners[i4], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i4 = 0; i4 < dispatchQueue.length; i4++) {
              var _dispatchQueue$i = dispatchQueue[i4], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node5 = targetInst;
                mainLoop:
                  while (true) {
                    if (node5 === null) {
                      return;
                    }
                    var nodeTag = node5.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node5.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node5.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node5 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node5 = node5.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent3(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent3(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent3(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent3(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent3(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent3(nodeA);
              nodeB = getParent3(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM4 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent3, html4) {
              var testElement = parent3.namespaceURI === HTML_NAMESPACE ? parent3.ownerDocument.createElement(parent3.tagName) : parent3.ownerDocument.createElementNS(parent3.namespaceURI, parent3.tagName);
              testElement.innerHTML = html4;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop5() {
          }
          function trapClickOnNonInteractiveElement(node5) {
            node5.onclick = noop5;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i4 = 0; i4 < updatePayload.length; i4 += 2) {
              var propKey = updatePayload[i4];
              var propValue = updatePayload[i4 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement62(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node5 = domElement;
                  if (props.multiple) {
                    node5.multiple = true;
                  } else if (props.size) {
                    node5.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text4, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text4);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i4 = 0; i4 < mediaEventTypes.length; i4++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i4], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i4 = 0; i4 < mediaEventTypes.length; i4++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i4], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text4, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text4;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text4) {
            {
              if (text4 === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text4, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign4({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root4 = rootContainerInstance.documentElement;
                namespace = root4 ? root4.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string5 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string5, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement62(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string5 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string5, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text4, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text4, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text4, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask2 = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node5 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node5.nextSibling;
              parentInstance.removeChild(node5);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node5 = nextNode;
            } while (node5);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text4) {
            textInstance.nodeValue = text4;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text4) {
            if (text4 === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node5) {
            for (; node5 != null; node5 = node5.nextSibling) {
              var nodeType = node5.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node5.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node5;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text4, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text4);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node5 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node5) {
              if (node5.nodeType === COMMENT_NODE) {
                var data = node5.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node5);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node5 = node5.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node5 = targetInstance.previousSibling;
            var depth = 0;
            while (node5) {
              if (node5.nodeType === COMMENT_NODE) {
                var data = node5.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node5;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node5 = node5.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text4, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text4, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text4, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text4, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text4) {
            {
              warnForInsertedHydratedText(parentContainer, text4);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text4) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text4);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text4, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text4);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node5) {
            delete node5[internalInstanceKey];
            delete node5[internalPropsKey];
            delete node5[internalEventHandlersKey];
            delete node5[internalEventHandlerListenersKey];
            delete node5[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node5) {
            node5[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node5) {
            node5[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node5) {
            node5[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node5) {
            return !!node5[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node5) {
            var inst = node5[internalInstanceKey] || node5[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node5) {
            return node5[internalPropsKey] || null;
          }
          function updateFiberProps(node5, props) {
            node5[internalPropsKey] = props;
          }
          function getEventListenerSet(node5) {
            var elementListenerSet = node5[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node5[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element2) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push2(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component18, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component18)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign4({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node5 = fiber;
              do {
                switch (node5.tag) {
                  case HostRoot:
                    return node5.stateNode.context;
                  case ClassComponent: {
                    var Component18 = node5.type;
                    if (isContextProvider(Component18)) {
                      return node5.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node5 = node5.return;
              } while (node5 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i4 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i4 < queue.length; i4++) {
                  var callback = queue[i4];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i4 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow2 = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow2;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow2 = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow2;
            } else {
              var newBits2 = slot << baseLength;
              var _id = newBits2 | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text4 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text4);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text4 = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text4);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent2 = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent2, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent2,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent2,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent3 = fiber.return;
            while (parent3 !== null && parent3.tag !== HostComponent && parent3.tag !== HostRoot && parent3.tag !== SuspenseComponent) {
              parent3 = parent3.return;
            }
            hydrationParentFiber = parent3;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node5 = fiber;
              while (node5 !== null) {
                if (node5.mode & StrictLegacyMode) {
                  maybeStrictRoot = node5;
                }
                node5 = node5.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component18, baseProps) {
            if (Component18 && Component18.defaultProps) {
              var props = assign4({}, baseProps);
              var defaultProps = Component18.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent3, renderLanes2, propagationRoot) {
            var node5 = parent3;
            while (node5 !== null) {
              var alternate = node5.alternate;
              if (!isSubsetOfLanes(node5.childLanes, renderLanes2)) {
                node5.childLanes = mergeLanes(node5.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node5 === propagationRoot) {
                break;
              }
              node5 = node5.return;
            }
            {
              if (node5 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list3 = fiber.dependencies;
              if (list3 !== null) {
                nextFiber = fiber.child;
                var dependency = list3.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list3.lanes = mergeLanes(list3.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i4 = 0; i4 < concurrentQueues.length; i4++) {
                var queue = concurrentQueues[i4];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node5 = sourceFiber;
            var parent3 = sourceFiber.return;
            while (parent3 !== null) {
              parent3.childLanes = mergeLanes(parent3.childLanes, lane);
              alternate = parent3.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent3.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node5 = parent3;
              parent3 = parent3.return;
            }
            if (node5.tag === HostRoot) {
              var root4 = node5.stateNode;
              return root4;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root4, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign4({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i4 = 0; i4 < effects.length; i4++) {
                var effect = effects[i4];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React248.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign4({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state2 = instance.state;
              if (_state2 && (typeof _state2 !== "object" || isArray(_state2))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element2) {
            var mixedRef = element2.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element2._owner && element2._self && element2._owner.stateNode !== element2._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element2._owner) {
                var owner = element2._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element2._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent2, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent2);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element2, lanes) {
              var elementType = element2.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element2.props.children, lanes, element2.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element2) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element2.props);
                  existing.ref = coerceRef(returnFiber, current2, element2);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element2._source;
                    existing._debugOwner = element2._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element2, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element2);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment2, lanes, key) {
              if (current2 === null || current2.tag !== Fragment20) {
                var created = createFiberFromFragment(fragment2, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment2);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i4 = 0; i4 < newChildren.length; i4++) {
                  var child = newChildren[i4];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent2, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent2);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element2, lanes) {
              var key = element2.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element2.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment20) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element2.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element2._source;
                        existing._debugOwner = element2._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element2) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element2.props);
                      _existing.ref = coerceRef(returnFiber, child, element2);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element2._source;
                        _existing._debugOwner = element2._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element2.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element2.props.children, returnFiber.mode, lanes, element2.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element2, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element2);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c3) {
            if (c3 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c3;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node5 = row;
            while (node5 !== null) {
              if (node5.tag === SuspenseComponent) {
                var state = node5.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node5;
                  }
                }
              } else if (node5.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node5.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node5.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node5;
                }
              } else if (node5.child !== null) {
                node5.child.return = node5;
                node5 = node5.child;
                continue;
              }
              if (node5 === row) {
                return null;
              }
              while (node5.sibling === null) {
                if (node5.return === null || node5.return === row) {
                  return null;
                }
                node5 = node5.return;
              }
              node5.sibling.return = node5.return;
              node5 = node5.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i4 = 0; i4 < workInProgressSources.length; i4++) {
              var mutableSource = workInProgressSources[i4];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root4, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root4.mutableSourceEagerHydrationData == null) {
              root4.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root4.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table2 = "";
                  var secondColumnStart = 30;
                  for (var i4 = 0; i4 <= hookTypesUpdateIndexDev; i4++) {
                    var oldHookName = hookTypesDev[i4];
                    var newHookName = i4 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i4 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table2 += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i4 = 0; i4 < prevDeps.length && i4 < nextDeps.length; i4++) {
              if (objectIs2(nextDeps[i4], prevDeps[i4])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component18, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component18(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component18(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState2;
            if (init !== void 0) {
              initialState2 = init(initialArg);
            } else {
              initialState2 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first2 = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first2;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first2);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs2(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs2(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs2(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs2(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs2(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs2(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState2) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState2 === "function") {
              initialState2 = initialState2();
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState2) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState2) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create3, destroy, deps) {
            var effect = {
              tag,
              create: create3,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create3, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create3, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create3, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, destroy, nextDeps);
          }
          function mountEffect(create3, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create3, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create3, deps);
            }
          }
          function updateEffect(create3, deps) {
            return updateEffectImpl(Passive, Passive$1, create3, deps);
          }
          function mountInsertionEffect(create3, deps) {
            return mountEffectImpl(Update, Insertion, create3, deps);
          }
          function updateInsertionEffect(create3, deps) {
            return updateEffectImpl(Update, Insertion, create3, deps);
          }
          function mountLayoutEffect(create3, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create3, deps);
          }
          function updateLayoutEffect(create3, deps) {
            return updateEffectImpl(Update, Layout, create3, deps);
          }
          function imperativeHandleEffect(create3, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create3();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create3();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create3, deps) {
            {
              if (typeof create3 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create3, deps) {
            {
              if (typeof create3 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs2(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root4 = getWorkInProgressRoot();
            var identifierPrefix = root4.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs2(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root4, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler2.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    root4.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    if (root4 !== null) {
                      root4.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError2 = showErrorDialog(boundary, errorInfo);
              if (logError2 === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e3) {
              setTimeout(function() {
                throw e3;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root4, wakeable, lanes) {
            var pingCache = root4.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root4.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root4, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root4, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root4, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node5 = returnFiber;
            do {
              if (node5.tag === SuspenseComponent && shouldCaptureSuspense(node5)) {
                return node5;
              }
              node5 = node5.return;
            } while (node5 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root4, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root4, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root4, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component18, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component18.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component18)
                  );
                }
              }
            }
            var render2 = Component18.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component18, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component18.type;
              if (isSimpleFunctionComponent(type) && Component18.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component18.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component18.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component18.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component18.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component18, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component18, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component18, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component18.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component18)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component18, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component18, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component18, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component18, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component18.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component18)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component18)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component18, nextProps);
              mountClassInstance(workInProgress2, Component18, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component18, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component18, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component18, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component18, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component18, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component18.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component18, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root4 = workInProgress2.stateNode;
            if (root4.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root4.pendingContext, root4.pendingContext !== root4.context);
            } else if (root4.context) {
              pushTopLevelContextObject(workInProgress2, root4.context, false);
            }
            pushHostContainer(workInProgress2, root4.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root4 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node5 = child;
                while (node5) {
                  node5.flags = node5.flags & ~Placement | Hydrating;
                  node5 = node5.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component18 = init(payload);
            workInProgress2.type = Component18;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component18);
            var resolvedProps = resolveDefaultProps(Component18, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component18);
                  workInProgress2.type = Component18 = resolveFunctionForHotReloading(Component18);
                }
                child = updateFunctionComponent(null, workInProgress2, Component18, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component18 = resolveClassForHotReloading(Component18);
                }
                child = updateClassComponent(null, workInProgress2, Component18, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component18 = resolveForwardRefForHotReloading(Component18);
                }
                child = updateForwardRef(null, workInProgress2, Component18, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component18.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component18)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component18,
                  resolveDefaultProps(Component18.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component18 !== null && typeof Component18 === "object" && Component18.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component18 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component18, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component18)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component18, nextProps);
            mountClassInstance(workInProgress2, Component18, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component18, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component18, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component18, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component18.prototype && typeof Component18.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component18) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component18, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component18) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component18) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component18)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component18, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component18, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component18, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component18);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component18) {
            {
              if (Component18) {
                if (Component18.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component18.displayName || Component18.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component18.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component18) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component18.contextType === "object" && Component18.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component18) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root4 = getWorkInProgressRoot();
                if (root4 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root4, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root4, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node5 = firstChild;
            while (node5 !== null) {
              if (node5.tag === SuspenseComponent) {
                var state = node5.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node5, renderLanes2, workInProgress2);
                }
              } else if (node5.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node5, renderLanes2, workInProgress2);
              } else if (node5.child !== null) {
                node5.child.return = node5;
                node5 = node5.child;
                continue;
              }
              if (node5 === workInProgress2) {
                return;
              }
              while (node5.sibling === null) {
                if (node5.return === null || node5.return === workInProgress2) {
                  return;
                }
                node5 = node5.return;
              }
              node5.sibling.return = node5.return;
              node5 = node5.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i4 = 0; i4 < children.length; i4++) {
                    if (!validateSuspenseListNestedChild(children[i4], i4)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs2(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root4 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component18 = workInProgress2.type;
                if (isContextProvider(Component18)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component18 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component18 ? unresolvedProps : resolveDefaultProps(Component18, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component18, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment20:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent3, workInProgress2, needsVisibilityToggle, isHidden2) {
              var node5 = workInProgress2.child;
              while (node5 !== null) {
                if (node5.tag === HostComponent || node5.tag === HostText) {
                  appendInitialChild(parent3, node5.stateNode);
                } else if (node5.tag === HostPortal)
                  ;
                else if (node5.child !== null) {
                  node5.child.return = node5;
                  node5 = node5.child;
                  continue;
                }
                if (node5 === workInProgress2) {
                  return;
                }
                while (node5.sibling === null) {
                  if (node5.return === null || node5.return === workInProgress2) {
                    return;
                  }
                  node5 = node5.return;
                }
                node5.sibling.return = node5.return;
                node5 = node5.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment20:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component18 = workInProgress2.type;
                if (isContextProvider(Component18)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next4 = renderState.tail;
                  renderState.rendering = next4;
                  renderState.tail = next4.sibling;
                  renderState.renderingStartTime = now();
                  next4.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next4;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component18 = workInProgress2.type;
                if (isContextProvider(Component18)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root4 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root4 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal2;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal2 = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal2 = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal2 === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root4, firstChild) {
            focusedInstanceHandle = prepareForCommit(root4.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root4 = finishedWork.stateNode;
                    clearContainer(root4.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create3 = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create3();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root4 = parentFiber.stateNode;
                            root4.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root4 = parentFiber.stateNode;
                              root4.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node5) {
            switch (node5.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node5.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node5, node5.return);
                  } finally {
                    recordLayoutEffectDuration(node5);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node5, node5.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node5.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node5, node5.return, instance);
                }
                safelyAttachRef(node5, node5.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node5, node5.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden2) {
            var hostSubtreeRoot = null;
            {
              var node5 = finishedWork;
              while (true) {
                if (node5.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node5;
                    try {
                      var instance = node5.stateNode;
                      if (isHidden2) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node5.stateNode, node5.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node5.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node5.stateNode;
                      if (isHidden2) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node5.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node5.tag === OffscreenComponent || node5.tag === LegacyHiddenComponent) && node5.memoizedState !== null && node5 !== finishedWork)
                  ;
                else if (node5.child !== null) {
                  node5.child.return = node5;
                  node5 = node5.child;
                  continue;
                }
                if (node5 === finishedWork) {
                  return;
                }
                while (node5.sibling === null) {
                  if (node5.return === null || node5.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node5) {
                    hostSubtreeRoot = null;
                  }
                  node5 = node5.return;
                }
                if (hostSubtreeRoot === node5) {
                  hostSubtreeRoot = null;
                }
                node5.sibling.return = node5.return;
                node5 = node5.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal2;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal2 = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal2 = ref(instanceToUse);
                }
                {
                  if (typeof retVal2 === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent3 = fiber.return;
            while (parent3 !== null) {
              if (isHostParent(parent3)) {
                return parent3;
              }
              parent3 = parent3.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node5 = fiber;
            siblings:
              while (true) {
                while (node5.sibling === null) {
                  if (node5.return === null || isHostParent(node5.return)) {
                    return null;
                  }
                  node5 = node5.return;
                }
                node5.sibling.return = node5.return;
                node5 = node5.sibling;
                while (node5.tag !== HostComponent && node5.tag !== HostText && node5.tag !== DehydratedFragment) {
                  if (node5.flags & Placement) {
                    continue siblings;
                  }
                  if (node5.child === null || node5.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node5.child.return = node5;
                    node5 = node5.child;
                  }
                }
                if (!(node5.flags & Placement)) {
                  return node5.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent3 = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent3);
                  parentFiber.flags &= ~ContentReset;
                }
                var before3 = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before3, parent3);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node5, before3, parent3) {
            var tag = node5.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node5.stateNode;
              if (before3) {
                insertInContainerBefore(parent3, stateNode, before3);
              } else {
                appendChildToContainer(parent3, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node5.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before3, parent3);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before3, parent3);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node5, before3, parent3) {
            var tag = node5.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node5.stateNode;
              if (before3) {
                insertBefore(parent3, stateNode, before3);
              } else {
                appendChild(parent3, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node5.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before3, parent3);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before3, parent3);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root4, returnFiber, deletedFiber) {
            {
              var parent3 = returnFiber;
              findParent:
                while (parent3 !== null) {
                  switch (parent3.tag) {
                    case HostComponent: {
                      hostParent = parent3.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent3.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent3.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent3 = parent3.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root4, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent3) {
            var child = parent3.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root4, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root4);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root4, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i4 = 0; i4 < deletions.length; i4++) {
                var childToDelete = deletions[i4];
                try {
                  commitDeletionEffects(root4, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root4);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root4, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root4.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden2 = newState !== null;
                  offscreenInstance.isHidden = isHidden2;
                  if (isHidden2) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root4, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root4, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root4, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden2 = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden2 || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root4,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root4, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden2 = fiber.memoizedState !== null;
                  if (isHidden2) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden2 = fiber.memoizedState !== null;
                if (isHidden2) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root4, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root4, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root4, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i4 = 0; i4 < deletions.length; i4++) {
                    var fiberToDelete = deletions[i4];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition3 = ReactCurrentBatchConfig$3.transition;
                if (!transition3._updatedFibers) {
                  transition3._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition3._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root4, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root4, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root4 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root4, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root4 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root4, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root4, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root4, lane, eventTime) {
            var current2 = root4.current;
            current2.lanes = lane;
            markRootUpdated(root4, lane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root4, currentTime) {
            var existingCallbackNode = root4.callbackNode;
            markStarvedLanesAsExpired(root4, currentTime);
            var nextLanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root4.callbackNode = null;
              root4.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root4.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root4.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root4));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root4));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask2(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority2;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority2;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root4));
            }
            root4.callbackPriority = newCallbackPriority;
            root4.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root4, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root4.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root4.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root4, lanes) && !includesExpiredLane(root4, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root4, lanes) : renderRootSync(root4, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root4, NoLanes);
                markRootSuspended$1(root4, lanes);
                ensureRootIsScheduled(root4, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root4, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root4, lanes);
                var finishedWork = root4.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root4, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root4, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root4, NoLanes);
                    markRootSuspended$1(root4, lanes);
                    ensureRootIsScheduled(root4, now());
                    throw _fatalError;
                  }
                }
                root4.finishedWork = finishedWork;
                root4.finishedLanes = lanes;
                finishConcurrentRender(root4, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root4, now());
            if (root4.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root4);
            }
            return null;
          }
          function recoverFromConcurrentError(root4, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root4)) {
              var rootWorkInProgress = prepareFreshStack(root4, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root4.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root4, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root4, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root4, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root4.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root4, suspendedLanes);
                      break;
                    }
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root4, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node5 = finishedWork;
            while (true) {
              if (node5.flags & StoreConsistency) {
                var updateQueue = node5.updateQueue;
                if (updateQueue !== null) {
                  var checks2 = updateQueue.stores;
                  if (checks2 !== null) {
                    for (var i4 = 0; i4 < checks2.length; i4++) {
                      var check = checks2[i4];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs2(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node5.child;
              if (node5.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node5;
                node5 = child;
                continue;
              }
              if (node5 === finishedWork) {
                return true;
              }
              while (node5.sibling === null) {
                if (node5.return === null || node5.return === finishedWork) {
                  return true;
                }
                node5 = node5.return;
              }
              node5.sibling.return = node5.return;
              node5 = node5.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root4, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root4, suspendedLanes);
          }
          function performSyncWorkOnRoot(root4) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root4, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root4, now());
              return null;
            }
            var exitStatus = renderRootSync(root4, lanes);
            if (root4.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root4, NoLanes);
              markRootSuspended$1(root4, lanes);
              ensureRootIsScheduled(root4, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root4.current.alternate;
            root4.finishedWork = finishedWork;
            root4.finishedLanes = lanes;
            commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root4, now());
            return null;
          }
          function flushRoot(root4, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root4, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root4, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn2, a3, b4, c3, d3) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn2(a3, b4, c3, d3);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn2) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn2) {
                return fn2();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root4, lanes) {
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            var timeoutHandle = root4.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root4.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root4;
            var rootWorkInProgress = createWorkInProgress(root4.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root4, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root4, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next4;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next4 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next4 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next4 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next4;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next4 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next4 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next4 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next4 !== null) {
                  workInProgress = next4;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root4, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root4, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root4, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root4.finishedWork;
            var lanes = root4.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            if (finishedWork === root4.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root4.callbackNode = null;
            root4.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root4, remainingLanes);
            if (root4 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority2, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root4, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root4, finishedWork, lanes);
              resetAfterCommit(root4.containerInfo);
              root4.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root4, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root4.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root4;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root4.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root4.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root4.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root4, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root4.onRecoverableError;
              for (var i4 = 0; i4 < recoverableErrors.length; i4++) {
                var recoverableError = recoverableErrors[i4];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root4.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root4.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root4 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root4;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority2, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root4 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root4.current);
            commitPassiveMountEffects(root4, root4.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i4 = 0; i4 < profilerEffects.length; i4++) {
                var _fiber = profilerEffects[i4];
                commitPassiveEffectDurations(root4, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root4.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root4 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root4;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root4);
            {
              var stateNode = root4.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root4 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root4 !== null) {
              markRootUpdated(root4, SyncLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root4 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root4 !== null) {
                    markRootUpdated(root4, SyncLane, eventTime);
                    ensureRootIsScheduled(root4, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root4, wakeable, pingedLanes) {
            var pingCache = root4.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root4, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root4);
            if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root4, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root4, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root4 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root4 !== null) {
              markRootUpdated(root4, retryLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root4, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root4.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root4, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root4) {
            {
              if (root4.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element2) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element2.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root4, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root4, element2) {
            {
              if (root4.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element2, root4, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root2 !== null) {
                  scheduleUpdateOnFiber(_root2, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root4, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node5 = fiber;
              while (true) {
                switch (node5.tag) {
                  case HostComponent:
                    hostInstances.add(node5.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node5.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node5.stateNode.containerInfo);
                    return;
                }
                if (node5.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node5 = node5.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node5 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node5.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node5.stateNode);
                } else if (node5.child !== null) {
                  node5.child.return = node5;
                  node5 = node5.child;
                  continue;
                }
                if (node5 === fiber) {
                  return foundHostInstances;
                }
                while (node5.sibling === null) {
                  if (node5.return === null || node5.return === fiber) {
                    return foundHostInstances;
                  }
                  node5 = node5.return;
                }
                node5.sibling.return = node5.return;
                node5 = node5.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e3) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component18) {
            var prototype = Component18.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component18) {
            if (typeof Component18 === "function") {
              return shouldConstruct$1(Component18) ? ClassComponent : FunctionComponent;
            } else if (Component18 !== void 0 && Component18 !== null) {
              var $$typeof = Component18.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE2:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element2, mode, lanes) {
            var owner = null;
            {
              owner = element2._owner;
            }
            var type = element2.type;
            var key = element2.key;
            var pendingProps = element2.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element2._source;
              fiber._debugOwner = element2._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment20, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content3, mode, lanes) {
            var fiber = createFiber(HostText, content3, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root4 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root4.current = uninitializedFiber;
            uninitializedFiber.stateNode = root4;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root4;
          }
          var ReactVersion = "18.2.0";
          function createPortal3(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component18 = fiber.type;
              if (isContextProvider(Component18)) {
                return processChildContext(fiber, Component18, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root4 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root4.context = getContextForSubtree(null);
            var current2 = root4.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root4, lane, eventTime);
            return root4;
          }
          function updateContainer(element2, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element2);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element: element2
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root4 = enqueueUpdate(current$1, update, lane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, current$1, lane, eventTime);
              entangleTransitions(root4, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root4 = fiber.stateNode;
                if (isRootDehydrated(root4)) {
                  var lanes = getHighestPriorityPendingLanes(root4);
                  flushRoot(root4, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root5 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root5 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root5, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path4, index3) {
              var key = path4[index3];
              var updated = isArray(obj) ? obj.slice() : assign4({}, obj);
              if (index3 + 1 === path4.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path4, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path4) {
              return copyWithDeleteImpl(obj, path4, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign4({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i4 = 0; i4 < newPath.length - 1; i4++) {
                  if (oldPath[i4] !== newPath[i4]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path4, index3, value) {
              if (index3 >= path4.length) {
                return value;
              }
              var key = path4[index3];
              var updated = isArray(obj) ? obj.slice() : assign4({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path4, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path4, value) {
              return copyWithSetImpl(obj, path4, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path4, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path4, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign4({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path4) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path4);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign4({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign4({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path4, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path4, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path4) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path4);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root4 = this._internalRoot;
            if (root4 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root4.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root4.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root4, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root4 = this._internalRoot;
            if (root4 !== null) {
              this._internalRoot = null;
              var container = root4.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root4, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root4 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root4);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root4 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i4 = 0; i4 < mutableSources.length; i4++) {
                var mutableSource = mutableSources[i4];
                registerMutableSourceForHydration(root4, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root4);
          }
          function isValidContainer(node5) {
            return !!(node5 && (node5.nodeType === ELEMENT_NODE || node5.nodeType === DOCUMENT_NODE || node5.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node5) {
            return !!(node5 && (node5.nodeType === ELEMENT_NODE || node5.nodeType === DOCUMENT_NODE || node5.nodeType === DOCUMENT_FRAGMENT_NODE || node5.nodeType === COMMENT_NODE && node5.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root4);
                  originalCallback.call(instance);
                };
              }
              var root4 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root4;
              markContainerAsRoot(root4.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root4;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root2);
                  _originalCallback.call(instance);
                };
              }
              var _root2 = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root2;
              markContainerAsRoot(_root2.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root2, parentComponent, callback);
              });
              return _root2;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root4;
            if (!maybeRoot) {
              root4 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root4 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root4);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root4, parentComponent, callback);
            }
            return getPublicRootInstance(root4);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element2, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, true, callback);
          }
          function render(element2, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element2, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority2);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal3(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn2) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn2);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM4 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // ../node_modules/react-dom/client.js
  var require_client = __commonJS({
    "../node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports.createRoot = m2.createRoot;
        exports.hydrateRoot = m2.hydrateRoot;
      } else {
        i4 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c3, o3) {
          i4.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c3, o3);
          } finally {
            i4.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c3, h4, o3) {
          i4.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c3, h4, o3);
          } finally {
            i4.usingClientEntryPoint = false;
          }
        };
      }
      var i4;
    }
  });

  // ../node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "../node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React248 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React248.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign4 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign4({}, props, {
                    value: prevLog
                  }),
                  info: assign4({}, props, {
                    value: prevInfo
                  }),
                  warn: assign4({}, props, {
                    value: prevWarn
                  }),
                  error: assign4({}, props, {
                    value: prevError
                  }),
                  group: assign4({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign4({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign4({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component18) {
            var prototype = Component18.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element2) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a3) {
            return isArrayImpl(a3);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element2 = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element2._store = {};
              Object.defineProperty(element2._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element2, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element2, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element2.props);
                Object.freeze(element2);
              }
            }
            return element2;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement10(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element2, parentType) {
            {
              if (!element2._store || element2._store.validated || element2.key != null) {
                return;
              }
              element2._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element2 && element2._owner && element2._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element2._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element2);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node5, parentType) {
            {
              if (typeof node5 !== "object") {
                return;
              }
              if (isArray(node5)) {
                for (var i4 = 0; i4 < node5.length; i4++) {
                  var child = node5[i4];
                  if (isValidElement10(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement10(node5)) {
                if (node5._store) {
                  node5._store.validated = true;
                }
              } else if (node5) {
                var iteratorFn = getIteratorFn(node5);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node5.entries) {
                    var iterator = iteratorFn.call(node5);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement10(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element2) {
            {
              var type = element2.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element2.props, "prop", name, element2);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment2) {
            {
              var keys2 = Object.keys(fragment2.props);
              for (var i4 = 0; i4 < keys2.length; i4++) {
                var key = keys2[i4];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment2);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment2.ref !== null) {
                setCurrentlyValidatingElement$1(fragment2);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element2 = jsxDEV(type, props, key, source, self2);
              if (element2 == null) {
                return element2;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i4 = 0; i4 < children.length; i4++) {
                        validateChildKeys(children[i4], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element2);
              } else {
                validatePropTypes(element2);
              }
              return element2;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx27 = jsxWithValidationDynamic;
          var jsxs19 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx27;
          exports.jsxs = jsxs19;
        })();
      }
    }
  });

  // ../node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "../node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // ../node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development2 = __commonJS({
    "../node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = true;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (
            // If Scheduler runs in a non-DOM environment, it falls back to a naive
            // implementation using setTimeout.
            typeof window === "undefined" || // Check if MessageChannel is supported, too.
            typeof MessageChannel !== "function"
          ) {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e3) {
                  setTimeout(_flushCallback, 0);
                  throw e3;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame2 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push2(heap, node5) {
            var index2 = heap.length;
            heap.push(node5);
            siftUp(heap, node5, index2);
          }
          function peek2(heap) {
            var first2 = heap[0];
            return first2 === void 0 ? null : first2;
          }
          function pop(heap) {
            var first2 = heap[0];
            if (first2 !== void 0) {
              var last2 = heap.pop();
              if (last2 !== first2) {
                heap[0] = last2;
                siftDown(heap, last2, 0);
              }
              return first2;
            } else {
              return null;
            }
          }
          function siftUp(heap, node5, i4) {
            var index2 = i4;
            while (true) {
              var parentIndex = index2 - 1 >>> 1;
              var parent3 = heap[parentIndex];
              if (parent3 !== void 0 && compare(parent3, node5) > 0) {
                heap[parentIndex] = node5;
                heap[index2] = parent3;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node5, i4) {
            var index2 = i4;
            var length2 = heap.length;
            while (index2 < length2) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node5) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node5;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node5;
                  index2 = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node5) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node5;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a3, b4) {
            var diff = a3.sortIndex - b4.sortIndex;
            return diff !== 0 ? diff : a3.id - b4.id;
          }
          var NoPriority = 0;
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority2 = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          var runIdCounter = 0;
          var mainThreadIdCounter = 0;
          var profilingStateSize = 4;
          var sharedProfilingBuffer = (
            // $FlowFixMe Flow doesn't know about SharedArrayBuffer
            typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : (
              // $FlowFixMe Flow doesn't know about ArrayBuffer
              typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null
            )
          );
          var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
          var PRIORITY = 0;
          var CURRENT_TASK_ID = 1;
          var CURRENT_RUN_ID = 2;
          var QUEUE_SIZE = 3;
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[QUEUE_SIZE] = 0;
            profilingState[CURRENT_TASK_ID] = 0;
          }
          var INITIAL_EVENT_LOG_SIZE = 131072;
          var MAX_EVENT_LOG_SIZE = 524288;
          var eventLogSize = 0;
          var eventLogBuffer = null;
          var eventLog = null;
          var eventLogIndex = 0;
          var TaskStartEvent = 1;
          var TaskCompleteEvent = 2;
          var TaskErrorEvent = 3;
          var TaskCancelEvent = 4;
          var TaskRunEvent = 5;
          var TaskYieldEvent = 6;
          var SchedulerSuspendEvent = 7;
          var SchedulerResumeEvent = 8;
          function logEvent(entries) {
            if (eventLog !== null) {
              var offset3 = eventLogIndex;
              eventLogIndex += entries.length;
              if (eventLogIndex + 1 > eventLogSize) {
                eventLogSize *= 2;
                if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                  console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                  stopLoggingProfilingEvents();
                  return;
                }
                var newEventLog = new Int32Array(eventLogSize * 4);
                newEventLog.set(eventLog);
                eventLogBuffer = newEventLog.buffer;
                eventLog = newEventLog;
              }
              eventLog.set(entries, offset3);
            }
          }
          function startLoggingProfilingEvents() {
            eventLogSize = INITIAL_EVENT_LOG_SIZE;
            eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
            eventLog = new Int32Array(eventLogBuffer);
            eventLogIndex = 0;
          }
          function stopLoggingProfilingEvents() {
            var buffer2 = eventLogBuffer;
            eventLogSize = 0;
            eventLogBuffer = null;
            eventLog = null;
            eventLogIndex = 0;
            return buffer2;
          }
          function markTaskStart(task, ms) {
            {
              profilingState[QUEUE_SIZE]++;
              if (eventLog !== null) {
                logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
              }
            }
          }
          function markTaskCompleted(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskCanceled(task, ms) {
            {
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCancelEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskErrored(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskErrorEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskRun(task, ms) {
            {
              runIdCounter++;
              profilingState[PRIORITY] = task.priorityLevel;
              profilingState[CURRENT_TASK_ID] = task.id;
              profilingState[CURRENT_RUN_ID] = runIdCounter;
              if (eventLog !== null) {
                logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markTaskYield(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[CURRENT_RUN_ID] = 0;
              if (eventLog !== null) {
                logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markSchedulerSuspended(ms) {
            {
              mainThreadIdCounter++;
              if (eventLog !== null) {
                logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          function markSchedulerUnsuspended(ms) {
            {
              if (eventLog !== null) {
                logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority2;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
                {
                  markTaskStart(timer, currentTime);
                  timer.isQueued = true;
                }
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            {
              markSchedulerUnsuspended(initialTime2);
            }
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
              {
                var _currentTime = exports.unstable_now();
                markSchedulerSuspended(_currentTime);
              }
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                markTaskRun(currentTask, currentTime);
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                  markTaskYield(currentTask, currentTime);
                } else {
                  {
                    markTaskCompleted(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority2;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
                priorityLevel = NormalPriority2;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority2:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            {
              newTask.isQueued = false;
            }
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push2(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              {
                markTaskStart(newTask, currentTime);
                newTask.isQueued = true;
              }
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            {
              if (task.isQueued) {
                var currentTime = exports.unstable_now();
                markTaskCanceled(task, currentTime);
                task.isQueued = false;
              }
            }
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = {
            startLoggingProfilingEvents,
            stopLoggingProfilingEvents,
            sharedProfilingBuffer
          };
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority2;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // ../node_modules/scheduler/index.js
  var require_scheduler2 = __commonJS({
    "../node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development2();
      }
    }
  });

  // ../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE2 = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE2:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element5 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment20 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE2;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement4(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE2;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element5;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment20;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement4;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // ../node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "../node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // ../node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "../node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i4 = 0; i4 < 10; i4++) {
            test2["_" + String.fromCharCode(i4)] = i4;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n6) {
            return test2[n6];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s3 = 1; s3 < arguments.length; s3++) {
          from2 = Object(arguments[s3]);
          for (var key in from2) {
            if (hasOwnProperty2.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i4 = 0; i4 < symbols.length; i4++) {
              if (propIsEnumerable.call(from2, symbols[i4])) {
                to[symbols[i4]] = from2[symbols[i4]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // ../node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // ../node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "../node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // ../node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "../node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text4) {
          var message = "Warning: " + text4;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values2, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // ../node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs2 = require_react_is();
      var assign4 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text4) {
          var message = "Warning: " + text4;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement10, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is3(x2, y3) {
          if (x2 === y3) {
            return x2 !== 0 || 1 / x2 === 1 / y3;
          } else {
            return x2 !== x2 && y3 !== y3;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i4 = 0; i4 < propValue.length; i4++) {
              var error = typeChecker(propValue, i4, componentName, location2, propFullName + "[" + i4 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement10(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs2.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i4 = 0; i4 < expectedValues.length; i4++) {
              if (is3(propValue, expectedValues[i4])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i4 = 0; i4 < arrayOfTypeCheckers.length; i4++) {
            var checker = arrayOfTypeCheckers[i4];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i4 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i5 = 0; i5 < arrayOfTypeCheckers.length; i5++) {
              var checker2 = arrayOfTypeCheckers[i5];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign4({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement10(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // ../node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "../node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs2 = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs2.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs2;
      var throwOnDirectAccess;
    }
  });

  // ../node_modules/direction/index.js
  var require_direction = __commonJS({
    "../node_modules/direction/index.js"(exports, module) {
      "use strict";
      module.exports = direction;
      var RTL = "\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC";
      var LTR = "A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u0300-\u0590\u0800-\u1FFF\u200E\u2C00-\uFB1C\uFE00-\uFE6F\uFEFD-\uFFFF";
      var rtl = new RegExp("^[^" + LTR + "]*[" + RTL + "]");
      var ltr = new RegExp("^[^" + RTL + "]*[" + LTR + "]");
      function direction(value) {
        value = String(value || "");
        if (rtl.test(value)) {
          return "rtl";
        }
        if (ltr.test(value)) {
          return "ltr";
        }
        return "neutral";
      }
    }
  });

  // ../node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "../node_modules/lodash/isObject.js"(exports, module) {
      function isObject4(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module.exports = isObject4;
    }
  });

  // ../node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "../node_modules/lodash/_freeGlobal.js"(exports, module) {
      var freeGlobal = typeof window == "object" && window && window.Object === Object && window;
      module.exports = freeGlobal;
    }
  });

  // ../node_modules/lodash/_root.js
  var require_root = __commonJS({
    "../node_modules/lodash/_root.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root3 = freeGlobal || freeSelf || Function("return this")();
      module.exports = root3;
    }
  });

  // ../node_modules/lodash/now.js
  var require_now = __commonJS({
    "../node_modules/lodash/now.js"(exports, module) {
      var root3 = require_root();
      var now = function() {
        return root3.Date.now();
      };
      module.exports = now;
    }
  });

  // ../node_modules/lodash/_trimmedEndIndex.js
  var require_trimmedEndIndex = __commonJS({
    "../node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
      var reWhitespace = /\s/;
      function trimmedEndIndex(string5) {
        var index2 = string5.length;
        while (index2-- && reWhitespace.test(string5.charAt(index2))) {
        }
        return index2;
      }
      module.exports = trimmedEndIndex;
    }
  });

  // ../node_modules/lodash/_baseTrim.js
  var require_baseTrim = __commonJS({
    "../node_modules/lodash/_baseTrim.js"(exports, module) {
      var trimmedEndIndex = require_trimmedEndIndex();
      var reTrimStart = /^\s+/;
      function baseTrim(string5) {
        return string5 ? string5.slice(0, trimmedEndIndex(string5) + 1).replace(reTrimStart, "") : string5;
      }
      module.exports = baseTrim;
    }
  });

  // ../node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "../node_modules/lodash/_Symbol.js"(exports, module) {
      var root3 = require_root();
      var Symbol3 = root3.Symbol;
      module.exports = Symbol3;
    }
  });

  // ../node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "../node_modules/lodash/_getRawTag.js"(exports, module) {
      var Symbol3 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol3 ? Symbol3.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e3) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      module.exports = getRawTag;
    }
  });

  // ../node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "../node_modules/lodash/_objectToString.js"(exports, module) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module.exports = objectToString;
    }
  });

  // ../node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "../node_modules/lodash/_baseGetTag.js"(exports, module) {
      var Symbol3 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol3 ? Symbol3.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module.exports = baseGetTag;
    }
  });

  // ../node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "../node_modules/lodash/isObjectLike.js"(exports, module) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module.exports = isObjectLike;
    }
  });

  // ../node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "../node_modules/lodash/isSymbol.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module.exports = isSymbol;
    }
  });

  // ../node_modules/lodash/toNumber.js
  var require_toNumber = __commonJS({
    "../node_modules/lodash/toNumber.js"(exports, module) {
      var baseTrim = require_baseTrim();
      var isObject4 = require_isObject();
      var isSymbol = require_isSymbol();
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject4(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject4(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module.exports = toNumber;
    }
  });

  // ../node_modules/lodash/debounce.js
  var require_debounce = __commonJS({
    "../node_modules/lodash/debounce.js"(exports, module) {
      var isObject4 = require_isObject();
      var now = require_now();
      var toNumber = require_toNumber();
      var FUNC_ERROR_TEXT = "Expected a function";
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      function debounce3(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject4(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time2) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time2;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time2) {
          lastInvokeTime = time2;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time2) : result;
        }
        function remainingWait(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time2 = now();
          if (shouldInvoke(time2)) {
            return trailingEdge(time2);
          }
          timerId = setTimeout(timerExpired, remainingWait(time2));
        }
        function trailingEdge(time2) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time2);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now());
        }
        function debounced() {
          var time2 = now(), isInvoking = shouldInvoke(time2);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time2;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      module.exports = debounce3;
    }
  });

  // ../node_modules/lodash/throttle.js
  var require_throttle = __commonJS({
    "../node_modules/lodash/throttle.js"(exports, module) {
      var debounce3 = require_debounce();
      var isObject4 = require_isObject();
      var FUNC_ERROR_TEXT = "Expected a function";
      function throttle2(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject4(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce3(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      module.exports = throttle2;
    }
  });

  // ../node_modules/is-hotkey/lib/index.js
  var require_lib = __commonJS({
    "../node_modules/is-hotkey/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var IS_MAC = typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
      var MODIFIERS = {
        alt: "altKey",
        control: "ctrlKey",
        meta: "metaKey",
        shift: "shiftKey"
      };
      var ALIASES = {
        add: "+",
        break: "pause",
        cmd: "meta",
        command: "meta",
        ctl: "control",
        ctrl: "control",
        del: "delete",
        down: "arrowdown",
        esc: "escape",
        ins: "insert",
        left: "arrowleft",
        mod: IS_MAC ? "meta" : "control",
        opt: "alt",
        option: "alt",
        return: "enter",
        right: "arrowright",
        space: " ",
        spacebar: " ",
        up: "arrowup",
        win: "meta",
        windows: "meta"
      };
      var CODES = {
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        control: 17,
        alt: 18,
        pause: 19,
        capslock: 20,
        escape: 27,
        " ": 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        arrowleft: 37,
        arrowup: 38,
        arrowright: 39,
        arrowdown: 40,
        insert: 45,
        delete: 46,
        meta: 91,
        numlock: 144,
        scrolllock: 145,
        ";": 186,
        "=": 187,
        ",": 188,
        "-": 189,
        ".": 190,
        "/": 191,
        "`": 192,
        "[": 219,
        "\\": 220,
        "]": 221,
        "'": 222
      };
      for (f4 = 1; f4 < 20; f4++) {
        CODES["f" + f4] = 111 + f4;
      }
      var f4;
      function isHotkey3(hotkey, options, event) {
        if (options && !("byKey" in options)) {
          event = options;
          options = null;
        }
        if (!Array.isArray(hotkey)) {
          hotkey = [hotkey];
        }
        var array = hotkey.map(function(string5) {
          return parseHotkey(string5, options);
        });
        var check = function check2(e3) {
          return array.some(function(object) {
            return compareHotkey(object, e3);
          });
        };
        var ret = event == null ? check : check(event);
        return ret;
      }
      function isCodeHotkey(hotkey, event) {
        return isHotkey3(hotkey, event);
      }
      function isKeyHotkey(hotkey, event) {
        return isHotkey3(hotkey, { byKey: true }, event);
      }
      function parseHotkey(hotkey, options) {
        var byKey = options && options.byKey;
        var ret = {};
        hotkey = hotkey.replace("++", "+add");
        var values2 = hotkey.split("+");
        var length2 = values2.length;
        for (var k2 in MODIFIERS) {
          ret[MODIFIERS[k2]] = false;
        }
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var value = _step.value;
            var optional2 = value.endsWith("?") && value.length > 1;
            if (optional2) {
              value = value.slice(0, -1);
            }
            var name = toKeyName(value);
            var modifier = MODIFIERS[name];
            if (length2 === 1 || !modifier) {
              if (byKey) {
                ret.key = name;
              } else {
                ret.which = toKeyCode(value);
              }
            }
            if (modifier) {
              ret[modifier] = optional2 ? null : true;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        return ret;
      }
      function compareHotkey(object, event) {
        for (var key in object) {
          var expected = object[key];
          var actual = void 0;
          if (expected == null) {
            continue;
          }
          if (key === "key" && event.key != null) {
            actual = event.key.toLowerCase();
          } else if (key === "which") {
            actual = expected === 91 && event.which === 93 ? 91 : event.which;
          } else {
            actual = event[key];
          }
          if (actual == null && expected === false) {
            continue;
          }
          if (actual !== expected) {
            return false;
          }
        }
        return true;
      }
      function toKeyCode(name) {
        name = toKeyName(name);
        var code2 = CODES[name] || name.toUpperCase().charCodeAt(0);
        return code2;
      }
      function toKeyName(name) {
        name = name.toLowerCase();
        name = ALIASES[name] || name;
        return name;
      }
      exports.default = isHotkey3;
      exports.isHotkey = isHotkey3;
      exports.isCodeHotkey = isCodeHotkey;
      exports.isKeyHotkey = isKeyHotkey;
      exports.parseHotkey = parseHotkey;
      exports.compareHotkey = compareHotkey;
      exports.toKeyCode = toKeyCode;
      exports.toKeyName = toKeyName;
    }
  });

  // ../node_modules/is-buffer/index.js
  var require_is_buffer = __commonJS({
    "../node_modules/is-buffer/index.js"(exports, module) {
      module.exports = function isBuffer2(obj) {
        return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
      };
    }
  });

  // ../node_modules/extend/index.js
  var require_extend = __commonJS({
    "../node_modules/extend/index.js"(exports, module) {
      "use strict";
      var hasOwn = Object.prototype.hasOwnProperty;
      var toStr = Object.prototype.toString;
      var defineProperty = Object.defineProperty;
      var gOPD = Object.getOwnPropertyDescriptor;
      var isArray = function isArray2(arr) {
        if (typeof Array.isArray === "function") {
          return Array.isArray(arr);
        }
        return toStr.call(arr) === "[object Array]";
      };
      var isPlainObject4 = function isPlainObject5(obj) {
        if (!obj || toStr.call(obj) !== "[object Object]") {
          return false;
        }
        var hasOwnConstructor = hasOwn.call(obj, "constructor");
        var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
        if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
          return false;
        }
        var key;
        for (key in obj) {
        }
        return typeof key === "undefined" || hasOwn.call(obj, key);
      };
      var setProperty = function setProperty2(target, options) {
        if (defineProperty && options.name === "__proto__") {
          defineProperty(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true
          });
        } else {
          target[options.name] = options.newValue;
        }
      };
      var getProperty = function getProperty2(obj, name) {
        if (name === "__proto__") {
          if (!hasOwn.call(obj, name)) {
            return void 0;
          } else if (gOPD) {
            return gOPD(obj, name).value;
          }
        }
        return obj[name];
      };
      module.exports = function extend2() {
        var options, name, src, copy2, copyIsArray, clone;
        var target = arguments[0];
        var i4 = 1;
        var length2 = arguments.length;
        var deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[1] || {};
          i4 = 2;
        }
        if (target == null || typeof target !== "object" && typeof target !== "function") {
          target = {};
        }
        for (; i4 < length2; ++i4) {
          options = arguments[i4];
          if (options != null) {
            for (name in options) {
              src = getProperty(target, name);
              copy2 = getProperty(options, name);
              if (target !== copy2) {
                if (deep && copy2 && (isPlainObject4(copy2) || (copyIsArray = isArray(copy2)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && isArray(src) ? src : [];
                  } else {
                    clone = src && isPlainObject4(src) ? src : {};
                  }
                  setProperty(target, { name, newValue: extend2(deep, clone, copy2) });
                } else if (typeof copy2 !== "undefined") {
                  setProperty(target, { name, newValue: copy2 });
                }
              }
            }
          }
        }
        return target;
      };
    }
  });

  // ../node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "../node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE2:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element5 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment20 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE2;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement4(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE2;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element5;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment20;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement4;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // ../node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "../node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // ../node_modules/inline-style-parser/index.js
  var require_inline_style_parser = __commonJS({
    "../node_modules/inline-style-parser/index.js"(exports, module) {
      var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
      var NEWLINE_REGEX = /\n/g;
      var WHITESPACE_REGEX = /^\s*/;
      var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
      var COLON_REGEX = /^:\s*/;
      var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
      var SEMICOLON_REGEX = /^[;\s]*/;
      var TRIM_REGEX = /^\s+|\s+$/g;
      var NEWLINE = "\n";
      var FORWARD_SLASH = "/";
      var ASTERISK = "*";
      var EMPTY_STRING = "";
      var TYPE_COMMENT = "comment";
      var TYPE_DECLARATION = "declaration";
      module.exports = function(style, options) {
        if (typeof style !== "string") {
          throw new TypeError("First argument must be a string");
        }
        if (!style)
          return [];
        options = options || {};
        var lineno = 1;
        var column2 = 1;
        function updatePosition(str) {
          var lines = str.match(NEWLINE_REGEX);
          if (lines)
            lineno += lines.length;
          var i4 = str.lastIndexOf(NEWLINE);
          column2 = ~i4 ? str.length - i4 : column2 + str.length;
        }
        function position4() {
          var start2 = { line: lineno, column: column2 };
          return function(node5) {
            node5.position = new Position2(start2);
            whitespace3();
            return node5;
          };
        }
        function Position2(start2) {
          this.start = start2;
          this.end = { line: lineno, column: column2 };
          this.source = options.source;
        }
        Position2.prototype.content = style;
        var errorsList = [];
        function error(msg2) {
          var err = new Error(
            options.source + ":" + lineno + ":" + column2 + ": " + msg2
          );
          err.reason = msg2;
          err.filename = options.source;
          err.line = lineno;
          err.column = column2;
          err.source = style;
          if (options.silent) {
            errorsList.push(err);
          } else {
            throw err;
          }
        }
        function match2(re2) {
          var m2 = re2.exec(style);
          if (!m2)
            return;
          var str = m2[0];
          updatePosition(str);
          style = style.slice(str.length);
          return m2;
        }
        function whitespace3() {
          match2(WHITESPACE_REGEX);
        }
        function comments(rules2) {
          var c3;
          rules2 = rules2 || [];
          while (c3 = comment2()) {
            if (c3 !== false) {
              rules2.push(c3);
            }
          }
          return rules2;
        }
        function comment2() {
          var pos = position4();
          if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1))
            return;
          var i4 = 2;
          while (EMPTY_STRING != style.charAt(i4) && (ASTERISK != style.charAt(i4) || FORWARD_SLASH != style.charAt(i4 + 1))) {
            ++i4;
          }
          i4 += 2;
          if (EMPTY_STRING === style.charAt(i4 - 1)) {
            return error("End of comment missing");
          }
          var str = style.slice(2, i4 - 2);
          column2 += 2;
          updatePosition(str);
          style = style.slice(i4);
          column2 += 2;
          return pos({
            type: TYPE_COMMENT,
            comment: str
          });
        }
        function declaration2() {
          var pos = position4();
          var prop = match2(PROPERTY_REGEX);
          if (!prop)
            return;
          comment2();
          if (!match2(COLON_REGEX))
            return error("property missing ':'");
          var val = match2(VALUE_REGEX);
          var ret = pos({
            type: TYPE_DECLARATION,
            property: trim2(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
            value: val ? trim2(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
          });
          match2(SEMICOLON_REGEX);
          return ret;
        }
        function declarations() {
          var decls = [];
          comments(decls);
          var decl;
          while (decl = declaration2()) {
            if (decl !== false) {
              decls.push(decl);
              comments(decls);
            }
          }
          return decls;
        }
        whitespace3();
        return declarations();
      };
      function trim2(str) {
        return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
      }
    }
  });

  // ../node_modules/style-to-object/index.js
  var require_style_to_object = __commonJS({
    "../node_modules/style-to-object/index.js"(exports, module) {
      var parse3 = require_inline_style_parser();
      function StyleToObject2(style, iterator) {
        var output = null;
        if (!style || typeof style !== "string") {
          return output;
        }
        var declaration2;
        var declarations = parse3(style);
        var hasIterator = typeof iterator === "function";
        var property;
        var value;
        for (var i4 = 0, len = declarations.length; i4 < len; i4++) {
          declaration2 = declarations[i4];
          property = declaration2.property;
          value = declaration2.value;
          if (hasIterator) {
            iterator(property, value, declaration2);
          } else if (value) {
            output || (output = {});
            output[property] = value;
          }
        }
        return output;
      }
      module.exports = StyleToObject2;
      module.exports.default = StyleToObject2;
    }
  });

  // ../node_modules/source-map/lib/base64.js
  var require_base64 = __commonJS({
    "../node_modules/source-map/lib/base64.js"(exports) {
      var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      exports.encode = function(number2) {
        if (0 <= number2 && number2 < intToCharMap.length) {
          return intToCharMap[number2];
        }
        throw new TypeError("Must be between 0 and 63: " + number2);
      };
      exports.decode = function(charCode) {
        var bigA = 65;
        var bigZ = 90;
        var littleA = 97;
        var littleZ = 122;
        var zero = 48;
        var nine = 57;
        var plus = 43;
        var slash = 47;
        var littleOffset = 26;
        var numberOffset = 52;
        if (bigA <= charCode && charCode <= bigZ) {
          return charCode - bigA;
        }
        if (littleA <= charCode && charCode <= littleZ) {
          return charCode - littleA + littleOffset;
        }
        if (zero <= charCode && charCode <= nine) {
          return charCode - zero + numberOffset;
        }
        if (charCode == plus) {
          return 62;
        }
        if (charCode == slash) {
          return 63;
        }
        return -1;
      };
    }
  });

  // ../node_modules/source-map/lib/base64-vlq.js
  var require_base64_vlq = __commonJS({
    "../node_modules/source-map/lib/base64-vlq.js"(exports) {
      var base64 = require_base64();
      var VLQ_BASE_SHIFT = 5;
      var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
      var VLQ_BASE_MASK = VLQ_BASE - 1;
      var VLQ_CONTINUATION_BIT = VLQ_BASE;
      function toVLQSigned(aValue) {
        return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
      }
      function fromVLQSigned(aValue) {
        var isNegative = (aValue & 1) === 1;
        var shifted = aValue >> 1;
        return isNegative ? -shifted : shifted;
      }
      exports.encode = function base64VLQ_encode(aValue) {
        var encoded = "";
        var digit;
        var vlq = toVLQSigned(aValue);
        do {
          digit = vlq & VLQ_BASE_MASK;
          vlq >>>= VLQ_BASE_SHIFT;
          if (vlq > 0) {
            digit |= VLQ_CONTINUATION_BIT;
          }
          encoded += base64.encode(digit);
        } while (vlq > 0);
        return encoded;
      };
      exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
        var strLen = aStr.length;
        var result = 0;
        var shift3 = 0;
        var continuation, digit;
        do {
          if (aIndex >= strLen) {
            throw new Error("Expected more digits in base 64 VLQ value.");
          }
          digit = base64.decode(aStr.charCodeAt(aIndex++));
          if (digit === -1) {
            throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
          }
          continuation = !!(digit & VLQ_CONTINUATION_BIT);
          digit &= VLQ_BASE_MASK;
          result = result + (digit << shift3);
          shift3 += VLQ_BASE_SHIFT;
        } while (continuation);
        aOutParam.value = fromVLQSigned(result);
        aOutParam.rest = aIndex;
      };
    }
  });

  // ../node_modules/source-map/lib/util.js
  var require_util = __commonJS({
    "../node_modules/source-map/lib/util.js"(exports) {
      function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
          return aArgs[aName];
        } else if (arguments.length === 3) {
          return aDefaultValue;
        } else {
          throw new Error('"' + aName + '" is a required argument.');
        }
      }
      exports.getArg = getArg;
      var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
      var dataUrlRegexp = /^data:.+\,.+$/;
      function urlParse(aUrl) {
        var match2 = aUrl.match(urlRegexp);
        if (!match2) {
          return null;
        }
        return {
          scheme: match2[1],
          auth: match2[2],
          host: match2[3],
          port: match2[4],
          path: match2[5]
        };
      }
      exports.urlParse = urlParse;
      function urlGenerate(aParsedUrl) {
        var url = "";
        if (aParsedUrl.scheme) {
          url += aParsedUrl.scheme + ":";
        }
        url += "//";
        if (aParsedUrl.auth) {
          url += aParsedUrl.auth + "@";
        }
        if (aParsedUrl.host) {
          url += aParsedUrl.host;
        }
        if (aParsedUrl.port) {
          url += ":" + aParsedUrl.port;
        }
        if (aParsedUrl.path) {
          url += aParsedUrl.path;
        }
        return url;
      }
      exports.urlGenerate = urlGenerate;
      function normalize8(aPath) {
        var path4 = aPath;
        var url = urlParse(aPath);
        if (url) {
          if (!url.path) {
            return aPath;
          }
          path4 = url.path;
        }
        var isAbsolute2 = exports.isAbsolute(path4);
        var parts = path4.split(/\/+/);
        for (var part, up = 0, i4 = parts.length - 1; i4 >= 0; i4--) {
          part = parts[i4];
          if (part === ".") {
            parts.splice(i4, 1);
          } else if (part === "..") {
            up++;
          } else if (up > 0) {
            if (part === "") {
              parts.splice(i4 + 1, up);
              up = 0;
            } else {
              parts.splice(i4, 2);
              up--;
            }
          }
        }
        path4 = parts.join("/");
        if (path4 === "") {
          path4 = isAbsolute2 ? "/" : ".";
        }
        if (url) {
          url.path = path4;
          return urlGenerate(url);
        }
        return path4;
      }
      exports.normalize = normalize8;
      function join3(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        if (aPath === "") {
          aPath = ".";
        }
        var aPathUrl = urlParse(aPath);
        var aRootUrl = urlParse(aRoot);
        if (aRootUrl) {
          aRoot = aRootUrl.path || "/";
        }
        if (aPathUrl && !aPathUrl.scheme) {
          if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
          }
          return urlGenerate(aPathUrl);
        }
        if (aPathUrl || aPath.match(dataUrlRegexp)) {
          return aPath;
        }
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
          aRootUrl.host = aPath;
          return urlGenerate(aRootUrl);
        }
        var joined = aPath.charAt(0) === "/" ? aPath : normalize8(aRoot.replace(/\/+$/, "") + "/" + aPath);
        if (aRootUrl) {
          aRootUrl.path = joined;
          return urlGenerate(aRootUrl);
        }
        return joined;
      }
      exports.join = join3;
      exports.isAbsolute = function(aPath) {
        return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
      };
      function relative2(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        aRoot = aRoot.replace(/\/$/, "");
        var level = 0;
        while (aPath.indexOf(aRoot + "/") !== 0) {
          var index2 = aRoot.lastIndexOf("/");
          if (index2 < 0) {
            return aPath;
          }
          aRoot = aRoot.slice(0, index2);
          if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath;
          }
          ++level;
        }
        return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
      }
      exports.relative = relative2;
      var supportsNullProto = function() {
        var obj = /* @__PURE__ */ Object.create(null);
        return !("__proto__" in obj);
      }();
      function identity(s3) {
        return s3;
      }
      function toSetString(aStr) {
        if (isProtoString(aStr)) {
          return "$" + aStr;
        }
        return aStr;
      }
      exports.toSetString = supportsNullProto ? identity : toSetString;
      function fromSetString(aStr) {
        if (isProtoString(aStr)) {
          return aStr.slice(1);
        }
        return aStr;
      }
      exports.fromSetString = supportsNullProto ? identity : fromSetString;
      function isProtoString(s3) {
        if (!s3) {
          return false;
        }
        var length2 = s3.length;
        if (length2 < 9) {
          return false;
        }
        if (s3.charCodeAt(length2 - 1) !== 95 || s3.charCodeAt(length2 - 2) !== 95 || s3.charCodeAt(length2 - 3) !== 111 || s3.charCodeAt(length2 - 4) !== 116 || s3.charCodeAt(length2 - 5) !== 111 || s3.charCodeAt(length2 - 6) !== 114 || s3.charCodeAt(length2 - 7) !== 112 || s3.charCodeAt(length2 - 8) !== 95 || s3.charCodeAt(length2 - 9) !== 95) {
          return false;
        }
        for (var i4 = length2 - 10; i4 >= 0; i4--) {
          if (s3.charCodeAt(i4) !== 36) {
            return false;
          }
        }
        return true;
      }
      function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        var cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByOriginalPositions = compareByOriginalPositions;
      function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
      function strcmp(aStr1, aStr2) {
        if (aStr1 === aStr2) {
          return 0;
        }
        if (aStr1 === null) {
          return 1;
        }
        if (aStr2 === null) {
          return -1;
        }
        if (aStr1 > aStr2) {
          return 1;
        }
        return -1;
      }
      function compareByGeneratedPositionsInflated(mappingA, mappingB) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
      function parseSourceMapInput(str) {
        return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
      }
      exports.parseSourceMapInput = parseSourceMapInput;
      function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
        sourceURL = sourceURL || "";
        if (sourceRoot) {
          if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
            sourceRoot += "/";
          }
          sourceURL = sourceRoot + sourceURL;
        }
        if (sourceMapURL) {
          var parsed = urlParse(sourceMapURL);
          if (!parsed) {
            throw new Error("sourceMapURL could not be parsed");
          }
          if (parsed.path) {
            var index2 = parsed.path.lastIndexOf("/");
            if (index2 >= 0) {
              parsed.path = parsed.path.substring(0, index2 + 1);
            }
          }
          sourceURL = join3(urlGenerate(parsed), sourceURL);
        }
        return normalize8(sourceURL);
      }
      exports.computeSourceURL = computeSourceURL;
    }
  });

  // ../node_modules/source-map/lib/array-set.js
  var require_array_set = __commonJS({
    "../node_modules/source-map/lib/array-set.js"(exports) {
      var util = require_util();
      var has = Object.prototype.hasOwnProperty;
      var hasNativeMap = typeof Map !== "undefined";
      function ArraySet() {
        this._array = [];
        this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
      }
      ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
        var set = new ArraySet();
        for (var i4 = 0, len = aArray.length; i4 < len; i4++) {
          set.add(aArray[i4], aAllowDuplicates);
        }
        return set;
      };
      ArraySet.prototype.size = function ArraySet_size() {
        return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
      };
      ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
        var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
        var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
        var idx = this._array.length;
        if (!isDuplicate || aAllowDuplicates) {
          this._array.push(aStr);
        }
        if (!isDuplicate) {
          if (hasNativeMap) {
            this._set.set(aStr, idx);
          } else {
            this._set[sStr] = idx;
          }
        }
      };
      ArraySet.prototype.has = function ArraySet_has(aStr) {
        if (hasNativeMap) {
          return this._set.has(aStr);
        } else {
          var sStr = util.toSetString(aStr);
          return has.call(this._set, sStr);
        }
      };
      ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
        if (hasNativeMap) {
          var idx = this._set.get(aStr);
          if (idx >= 0) {
            return idx;
          }
        } else {
          var sStr = util.toSetString(aStr);
          if (has.call(this._set, sStr)) {
            return this._set[sStr];
          }
        }
        throw new Error('"' + aStr + '" is not in the set.');
      };
      ArraySet.prototype.at = function ArraySet_at(aIdx) {
        if (aIdx >= 0 && aIdx < this._array.length) {
          return this._array[aIdx];
        }
        throw new Error("No element indexed by " + aIdx);
      };
      ArraySet.prototype.toArray = function ArraySet_toArray() {
        return this._array.slice();
      };
      exports.ArraySet = ArraySet;
    }
  });

  // ../node_modules/source-map/lib/mapping-list.js
  var require_mapping_list = __commonJS({
    "../node_modules/source-map/lib/mapping-list.js"(exports) {
      var util = require_util();
      function generatedPositionAfter(mappingA, mappingB) {
        var lineA = mappingA.generatedLine;
        var lineB = mappingB.generatedLine;
        var columnA = mappingA.generatedColumn;
        var columnB = mappingB.generatedColumn;
        return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
      }
      function MappingList() {
        this._array = [];
        this._sorted = true;
        this._last = { generatedLine: -1, generatedColumn: 0 };
      }
      MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
        this._array.forEach(aCallback, aThisArg);
      };
      MappingList.prototype.add = function MappingList_add(aMapping) {
        if (generatedPositionAfter(this._last, aMapping)) {
          this._last = aMapping;
          this._array.push(aMapping);
        } else {
          this._sorted = false;
          this._array.push(aMapping);
        }
      };
      MappingList.prototype.toArray = function MappingList_toArray() {
        if (!this._sorted) {
          this._array.sort(util.compareByGeneratedPositionsInflated);
          this._sorted = true;
        }
        return this._array;
      };
      exports.MappingList = MappingList;
    }
  });

  // ../node_modules/source-map/lib/source-map-generator.js
  var require_source_map_generator = __commonJS({
    "../node_modules/source-map/lib/source-map-generator.js"(exports) {
      var base64VLQ = require_base64_vlq();
      var util = require_util();
      var ArraySet = require_array_set().ArraySet;
      var MappingList = require_mapping_list().MappingList;
      function SourceMapGenerator(aArgs) {
        if (!aArgs) {
          aArgs = {};
        }
        this._file = util.getArg(aArgs, "file", null);
        this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
        this._skipValidation = util.getArg(aArgs, "skipValidation", false);
        this._sources = new ArraySet();
        this._names = new ArraySet();
        this._mappings = new MappingList();
        this._sourcesContents = null;
      }
      SourceMapGenerator.prototype._version = 3;
      SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
        var sourceRoot = aSourceMapConsumer.sourceRoot;
        var generator = new SourceMapGenerator({
          file: aSourceMapConsumer.file,
          sourceRoot
        });
        aSourceMapConsumer.eachMapping(function(mapping) {
          var newMapping = {
            generated: {
              line: mapping.generatedLine,
              column: mapping.generatedColumn
            }
          };
          if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
              newMapping.source = util.relative(sourceRoot, newMapping.source);
            }
            newMapping.original = {
              line: mapping.originalLine,
              column: mapping.originalColumn
            };
            if (mapping.name != null) {
              newMapping.name = mapping.name;
            }
          }
          generator.addMapping(newMapping);
        });
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          var sourceRelative = sourceFile;
          if (sourceRoot !== null) {
            sourceRelative = util.relative(sourceRoot, sourceFile);
          }
          if (!generator._sources.has(sourceRelative)) {
            generator._sources.add(sourceRelative);
          }
          var content3 = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content3 != null) {
            generator.setSourceContent(sourceFile, content3);
          }
        });
        return generator;
      };
      SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
        var generated2 = util.getArg(aArgs, "generated");
        var original = util.getArg(aArgs, "original", null);
        var source = util.getArg(aArgs, "source", null);
        var name = util.getArg(aArgs, "name", null);
        if (!this._skipValidation) {
          this._validateMapping(generated2, original, source, name);
        }
        if (source != null) {
          source = String(source);
          if (!this._sources.has(source)) {
            this._sources.add(source);
          }
        }
        if (name != null) {
          name = String(name);
          if (!this._names.has(name)) {
            this._names.add(name);
          }
        }
        this._mappings.add({
          generatedLine: generated2.line,
          generatedColumn: generated2.column,
          originalLine: original != null && original.line,
          originalColumn: original != null && original.column,
          source,
          name
        });
      };
      SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
        var source = aSourceFile;
        if (this._sourceRoot != null) {
          source = util.relative(this._sourceRoot, source);
        }
        if (aSourceContent != null) {
          if (!this._sourcesContents) {
            this._sourcesContents = /* @__PURE__ */ Object.create(null);
          }
          this._sourcesContents[util.toSetString(source)] = aSourceContent;
        } else if (this._sourcesContents) {
          delete this._sourcesContents[util.toSetString(source)];
          if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
          }
        }
      };
      SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
        var sourceFile = aSourceFile;
        if (aSourceFile == null) {
          if (aSourceMapConsumer.file == null) {
            throw new Error(
              `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
            );
          }
          sourceFile = aSourceMapConsumer.file;
        }
        var sourceRoot = this._sourceRoot;
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        var newSources = new ArraySet();
        var newNames = new ArraySet();
        this._mappings.unsortedForEach(function(mapping) {
          if (mapping.source === sourceFile && mapping.originalLine != null) {
            var original = aSourceMapConsumer.originalPositionFor({
              line: mapping.originalLine,
              column: mapping.originalColumn
            });
            if (original.source != null) {
              mapping.source = original.source;
              if (aSourceMapPath != null) {
                mapping.source = util.join(aSourceMapPath, mapping.source);
              }
              if (sourceRoot != null) {
                mapping.source = util.relative(sourceRoot, mapping.source);
              }
              mapping.originalLine = original.line;
              mapping.originalColumn = original.column;
              if (original.name != null) {
                mapping.name = original.name;
              }
            }
          }
          var source = mapping.source;
          if (source != null && !newSources.has(source)) {
            newSources.add(source);
          }
          var name = mapping.name;
          if (name != null && !newNames.has(name)) {
            newNames.add(name);
          }
        }, this);
        this._sources = newSources;
        this._names = newNames;
        aSourceMapConsumer.sources.forEach(function(sourceFile2) {
          var content3 = aSourceMapConsumer.sourceContentFor(sourceFile2);
          if (content3 != null) {
            if (aSourceMapPath != null) {
              sourceFile2 = util.join(aSourceMapPath, sourceFile2);
            }
            if (sourceRoot != null) {
              sourceFile2 = util.relative(sourceRoot, sourceFile2);
            }
            this.setSourceContent(sourceFile2, content3);
          }
        }, this);
      };
      SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
        if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
          throw new Error(
            "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
          );
        }
        if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
          return;
        } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
          return;
        } else {
          throw new Error("Invalid mapping: " + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
          }));
        }
      };
      SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
        var previousGeneratedColumn = 0;
        var previousGeneratedLine = 1;
        var previousOriginalColumn = 0;
        var previousOriginalLine = 0;
        var previousName = 0;
        var previousSource = 0;
        var result = "";
        var next4;
        var mapping;
        var nameIdx;
        var sourceIdx;
        var mappings = this._mappings.toArray();
        for (var i4 = 0, len = mappings.length; i4 < len; i4++) {
          mapping = mappings[i4];
          next4 = "";
          if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while (mapping.generatedLine !== previousGeneratedLine) {
              next4 += ";";
              previousGeneratedLine++;
            }
          } else {
            if (i4 > 0) {
              if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i4 - 1])) {
                continue;
              }
              next4 += ",";
            }
          }
          next4 += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
          previousGeneratedColumn = mapping.generatedColumn;
          if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next4 += base64VLQ.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;
            next4 += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;
            next4 += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;
            if (mapping.name != null) {
              nameIdx = this._names.indexOf(mapping.name);
              next4 += base64VLQ.encode(nameIdx - previousName);
              previousName = nameIdx;
            }
          }
          result += next4;
        }
        return result;
      };
      SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
        return aSources.map(function(source) {
          if (!this._sourcesContents) {
            return null;
          }
          if (aSourceRoot != null) {
            source = util.relative(aSourceRoot, source);
          }
          var key = util.toSetString(source);
          return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
        }, this);
      };
      SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
        var map = {
          version: this._version,
          sources: this._sources.toArray(),
          names: this._names.toArray(),
          mappings: this._serializeMappings()
        };
        if (this._file != null) {
          map.file = this._file;
        }
        if (this._sourceRoot != null) {
          map.sourceRoot = this._sourceRoot;
        }
        if (this._sourcesContents) {
          map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
        }
        return map;
      };
      SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
        return JSON.stringify(this.toJSON());
      };
      exports.SourceMapGenerator = SourceMapGenerator;
    }
  });

  // ../node_modules/source-map/lib/binary-search.js
  var require_binary_search = __commonJS({
    "../node_modules/source-map/lib/binary-search.js"(exports) {
      exports.GREATEST_LOWER_BOUND = 1;
      exports.LEAST_UPPER_BOUND = 2;
      function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
        var cmp = aCompare(aNeedle, aHaystack[mid], true);
        if (cmp === 0) {
          return mid;
        } else if (cmp > 0) {
          if (aHigh - mid > 1) {
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return aHigh < aHaystack.length ? aHigh : -1;
          } else {
            return mid;
          }
        } else {
          if (mid - aLow > 1) {
            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return mid;
          } else {
            return aLow < 0 ? -1 : aLow;
          }
        }
      }
      exports.search = function search2(aNeedle, aHaystack, aCompare, aBias) {
        if (aHaystack.length === 0) {
          return -1;
        }
        var index2 = recursiveSearch(
          -1,
          aHaystack.length,
          aNeedle,
          aHaystack,
          aCompare,
          aBias || exports.GREATEST_LOWER_BOUND
        );
        if (index2 < 0) {
          return -1;
        }
        while (index2 - 1 >= 0) {
          if (aCompare(aHaystack[index2], aHaystack[index2 - 1], true) !== 0) {
            break;
          }
          --index2;
        }
        return index2;
      };
    }
  });

  // ../node_modules/source-map/lib/quick-sort.js
  var require_quick_sort = __commonJS({
    "../node_modules/source-map/lib/quick-sort.js"(exports) {
      function swap(ary, x2, y3) {
        var temp = ary[x2];
        ary[x2] = ary[y3];
        ary[y3] = temp;
      }
      function randomIntInRange(low, high) {
        return Math.round(low + Math.random() * (high - low));
      }
      function doQuickSort(ary, comparator, p3, r3) {
        if (p3 < r3) {
          var pivotIndex = randomIntInRange(p3, r3);
          var i4 = p3 - 1;
          swap(ary, pivotIndex, r3);
          var pivot = ary[r3];
          for (var j4 = p3; j4 < r3; j4++) {
            if (comparator(ary[j4], pivot) <= 0) {
              i4 += 1;
              swap(ary, i4, j4);
            }
          }
          swap(ary, i4 + 1, j4);
          var q2 = i4 + 1;
          doQuickSort(ary, comparator, p3, q2 - 1);
          doQuickSort(ary, comparator, q2 + 1, r3);
        }
      }
      exports.quickSort = function(ary, comparator) {
        doQuickSort(ary, comparator, 0, ary.length - 1);
      };
    }
  });

  // ../node_modules/source-map/lib/source-map-consumer.js
  var require_source_map_consumer = __commonJS({
    "../node_modules/source-map/lib/source-map-consumer.js"(exports) {
      var util = require_util();
      var binarySearch = require_binary_search();
      var ArraySet = require_array_set().ArraySet;
      var base64VLQ = require_base64_vlq();
      var quickSort = require_quick_sort().quickSort;
      function SourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
      }
      SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
        return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
      };
      SourceMapConsumer.prototype._version = 3;
      SourceMapConsumer.prototype.__generatedMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
        configurable: true,
        enumerable: true,
        get: function() {
          if (!this.__generatedMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__generatedMappings;
        }
      });
      SourceMapConsumer.prototype.__originalMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
        configurable: true,
        enumerable: true,
        get: function() {
          if (!this.__originalMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__originalMappings;
        }
      });
      SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index2) {
        var c3 = aStr.charAt(index2);
        return c3 === ";" || c3 === ",";
      };
      SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        throw new Error("Subclasses must implement _parseMappings");
      };
      SourceMapConsumer.GENERATED_ORDER = 1;
      SourceMapConsumer.ORIGINAL_ORDER = 2;
      SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
      SourceMapConsumer.LEAST_UPPER_BOUND = 2;
      SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
        var context = aContext || null;
        var order2 = aOrder || SourceMapConsumer.GENERATED_ORDER;
        var mappings;
        switch (order2) {
          case SourceMapConsumer.GENERATED_ORDER:
            mappings = this._generatedMappings;
            break;
          case SourceMapConsumer.ORIGINAL_ORDER:
            mappings = this._originalMappings;
            break;
          default:
            throw new Error("Unknown order of iteration.");
        }
        var sourceRoot = this.sourceRoot;
        mappings.map(function(mapping) {
          var source = mapping.source === null ? null : this._sources.at(mapping.source);
          source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
          return {
            source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name === null ? null : this._names.at(mapping.name)
          };
        }, this).forEach(aCallback, context);
      };
      SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
        var line2 = util.getArg(aArgs, "line");
        var needle = {
          source: util.getArg(aArgs, "source"),
          originalLine: line2,
          originalColumn: util.getArg(aArgs, "column", 0)
        };
        needle.source = this._findSourceIndex(needle.source);
        if (needle.source < 0) {
          return [];
        }
        var mappings = [];
        var index2 = this._findMapping(
          needle,
          this._originalMappings,
          "originalLine",
          "originalColumn",
          util.compareByOriginalPositions,
          binarySearch.LEAST_UPPER_BOUND
        );
        if (index2 >= 0) {
          var mapping = this._originalMappings[index2];
          if (aArgs.column === void 0) {
            var originalLine = mapping.originalLine;
            while (mapping && mapping.originalLine === originalLine) {
              mappings.push({
                line: util.getArg(mapping, "generatedLine", null),
                column: util.getArg(mapping, "generatedColumn", null),
                lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
              });
              mapping = this._originalMappings[++index2];
            }
          } else {
            var originalColumn = mapping.originalColumn;
            while (mapping && mapping.originalLine === line2 && mapping.originalColumn == originalColumn) {
              mappings.push({
                line: util.getArg(mapping, "generatedLine", null),
                column: util.getArg(mapping, "generatedColumn", null),
                lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
              });
              mapping = this._originalMappings[++index2];
            }
          }
        }
        return mappings;
      };
      exports.SourceMapConsumer = SourceMapConsumer;
      function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        var version2 = util.getArg(sourceMap, "version");
        var sources = util.getArg(sourceMap, "sources");
        var names = util.getArg(sourceMap, "names", []);
        var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
        var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
        var mappings = util.getArg(sourceMap, "mappings");
        var file = util.getArg(sourceMap, "file", null);
        if (version2 != this._version) {
          throw new Error("Unsupported version: " + version2);
        }
        if (sourceRoot) {
          sourceRoot = util.normalize(sourceRoot);
        }
        sources = sources.map(String).map(util.normalize).map(function(source) {
          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
        });
        this._names = ArraySet.fromArray(names.map(String), true);
        this._sources = ArraySet.fromArray(sources, true);
        this._absoluteSources = this._sources.toArray().map(function(s3) {
          return util.computeSourceURL(sourceRoot, s3, aSourceMapURL);
        });
        this.sourceRoot = sourceRoot;
        this.sourcesContent = sourcesContent;
        this._mappings = mappings;
        this._sourceMapURL = aSourceMapURL;
        this.file = file;
      }
      BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
      BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
        var relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util.relative(this.sourceRoot, relativeSource);
        }
        if (this._sources.has(relativeSource)) {
          return this._sources.indexOf(relativeSource);
        }
        var i4;
        for (i4 = 0; i4 < this._absoluteSources.length; ++i4) {
          if (this._absoluteSources[i4] == aSource) {
            return i4;
          }
        }
        return -1;
      };
      BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
        var smc = Object.create(BasicSourceMapConsumer.prototype);
        var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
        var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
        smc.sourceRoot = aSourceMap._sourceRoot;
        smc.sourcesContent = aSourceMap._generateSourcesContent(
          smc._sources.toArray(),
          smc.sourceRoot
        );
        smc.file = aSourceMap._file;
        smc._sourceMapURL = aSourceMapURL;
        smc._absoluteSources = smc._sources.toArray().map(function(s3) {
          return util.computeSourceURL(smc.sourceRoot, s3, aSourceMapURL);
        });
        var generatedMappings = aSourceMap._mappings.toArray().slice();
        var destGeneratedMappings = smc.__generatedMappings = [];
        var destOriginalMappings = smc.__originalMappings = [];
        for (var i4 = 0, length2 = generatedMappings.length; i4 < length2; i4++) {
          var srcMapping = generatedMappings[i4];
          var destMapping = new Mapping();
          destMapping.generatedLine = srcMapping.generatedLine;
          destMapping.generatedColumn = srcMapping.generatedColumn;
          if (srcMapping.source) {
            destMapping.source = sources.indexOf(srcMapping.source);
            destMapping.originalLine = srcMapping.originalLine;
            destMapping.originalColumn = srcMapping.originalColumn;
            if (srcMapping.name) {
              destMapping.name = names.indexOf(srcMapping.name);
            }
            destOriginalMappings.push(destMapping);
          }
          destGeneratedMappings.push(destMapping);
        }
        quickSort(smc.__originalMappings, util.compareByOriginalPositions);
        return smc;
      };
      BasicSourceMapConsumer.prototype._version = 3;
      Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
        get: function() {
          return this._absoluteSources.slice();
        }
      });
      function Mapping() {
        this.generatedLine = 0;
        this.generatedColumn = 0;
        this.source = null;
        this.originalLine = null;
        this.originalColumn = null;
        this.name = null;
      }
      BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        var generatedLine = 1;
        var previousGeneratedColumn = 0;
        var previousOriginalLine = 0;
        var previousOriginalColumn = 0;
        var previousSource = 0;
        var previousName = 0;
        var length2 = aStr.length;
        var index2 = 0;
        var cachedSegments = {};
        var temp = {};
        var originalMappings = [];
        var generatedMappings = [];
        var mapping, str, segment, end2, value;
        while (index2 < length2) {
          if (aStr.charAt(index2) === ";") {
            generatedLine++;
            index2++;
            previousGeneratedColumn = 0;
          } else if (aStr.charAt(index2) === ",") {
            index2++;
          } else {
            mapping = new Mapping();
            mapping.generatedLine = generatedLine;
            for (end2 = index2; end2 < length2; end2++) {
              if (this._charIsMappingSeparator(aStr, end2)) {
                break;
              }
            }
            str = aStr.slice(index2, end2);
            segment = cachedSegments[str];
            if (segment) {
              index2 += str.length;
            } else {
              segment = [];
              while (index2 < end2) {
                base64VLQ.decode(aStr, index2, temp);
                value = temp.value;
                index2 = temp.rest;
                segment.push(value);
              }
              if (segment.length === 2) {
                throw new Error("Found a source, but no line and column");
              }
              if (segment.length === 3) {
                throw new Error("Found a source and line, but no column");
              }
              cachedSegments[str] = segment;
            }
            mapping.generatedColumn = previousGeneratedColumn + segment[0];
            previousGeneratedColumn = mapping.generatedColumn;
            if (segment.length > 1) {
              mapping.source = previousSource + segment[1];
              previousSource += segment[1];
              mapping.originalLine = previousOriginalLine + segment[2];
              previousOriginalLine = mapping.originalLine;
              mapping.originalLine += 1;
              mapping.originalColumn = previousOriginalColumn + segment[3];
              previousOriginalColumn = mapping.originalColumn;
              if (segment.length > 4) {
                mapping.name = previousName + segment[4];
                previousName += segment[4];
              }
            }
            generatedMappings.push(mapping);
            if (typeof mapping.originalLine === "number") {
              originalMappings.push(mapping);
            }
          }
        }
        quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
        this.__generatedMappings = generatedMappings;
        quickSort(originalMappings, util.compareByOriginalPositions);
        this.__originalMappings = originalMappings;
      };
      BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
        if (aNeedle[aLineName] <= 0) {
          throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
        }
        if (aNeedle[aColumnName] < 0) {
          throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
        }
        return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
      };
      BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
        for (var index2 = 0; index2 < this._generatedMappings.length; ++index2) {
          var mapping = this._generatedMappings[index2];
          if (index2 + 1 < this._generatedMappings.length) {
            var nextMapping = this._generatedMappings[index2 + 1];
            if (mapping.generatedLine === nextMapping.generatedLine) {
              mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
              continue;
            }
          }
          mapping.lastGeneratedColumn = Infinity;
        }
      };
      BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, "line"),
          generatedColumn: util.getArg(aArgs, "column")
        };
        var index2 = this._findMapping(
          needle,
          this._generatedMappings,
          "generatedLine",
          "generatedColumn",
          util.compareByGeneratedPositionsDeflated,
          util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
        );
        if (index2 >= 0) {
          var mapping = this._generatedMappings[index2];
          if (mapping.generatedLine === needle.generatedLine) {
            var source = util.getArg(mapping, "source", null);
            if (source !== null) {
              source = this._sources.at(source);
              source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
            }
            var name = util.getArg(mapping, "name", null);
            if (name !== null) {
              name = this._names.at(name);
            }
            return {
              source,
              line: util.getArg(mapping, "originalLine", null),
              column: util.getArg(mapping, "originalColumn", null),
              name
            };
          }
        }
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      };
      BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
        if (!this.sourcesContent) {
          return false;
        }
        return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
          return sc == null;
        });
      };
      BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        if (!this.sourcesContent) {
          return null;
        }
        var index2 = this._findSourceIndex(aSource);
        if (index2 >= 0) {
          return this.sourcesContent[index2];
        }
        var relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util.relative(this.sourceRoot, relativeSource);
        }
        var url;
        if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
          var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
          if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
          }
          if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
            return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
          }
        }
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + relativeSource + '" is not in the SourceMap.');
        }
      };
      BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
        var source = util.getArg(aArgs, "source");
        source = this._findSourceIndex(source);
        if (source < 0) {
          return {
            line: null,
            column: null,
            lastColumn: null
          };
        }
        var needle = {
          source,
          originalLine: util.getArg(aArgs, "line"),
          originalColumn: util.getArg(aArgs, "column")
        };
        var index2 = this._findMapping(
          needle,
          this._originalMappings,
          "originalLine",
          "originalColumn",
          util.compareByOriginalPositions,
          util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
        );
        if (index2 >= 0) {
          var mapping = this._originalMappings[index2];
          if (mapping.source === needle.source) {
            return {
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            };
          }
        }
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      };
      exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
      function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        var version2 = util.getArg(sourceMap, "version");
        var sections = util.getArg(sourceMap, "sections");
        if (version2 != this._version) {
          throw new Error("Unsupported version: " + version2);
        }
        this._sources = new ArraySet();
        this._names = new ArraySet();
        var lastOffset = {
          line: -1,
          column: 0
        };
        this._sections = sections.map(function(s3) {
          if (s3.url) {
            throw new Error("Support for url field in sections not implemented.");
          }
          var offset3 = util.getArg(s3, "offset");
          var offsetLine = util.getArg(offset3, "line");
          var offsetColumn = util.getArg(offset3, "column");
          if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
            throw new Error("Section offsets must be ordered and non-overlapping.");
          }
          lastOffset = offset3;
          return {
            generatedOffset: {
              // The offset fields are 0-based, but we use 1-based indices when
              // encoding/decoding from VLQ.
              generatedLine: offsetLine + 1,
              generatedColumn: offsetColumn + 1
            },
            consumer: new SourceMapConsumer(util.getArg(s3, "map"), aSourceMapURL)
          };
        });
      }
      IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
      IndexedSourceMapConsumer.prototype._version = 3;
      Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
        get: function() {
          var sources = [];
          for (var i4 = 0; i4 < this._sections.length; i4++) {
            for (var j4 = 0; j4 < this._sections[i4].consumer.sources.length; j4++) {
              sources.push(this._sections[i4].consumer.sources[j4]);
            }
          }
          return sources;
        }
      });
      IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, "line"),
          generatedColumn: util.getArg(aArgs, "column")
        };
        var sectionIndex = binarySearch.search(
          needle,
          this._sections,
          function(needle2, section2) {
            var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
            if (cmp) {
              return cmp;
            }
            return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
          }
        );
        var section = this._sections[sectionIndex];
        if (!section) {
          return {
            source: null,
            line: null,
            column: null,
            name: null
          };
        }
        return section.consumer.originalPositionFor({
          line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
          column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
          bias: aArgs.bias
        });
      };
      IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
        return this._sections.every(function(s3) {
          return s3.consumer.hasContentsOfAllSources();
        });
      };
      IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        for (var i4 = 0; i4 < this._sections.length; i4++) {
          var section = this._sections[i4];
          var content3 = section.consumer.sourceContentFor(aSource, true);
          if (content3) {
            return content3;
          }
        }
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + aSource + '" is not in the SourceMap.');
        }
      };
      IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
        for (var i4 = 0; i4 < this._sections.length; i4++) {
          var section = this._sections[i4];
          if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
            continue;
          }
          var generatedPosition = section.consumer.generatedPositionFor(aArgs);
          if (generatedPosition) {
            var ret = {
              line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
              column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
            };
            return ret;
          }
        }
        return {
          line: null,
          column: null
        };
      };
      IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        for (var i4 = 0; i4 < this._sections.length; i4++) {
          var section = this._sections[i4];
          var sectionMappings = section.consumer._generatedMappings;
          for (var j4 = 0; j4 < sectionMappings.length; j4++) {
            var mapping = sectionMappings[j4];
            var source = section.consumer._sources.at(mapping.source);
            source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
            this._sources.add(source);
            source = this._sources.indexOf(source);
            var name = null;
            if (mapping.name) {
              name = section.consumer._names.at(mapping.name);
              this._names.add(name);
              name = this._names.indexOf(name);
            }
            var adjustedMapping = {
              source,
              generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
              generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
              originalLine: mapping.originalLine,
              originalColumn: mapping.originalColumn,
              name
            };
            this.__generatedMappings.push(adjustedMapping);
            if (typeof adjustedMapping.originalLine === "number") {
              this.__originalMappings.push(adjustedMapping);
            }
          }
        }
        quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
        quickSort(this.__originalMappings, util.compareByOriginalPositions);
      };
      exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
    }
  });

  // ../node_modules/source-map/lib/source-node.js
  var require_source_node = __commonJS({
    "../node_modules/source-map/lib/source-node.js"(exports) {
      var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
      var util = require_util();
      var REGEX_NEWLINE = /(\r?\n)/;
      var NEWLINE_CODE = 10;
      var isSourceNode = "$$$isSourceNode$$$";
      function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
        this.children = [];
        this.sourceContents = {};
        this.line = aLine == null ? null : aLine;
        this.column = aColumn == null ? null : aColumn;
        this.source = aSource == null ? null : aSource;
        this.name = aName == null ? null : aName;
        this[isSourceNode] = true;
        if (aChunks != null)
          this.add(aChunks);
      }
      SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
        var node5 = new SourceNode();
        var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
        var remainingLinesIndex = 0;
        var shiftNextLine = function() {
          var lineContents = getNextLine();
          var newLine = getNextLine() || "";
          return lineContents + newLine;
          function getNextLine() {
            return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
          }
        };
        var lastGeneratedLine = 1, lastGeneratedColumn = 0;
        var lastMapping = null;
        aSourceMapConsumer.eachMapping(function(mapping) {
          if (lastMapping !== null) {
            if (lastGeneratedLine < mapping.generatedLine) {
              addMappingWithCode(lastMapping, shiftNextLine());
              lastGeneratedLine++;
              lastGeneratedColumn = 0;
            } else {
              var nextLine = remainingLines[remainingLinesIndex] || "";
              var code2 = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
              remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
              lastGeneratedColumn = mapping.generatedColumn;
              addMappingWithCode(lastMapping, code2);
              lastMapping = mapping;
              return;
            }
          }
          while (lastGeneratedLine < mapping.generatedLine) {
            node5.add(shiftNextLine());
            lastGeneratedLine++;
          }
          if (lastGeneratedColumn < mapping.generatedColumn) {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            node5.add(nextLine.substr(0, mapping.generatedColumn));
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
          }
          lastMapping = mapping;
        }, this);
        if (remainingLinesIndex < remainingLines.length) {
          if (lastMapping) {
            addMappingWithCode(lastMapping, shiftNextLine());
          }
          node5.add(remainingLines.splice(remainingLinesIndex).join(""));
        }
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          var content3 = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content3 != null) {
            if (aRelativePath != null) {
              sourceFile = util.join(aRelativePath, sourceFile);
            }
            node5.setSourceContent(sourceFile, content3);
          }
        });
        return node5;
        function addMappingWithCode(mapping, code2) {
          if (mapping === null || mapping.source === void 0) {
            node5.add(code2);
          } else {
            var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
            node5.add(new SourceNode(
              mapping.originalLine,
              mapping.originalColumn,
              source,
              code2,
              mapping.name
            ));
          }
        }
      };
      SourceNode.prototype.add = function SourceNode_add(aChunk) {
        if (Array.isArray(aChunk)) {
          aChunk.forEach(function(chunk) {
            this.add(chunk);
          }, this);
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          if (aChunk) {
            this.children.push(aChunk);
          }
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      };
      SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
        if (Array.isArray(aChunk)) {
          for (var i4 = aChunk.length - 1; i4 >= 0; i4--) {
            this.prepend(aChunk[i4]);
          }
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          this.children.unshift(aChunk);
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      };
      SourceNode.prototype.walk = function SourceNode_walk(aFn) {
        var chunk;
        for (var i4 = 0, len = this.children.length; i4 < len; i4++) {
          chunk = this.children[i4];
          if (chunk[isSourceNode]) {
            chunk.walk(aFn);
          } else {
            if (chunk !== "") {
              aFn(chunk, {
                source: this.source,
                line: this.line,
                column: this.column,
                name: this.name
              });
            }
          }
        }
      };
      SourceNode.prototype.join = function SourceNode_join(aSep) {
        var newChildren;
        var i4;
        var len = this.children.length;
        if (len > 0) {
          newChildren = [];
          for (i4 = 0; i4 < len - 1; i4++) {
            newChildren.push(this.children[i4]);
            newChildren.push(aSep);
          }
          newChildren.push(this.children[i4]);
          this.children = newChildren;
        }
        return this;
      };
      SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
        var lastChild = this.children[this.children.length - 1];
        if (lastChild[isSourceNode]) {
          lastChild.replaceRight(aPattern, aReplacement);
        } else if (typeof lastChild === "string") {
          this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
        } else {
          this.children.push("".replace(aPattern, aReplacement));
        }
        return this;
      };
      SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
        this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
      };
      SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
        for (var i4 = 0, len = this.children.length; i4 < len; i4++) {
          if (this.children[i4][isSourceNode]) {
            this.children[i4].walkSourceContents(aFn);
          }
        }
        var sources = Object.keys(this.sourceContents);
        for (var i4 = 0, len = sources.length; i4 < len; i4++) {
          aFn(util.fromSetString(sources[i4]), this.sourceContents[sources[i4]]);
        }
      };
      SourceNode.prototype.toString = function SourceNode_toString() {
        var str = "";
        this.walk(function(chunk) {
          str += chunk;
        });
        return str;
      };
      SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
        var generated2 = {
          code: "",
          line: 1,
          column: 0
        };
        var map = new SourceMapGenerator(aArgs);
        var sourceMappingActive = false;
        var lastOriginalSource = null;
        var lastOriginalLine = null;
        var lastOriginalColumn = null;
        var lastOriginalName = null;
        this.walk(function(chunk, original) {
          generated2.code += chunk;
          if (original.source !== null && original.line !== null && original.column !== null) {
            if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated2.line,
                  column: generated2.column
                },
                name: original.name
              });
            }
            lastOriginalSource = original.source;
            lastOriginalLine = original.line;
            lastOriginalColumn = original.column;
            lastOriginalName = original.name;
            sourceMappingActive = true;
          } else if (sourceMappingActive) {
            map.addMapping({
              generated: {
                line: generated2.line,
                column: generated2.column
              }
            });
            lastOriginalSource = null;
            sourceMappingActive = false;
          }
          for (var idx = 0, length2 = chunk.length; idx < length2; idx++) {
            if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
              generated2.line++;
              generated2.column = 0;
              if (idx + 1 === length2) {
                lastOriginalSource = null;
                sourceMappingActive = false;
              } else if (sourceMappingActive) {
                map.addMapping({
                  source: original.source,
                  original: {
                    line: original.line,
                    column: original.column
                  },
                  generated: {
                    line: generated2.line,
                    column: generated2.column
                  },
                  name: original.name
                });
              }
            } else {
              generated2.column++;
            }
          }
        });
        this.walkSourceContents(function(sourceFile, sourceContent) {
          map.setSourceContent(sourceFile, sourceContent);
        });
        return { code: generated2.code, map };
      };
      exports.SourceNode = SourceNode;
    }
  });

  // ../node_modules/source-map/source-map.js
  var require_source_map = __commonJS({
    "../node_modules/source-map/source-map.js"(exports) {
      exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
      exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
      exports.SourceNode = require_source_node().SourceNode;
    }
  });

  // node-modules-polyfills:path
  var path_exports = {};
  __export(path_exports, {
    basename: () => basename2,
    default: () => path_default,
    delimiter: () => delimiter2,
    dirname: () => dirname2,
    extname: () => extname2,
    isAbsolute: () => isAbsolute,
    join: () => join2,
    normalize: () => normalize7,
    relative: () => relative,
    resolve: () => resolve,
    sep: () => sep
  });
  function normalizeArray(parts, allowAboveRoot) {
    var up = 0;
    for (var i4 = parts.length - 1; i4 >= 0; i4--) {
      var last2 = parts[i4];
      if (last2 === ".") {
        parts.splice(i4, 1);
      } else if (last2 === "..") {
        parts.splice(i4, 1);
        up++;
      } else if (up) {
        parts.splice(i4, 1);
        up--;
      }
    }
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift("..");
      }
    }
    return parts;
  }
  function resolve() {
    var resolvedPath = "", resolvedAbsolute = false;
    for (var i4 = arguments.length - 1; i4 >= -1 && !resolvedAbsolute; i4--) {
      var path4 = i4 >= 0 ? arguments[i4] : "/";
      if (typeof path4 !== "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path4) {
        continue;
      }
      resolvedPath = path4 + "/" + resolvedPath;
      resolvedAbsolute = path4.charAt(0) === "/";
    }
    resolvedPath = normalizeArray(filter2(resolvedPath.split("/"), function(p3) {
      return !!p3;
    }), !resolvedAbsolute).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
  }
  function normalize7(path4) {
    var isPathAbsolute = isAbsolute(path4), trailingSlash = substr2(path4, -1) === "/";
    path4 = normalizeArray(filter2(path4.split("/"), function(p3) {
      return !!p3;
    }), !isPathAbsolute).join("/");
    if (!path4 && !isPathAbsolute) {
      path4 = ".";
    }
    if (path4 && trailingSlash) {
      path4 += "/";
    }
    return (isPathAbsolute ? "/" : "") + path4;
  }
  function isAbsolute(path4) {
    return path4.charAt(0) === "/";
  }
  function join2() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return normalize7(filter2(paths, function(p3, index2) {
      if (typeof p3 !== "string") {
        throw new TypeError("Arguments to path.join must be strings");
      }
      return p3;
    }).join("/"));
  }
  function relative(from2, to) {
    from2 = resolve(from2).substr(1);
    to = resolve(to).substr(1);
    function trim2(arr) {
      var start2 = 0;
      for (; start2 < arr.length; start2++) {
        if (arr[start2] !== "")
          break;
      }
      var end2 = arr.length - 1;
      for (; end2 >= 0; end2--) {
        if (arr[end2] !== "")
          break;
      }
      if (start2 > end2)
        return [];
      return arr.slice(start2, end2 - start2 + 1);
    }
    var fromParts = trim2(from2.split("/"));
    var toParts = trim2(to.split("/"));
    var length2 = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length2;
    for (var i4 = 0; i4 < length2; i4++) {
      if (fromParts[i4] !== toParts[i4]) {
        samePartsLength = i4;
        break;
      }
    }
    var outputParts = [];
    for (var i4 = samePartsLength; i4 < fromParts.length; i4++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  }
  function dirname2(path4) {
    var result = splitPath(path4), root3 = result[0], dir = result[1];
    if (!root3 && !dir) {
      return ".";
    }
    if (dir) {
      dir = dir.substr(0, dir.length - 1);
    }
    return root3 + dir;
  }
  function basename2(path4, ext) {
    var f4 = splitPath(path4)[2];
    if (ext && f4.substr(-1 * ext.length) === ext) {
      f4 = f4.substr(0, f4.length - ext.length);
    }
    return f4;
  }
  function extname2(path4) {
    return splitPath(path4)[3];
  }
  function filter2(xs, f4) {
    if (xs.filter)
      return xs.filter(f4);
    var res = [];
    for (var i4 = 0; i4 < xs.length; i4++) {
      if (f4(xs[i4], i4, xs))
        res.push(xs[i4]);
    }
    return res;
  }
  var splitPathRe, splitPath, sep, delimiter2, path_default, substr2;
  var init_path = __esm({
    "node-modules-polyfills:path"() {
      splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
      splitPath = function(filename) {
        return splitPathRe.exec(filename).slice(1);
      };
      sep = "/";
      delimiter2 = ":";
      path_default = {
        extname: extname2,
        basename: basename2,
        dirname: dirname2,
        sep,
        delimiter: delimiter2,
        relative,
        join: join2,
        isAbsolute,
        normalize: normalize7,
        resolve
      };
      substr2 = "ab".substr(-1) === "b" ? function(str, start2, len) {
        return str.substr(start2, len);
      } : function(str, start2, len) {
        if (start2 < 0)
          start2 = str.length + start2;
        return str.substr(start2, len);
      };
    }
  });

  // node-modules-polyfills-commonjs:path
  var require_path = __commonJS({
    "node-modules-polyfills-commonjs:path"(exports, module) {
      var polyfill = (init_path(), __toCommonJS(path_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k2 in polyfill) {
          module.exports[k2] = polyfill[k2];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node-modules-polyfills:fs
  var fs_exports = {};
  __export(fs_exports, {
    default: () => fs_default
  });
  var fs_default;
  var init_fs = __esm({
    "node-modules-polyfills:fs"() {
      fs_default = {};
    }
  });

  // node-modules-polyfills-commonjs:fs
  var require_fs = __commonJS({
    "node-modules-polyfills-commonjs:fs"(exports, module) {
      var polyfill = (init_fs(), __toCommonJS(fs_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k2 in polyfill) {
          module.exports[k2] = polyfill[k2];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // ../node_modules/buffer-from/index.js
  var require_buffer_from = __commonJS({
    "../node_modules/buffer-from/index.js"(exports, module) {
      var toString2 = Object.prototype.toString;
      var isModern = typeof Buffer !== "undefined" && typeof Buffer.alloc === "function" && typeof Buffer.allocUnsafe === "function" && typeof Buffer.from === "function";
      function isArrayBuffer(input) {
        return toString2.call(input).slice(8, -1) === "ArrayBuffer";
      }
      function fromArrayBuffer(obj, byteOffset, length2) {
        byteOffset >>>= 0;
        var maxLength = obj.byteLength - byteOffset;
        if (maxLength < 0) {
          throw new RangeError("'offset' is out of bounds");
        }
        if (length2 === void 0) {
          length2 = maxLength;
        } else {
          length2 >>>= 0;
          if (length2 > maxLength) {
            throw new RangeError("'length' is out of bounds");
          }
        }
        return isModern ? Buffer.from(obj.slice(byteOffset, byteOffset + length2)) : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length2)));
      }
      function fromString(string5, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer.isEncoding(encoding)) {
          throw new TypeError('"encoding" must be a valid string encoding');
        }
        return isModern ? Buffer.from(string5, encoding) : new Buffer(string5, encoding);
      }
      function bufferFrom(value, encodingOrOffset, length2) {
        if (typeof value === "number") {
          throw new TypeError('"value" argument must not be a number');
        }
        if (isArrayBuffer(value)) {
          return fromArrayBuffer(value, encodingOrOffset, length2);
        }
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        return isModern ? Buffer.from(value) : new Buffer(value);
      }
      module.exports = bufferFrom;
    }
  });

  // ../node_modules/source-map-support/source-map-support.js
  var require_source_map_support = __commonJS({
    "../node_modules/source-map-support/source-map-support.js"(exports, module) {
      var SourceMapConsumer = require_source_map().SourceMapConsumer;
      var path4 = require_path();
      var fs;
      try {
        fs = require_fs();
        if (!fs.existsSync || !fs.readFileSync) {
          fs = null;
        }
      } catch (err) {
      }
      var bufferFrom = require_buffer_from();
      function dynamicRequire(mod, request) {
        return mod.require(request);
      }
      var errorFormatterInstalled = false;
      var uncaughtShimInstalled = false;
      var emptyCacheBetweenOperations = false;
      var environment = "auto";
      var fileContentsCache = {};
      var sourceMapCache = {};
      var reSourceMap = /^data:application\/json[^,]+base64,/;
      var retrieveFileHandlers = [];
      var retrieveMapHandlers = [];
      function isInBrowser() {
        if (environment === "browser")
          return true;
        if (environment === "node")
          return false;
        return typeof window !== "undefined" && typeof XMLHttpRequest === "function" && !(window.require && window.module && window.process && window.process.type === "renderer");
      }
      function hasGlobalProcessEventEmitter() {
        return typeof process === "object" && process !== null && typeof process.on === "function";
      }
      function globalProcessVersion() {
        if (typeof process === "object" && process !== null) {
          return process.version;
        } else {
          return "";
        }
      }
      function globalProcessStderr() {
        if (typeof process === "object" && process !== null) {
          return process.stderr;
        }
      }
      function globalProcessExit(code2) {
        if (typeof process === "object" && process !== null && typeof process.exit === "function") {
          return process.exit(code2);
        }
      }
      function handlerExec(list3) {
        return function(arg) {
          for (var i4 = 0; i4 < list3.length; i4++) {
            var ret = list3[i4](arg);
            if (ret) {
              return ret;
            }
          }
          return null;
        };
      }
      var retrieveFile = handlerExec(retrieveFileHandlers);
      retrieveFileHandlers.push(function(path5) {
        path5 = path5.trim();
        if (/^file:/.test(path5)) {
          path5 = path5.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
            return drive ? "" : (
              // file:///C:/dir/file -> C:/dir/file
              "/"
            );
          });
        }
        if (path5 in fileContentsCache) {
          return fileContentsCache[path5];
        }
        var contents = "";
        try {
          if (!fs) {
            var xhr = new XMLHttpRequest();
            xhr.open(
              "GET",
              path5,
              /** async */
              false
            );
            xhr.send(null);
            if (xhr.readyState === 4 && xhr.status === 200) {
              contents = xhr.responseText;
            }
          } else if (fs.existsSync(path5)) {
            contents = fs.readFileSync(path5, "utf8");
          }
        } catch (er) {
        }
        return fileContentsCache[path5] = contents;
      });
      function supportRelativeURL(file, url) {
        if (!file)
          return url;
        var dir = path4.dirname(file);
        var match2 = /^\w+:\/\/[^\/]*/.exec(dir);
        var protocol = match2 ? match2[0] : "";
        var startPath = dir.slice(protocol.length);
        if (protocol && /^\/\w\:/.test(startPath)) {
          protocol += "/";
          return protocol + path4.resolve(dir.slice(protocol.length), url).replace(/\\/g, "/");
        }
        return protocol + path4.resolve(dir.slice(protocol.length), url);
      }
      function retrieveSourceMapURL(source) {
        var fileData;
        if (isInBrowser()) {
          try {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", source, false);
            xhr.send(null);
            fileData = xhr.readyState === 4 ? xhr.responseText : null;
            var sourceMapHeader = xhr.getResponseHeader("SourceMap") || xhr.getResponseHeader("X-SourceMap");
            if (sourceMapHeader) {
              return sourceMapHeader;
            }
          } catch (e3) {
          }
        }
        fileData = retrieveFile(source);
        var re2 = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
        var lastMatch, match2;
        while (match2 = re2.exec(fileData))
          lastMatch = match2;
        if (!lastMatch)
          return null;
        return lastMatch[1];
      }
      var retrieveSourceMap = handlerExec(retrieveMapHandlers);
      retrieveMapHandlers.push(function(source) {
        var sourceMappingURL = retrieveSourceMapURL(source);
        if (!sourceMappingURL)
          return null;
        var sourceMapData;
        if (reSourceMap.test(sourceMappingURL)) {
          var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1);
          sourceMapData = bufferFrom(rawData, "base64").toString();
          sourceMappingURL = source;
        } else {
          sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
          sourceMapData = retrieveFile(sourceMappingURL);
        }
        if (!sourceMapData) {
          return null;
        }
        return {
          url: sourceMappingURL,
          map: sourceMapData
        };
      });
      function mapSourcePosition(position4) {
        var sourceMap = sourceMapCache[position4.source];
        if (!sourceMap) {
          var urlAndMap = retrieveSourceMap(position4.source);
          if (urlAndMap) {
            sourceMap = sourceMapCache[position4.source] = {
              url: urlAndMap.url,
              map: new SourceMapConsumer(urlAndMap.map)
            };
            if (sourceMap.map.sourcesContent) {
              sourceMap.map.sources.forEach(function(source, i4) {
                var contents = sourceMap.map.sourcesContent[i4];
                if (contents) {
                  var url = supportRelativeURL(sourceMap.url, source);
                  fileContentsCache[url] = contents;
                }
              });
            }
          } else {
            sourceMap = sourceMapCache[position4.source] = {
              url: null,
              map: null
            };
          }
        }
        if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === "function") {
          var originalPosition = sourceMap.map.originalPositionFor(position4);
          if (originalPosition.source !== null) {
            originalPosition.source = supportRelativeURL(
              sourceMap.url,
              originalPosition.source
            );
            return originalPosition;
          }
        }
        return position4;
      }
      function mapEvalOrigin(origin) {
        var match2 = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
        if (match2) {
          var position4 = mapSourcePosition({
            source: match2[2],
            line: +match2[3],
            column: match2[4] - 1
          });
          return "eval at " + match2[1] + " (" + position4.source + ":" + position4.line + ":" + (position4.column + 1) + ")";
        }
        match2 = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
        if (match2) {
          return "eval at " + match2[1] + " (" + mapEvalOrigin(match2[2]) + ")";
        }
        return origin;
      }
      function CallSiteToString() {
        var fileName;
        var fileLocation = "";
        if (this.isNative()) {
          fileLocation = "native";
        } else {
          fileName = this.getScriptNameOrSourceURL();
          if (!fileName && this.isEval()) {
            fileLocation = this.getEvalOrigin();
            fileLocation += ", ";
          }
          if (fileName) {
            fileLocation += fileName;
          } else {
            fileLocation += "<anonymous>";
          }
          var lineNumber = this.getLineNumber();
          if (lineNumber != null) {
            fileLocation += ":" + lineNumber;
            var columnNumber = this.getColumnNumber();
            if (columnNumber) {
              fileLocation += ":" + columnNumber;
            }
          }
        }
        var line2 = "";
        var functionName = this.getFunctionName();
        var addSuffix = true;
        var isConstructor = this.isConstructor();
        var isMethodCall = !(this.isToplevel() || isConstructor);
        if (isMethodCall) {
          var typeName = this.getTypeName();
          if (typeName === "[object Object]") {
            typeName = "null";
          }
          var methodName = this.getMethodName();
          if (functionName) {
            if (typeName && functionName.indexOf(typeName) != 0) {
              line2 += typeName + ".";
            }
            line2 += functionName;
            if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
              line2 += " [as " + methodName + "]";
            }
          } else {
            line2 += typeName + "." + (methodName || "<anonymous>");
          }
        } else if (isConstructor) {
          line2 += "new " + (functionName || "<anonymous>");
        } else if (functionName) {
          line2 += functionName;
        } else {
          line2 += fileLocation;
          addSuffix = false;
        }
        if (addSuffix) {
          line2 += " (" + fileLocation + ")";
        }
        return line2;
      }
      function cloneCallSite(frame) {
        var object = {};
        Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
          object[name] = /^(?:is|get)/.test(name) ? function() {
            return frame[name].call(frame);
          } : frame[name];
        });
        object.toString = CallSiteToString;
        return object;
      }
      function wrapCallSite(frame, state) {
        if (state === void 0) {
          state = { nextPosition: null, curPosition: null };
        }
        if (frame.isNative()) {
          state.curPosition = null;
          return frame;
        }
        var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
        if (source) {
          var line2 = frame.getLineNumber();
          var column2 = frame.getColumnNumber() - 1;
          var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
          var headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;
          if (line2 === 1 && column2 > headerLength && !isInBrowser() && !frame.isEval()) {
            column2 -= headerLength;
          }
          var position4 = mapSourcePosition({
            source,
            line: line2,
            column: column2
          });
          state.curPosition = position4;
          frame = cloneCallSite(frame);
          var originalFunctionName = frame.getFunctionName;
          frame.getFunctionName = function() {
            if (state.nextPosition == null) {
              return originalFunctionName();
            }
            return state.nextPosition.name || originalFunctionName();
          };
          frame.getFileName = function() {
            return position4.source;
          };
          frame.getLineNumber = function() {
            return position4.line;
          };
          frame.getColumnNumber = function() {
            return position4.column + 1;
          };
          frame.getScriptNameOrSourceURL = function() {
            return position4.source;
          };
          return frame;
        }
        var origin = frame.isEval() && frame.getEvalOrigin();
        if (origin) {
          origin = mapEvalOrigin(origin);
          frame = cloneCallSite(frame);
          frame.getEvalOrigin = function() {
            return origin;
          };
          return frame;
        }
        return frame;
      }
      function prepareStackTrace(error, stack) {
        if (emptyCacheBetweenOperations) {
          fileContentsCache = {};
          sourceMapCache = {};
        }
        var name = error.name || "Error";
        var message = error.message || "";
        var errorString = name + ": " + message;
        var state = { nextPosition: null, curPosition: null };
        var processedStack = [];
        for (var i4 = stack.length - 1; i4 >= 0; i4--) {
          processedStack.push("\n    at " + wrapCallSite(stack[i4], state));
          state.nextPosition = state.curPosition;
        }
        state.curPosition = state.nextPosition = null;
        return errorString + processedStack.reverse().join("");
      }
      function getErrorSource(error) {
        var match2 = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
        if (match2) {
          var source = match2[1];
          var line2 = +match2[2];
          var column2 = +match2[3];
          var contents = fileContentsCache[source];
          if (!contents && fs && fs.existsSync(source)) {
            try {
              contents = fs.readFileSync(source, "utf8");
            } catch (er) {
              contents = "";
            }
          }
          if (contents) {
            var code2 = contents.split(/(?:\r\n|\r|\n)/)[line2 - 1];
            if (code2) {
              return source + ":" + line2 + "\n" + code2 + "\n" + new Array(column2).join(" ") + "^";
            }
          }
        }
        return null;
      }
      function printErrorAndExit(error) {
        var source = getErrorSource(error);
        var stderr = globalProcessStderr();
        if (stderr && stderr._handle && stderr._handle.setBlocking) {
          stderr._handle.setBlocking(true);
        }
        if (source) {
          console.error();
          console.error(source);
        }
        console.error(error.stack);
        globalProcessExit(1);
      }
      function shimEmitUncaughtException() {
        var origEmit = process.emit;
        process.emit = function(type) {
          if (type === "uncaughtException") {
            var hasStack = arguments[1] && arguments[1].stack;
            var hasListeners = this.listeners(type).length > 0;
            if (hasStack && !hasListeners) {
              return printErrorAndExit(arguments[1]);
            }
          }
          return origEmit.apply(this, arguments);
        };
      }
      var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
      var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);
      exports.wrapCallSite = wrapCallSite;
      exports.getErrorSource = getErrorSource;
      exports.mapSourcePosition = mapSourcePosition;
      exports.retrieveSourceMap = retrieveSourceMap;
      exports.install = function(options) {
        options = options || {};
        if (options.environment) {
          environment = options.environment;
          if (["node", "browser", "auto"].indexOf(environment) === -1) {
            throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}");
          }
        }
        if (options.retrieveFile) {
          if (options.overrideRetrieveFile) {
            retrieveFileHandlers.length = 0;
          }
          retrieveFileHandlers.unshift(options.retrieveFile);
        }
        if (options.retrieveSourceMap) {
          if (options.overrideRetrieveSourceMap) {
            retrieveMapHandlers.length = 0;
          }
          retrieveMapHandlers.unshift(options.retrieveSourceMap);
        }
        if (options.hookRequire && !isInBrowser()) {
          var Module = dynamicRequire(module, "module");
          var $compile = Module.prototype._compile;
          if (!$compile.__sourceMapSupport) {
            Module.prototype._compile = function(content3, filename) {
              fileContentsCache[filename] = content3;
              sourceMapCache[filename] = void 0;
              return $compile.call(this, content3, filename);
            };
            Module.prototype._compile.__sourceMapSupport = true;
          }
        }
        if (!emptyCacheBetweenOperations) {
          emptyCacheBetweenOperations = "emptyCacheBetweenOperations" in options ? options.emptyCacheBetweenOperations : false;
        }
        if (!errorFormatterInstalled) {
          errorFormatterInstalled = true;
          Error.prepareStackTrace = prepareStackTrace;
        }
        if (!uncaughtShimInstalled) {
          var installHandler = "handleUncaughtExceptions" in options ? options.handleUncaughtExceptions : true;
          try {
            var worker_threads = dynamicRequire(module, "worker_threads");
            if (worker_threads.isMainThread === false) {
              installHandler = false;
            }
          } catch (e3) {
          }
          if (installHandler && hasGlobalProcessEventEmitter()) {
            uncaughtShimInstalled = true;
            shimEmitUncaughtException();
          }
        }
      };
      exports.resetRetrieveHandlers = function() {
        retrieveFileHandlers.length = 0;
        retrieveMapHandlers.length = 0;
        retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
        retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);
        retrieveSourceMap = handlerExec(retrieveMapHandlers);
        retrieveFile = handlerExec(retrieveFileHandlers);
      };
    }
  });

  // src/index.tsx
  var import_react89 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // ../node_modules/@griffel/core/shorthands/generateStyles.esm.js
  var positionMap = ["Top", "Right", "Bottom", "Left"];
  function generateStyles(property, suffix, ...values2) {
    const [firstValue, secondValue = firstValue, thirdValue = firstValue, fourthValue = secondValue] = values2;
    const valuesWithDefaults = [firstValue, secondValue, thirdValue, fourthValue];
    const styles4 = {};
    for (let i4 = 0; i4 < valuesWithDefaults.length; i4 += 1) {
      if (valuesWithDefaults[i4] || valuesWithDefaults[i4] === 0) {
        const newKey = property + positionMap[i4] + suffix;
        styles4[newKey] = valuesWithDefaults[i4];
      }
    }
    return styles4;
  }

  // ../node_modules/@griffel/core/shorthands/borderWidth.esm.js
  function borderWidth(...values2) {
    return generateStyles("border", "Width", ...values2);
  }

  // ../node_modules/@griffel/core/shorthands/borderStyle.esm.js
  function borderStyle(...values2) {
    return generateStyles("border", "Style", ...values2);
  }

  // ../node_modules/@griffel/core/shorthands/borderColor.esm.js
  function borderColor(...values2) {
    return generateStyles("border", "Color", ...values2);
  }

  // ../node_modules/@griffel/core/shorthands/utils.esm.js
  var LINE_STYLES = ["none", "hidden", "dotted", "dashed", "solid", "double", "groove", "ridge", "inset", "outset"];
  function isBorderStyle(value) {
    return LINE_STYLES.includes(value);
  }

  // ../node_modules/@griffel/core/shorthands/border.esm.js
  function border(...values2) {
    if (isBorderStyle(values2[0])) {
      return {
        ...borderStyle(values2[0]),
        ...values2[1] && borderWidth(values2[1]),
        ...values2[2] && borderColor(values2[2])
      };
    }
    return {
      ...borderWidth(values2[0]),
      ...values2[1] && borderStyle(values2[1]),
      ...values2[2] && borderColor(values2[2])
    };
  }

  // ../node_modules/@griffel/core/shorthands/borderLeft.esm.js
  function borderLeft(...values2) {
    if (isBorderStyle(values2[0])) {
      return {
        borderLeftStyle: values2[0],
        ...values2[1] && {
          borderLeftWidth: values2[1]
        },
        ...values2[2] && {
          borderLeftColor: values2[2]
        }
      };
    }
    return {
      borderLeftWidth: values2[0],
      ...values2[1] && {
        borderLeftStyle: values2[1]
      },
      ...values2[2] && {
        borderLeftColor: values2[2]
      }
    };
  }

  // ../node_modules/@griffel/core/shorthands/borderBottom.esm.js
  function borderBottom(...values2) {
    if (isBorderStyle(values2[0])) {
      return {
        borderBottomStyle: values2[0],
        ...values2[1] && {
          borderBottomWidth: values2[1]
        },
        ...values2[2] && {
          borderBottomColor: values2[2]
        }
      };
    }
    return {
      borderBottomWidth: values2[0],
      ...values2[1] && {
        borderBottomStyle: values2[1]
      },
      ...values2[2] && {
        borderBottomColor: values2[2]
      }
    };
  }

  // ../node_modules/@griffel/core/shorthands/borderRight.esm.js
  function borderRight(...values2) {
    if (isBorderStyle(values2[0])) {
      return {
        borderRightStyle: values2[0],
        ...values2[1] && {
          borderRightWidth: values2[1]
        },
        ...values2[2] && {
          borderRightColor: values2[2]
        }
      };
    }
    return {
      borderRightWidth: values2[0],
      ...values2[1] && {
        borderRightStyle: values2[1]
      },
      ...values2[2] && {
        borderRightColor: values2[2]
      }
    };
  }

  // ../node_modules/@griffel/core/shorthands/borderTop.esm.js
  function borderTop(...values2) {
    if (isBorderStyle(values2[0])) {
      return {
        borderTopStyle: values2[0],
        ...values2[1] && {
          borderTopWidth: values2[1]
        },
        ...values2[2] && {
          borderTopColor: values2[2]
        }
      };
    }
    return {
      borderTopWidth: values2[0],
      ...values2[1] && {
        borderTopStyle: values2[1]
      },
      ...values2[2] && {
        borderTopColor: values2[2]
      }
    };
  }

  // ../node_modules/@griffel/core/shorthands/borderRadius.esm.js
  function borderRadius(value1, value2 = value1, value3 = value1, value4 = value2) {
    return {
      borderBottomRightRadius: value3,
      borderBottomLeftRadius: value4,
      borderTopRightRadius: value2,
      borderTopLeftRadius: value1
    };
  }

  // ../node_modules/@griffel/core/shorthands/flex.esm.js
  var isUnit = (value) => typeof value === "string" && /(\d+(\w+|%))/.test(value);
  var isUnitless = (value) => typeof value === "number" && !Number.isNaN(value);
  var isInitial = (value) => value === "initial";
  var isAuto = (value) => value === "auto";
  var isNone = (value) => value === "none";
  var widthReservedKeys = ["content", "fit-content", "max-content", "min-content"];
  var isWidth = (value) => widthReservedKeys.some((key) => value === key) || isUnit(value);
  function flex(...values2) {
    const isOneValueSyntax = values2.length === 1;
    const isTwoValueSyntax = values2.length === 2;
    const isThreeValueSyntax = values2.length === 3;
    if (isOneValueSyntax) {
      const [firstValue] = values2;
      if (isInitial(firstValue)) {
        return {
          flexGrow: 0,
          flexShrink: 1,
          flexBasis: "auto"
        };
      }
      if (isAuto(firstValue)) {
        return {
          flexGrow: 1,
          flexShrink: 1,
          flexBasis: "auto"
        };
      }
      if (isNone(firstValue)) {
        return {
          flexGrow: 0,
          flexShrink: 0,
          flexBasis: "auto"
        };
      }
      if (isUnitless(firstValue)) {
        return {
          flexGrow: firstValue,
          flexShrink: 1,
          flexBasis: 0
        };
      }
      if (isWidth(firstValue)) {
        return {
          flexGrow: 1,
          flexShrink: 1,
          flexBasis: firstValue
        };
      }
    }
    if (isTwoValueSyntax) {
      const [firstValue, secondValue] = values2;
      if (isUnitless(secondValue)) {
        return {
          flexGrow: firstValue,
          flexShrink: secondValue,
          flexBasis: 0
        };
      }
      if (isWidth(secondValue)) {
        return {
          flexGrow: firstValue,
          flexShrink: 1,
          flexBasis: secondValue
        };
      }
    }
    if (isThreeValueSyntax) {
      const [firstValue, secondValue, thirdValue] = values2;
      if (isUnitless(firstValue) && isUnitless(secondValue) && (isAuto(thirdValue) || isWidth(thirdValue))) {
        return {
          flexGrow: firstValue,
          flexShrink: secondValue,
          flexBasis: thirdValue
        };
      }
    }
    if (true) {
      console.error(`The value passed to shorthands.flex did not match any flex property specs. The CSS styles were not generated. Please, check the flex documentation.`);
    }
    return {};
  }

  // ../node_modules/@griffel/core/shorthands/gap.esm.js
  function gap(columnGap, rowGap = columnGap) {
    return {
      columnGap,
      rowGap
    };
  }

  // ../node_modules/@griffel/core/shorthands/gridArea.esm.js
  var cssVarRegEx = /var\(.*\)/gi;
  function isValidGridAreaInput(value) {
    return value === void 0 || typeof value === "number" || typeof value === "string" && !cssVarRegEx.test(value);
  }
  var customIdentRegEx = /^[a-zA-Z0-9\-_\\#;]+$/;
  var nonCustomIdentRegEx = /^-moz-initial$|^auto$|^initial$|^inherit$|^revert$|^unset$|^span \d+$|\d.*/;
  function isCustomIdent(value) {
    return value !== void 0 && typeof value === "string" && customIdentRegEx.test(value) && !nonCustomIdentRegEx.test(value);
  }
  function gridArea(...values2) {
    if (values2.some((value) => !isValidGridAreaInput(value))) {
      if (true) {
        console.error(`The value passed to shorthands.gridArea() did not match any gridArea property specs. The CSS styles were not generated. Please, check the gridArea documentation.`, ["The value passed to shorthands.gridArea() did not match any gridArea property specs. ", "The CSS styles were not generated.\n", "Please, check the `grid-area` documentation:\n", "- https://developer.mozilla.org/docs/Web/CSS/grid-area", "- https://griffel.js.org/react/api/shorthands#shorthandsgridarea"].join(""));
      }
      return {};
    }
    const gridRowStart = values2[0] !== void 0 ? values2[0] : "auto";
    const gridColumnStart = values2[1] !== void 0 ? values2[1] : isCustomIdent(gridRowStart) ? gridRowStart : "auto";
    const gridRowEnd = values2[2] !== void 0 ? values2[2] : isCustomIdent(gridRowStart) ? gridRowStart : "auto";
    const gridColumnEnd = values2[3] !== void 0 ? values2[3] : isCustomIdent(gridColumnStart) ? gridColumnStart : "auto";
    return {
      gridRowStart,
      gridColumnStart,
      gridRowEnd,
      gridColumnEnd
    };
  }

  // ../node_modules/@griffel/core/shorthands/margin.esm.js
  function margin(...values2) {
    return generateStyles("margin", "", ...values2);
  }

  // ../node_modules/@griffel/core/shorthands/marginBlock.esm.js
  function marginBlock(start2, end2 = start2) {
    return {
      marginBlockStart: start2,
      marginBlockEnd: end2
    };
  }

  // ../node_modules/@griffel/core/shorthands/marginInline.esm.js
  function marginInline(start2, end2 = start2) {
    return {
      marginInlineStart: start2,
      marginInlineEnd: end2
    };
  }

  // ../node_modules/@griffel/core/shorthands/padding.esm.js
  function padding(...values2) {
    return generateStyles("padding", "", ...values2);
  }

  // ../node_modules/@griffel/core/shorthands/paddingBlock.esm.js
  function paddingBlock(start2, end2 = start2) {
    return {
      paddingBlockStart: start2,
      paddingBlockEnd: end2
    };
  }

  // ../node_modules/@griffel/core/shorthands/paddingInline.esm.js
  function paddingInline(start2, end2 = start2) {
    return {
      paddingInlineStart: start2,
      paddingInlineEnd: end2
    };
  }

  // ../node_modules/@griffel/core/shorthands/overflow.esm.js
  function overflow(overflowX, overflowY = overflowX) {
    return {
      overflowX,
      overflowY
    };
  }

  // ../node_modules/@griffel/core/shorthands/inset.esm.js
  function inset(...values2) {
    const [firstValue, secondValue = firstValue, thirdValue = firstValue, fourthValue = secondValue] = values2;
    return {
      top: firstValue,
      right: secondValue,
      bottom: thirdValue,
      left: fourthValue
    };
  }

  // ../node_modules/@griffel/core/shorthands/outline.esm.js
  function outline(outlineWidth, outlineStyle, outlineColor) {
    return {
      outlineWidth,
      ...outlineStyle && {
        outlineStyle
      },
      ...outlineColor && {
        outlineColor
      }
    };
  }

  // ../node_modules/@griffel/core/shorthands/transition.esm.js
  function transition(...values2) {
    if (isTransitionGlobalInputs(values2)) {
      return {
        transitionDelay: values2[0],
        transitionDuration: values2[0],
        transitionProperty: values2[0],
        transitionTimingFunction: values2[0]
      };
    }
    const transitionInputs = normalizeTransitionInputs(values2);
    return transitionInputs.reduce((acc, [property, duration = "0s", delay = "0s", timingFunction = "ease"], index2) => {
      if (index2 === 0) {
        acc.transitionProperty = property;
        acc.transitionDuration = duration;
        acc.transitionDelay = delay;
        acc.transitionTimingFunction = timingFunction;
      } else {
        acc.transitionProperty += `, ${property}`;
        acc.transitionDuration += `, ${duration}`;
        acc.transitionDelay += `, ${delay}`;
        acc.transitionTimingFunction += `, ${timingFunction}`;
      }
      return acc;
    }, {});
  }
  var transitionGlobalInputs = ["-moz-initial", "inherit", "initial", "revert", "unset"];
  function isTransitionGlobalInputs(values2) {
    return values2.length === 1 && transitionGlobalInputs.includes(values2[0]);
  }
  function normalizeTransitionInputs(transitionInputs) {
    if (transitionInputs.length === 1 && Array.isArray(transitionInputs[0])) {
      return transitionInputs[0];
    }
    return [transitionInputs];
  }

  // ../node_modules/@griffel/core/shorthands/textDecoration.esm.js
  function textDecoration(value, ...values2) {
    if (values2.length === 0) {
      return isTextDecorationStyleInput(value) ? {
        textDecorationStyle: value
      } : {
        textDecorationLine: value
      };
    }
    const [textDecorationStyle, textDecorationColor, textDecorationThickness] = values2;
    return {
      textDecorationLine: value,
      ...textDecorationStyle && {
        textDecorationStyle
      },
      ...textDecorationColor && {
        textDecorationColor
      },
      ...textDecorationThickness && {
        textDecorationThickness
      }
    };
  }
  var textDecorationStyleInputs = ["dashed", "dotted", "double", "solid", "wavy"];
  function isTextDecorationStyleInput(value) {
    return textDecorationStyleInputs.includes(value);
  }

  // ../node_modules/@griffel/core/constants.esm.js
  var __GLOBAL__ = typeof window === "undefined" ? window : window;
  var __NAMESPACE_PREFIX__ = "@griffel/";
  function getGlobalVar(name, defaultValue) {
    if (!__GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)]) {
      __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)] = defaultValue;
    }
    return __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)];
  }
  var DEBUG_RESET_CLASSES = /* @__PURE__ */ getGlobalVar("DEBUG_RESET_CLASSES", {});
  var DEFINITION_LOOKUP_TABLE = /* @__PURE__ */ getGlobalVar("DEFINITION_LOOKUP_TABLE", {});
  var DATA_BUCKET_ATTR = "data-make-styles-bucket";
  var HASH_PREFIX = "f";
  var RESET_HASH_PREFIX = "r";
  var SEQUENCE_HASH_LENGTH = 7;
  var SEQUENCE_PREFIX = "___";
  var DEBUG_SEQUENCE_SEPARATOR = "_";
  var SEQUENCE_SIZE = false ? SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH : SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH + DEBUG_SEQUENCE_SEPARATOR.length + SEQUENCE_HASH_LENGTH;
  var LOOKUP_DEFINITIONS_INDEX = 0;
  var LOOKUP_DIR_INDEX = 1;
  var UNSUPPORTED_CSS_PROPERTIES = {
    all: 1,
    animation: 1,
    background: 1,
    backgroundPosition: 1,
    border: 1,
    borderBlock: 1,
    borderBlockEnd: 1,
    borderBlockStart: 1,
    borderBottom: 1,
    borderColor: 1,
    borderImage: 1,
    borderInline: 1,
    borderInlineEnd: 1,
    borderInlineStart: 1,
    borderLeft: 1,
    borderRadius: 1,
    borderRight: 1,
    borderStyle: 1,
    borderTop: 1,
    borderWidth: 1,
    caret: 1,
    columns: 1,
    columnRule: 1,
    containIntrinsicSize: 1,
    container: 1,
    flex: 1,
    flexFlow: 1,
    font: 1,
    gap: 1,
    grid: 1,
    gridArea: 1,
    gridColumn: 1,
    gridRow: 1,
    gridTemplate: 1,
    inset: 1,
    insetBlock: 1,
    insetInline: 1,
    lineClamp: 1,
    listStyle: 1,
    margin: 1,
    marginBlock: 1,
    marginInline: 1,
    mask: 1,
    maskBorder: 1,
    motion: 1,
    offset: 1,
    outline: 1,
    overflow: 1,
    overscrollBehavior: 1,
    padding: 1,
    paddingBlock: 1,
    paddingInline: 1,
    placeItems: 1,
    placeContent: 1,
    placeSelf: 1,
    scrollMargin: 1,
    scrollMarginBlock: 1,
    scrollMarginInline: 1,
    scrollPadding: 1,
    scrollPaddingBlock: 1,
    scrollPaddingInline: 1,
    scrollSnapMargin: 1,
    scrollTimeline: 1,
    textDecoration: 1,
    textEmphasis: 1,
    transition: 1
  };

  // ../node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h4 = 0;
    var k2, i4 = 0, len = str.length;
    for (; len >= 4; ++i4, len -= 4) {
      k2 = str.charCodeAt(i4) & 255 | (str.charCodeAt(++i4) & 255) << 8 | (str.charCodeAt(++i4) & 255) << 16 | (str.charCodeAt(++i4) & 255) << 24;
      k2 = /* Math.imul(k, m): */
      (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
      k2 ^= /* k >>> r: */
      k2 >>> 24;
      h4 = /* Math.imul(k, m): */
      (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h4 & 65535) * 1540483477 + ((h4 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h4 ^= (str.charCodeAt(i4 + 2) & 255) << 16;
      case 2:
        h4 ^= (str.charCodeAt(i4 + 1) & 255) << 8;
      case 1:
        h4 ^= str.charCodeAt(i4) & 255;
        h4 = /* Math.imul(h, m): */
        (h4 & 65535) * 1540483477 + ((h4 >>> 16) * 59797 << 16);
    }
    h4 ^= h4 >>> 13;
    h4 = /* Math.imul(h, m): */
    (h4 & 65535) * 1540483477 + ((h4 >>> 16) * 59797 << 16);
    return ((h4 ^ h4 >>> 15) >>> 0).toString(36);
  }

  // ../node_modules/@griffel/core/runtime/utils/hashSequence.esm.js
  function padEndHash(value) {
    const hashLength = value.length;
    if (hashLength === SEQUENCE_HASH_LENGTH) {
      return value;
    }
    for (let i4 = hashLength; i4 < SEQUENCE_HASH_LENGTH; i4++) {
      value += "0";
    }
    return value;
  }
  function hashSequence(classes, dir, sequenceIds = []) {
    if (false) {
      return SEQUENCE_PREFIX + padEndHash(murmur2(classes + dir));
    }
    return SEQUENCE_PREFIX + padEndHash(murmur2(classes + dir)) + DEBUG_SEQUENCE_SEPARATOR + padEndHash(murmur2(sequenceIds.join("")));
  }

  // ../node_modules/@griffel/core/runtime/reduceToClassNameForSlots.esm.js
  function reduceToClassName(classMap, dir) {
    let className = "";
    for (const propertyHash in classMap) {
      const classNameMapping = classMap[propertyHash];
      if (classNameMapping) {
        const hasRTLClassName = Array.isArray(classNameMapping);
        if (dir === "rtl") {
          className += (hasRTLClassName ? classNameMapping[1] : classNameMapping) + " ";
        } else {
          className += (hasRTLClassName ? classNameMapping[0] : classNameMapping) + " ";
        }
      }
    }
    return className.slice(0, -1);
  }
  function reduceToClassNameForSlots(classesMapBySlot, dir) {
    const classNamesForSlots = {};
    for (const slotName in classesMapBySlot) {
      const slotClasses = reduceToClassName(classesMapBySlot[slotName], dir);
      if (slotClasses === "") {
        classNamesForSlots[slotName] = "";
        continue;
      }
      const sequenceHash = hashSequence(slotClasses, dir);
      const resultSlotClasses = sequenceHash + " " + slotClasses;
      DEFINITION_LOOKUP_TABLE[sequenceHash] = [classesMapBySlot[slotName], dir];
      classNamesForSlots[slotName] = resultSlotClasses;
    }
    return classNamesForSlots;
  }

  // ../node_modules/@griffel/core/mergeClasses.esm.js
  var mergeClassesCachedResults = {};
  function mergeClasses() {
    let dir = null;
    let resultClassName = "";
    let sequenceMatch = "";
    const sequencesIds = new Array(arguments.length);
    let containsResetClassName = "";
    for (let i4 = 0; i4 < arguments.length; i4++) {
      const className = arguments[i4];
      if (typeof className === "string" && className !== "") {
        const sequenceIndex = className.indexOf(SEQUENCE_PREFIX);
        if (sequenceIndex === -1) {
          if (true) {
            className.split(" ").forEach((entry) => {
              if (entry.startsWith(RESET_HASH_PREFIX) && DEBUG_RESET_CLASSES[entry]) {
                if (containsResetClassName) {
                  console.error(`mergeClasses(): a passed string contains multiple classes produced by makeResetStyles (${className} & ${resultClassName}, this will lead to non-deterministic behavior. Learn more:https://griffel.js.org/react/api/make-reset-styles#limitations
Source string: ${className}`);
                } else {
                  containsResetClassName = entry;
                }
              }
            });
          }
          resultClassName += className + " ";
        } else {
          const sequenceId = className.substr(sequenceIndex, SEQUENCE_SIZE);
          if (sequenceIndex > 0) {
            resultClassName += className.slice(0, sequenceIndex);
          }
          sequenceMatch += sequenceId;
          sequencesIds[i4] = sequenceId;
        }
        if (true) {
          if (className.indexOf(SEQUENCE_PREFIX, sequenceIndex + 1) !== -1) {
            console.error(`mergeClasses(): a passed string contains multiple identifiers of atomic classes (classes that start with "${SEQUENCE_PREFIX}"), it's possible that passed classes were concatenated in a wrong way. Source string: ${className}`);
          }
        }
      }
    }
    if (sequenceMatch === "") {
      return resultClassName.slice(0, -1);
    }
    const mergeClassesResult = mergeClassesCachedResults[sequenceMatch];
    if (mergeClassesResult !== void 0) {
      return resultClassName + mergeClassesResult;
    }
    const sequenceMappings = [];
    for (let i4 = 0; i4 < arguments.length; i4++) {
      const sequenceId = sequencesIds[i4];
      if (sequenceId) {
        const sequenceMapping = DEFINITION_LOOKUP_TABLE[sequenceId];
        if (sequenceMapping) {
          sequenceMappings.push(sequenceMapping[LOOKUP_DEFINITIONS_INDEX]);
          if (true) {
            if (dir !== null && dir !== sequenceMapping[LOOKUP_DIR_INDEX]) {
              console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that has different direction (dir="${sequenceMapping[1] ? "rtl" : "ltr"}") setting than other classes. This is not supported. Source string: ${arguments[i4]}`);
            }
          }
          dir = sequenceMapping[LOOKUP_DIR_INDEX];
        } else {
          if (true) {
            console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that does not match any entry in cache. Source string: ${arguments[i4]}`);
          }
        }
      }
    }
    const resultDefinitions = Object.assign.apply(
      Object,
      // .assign() mutates the first object, we can't mutate mappings as it will produce invalid results later
      [{}].concat(sequenceMappings)
    );
    let atomicClassNames = reduceToClassName(resultDefinitions, dir);
    const newSequenceHash = hashSequence(atomicClassNames, dir, sequencesIds);
    atomicClassNames = newSequenceHash + " " + atomicClassNames;
    mergeClassesCachedResults[sequenceMatch] = atomicClassNames;
    DEFINITION_LOOKUP_TABLE[newSequenceHash] = [resultDefinitions, dir];
    return resultClassName + atomicClassNames;
  }

  // ../node_modules/@griffel/core/devtools/store.esm.js
  var sequenceDetails = {};
  var cssRules = /* @__PURE__ */ new Set();
  var debugData = {
    getChildrenSequences: (debugSequenceHash) => {
      const key = Object.keys(mergeClassesCachedResults).find((key2) => mergeClassesCachedResults[key2].startsWith(debugSequenceHash));
      if (key) {
        return key.split(SEQUENCE_PREFIX).filter((sequence) => sequence.length).map((sequence) => SEQUENCE_PREFIX + sequence);
      }
      return [];
    },
    addCSSRule: (rule) => {
      cssRules.add(rule);
    },
    addSequenceDetails: (classNamesForSlots, sourceURL) => {
      Object.entries(classNamesForSlots).forEach(([slotName, sequenceHash]) => {
        sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = {
          slotName,
          sourceURL
        };
      });
    },
    getCSSRules: () => {
      return Array.from(cssRules);
    },
    getSequenceDetails: (sequenceHash) => {
      return sequenceDetails[sequenceHash];
    }
  };

  // ../node_modules/@griffel/core/devtools/utils.esm.js
  function getDirectionalClassName(classes, direction) {
    return Array.isArray(classes) ? direction === "rtl" ? classes[1] : classes[0] : classes;
  }
  function getDebugClassNames(lookupItem, parentLookupItem, parentDebugClassNames, overridingSiblings) {
    const classesMapping = lookupItem[0];
    const direction = lookupItem[1];
    return Object.entries(classesMapping).map(([propertyHash, classes]) => {
      const className = getDirectionalClassName(classes, direction);
      let overriddenBy;
      if (parentDebugClassNames && parentLookupItem) {
        const matching = parentDebugClassNames.find(({
          className: parentClassName
        }) => parentClassName === className);
        if (!matching && parentLookupItem[0][propertyHash]) {
          overriddenBy = getDirectionalClassName(parentLookupItem[0][propertyHash], parentLookupItem[1]);
        } else if (matching && parentLookupItem[0][propertyHash]) {
          const siblingHasSameRule = overridingSiblings ? overridingSiblings.filter(({
            debugClassNames
          }) => debugClassNames.filter(({
            className: siblingClassName
          }) => siblingClassName === className).length > 0).length > 0 : false;
          overriddenBy = siblingHasSameRule ? matching.className : matching.overriddenBy;
        } else if (!matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        } else if (matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        }
      }
      return {
        className,
        overriddenBy
      };
    });
  }

  // ../node_modules/@griffel/core/devtools/getDebugTree.esm.js
  function getDebugTree(debugSequenceHash, parentNode) {
    const lookupItem = DEFINITION_LOOKUP_TABLE[debugSequenceHash];
    if (lookupItem === void 0) {
      return void 0;
    }
    const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : void 0;
    const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode === null || parentNode === void 0 ? void 0 : parentNode.debugClassNames, parentNode === null || parentNode === void 0 ? void 0 : parentNode.children);
    const node5 = {
      sequenceHash: debugSequenceHash,
      direction: lookupItem[1],
      children: [],
      debugClassNames
    };
    const childrenSequences = debugData.getChildrenSequences(node5.sequenceHash);
    childrenSequences.reverse().forEach((sequence) => {
      const child = getDebugTree(sequence, node5);
      if (child) {
        node5.children.push(child);
      }
    });
    if (!node5.children.length) {
      node5.rules = {};
      node5.debugClassNames.forEach(({
        className
      }) => {
        const mapData = debugData.getSequenceDetails(debugSequenceHash);
        if (mapData) {
          node5.slot = mapData.slotName;
          node5.sourceURL = mapData.sourceURL;
        }
        const cssRule = debugData.getCSSRules().find((cssRule2) => {
          return cssRule2.includes(className);
        });
        node5.rules[className] = cssRule;
      });
    }
    return node5;
  }

  // ../node_modules/@griffel/core/devtools/injectDevTools.esm.js
  function injectDevTools(document4) {
    const window2 = document4.defaultView;
    if (!window2 || window2.__GRIFFEL_DEVTOOLS__) {
      return;
    }
    const devtools = {
      getInfo: (element2) => {
        const rootDebugSequenceHash = Array.from(element2.classList).find((className) => className.startsWith(SEQUENCE_PREFIX));
        if (rootDebugSequenceHash === void 0) {
          return void 0;
        }
        return getDebugTree(rootDebugSequenceHash);
      }
    };
    Object.defineProperty(window2, "__GRIFFEL_DEVTOOLS__", {
      configurable: false,
      enumerable: false,
      get() {
        return devtools;
      }
    });
  }

  // ../node_modules/@griffel/core/devtools/isDevToolsEnabled.esm.js
  var isDevToolsEnabled = /* @__PURE__ */ (() => {
    var _a5;
    try {
      return Boolean(typeof window !== "undefined" && ((_a5 = window.sessionStorage) === null || _a5 === void 0 ? void 0 : _a5.getItem("__GRIFFEL_DEVTOOLS__")));
    } catch (e3) {
      return false;
    }
  })();

  // ../node_modules/@griffel/core/runtime/utils/normalizeCSSBucketEntry.esm.js
  function normalizeCSSBucketEntry(entry) {
    if (!Array.isArray(entry)) {
      return [entry];
    }
    if (entry.length > 2) {
      throw new Error("CSS Bucket contains an entry with greater than 2 items, please report this to https://github.com/microsoft/griffel/issues");
    }
    return entry;
  }

  // ../node_modules/@griffel/core/renderer/createIsomorphicStyleSheet.esm.js
  function createIsomorphicStyleSheet(styleElement, bucketName, elementAttributes) {
    const __cssRulesForSSR = [];
    elementAttributes[DATA_BUCKET_ATTR] = bucketName;
    if (styleElement) {
      for (const attrName in elementAttributes) {
        styleElement.setAttribute(attrName, elementAttributes[attrName]);
      }
    }
    function insertRule(rule) {
      if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
        return styleElement.sheet.insertRule(rule, styleElement.sheet.cssRules.length);
      }
      return __cssRulesForSSR.push(rule);
    }
    return {
      elementAttributes,
      insertRule,
      element: styleElement,
      bucketName,
      cssRules() {
        if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
          return Array.from(styleElement.sheet.cssRules).map((cssRule) => cssRule.cssText);
        }
        return __cssRulesForSSR;
      }
    };
  }

  // ../node_modules/@griffel/core/renderer/getStyleSheetForBucket.esm.js
  var styleBucketOrdering = [
    // reset styles
    "r",
    // catch-all
    "d",
    // link
    "l",
    // visited
    "v",
    // focus-within
    "w",
    // focus
    "f",
    // focus-visible
    "i",
    // hover
    "h",
    // active
    "a",
    // at rules for reset styles
    "s",
    // keyframes
    "k",
    // at-rules
    "t",
    // @media rules
    "m",
    // @container rules
    "c"
  ];
  var styleBucketOrderingMap = /* @__PURE__ */ styleBucketOrdering.reduce((acc, cur, j4) => {
    acc[cur] = j4;
    return acc;
  }, {});
  function getStyleSheetForBucket(bucketName, targetDocument, insertionPoint, renderer, metadata = {}) {
    const isMediaBucket = bucketName === "m";
    const stylesheetKey = isMediaBucket ? bucketName + metadata["m"] : bucketName;
    if (!renderer.stylesheets[stylesheetKey]) {
      const tag = targetDocument && targetDocument.createElement("style");
      const stylesheet3 = createIsomorphicStyleSheet(tag, bucketName, {
        ...renderer.styleElementAttributes,
        ...isMediaBucket && {
          media: metadata["m"]
        }
      });
      renderer.stylesheets[stylesheetKey] = stylesheet3;
      if (targetDocument && tag) {
        targetDocument.head.insertBefore(tag, findInsertionPoint(targetDocument, insertionPoint, bucketName, renderer, metadata));
      }
    }
    return renderer.stylesheets[stylesheetKey];
  }
  function findInsertionPoint(targetDocument, insertionPoint, targetBucket, renderer, metadata) {
    const targetOrder = styleBucketOrderingMap[targetBucket];
    let comparer = (el) => targetOrder - styleBucketOrderingMap[el.getAttribute(DATA_BUCKET_ATTR)];
    let styleElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}]`);
    if (targetBucket === "m" && metadata) {
      const mediaElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}="${targetBucket}"]`);
      if (mediaElements.length) {
        styleElements = mediaElements;
        comparer = (el) => renderer.compareMediaQueries(metadata["m"], el.media);
      }
    }
    const length2 = styleElements.length;
    let index2 = length2 - 1;
    while (index2 >= 0) {
      const styleElement = styleElements.item(index2);
      if (comparer(styleElement) > 0) {
        return styleElement.nextSibling;
      }
      index2--;
    }
    if (length2 > 0) {
      return styleElements.item(0);
    }
    return insertionPoint ? insertionPoint.nextSibling : null;
  }

  // ../node_modules/@griffel/core/renderer/safeInsertRule.esm.js
  var ignoreSuffixes = /* @__PURE__ */ ["-moz-placeholder", "-moz-focus-inner", "-moz-focusring", "-ms-input-placeholder", "-moz-read-write", "-moz-read-only"].join("|");
  var ignoreSuffixesRegex = /* @__PURE__ */ new RegExp(`:(${ignoreSuffixes})`);
  function safeInsertRule(sheet, ruleCSS) {
    try {
      sheet.insertRule(ruleCSS);
    } catch (e3) {
      if (!ignoreSuffixesRegex.test(ruleCSS)) {
        console.error(`There was a problem inserting the following rule: "${ruleCSS}"`, e3);
      }
    }
  }

  // ../node_modules/@griffel/core/renderer/createDOMRenderer.esm.js
  var lastIndex = 0;
  var defaultCompareMediaQueries = (a3, b4) => a3 < b4 ? -1 : a3 > b4 ? 1 : 0;
  function createDOMRenderer(targetDocument = typeof document === "undefined" ? void 0 : document, options = {}) {
    const {
      unstable_filterCSSRule,
      insertionPoint,
      styleElementAttributes,
      compareMediaQueries = defaultCompareMediaQueries
    } = options;
    const renderer = {
      insertionCache: {},
      stylesheets: {},
      styleElementAttributes: Object.freeze(styleElementAttributes),
      compareMediaQueries,
      id: `d${lastIndex++}`,
      insertCSSRules(cssRules2) {
        for (const styleBucketName in cssRules2) {
          const cssRulesForBucket = cssRules2[styleBucketName];
          for (let i4 = 0, l4 = cssRulesForBucket.length; i4 < l4; i4++) {
            const [ruleCSS, metadata] = normalizeCSSBucketEntry(cssRulesForBucket[i4]);
            const sheet = getStyleSheetForBucket(styleBucketName, targetDocument, insertionPoint || null, renderer, metadata);
            if (renderer.insertionCache[ruleCSS]) {
              continue;
            }
            renderer.insertionCache[ruleCSS] = styleBucketName;
            if (isDevToolsEnabled) {
              debugData.addCSSRule(ruleCSS);
            }
            if (unstable_filterCSSRule) {
              if (unstable_filterCSSRule(ruleCSS)) {
                safeInsertRule(sheet, ruleCSS);
              }
            } else {
              safeInsertRule(sheet, ruleCSS);
            }
          }
        }
      }
    };
    if (targetDocument && true && isDevToolsEnabled) {
      injectDevTools(targetDocument);
    }
    return renderer;
  }

  // ../node_modules/@griffel/core/devtools/react-render-tracker/stackTrace.esm.js
  var UNKNOWN_FUNCTION = "<unknown>";
  function parseStackTraceLine(line2) {
    return parseChrome(line2) || parseGecko(line2) || parseJSC(line2);
  }
  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)?\)?\s*$/i;
  var chromeRe2 = /^\s*at ()((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)\s*$/i;
  var chromeEvalRe = /\((\S*)\)/;
  function parseChrome(line2) {
    const parts = chromeRe.exec(line2) || chromeRe2.exec(line2);
    if (!parts) {
      return null;
    }
    let loc = parts[2];
    const isNative = loc && loc.indexOf("native") === 0;
    const isEval = loc && loc.indexOf("eval") === 0;
    const submatch = chromeEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: !isNative ? parts[2] : null,
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  function parseGecko(line2) {
    const parts = geckoRe.exec(line2);
    if (!parts) {
      return null;
    }
    let loc = parts[3];
    const isEval = loc && loc.indexOf(" > eval") > -1;
    const submatch = geckoEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?)\s*$/i;
  function parseJSC(line2) {
    const parts = javaScriptCoreRe.exec(line2);
    if (!parts) {
      return null;
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }

  // ../node_modules/@griffel/core/devtools/getSourceURLfromError.esm.js
  function getSourceURLfromError() {
    const stacks = String(new Error().stack).split("\n");
    const userMakeStyleCallLine = findUserMakeStyleCallInStacks(stacks);
    if (userMakeStyleCallLine === void 0) {
      return void 0;
    }
    const result = parseStackTraceLine(userMakeStyleCallLine);
    return result === null || result === void 0 ? void 0 : result.loc;
  }
  function findUserMakeStyleCallInStacks(stacks) {
    for (let i4 = stacks.length - 1; i4 >= 0; --i4) {
      if (stacks[i4].includes("at getSourceURLfromError")) {
        return stacks[i4 + 3];
      }
    }
    return void 0;
  }

  // ../node_modules/@griffel/core/insertionFactory.esm.js
  var insertionFactory = () => {
    const insertionCache = {};
    return function insertStyles(renderer, cssRules2) {
      if (insertionCache[renderer.id] === void 0) {
        renderer.insertCSSRules(cssRules2);
        insertionCache[renderer.id] = true;
      }
    };
  };

  // ../node_modules/rtl-css-js/dist/esm/convert-9768a965.js
  function arrayToObject(array) {
    return array.reduce(function(obj, _ref) {
      var prop1 = _ref[0], prop2 = _ref[1];
      obj[prop1] = prop2;
      obj[prop2] = prop1;
      return obj;
    }, {});
  }
  function isBoolean(val) {
    return typeof val === "boolean";
  }
  function isFunction(val) {
    return typeof val === "function";
  }
  function isNumber(val) {
    return typeof val === "number";
  }
  function isNullOrUndefined(val) {
    return val === null || typeof val === "undefined";
  }
  function isObject(val) {
    return val && typeof val === "object";
  }
  function isString(val) {
    return typeof val === "string";
  }
  function includes(inclusive, inclusee) {
    return inclusive.indexOf(inclusee) !== -1;
  }
  function flipSign(value) {
    if (parseFloat(value) === 0) {
      return value;
    }
    if (value[0] === "-") {
      return value.slice(1);
    }
    return "-" + value;
  }
  function flipTransformSign(match2, prefix2, offset3, suffix) {
    return prefix2 + flipSign(offset3) + suffix;
  }
  function calculateNewBackgroundPosition(value) {
    var idx = value.indexOf(".");
    if (idx === -1) {
      value = 100 - parseFloat(value) + "%";
    } else {
      var len = value.length - idx - 2;
      value = 100 - parseFloat(value);
      value = value.toFixed(len) + "%";
    }
    return value;
  }
  function getValuesAsList(value) {
    return value.replace(/ +/g, " ").split(" ").map(function(i4) {
      return i4.trim();
    }).filter(Boolean).reduce(function(_ref2, item) {
      var list3 = _ref2.list, state = _ref2.state;
      var openParansCount = (item.match(/\(/g) || []).length;
      var closedParansCount = (item.match(/\)/g) || []).length;
      if (state.parensDepth > 0) {
        list3[list3.length - 1] = list3[list3.length - 1] + " " + item;
      } else {
        list3.push(item);
      }
      state.parensDepth += openParansCount - closedParansCount;
      return {
        list: list3,
        state
      };
    }, {
      list: [],
      state: {
        parensDepth: 0
      }
    }).list;
  }
  function handleQuartetValues(value) {
    var splitValues = getValuesAsList(value);
    if (splitValues.length <= 3 || splitValues.length > 4) {
      return value;
    }
    var top = splitValues[0], right = splitValues[1], bottom = splitValues[2], left = splitValues[3];
    return [top, left, bottom, right].join(" ");
  }
  function canConvertValue(value) {
    return !isBoolean(value) && !isNullOrUndefined(value);
  }
  function splitShadow(value) {
    var shadows = [];
    var start2 = 0;
    var end2 = 0;
    var rgba = false;
    while (end2 < value.length) {
      if (!rgba && value[end2] === ",") {
        shadows.push(value.substring(start2, end2).trim());
        end2++;
        start2 = end2;
      } else if (value[end2] === "(") {
        rgba = true;
        end2++;
      } else if (value[end2] === ")") {
        rgba = false;
        end2++;
      } else {
        end2++;
      }
    }
    if (start2 != end2) {
      shadows.push(value.substring(start2, end2 + 1));
    }
    return shadows;
  }
  var propertyValueConverters = {
    padding: function padding2(_ref) {
      var value = _ref.value;
      if (isNumber(value)) {
        return value;
      }
      return handleQuartetValues(value);
    },
    textShadow: function textShadow(_ref2) {
      var value = _ref2.value;
      var flippedShadows = splitShadow(value).map(function(shadow) {
        return shadow.replace(/(^|\s)(-*)([.|\d]+)/, function(match2, whiteSpace, negative, number2) {
          if (number2 === "0") {
            return match2;
          }
          var doubleNegative = negative === "" ? "-" : "";
          return "" + whiteSpace + doubleNegative + number2;
        });
      });
      return flippedShadows.join(",");
    },
    borderColor: function borderColor2(_ref3) {
      var value = _ref3.value;
      return handleQuartetValues(value);
    },
    borderRadius: function borderRadius2(_ref4) {
      var value = _ref4.value;
      if (isNumber(value)) {
        return value;
      }
      if (includes(value, "/")) {
        var _value$split = value.split("/"), radius1 = _value$split[0], radius2 = _value$split[1];
        var convertedRadius1 = propertyValueConverters.borderRadius({
          value: radius1.trim()
        });
        var convertedRadius2 = propertyValueConverters.borderRadius({
          value: radius2.trim()
        });
        return convertedRadius1 + " / " + convertedRadius2;
      }
      var splitValues = getValuesAsList(value);
      switch (splitValues.length) {
        case 2: {
          return splitValues.reverse().join(" ");
        }
        case 4: {
          var topLeft = splitValues[0], topRight = splitValues[1], bottomRight = splitValues[2], bottomLeft = splitValues[3];
          return [topRight, topLeft, bottomLeft, bottomRight].join(" ");
        }
        default: {
          return value;
        }
      }
    },
    background: function background(_ref5) {
      var value = _ref5.value, valuesToConvert2 = _ref5.valuesToConvert, isRtl = _ref5.isRtl, bgImgDirectionRegex2 = _ref5.bgImgDirectionRegex, bgPosDirectionRegex2 = _ref5.bgPosDirectionRegex;
      if (isNumber(value)) {
        return value;
      }
      var backgroundPositionValue = value.replace(/(url\(.*?\))|(rgba?\(.*?\))|(hsl\(.*?\))|(#[a-fA-F0-9]+)|((^| )(\D)+( |$))/g, "").trim();
      value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({
        value: backgroundPositionValue,
        valuesToConvert: valuesToConvert2,
        isRtl,
        bgPosDirectionRegex: bgPosDirectionRegex2
      }));
      return propertyValueConverters.backgroundImage({
        value,
        valuesToConvert: valuesToConvert2,
        bgImgDirectionRegex: bgImgDirectionRegex2
      });
    },
    backgroundImage: function backgroundImage(_ref6) {
      var value = _ref6.value, valuesToConvert2 = _ref6.valuesToConvert, bgImgDirectionRegex2 = _ref6.bgImgDirectionRegex;
      if (!includes(value, "url(") && !includes(value, "linear-gradient(")) {
        return value;
      }
      return value.replace(bgImgDirectionRegex2, function(match2, g1, group2) {
        return match2.replace(group2, valuesToConvert2[group2]);
      });
    },
    backgroundPosition: function backgroundPosition(_ref7) {
      var value = _ref7.value, valuesToConvert2 = _ref7.valuesToConvert, isRtl = _ref7.isRtl, bgPosDirectionRegex2 = _ref7.bgPosDirectionRegex;
      return value.replace(isRtl ? /^((-|\d|\.)+%)/ : null, function(match2, group) {
        return calculateNewBackgroundPosition(group);
      }).replace(bgPosDirectionRegex2, function(match2) {
        return valuesToConvert2[match2];
      });
    },
    backgroundPositionX: function backgroundPositionX(_ref8) {
      var value = _ref8.value, valuesToConvert2 = _ref8.valuesToConvert, isRtl = _ref8.isRtl, bgPosDirectionRegex2 = _ref8.bgPosDirectionRegex;
      if (isNumber(value)) {
        return value;
      }
      return propertyValueConverters.backgroundPosition({
        value,
        valuesToConvert: valuesToConvert2,
        isRtl,
        bgPosDirectionRegex: bgPosDirectionRegex2
      });
    },
    transition: function transition2(_ref9) {
      var value = _ref9.value, propertiesToConvert2 = _ref9.propertiesToConvert;
      return value.split(/,\s*/g).map(function(transition3) {
        var values2 = transition3.split(" ");
        values2[0] = propertiesToConvert2[values2[0]] || values2[0];
        return values2.join(" ");
      }).join(", ");
    },
    transitionProperty: function transitionProperty(_ref10) {
      var value = _ref10.value, propertiesToConvert2 = _ref10.propertiesToConvert;
      return value.split(/,\s*/g).map(function(prop) {
        return propertiesToConvert2[prop] || prop;
      }).join(", ");
    },
    transform: function transform(_ref11) {
      var value = _ref11.value;
      var nonAsciiPattern = "[^\\u0020-\\u007e]";
      var escapePattern = "(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f])";
      var signedQuantPattern = "((?:-?" + ("(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|" + ("-?" + ("(?:[_a-z]|" + nonAsciiPattern + "|" + escapePattern + ")") + ("(?:[_a-z0-9-]|" + nonAsciiPattern + "|" + escapePattern + ")") + "*") + ")?") + ")|(?:inherit|auto))";
      var translateXRegExp = new RegExp("(translateX\\s*\\(\\s*)" + signedQuantPattern + "(\\s*\\))", "gi");
      var translateRegExp = new RegExp("(translate\\s*\\(\\s*)" + signedQuantPattern + "((?:\\s*,\\s*" + signedQuantPattern + "){0,1}\\s*\\))", "gi");
      var translate3dRegExp = new RegExp("(translate3d\\s*\\(\\s*)" + signedQuantPattern + "((?:\\s*,\\s*" + signedQuantPattern + "){0,2}\\s*\\))", "gi");
      var rotateRegExp = new RegExp("(rotate[ZY]?\\s*\\(\\s*)" + signedQuantPattern + "(\\s*\\))", "gi");
      return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);
    }
  };
  propertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;
  propertyValueConverters.margin = propertyValueConverters.padding;
  propertyValueConverters.borderWidth = propertyValueConverters.padding;
  propertyValueConverters.boxShadow = propertyValueConverters.textShadow;
  propertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.borderStyle = propertyValueConverters.borderColor;
  propertyValueConverters.webkitTransform = propertyValueConverters.transform;
  propertyValueConverters.mozTransform = propertyValueConverters.transform;
  propertyValueConverters.WebkitTransform = propertyValueConverters.transform;
  propertyValueConverters.MozTransform = propertyValueConverters.transform;
  propertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;
  propertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.webkitTransition = propertyValueConverters.transition;
  propertyValueConverters.mozTransition = propertyValueConverters.transition;
  propertyValueConverters.WebkitTransition = propertyValueConverters.transition;
  propertyValueConverters.MozTransition = propertyValueConverters.transition;
  propertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters["text-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["border-color"] = propertyValueConverters.borderColor;
  propertyValueConverters["border-radius"] = propertyValueConverters.borderRadius;
  propertyValueConverters["background-image"] = propertyValueConverters.backgroundImage;
  propertyValueConverters["background-position"] = propertyValueConverters.backgroundPosition;
  propertyValueConverters["background-position-x"] = propertyValueConverters.backgroundPositionX;
  propertyValueConverters["object-position"] = propertyValueConverters.objectPosition;
  propertyValueConverters["border-width"] = propertyValueConverters.padding;
  propertyValueConverters["box-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["-webkit-box-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["-moz-box-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["border-style"] = propertyValueConverters.borderColor;
  propertyValueConverters["-webkit-transform"] = propertyValueConverters.transform;
  propertyValueConverters["-moz-transform"] = propertyValueConverters.transform;
  propertyValueConverters["transform-origin"] = propertyValueConverters.transformOrigin;
  propertyValueConverters["-webkit-transform-origin"] = propertyValueConverters.transformOrigin;
  propertyValueConverters["-moz-transform-origin"] = propertyValueConverters.transformOrigin;
  propertyValueConverters["-webkit-transition"] = propertyValueConverters.transition;
  propertyValueConverters["-moz-transition"] = propertyValueConverters.transition;
  propertyValueConverters["transition-property"] = propertyValueConverters.transitionProperty;
  propertyValueConverters["-webkit-transition-property"] = propertyValueConverters.transitionProperty;
  propertyValueConverters["-moz-transition-property"] = propertyValueConverters.transitionProperty;
  var propertiesToConvert = arrayToObject([
    ["paddingLeft", "paddingRight"],
    ["marginLeft", "marginRight"],
    ["left", "right"],
    ["borderLeft", "borderRight"],
    ["borderLeftColor", "borderRightColor"],
    ["borderLeftStyle", "borderRightStyle"],
    ["borderLeftWidth", "borderRightWidth"],
    ["borderTopLeftRadius", "borderTopRightRadius"],
    ["borderBottomLeftRadius", "borderBottomRightRadius"],
    // kebab-case versions
    ["padding-left", "padding-right"],
    ["margin-left", "margin-right"],
    ["border-left", "border-right"],
    ["border-left-color", "border-right-color"],
    ["border-left-style", "border-right-style"],
    ["border-left-width", "border-right-width"],
    ["border-top-left-radius", "border-top-right-radius"],
    ["border-bottom-left-radius", "border-bottom-right-radius"]
  ]);
  var propsToIgnore = ["content"];
  var valuesToConvert = arrayToObject([["ltr", "rtl"], ["left", "right"], ["w-resize", "e-resize"], ["sw-resize", "se-resize"], ["nw-resize", "ne-resize"]]);
  var bgImgDirectionRegex = new RegExp("(^|\\W|_)((ltr)|(rtl)|(left)|(right))(\\W|_|$)", "g");
  var bgPosDirectionRegex = new RegExp("(left)|(right)");
  function convert(object) {
    return Object.keys(object).reduce(function(newObj, originalKey) {
      var originalValue = object[originalKey];
      if (isString(originalValue)) {
        originalValue = originalValue.trim();
      }
      if (includes(propsToIgnore, originalKey)) {
        newObj[originalKey] = originalValue;
        return newObj;
      }
      var _convertProperty = convertProperty(originalKey, originalValue), key = _convertProperty.key, value = _convertProperty.value;
      newObj[key] = value;
      return newObj;
    }, Array.isArray(object) ? [] : {});
  }
  function convertProperty(originalKey, originalValue) {
    var isNoFlip = /\/\*\s?@noflip\s?\*\//.test(originalValue);
    var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);
    var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);
    return {
      key,
      value
    };
  }
  function getPropertyDoppelganger(property) {
    return propertiesToConvert[property] || property;
  }
  function getValueDoppelganger(key, originalValue) {
    if (!canConvertValue(originalValue)) {
      return originalValue;
    }
    if (isObject(originalValue)) {
      return convert(originalValue);
    }
    var isNum = isNumber(originalValue);
    var isFunc = isFunction(originalValue);
    var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, "");
    var isImportant = !isNum && importantlessValue.length !== originalValue.length;
    var valueConverter = propertyValueConverters[key];
    var newValue;
    if (valueConverter) {
      newValue = valueConverter({
        value: importantlessValue,
        valuesToConvert,
        propertiesToConvert,
        isRtl: true,
        bgImgDirectionRegex,
        bgPosDirectionRegex
      });
    } else {
      newValue = valuesToConvert[importantlessValue] || importantlessValue;
    }
    if (isImportant) {
      return newValue + " !important";
    }
    return newValue;
  }

  // ../node_modules/@griffel/core/runtime/utils/hyphenateProperty.esm.js
  var uppercasePattern = /[A-Z]/g;
  var msPattern = /^ms-/;
  var cache = {};
  function toHyphenLower(match2) {
    return "-" + match2.toLowerCase();
  }
  function hyphenateProperty(name) {
    if (Object.prototype.hasOwnProperty.call(cache, name)) {
      return cache[name];
    }
    if (name.substr(0, 2) === "--") {
      return name;
    }
    const hName = name.replace(uppercasePattern, toHyphenLower);
    return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
  }

  // ../node_modules/@griffel/core/runtime/utils/normalizeNestedProperty.esm.js
  function normalizeNestedProperty(nestedProperty) {
    if (nestedProperty.charAt(0) === "&") {
      return nestedProperty.slice(1);
    }
    return nestedProperty;
  }

  // ../node_modules/stylis/src/Enum.js
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var MEDIA = "@media";
  var IMPORT = "@import";
  var SUPPORTS = "@supports";
  var KEYFRAMES = "@keyframes";
  var LAYER = "@layer";

  // ../node_modules/stylis/src/Utility.js
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search2) {
    return value.indexOf(search2);
  }
  function charat(value, index2) {
    return value.charCodeAt(index2) | 0;
  }
  function substr(value, begin, end2) {
    return value.slice(begin, end2);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }

  // ../node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root3, parent3, type, props, children, length2, siblings) {
    return { value, root: root3, parent: parent3, type, props, children, line, column, length: length2, return: "", siblings };
  }
  function copy(root3, props) {
    return assign(node("", null, null, "", null, null, 0, root3.siblings), root3, { length: -root3.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end2) {
    return substr(characters, begin, end2);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function tokenize(value) {
    return dealloc(tokenizer(alloc(value)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function tokenizer(children) {
    while (next())
      switch (token(character)) {
        case 0:
          append(identifier(position - 1), children);
          break;
        case 2:
          append(delimit(character), children);
          break;
        default:
          append(from(character), children);
      }
    return children;
  }
  function escaping(index2, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index2, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index2) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index2, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index2) {
    while (!token(peek()))
      next();
    return slice(index2, position);
  }

  // ../node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root3, parent3, rule, rules2, rulesets, pseudo, points, declarations) {
    var index2 = 0;
    var offset3 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous4 = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules2;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous4 = character2, character2 = next()) {
        case 40:
          if (previous4 != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous4);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root3, parent3, declarations), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index2++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset3:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent3, length2 - 1, declarations) : declaration(replace(characters2, " ", "") + ";", rule, parent3, length2 - 2, declarations), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference = ruleset(characters2, root3, parent3, index2, offset3, rules2, points, type, props = [], children = [], length2, rulesets), rulesets);
              if (character2 === 123)
                if (offset3 === 0)
                  parse(characters2, root3, reference, reference, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules2, points, type, rules2, props = [], length2, children), children), rules2, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index2 = offset3 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous4;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset3 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset3 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous4 === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root3, parent3, index2, offset3, rules2, points, type, props, children, length2, siblings) {
    var post = offset3 - 1;
    var rule = offset3 === 0 ? rules2 : [""];
    var size3 = sizeof(rule);
    for (var i4 = 0, j4 = 0, k2 = 0; i4 < index2; ++i4)
      for (var x2 = 0, y3 = substr(value, post + 1, post = abs(j4 = points[i4])), z2 = value; x2 < size3; ++x2)
        if (z2 = trim(j4 > 0 ? rule[x2] + " " + y3 : replace(y3, /&\f/g, rule[x2])))
          props[k2++] = z2;
    return node(value, root3, parent3, offset3 === 0 ? RULESET : type, props, children, length2, siblings);
  }
  function comment(value, root3, parent3, siblings) {
    return node(value, root3, parent3, COMMENT, from(char()), substr(value, 2, -2), 0, siblings);
  }
  function declaration(value, root3, parent3, length2, siblings) {
    return node(value, root3, parent3, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2, siblings);
  }

  // ../node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    for (var i4 = 0; i4 < children.length; i4++)
      output += callback(children[i4], i4, children, callback) || "";
    return output;
  }
  function stringify(element2, index2, children, callback) {
    switch (element2.type) {
      case LAYER:
        if (element2.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element2.return = element2.return || element2.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element2.return = element2.value + "{" + serialize(element2.children, callback) + "}";
      case RULESET:
        if (!strlen(element2.value = element2.props.join(",")))
          return "";
    }
    return strlen(children = serialize(element2.children, callback)) ? element2.return = element2.value + "{" + children + "}" : "";
  }

  // ../node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element2, index2, children, callback) {
      var output = "";
      for (var i4 = 0; i4 < length2; i4++)
        output += collection[i4](element2, index2, children, callback) || "";
      return output;
    };
  }
  function rulesheet(callback) {
    return function(element2) {
      if (!element2.root) {
        if (element2 = element2.return)
          callback(element2);
      }
    };
  }

  // ../node_modules/@griffel/core/runtime/stylis/globalPlugin.esm.js
  var globalPlugin = (element2) => {
    switch (element2.type) {
      case RULESET:
        if (typeof element2.props === "string") {
          if (true) {
            throw new Error(`"element.props" has type "string" (${JSON.stringify(element2.props, null, 2)}), it's not expected. Please report a bug if it happens.`);
          }
          return;
        }
        element2.props = element2.props.map((value) => {
          if (value.indexOf(":global(") === -1) {
            return value;
          }
          return tokenize(value).reduce((acc, value2, index2, children) => {
            if (value2 === "") {
              return acc;
            }
            if (value2 === ":" && children[index2 + 1] === "global") {
              const selector = (
                // An inner part of ":global()"
                children[index2 + 2].slice(1, -1) + // A separator between selectors i.e. "body .class"
                " "
              );
              acc.unshift(selector);
              children[index2 + 1] = "";
              children[index2 + 2] = "";
              return acc;
            }
            acc.push(value2);
            return acc;
          }, []).join("");
        });
    }
  };

  // ../node_modules/@griffel/core/runtime/stylis/prefixerPlugin.esm.js
  function prefix(value, length2, children) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
        return WEBKIT + value + value;
      case 4789:
        return MOZ + value + value;
      case 5349:
      case 4246:
      case 6968:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6187:
        if (!match(value, /grab/)) {
          return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
        }
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 102:
              if (charat(value, length2 + 3) === 108) {
                return replace(
                  value,
                  /(.+:)(.+)-([^]+)/,
                  // eslint-disable-next-line no-useless-concat, eqeqeq
                  "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")
                ) + value;
              }
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
    }
    return value;
  }
  function prefixerPlugin(element2, index2, children, callback) {
    if (element2.length > -1) {
      if (!element2.return)
        switch (element2.type) {
          case DECLARATION:
            element2.return = prefix(element2.value, element2.length);
            return;
          case RULESET:
            if (element2.length)
              return combine(element2.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize(
                      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                      // @ts-ignore
                      [copy(element2, {
                        props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                      })],
                      callback
                    );
                  case "::placeholder":
                    return serialize([
                      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                      // @ts-ignore
                      copy(element2, {
                        props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                      }),
                      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                      // @ts-ignore
                      copy(element2, {
                        props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                      }),
                      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                      // @ts-ignore
                      copy(element2, {
                        props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                      })
                    ], callback);
                }
                return "";
              });
        }
    }
    return void 0;
  }

  // ../node_modules/@griffel/core/runtime/stylis/isAtRuleElement.esm.js
  function isAtRuleElement(element2) {
    switch (element2.type) {
      case "@container":
      case MEDIA:
      case SUPPORTS:
      case LAYER:
        return true;
    }
    return false;
  }

  // ../node_modules/@griffel/core/runtime/stylis/sortClassesInAtRulesPlugin.esm.js
  var sortClassesInAtRulesPlugin = (element2) => {
    if (isAtRuleElement(element2) && Array.isArray(element2.children)) {
      element2.children.sort((a3, b4) => a3.props[0] > b4.props[0] ? 1 : -1);
    }
  };

  // ../node_modules/@griffel/core/runtime/compileCSSRules.esm.js
  function noop() {
  }
  function compileCSSRules(cssRules2, sortClassesInAtRules) {
    const rules2 = [];
    serialize(compile(cssRules2), middleware([
      globalPlugin,
      sortClassesInAtRules ? sortClassesInAtRulesPlugin : noop,
      prefixerPlugin,
      stringify,
      // 💡 we are using `.insertRule()` API for DOM operations, which does not support
      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts
      // individual rules to be used with this API
      rulesheet((rule) => rules2.push(rule))
    ]));
    return rules2;
  }

  // ../node_modules/@griffel/core/runtime/compileAtomicCSSRule.esm.js
  var PSEUDO_SELECTOR_REGEX = /,( *[^ &])/g;
  function normalizePseudoSelector(pseudoSelector) {
    return "&" + normalizeNestedProperty(
      // Regex there replaces a comma, spaces and an ampersand if it's present with comma and an ampersand.
      // This allows to normalize input, see examples in JSDoc.
      pseudoSelector.replace(PSEUDO_SELECTOR_REGEX, ",&$1")
    );
  }
  function createCSSRule(classNameSelector, cssDeclaration, pseudos) {
    let cssRule = cssDeclaration;
    if (pseudos.length > 0) {
      cssRule = pseudos.reduceRight((acc, selector) => {
        return `${normalizePseudoSelector(selector)} { ${acc} }`;
      }, cssDeclaration);
    }
    return `${classNameSelector}{${cssRule}}`;
  }
  function compileAtomicCSSRule(options) {
    const {
      className,
      media,
      layer,
      selectors,
      support,
      property,
      rtlClassName,
      rtlProperty,
      rtlValue,
      value,
      container
    } = options;
    const classNameSelector = `.${className}`;
    const cssDeclaration = Array.isArray(value) ? `${value.map((v3) => `${hyphenateProperty(property)}: ${v3}`).join(";")};` : `${hyphenateProperty(property)}: ${value};`;
    let cssRule = createCSSRule(classNameSelector, cssDeclaration, selectors);
    if (rtlProperty && rtlClassName) {
      const rtlClassNameSelector = `.${rtlClassName}`;
      const rtlCSSDeclaration = Array.isArray(rtlValue) ? `${rtlValue.map((v3) => `${hyphenateProperty(rtlProperty)}: ${v3}`).join(";")};` : `${hyphenateProperty(rtlProperty)}: ${rtlValue};`;
      cssRule += createCSSRule(rtlClassNameSelector, rtlCSSDeclaration, selectors);
    }
    if (media) {
      cssRule = `@media ${media} { ${cssRule} }`;
    }
    if (layer) {
      cssRule = `@layer ${layer} { ${cssRule} }`;
    }
    if (support) {
      cssRule = `@supports ${support} { ${cssRule} }`;
    }
    if (container) {
      cssRule = `@container ${container} { ${cssRule} }`;
    }
    return compileCSSRules(cssRule, true);
  }

  // ../node_modules/@griffel/core/runtime/utils/cssifyObject.esm.js
  function cssifyObject(style) {
    let css2 = "";
    for (const property in style) {
      const value = style[property];
      if (typeof value !== "string" && typeof value !== "number") {
        continue;
      }
      css2 += hyphenateProperty(property) + ":" + value + ";";
    }
    return css2;
  }

  // ../node_modules/@griffel/core/runtime/compileKeyframeCSS.esm.js
  function compileKeyframeRule(keyframeObject) {
    let css2 = "";
    for (const percentage in keyframeObject) {
      css2 += `${percentage}{${cssifyObject(keyframeObject[percentage])}}`;
    }
    return css2;
  }
  function compileKeyframesCSS(keyframeName, keyframeCSS) {
    const cssRule = `@keyframes ${keyframeName} {${keyframeCSS}}`;
    const rules2 = [];
    serialize(compile(cssRule), middleware([
      stringify,
      prefixerPlugin,
      // 💡 we are using `.insertRule()` API for DOM operations, which does not support
      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts
      // individual rules to be used with this API
      rulesheet((rule) => rules2.push(rule))
    ]));
    return rules2;
  }

  // ../node_modules/@griffel/core/runtime/utils/generateCombinedMediaQuery.esm.js
  function generateCombinedQuery(currentMediaQuery, nestedMediaQuery) {
    if (currentMediaQuery.length === 0) {
      return nestedMediaQuery;
    }
    return `${currentMediaQuery} and ${nestedMediaQuery}`;
  }

  // ../node_modules/@griffel/core/runtime/utils/isMediaQuerySelector.esm.js
  function isMediaQuerySelector(property) {
    return property.substr(0, 6) === "@media";
  }

  // ../node_modules/@griffel/core/runtime/utils/isLayerSelector.esm.js
  function isLayerSelector(property) {
    return property.substr(0, 6) === "@layer";
  }

  // ../node_modules/@griffel/core/runtime/utils/isNestedSelector.esm.js
  var regex = /^(:|\[|>|&)/;
  function isNestedSelector(property) {
    return regex.test(property);
  }

  // ../node_modules/@griffel/core/runtime/utils/isSupportQuerySelector.esm.js
  function isSupportQuerySelector(property) {
    return property.substr(0, 9) === "@supports";
  }

  // ../node_modules/@griffel/core/runtime/utils/isContainerQuerySelector.esm.js
  function isContainerQuerySelector(property) {
    return property.substring(0, 10) === "@container";
  }

  // ../node_modules/@griffel/core/runtime/utils/isObject.esm.js
  function isObject2(val) {
    return val != null && typeof val === "object" && Array.isArray(val) === false;
  }

  // ../node_modules/@griffel/core/runtime/getStyleBucketName.esm.js
  var pseudosMap = {
    // :focus-within
    "us-w": "w",
    // :focus-visible
    "us-v": "i",
    // :link
    nk: "l",
    // :visited
    si: "v",
    // :focus
    cu: "f",
    // :hover
    ve: "h",
    // :active
    ti: "a"
  };
  function getStyleBucketName(selectors, layer, media, support, container) {
    if (media) {
      return "m";
    }
    if (layer || support) {
      return "t";
    }
    if (container) {
      return "c";
    }
    if (selectors.length > 0) {
      const normalizedPseudo = selectors[0].trim();
      if (normalizedPseudo.charCodeAt(0) === 58) {
        return pseudosMap[normalizedPseudo.slice(4, 8)] || pseudosMap[normalizedPseudo.slice(3, 5)] || "d";
      }
    }
    return "d";
  }

  // ../node_modules/@griffel/core/runtime/utils/hashClassName.esm.js
  function hashClassName({
    container,
    media,
    layer,
    property,
    selectors,
    support,
    value
  }) {
    const classNameHash = murmur2(selectors.join("") + container + media + layer + support + property + value.trim());
    return HASH_PREFIX + classNameHash;
  }

  // ../node_modules/@griffel/core/runtime/utils/hashPropertyKey.esm.js
  function hashPropertyKey(selectors, container, media, support, property) {
    const computedKey = selectors.join("") + container + media + support + property;
    const hashedKey = murmur2(computedKey);
    const firstCharCode = hashedKey.charCodeAt(0);
    const startsWithNumber = firstCharCode >= 48 && firstCharCode <= 57;
    if (startsWithNumber) {
      return String.fromCharCode(firstCharCode + 17) + hashedKey.substr(1);
    }
    return hashedKey;
  }

  // ../node_modules/@griffel/core/runtime/warnings/logError.esm.js
  function logError(...args) {
    if (typeof document !== "undefined") {
      console.error(...args);
    }
  }

  // ../node_modules/@griffel/core/runtime/warnings/warnAboutUnresolvedRule.esm.js
  function warnAboutUnresolvedRule(property, value) {
    const ruleText = JSON.stringify(value, null, 2);
    const message = ["@griffel/react: A rule was not resolved to CSS properly. Please check your `makeStyles` or `makeResetStyles` calls for following:", " ".repeat(2) + "makeStyles({", " ".repeat(4) + `[slot]: {`, " ".repeat(6) + `"${property}": ${ruleText.split("\n").map((l4, n6) => " ".repeat(n6 === 0 ? 0 : 6) + l4).join("\n")}`, " ".repeat(4) + "}", " ".repeat(2) + `})`, ""];
    if (property.indexOf("&") === -1) {
      message.push(`It looks that you're are using a nested selector, but it is missing an ampersand placeholder where the generated class name should be injected.`);
      message.push(`Try to update a property to include it i.e "${property}" => "&${property}".`);
    } else {
      message.push("");
      message.push("If it's not obvious what triggers a problem, please report an issue at https://github.com/microsoft/griffel/issues");
    }
    logError(message.join("\n"));
  }

  // ../node_modules/@griffel/core/runtime/warnings/warnAboutUnsupportedProperties.esm.js
  function warnAboutUnsupportedProperties(property, value) {
    logError([`@griffel/react: You are using unsupported shorthand CSS property "${property}". Please check your "makeStyles" calls, there *should not* be following:`, " ".repeat(2) + `makeStyles({`, " ".repeat(4) + `[slot]: { ${property}: "${value}" }`, " ".repeat(2) + `})`, "", "Learn why CSS shorthands are not supported: https://aka.ms/griffel-css-shorthands"].join("\n"));
  }

  // ../node_modules/@griffel/core/runtime/resolveStyleRules.esm.js
  function pushToClassesMap(classesMap, propertyKey, ltrClassname, rtlClassname) {
    classesMap[propertyKey] = rtlClassname ? [ltrClassname, rtlClassname] : ltrClassname;
  }
  function createBucketEntry(cssRule, metadata) {
    if (metadata) {
      return [cssRule, metadata];
    }
    return cssRule;
  }
  function pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media) {
    var _a5;
    let metadata;
    if (styleBucketName === "m" && media) {
      metadata = {
        m: media
      };
    }
    (_a5 = cssRulesByBucket[styleBucketName]) !== null && _a5 !== void 0 ? _a5 : cssRulesByBucket[styleBucketName] = [];
    if (ltrCSS) {
      cssRulesByBucket[styleBucketName].push(createBucketEntry(ltrCSS, metadata));
    }
    if (rtlCSS) {
      cssRulesByBucket[styleBucketName].push(createBucketEntry(rtlCSS, metadata));
    }
  }
  function resolveStyleRules(styles4, selectors = [], media = "", layer = "", support = "", container = "", cssClassesMap = {}, cssRulesByBucket = {}, rtlValue) {
    for (const property in styles4) {
      if (UNSUPPORTED_CSS_PROPERTIES.hasOwnProperty(property)) {
        warnAboutUnsupportedProperties(property, styles4[property]);
        continue;
      }
      const value = styles4[property];
      if (value == null) {
        continue;
      }
      if (typeof value === "string" || typeof value === "number") {
        const key = hashPropertyKey(selectors, container, media, support, property);
        const className = hashClassName({
          container,
          media,
          layer,
          value: value.toString(),
          support,
          selectors,
          property
        });
        const rtlDefinition = rtlValue && {
          key: property,
          value: rtlValue
        } || convertProperty(property, value);
        const flippedInRtl = rtlDefinition.key !== property || rtlDefinition.value !== value;
        const rtlClassName = flippedInRtl ? hashClassName({
          container,
          value: rtlDefinition.value.toString(),
          property: rtlDefinition.key,
          selectors,
          media,
          layer,
          support
        }) : void 0;
        const rtlCompileOptions = flippedInRtl ? {
          rtlClassName,
          rtlProperty: rtlDefinition.key,
          rtlValue: rtlDefinition.value
        } : void 0;
        const styleBucketName = getStyleBucketName(selectors, layer, media, support, container);
        const [ltrCSS, rtlCSS] = compileAtomicCSSRule({
          className,
          media,
          layer,
          selectors,
          property,
          support,
          container,
          value,
          ...rtlCompileOptions
        });
        pushToClassesMap(cssClassesMap, key, className, rtlClassName);
        pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media);
      } else if (property === "animationName") {
        const animationNameValue = Array.isArray(value) ? value : [value];
        const animationNames = [];
        const rtlAnimationNames = [];
        for (const keyframeObject of animationNameValue) {
          const keyframeCSS = compileKeyframeRule(keyframeObject);
          const rtlKeyframeCSS = compileKeyframeRule(convert(keyframeObject));
          const animationName = HASH_PREFIX + murmur2(keyframeCSS);
          let rtlAnimationName;
          const keyframeRules = compileKeyframesCSS(animationName, keyframeCSS);
          let rtlKeyframeRules = [];
          if (keyframeCSS === rtlKeyframeCSS) {
            rtlAnimationName = animationName;
          } else {
            rtlAnimationName = HASH_PREFIX + murmur2(rtlKeyframeCSS);
            rtlKeyframeRules = compileKeyframesCSS(rtlAnimationName, rtlKeyframeCSS);
          }
          for (let i4 = 0; i4 < keyframeRules.length; i4++) {
            pushToCSSRules(
              cssRulesByBucket,
              // keyframes styles should be inserted into own bucket
              "k",
              keyframeRules[i4],
              rtlKeyframeRules[i4],
              media
            );
          }
          animationNames.push(animationName);
          rtlAnimationNames.push(rtlAnimationName);
        }
        resolveStyleRules({
          animationName: animationNames.join(", ")
        }, selectors, media, layer, support, container, cssClassesMap, cssRulesByBucket, rtlAnimationNames.join(", "));
      } else if (Array.isArray(value)) {
        if (value.length === 0) {
          if (true) {
            console.warn(`makeStyles(): An empty array was passed as input to "${property}", the property will be omitted in the styles.`);
          }
          continue;
        }
        const key = hashPropertyKey(selectors, container, media, support, property);
        const className = hashClassName({
          container,
          media,
          layer,
          value: value.map((v3) => (v3 !== null && v3 !== void 0 ? v3 : "").toString()).join(";"),
          support,
          selectors,
          property
        });
        const rtlDefinitions = value.map((v3) => convertProperty(property, v3));
        const rtlPropertyConsistent = !rtlDefinitions.some((v3) => v3.key !== rtlDefinitions[0].key);
        if (!rtlPropertyConsistent) {
          if (true) {
            console.error("makeStyles(): mixing CSS fallback values which result in multiple CSS properties in RTL is not supported.");
          }
          continue;
        }
        const flippedInRtl = rtlDefinitions[0].key !== property || rtlDefinitions.some((v3, i4) => v3.value !== value[i4]);
        const rtlClassName = flippedInRtl ? hashClassName({
          container,
          value: rtlDefinitions.map((v3) => {
            var _a5;
            return ((_a5 = v3 === null || v3 === void 0 ? void 0 : v3.value) !== null && _a5 !== void 0 ? _a5 : "").toString();
          }).join(";"),
          property: rtlDefinitions[0].key,
          selectors,
          layer,
          media,
          support
        }) : void 0;
        const rtlCompileOptions = flippedInRtl ? {
          rtlClassName,
          rtlProperty: rtlDefinitions[0].key,
          rtlValue: rtlDefinitions.map((d3) => d3.value)
        } : void 0;
        const styleBucketName = getStyleBucketName(selectors, layer, media, support, container);
        const [ltrCSS, rtlCSS] = compileAtomicCSSRule({
          className,
          media,
          layer,
          selectors,
          property,
          support,
          container,
          value,
          ...rtlCompileOptions
        });
        pushToClassesMap(cssClassesMap, key, className, rtlClassName);
        pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media);
      } else if (isObject2(value)) {
        if (isNestedSelector(property)) {
          resolveStyleRules(value, selectors.concat(normalizeNestedProperty(property)), media, layer, support, container, cssClassesMap, cssRulesByBucket);
        } else if (isMediaQuerySelector(property)) {
          const combinedMediaQuery = generateCombinedQuery(media, property.slice(6).trim());
          resolveStyleRules(value, selectors, combinedMediaQuery, layer, support, container, cssClassesMap, cssRulesByBucket);
        } else if (isLayerSelector(property)) {
          const combinedLayerQuery = (layer ? `${layer}.` : "") + property.slice(6).trim();
          resolveStyleRules(value, selectors, media, combinedLayerQuery, support, container, cssClassesMap, cssRulesByBucket);
        } else if (isSupportQuerySelector(property)) {
          const combinedSupportQuery = generateCombinedQuery(support, property.slice(9).trim());
          resolveStyleRules(value, selectors, media, layer, combinedSupportQuery, container, cssClassesMap, cssRulesByBucket);
        } else if (isContainerQuerySelector(property)) {
          const containerQuery = property.slice(10).trim();
          resolveStyleRules(value, selectors, media, layer, support, containerQuery, cssClassesMap, cssRulesByBucket);
        } else {
          warnAboutUnresolvedRule(property, value);
        }
      }
    }
    return [cssClassesMap, cssRulesByBucket];
  }

  // ../node_modules/@griffel/core/resolveStyleRulesForSlots.esm.js
  function resolveStyleRulesForSlots(stylesBySlots) {
    const classesMapBySlot = {};
    const cssRules2 = {};
    for (const slotName in stylesBySlots) {
      const slotStyles = stylesBySlots[slotName];
      const [cssClassMap, cssRulesByBucket] = resolveStyleRules(slotStyles);
      classesMapBySlot[slotName] = cssClassMap;
      Object.keys(cssRulesByBucket).forEach((styleBucketName) => {
        cssRules2[styleBucketName] = (cssRules2[styleBucketName] || []).concat(cssRulesByBucket[styleBucketName]);
      });
    }
    return [classesMapBySlot, cssRules2];
  }

  // ../node_modules/@griffel/core/makeStyles.esm.js
  function makeStyles(stylesBySlots, factory = insertionFactory) {
    const insertStyles = factory();
    let classesMapBySlot = null;
    let cssRules2 = null;
    let ltrClassNamesForSlots = null;
    let rtlClassNamesForSlots = null;
    let sourceURL;
    if (isDevToolsEnabled) {
      sourceURL = getSourceURLfromError();
    }
    function computeClasses(options) {
      const {
        dir,
        renderer
      } = options;
      if (classesMapBySlot === null) {
        [classesMapBySlot, cssRules2] = resolveStyleRulesForSlots(stylesBySlots);
      }
      const isLTR = dir === "ltr";
      if (isLTR) {
        if (ltrClassNamesForSlots === null) {
          ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      } else {
        if (rtlClassNamesForSlots === null) {
          rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      }
      insertStyles(renderer, cssRules2);
      const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
      if (isDevToolsEnabled) {
        debugData.addSequenceDetails(classNamesForSlots, sourceURL);
      }
      return classNamesForSlots;
    }
    return computeClasses;
  }

  // ../node_modules/@griffel/core/__styles.esm.js
  function __styles(classesMapBySlot, cssRules2, factory = insertionFactory) {
    const insertStyles = factory();
    let ltrClassNamesForSlots = null;
    let rtlClassNamesForSlots = null;
    let sourceURL;
    if (isDevToolsEnabled) {
      sourceURL = getSourceURLfromError();
    }
    function computeClasses(options) {
      const {
        dir,
        renderer
      } = options;
      const isLTR = dir === "ltr";
      if (isLTR) {
        if (ltrClassNamesForSlots === null) {
          ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      } else {
        if (rtlClassNamesForSlots === null) {
          rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      }
      insertStyles(renderer, cssRules2);
      const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
      if (isDevToolsEnabled) {
        debugData.addSequenceDetails(classNamesForSlots, sourceURL);
      }
      return classNamesForSlots;
    }
    return computeClasses;
  }

  // ../node_modules/@griffel/core/__resetStyles.esm.js
  function __resetStyles(ltrClassName, rtlClassName, cssRules2, factory = insertionFactory) {
    const insertStyles = factory();
    function computeClassName(options) {
      const {
        dir,
        renderer
      } = options;
      const className = dir === "ltr" ? ltrClassName : rtlClassName || ltrClassName;
      insertStyles(renderer, Array.isArray(cssRules2) ? {
        r: cssRules2
      } : cssRules2);
      if (true) {
        DEBUG_RESET_CLASSES[className] = 1;
      }
      return className;
    }
    return computeClassName;
  }

  // ../node_modules/@griffel/core/index.esm.js
  var shorthands = {
    border,
    borderLeft,
    borderBottom,
    borderRight,
    borderTop,
    borderColor,
    borderStyle,
    borderRadius,
    borderWidth,
    flex,
    gap,
    gridArea,
    margin,
    marginBlock,
    marginInline,
    padding,
    paddingBlock,
    paddingInline,
    overflow,
    inset,
    outline,
    transition,
    textDecoration
  };

  // ../node_modules/@griffel/react/utils/canUseDOM.esm.js
  function canUseDOM() {
    return typeof window !== "undefined" && !!(window.document && window.document.createElement);
  }

  // ../node_modules/@griffel/react/useInsertionEffect.esm.js
  var React2 = __toESM(require_react());
  var useInsertionEffect2 = (
    // @ts-expect-error Hack to make sure that `useInsertionEffect` will not cause bundling issues in older React versions
    // eslint-disable-next-line no-useless-concat
    React2["useInsertionEffect"] ? React2["useInsertionEffect"] : void 0
  );

  // ../node_modules/@griffel/react/insertionFactory.esm.js
  var insertionFactory2 = () => {
    const insertionCache = {};
    return function insert(renderer, cssRules2) {
      if (useInsertionEffect2 && canUseDOM()) {
        useInsertionEffect2(() => {
          renderer.insertCSSRules(cssRules2);
        }, [renderer, cssRules2]);
        return;
      }
      if (insertionCache[renderer.id] === void 0) {
        renderer.insertCSSRules(cssRules2);
        insertionCache[renderer.id] = true;
      }
    };
  };

  // ../node_modules/@griffel/react/RendererContext.esm.js
  var React3 = __toESM(require_react());
  var RendererContext = /* @__PURE__ */ React3.createContext(/* @__PURE__ */ createDOMRenderer());
  function useRenderer() {
    return React3.useContext(RendererContext);
  }

  // ../node_modules/@griffel/react/TextDirectionContext.esm.js
  var React4 = __toESM(require_react());
  var TextDirectionContext = /* @__PURE__ */ React4.createContext("ltr");
  var TextDirectionProvider = ({
    children,
    dir
  }) => {
    return /* @__PURE__ */ React4.createElement(TextDirectionContext.Provider, {
      value: dir
    }, children);
  };
  function useTextDirection() {
    return React4.useContext(TextDirectionContext);
  }

  // ../node_modules/@griffel/react/utils/isInsideComponent.esm.js
  var React5 = __toESM(require_react());
  function isInsideComponent() {
    try {
      const dispatcher = React5.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher.current;
      if (dispatcher === null || dispatcher === void 0) {
        return false;
      }
      dispatcher.useContext({});
      return true;
    } catch (e3) {
      return false;
    }
  }

  // ../node_modules/@griffel/react/makeStyles.esm.js
  function makeStyles2(stylesBySlots) {
    const getStyles15 = makeStyles(stylesBySlots, insertionFactory2);
    if (true) {
      if (isInsideComponent()) {
        throw new Error(["makeStyles(): this function cannot be called in component's scope.", "All makeStyles() calls should be top level i.e. in a root scope of a file."].join(" "));
      }
    }
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles15({
        dir,
        renderer
      });
    };
  }

  // ../node_modules/@griffel/react/__styles.esm.js
  function __styles2(classesMapBySlot, cssRules2) {
    const getStyles15 = __styles(classesMapBySlot, cssRules2, insertionFactory2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles15({
        dir,
        renderer
      });
    };
  }

  // ../node_modules/@griffel/react/__resetStyles.esm.js
  function __resetStyles2(ltrClassName, rtlClassName, cssRules2) {
    const getStyles15 = __resetStyles(ltrClassName, rtlClassName, cssRules2, insertionFactory2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles15({
        dir,
        renderer
      });
    };
  }

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/FluentProvider.js
  var React40 = __toESM(require_react());

  // ../node_modules/@fluentui/react-jsx-runtime/lib/utils/Runtime.js
  var ReactRuntime = __toESM(require_jsx_runtime());
  var Runtime = ReactRuntime;

  // ../node_modules/@fluentui/react-jsx-runtime/lib/jsx/createJSX.js
  var React22 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/compose/slot.js
  var slot_exports = {};
  __export(slot_exports, {
    always: () => always,
    optional: () => optional,
    resolveShorthand: () => resolveShorthand
  });
  var React6 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/compose/constants.js
  var SLOT_RENDER_FUNCTION_SYMBOL = Symbol("fui.slotRenderFunction");
  var SLOT_ELEMENT_TYPE_SYMBOL = Symbol("fui.slotElementType");

  // ../node_modules/@fluentui/react-utilities/lib/compose/slot.js
  function always(value, options) {
    const { defaultProps, elementType } = options;
    const props = resolveShorthand(value);
    const propsWithMetadata = {
      ...defaultProps,
      ...props,
      [SLOT_ELEMENT_TYPE_SYMBOL]: elementType
    };
    if (props && typeof props.children === "function") {
      var _defaultProps;
      propsWithMetadata[SLOT_RENDER_FUNCTION_SYMBOL] = props.children;
      propsWithMetadata.children = (_defaultProps = defaultProps) === null || _defaultProps === void 0 ? void 0 : _defaultProps.children;
    }
    return propsWithMetadata;
  }
  function optional(value, options) {
    if (value === null || value === void 0 && !options.renderByDefault) {
      return void 0;
    }
    return always(value, options);
  }
  function resolveShorthand(value) {
    if (typeof value === "string" || typeof value === "number" || Array.isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    React6.isValidElement(value)) {
      return {
        children: value
      };
    }
    if (value && typeof value !== "object" && true) {
      console.error(`@fluentui/react-utilities [slot.${resolveShorthand.name}]:
A slot got an invalid value "${value}" (${typeof value}).
A valid value for a slot is a slot shorthand or slot properties object.
Slot shorthands can be strings, numbers, arrays or JSX elements`);
    }
    return value;
  }

  // ../node_modules/@fluentui/react-utilities/lib/compose/isSlot.js
  function isSlot(element2) {
    var _element;
    return Boolean((_element = element2) === null || _element === void 0 ? void 0 : _element.hasOwnProperty(SLOT_ELEMENT_TYPE_SYMBOL));
  }

  // ../node_modules/@fluentui/react-utilities/lib/compose/resolveShorthand.js
  var resolveShorthand2 = (value, options) => {
    var _options;
    return optional(value, {
      ...options,
      renderByDefault: (_options = options) === null || _options === void 0 ? void 0 : _options.required,
      // elementType as undefined is the way to identify between a slot and a resolveShorthand call
      // in the case elementType is undefined assertSlots will fail, ensuring it'll only work with slot method.
      elementType: void 0
    });
  };

  // ../node_modules/@fluentui/react-utilities/lib/compose/isResolvedShorthand.js
  var import_react = __toESM(require_react());
  function isResolvedShorthand(shorthand) {
    return shorthand !== null && typeof shorthand === "object" && !Array.isArray(shorthand) && !(0, import_react.isValidElement)(shorthand);
  }

  // ../node_modules/@fluentui/react-utilities/lib/compose/assertSlots.js
  var React7 = __toESM(require_react());
  function assertSlots(state) {
    if (true) {
      const typedState = state;
      for (const slotName of Object.keys(typedState.components)) {
        const slotElement = typedState[slotName];
        if (slotElement === void 0) {
          continue;
        }
        if (!isSlot(slotElement)) {
          typedState[slotName] = slot_exports.always(slotElement, {
            elementType: typedState.components[slotName]
          });
          console.warn(`@fluentui/react-utilities [${assertSlots.name}]:
"state.${slotName}" is not a slot!
Be sure to create slots properly by using "slot.always" or "slot.optional".`);
        } else {
          const { [SLOT_ELEMENT_TYPE_SYMBOL]: elementType } = slotElement;
          if (elementType !== typedState.components[slotName]) {
            slotElement[SLOT_ELEMENT_TYPE_SYMBOL] = typedState.components[slotName];
            console.warn(`@fluentui/react-utilities [${assertSlots.name}]:
"state.${slotName}" element type differs from "state.components.${slotName}",
${elementType} !== ${typedState.components[slotName]}.
Be sure to create slots properly by using "slot.always" or "slot.optional" with the correct elementType.`);
          }
        }
      }
    }
  }

  // ../node_modules/@fluentui/react-utilities/lib/ssr/canUseDOM.js
  function canUseDOM2() {
    return typeof window !== "undefined" && !!(window.document && // eslint-disable-next-line deprecation/deprecation
    window.document.createElement);
  }

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useControllableState.js
  var React8 = __toESM(require_react());
  function isFactoryDispatch(newState) {
    return typeof newState === "function";
  }
  var useControllableState = (options) => {
    const [internalState, setInternalState] = React8.useState(() => {
      if (options.defaultState === void 0) {
        return options.initialState;
      }
      return isInitializer(options.defaultState) ? options.defaultState() : options.defaultState;
    });
    const stateValueRef = React8.useRef(options.state);
    React8.useEffect(() => {
      stateValueRef.current = options.state;
    }, [
      options.state
    ]);
    const setControlledState = React8.useCallback((newState) => {
      if (isFactoryDispatch(newState)) {
        newState(stateValueRef.current);
      }
    }, []);
    return useIsControlled(options.state) ? [
      options.state,
      setControlledState
    ] : [
      internalState,
      setInternalState
    ];
  };
  function isInitializer(value) {
    return typeof value === "function";
  }
  var useIsControlled = (controlledValue) => {
    const [isControlled2] = React8.useState(() => controlledValue !== void 0);
    if (true) {
      React8.useEffect(() => {
        if (isControlled2 !== (controlledValue !== void 0)) {
          const error = new Error();
          const controlWarning = isControlled2 ? "a controlled value to be uncontrolled" : "an uncontrolled value to be controlled";
          const undefinedWarning = isControlled2 ? "defined to an undefined" : "undefined to a defined";
          console.error(`@fluentui/react-utilities [${useControllableState.name}]:
A component is changing ${controlWarning}. This is likely caused by the value changing from ${undefinedWarning} value, which should not happen.
Decide between using a controlled or uncontrolled input element for the lifetime of the component.
More info: https://reactjs.org/link/controlled-components
${error.stack}`);
        }
      }, [
        isControlled2,
        controlledValue
      ]);
    }
    return isControlled2;
  };

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js
  var React11 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useIsomorphicLayoutEffect.js
  var React10 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/ssr/SSRContext.js
  var React9 = __toESM(require_react());
  var defaultSSRContextValue = {
    current: 0
  };
  var SSRContext = /* @__PURE__ */ React9.createContext(void 0);
  function useSSRContext() {
    var _React_useContext5;
    return (_React_useContext5 = React9.useContext(SSRContext)) !== null && _React_useContext5 !== void 0 ? _React_useContext5 : defaultSSRContextValue;
  }

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useIsomorphicLayoutEffect.js
  var useIsomorphicLayoutEffect = canUseDOM2() ? React10.useLayoutEffect : React10.useEffect;

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js
  var useEventCallback = (fn2) => {
    const callbackRef = React11.useRef(() => {
      throw new Error("Cannot call an event handler while rendering");
    });
    useIsomorphicLayoutEffect(() => {
      callbackRef.current = fn2;
    }, [
      fn2
    ]);
    return React11.useCallback((...args) => {
      const callback = callbackRef.current;
      return callback(...args);
    }, [
      callbackRef
    ]);
  };

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useFirstMount.js
  var React12 = __toESM(require_react());
  function useFirstMount() {
    const isFirst = React12.useRef(true);
    if (isFirst.current) {
      isFirst.current = false;
      return true;
    }
    return isFirst.current;
  }

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useId.js
  var React13 = __toESM(require_react());
  var IdPrefixContext = React13.createContext(void 0);
  var IdPrefixProvider = IdPrefixContext.Provider;
  function useIdPrefix() {
    return React13.useContext(IdPrefixContext) || "";
  }
  function useId2(prefix2 = "fui-", providedId) {
    const contextValue = useSSRContext();
    const idPrefix = useIdPrefix();
    const _useId = React13["useId"];
    if (_useId) {
      const generatedId = _useId();
      const escapedId = React13.useMemo(() => generatedId.replace(/:/g, ""), [
        generatedId
      ]);
      return providedId || `${idPrefix}${prefix2}${escapedId}`;
    }
    return React13.useMemo(() => {
      if (providedId) {
        return providedId;
      }
      return `${idPrefix}${prefix2}${++contextValue.current}`;
    }, [
      idPrefix,
      prefix2,
      providedId,
      contextValue
    ]);
  }

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useMergedRefs.js
  var React14 = __toESM(require_react());
  function useMergedRefs(...refs) {
    const mergedCallback = React14.useCallback(
      (value) => {
        mergedCallback.current = value;
        for (const ref of refs) {
          if (typeof ref === "function") {
            ref(value);
          } else if (ref) {
            ref.current = value;
          }
        }
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive
      [
        ...refs
      ]
    );
    return mergedCallback;
  }

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useOnClickOutside.js
  var React15 = __toESM(require_react());
  var DEFAULT_CONTAINS = (parent3, child) => {
    var _parent;
    return !!((_parent = parent3) === null || _parent === void 0 ? void 0 : _parent.contains(child));
  };
  var useOnClickOutside = (options) => {
    const { refs, callback, element: element2, disabled, disabledFocusOnIframe, contains = DEFAULT_CONTAINS } = options;
    const timeoutId = React15.useRef(void 0);
    useIFrameFocus({
      element: element2,
      disabled: disabledFocusOnIframe || disabled,
      callback,
      refs,
      contains
    });
    const isMouseDownInsideRef = React15.useRef(false);
    const listener = useEventCallback((ev) => {
      if (isMouseDownInsideRef.current) {
        isMouseDownInsideRef.current = false;
        return;
      }
      const target = ev.composedPath()[0];
      const isOutside = refs.every((ref) => !contains(ref.current || null, target));
      if (isOutside && !disabled) {
        callback(ev);
      }
    });
    const handleMouseDown = useEventCallback((ev) => {
      isMouseDownInsideRef.current = refs.some((ref) => contains(ref.current || null, ev.target));
    });
    React15.useEffect(() => {
      var _element, _element1, _element2, _element3;
      if (disabled) {
        return;
      }
      let currentEvent = getWindowEvent(window);
      const conditionalHandler = (event) => {
        if (event === currentEvent) {
          currentEvent = void 0;
          return;
        }
        listener(event);
      };
      (_element = element2) === null || _element === void 0 ? void 0 : _element.addEventListener("click", conditionalHandler, true);
      (_element1 = element2) === null || _element1 === void 0 ? void 0 : _element1.addEventListener("touchstart", conditionalHandler, true);
      (_element2 = element2) === null || _element2 === void 0 ? void 0 : _element2.addEventListener("contextmenu", conditionalHandler, true);
      (_element3 = element2) === null || _element3 === void 0 ? void 0 : _element3.addEventListener("mousedown", handleMouseDown, true);
      timeoutId.current = window.setTimeout(() => {
        currentEvent = void 0;
      }, 1);
      return () => {
        var _element4, _element12, _element22, _element32;
        (_element4 = element2) === null || _element4 === void 0 ? void 0 : _element4.removeEventListener("click", conditionalHandler, true);
        (_element12 = element2) === null || _element12 === void 0 ? void 0 : _element12.removeEventListener("touchstart", conditionalHandler, true);
        (_element22 = element2) === null || _element22 === void 0 ? void 0 : _element22.removeEventListener("contextmenu", conditionalHandler, true);
        (_element32 = element2) === null || _element32 === void 0 ? void 0 : _element32.removeEventListener("mousedown", handleMouseDown, true);
        clearTimeout(timeoutId.current);
        currentEvent = void 0;
      };
    }, [
      listener,
      element2,
      disabled,
      handleMouseDown
    ]);
  };
  var getWindowEvent = (target) => {
    if (target) {
      var _target_ownerDocument_defaultView, _target_ownerDocument;
      if (typeof target.window === "object" && target.window === target) {
        return target.event;
      }
      var _target_ownerDocument_defaultView_event;
      return (_target_ownerDocument_defaultView_event = (_target_ownerDocument = target.ownerDocument) === null || _target_ownerDocument === void 0 ? void 0 : (_target_ownerDocument_defaultView = _target_ownerDocument.defaultView) === null || _target_ownerDocument_defaultView === void 0 ? void 0 : _target_ownerDocument_defaultView.event) !== null && _target_ownerDocument_defaultView_event !== void 0 ? _target_ownerDocument_defaultView_event : void 0;
    }
    return void 0;
  };
  var FUI_FRAME_EVENT = "fuiframefocus";
  var useIFrameFocus = (options) => {
    const { disabled, element: targetDocument, callback, contains = DEFAULT_CONTAINS, pollDuration = 1e3, refs } = options;
    const timeoutRef = React15.useRef();
    const listener = useEventCallback((e3) => {
      const isOutside = refs.every((ref) => !contains(ref.current || null, e3.target));
      if (isOutside && !disabled) {
        callback(e3);
      }
    });
    React15.useEffect(() => {
      var _targetDocument;
      if (disabled) {
        return;
      }
      (_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.addEventListener(FUI_FRAME_EVENT, listener, true);
      return () => {
        var _targetDocument2;
        (_targetDocument2 = targetDocument) === null || _targetDocument2 === void 0 ? void 0 : _targetDocument2.removeEventListener(FUI_FRAME_EVENT, listener, true);
      };
    }, [
      targetDocument,
      disabled,
      listener
    ]);
    React15.useEffect(() => {
      var _targetDocument_defaultView, _targetDocument;
      if (disabled) {
        return;
      }
      timeoutRef.current = (_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : (_targetDocument_defaultView = _targetDocument.defaultView) === null || _targetDocument_defaultView === void 0 ? void 0 : _targetDocument_defaultView.setInterval(() => {
        var _targetDocument2, _activeElement, _activeElement1;
        const activeElement = (_targetDocument2 = targetDocument) === null || _targetDocument2 === void 0 ? void 0 : _targetDocument2.activeElement;
        if (((_activeElement = activeElement) === null || _activeElement === void 0 ? void 0 : _activeElement.tagName) === "IFRAME" || ((_activeElement1 = activeElement) === null || _activeElement1 === void 0 ? void 0 : _activeElement1.tagName) === "WEBVIEW") {
          const event = new CustomEvent(FUI_FRAME_EVENT, {
            bubbles: true
          });
          activeElement.dispatchEvent(event);
        }
      }, pollDuration);
      return () => {
        var _targetDocument_defaultView2, _targetDocument2;
        (_targetDocument2 = targetDocument) === null || _targetDocument2 === void 0 ? void 0 : (_targetDocument_defaultView2 = _targetDocument2.defaultView) === null || _targetDocument_defaultView2 === void 0 ? void 0 : _targetDocument_defaultView2.clearTimeout(timeoutRef.current);
      };
    }, [
      targetDocument,
      disabled,
      pollDuration
    ]);
  };

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useOnScrollOutside.js
  var React16 = __toESM(require_react());
  var useOnScrollOutside = (options) => {
    const { refs, callback, element: element2, disabled, contains: containsProp } = options;
    const listener = useEventCallback((ev) => {
      const contains = containsProp || ((parent3, child) => {
        var _parent;
        return !!((_parent = parent3) === null || _parent === void 0 ? void 0 : _parent.contains(child));
      });
      const target = ev.composedPath()[0];
      const isOutside = refs.every((ref) => !contains(ref.current || null, target));
      if (isOutside && !disabled) {
        callback(ev);
      }
    });
    React16.useEffect(() => {
      var _element, _element1, _element2;
      if (disabled) {
        return;
      }
      (_element = element2) === null || _element === void 0 ? void 0 : _element.addEventListener("wheel", listener);
      (_element1 = element2) === null || _element1 === void 0 ? void 0 : _element1.addEventListener("touchmove", listener);
      (_element2 = element2) === null || _element2 === void 0 ? void 0 : _element2.addEventListener("scroll", listener, true);
      return () => {
        var _element3, _element12, _element22;
        (_element3 = element2) === null || _element3 === void 0 ? void 0 : _element3.removeEventListener("wheel", listener);
        (_element12 = element2) === null || _element12 === void 0 ? void 0 : _element12.removeEventListener("touchmove", listener);
        (_element22 = element2) === null || _element22 === void 0 ? void 0 : _element22.removeEventListener("scroll", listener, true);
      };
    }, [
      listener,
      element2,
      disabled
    ]);
  };

  // ../node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js
  var React17 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/utils/properties.js
  var toObjectMap = (...items) => {
    const result = {};
    for (const item of items) {
      const keys2 = Array.isArray(item) ? item : Object.keys(item);
      for (const key of keys2) {
        result[key] = 1;
      }
    }
    return result;
  };
  var baseElementEvents = toObjectMap([
    "onAuxClick",
    "onAnimationEnd",
    "onAnimationStart",
    "onCopy",
    "onCut",
    "onPaste",
    "onCompositionEnd",
    "onCompositionStart",
    "onCompositionUpdate",
    "onFocus",
    "onFocusCapture",
    "onBlur",
    "onBlurCapture",
    "onChange",
    "onInput",
    "onSubmit",
    "onLoad",
    "onError",
    "onKeyDown",
    "onKeyDownCapture",
    "onKeyPress",
    "onKeyUp",
    "onAbort",
    "onCanPlay",
    "onCanPlayThrough",
    "onDurationChange",
    "onEmptied",
    "onEncrypted",
    "onEnded",
    "onLoadedData",
    "onLoadedMetadata",
    "onLoadStart",
    "onPause",
    "onPlay",
    "onPlaying",
    "onProgress",
    "onRateChange",
    "onSeeked",
    "onSeeking",
    "onStalled",
    "onSuspend",
    "onTimeUpdate",
    "onVolumeChange",
    "onWaiting",
    "onClick",
    "onClickCapture",
    "onContextMenu",
    "onDoubleClick",
    "onDrag",
    "onDragEnd",
    "onDragEnter",
    "onDragExit",
    "onDragLeave",
    "onDragOver",
    "onDragStart",
    "onDrop",
    "onMouseDown",
    "onMouseDownCapture",
    "onMouseEnter",
    "onMouseLeave",
    "onMouseMove",
    "onMouseOut",
    "onMouseOver",
    "onMouseUp",
    "onMouseUpCapture",
    "onSelect",
    "onTouchCancel",
    "onTouchEnd",
    "onTouchMove",
    "onTouchStart",
    "onScroll",
    "onWheel",
    "onPointerCancel",
    "onPointerDown",
    "onPointerEnter",
    "onPointerLeave",
    "onPointerMove",
    "onPointerOut",
    "onPointerOver",
    "onPointerUp",
    "onGotPointerCapture",
    "onLostPointerCapture"
  ]);
  var baseElementProperties = toObjectMap([
    "accessKey",
    "children",
    "className",
    "contentEditable",
    "dir",
    "draggable",
    "hidden",
    "htmlFor",
    "id",
    "lang",
    "ref",
    "role",
    "style",
    "tabIndex",
    "title",
    "translate",
    "spellCheck",
    "name"
  ]);
  var microdataProperties = toObjectMap([
    "itemID",
    "itemProp",
    "itemRef",
    "itemScope",
    "itemType"
  ]);
  var htmlElementProperties = toObjectMap(baseElementProperties, baseElementEvents, microdataProperties);
  var labelProperties = toObjectMap(htmlElementProperties, [
    "form"
  ]);
  var audioProperties = toObjectMap(htmlElementProperties, [
    "height",
    "loop",
    "muted",
    "preload",
    "src",
    "width"
  ]);
  var videoProperties = toObjectMap(audioProperties, [
    "poster"
  ]);
  var olProperties = toObjectMap(htmlElementProperties, [
    "start"
  ]);
  var liProperties = toObjectMap(htmlElementProperties, [
    "value"
  ]);
  var anchorProperties = toObjectMap(htmlElementProperties, [
    "download",
    "href",
    "hrefLang",
    "media",
    "rel",
    "target",
    "type"
  ]);
  var timeProperties = toObjectMap(htmlElementProperties, [
    "dateTime"
  ]);
  var buttonProperties = toObjectMap(htmlElementProperties, [
    "autoFocus",
    "disabled",
    "form",
    "formAction",
    "formEncType",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "type",
    "value"
  ]);
  var inputProperties = toObjectMap(buttonProperties, [
    "accept",
    "alt",
    "autoCapitalize",
    "autoComplete",
    "checked",
    "dirname",
    "form",
    "height",
    "inputMode",
    "list",
    "max",
    "maxLength",
    "min",
    "multiple",
    "pattern",
    "placeholder",
    "readOnly",
    "required",
    "src",
    "step",
    "size",
    "type",
    "value",
    "width"
  ]);
  var textAreaProperties = toObjectMap(buttonProperties, [
    "autoCapitalize",
    "cols",
    "dirname",
    "form",
    "maxLength",
    "placeholder",
    "readOnly",
    "required",
    "rows",
    "wrap"
  ]);
  var selectProperties = toObjectMap(buttonProperties, [
    "form",
    "multiple",
    "required"
  ]);
  var optionProperties = toObjectMap(htmlElementProperties, [
    "selected",
    "value"
  ]);
  var tableProperties = toObjectMap(htmlElementProperties, [
    "cellPadding",
    "cellSpacing"
  ]);
  var trProperties = htmlElementProperties;
  var thProperties = toObjectMap(htmlElementProperties, [
    "colSpan",
    "rowSpan",
    "scope"
  ]);
  var tdProperties = toObjectMap(htmlElementProperties, [
    "colSpan",
    "headers",
    "rowSpan",
    "scope"
  ]);
  var colGroupProperties = toObjectMap(htmlElementProperties, [
    "span"
  ]);
  var colProperties = toObjectMap(htmlElementProperties, [
    "span"
  ]);
  var fieldsetProperties = toObjectMap(htmlElementProperties, [
    "disabled",
    "form"
  ]);
  var formProperties = toObjectMap(htmlElementProperties, [
    "acceptCharset",
    "action",
    "encType",
    "encType",
    "method",
    "noValidate",
    "target"
  ]);
  var iframeProperties = toObjectMap(htmlElementProperties, [
    "allow",
    "allowFullScreen",
    "allowPaymentRequest",
    "allowTransparency",
    "csp",
    "height",
    "importance",
    "referrerPolicy",
    "sandbox",
    "src",
    "srcDoc",
    "width"
  ]);
  var imgProperties = toObjectMap(htmlElementProperties, [
    "alt",
    "crossOrigin",
    "height",
    "src",
    "srcSet",
    "useMap",
    "width"
  ]);
  var dialogProperties = toObjectMap(htmlElementProperties, [
    "open",
    "onCancel",
    "onClose"
  ]);
  function getNativeProps(props, allowedPropNames, excludedPropNames) {
    const isArray = Array.isArray(allowedPropNames);
    const result = {};
    const keys2 = Object.keys(props);
    for (const key of keys2) {
      var _excludedPropNames;
      const isNativeProp = !isArray && allowedPropNames[key] || isArray && allowedPropNames.indexOf(key) >= 0 || key.indexOf("data-") === 0 || key.indexOf("aria-") === 0;
      if (isNativeProp && (!excludedPropNames || ((_excludedPropNames = excludedPropNames) === null || _excludedPropNames === void 0 ? void 0 : _excludedPropNames.indexOf(key)) === -1)) {
        result[key] = props[key];
      }
    }
    return result;
  }

  // ../node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js
  var nativeElementMap = {
    label: labelProperties,
    audio: audioProperties,
    video: videoProperties,
    ol: olProperties,
    li: liProperties,
    a: anchorProperties,
    button: buttonProperties,
    input: inputProperties,
    textarea: textAreaProperties,
    select: selectProperties,
    option: optionProperties,
    table: tableProperties,
    tr: trProperties,
    th: thProperties,
    td: tdProperties,
    colGroup: colGroupProperties,
    col: colProperties,
    fieldset: fieldsetProperties,
    form: formProperties,
    iframe: iframeProperties,
    img: imgProperties,
    time: timeProperties,
    dialog: dialogProperties
  };
  function getNativeElementProps(tagName, props, excludedPropNames) {
    const allowedPropNames = tagName && nativeElementMap[tagName] || htmlElementProperties;
    allowedPropNames.as = 1;
    return getNativeProps(props, allowedPropNames, excludedPropNames);
  }
  var getPartitionedNativeProps = ({ primarySlotTagName, props, excludedPropNames }) => {
    return {
      root: {
        style: props.style,
        className: props.className
      },
      primary: getNativeElementProps(primarySlotTagName, props, [
        ...excludedPropNames || [],
        "style",
        "className"
      ])
    };
  };

  // ../node_modules/@fluentui/react-utilities/lib/utils/mergeCallbacks.js
  function mergeCallbacks(callback1, callback2) {
    return (...args) => {
      var _callback1, _callback2;
      (_callback1 = callback1) === null || _callback1 === void 0 ? void 0 : _callback1(...args);
      (_callback2 = callback2) === null || _callback2 === void 0 ? void 0 : _callback2(...args);
    };
  }

  // ../node_modules/@fluentui/react-utilities/lib/utils/isHTMLElement.js
  function isHTMLElement(element2, options) {
    var _typedElement_ownerDocument, _typedElement, _options;
    const typedElement = element2;
    var _options_constructorName;
    return Boolean(((_typedElement = typedElement) === null || _typedElement === void 0 ? void 0 : (_typedElement_ownerDocument = _typedElement.ownerDocument) === null || _typedElement_ownerDocument === void 0 ? void 0 : _typedElement_ownerDocument.defaultView) && typedElement instanceof typedElement.ownerDocument.defaultView[(_options_constructorName = (_options = options) === null || _options === void 0 ? void 0 : _options.constructorName) !== null && _options_constructorName !== void 0 ? _options_constructorName : "HTMLElement"]);
  }

  // ../node_modules/@fluentui/react-utilities/lib/trigger/applyTriggerPropsToChildren.js
  var React19 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/trigger/isFluentTrigger.js
  var React18 = __toESM(require_react());
  function isFluentTrigger(element2) {
    return Boolean(element2.type.isFluentTriggerComponent);
  }

  // ../node_modules/@fluentui/react-utilities/lib/trigger/applyTriggerPropsToChildren.js
  function applyTriggerPropsToChildren(children, triggerChildProps) {
    if (typeof children === "function") {
      return children(triggerChildProps);
    } else if (children) {
      return cloneTriggerTree(children, triggerChildProps);
    }
    return children || null;
  }
  function cloneTriggerTree(child, triggerProps) {
    if (!React19.isValidElement(child) || child.type === React19.Fragment) {
      throw new Error("A trigger element must be a single element for this component. Please ensure that you're not using React Fragments.");
    }
    if (isFluentTrigger(child)) {
      const grandchild = cloneTriggerTree(child.props.children, triggerProps);
      return React19.cloneElement(child, void 0, grandchild);
    } else {
      return React19.cloneElement(child, triggerProps);
    }
  }

  // ../node_modules/@fluentui/react-utilities/lib/trigger/getTriggerChild.js
  var React20 = __toESM(require_react());
  function getTriggerChild(children) {
    if (!React20.isValidElement(children)) {
      return null;
    }
    return isFluentTrigger(children) ? getTriggerChild(
      // FIXME: This casting should be unnecessary as isFluentTrigger is a guard type method,
      // but for some reason it's failing on build
      children.props.children
    ) : children;
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/utils/getMetadataFromSlotComponent.js
  function getMetadataFromSlotComponent(type) {
    const { as, [SLOT_ELEMENT_TYPE_SYMBOL]: baseElementType, [SLOT_RENDER_FUNCTION_SYMBOL]: renderFunction, ...propsWithoutMetadata } = type;
    const props = propsWithoutMetadata;
    const elementType = typeof baseElementType === "string" ? as !== null && as !== void 0 ? as : baseElementType : baseElementType;
    if (typeof elementType !== "string" && as) {
      props.as = as;
    }
    return {
      elementType,
      props,
      renderFunction
    };
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/utils/createCompatSlotComponent.js
  var React21 = __toESM(require_react());
  function createCompatSlotComponent(type, props) {
    return {
      ...props,
      [SLOT_ELEMENT_TYPE_SYMBOL]: type
    };
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/jsx/createJSX.js
  var createJSX = (runtime) => {
    const jsxFromSlotComponent = (type, overrideProps, key, source, self2) => {
      const { elementType, renderFunction, props: slotProps } = getMetadataFromSlotComponent(type);
      const props = {
        ...slotProps,
        ...overrideProps
      };
      if (renderFunction) {
        return runtime(React22.Fragment, {
          children: renderFunction(elementType, props)
        }, key, source, self2);
      }
      return runtime(elementType, props, key, source, self2);
    };
    return (type, overrideProps, key, source, self2) => {
      if (isSlot(overrideProps)) {
        return jsxFromSlotComponent(createCompatSlotComponent(type, overrideProps), null, key, source, self2);
      }
      if (isSlot(type)) {
        return jsxFromSlotComponent(type, overrideProps, key, source, self2);
      }
      return runtime(type, overrideProps, key, source, self2);
    };
  };

  // ../node_modules/@fluentui/react-jsx-runtime/lib/jsx-runtime.js
  var import_react2 = __toESM(require_react());
  var jsx = createJSX(Runtime.jsx);
  var jsxs = createJSX(Runtime.jsxs);

  // ../node_modules/@fluentui/react-shared-contexts/lib/ThemeContext/ThemeContext.js
  var React23 = __toESM(require_react());
  var ThemeContext = React23.createContext(void 0);
  var ThemeProvider = ThemeContext.Provider;

  // ../node_modules/@fluentui/react-shared-contexts/lib/ThemeClassNameContext/ThemeClassNameContext.js
  var React24 = __toESM(require_react());
  var ThemeClassNameContext = React24.createContext(void 0);
  var themeClassNameContextDefaultVaue = "";
  var ThemeClassNameProvider = ThemeClassNameContext.Provider;
  function useThemeClassName() {
    var _React_useContext5;
    return (_React_useContext5 = React24.useContext(ThemeClassNameContext)) !== null && _React_useContext5 !== void 0 ? _React_useContext5 : themeClassNameContextDefaultVaue;
  }

  // ../node_modules/@fluentui/react-shared-contexts/lib/TooltipVisibilityContext/TooltipContext.js
  var React25 = __toESM(require_react());
  var TooltipVisibilityContext = React25.createContext(void 0);
  var TooltipVisibilityProvider = TooltipVisibilityContext.Provider;

  // ../node_modules/@fluentui/react-shared-contexts/lib/ProviderContext/ProviderContext.js
  var React26 = __toESM(require_react());
  var ProviderContext = React26.createContext(void 0);
  var providerContextDefaultValue = {
    targetDocument: typeof document === "object" ? document : void 0,
    dir: "ltr"
  };
  var Provider = ProviderContext.Provider;
  function useFluent() {
    var _React_useContext5;
    return (_React_useContext5 = React26.useContext(ProviderContext)) !== null && _React_useContext5 !== void 0 ? _React_useContext5 : providerContextDefaultValue;
  }

  // ../node_modules/@fluentui/react-shared-contexts/lib/OverridesContext/OverridesContext.js
  var React27 = __toESM(require_react());
  var OverridesContext = React27.createContext(void 0);
  var OverridesProvider = OverridesContext.Provider;
  function useOverrides() {
    var _React_useContext5;
    return (_React_useContext5 = React27.useContext(OverridesContext)) !== null && _React_useContext5 !== void 0 ? _React_useContext5 : {};
  }

  // ../node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext/CustomStyleHooksContext.js
  var React28 = __toESM(require_react());
  var CustomStyleHooksContext = React28.createContext(void 0);
  var noop2 = () => {
  };
  var CustomStyleHooksProvider = CustomStyleHooksContext.Provider;
  var useCustomStyleHook = (hook) => {
    var _React_useContext5;
    var _React_useContext_hook;
    return (_React_useContext_hook = (_React_useContext5 = React28.useContext(CustomStyleHooksContext)) === null || _React_useContext5 === void 0 ? void 0 : _React_useContext5[hook]) !== null && _React_useContext_hook !== void 0 ? _React_useContext_hook : noop2;
  };

  // ../node_modules/@fluentui/react-shared-contexts/lib/PortalMountNodeContext.js
  var React29 = __toESM(require_react());
  var PortalMountNodeContext = React29.createContext(void 0);
  var PortalMountNodeProvider = PortalMountNodeContext.Provider;
  function usePortalMountNode() {
    return React29.useContext(PortalMountNodeContext);
  }

  // ../node_modules/@fluentui/react-icons/lib/utils/createFluentIcon.js
  var React30 = __toESM(require_react());

  // ../node_modules/@fluentui/react-icons/lib/utils/useIconState.js
  var useRootStyles = __styles2({
    "root": {
      "mc9l5x": "f1w7gpdv",
      "Bg96gwp": "fez10in",
      "ycbfsm": "fg4l7m0"
    }
  }, {
    "d": [".f1w7gpdv{display:inline;}", ".fez10in{line-height:0;}"],
    "t": ["@media (forced-colors: active){.fg4l7m0{forced-color-adjust:auto;}}"]
  });
  var useIconState = (props) => {
    const {
      title,
      primaryFill = "currentColor",
      ...rest
    } = props;
    const state = {
      ...rest,
      title: void 0,
      fill: primaryFill
    };
    const styles4 = useRootStyles();
    state.className = mergeClasses(styles4.root, state.className);
    if (title) {
      state["aria-label"] = title;
    }
    if (!state["aria-label"] && !state["aria-labelledby"]) {
      state["aria-hidden"] = true;
    } else {
      state["role"] = "img";
    }
    return state;
  };

  // ../node_modules/@fluentui/react-icons/lib/utils/createFluentIcon.js
  var createFluentIcon = (displayName, width, paths) => {
    const viewBoxWidth = width === "1em" ? "20" : width;
    const Icon2 = React30.forwardRef((props, ref) => {
      const state = {
        ...useIconState(props),
        ref,
        width,
        height: width,
        viewBox: `0 0 ${viewBoxWidth} ${viewBoxWidth}`,
        xmlns: "http://www.w3.org/2000/svg"
      };
      return React30.createElement("svg", state, ...paths.map((d3) => React30.createElement("path", {
        d: d3,
        fill: state.fill
      })));
    });
    Icon2.displayName = displayName;
    return Icon2;
  };

  // ../node_modules/@fluentui/react-icons/lib/icons/chunk-0.js
  var CheckmarkFilled = /* @__PURE__ */ createFluentIcon("CheckmarkFilled", "1em", ["M7.03 13.9 3.56 10a.75.75 0 0 0-1.12 1l4 4.5c.29.32.79.34 1.09.03l10.5-10.5a.75.75 0 0 0-1.06-1.06l-9.94 9.94Z"]);
  var ChevronDownRegular = /* @__PURE__ */ createFluentIcon("ChevronDownRegular", "1em", ["M15.85 7.65c.2.2.2.5 0 .7l-5.46 5.49a.55.55 0 0 1-.78 0L4.15 8.35a.5.5 0 1 1 .7-.7L10 12.8l5.15-5.16c.2-.2.5-.2.7 0Z"]);
  var ChevronLeftFilled = /* @__PURE__ */ createFluentIcon("ChevronLeftFilled", "1em", ["M12.27 15.8a.75.75 0 0 1-1.06-.03l-5-5.25a.75.75 0 0 1 0-1.04l5-5.25a.75.75 0 1 1 1.08 1.04L7.8 10l4.5 4.73c.29.3.28.78-.02 1.06Z"]);
  var ChevronLeftRegular = /* @__PURE__ */ createFluentIcon("ChevronLeftRegular", "1em", ["M12.35 15.85a.5.5 0 0 1-.7 0L6.16 10.4a.55.55 0 0 1 0-.78l5.49-5.46a.5.5 0 1 1 .7.7L7.2 10l5.16 5.15c.2.2.2.5 0 .7Z"]);
  var ChevronRightFilled = /* @__PURE__ */ createFluentIcon("ChevronRightFilled", "1em", ["M7.73 4.2a.75.75 0 0 1 1.06.03l5 5.25c.28.3.28.75 0 1.04l-5 5.25a.75.75 0 1 1-1.08-1.04L12.2 10l-4.5-4.73a.75.75 0 0 1 .02-1.06Z"]);

  // ../node_modules/@fluentui/react-icons/lib/icons/chunk-1.js
  var ChevronRightRegular = /* @__PURE__ */ createFluentIcon("ChevronRightRegular", "1em", ["M7.65 4.15c.2-.2.5-.2.7 0l5.49 5.46c.21.22.21.57 0 .78l-5.49 5.46a.5.5 0 0 1-.7-.7L12.8 10 7.65 4.85a.5.5 0 0 1 0-.7Z"]);
  var CircleFilled = /* @__PURE__ */ createFluentIcon("CircleFilled", "1em", ["M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16Z"]);

  // ../node_modules/@fluentui/react-icons/lib/icons/chunk-2.js
  var PersonRegular = /* @__PURE__ */ createFluentIcon("PersonRegular", "1em", ["M10 2a4 4 0 1 0 0 8 4 4 0 0 0 0-8ZM7 6a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm-2 5a2 2 0 0 0-2 2c0 1.7.83 2.97 2.13 3.8A9.14 9.14 0 0 0 10 18c1.85 0 3.58-.39 4.87-1.2A4.35 4.35 0 0 0 17 13a2 2 0 0 0-2-2H5Zm-1 2a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1c0 1.3-.62 2.28-1.67 2.95A8.16 8.16 0 0 1 10 17a8.16 8.16 0 0 1-4.33-1.05A3.36 3.36 0 0 1 4 13Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-0.js
  var AddCircle16Regular = /* @__PURE__ */ createFluentIcon("AddCircle16Regular", "16", ["M8 5c.28 0 .5.22.5.5v2h2a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0v-2h-2a.5.5 0 0 1 0-1h2v-2c0-.28.22-.5.5-.5ZM2 8a6 6 0 1 1 12 0A6 6 0 0 1 2 8Zm6-5a5 5 0 1 0 0 10A5 5 0 0 0 8 3Z"]);
  var AddSquare24Regular = /* @__PURE__ */ createFluentIcon("AddSquare24Regular", "24", ["M12 7c.41 0 .75.34.75.75v3.5h3.5a.75.75 0 0 1 0 1.5h-3.5v3.5a.75.75 0 0 1-1.5 0v-3.5h-3.5a.75.75 0 0 1 0-1.5h3.5v-3.5c0-.41.34-.75.75-.75Zm-9-.75C3 4.45 4.46 3 6.25 3h11.5C19.55 3 21 4.46 21 6.25v11.5c0 1.8-1.46 3.25-3.25 3.25H6.25A3.25 3.25 0 0 1 3 17.75V6.25ZM6.25 4.5c-.97 0-1.75.78-1.75 1.75v11.5c0 .97.78 1.75 1.75 1.75h11.5c.97 0 1.75-.78 1.75-1.75V6.25c0-.97-.78-1.75-1.75-1.75H6.25Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-1.js
  var BrainCircuit24Regular = /* @__PURE__ */ createFluentIcon("BrainCircuit24Regular", "24", ["M7.15 3.01c.83-.65 1.92-1 3-1a2.3 2.3 0 0 1 1.86.88A2.3 2.3 0 0 1 13.86 2c1.08 0 2.17.35 3 1 .65.5 1.16 1.2 1.35 2.04.42.07.8.28 1.1.57.48.45.82 1.1 1.04 1.77.22.68.33 1.45.3 2.18a4.9 4.9 0 0 1-.18 1.13l.06.03c.37.17.67.45.9.8.42.7.57 1.68.57 2.94 0 1.44-.55 2.42-1.26 3.03-.41.35-.87.57-1.27.7-.14.68-.49 1.46-1.02 2.13A4.24 4.24 0 0 1 15.09 22a3.9 3.9 0 0 1-2.77-1.31 5.36 5.36 0 0 1-.31-.36l-.31.36a3.9 3.9 0 0 1-2.78 1.3 4.24 4.24 0 0 1-3.36-1.66 5.17 5.17 0 0 1-1.01-2.14c-.4-.12-.86-.34-1.27-.69A3.83 3.83 0 0 1 2 14.47c0-1.26.15-2.25.58-2.93a2.1 2.1 0 0 1 .96-.84 4.9 4.9 0 0 1-.18-1.13c-.03-.73.08-1.5.3-2.18A4.2 4.2 0 0 1 4.7 5.62c.3-.29.68-.5 1.1-.57C6 4.2 6.5 3.52 7.15 3Zm.92 1.19c-.54.42-.86.99-.86 1.64a.75.75 0 0 1-.99.7c-.14-.04-.28-.03-.49.17-.23.22-.47.61-.64 1.14-.16.52-.25 1.1-.22 1.65.02.56.16 1.02.37 1.33l.08.17H6.4c1.5 0 2.74 1.17 2.84 2.64a2 2 0 1 1-1.5.01A1.35 1.35 0 0 0 6.4 12.5H3.78c-.15.35-.27.95-.27 1.97s.38 1.58.74 1.9c.4.34.85.43.98.43.41 0 .75.33.75.75s.23 1.18.76 1.84c.5.64 1.23 1.1 2.18 1.1.64 0 1.23-.35 1.7-.84a3.7 3.7 0 0 0 .63-.92V9.25h-.9a2 2 0 1 1 0-1.5h.9V5.22a2.06 2.06 0 0 0-.02-.3c-.03-.19-.07-.43-.16-.67-.1-.24-.2-.43-.35-.55a.8.8 0 0 0-.57-.2c-.76 0-1.52.26-2.08.7Zm4.7 12.8v1.73l.11.23c.12.2.3.45.52.69.47.49 1.06.85 1.7.85.95 0 1.67-.47 2.18-1.1.53-.67.76-1.43.76-1.85 0-.42.33-.75.75-.75.13 0 .57-.1.97-.44.37-.31.74-.87.74-1.9 0-1.2-.16-1.82-.35-2.13a.6.6 0 0 0-.26-.25c-.1-.04-.25-.08-.49-.08a.75.75 0 0 1-.62-1.17c.2-.3.34-.77.36-1.33a4.84 4.84 0 0 0-.22-1.65c-.17-.53-.4-.92-.64-1.14-.2-.2-.35-.2-.49-.16a.75.75 0 0 1-.98-.71c0-.65-.32-1.22-.87-1.64a3.45 3.45 0 0 0-2.08-.7.8.8 0 0 0-.57.2c-.14.12-.25.31-.34.55a3.06 3.06 0 0 0-.19.96V15.5h.64c.75 0 1.35-.6 1.35-1.35v-1.8a2 2 0 1 1 1.5 0v1.8A2.85 2.85 0 0 1 13.4 17h-.64ZM8.5 8a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1ZM8 15.5a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0Zm7-5a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-2.js
  var Checkmark12Filled = /* @__PURE__ */ createFluentIcon("Checkmark12Filled", "12", ["M9.76 3.2c.3.29.32.76.04 1.06l-4.25 4.5a.75.75 0 0 1-1.08.02L2.22 6.53a.75.75 0 0 1 1.06-1.06l1.7 1.7L8.7 3.24a.75.75 0 0 1 1.06-.04Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-3.js
  var Checkmark16Filled = /* @__PURE__ */ createFluentIcon("Checkmark16Filled", "16", ["M14.05 3.49c.28.3.27.77-.04 1.06l-7.93 7.47A.85.85 0 0 1 4.9 12L2.22 9.28a.75.75 0 1 1 1.06-1.06l2.24 2.27 7.47-7.04a.75.75 0 0 1 1.06.04Z"]);
  var ChevronRight12Regular = /* @__PURE__ */ createFluentIcon("ChevronRight12Regular", "12", ["M4.65 2.15a.5.5 0 0 0 0 .7L7.79 6 4.65 9.15a.5.5 0 1 0 .7.7l3.5-3.5a.5.5 0 0 0 0-.7l-3.5-3.5a.5.5 0 0 0-.7 0Z"]);
  var ChevronUp20Filled = /* @__PURE__ */ createFluentIcon("ChevronUp20Filled", "20", ["M4.2 12.27a.75.75 0 0 1 .03-1.06l5.25-5a.75.75 0 0 1 1.04 0l5.25 5a.75.75 0 0 1-1.04 1.08L10 7.8l-4.73 4.5a.75.75 0 0 1-1.06-.02Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-4.js
  var Delete24Regular = /* @__PURE__ */ createFluentIcon("Delete24Regular", "24", ["M10 5h4a2 2 0 1 0-4 0ZM8.5 5a3.5 3.5 0 1 1 7 0h5.75a.75.75 0 0 1 0 1.5h-1.32l-1.17 12.11A3.75 3.75 0 0 1 15.03 22H8.97a3.75 3.75 0 0 1-3.73-3.39L4.07 6.5H2.75a.75.75 0 0 1 0-1.5H8.5Zm2 4.75a.75.75 0 0 0-1.5 0v7.5a.75.75 0 0 0 1.5 0v-7.5ZM14.25 9c.41 0 .75.34.75.75v7.5a.75.75 0 0 1-1.5 0v-7.5c0-.41.34-.75.75-.75Zm-7.52 9.47a2.25 2.25 0 0 0 2.24 2.03h6.06c1.15 0 2.12-.88 2.24-2.03L18.42 6.5H5.58l1.15 11.97Z"]);
  var Dismiss20Regular = /* @__PURE__ */ createFluentIcon("Dismiss20Regular", "20", ["m4.09 4.22.06-.07a.5.5 0 0 1 .63-.06l.07.06L10 9.29l5.15-5.14a.5.5 0 0 1 .63-.06l.07.06c.18.17.2.44.06.63l-.06.07L10.71 10l5.14 5.15c.18.17.2.44.06.63l-.06.07a.5.5 0 0 1-.63.06l-.07-.06L10 10.71l-5.15 5.14a.5.5 0 0 1-.63.06l-.07-.06a.5.5 0 0 1-.06-.63l.06-.07L9.29 10 4.15 4.85a.5.5 0 0 1-.06-.63l.06-.07-.06.07Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-7.js
  var Link24Regular = /* @__PURE__ */ createFluentIcon("Link24Regular", "24", ["M9.25 7a.75.75 0 0 1 .11 1.5H7a3.5 3.5 0 0 0-.2 7h2.45a.75.75 0 0 1 .11 1.5H7a5 5 0 0 1-.25-10h2.5ZM17 7a5 5 0 0 1 .25 10h-2.5a.75.75 0 0 1-.11-1.5H17a3.5 3.5 0 0 0 .2-7h-2.45a.75.75 0 0 1-.11-1.5H17ZM7 11.25h10a.75.75 0 0 1 .1 1.5H7a.75.75 0 0 1-.1-1.5H17 7Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-8.js
  var MoreHorizontal20Regular = /* @__PURE__ */ createFluentIcon("MoreHorizontal20Regular", "20", ["M6.25 10a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Zm5 0a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0ZM15 11.25a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-9.js
  var PeopleCommunity24Regular = /* @__PURE__ */ createFluentIcon("PeopleCommunity24Regular", "24", ["M7.5 3.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3ZM4.5 5a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm-.73 4C2.79 9 2 9.8 2 10.77v.36c0 .2 0 1.4.7 2.57a4.6 4.6 0 0 0 2.98 2.1c.2-.55.58-1.02 1.06-1.34-1.6-.17-2.36-.88-2.75-1.53a3.65 3.65 0 0 1-.49-1.8v-.36c0-.15.12-.27.27-.27h4.26c.07-.54.24-1.05.5-1.5H3.78Zm11.7 0c.26.45.43.96.5 1.5h4.26c.15 0 .27.12.27.27v.36c0 .14 0 1-.49 1.8-.39.65-1.14 1.36-2.75 1.53.48.32.86.79 1.06 1.34a4.6 4.6 0 0 0 2.98-2.1c.7-1.16.7-2.36.7-2.57v-.36C22 9.79 21.2 9 20.23 9h-4.77ZM15 5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Zm1.5-3a3 3 0 1 0 0 6 3 3 0 0 0 0-6ZM12 9.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3ZM9 11a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm-2.5 5.77c0-.98.8-1.77 1.77-1.77h7.46c.98 0 1.77.8 1.77 1.77v.36c0 .2 0 1.4-.7 2.57-.74 1.24-2.19 2.3-4.8 2.3s-4.06-1.06-4.8-2.3a5.15 5.15 0 0 1-.7-2.57v-.36Zm1.77-.27a.27.27 0 0 0-.27.27v.36c0 .14 0 1 .49 1.8.44.74 1.37 1.57 3.51 1.57 2.14 0 3.07-.83 3.51-1.57.49-.8.49-1.66.49-1.8v-.36a.27.27 0 0 0-.27-.27H8.27Z"]);
  var PresenceAvailable10Filled = /* @__PURE__ */ createFluentIcon("PresenceAvailable10Filled", "10", ["M5 10A5 5 0 1 0 5 0a5 5 0 0 0 0 10Zm2.1-5.9L4.85 6.35a.5.5 0 0 1-.7 0l-1-1a.5.5 0 0 1 .7-.7l.65.64 1.9-1.9a.5.5 0 0 1 .7.71Z"]);
  var PresenceAvailable10Regular = /* @__PURE__ */ createFluentIcon("PresenceAvailable10Regular", "10", ["M5 0a5 5 0 1 0 0 10A5 5 0 0 0 5 0ZM1 5a4 4 0 1 1 8 0 4 4 0 0 1-8 0Zm6.1-1.6c.2.2.2.5 0 .7L4.85 6.35a.5.5 0 0 1-.7 0l-1-1a.5.5 0 1 1 .7-.7l.65.64 1.9-1.9c.2-.19.5-.19.7 0Z"]);
  var PresenceAvailable12Filled = /* @__PURE__ */ createFluentIcon("PresenceAvailable12Filled", "12", ["M6 12A6 6 0 1 0 6 0a6 6 0 0 0 0 12Zm2.53-6.72L5.78 8.03c-.3.3-.77.3-1.06 0l-1-1a.75.75 0 0 1 1.06-1.06l.47.47 2.22-2.22a.75.75 0 0 1 1.06 1.06Z"]);
  var PresenceAvailable12Regular = /* @__PURE__ */ createFluentIcon("PresenceAvailable12Regular", "12", ["M6 0a6 6 0 1 0 0 12A6 6 0 0 0 6 0ZM1.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Zm7.03-1.78c.3.3.3.77 0 1.06L5.78 8.03c-.3.3-.77.3-1.06 0l-1-1a.75.75 0 0 1 1.06-1.06l.47.47 2.22-2.22c.3-.3.77-.3 1.06 0Z"]);
  var PresenceAvailable16Filled = /* @__PURE__ */ createFluentIcon("PresenceAvailable16Filled", "16", ["M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm3.7-9.3-4 4a1 1 0 0 1-1.41 0l-2-2a1 1 0 1 1 1.42-1.4L7 8.58l3.3-3.3a1 1 0 0 1 1.4 1.42Z"]);
  var PresenceAvailable16Regular = /* @__PURE__ */ createFluentIcon("PresenceAvailable16Regular", "16", ["M11.7 6.7a1 1 0 0 0-1.4-1.4L7 8.58l-1.3-1.3a1 1 0 0 0-1.4 1.42l2 2a1 1 0 0 0 1.4 0l4-4ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6a6 6 0 1 0 0 12A6 6 0 0 0 8 2Z"]);
  var PresenceAvailable20Filled = /* @__PURE__ */ createFluentIcon("PresenceAvailable20Filled", "20", ["M10 20a10 10 0 1 0 0-20 10 10 0 0 0 0 20Zm4.2-11.8-4.5 4.5a1 1 0 0 1-1.4 0l-2-2a1 1 0 1 1 1.4-1.4L9 10.58l3.8-3.8a1 1 0 1 1 1.4 1.42Z"]);
  var PresenceAvailable20Regular = /* @__PURE__ */ createFluentIcon("PresenceAvailable20Regular", "20", ["M10 0a10 10 0 1 0 0 20 10 10 0 0 0 0-20ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm12.2-3.2a1 1 0 0 1 0 1.4l-4.5 4.5a1 1 0 0 1-1.4 0l-2-2a1 1 0 0 1 1.4-1.4L9 10.58l3.8-3.8a1 1 0 0 1 1.4 0Z"]);
  var PresenceAway10Filled = /* @__PURE__ */ createFluentIcon("PresenceAway10Filled", "10", ["M5 10A5 5 0 1 0 5 0a5 5 0 0 0 0 10Zm0-7v1.8l1.35 1.35a.5.5 0 1 1-.7.7l-1.5-1.5A.5.5 0 0 1 4 5V3a.5.5 0 0 1 1 0Z"]);
  var PresenceAway10Regular = /* @__PURE__ */ createFluentIcon("PresenceAway10Regular", "10", ["M5 4.8V3a.5.5 0 0 0-1 0v2c0 .13.05.26.15.35l1.5 1.5a.5.5 0 1 0 .7-.7L5 4.79Zm5 .2A5 5 0 1 1 0 5a5 5 0 0 1 10 0ZM9 5a4 4 0 1 0-8 0 4 4 0 0 0 8 0Z"]);
  var PresenceAway12Filled = /* @__PURE__ */ createFluentIcon("PresenceAway12Filled", "12", ["M6 12A6 6 0 1 0 6 0a6 6 0 0 0 0 12Zm.5-8.75v2.4l1.49 1.28A.75.75 0 1 1 7 8.07l-1.75-1.5A.75.75 0 0 1 5 6V3.25a.75.75 0 0 1 1.5 0Z"]);
  var PresenceAway12Regular = /* @__PURE__ */ createFluentIcon("PresenceAway12Regular", "12", ["M6.5 5.66V3.25a.75.75 0 0 0-1.5 0V6c0 .22.1.43.26.57l1.75 1.5A.75.75 0 1 0 8 6.93L6.5 5.66ZM12 6A6 6 0 1 1 0 6a6 6 0 0 1 12 0Zm-1.5 0a4.5 4.5 0 1 0-9 0 4.5 4.5 0 0 0 9 0Z"]);
  var PresenceAway16Filled = /* @__PURE__ */ createFluentIcon("PresenceAway16Filled", "16", ["M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm.5-11.5v3.02l2.12 1.7a1 1 0 1 1-1.24 1.56l-2.5-2A1 1 0 0 1 6.5 8V4.5a1 1 0 0 1 2 0Z"]);
  var PresenceAway16Regular = /* @__PURE__ */ createFluentIcon("PresenceAway16Regular", "16", ["M8.5 7.52V4.5a1 1 0 1 0-2 0V8c0 .3.14.6.38.78l2.5 2a1 1 0 1 0 1.24-1.56L8.5 7.52ZM8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM2 8a6 6 0 1 1 12 0A6 6 0 0 1 2 8Z"]);
  var PresenceAway20Filled = /* @__PURE__ */ createFluentIcon("PresenceAway20Filled", "20", ["M10 20a10 10 0 1 0 0-20 10 10 0 0 0 0 20Zm0-14V9.6l2.7 2.7a1 1 0 0 1-1.4 1.42l-3-3A1 1 0 0 1 8 10V6a1 1 0 1 1 2 0Z"]);
  var PresenceAway20Regular = /* @__PURE__ */ createFluentIcon("PresenceAway20Regular", "20", ["M10 9.59V6a1 1 0 1 0-2 0V10c0 .27.1.52.3.7l3 3a1 1 0 1 0 1.4-1.4L10 9.58Zm-10 .4a10 10 0 1 1 20 0 10 10 0 0 1-20 0ZM10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16Z"]);
  var PresenceBlocked10Regular = /* @__PURE__ */ createFluentIcon("PresenceBlocked10Regular", "10", ["M10 5A5 5 0 1 0 0 5a5 5 0 0 0 10 0ZM9 5a4 4 0 0 1-6.45 3.16l5.61-5.61C8.69 3.22 9 4.08 9 5ZM7.45 1.84 1.84 7.45a4 4 0 0 1 5.61-5.61Z"]);
  var PresenceBlocked12Regular = /* @__PURE__ */ createFluentIcon("PresenceBlocked12Regular", "12", ["M12 6A6 6 0 1 1 0 6a6 6 0 0 1 12 0Zm-1.5 0c0-.97-.3-1.87-.83-2.6L3.39 9.66A4.5 4.5 0 0 0 10.5 6ZM8.6 2.33a4.5 4.5 0 0 0-6.28 6.28l6.29-6.28Z"]);
  var PresenceBlocked16Regular = /* @__PURE__ */ createFluentIcon("PresenceBlocked16Regular", "16", ["M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-2 0c0-1.3-.41-2.5-1.1-3.48L4.51 12.9A6 6 0 0 0 14 8Zm-2.52-4.9a6 6 0 0 0-8.37 8.37l8.37-8.36Z"]);
  var PresenceBlocked20Regular = /* @__PURE__ */ createFluentIcon("PresenceBlocked20Regular", "20", ["M20 10a10 10 0 1 0-20 0 10 10 0 0 0 20 0Zm-2 0a8 8 0 0 1-12.9 6.32L16.31 5.09A7.97 7.97 0 0 1 18 10Zm-3.1-6.32L3.69 14.91A8 8 0 0 1 14.91 3.68Z"]);
  var PresenceBusy10Filled = /* @__PURE__ */ createFluentIcon("PresenceBusy10Filled", "10", ["M10 5A5 5 0 1 1 0 5a5 5 0 0 1 10 0Z"]);
  var PresenceBusy12Filled = /* @__PURE__ */ createFluentIcon("PresenceBusy12Filled", "12", ["M12 6A6 6 0 1 1 0 6a6 6 0 0 1 12 0Z"]);
  var PresenceBusy16Filled = /* @__PURE__ */ createFluentIcon("PresenceBusy16Filled", "16", ["M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Z"]);
  var PresenceBusy20Filled = /* @__PURE__ */ createFluentIcon("PresenceBusy20Filled", "20", ["M20 10a10 10 0 1 1-20 0 10 10 0 0 1 20 0Z"]);
  var PresenceDnd10Filled = /* @__PURE__ */ createFluentIcon("PresenceDnd10Filled", "10", ["M5 10A5 5 0 1 0 5 0a5 5 0 0 0 0 10ZM3.5 4.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1Z"]);
  var PresenceDnd10Regular = /* @__PURE__ */ createFluentIcon("PresenceDnd10Regular", "10", ["M5 0a5 5 0 1 0 0 10A5 5 0 0 0 5 0ZM1 5a4 4 0 1 1 8 0 4 4 0 0 1-8 0Zm2 0c0-.28.22-.5.5-.5h3a.5.5 0 0 1 0 1h-3A.5.5 0 0 1 3 5Z"]);
  var PresenceDnd12Filled = /* @__PURE__ */ createFluentIcon("PresenceDnd12Filled", "12", ["M6 12A6 6 0 1 0 6 0a6 6 0 0 0 0 12ZM3.75 5.25h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5Z"]);
  var PresenceDnd12Regular = /* @__PURE__ */ createFluentIcon("PresenceDnd12Regular", "12", ["M6 0a6 6 0 1 0 0 12A6 6 0 0 0 6 0ZM1.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM3 6c0-.41.34-.75.75-.75h4.5a.75.75 0 0 1 0 1.5h-4.5A.75.75 0 0 1 3 6Z"]);
  var PresenceDnd16Filled = /* @__PURE__ */ createFluentIcon("PresenceDnd16Filled", "16", ["M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16ZM5.25 7h5.5a1 1 0 1 1 0 2h-5.5a1 1 0 1 1 0-2Z"]);
  var PresenceDnd16Regular = /* @__PURE__ */ createFluentIcon("PresenceDnd16Regular", "16", ["M5.25 7a1 1 0 0 0 0 2h5.5a1 1 0 1 0 0-2h-5.5ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6a6 6 0 1 0 0 12A6 6 0 0 0 8 2Z"]);
  var PresenceDnd20Filled = /* @__PURE__ */ createFluentIcon("PresenceDnd20Filled", "20", ["M10 20a10 10 0 1 0 0-20 10 10 0 0 0 0 20ZM7 9h6a1 1 0 1 1 0 2H7a1 1 0 1 1 0-2Z"]);
  var PresenceDnd20Regular = /* @__PURE__ */ createFluentIcon("PresenceDnd20Regular", "20", ["M10 0a10 10 0 1 0 0 20 10 10 0 0 0 0-20ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm4 0a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1Z"]);
  var PresenceOffline10Regular = /* @__PURE__ */ createFluentIcon("PresenceOffline10Regular", "10", ["M6.85 3.15c.2.2.2.5 0 .7L5.71 5l1.14 1.15a.5.5 0 1 1-.7.7L5 5.71 3.85 6.85a.5.5 0 1 1-.7-.7L4.29 5 3.15 3.85a.5.5 0 1 1 .7-.7L5 4.29l1.15-1.14c.2-.2.5-.2.7 0ZM0 5a5 5 0 1 1 10 0A5 5 0 0 1 0 5Zm5-4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Z"]);
  var PresenceOffline12Regular = /* @__PURE__ */ createFluentIcon("PresenceOffline12Regular", "12", ["M8.03 3.97c.3.3.3.77 0 1.06L7.06 6l.97.97a.75.75 0 0 1-1.06 1.06L6 7.06l-.97.97a.75.75 0 0 1-1.06-1.06L4.94 6l-.97-.97a.75.75 0 0 1 1.06-1.06l.97.97.97-.97c.3-.3.77-.3 1.06 0ZM0 6a6 6 0 1 1 12 0A6 6 0 0 1 0 6Zm6-4.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9Z"]);
  var PresenceOffline16Regular = /* @__PURE__ */ createFluentIcon("PresenceOffline16Regular", "16", ["M10.7 5.3a1 1 0 0 1 0 1.4L9.42 8l1.3 1.3a1 1 0 0 1-1.42 1.4L8 9.42l-1.3 1.3a1 1 0 0 1-1.4-1.42L6.58 8l-1.3-1.3a1 1 0 0 1 1.42-1.4L8 6.58l1.3-1.3a1 1 0 0 1 1.4 0ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6a6 6 0 1 0 0 12A6 6 0 0 0 8 2Z"]);
  var PresenceOffline20Regular = /* @__PURE__ */ createFluentIcon("PresenceOffline20Regular", "20", ["M13.7 6.3a1 1 0 0 1 0 1.4L11.42 10l2.3 2.3a1 1 0 0 1-1.42 1.4L10 11.42l-2.3 2.3a1 1 0 0 1-1.4-1.42L8.58 10l-2.3-2.3a1 1 0 0 1 1.42-1.4L10 8.58l2.3-2.3a1 1 0 0 1 1.4 0ZM0 10a10 10 0 1 1 20 0 10 10 0 0 1-20 0Zm10-8a8 8 0 1 0 0 16 8 8 0 0 0 0-16Z"]);
  var PresenceOof10Regular = /* @__PURE__ */ createFluentIcon("PresenceOof10Regular", "10", ["M5.35 3.85a.5.5 0 1 0-.7-.7l-1.5 1.5a.5.5 0 0 0 0 .7l1.5 1.5a.5.5 0 1 0 .7-.7L4.7 5.5h1.8a.5.5 0 1 0 0-1H4.7l.65-.65ZM5 0a5 5 0 1 0 0 10A5 5 0 0 0 5 0ZM1 5a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z"]);
  var PresenceOof12Regular = /* @__PURE__ */ createFluentIcon("PresenceOof12Regular", "12", ["M6.28 4.53a.75.75 0 0 0-1.06-1.06l-2 2c-.3.3-.3.77 0 1.06l2 2a.75.75 0 0 0 1.06-1.06l-.72-.72h2.69a.75.75 0 1 0 0-1.5h-2.7l.73-.72ZM6 0a6 6 0 1 0 0 12A6 6 0 0 0 6 0ZM1.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"]);
  var PresenceOof16Regular = /* @__PURE__ */ createFluentIcon("PresenceOof16Regular", "16", ["M8.2 6.2a1 1 0 1 0-1.4-1.4L4.3 7.3a1 1 0 0 0 0 1.4l2.5 2.5a1 1 0 0 0 1.4-1.4L7.42 9H11a1 1 0 1 0 0-2H7.41l.8-.8ZM8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM2 8a6 6 0 1 1 12 0A6 6 0 0 1 2 8Z"]);
  var PresenceOof20Regular = /* @__PURE__ */ createFluentIcon("PresenceOof20Regular", "20", ["M10.7 7.7A1 1 0 1 0 9.28 6.3l-3 3a1 1 0 0 0 0 1.41l3 3a1 1 0 1 0 1.42-1.41l-1.3-1.3H13a1 1 0 1 0 0-2H9.4l1.3-1.29ZM10 0a10 10 0 1 0 0 20 10 10 0 0 0 0-20ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Z"]);
  var PresenceUnknown10Regular = /* @__PURE__ */ createFluentIcon("PresenceUnknown10Regular", "10", ["M5 1a4 4 0 1 0 0 8 4 4 0 0 0 0-8ZM0 5a5 5 0 1 1 10 0A5 5 0 0 1 0 5Z"]);
  var PresenceUnknown12Regular = /* @__PURE__ */ createFluentIcon("PresenceUnknown12Regular", "12", ["M6 1.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9ZM0 6a6 6 0 1 1 12 0A6 6 0 0 1 0 6Z"]);
  var PresenceUnknown16Regular = /* @__PURE__ */ createFluentIcon("PresenceUnknown16Regular", "16", ["M8 2a6 6 0 1 0 0 12A6 6 0 0 0 8 2ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Z"]);
  var PresenceUnknown20Regular = /* @__PURE__ */ createFluentIcon("PresenceUnknown20Regular", "20", ["M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16ZM0 10a10 10 0 1 1 20 0 10 10 0 0 1-20 0Z"]);
  var PreviewLink16Regular = /* @__PURE__ */ createFluentIcon("PreviewLink16Regular", "16", ["M3 4.5c0-.28.22-.5.5-.5h9c.28 0 .5.22.5.5v2a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5v-2ZM4 5v1h8V5H4Zm5.5 3a.5.5 0 0 0-.5.5v3c0 .28.22.5.5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3Zm.5 3V9h2v2h-2ZM3 9c0-.28.22-.5.5-.5h4a.5.5 0 0 1 0 1h-4A.5.5 0 0 1 3 9Zm.5 1.5a.5.5 0 0 0 0 1h4a.5.5 0 1 0 0-1h-4ZM1 4.5A2.5 2.5 0 0 1 3.5 2h9A2.5 2.5 0 0 1 15 4.5v7a2.5 2.5 0 0 1-2.5 2.5h-9A2.5 2.5 0 0 1 1 11.5v-7ZM3.5 3C2.67 3 2 3.67 2 4.5v7c0 .83.67 1.5 1.5 1.5h9c.83 0 1.5-.67 1.5-1.5v-7c0-.83-.67-1.5-1.5-1.5h-9Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-10.js
  var Search24Regular = /* @__PURE__ */ createFluentIcon("Search24Regular", "24", ["M10 2.75a7.25 7.25 0 0 1 5.63 11.82l4.9 4.9a.75.75 0 0 1-.98 1.13l-.08-.07-4.9-4.9A7.25 7.25 0 1 1 10 2.75Zm0 1.5a5.75 5.75 0 1 0 0 11.5 5.75 5.75 0 0 0 0-11.5Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-11.js
  var Square12Filled = /* @__PURE__ */ createFluentIcon("Square12Filled", "12", ["M2 4c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4Z"]);
  var Square16Filled = /* @__PURE__ */ createFluentIcon("Square16Filled", "16", ["M2 4.5A2.5 2.5 0 0 1 4.5 2h7A2.5 2.5 0 0 1 14 4.5v7a2.5 2.5 0 0 1-2.5 2.5h-7A2.5 2.5 0 0 1 2 11.5v-7Z"]);
  var SubtractCircle16Regular = /* @__PURE__ */ createFluentIcon("SubtractCircle16Regular", "16", ["M5.5 7.5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5ZM8 2a6 6 0 1 0 0 12A6 6 0 0 0 8 2ZM3 8a5 5 0 1 1 10 0A5 5 0 0 1 3 8Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-12.js
  var Tag24Regular = /* @__PURE__ */ createFluentIcon("Tag24Regular", "24", ["M19.75 2C20.99 2 22 3 22 4.25v5.46c0 .86-.34 1.69-.95 2.3l-8.5 8.5a3.25 3.25 0 0 1-4.6 0L3.5 16.06a3.25 3.25 0 0 1 0-4.6l8.5-8.5a3.25 3.25 0 0 1 2.3-.96h5.46Zm0 1.5h-5.47c-.46 0-.9.18-1.23.51l-8.52 8.53c-.67.68-.66 1.78.02 2.46L9 19.45c.68.68 1.8.68 2.48 0l8.5-8.5c.33-.33.51-.77.51-1.24V4.25a.75.75 0 0 0-.75-.75ZM17 5.5a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-13.js
  var TextT24Regular = /* @__PURE__ */ createFluentIcon("TextT24Regular", "24", ["M5 4.75c0-.41.34-.75.75-.75h12.5c.41 0 .75.34.75.75v2a.75.75 0 0 1-1.5 0V5.5h-4.75v13h1.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5h1.5v-13H6.5v1.25a.75.75 0 0 1-1.5 0v-2Z"]);

  // ../node_modules/@fluentui/react-icons/lib/utils/bundleIcon.js
  var React31 = __toESM(require_react());

  // ../node_modules/@fluentui/react-icons/lib/utils/constants.js
  var iconFilledClassName = "fui-Icon-filled";
  var iconRegularClassName = "fui-Icon-regular";

  // ../node_modules/@fluentui/react-icons/lib/utils/bundleIcon.js
  var useBundledIconStyles = __styles2({
    "root": {
      "mc9l5x": "fjseox"
    },
    "visible": {
      "mc9l5x": "f1w7gpdv"
    }
  }, {
    "d": [".fjseox{display:none;}", ".f1w7gpdv{display:inline;}"]
  });
  var bundleIcon = (FilledIcon, RegularIcon) => {
    const Component18 = (props) => {
      const {
        className,
        primaryFill = "currentColor",
        filled,
        ...rest
      } = props;
      const styles4 = useBundledIconStyles();
      return React31.createElement(React31.Fragment, null, React31.createElement(FilledIcon, Object.assign({}, rest, {
        className: mergeClasses(styles4.root, filled && styles4.visible, iconFilledClassName, className),
        fill: primaryFill
      })), React31.createElement(RegularIcon, Object.assign({}, rest, {
        className: mergeClasses(styles4.root, !filled && styles4.visible, iconRegularClassName, className),
        fill: primaryFill
      })));
    };
    Component18.displayName = "CompoundIcon";
    return Component18;
  };
  var bundleIcon_default = bundleIcon;

  // ../node_modules/@fluentui/react-icons/lib/contexts/IconDirectionContext.js
  var React32 = __toESM(require_react());
  var IconDirectionContext = React32.createContext(void 0);
  var IconDirectionContextProvider = IconDirectionContext.Provider;

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/renderFluentProvider.js
  var renderFluentProvider_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(Provider, {
      value: contextValues.provider,
      children: /* @__PURE__ */ jsx(ThemeProvider, {
        value: contextValues.theme,
        children: /* @__PURE__ */ jsx(ThemeClassNameProvider, {
          value: contextValues.themeClassName,
          children: /* @__PURE__ */ jsx(CustomStyleHooksProvider, {
            value: contextValues.customStyleHooks_unstable,
            children: /* @__PURE__ */ jsx(TooltipVisibilityProvider, {
              value: contextValues.tooltip,
              children: /* @__PURE__ */ jsx(TextDirectionProvider, {
                dir: contextValues.textDirection,
                children: /* @__PURE__ */ jsx(IconDirectionContextProvider, {
                  value: contextValues.iconDirection,
                  children: /* @__PURE__ */ jsx(OverridesProvider, {
                    value: contextValues.overrides_unstable,
                    children: /* @__PURE__ */ jsxs(state.root, {
                      children: [
                        canUseDOM2() ? null : /* @__PURE__ */ jsx("style", {
                          // Using dangerous HTML because react can escape characters
                          // which can lead to invalid CSS.
                          // eslint-disable-next-line react/no-danger
                          dangerouslySetInnerHTML: {
                            __html: state.serverStyleProps.cssRule
                          },
                          ...state.serverStyleProps.attributes
                        }),
                        state.root.children
                      ]
                    })
                  })
                })
              })
            })
          })
        })
      })
    });
  };

  // ../node_modules/keyborg/dist/keyborg.esm.js
  var _canUseWeakRef = typeof WeakRef !== "undefined";
  var WeakRefInstance = class {
    constructor(instance) {
      if (_canUseWeakRef && typeof instance === "object") {
        this._weakRef = new WeakRef(instance);
      } else {
        this._instance = instance;
      }
    }
    /**
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/deref}
     */
    deref() {
      var _a5, _b, _c;
      let instance;
      if (this._weakRef) {
        instance = (_a5 = this._weakRef) === null || _a5 === void 0 ? void 0 : _a5.deref();
        if (!instance) {
          delete this._weakRef;
        }
      } else {
        instance = this._instance;
        if ((_c = (_b = instance) === null || _b === void 0 ? void 0 : _b.isDisposed) === null || _c === void 0 ? void 0 : _c.call(_b)) {
          delete this._instance;
        }
      }
      return instance;
    }
  };
  var KEYBORG_FOCUSIN = "keyborg:focusin";
  function canOverrideNativeFocus(win2) {
    const HTMLElement2 = win2.HTMLElement;
    const origFocus = HTMLElement2.prototype.focus;
    let isCustomFocusCalled = false;
    HTMLElement2.prototype.focus = function focus() {
      isCustomFocusCalled = true;
    };
    const btn = win2.document.createElement("button");
    btn.focus();
    HTMLElement2.prototype.focus = origFocus;
    return isCustomFocusCalled;
  }
  var _canOverrideNativeFocus = false;
  function nativeFocus(element2) {
    const focus = element2.focus;
    if (focus.__keyborgNativeFocus) {
      focus.__keyborgNativeFocus.call(element2);
    } else {
      element2.focus();
    }
  }
  function setupFocusEvent(win2) {
    const kwin = win2;
    if (!_canOverrideNativeFocus) {
      _canOverrideNativeFocus = canOverrideNativeFocus(kwin);
    }
    const origFocus = kwin.HTMLElement.prototype.focus;
    if (origFocus.__keyborgNativeFocus) {
      return;
    }
    kwin.HTMLElement.prototype.focus = focus;
    const data = kwin.__keyborgData = {
      focusInHandler: (e3) => {
        var _a5;
        const target = e3.target;
        if (!target) {
          return;
        }
        const event = document.createEvent("HTMLEvents");
        event.initEvent(KEYBORG_FOCUSIN, true, true);
        const details = {
          relatedTarget: e3.relatedTarget || void 0
        };
        if (_canOverrideNativeFocus || data.lastFocusedProgrammatically) {
          details.isFocusedProgrammatically = target === ((_a5 = data.lastFocusedProgrammatically) === null || _a5 === void 0 ? void 0 : _a5.deref());
          data.lastFocusedProgrammatically = void 0;
        }
        event.details = details;
        target.dispatchEvent(event);
      }
    };
    kwin.document.addEventListener("focusin", kwin.__keyborgData.focusInHandler, true);
    function focus() {
      const keyborgNativeFocusEvent = kwin.__keyborgData;
      if (keyborgNativeFocusEvent) {
        keyborgNativeFocusEvent.lastFocusedProgrammatically = new WeakRefInstance(this);
      }
      return origFocus.apply(this, arguments);
    }
    focus.__keyborgNativeFocus = origFocus;
  }
  function disposeFocusEvent(win2) {
    const kwin = win2;
    const proto = kwin.HTMLElement.prototype;
    const origFocus = proto.focus.__keyborgNativeFocus;
    const keyborgNativeFocusEvent = kwin.__keyborgData;
    if (keyborgNativeFocusEvent) {
      kwin.document.removeEventListener("focusin", keyborgNativeFocusEvent.focusInHandler, true);
      delete kwin.__keyborgData;
    }
    if (origFocus) {
      proto.focus = origFocus;
    }
  }
  var _dismissTimeout = 500;
  var _lastId = 0;
  var KeyborgState = class {
    constructor() {
      this.__keyborgCoreRefs = {};
      this._isNavigatingWithKeyboard = false;
    }
    add(keyborg) {
      const id = keyborg.id;
      if (!(id in this.__keyborgCoreRefs)) {
        this.__keyborgCoreRefs[id] = new WeakRefInstance(keyborg);
      }
    }
    remove(id) {
      delete this.__keyborgCoreRefs[id];
      if (Object.keys(this.__keyborgCoreRefs).length === 0) {
        this._isNavigatingWithKeyboard = false;
      }
    }
    setVal(isNavigatingWithKeyboard) {
      if (this._isNavigatingWithKeyboard === isNavigatingWithKeyboard) {
        return;
      }
      this._isNavigatingWithKeyboard = isNavigatingWithKeyboard;
      for (const id of Object.keys(this.__keyborgCoreRefs)) {
        const ref = this.__keyborgCoreRefs[id];
        const keyborg = ref.deref();
        if (keyborg) {
          keyborg.update(isNavigatingWithKeyboard);
        } else {
          this.remove(id);
        }
      }
    }
    getVal() {
      return this._isNavigatingWithKeyboard;
    }
  };
  var _state = /* @__PURE__ */ new KeyborgState();
  var KeyborgCore = class {
    constructor(win2, props) {
      this._isMouseUsed = false;
      this._onFocusIn = (e3) => {
        if (this._isMouseUsed) {
          this._isMouseUsed = false;
          return;
        }
        if (_state.getVal()) {
          return;
        }
        const details = e3.details;
        if (!details.relatedTarget) {
          return;
        }
        if (details.isFocusedProgrammatically || details.isFocusedProgrammatically === void 0) {
          return;
        }
        _state.setVal(true);
      };
      this._onMouseDown = (e3) => {
        if (e3.buttons === 0 || e3.clientX === 0 && e3.clientY === 0 && e3.screenX === 0 && e3.screenY === 0) {
          return;
        }
        this._isMouseUsed = true;
        _state.setVal(false);
      };
      this._onKeyDown = (e3) => {
        var _a5;
        const isNavigatingWithKeyboard = _state.getVal();
        const keyCode = e3.keyCode;
        const triggerKeys = this._triggerKeys;
        if (!isNavigatingWithKeyboard && (!triggerKeys || triggerKeys.has(keyCode))) {
          _state.setVal(true);
        } else if (isNavigatingWithKeyboard && ((_a5 = this._dismissKeys) === null || _a5 === void 0 ? void 0 : _a5.has(keyCode))) {
          this._scheduleDismiss();
        }
      };
      this.id = "c" + ++_lastId;
      this._win = win2;
      const doc = win2.document;
      if (props) {
        const triggerKeys = props.triggerKeys;
        const dismissKeys = props.dismissKeys;
        if (triggerKeys === null || triggerKeys === void 0 ? void 0 : triggerKeys.length) {
          this._triggerKeys = new Set(triggerKeys);
        }
        if (dismissKeys === null || dismissKeys === void 0 ? void 0 : dismissKeys.length) {
          this._dismissKeys = new Set(dismissKeys);
        }
      }
      doc.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
      doc.addEventListener("mousedown", this._onMouseDown, true);
      win2.addEventListener("keydown", this._onKeyDown, true);
      setupFocusEvent(win2);
      _state.add(this);
    }
    dispose() {
      const win2 = this._win;
      if (win2) {
        if (this._dismissTimer) {
          win2.clearTimeout(this._dismissTimer);
          this._dismissTimer = void 0;
        }
        disposeFocusEvent(win2);
        const doc = win2.document;
        doc.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
        doc.removeEventListener("mousedown", this._onMouseDown, true);
        win2.removeEventListener("keydown", this._onKeyDown, true);
        delete this._win;
        _state.remove(this.id);
      }
    }
    isDisposed() {
      return !!this._win;
    }
    /**
     * Updates all keyborg instances with the keyboard navigation state
     */
    update(isNavigatingWithKeyboard) {
      var _a5, _b;
      const keyborgs = (_b = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.__keyborg) === null || _b === void 0 ? void 0 : _b.refs;
      if (keyborgs) {
        for (const id of Object.keys(keyborgs)) {
          Keyborg.update(keyborgs[id], isNavigatingWithKeyboard);
        }
      }
    }
    _scheduleDismiss() {
      const win2 = this._win;
      if (win2) {
        if (this._dismissTimer) {
          win2.clearTimeout(this._dismissTimer);
          this._dismissTimer = void 0;
        }
        const was = win2.document.activeElement;
        this._dismissTimer = win2.setTimeout(() => {
          this._dismissTimer = void 0;
          const cur = win2.document.activeElement;
          if (was && cur && was === cur) {
            _state.setVal(false);
          }
        }, _dismissTimeout);
      }
    }
  };
  var Keyborg = class _Keyborg {
    constructor(win2, props) {
      this._cb = [];
      this._id = "k" + ++_lastId;
      this._win = win2;
      const current = win2.__keyborg;
      if (current) {
        this._core = current.core;
        current.refs[this._id] = this;
      } else {
        this._core = new KeyborgCore(win2, props);
        win2.__keyborg = {
          core: this._core,
          refs: {
            [this._id]: this
          }
        };
      }
    }
    static create(win2, props) {
      return new _Keyborg(win2, props);
    }
    static dispose(instance) {
      instance.dispose();
    }
    /**
     * Updates all subscribed callbacks with the keyboard navigation state
     */
    static update(instance, isNavigatingWithKeyboard) {
      instance._cb.forEach((callback) => callback(isNavigatingWithKeyboard));
    }
    dispose() {
      var _a5;
      const current = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.__keyborg;
      if (current === null || current === void 0 ? void 0 : current.refs[this._id]) {
        delete current.refs[this._id];
        if (Object.keys(current.refs).length === 0) {
          current.core.dispose();
          delete this._win.__keyborg;
        }
      } else if (true) {
        console.error("Keyborg instance " + this._id + " is being disposed incorrectly.");
      }
      this._cb = [];
      delete this._core;
      delete this._win;
    }
    /**
     * @returns Whether the user is navigating with keyboard
     */
    isNavigatingWithKeyboard() {
      return _state.getVal();
    }
    /**
     * @param callback - Called when the keyboard navigation state changes
     */
    subscribe(callback) {
      this._cb.push(callback);
    }
    /**
     * @param callback - Registered with subscribe
     */
    unsubscribe(callback) {
      const index2 = this._cb.indexOf(callback);
      if (index2 >= 0) {
        this._cb.splice(index2, 1);
      }
    }
    /**
     * Manually set the keyboard navigtion state
     */
    setVal(isNavigatingWithKeyboard) {
      _state.setVal(isNavigatingWithKeyboard);
    }
  };
  function createKeyborg(win2, props) {
    return Keyborg.create(win2, props);
  }
  function disposeKeyborg(instance) {
    Keyborg.dispose(instance);
  }

  // ../node_modules/tabster/dist/tabster.esm.js
  var TabsterAttributeName = "data-tabster";
  var TabsterDummyInputAttributeName = "data-tabster-dummy";
  var DeloserEventName = "tabster:deloser";
  var ModalizerActiveEventName = "tabster:modalizer:active";
  var ModalizerInactiveEventName = "tabster:modalizer:inactive";
  var ModalizerFocusInEventName = "tabster:modalizer:focusin";
  var ModalizerFocusOutEventName = "tabster:modalizer:focusout";
  var ModalizerBeforeFocusOutEventName = "tabster:modalizer:beforefocusout";
  var MoverEventName = "tabster:mover";
  var FocusInEventName = "tabster:focusin";
  var FocusOutEventName = "tabster:focusout";
  var ObservedElementAccesibilities = {
    Any: 0,
    Accessible: 1,
    Focusable: 2
  };
  var RestoreFocusOrders = {
    History: 0,
    DeloserDefault: 1,
    RootDefault: 2,
    DeloserFirst: 3,
    RootFirst: 4
  };
  var Visibilities = {
    Invisible: 0,
    PartiallyVisible: 1,
    Visible: 2
  };
  var RestorerTypes = {
    Source: 0,
    Target: 1
  };
  var MoverDirections = {
    Both: 0,
    Vertical: 1,
    Horizontal: 2,
    Grid: 3,
    GridLinear: 4
  };
  var GroupperTabbabilities = {
    Unlimited: 0,
    Limited: 1,
    LimitedTrapFocus: 2
  };
  var SysDummyInputsPositions = {
    Auto: 0,
    Inside: 1,
    Outside: 2
  };
  var Types = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    TabsterAttributeName,
    TabsterDummyInputAttributeName,
    DeloserEventName,
    ModalizerActiveEventName,
    ModalizerInactiveEventName,
    ModalizerFocusInEventName,
    ModalizerFocusOutEventName,
    ModalizerBeforeFocusOutEventName,
    MoverEventName,
    FocusInEventName,
    FocusOutEventName,
    ObservedElementAccesibilities,
    RestoreFocusOrders,
    Visibilities,
    RestorerTypes,
    MoverDirections,
    GroupperTabbabilities,
    SysDummyInputsPositions
  });
  function getTabsterOnElement(tabster, element2) {
    var _a5;
    return (_a5 = tabster.storageEntry(element2)) === null || _a5 === void 0 ? void 0 : _a5.tabster;
  }
  function updateTabsterByAttribute(tabster, element2, dispose) {
    var _a5, _b;
    const newAttrValue = dispose || tabster._noop ? void 0 : element2.getAttribute(TabsterAttributeName);
    let entry = tabster.storageEntry(element2);
    let newAttr;
    if (newAttrValue) {
      if (newAttrValue !== ((_a5 = entry === null || entry === void 0 ? void 0 : entry.attr) === null || _a5 === void 0 ? void 0 : _a5.string)) {
        try {
          const newValue = JSON.parse(newAttrValue);
          if (typeof newValue !== "object") {
            throw new Error(`Value is not a JSON object, got '${newAttrValue}'.`);
          }
          newAttr = {
            string: newAttrValue,
            object: newValue
          };
        } catch (e3) {
          if (true) {
            console.error(`data-tabster attribute error: ${e3}`, element2);
          }
        }
      } else {
        return;
      }
    } else if (!entry) {
      return;
    }
    if (!entry) {
      entry = tabster.storageEntry(element2, true);
    }
    if (!entry.tabster) {
      entry.tabster = {};
    }
    const tabsterOnElement = entry.tabster || {};
    const oldTabsterProps = ((_b = entry.attr) === null || _b === void 0 ? void 0 : _b.object) || {};
    const newTabsterProps = (newAttr === null || newAttr === void 0 ? void 0 : newAttr.object) || {};
    for (const key of Object.keys(oldTabsterProps)) {
      if (!newTabsterProps[key]) {
        if (key === "root") {
          const root3 = tabsterOnElement[key];
          if (root3) {
            tabster.root.onRoot(root3, true);
          }
        }
        switch (key) {
          case "deloser":
          case "root":
          case "groupper":
          case "modalizer":
          case "restorer":
          case "mover":
            const part = tabsterOnElement[key];
            if (part) {
              part.dispose();
              delete tabsterOnElement[key];
            }
            break;
          case "observed":
            delete tabsterOnElement[key];
            if (tabster.observedElement) {
              tabster.observedElement.onObservedElementUpdate(element2);
            }
            break;
          case "focusable":
          case "outline":
          case "uncontrolled":
          case "sys":
            delete tabsterOnElement[key];
            break;
        }
      }
    }
    for (const key of Object.keys(newTabsterProps)) {
      const sys = newTabsterProps.sys;
      switch (key) {
        case "deloser":
          if (tabsterOnElement.deloser) {
            tabsterOnElement.deloser.setProps(newTabsterProps.deloser);
          } else {
            if (tabster.deloser) {
              tabsterOnElement.deloser = tabster.deloser.createDeloser(element2, newTabsterProps.deloser);
            } else if (true) {
              console.error("Deloser API used before initialization, please call `getDeloser()`");
            }
          }
          break;
        case "root":
          if (tabsterOnElement.root) {
            tabsterOnElement.root.setProps(newTabsterProps.root);
          } else {
            tabsterOnElement.root = tabster.root.createRoot(element2, newTabsterProps.root, sys);
          }
          tabster.root.onRoot(tabsterOnElement.root);
          break;
        case "modalizer":
          if (tabsterOnElement.modalizer) {
            tabsterOnElement.modalizer.setProps(newTabsterProps.modalizer);
          } else {
            if (tabster.modalizer) {
              tabsterOnElement.modalizer = tabster.modalizer.createModalizer(element2, newTabsterProps.modalizer, sys);
            } else if (true) {
              console.error("Modalizer API used before initialization, please call `getModalizer()`");
            }
          }
          break;
        case "restorer":
          if (tabsterOnElement.restorer) {
            tabsterOnElement.restorer.setProps(newTabsterProps.restorer);
          } else {
            if (tabster.restorer) {
              if (newTabsterProps.restorer) {
                tabsterOnElement.restorer = tabster.restorer.createRestorer(element2, newTabsterProps.restorer);
              }
            } else if (true) {
              console.error("Restorer API used before initialization, please call `getRestorer()`");
            }
          }
          break;
        case "focusable":
          tabsterOnElement.focusable = newTabsterProps.focusable;
          break;
        case "groupper":
          if (tabsterOnElement.groupper) {
            tabsterOnElement.groupper.setProps(newTabsterProps.groupper);
          } else {
            if (tabster.groupper) {
              tabsterOnElement.groupper = tabster.groupper.createGroupper(element2, newTabsterProps.groupper, sys);
            } else if (true) {
              console.error("Groupper API used before initialization, please call `getGroupper()`");
            }
          }
          break;
        case "mover":
          if (tabsterOnElement.mover) {
            tabsterOnElement.mover.setProps(newTabsterProps.mover);
          } else {
            if (tabster.mover) {
              tabsterOnElement.mover = tabster.mover.createMover(element2, newTabsterProps.mover, sys);
            } else if (true) {
              console.error("Mover API used before initialization, please call `getMover()`");
            }
          }
          break;
        case "observed":
          if (tabster.observedElement) {
            tabsterOnElement.observed = newTabsterProps.observed;
            tabster.observedElement.onObservedElementUpdate(element2);
          } else if (true) {
            console.error("ObservedElement API used before initialization, please call `getObservedElement()`");
          }
          break;
        case "uncontrolled":
          tabsterOnElement.uncontrolled = newTabsterProps.uncontrolled;
          break;
        case "outline":
          if (tabster.outline) {
            tabsterOnElement.outline = newTabsterProps.outline;
          } else if (true) {
            console.error("Outline API used before initialization, please call `getOutline()`");
          }
          break;
        case "sys":
          tabsterOnElement.sys = newTabsterProps.sys;
          break;
        default:
          console.error(`Unknown key '${key}' in data-tabster attribute value.`);
      }
    }
    if (newAttr) {
      entry.attr = newAttr;
    } else {
      if (Object.keys(tabsterOnElement).length === 0) {
        delete entry.tabster;
        delete entry.attr;
      }
      tabster.storageEntry(element2, false);
    }
  }
  function createEventTarget(getWindow3) {
    const global3 = getWindow3();
    try {
      if (global3.EventTarget) {
        return new global3.EventTarget();
      }
    } catch (error) {
      if (!(error instanceof TypeError)) {
        throw error;
      }
    }
    return global3.document.createElement("div");
  }
  var _isBrokenIE11;
  var _DOMRect = typeof DOMRect !== "undefined" ? DOMRect : class {
    constructor(x2, y3, width, height) {
      this.left = x2 || 0;
      this.top = y3 || 0;
      this.right = (x2 || 0) + (width || 0);
      this.bottom = (y3 || 0) + (height || 0);
    }
  };
  var _uidCounter = 0;
  try {
    document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT);
    _isBrokenIE11 = false;
  } catch (e3) {
    _isBrokenIE11 = true;
  }
  var _updateDummyInputsTimeout = 100;
  function getInstanceContext(getWindow3) {
    const win2 = getWindow3();
    let ctx = win2.__tabsterInstanceContext;
    if (!ctx) {
      ctx = {
        elementByUId: {},
        basics: {
          Promise: win2.Promise || void 0,
          WeakRef: win2.WeakRef || void 0
        },
        containerBoundingRectCache: {},
        lastContainerBoundingRectCacheId: 0,
        fakeWeakRefs: [],
        fakeWeakRefsStarted: false
      };
      win2.__tabsterInstanceContext = ctx;
    }
    return ctx;
  }
  function disposeInstanceContext(win2) {
    const ctx = win2.__tabsterInstanceContext;
    if (ctx) {
      ctx.elementByUId = {};
      delete ctx.WeakRef;
      ctx.containerBoundingRectCache = {};
      if (ctx.containerBoundingRectCacheTimer) {
        win2.clearTimeout(ctx.containerBoundingRectCacheTimer);
      }
      if (ctx.fakeWeakRefsTimer) {
        win2.clearTimeout(ctx.fakeWeakRefsTimer);
      }
      ctx.fakeWeakRefs = [];
      delete win2.__tabsterInstanceContext;
    }
  }
  function createWeakMap(win2) {
    const ctx = win2.__tabsterInstanceContext;
    return new ((ctx === null || ctx === void 0 ? void 0 : ctx.basics.WeakMap) || WeakMap)();
  }
  var FakeWeakRef = class {
    constructor(target) {
      this._target = target;
    }
    deref() {
      return this._target;
    }
    static cleanup(fwr, forceRemove) {
      if (!fwr._target) {
        return true;
      }
      if (forceRemove || !documentContains(fwr._target.ownerDocument, fwr._target)) {
        delete fwr._target;
        return true;
      }
      return false;
    }
  };
  var WeakHTMLElement = class {
    constructor(getWindow3, element2, data) {
      const context = getInstanceContext(getWindow3);
      let ref;
      if (context.WeakRef) {
        ref = new context.WeakRef(element2);
      } else {
        ref = new FakeWeakRef(element2);
        context.fakeWeakRefs.push(ref);
      }
      this._ref = ref;
      this._data = data;
    }
    get() {
      const ref = this._ref;
      let element2;
      if (ref) {
        element2 = ref.deref();
        if (!element2) {
          delete this._ref;
        }
      }
      return element2;
    }
    getData() {
      return this._data;
    }
  };
  function cleanupFakeWeakRefs(getWindow3, forceRemove) {
    const context = getInstanceContext(getWindow3);
    context.fakeWeakRefs = context.fakeWeakRefs.filter((e3) => !FakeWeakRef.cleanup(e3, forceRemove));
  }
  function startFakeWeakRefsCleanup(getWindow3) {
    const context = getInstanceContext(getWindow3);
    if (!context.fakeWeakRefsStarted) {
      context.fakeWeakRefsStarted = true;
      context.WeakRef = getWeakRef(context);
    }
    if (!context.fakeWeakRefsTimer) {
      context.fakeWeakRefsTimer = getWindow3().setTimeout(() => {
        context.fakeWeakRefsTimer = void 0;
        cleanupFakeWeakRefs(getWindow3);
        startFakeWeakRefsCleanup(getWindow3);
      }, 2 * 60 * 1e3);
    }
  }
  function stopFakeWeakRefsCleanupAndClearStorage(getWindow3) {
    const context = getInstanceContext(getWindow3);
    context.fakeWeakRefsStarted = false;
    if (context.fakeWeakRefsTimer) {
      getWindow3().clearTimeout(context.fakeWeakRefsTimer);
      context.fakeWeakRefsTimer = void 0;
      context.fakeWeakRefs = [];
    }
  }
  function createElementTreeWalker(doc, root3, acceptNode) {
    if (root3.nodeType !== Node.ELEMENT_NODE) {
      return void 0;
    }
    const filter3 = _isBrokenIE11 ? acceptNode : {
      acceptNode
    };
    return doc.createTreeWalker(
      root3,
      NodeFilter.SHOW_ELEMENT,
      filter3,
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore: We still don't want to completely break IE11, so, entityReferenceExpansion argument is not optional.
      false
      /* Last argument is not optional for IE11! */
    );
  }
  function getBoundingRect(getWindow3, element2) {
    let cacheId = element2.__tabsterCacheId;
    const context = getInstanceContext(getWindow3);
    const cached = cacheId ? context.containerBoundingRectCache[cacheId] : void 0;
    if (cached) {
      return cached.rect;
    }
    const scrollingElement = element2.ownerDocument && element2.ownerDocument.documentElement;
    if (!scrollingElement) {
      return new _DOMRect();
    }
    let left = 0;
    let top = 0;
    let right = scrollingElement.clientWidth;
    let bottom = scrollingElement.clientHeight;
    if (element2 !== scrollingElement) {
      const r3 = element2.getBoundingClientRect();
      left = Math.max(left, r3.left);
      top = Math.max(top, r3.top);
      right = Math.min(right, r3.right);
      bottom = Math.min(bottom, r3.bottom);
    }
    const rect = new _DOMRect(left < right ? left : -1, top < bottom ? top : -1, left < right ? right - left : 0, top < bottom ? bottom - top : 0);
    if (!cacheId) {
      cacheId = "r-" + ++context.lastContainerBoundingRectCacheId;
      element2.__tabsterCacheId = cacheId;
    }
    context.containerBoundingRectCache[cacheId] = {
      rect,
      element: element2
    };
    if (!context.containerBoundingRectCacheTimer) {
      context.containerBoundingRectCacheTimer = window.setTimeout(() => {
        context.containerBoundingRectCacheTimer = void 0;
        for (const cId of Object.keys(context.containerBoundingRectCache)) {
          delete context.containerBoundingRectCache[cId].element.__tabsterCacheId;
        }
        context.containerBoundingRectCache = {};
      }, 50);
    }
    return rect;
  }
  function isElementVerticallyVisibleInContainer(getWindow3, element2, tolerance) {
    const container = getScrollableContainer(element2);
    if (!container) {
      return false;
    }
    const containerRect = getBoundingRect(getWindow3, container);
    const elementRect = element2.getBoundingClientRect();
    const intersectionTolerance = elementRect.height * (1 - tolerance);
    const topIntersection = Math.max(0, containerRect.top - elementRect.top);
    const bottomIntersection = Math.max(0, elementRect.bottom - containerRect.bottom);
    const totalIntersection = topIntersection + bottomIntersection;
    return totalIntersection === 0 || totalIntersection <= intersectionTolerance;
  }
  function scrollIntoView(getWindow3, element2, alignToTop) {
    const container = getScrollableContainer(element2);
    if (container) {
      const containerRect = getBoundingRect(getWindow3, container);
      const elementRect = element2.getBoundingClientRect();
      if (alignToTop) {
        container.scrollTop += elementRect.top - containerRect.top;
      } else {
        container.scrollTop += elementRect.bottom - containerRect.bottom;
      }
    }
  }
  function getScrollableContainer(element2) {
    const doc = element2.ownerDocument;
    if (doc) {
      for (let el = element2.parentElement; el; el = el.parentElement) {
        if (el.scrollWidth > el.clientWidth || el.scrollHeight > el.clientHeight) {
          return el;
        }
      }
      return doc.documentElement;
    }
    return null;
  }
  function makeFocusIgnored(element2) {
    element2.__shouldIgnoreFocus = true;
  }
  function shouldIgnoreFocus(element2) {
    return !!element2.__shouldIgnoreFocus;
  }
  function getUId(wnd) {
    const rnd = new Uint32Array(4);
    if (wnd.crypto && wnd.crypto.getRandomValues) {
      wnd.crypto.getRandomValues(rnd);
    } else if (wnd.msCrypto && wnd.msCrypto.getRandomValues) {
      wnd.msCrypto.getRandomValues(rnd);
    } else {
      for (let i4 = 0; i4 < rnd.length; i4++) {
        rnd[i4] = 4294967295 * Math.random();
      }
    }
    const srnd = [];
    for (let i4 = 0; i4 < rnd.length; i4++) {
      srnd.push(rnd[i4].toString(36));
    }
    srnd.push("|");
    srnd.push((++_uidCounter).toString(36));
    srnd.push("|");
    srnd.push(Date.now().toString(36));
    return srnd.join("");
  }
  function getElementUId(getWindow3, element2) {
    const context = getInstanceContext(getWindow3);
    let uid = element2.__tabsterElementUID;
    if (!uid) {
      uid = element2.__tabsterElementUID = getUId(getWindow3());
    }
    if (!context.elementByUId[uid] && documentContains(element2.ownerDocument, element2)) {
      context.elementByUId[uid] = new WeakHTMLElement(getWindow3, element2);
    }
    return uid;
  }
  function clearElementCache(getWindow3, parent3) {
    const context = getInstanceContext(getWindow3);
    for (const key of Object.keys(context.elementByUId)) {
      const wel = context.elementByUId[key];
      const el = wel && wel.get();
      if (el && parent3) {
        if (!parent3.contains(el)) {
          continue;
        }
      }
      delete context.elementByUId[key];
    }
  }
  function documentContains(doc, element2) {
    var _a5;
    return !!((_a5 = doc === null || doc === void 0 ? void 0 : doc.body) === null || _a5 === void 0 ? void 0 : _a5.contains(element2));
  }
  function matchesSelector(element2, selector) {
    const matches = element2.matches || element2.matchesSelector || element2.msMatchesSelector || element2.webkitMatchesSelector;
    return matches && matches.call(element2, selector);
  }
  function getPromise(getWindow3) {
    const context = getInstanceContext(getWindow3);
    if (context.basics.Promise) {
      return context.basics.Promise;
    }
    throw new Error("No Promise defined.");
  }
  function getWeakRef(context) {
    return context.basics.WeakRef;
  }
  var _lastTabsterPartId = 0;
  var TabsterPart = class {
    constructor(tabster, element2, props) {
      const getWindow3 = tabster.getWindow;
      this._tabster = tabster;
      this._element = new WeakHTMLElement(getWindow3, element2);
      this._props = {
        ...props
      };
      this.id = "i" + ++_lastTabsterPartId;
    }
    getElement() {
      return this._element.get();
    }
    getProps() {
      return this._props;
    }
    setProps(props) {
      this._props = {
        ...props
      };
    }
  };
  var DummyInput = class {
    constructor(getWindow3, isOutside, props, element2) {
      var _a5;
      this._focusIn = (e3) => {
        const input2 = this.input;
        if (this.onFocusIn && input2) {
          const relatedTarget = DummyInputManager.getLastPhantomFrom() || e3.relatedTarget;
          this.onFocusIn(this, this._isBackward(true, input2, relatedTarget), relatedTarget);
        }
      };
      this._focusOut = (e3) => {
        this.useDefaultAction = false;
        const input2 = this.input;
        if (this.onFocusOut && input2) {
          const relatedTarget = e3.relatedTarget;
          this.onFocusOut(this, this._isBackward(false, input2, relatedTarget), relatedTarget);
        }
      };
      const win2 = getWindow3();
      const input = win2.document.createElement("i");
      input.tabIndex = 0;
      input.setAttribute("role", "none");
      input.setAttribute(TabsterDummyInputAttributeName, "");
      input.setAttribute("aria-hidden", "true");
      const style = input.style;
      style.position = "fixed";
      style.width = style.height = "1px";
      style.opacity = "0.001";
      style.zIndex = "-1";
      style.setProperty("content-visibility", "hidden");
      makeFocusIgnored(input);
      this.input = input;
      this.isFirst = props.isFirst;
      this.isOutside = isOutside;
      this._isPhantom = (_a5 = props.isPhantom) !== null && _a5 !== void 0 ? _a5 : false;
      input.addEventListener("focusin", this._focusIn);
      input.addEventListener("focusout", this._focusOut);
      input.__tabsterDummyContainer = element2;
      if (this._isPhantom) {
        this._disposeTimer = win2.setTimeout(() => {
          delete this._disposeTimer;
          this.dispose();
        }, 0);
        this._clearDisposeTimeout = () => {
          if (this._disposeTimer) {
            win2.clearTimeout(this._disposeTimer);
            delete this._disposeTimer;
          }
          delete this._clearDisposeTimeout;
        };
      }
    }
    dispose() {
      var _a5;
      if (this._clearDisposeTimeout) {
        this._clearDisposeTimeout();
      }
      const input = this.input;
      if (!input) {
        return;
      }
      delete this.onFocusIn;
      delete this.onFocusOut;
      delete this.input;
      input.removeEventListener("focusin", this._focusIn);
      input.removeEventListener("focusout", this._focusOut);
      delete input.__tabsterDummyContainer;
      (_a5 = input.parentElement) === null || _a5 === void 0 ? void 0 : _a5.removeChild(input);
    }
    setTopLeft(top, left) {
      var _a5;
      const style = (_a5 = this.input) === null || _a5 === void 0 ? void 0 : _a5.style;
      if (style) {
        style.top = `${top}px`;
        style.left = `${left}px`;
      }
    }
    _isBackward(isIn, current, previous4) {
      return isIn && !previous4 ? !this.isFirst : !!(previous4 && current.compareDocumentPosition(previous4) & Node.DOCUMENT_POSITION_FOLLOWING);
    }
  };
  var DummyInputManagerPriorities = {
    Root: 1,
    Modalizer: 2,
    Mover: 3,
    Groupper: 4
  };
  var DummyInputManager = class _DummyInputManager {
    constructor(tabster, element2, priority, sys, outsideByDefault, callForDefaultAction) {
      this._element = element2;
      this._instance = new DummyInputManagerCore(tabster, element2, this, priority, sys, outsideByDefault, callForDefaultAction);
      this.moveOut = (backwards) => {
        var _a5;
        (_a5 = this._instance) === null || _a5 === void 0 ? void 0 : _a5.moveOut(backwards);
      };
      this.moveOutWithDefaultAction = (backwards) => {
        var _a5;
        (_a5 = this._instance) === null || _a5 === void 0 ? void 0 : _a5.moveOutWithDefaultAction(backwards);
      };
    }
    _setHandlers(onFocusIn, onFocusOut) {
      this._onFocusIn = onFocusIn;
      this._onFocusOut = onFocusOut;
    }
    getHandler(isIn) {
      return isIn ? this._onFocusIn : this._onFocusOut;
    }
    setTabbable(tabbable) {
      var _a5;
      (_a5 = this._instance) === null || _a5 === void 0 ? void 0 : _a5.setTabbable(this, tabbable);
    }
    dispose() {
      if (this._instance) {
        this._instance.dispose(this);
        delete this._instance;
      }
      delete this._onFocusIn;
      delete this._onFocusOut;
    }
    static getLastPhantomFrom() {
      const ret = _DummyInputManager._lastPhantomFrom;
      delete _DummyInputManager._lastPhantomFrom;
      return ret;
    }
    static moveWithPhantomDummy(tabster, element2, moveOutside, isBackward) {
      const dummy = new DummyInput(tabster.getWindow, true, {
        isPhantom: true,
        isFirst: true
      });
      const input = dummy.input;
      if (input) {
        const parent3 = element2.parentElement;
        if (parent3) {
          let insertBefore = moveOutside && !isBackward || !moveOutside && isBackward ? element2.nextElementSibling : element2;
          if (insertBefore) {
            if (isBackward) {
              const beforeBefore = insertBefore.previousElementSibling;
              if (beforeBefore && beforeBefore.__tabsterDummyContainer) {
                insertBefore = beforeBefore;
              }
            } else if (insertBefore.__tabsterDummyContainer) {
              insertBefore = insertBefore.nextElementSibling;
            }
          }
          parent3.insertBefore(input, insertBefore);
          _DummyInputManager._lastPhantomFrom = element2;
          tabster.getWindow().setTimeout(() => {
            delete _DummyInputManager._lastPhantomFrom;
          }, 0);
          nativeFocus(input);
        }
      }
    }
  };
  function setDummyInputDebugValue(dummy, wrappers) {
    var _a5;
    const what = {
      1: "Root",
      2: "Modalizer",
      3: "Mover",
      4: "Groupper"
    };
    (_a5 = dummy.input) === null || _a5 === void 0 ? void 0 : _a5.setAttribute(TabsterDummyInputAttributeName, [`isFirst=${dummy.isFirst}`, `isOutside=${dummy.isOutside}`, ...wrappers.map((w3) => `(${what[w3.priority]}, tabbable=${w3.tabbable})`)].join(", "));
  }
  var DummyInputObserver = class {
    constructor(win2) {
      this._updateQueue = /* @__PURE__ */ new Set();
      this._lastUpdateQueueTime = 0;
      this._changedParents = /* @__PURE__ */ new WeakSet();
      this._dummies = /* @__PURE__ */ new Map();
      this._domChanged = (parent3) => {
        var _a5;
        if (this._changedParents.has(parent3)) {
          return;
        }
        this._changedParents.add(parent3);
        if (this._updateDummyInputsTimer) {
          return;
        }
        this._updateDummyInputsTimer = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.call(this).setTimeout(() => {
          delete this._updateDummyInputsTimer;
          for (const [dummy, callback] of this._dummies) {
            const dummyParent = dummy.parentElement;
            if (!dummyParent || this._changedParents.has(dummyParent)) {
              callback();
            }
          }
          this._changedParents = /* @__PURE__ */ new WeakSet();
        }, _updateDummyInputsTimeout);
      };
      this._win = win2;
    }
    add(dummy, callback) {
      this._dummies.set(dummy, callback);
      this.domChanged = this._domChanged;
    }
    remove(dummy) {
      const dummyInputElements = this._dummies;
      dummyInputElements.delete(dummy);
      if (dummyInputElements.size === 0) {
        delete this.domChanged;
      }
    }
    dispose() {
      var _a5;
      const win2 = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.call(this);
      if (this._updateTimer) {
        win2 === null || win2 === void 0 ? void 0 : win2.clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      if (this._updateDummyInputsTimer) {
        win2 === null || win2 === void 0 ? void 0 : win2.clearTimeout(this._updateDummyInputsTimer);
        delete this._updateDummyInputsTimer;
      }
      this._changedParents = /* @__PURE__ */ new WeakSet();
      this._dummies.clear();
      delete this._win;
    }
    updatePositions(compute) {
      if (!this._win) {
        return;
      }
      this._updateQueue.add(compute);
      this._lastUpdateQueueTime = Date.now();
      this._scheduledUpdatePositions();
    }
    _scheduledUpdatePositions() {
      var _a5;
      if (this._updateTimer) {
        return;
      }
      this._updateTimer = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.call(this).setTimeout(() => {
        delete this._updateTimer;
        if (this._lastUpdateQueueTime + _updateDummyInputsTimeout <= Date.now()) {
          const scrollTopLeftCache = /* @__PURE__ */ new Map();
          const setTopLeftCallbacks = [];
          for (const compute of this._updateQueue) {
            setTopLeftCallbacks.push(compute(scrollTopLeftCache));
          }
          this._updateQueue.clear();
          for (const setTopLeft of setTopLeftCallbacks) {
            setTopLeft();
          }
          scrollTopLeftCache.clear();
        } else {
          this._scheduledUpdatePositions();
        }
      }, _updateDummyInputsTimeout);
    }
  };
  var DummyInputManagerCore = class {
    constructor(tabster, element2, manager, priority, sys, outsideByDefault, callForDefaultAction) {
      this._wrappers = [];
      this._isOutside = false;
      this._transformElements = /* @__PURE__ */ new Set();
      this._onFocusIn = (dummyInput, isBackward, relatedTarget) => {
        this._onFocus(true, dummyInput, isBackward, relatedTarget);
      };
      this._onFocusOut = (dummyInput, isBackward, relatedTarget) => {
        this._onFocus(false, dummyInput, isBackward, relatedTarget);
      };
      this.moveOut = (backwards) => {
        var _a5;
        const first2 = this._firstDummy;
        const last2 = this._lastDummy;
        if (first2 && last2) {
          this._ensurePosition();
          const firstInput = first2.input;
          const lastInput = last2.input;
          const element3 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
          if (firstInput && lastInput && element3) {
            let toFocus;
            if (backwards) {
              firstInput.tabIndex = 0;
              toFocus = firstInput;
            } else {
              lastInput.tabIndex = 0;
              toFocus = lastInput;
            }
            if (toFocus) {
              nativeFocus(toFocus);
            }
          }
        }
      };
      this.moveOutWithDefaultAction = (backwards) => {
        var _a5;
        const first2 = this._firstDummy;
        const last2 = this._lastDummy;
        if (first2 && last2) {
          this._ensurePosition();
          const firstInput = first2.input;
          const lastInput = last2.input;
          const element3 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
          if (firstInput && lastInput && element3) {
            let toFocus;
            if (backwards) {
              if (!first2.isOutside && this._tabster.focusable.isFocusable(element3, true, true, true)) {
                toFocus = element3;
              } else {
                first2.useDefaultAction = true;
                firstInput.tabIndex = 0;
                toFocus = firstInput;
              }
            } else {
              last2.useDefaultAction = true;
              lastInput.tabIndex = 0;
              toFocus = lastInput;
            }
            if (toFocus) {
              nativeFocus(toFocus);
            }
          }
        }
      };
      this.setTabbable = (manager2, tabbable) => {
        var _a5, _b;
        for (const w3 of this._wrappers) {
          if (w3.manager === manager2) {
            w3.tabbable = tabbable;
            break;
          }
        }
        const wrapper = this._getCurrent();
        if (wrapper) {
          const tabIndex = wrapper.tabbable ? 0 : -1;
          let input = (_a5 = this._firstDummy) === null || _a5 === void 0 ? void 0 : _a5.input;
          if (input) {
            input.tabIndex = tabIndex;
          }
          input = (_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input;
          if (input) {
            input.tabIndex = tabIndex;
          }
        }
        if (true) {
          this._firstDummy && setDummyInputDebugValue(this._firstDummy, this._wrappers);
          this._lastDummy && setDummyInputDebugValue(this._lastDummy, this._wrappers);
        }
      };
      this._addDummyInputs = () => {
        if (this._addTimer) {
          return;
        }
        this._addTimer = this._getWindow().setTimeout(() => {
          delete this._addTimer;
          this._ensurePosition();
          if (true) {
            this._firstDummy && setDummyInputDebugValue(this._firstDummy, this._wrappers);
            this._lastDummy && setDummyInputDebugValue(this._lastDummy, this._wrappers);
          }
          this._addTransformOffsets();
        }, 0);
      };
      this._addTransformOffsets = () => {
        this._tabster._dummyObserver.updatePositions(this._computeTransformOffsets);
      };
      this._computeTransformOffsets = (scrollTopLeftCache) => {
        var _a5, _b;
        const from2 = ((_a5 = this._firstDummy) === null || _a5 === void 0 ? void 0 : _a5.input) || ((_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input);
        const transformElements = this._transformElements;
        const newTransformElements = /* @__PURE__ */ new Set();
        let scrollTop = 0;
        let scrollLeft = 0;
        const win2 = this._getWindow();
        for (let element3 = from2; element3 && element3.nodeType === Node.ELEMENT_NODE; element3 = element3.parentElement) {
          let scrollTopLeft = scrollTopLeftCache.get(element3);
          if (scrollTopLeft === void 0) {
            const transform2 = win2.getComputedStyle(element3).transform;
            if (transform2 && transform2 !== "none") {
              scrollTopLeft = {
                scrollTop: element3.scrollTop,
                scrollLeft: element3.scrollLeft
              };
            }
            scrollTopLeftCache.set(element3, scrollTopLeft || null);
          }
          if (scrollTopLeft) {
            newTransformElements.add(element3);
            if (!transformElements.has(element3)) {
              element3.addEventListener("scroll", this._addTransformOffsets);
            }
            scrollTop += scrollTopLeft.scrollTop;
            scrollLeft += scrollTopLeft.scrollLeft;
          }
        }
        for (const el2 of transformElements) {
          if (!newTransformElements.has(el2)) {
            el2.removeEventListener("scroll", this._addTransformOffsets);
          }
        }
        this._transformElements = newTransformElements;
        return () => {
          var _a6, _b2;
          (_a6 = this._firstDummy) === null || _a6 === void 0 ? void 0 : _a6.setTopLeft(scrollTop, scrollLeft);
          (_b2 = this._lastDummy) === null || _b2 === void 0 ? void 0 : _b2.setTopLeft(scrollTop, scrollLeft);
        };
      };
      const el = element2.get();
      if (!el) {
        throw new Error("No element");
      }
      this._tabster = tabster;
      this._getWindow = tabster.getWindow;
      this._callForDefaultAction = callForDefaultAction;
      const instance = el.__tabsterDummy;
      (instance || this)._wrappers.push({
        manager,
        priority,
        tabbable: true
      });
      if (instance) {
        if (true) {
          this._firstDummy && setDummyInputDebugValue(this._firstDummy, instance._wrappers);
          this._lastDummy && setDummyInputDebugValue(this._lastDummy, instance._wrappers);
        }
        return instance;
      }
      el.__tabsterDummy = this;
      const forcedDummyPosition = sys === null || sys === void 0 ? void 0 : sys.dummyInputsPosition;
      const tagName = el.tagName;
      this._isOutside = !forcedDummyPosition ? (outsideByDefault || tagName === "UL" || tagName === "OL" || tagName === "TABLE") && !(tagName === "LI" || tagName === "TD" || tagName === "TH") : forcedDummyPosition === SysDummyInputsPositions.Outside;
      this._firstDummy = new DummyInput(this._getWindow, this._isOutside, {
        isFirst: true
      }, element2);
      this._lastDummy = new DummyInput(this._getWindow, this._isOutside, {
        isFirst: false
      }, element2);
      const dummyElement = this._firstDummy.input;
      dummyElement && tabster._dummyObserver.add(dummyElement, this._addDummyInputs);
      this._firstDummy.onFocusIn = this._onFocusIn;
      this._firstDummy.onFocusOut = this._onFocusOut;
      this._lastDummy.onFocusIn = this._onFocusIn;
      this._lastDummy.onFocusOut = this._onFocusOut;
      this._element = element2;
      this._addDummyInputs();
    }
    dispose(manager, force) {
      var _a5, _b, _c, _d;
      const wrappers = this._wrappers = this._wrappers.filter((w3) => w3.manager !== manager && !force);
      if (true) {
        this._firstDummy && setDummyInputDebugValue(this._firstDummy, wrappers);
        this._lastDummy && setDummyInputDebugValue(this._lastDummy, wrappers);
      }
      if (wrappers.length === 0) {
        delete ((_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get()).__tabsterDummy;
        for (const el of this._transformElements) {
          el.removeEventListener("scroll", this._addTransformOffsets);
        }
        this._transformElements.clear();
        const win2 = this._getWindow();
        if (this._addTimer) {
          win2.clearTimeout(this._addTimer);
          delete this._addTimer;
        }
        const dummyElement = (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.input;
        dummyElement && this._tabster._dummyObserver.remove(dummyElement);
        (_c = this._firstDummy) === null || _c === void 0 ? void 0 : _c.dispose();
        (_d = this._lastDummy) === null || _d === void 0 ? void 0 : _d.dispose();
      }
    }
    _onFocus(isIn, dummyInput, isBackward, relatedTarget) {
      var _a5;
      const wrapper = this._getCurrent();
      if (wrapper && (!dummyInput.useDefaultAction || this._callForDefaultAction)) {
        (_a5 = wrapper.manager.getHandler(isIn)) === null || _a5 === void 0 ? void 0 : _a5(dummyInput, isBackward, relatedTarget);
      }
    }
    _getCurrent() {
      this._wrappers.sort((a3, b4) => {
        if (a3.tabbable !== b4.tabbable) {
          return a3.tabbable ? -1 : 1;
        }
        return a3.priority - b4.priority;
      });
      return this._wrappers[0];
    }
    _ensurePosition() {
      var _a5, _b, _c;
      const element2 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
      const firstDummyInput = (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.input;
      const lastDummyInput = (_c = this._lastDummy) === null || _c === void 0 ? void 0 : _c.input;
      if (!element2 || !firstDummyInput || !lastDummyInput) {
        return;
      }
      if (this._isOutside) {
        const elementParent = element2.parentElement;
        if (elementParent) {
          const nextSibling = element2.nextElementSibling;
          if (nextSibling !== lastDummyInput) {
            elementParent.insertBefore(lastDummyInput, nextSibling);
          }
          if (element2.previousElementSibling !== firstDummyInput) {
            elementParent.insertBefore(firstDummyInput, element2);
          }
        }
      } else {
        if (element2.lastElementChild !== lastDummyInput) {
          element2.appendChild(lastDummyInput);
        }
        const firstElementChild = element2.firstElementChild;
        if (firstElementChild && firstElementChild !== firstDummyInput) {
          element2.insertBefore(firstDummyInput, firstElementChild);
        }
      }
    }
  };
  function getLastChild(container) {
    let lastChild = null;
    for (let i4 = container.lastElementChild; i4; i4 = i4.lastElementChild) {
      lastChild = i4;
    }
    return lastChild || void 0;
  }
  function getAdjacentElement(from2, prev2) {
    let cur = from2;
    let adjacent = null;
    while (cur && !adjacent) {
      adjacent = prev2 ? cur.previousElementSibling : cur.nextElementSibling;
      cur = cur.parentElement;
    }
    return adjacent || void 0;
  }
  function triggerEvent(target, name, details) {
    const event = document.createEvent("HTMLEvents");
    event.initEvent(name, true, true);
    event.details = details;
    target.dispatchEvent(event);
    return !event.defaultPrevented;
  }
  function augmentAttribute(tabster, element2, name, value) {
    const entry = tabster.storageEntry(element2, true);
    let ret = false;
    if (!entry.aug) {
      if (value === void 0) {
        return ret;
      }
      entry.aug = {};
    }
    if (value === void 0) {
      if (name in entry.aug) {
        const origVal = entry.aug[name];
        delete entry.aug[name];
        if (origVal === null) {
          element2.removeAttribute(name);
        } else {
          element2.setAttribute(name, origVal);
        }
        ret = true;
      }
    } else {
      let origValue;
      if (!(name in entry.aug)) {
        origValue = element2.getAttribute(name);
      }
      if (origValue !== void 0 && origValue !== value) {
        entry.aug[name] = origValue;
        if (value === null) {
          element2.removeAttribute(name);
        } else {
          element2.setAttribute(name, value);
        }
        ret = true;
      }
    }
    if (value === void 0 && Object.keys(entry.aug).length === 0) {
      delete entry.aug;
      tabster.storageEntry(element2, false);
    }
    return ret;
  }
  function getTabsterAttribute(props, plain) {
    const attr = JSON.stringify(props);
    if (plain === true) {
      return attr;
    }
    return {
      [TabsterAttributeName]: attr
    };
  }
  function mergeTabsterProps(props, newProps) {
    for (const key of Object.keys(newProps)) {
      const value = newProps[key];
      if (value) {
        props[key] = value;
      } else {
        delete props[key];
      }
    }
  }
  function setTabsterAttribute(element2, newProps, update) {
    let props;
    if (update) {
      const attr = element2.getAttribute(TabsterAttributeName);
      if (attr) {
        try {
          props = JSON.parse(attr);
        } catch (e3) {
          if (true) {
            console.error(`data-tabster attribute error: ${e3}`, element2);
          }
        }
      }
    }
    if (!props) {
      props = {};
    }
    mergeTabsterProps(props, newProps);
    if (Object.keys(props).length > 0) {
      element2.setAttribute(TabsterAttributeName, getTabsterAttribute(props, true));
    } else {
      element2.removeAttribute(TabsterAttributeName);
    }
  }
  function _setInformativeStyle$3(weakElement, remove, id) {
    if (true) {
      const element2 = weakElement.get();
      if (element2) {
        if (remove) {
          element2.style.removeProperty("--tabster-root");
        } else {
          element2.style.setProperty("--tabster-root", id + ",");
        }
      }
    }
  }
  var RootDummyManager = class extends DummyInputManager {
    constructor(tabster, element2, setFocused, sys) {
      super(tabster, element2, DummyInputManagerPriorities.Root, sys, void 0, true);
      this._onDummyInputFocus = (dummyInput) => {
        var _a5;
        if (dummyInput.useDefaultAction) {
          this._setFocused(false, true);
        } else {
          this._tabster.keyboardNavigation.setNavigatingWithKeyboard(true);
          const element3 = this._element.get();
          if (element3) {
            this._setFocused(true, true);
            const toFocus = this._tabster.focusedElement.getFirstOrLastTabbable(dummyInput.isFirst, {
              container: element3,
              ignoreAccessibility: true
            });
            if (toFocus) {
              nativeFocus(toFocus);
              return;
            }
          }
          (_a5 = dummyInput.input) === null || _a5 === void 0 ? void 0 : _a5.blur();
        }
      };
      this._setHandlers(this._onDummyInputFocus);
      this._tabster = tabster;
      this._setFocused = setFocused;
    }
  };
  var Root = class extends TabsterPart {
    constructor(tabster, element2, onDispose, props, sys) {
      super(tabster, element2, props);
      this._isFocused = false;
      this._setFocused = (hasFocused, fromAdjacent) => {
        if (this._setFocusedTimer) {
          this._tabster.getWindow().clearTimeout(this._setFocusedTimer);
          delete this._setFocusedTimer;
        }
        if (this._isFocused === hasFocused) {
          return;
        }
        const element3 = this._element.get();
        if (element3) {
          if (hasFocused) {
            this._isFocused = true;
            triggerEvent(this._tabster.root.eventTarget, "focus", {
              element: element3,
              fromAdjacent
            });
          } else {
            this._setFocusedTimer = this._tabster.getWindow().setTimeout(() => {
              delete this._setFocusedTimer;
              this._isFocused = false;
              triggerEvent(this._tabster.root.eventTarget, "blur", {
                element: element3,
                fromAdjacent
              });
            }, 0);
          }
        }
      };
      this._onFocus = (e3) => {
        var _a5;
        const win3 = this._tabster.getWindow();
        if (this._setTabbableTimer) {
          win3.clearTimeout(this._setTabbableTimer);
          delete this._setTabbableTimer;
        }
        if (e3) {
          const ctx = RootAPI.getTabsterContext(this._tabster, e3);
          if (ctx) {
            this._setFocused(ctx.root.getElement() === this._element.get());
          }
          if (!ctx || ctx.uncontrolled || this._tabster.rootDummyInputs) {
            (_a5 = this._dummyManager) === null || _a5 === void 0 ? void 0 : _a5.setTabbable(false);
            return;
          }
        } else {
          this._setFocused(false);
        }
        this._setTabbableTimer = win3.setTimeout(() => {
          var _a6;
          delete this._setTabbableTimer;
          (_a6 = this._dummyManager) === null || _a6 === void 0 ? void 0 : _a6.setTabbable(true);
        }, 0);
      };
      this._onDispose = onDispose;
      const win2 = tabster.getWindow;
      this.uid = getElementUId(win2, element2);
      this._sys = sys;
      if (tabster.controlTab || tabster.rootDummyInputs) {
        this.addDummyInputs();
      }
      tabster.focusedElement.subscribe(this._onFocus);
      this._add();
    }
    addDummyInputs() {
      if (!this._dummyManager) {
        this._dummyManager = new RootDummyManager(this._tabster, this._element, this._setFocused, this._sys);
      }
    }
    dispose() {
      var _a5;
      this._onDispose(this);
      const win2 = this._tabster.getWindow();
      if (this._setFocusedTimer) {
        win2.clearTimeout(this._setFocusedTimer);
        delete this._setFocusedTimer;
      }
      if (this._setTabbableTimer) {
        win2.clearTimeout(this._setTabbableTimer);
        delete this._setTabbableTimer;
      }
      (_a5 = this._dummyManager) === null || _a5 === void 0 ? void 0 : _a5.dispose();
      this._remove();
    }
    moveOutWithDefaultAction(isBackward) {
      const dummyManager = this._dummyManager;
      if (dummyManager) {
        dummyManager.moveOutWithDefaultAction(isBackward);
      } else {
        const el = this.getElement();
        if (el) {
          RootDummyManager.moveWithPhantomDummy(this._tabster, el, true, isBackward);
        }
      }
    }
    _add() {
      if (true) {
        _setInformativeStyle$3(this._element, false, this.uid);
      }
    }
    _remove() {
      if (true) {
        _setInformativeStyle$3(this._element, true);
      }
    }
  };
  var RootAPI = class {
    constructor(tabster, autoRoot) {
      this._autoRootWaiting = false;
      this._roots = {};
      this._forceDummy = false;
      this.rootById = {};
      this._autoRootCreate = () => {
        var _a5;
        const doc = this._win().document;
        const body = doc.body;
        if (body) {
          this._autoRootUnwait(doc);
          const props = this._autoRoot;
          if (props) {
            setTabsterAttribute(body, {
              root: props
            }, true);
            updateTabsterByAttribute(this._tabster, body);
            return (_a5 = getTabsterOnElement(this._tabster, body)) === null || _a5 === void 0 ? void 0 : _a5.root;
          }
        } else if (!this._autoRootWaiting) {
          this._autoRootWaiting = true;
          doc.addEventListener("readystatechange", this._autoRootCreate);
        }
        return void 0;
      };
      this._onRootDispose = (root3) => {
        delete this._roots[root3.id];
      };
      this._tabster = tabster;
      this._win = tabster.getWindow;
      this._autoRoot = autoRoot;
      this.eventTarget = createEventTarget(this._win);
      tabster.queueInit(() => {
        if (this._autoRoot) {
          this._autoRootCreate();
        }
      });
    }
    _autoRootUnwait(doc) {
      doc.removeEventListener("readystatechange", this._autoRootCreate);
      this._autoRootWaiting = false;
    }
    dispose() {
      const win2 = this._win();
      this._autoRootUnwait(win2.document);
      delete this._autoRoot;
      Object.keys(this._roots).forEach((rootId) => {
        if (this._roots[rootId]) {
          this._roots[rootId].dispose();
          delete this._roots[rootId];
        }
      });
      this.rootById = {};
    }
    createRoot(element2, props, sys) {
      if (true)
        ;
      const newRoot = new Root(this._tabster, element2, this._onRootDispose, props, sys);
      this._roots[newRoot.id] = newRoot;
      if (this._forceDummy) {
        newRoot.addDummyInputs();
      }
      return newRoot;
    }
    addDummyInputs() {
      this._forceDummy = true;
      const roots = this._roots;
      for (const id of Object.keys(roots)) {
        roots[id].addDummyInputs();
      }
    }
    static getRootByUId(getWindow3, id) {
      const tabster = getWindow3().__tabsterInstance;
      return tabster && tabster.root.rootById[id];
    }
    /**
     * Fetches the tabster context for an element walking up its ancestors
     *
     * @param tabster Tabster instance
     * @param element The element the tabster context should represent
     * @param options Additional options
     * @returns undefined if the element is not a child of a tabster root, otherwise all applicable tabster behaviours and configurations
     */
    static getTabsterContext(tabster, element2, options) {
      if (options === void 0) {
        options = {};
      }
      var _a5, _b, _c, _d;
      if (!element2.ownerDocument) {
        return void 0;
      }
      tabster.drainInitQueue();
      const checkRtl = options.checkRtl;
      let root3;
      let modalizer;
      let groupper;
      let mover;
      let isExcludedFromMover = false;
      let isGroupperFirst;
      let modalizerInGroupper;
      let isRtl;
      let uncontrolled;
      let curElement = options.referenceElement || element2;
      const ignoreKeydown = {};
      while (curElement && (!root3 || checkRtl)) {
        const tabsterOnElement = getTabsterOnElement(tabster, curElement);
        if (checkRtl && isRtl === void 0) {
          const dir = curElement.dir;
          if (dir) {
            isRtl = dir.toLowerCase() === "rtl";
          }
        }
        if (!tabsterOnElement) {
          curElement = curElement.parentElement;
          continue;
        }
        const tagName = curElement.tagName;
        if (tabsterOnElement.uncontrolled || tagName === "IFRAME" || tagName === "WEBVIEW") {
          uncontrolled = curElement;
        }
        if (!mover && ((_a5 = tabsterOnElement.focusable) === null || _a5 === void 0 ? void 0 : _a5.excludeFromMover) && !groupper) {
          isExcludedFromMover = true;
        }
        const curModalizer = tabsterOnElement.modalizer;
        const curGroupper = tabsterOnElement.groupper;
        const curMover = tabsterOnElement.mover;
        if (!modalizer && curModalizer) {
          modalizer = curModalizer;
        }
        if (!groupper && curGroupper && (!modalizer || curModalizer)) {
          if (modalizer) {
            if (!curGroupper.isActive() && curGroupper.getProps().tabbability && modalizer.userId !== ((_b = tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
              modalizer = void 0;
              groupper = curGroupper;
            }
            modalizerInGroupper = curGroupper;
          } else {
            groupper = curGroupper;
          }
        }
        if (!mover && curMover && (!modalizer || curModalizer) && (!curGroupper || curElement !== element2)) {
          mover = curMover;
          isGroupperFirst = !!groupper && groupper !== curGroupper;
        }
        if (tabsterOnElement.root) {
          root3 = tabsterOnElement.root;
        }
        if ((_c = tabsterOnElement.focusable) === null || _c === void 0 ? void 0 : _c.ignoreKeydown) {
          Object.assign(ignoreKeydown, tabsterOnElement.focusable.ignoreKeydown);
        }
        curElement = curElement.parentElement;
      }
      if (!root3) {
        const rootAPI = tabster.root;
        const autoRoot = rootAPI._autoRoot;
        if (autoRoot) {
          if ((_d = element2.ownerDocument) === null || _d === void 0 ? void 0 : _d.body) {
            root3 = rootAPI._autoRootCreate();
          }
        }
      }
      if (groupper && !mover) {
        isGroupperFirst = true;
      }
      if (!root3) {
        if (modalizer || groupper || mover) {
          console.error("Tabster Root is required for Mover, Groupper and Modalizer to work.");
        }
      }
      const shouldIgnoreKeydown = (event) => !!ignoreKeydown[event.key];
      return root3 ? {
        root: root3,
        modalizer,
        groupper,
        mover,
        isGroupperFirst,
        modalizerInGroupper,
        isRtl: checkRtl ? !!isRtl : void 0,
        uncontrolled,
        isExcludedFromMover,
        ignoreKeydown: shouldIgnoreKeydown
      } : void 0;
    }
    static getRoot(tabster, element2) {
      var _a5;
      for (let el = element2; el; el = el.parentElement) {
        const root3 = (_a5 = getTabsterOnElement(tabster, el)) === null || _a5 === void 0 ? void 0 : _a5.root;
        if (root3) {
          return root3;
        }
      }
      return void 0;
    }
    onRoot(root3, removed) {
      if (removed) {
        delete this.rootById[root3.uid];
      } else {
        this.rootById[root3.uid] = root3;
      }
    }
  };
  var Subscribable = class {
    constructor() {
      this._callbacks = [];
    }
    dispose() {
      this._callbacks = [];
      delete this._val;
    }
    subscribe(callback) {
      const callbacks2 = this._callbacks;
      const index2 = callbacks2.indexOf(callback);
      if (index2 < 0) {
        callbacks2.push(callback);
      }
    }
    subscribeFirst(callback) {
      const callbacks2 = this._callbacks;
      const index2 = callbacks2.indexOf(callback);
      if (index2 >= 0) {
        callbacks2.splice(index2, 1);
      }
      callbacks2.unshift(callback);
    }
    unsubscribe(callback) {
      const index2 = this._callbacks.indexOf(callback);
      if (index2 >= 0) {
        this._callbacks.splice(index2, 1);
      }
    }
    setVal(val, details) {
      if (this._val === val) {
        return;
      }
      this._val = val;
      this._callCallbacks(val, details);
    }
    getVal() {
      return this._val;
    }
    trigger(val, details) {
      this._callCallbacks(val, details);
    }
    _callCallbacks(val, details) {
      this._callbacks.forEach((callback) => callback(val, details));
    }
  };
  var _focusableSelector = /* @__PURE__ */ ["a[href]", "button:not([disabled])", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", "*[tabindex]", "*[contenteditable]"].join(", ");
  var FocusableAPI = class {
    constructor(tabster) {
      this._tabster = tabster;
    }
    dispose() {
    }
    getProps(element2) {
      const tabsterOnElement = getTabsterOnElement(this._tabster, element2);
      return tabsterOnElement && tabsterOnElement.focusable || {};
    }
    isFocusable(el, includeProgrammaticallyFocusable, noVisibleCheck, noAccessibleCheck) {
      if (matchesSelector(el, _focusableSelector) && (includeProgrammaticallyFocusable || el.tabIndex !== -1)) {
        return (noVisibleCheck || this.isVisible(el)) && (noAccessibleCheck || this.isAccessible(el));
      }
      return false;
    }
    isVisible(el) {
      if (!el.ownerDocument || el.nodeType !== Node.ELEMENT_NODE) {
        return false;
      }
      if (el.offsetParent === null && el.ownerDocument.body !== el) {
        return false;
      }
      const win2 = el.ownerDocument.defaultView;
      if (!win2) {
        return false;
      }
      const rect = el.ownerDocument.body.getBoundingClientRect();
      if (rect.width === 0 && rect.height === 0) {
        return false;
      }
      const computedStyle = win2.getComputedStyle(el);
      if (computedStyle.visibility === "hidden") {
        return false;
      }
      return true;
    }
    isAccessible(el) {
      var _a5;
      for (let e3 = el; e3; e3 = e3.parentElement) {
        const tabsterOnElement = getTabsterOnElement(this._tabster, e3);
        if (this._isHidden(e3)) {
          return false;
        }
        const ignoreDisabled = (_a5 = tabsterOnElement === null || tabsterOnElement === void 0 ? void 0 : tabsterOnElement.focusable) === null || _a5 === void 0 ? void 0 : _a5.ignoreAriaDisabled;
        if (!ignoreDisabled && this._isDisabled(e3)) {
          return false;
        }
      }
      return true;
    }
    _isDisabled(el) {
      return el.hasAttribute("disabled");
    }
    _isHidden(el) {
      var _a5;
      const attrVal = el.getAttribute("aria-hidden");
      if (attrVal && attrVal.toLowerCase() === "true") {
        if (!((_a5 = this._tabster.modalizer) === null || _a5 === void 0 ? void 0 : _a5.isAugmented(el))) {
          return true;
        }
      }
      return false;
    }
    findFirst(options) {
      return this.findElement({
        ...options
      });
    }
    findLast(options) {
      return this.findElement({
        isBackward: true,
        ...options
      });
    }
    findNext(options, out) {
      return this.findElement({
        ...options
      }, out);
    }
    findPrev(options, out) {
      return this.findElement({
        ...options,
        isBackward: true
      }, out);
    }
    findDefault(options) {
      return this.findElement({
        ...options,
        acceptCondition: (el) => this._tabster.focusable.isFocusable(el, options.includeProgrammaticallyFocusable) && !!this.getProps(el).isDefault
      }) || null;
    }
    findAll(options) {
      return this._findElements(true, options) || [];
    }
    findElement(options, out) {
      const found = this._findElements(false, options, out);
      return found ? found[0] : found;
    }
    _findElements(findAll, options, out) {
      var _a5, _b, _c;
      const {
        container,
        currentElement = null,
        includeProgrammaticallyFocusable,
        useActiveModalizer,
        ignoreUncontrolled,
        ignoreAccessibility,
        modalizerId,
        isBackward,
        onUncontrolled,
        onElement
      } = options;
      if (!out) {
        out = {};
      }
      const elements = [];
      let {
        acceptCondition
      } = options;
      if (!container) {
        return null;
      }
      if (!acceptCondition) {
        acceptCondition = (el) => this._tabster.focusable.isFocusable(el, includeProgrammaticallyFocusable, false, ignoreAccessibility);
      }
      const acceptElementState = {
        container,
        modalizerUserId: modalizerId === void 0 && useActiveModalizer ? (_a5 = this._tabster.modalizer) === null || _a5 === void 0 ? void 0 : _a5.activeId : modalizerId || ((_c = (_b = RootAPI.getTabsterContext(this._tabster, container)) === null || _b === void 0 ? void 0 : _b.modalizer) === null || _c === void 0 ? void 0 : _c.userId),
        from: currentElement || container,
        isBackward,
        acceptCondition,
        includeProgrammaticallyFocusable,
        ignoreUncontrolled,
        ignoreAccessibility,
        cachedGrouppers: {}
      };
      const walker = createElementTreeWalker(container.ownerDocument, container, (node5) => this._acceptElement(node5, acceptElementState));
      if (!walker) {
        return null;
      }
      const prepareForNextElement = (shouldContinueIfNotFound) => {
        const foundElement2 = acceptElementState.foundElement;
        if (foundElement2) {
          elements.push(foundElement2);
        }
        if (findAll) {
          if (foundElement2) {
            acceptElementState.found = false;
            delete acceptElementState.foundElement;
            delete acceptElementState.fromCtx;
            acceptElementState.from = foundElement2;
            if (onElement && !onElement(foundElement2)) {
              return false;
            }
          }
          return !!(foundElement2 || shouldContinueIfNotFound);
        } else {
          return !!(shouldContinueIfNotFound && !foundElement2);
        }
      };
      if (!currentElement) {
        out.outOfDOMOrder = true;
      }
      if (currentElement) {
        walker.currentNode = currentElement;
      } else if (isBackward) {
        const lastChild = getLastChild(container);
        if (!lastChild) {
          return null;
        }
        if (this._acceptElement(lastChild, acceptElementState) === NodeFilter.FILTER_ACCEPT && !prepareForNextElement(true)) {
          if (acceptElementState.skippedFocusable) {
            out.outOfDOMOrder = true;
          }
          return elements;
        }
        walker.currentNode = lastChild;
      }
      let foundElement;
      do {
        foundElement = (isBackward ? walker.previousNode() : walker.nextNode()) || void 0;
      } while (prepareForNextElement());
      if (!findAll) {
        const nextUncontrolled = acceptElementState.nextUncontrolled;
        if (nextUncontrolled) {
          if (onUncontrolled) {
            onUncontrolled(nextUncontrolled);
          }
          if (foundElement) {
            return void 0;
          } else {
            return null;
          }
        }
      }
      if (acceptElementState.skippedFocusable) {
        out.outOfDOMOrder = true;
      }
      return elements.length ? elements : null;
    }
    _acceptElement(element2, state) {
      var _a5, _b, _c, _d, _e;
      if (state.found) {
        return NodeFilter.FILTER_ACCEPT;
      }
      const container = state.container;
      if (element2 === container) {
        return NodeFilter.FILTER_SKIP;
      }
      if (!container.contains(element2)) {
        return NodeFilter.FILTER_REJECT;
      }
      if (element2.__tabsterDummyContainer) {
        return NodeFilter.FILTER_REJECT;
      }
      let lastToIgnore = state.lastToIgnore;
      if (lastToIgnore) {
        if (lastToIgnore.contains(element2)) {
          return NodeFilter.FILTER_REJECT;
        } else {
          lastToIgnore = state.lastToIgnore = void 0;
        }
      }
      const ctx = state.currentCtx = RootAPI.getTabsterContext(this._tabster, element2);
      if (!ctx) {
        return NodeFilter.FILTER_SKIP;
      }
      if (state.ignoreUncontrolled) {
        if (shouldIgnoreFocus(element2)) {
          return NodeFilter.FILTER_SKIP;
        }
      } else if (ctx.uncontrolled && !state.nextUncontrolled && this._tabster.focusable.isFocusable(element2, void 0, true, true)) {
        if (!ctx.groupper && !ctx.mover) {
          if (((_a5 = ctx.modalizer) === null || _a5 === void 0 ? void 0 : _a5.userId) === ((_b = this._tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
            if (this.isVisible(ctx.uncontrolled)) {
              state.nextUncontrolled = ctx.uncontrolled;
            }
            state.skippedFocusable = true;
            return NodeFilter.FILTER_REJECT;
          }
        }
      }
      if (element2.tagName === "IFRAME" || element2.tagName === "WEBVIEW") {
        if (((_c = ctx.modalizer) === null || _c === void 0 ? void 0 : _c.userId) === ((_d = this._tabster.modalizer) === null || _d === void 0 ? void 0 : _d.activeId)) {
          state.found = true;
          state.lastToIgnore = state.foundElement = element2;
          return NodeFilter.FILTER_ACCEPT;
        } else {
          return NodeFilter.FILTER_REJECT;
        }
      }
      if (!state.ignoreAccessibility && !this.isAccessible(element2)) {
        if (this.isFocusable(element2, false, true, true)) {
          state.skippedFocusable = true;
        }
        return NodeFilter.FILTER_REJECT;
      }
      let result;
      let fromCtx = state.fromCtx;
      if (!fromCtx) {
        fromCtx = state.fromCtx = RootAPI.getTabsterContext(this._tabster, state.from);
      }
      const fromMover = fromCtx === null || fromCtx === void 0 ? void 0 : fromCtx.mover;
      let groupper = ctx.groupper;
      let mover = ctx.mover;
      result = (_e = this._tabster.modalizer) === null || _e === void 0 ? void 0 : _e.acceptElement(element2, state);
      if (result !== void 0) {
        state.skippedFocusable = true;
      }
      if (result === void 0 && (groupper || mover || fromMover)) {
        const groupperElement = groupper === null || groupper === void 0 ? void 0 : groupper.getElement();
        const fromMoverElement = fromMover === null || fromMover === void 0 ? void 0 : fromMover.getElement();
        let moverElement = mover === null || mover === void 0 ? void 0 : mover.getElement();
        if (moverElement && (fromMoverElement === null || fromMoverElement === void 0 ? void 0 : fromMoverElement.contains(moverElement)) && container.contains(fromMoverElement) && (!groupperElement || !mover || fromMoverElement.contains(groupperElement))) {
          mover = fromMover;
          moverElement = fromMoverElement;
        }
        if (groupperElement && (groupperElement === container || !container.contains(groupperElement))) {
          groupper = void 0;
        }
        if (moverElement && !container.contains(moverElement)) {
          mover = void 0;
        }
        if (groupper && mover) {
          if (moverElement && groupperElement && !groupperElement.contains(moverElement)) {
            mover = void 0;
          } else {
            groupper = void 0;
          }
        }
        if (groupper) {
          result = groupper.acceptElement(element2, state);
        }
        if (mover) {
          result = mover.acceptElement(element2, state);
        }
      }
      if (result === void 0) {
        result = state.acceptCondition(element2) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
        if (result === NodeFilter.FILTER_SKIP && this.isFocusable(element2, false, true, true)) {
          state.skippedFocusable = true;
        }
      }
      if (result === NodeFilter.FILTER_ACCEPT && !state.found) {
        state.found = true;
        state.foundElement = element2;
      }
      return result;
    }
  };
  var Keys = {
    Tab: 9,
    Enter: 13,
    Esc: 27,
    Space: 32,
    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,
    Left: 37,
    Up: 38,
    Right: 39,
    Down: 40
  };
  var FocusedElementState = class _FocusedElementState extends Subscribable {
    constructor(tabster, getWindow3) {
      super();
      this._init = () => {
        const win2 = this._win();
        const doc = win2.document;
        doc.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
        doc.addEventListener("focusout", this._onFocusOut, true);
        win2.addEventListener("keydown", this._onKeyDown, true);
        const activeElement = doc.activeElement;
        if (activeElement && activeElement !== doc.body) {
          this._setFocusedElement(activeElement);
        }
        this.subscribe(this._onChanged);
      };
      this._onFocusIn = (e3) => {
        this._setFocusedElement(e3.target, e3.details.relatedTarget, e3.details.isFocusedProgrammatically);
      };
      this._onFocusOut = (e3) => {
        this._setFocusedElement(void 0, e3.relatedTarget);
      };
      this._validateFocusedElement = (element2) => {
      };
      this._onKeyDown = (e3) => {
        var _a5, _b;
        if (e3.keyCode !== Keys.Tab || e3.ctrlKey) {
          return;
        }
        const currentElement = this.getVal();
        if (!currentElement || !currentElement.ownerDocument || currentElement.contentEditable === "true") {
          return;
        }
        const tabster2 = this._tabster;
        const controlTab = tabster2.controlTab;
        const ctx = RootAPI.getTabsterContext(tabster2, currentElement);
        if (!ctx || ctx.ignoreKeydown(e3)) {
          return;
        }
        const isBackward = e3.shiftKey;
        const next4 = _FocusedElementState.findNextTabbable(tabster2, ctx, void 0, currentElement, void 0, isBackward, void 0, true);
        let nextElement;
        if (next4) {
          let uncontrolled = next4.uncontrolled;
          if (uncontrolled) {
            const isGroupperFirst = ctx.isGroupperFirst;
            let moveOutside = false;
            if (isGroupperFirst !== void 0) {
              const groupper = (_a5 = ctx.groupper) === null || _a5 === void 0 ? void 0 : _a5.getElement();
              const mover = (_b = ctx.mover) === null || _b === void 0 ? void 0 : _b.getElement();
              let moveFrom;
              if (isGroupperFirst && groupper && uncontrolled.contains(groupper)) {
                moveFrom = groupper;
              } else if (!isGroupperFirst && mover && uncontrolled.contains(mover)) {
                moveFrom = mover;
              }
              if (moveFrom) {
                uncontrolled = moveFrom;
                moveOutside = true;
              }
            }
            if (uncontrolled && ctx.uncontrolled !== uncontrolled) {
              DummyInputManager.moveWithPhantomDummy(this._tabster, uncontrolled, moveOutside, isBackward);
            }
            return;
          }
          nextElement = next4.element;
        }
        if (nextElement) {
          if (nextElement.tagName === "IFRAME") {
            DummyInputManager.moveWithPhantomDummy(this._tabster, nextElement, false, isBackward);
            return;
          }
          if (controlTab || (next4 === null || next4 === void 0 ? void 0 : next4.outOfDOMOrder)) {
            e3.preventDefault();
            e3.stopImmediatePropagation();
            nativeFocus(nextElement);
          }
        } else {
          ctx.root.moveOutWithDefaultAction(isBackward);
        }
      };
      this._onChanged = (element2, details) => {
        var _a5, _b;
        if (element2) {
          triggerEvent(element2, FocusInEventName, details);
        } else {
          const last2 = (_a5 = this._lastVal) === null || _a5 === void 0 ? void 0 : _a5.get();
          if (last2) {
            const d3 = {
              ...details
            };
            const lastCtx = RootAPI.getTabsterContext(this._tabster, last2);
            const modalizerId = (_b = lastCtx === null || lastCtx === void 0 ? void 0 : lastCtx.modalizer) === null || _b === void 0 ? void 0 : _b.userId;
            if (modalizerId) {
              d3.modalizerId = modalizerId;
            }
            triggerEvent(last2, FocusOutEventName, d3);
          }
        }
      };
      this._tabster = tabster;
      this._win = getWindow3;
      tabster.queueInit(this._init);
    }
    dispose() {
      super.dispose();
      const win2 = this._win();
      win2.document.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
      win2.document.removeEventListener("focusout", this._onFocusOut, true);
      win2.removeEventListener("keydown", this._onKeyDown, true);
      this.unsubscribe(this._onChanged);
      delete _FocusedElementState._lastResetElement;
      delete this._nextVal;
      delete this._lastVal;
    }
    static forgetMemorized(instance, parent3) {
      var _a5, _b;
      let wel = _FocusedElementState._lastResetElement;
      let el = wel && wel.get();
      if (el && parent3.contains(el)) {
        delete _FocusedElementState._lastResetElement;
      }
      el = (_b = (_a5 = instance._nextVal) === null || _a5 === void 0 ? void 0 : _a5.element) === null || _b === void 0 ? void 0 : _b.get();
      if (el && parent3.contains(el)) {
        delete instance._nextVal;
      }
      wel = instance._lastVal;
      el = wel && wel.get();
      if (el && parent3.contains(el)) {
        delete instance._lastVal;
      }
    }
    getFocusedElement() {
      return this.getVal();
    }
    getLastFocusedElement() {
      var _a5;
      let el = (_a5 = this._lastVal) === null || _a5 === void 0 ? void 0 : _a5.get();
      if (!el || el && !documentContains(el.ownerDocument, el)) {
        this._lastVal = el = void 0;
      }
      return el;
    }
    focus(element2, noFocusedProgrammaticallyFlag, noAccessibleCheck) {
      if (!this._tabster.focusable.isFocusable(element2, noFocusedProgrammaticallyFlag, false, noAccessibleCheck)) {
        return false;
      }
      element2.focus();
      return true;
    }
    focusDefault(container) {
      const el = this._tabster.focusable.findDefault({
        container
      });
      if (el) {
        this._tabster.focusedElement.focus(el);
        return true;
      }
      return false;
    }
    getFirstOrLastTabbable(isFirst, props) {
      const tabsterFocusable = this._tabster.focusable;
      const {
        container,
        ignoreAccessibility
      } = props;
      let uncontrolled;
      let toFocus;
      if (container) {
        const ctx = RootAPI.getTabsterContext(this._tabster, container);
        if (ctx) {
          let next4 = _FocusedElementState.findNextTabbable(this._tabster, ctx, container, void 0, void 0, !isFirst, void 0, ignoreAccessibility);
          if (next4) {
            toFocus = next4.element;
            uncontrolled = next4.uncontrolled;
            while (!toFocus && uncontrolled) {
              if (tabsterFocusable.isFocusable(uncontrolled, false, true, true)) {
                toFocus = uncontrolled;
              } else {
                toFocus = tabsterFocusable[isFirst ? "findFirst" : "findLast"]({
                  container: uncontrolled,
                  ignoreUncontrolled: true,
                  ignoreAccessibility,
                  useActiveModalizer: true
                });
              }
              if (!toFocus) {
                next4 = _FocusedElementState.findNextTabbable(this._tabster, ctx, uncontrolled, void 0, void 0, !isFirst, void 0, ignoreAccessibility);
                if (next4) {
                  toFocus = next4.element;
                  uncontrolled = next4.uncontrolled;
                }
              }
            }
          }
        }
      }
      if (toFocus && !(container === null || container === void 0 ? void 0 : container.contains(toFocus))) {
        toFocus = void 0;
      }
      return toFocus || void 0;
    }
    _focusFirstOrLast(isFirst, props) {
      const toFocus = this.getFirstOrLastTabbable(isFirst, props);
      if (toFocus) {
        this.focus(toFocus, false, true);
        return true;
      }
      return false;
    }
    focusFirst(props) {
      return this._focusFirstOrLast(true, props);
    }
    focusLast(props) {
      return this._focusFirstOrLast(false, props);
    }
    resetFocus(container) {
      if (!this._tabster.focusable.isVisible(container)) {
        return false;
      }
      if (!this._tabster.focusable.isFocusable(container, true, true, true)) {
        const prevTabIndex = container.getAttribute("tabindex");
        const prevAriaHidden = container.getAttribute("aria-hidden");
        container.tabIndex = -1;
        container.setAttribute("aria-hidden", "true");
        _FocusedElementState._lastResetElement = new WeakHTMLElement(this._win, container);
        this.focus(container, true, true);
        this._setOrRemoveAttribute(container, "tabindex", prevTabIndex);
        this._setOrRemoveAttribute(container, "aria-hidden", prevAriaHidden);
      } else {
        this.focus(container);
      }
      return true;
    }
    _setOrRemoveAttribute(element2, name, value) {
      if (value === null) {
        element2.removeAttribute(name);
      } else {
        element2.setAttribute(name, value);
      }
    }
    _setFocusedElement(element2, relatedTarget, isFocusedProgrammatically) {
      var _a5, _b;
      if (this._tabster._noop) {
        return;
      }
      const details = {
        relatedTarget
      };
      if (element2) {
        const lastResetElement = (_a5 = _FocusedElementState._lastResetElement) === null || _a5 === void 0 ? void 0 : _a5.get();
        _FocusedElementState._lastResetElement = void 0;
        if (lastResetElement === element2 || shouldIgnoreFocus(element2)) {
          return;
        }
        details.isFocusedProgrammatically = isFocusedProgrammatically;
        const ctx = RootAPI.getTabsterContext(this._tabster, element2);
        const modalizerId = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer) === null || _b === void 0 ? void 0 : _b.userId;
        if (modalizerId) {
          details.modalizerId = modalizerId;
        }
      }
      const nextVal = this._nextVal = {
        element: element2 ? new WeakHTMLElement(this._win, element2) : void 0,
        details
      };
      if (element2 && element2 !== this._val) {
        this._validateFocusedElement(element2);
      }
      if (this._nextVal === nextVal) {
        this.setVal(element2, details);
      }
      this._nextVal = void 0;
    }
    setVal(val, details) {
      super.setVal(val, details);
      if (val) {
        this._lastVal = new WeakHTMLElement(this._win, val);
      }
    }
    static findNextTabbable(tabster, ctx, container, currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      const actualContainer = container || ctx.root.getElement();
      if (!actualContainer) {
        return null;
      }
      let next4 = null;
      const isTabbingTimer = _FocusedElementState._isTabbingTimer;
      const win2 = tabster.getWindow();
      if (isTabbingTimer) {
        win2.clearTimeout(isTabbingTimer);
      }
      _FocusedElementState.isTabbing = true;
      _FocusedElementState._isTabbingTimer = win2.setTimeout(() => {
        delete _FocusedElementState._isTabbingTimer;
        _FocusedElementState.isTabbing = false;
      }, 0);
      const modalizer = ctx.modalizer;
      const groupper = ctx.groupper;
      const mover = ctx.mover;
      const callFindNext = (what) => {
        var _a5;
        next4 = what.findNextTabbable(currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility);
        if (currentElement && !(next4 === null || next4 === void 0 ? void 0 : next4.element) && !(next4 === null || next4 === void 0 ? void 0 : next4.uncontrolled)) {
          const parentElement = what !== modalizer && ((_a5 = what.getElement()) === null || _a5 === void 0 ? void 0 : _a5.parentElement);
          if (parentElement) {
            const parentCtx = RootAPI.getTabsterContext(tabster, currentElement, {
              referenceElement: parentElement
            });
            if (parentCtx) {
              const currentScopeElement = what.getElement();
              const newCurrent = isBackward ? currentScopeElement : currentScopeElement && getLastChild(currentScopeElement) || currentScopeElement;
              if (newCurrent) {
                next4 = _FocusedElementState.findNextTabbable(tabster, parentCtx, container, newCurrent, parentElement, isBackward, ignoreUncontrolled, ignoreAccessibility);
                if (next4) {
                  next4.outOfDOMOrder = true;
                }
              }
            }
          }
        }
      };
      if (groupper && mover) {
        callFindNext(ctx.isGroupperFirst ? groupper : mover);
      } else if (groupper) {
        callFindNext(groupper);
      } else if (mover) {
        callFindNext(mover);
      } else if (modalizer) {
        callFindNext(modalizer);
      } else {
        let uncontrolled;
        const onUncontrolled = (el) => {
          uncontrolled = el;
        };
        const findProps = {
          container: actualContainer,
          currentElement,
          referenceElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        };
        const findPropsOut = {};
        const nextElement = tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
        next4 = {
          element: uncontrolled ? void 0 : nextElement,
          uncontrolled,
          outOfDOMOrder: findPropsOut.outOfDOMOrder
        };
      }
      return next4;
    }
  };
  FocusedElementState.isTabbing = false;
  var GroupperDummyManager = class extends DummyInputManager {
    constructor(element2, groupper, tabster, sys) {
      super(tabster, element2, DummyInputManagerPriorities.Groupper, sys, true);
      this._setHandlers((dummyInput, isBackward, relatedTarget) => {
        var _a5, _b;
        const container = element2.get();
        const input = dummyInput.input;
        if (container && input) {
          const ctx = RootAPI.getTabsterContext(tabster, input);
          if (ctx) {
            let next4;
            next4 = (_a5 = groupper.findNextTabbable(relatedTarget || void 0, void 0, isBackward, true, true)) === null || _a5 === void 0 ? void 0 : _a5.element;
            if (!next4) {
              next4 = (_b = FocusedElementState.findNextTabbable(tabster, ctx, void 0, dummyInput.isOutside ? input : getAdjacentElement(container, !isBackward), void 0, isBackward, true, true)) === null || _b === void 0 ? void 0 : _b.element;
            }
            if (next4) {
              nativeFocus(next4);
            }
          }
        }
      });
    }
  };
  var Groupper = class extends TabsterPart {
    constructor(tabster, element2, onDispose, props, sys) {
      super(tabster, element2, props);
      this._shouldTabInside = false;
      this.makeTabbable(false);
      this._onDispose = onDispose;
      if (!tabster.controlTab) {
        this.dummyManager = new GroupperDummyManager(this._element, this, tabster, sys);
      }
    }
    dispose() {
      var _a5;
      this._onDispose(this);
      const element2 = this._element.get();
      (_a5 = this.dummyManager) === null || _a5 === void 0 ? void 0 : _a5.dispose();
      if (element2) {
        if (true) {
          _setInformativeStyle$1(this._element, true);
        }
      }
      delete this._first;
    }
    findNextTabbable(currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      var _a5;
      const groupperElement = this.getElement();
      if (!groupperElement) {
        return null;
      }
      const currentIsDummy = ((_a5 = currentElement === null || currentElement === void 0 ? void 0 : currentElement.__tabsterDummyContainer) === null || _a5 === void 0 ? void 0 : _a5.get()) === groupperElement;
      if (!this._shouldTabInside && currentElement && groupperElement.contains(currentElement) && !currentIsDummy) {
        return {
          element: void 0,
          outOfDOMOrder: true
        };
      }
      const groupperFirstFocusable = this.getFirst(true);
      if (!currentElement || !groupperElement.contains(currentElement) || currentIsDummy) {
        return {
          element: groupperFirstFocusable,
          outOfDOMOrder: true
        };
      }
      const tabster = this._tabster;
      let next4 = null;
      let uncontrolled;
      let outOfDOMOrder = false;
      const onUncontrolled = (el) => {
        uncontrolled = el;
      };
      if (this._shouldTabInside && groupperFirstFocusable) {
        const findProps = {
          container: groupperElement,
          currentElement,
          referenceElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        };
        const findPropsOut = {};
        next4 = tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
        outOfDOMOrder = !!findPropsOut.outOfDOMOrder;
        if (!uncontrolled && !next4 && this._props.tabbability === GroupperTabbabilities.LimitedTrapFocus) {
          next4 = isBackward ? tabster.focusable.findLast({
            container: groupperElement,
            ignoreUncontrolled: true,
            ignoreAccessibility,
            useActiveModalizer: true
          }) : tabster.focusable.findFirst({
            container: groupperElement,
            ignoreUncontrolled: true,
            ignoreAccessibility,
            useActiveModalizer: true
          });
          outOfDOMOrder = true;
        }
      }
      return {
        element: next4,
        uncontrolled,
        outOfDOMOrder
      };
    }
    makeTabbable(isTabbable) {
      this._shouldTabInside = isTabbable || !this._props.tabbability;
      if (true) {
        _setInformativeStyle$1(this._element, !this._shouldTabInside);
      }
    }
    isActive(noIfFirstIsFocused) {
      var _a5;
      const element2 = this.getElement() || null;
      let isParentActive = true;
      for (let e3 = element2 === null || element2 === void 0 ? void 0 : element2.parentElement; e3; e3 = e3.parentElement) {
        const g3 = (_a5 = getTabsterOnElement(this._tabster, e3)) === null || _a5 === void 0 ? void 0 : _a5.groupper;
        if (g3) {
          if (!g3._shouldTabInside) {
            isParentActive = false;
          }
        }
      }
      let ret = isParentActive ? this._props.tabbability ? this._shouldTabInside : false : void 0;
      if (ret && noIfFirstIsFocused) {
        const focused = this._tabster.focusedElement.getFocusedElement();
        if (focused) {
          ret = focused !== this.getFirst(true);
        }
      }
      return ret;
    }
    getFirst(orContainer) {
      var _a5;
      const groupperElement = this.getElement();
      let first2;
      if (groupperElement) {
        if (orContainer && this._tabster.focusable.isFocusable(groupperElement)) {
          return groupperElement;
        }
        first2 = (_a5 = this._first) === null || _a5 === void 0 ? void 0 : _a5.get();
        if (!first2) {
          first2 = this._tabster.focusable.findFirst({
            container: groupperElement,
            ignoreUncontrolled: true,
            useActiveModalizer: true
          }) || void 0;
          if (first2) {
            this.setFirst(first2);
          }
        }
      }
      return first2;
    }
    setFirst(element2) {
      if (element2) {
        this._first = new WeakHTMLElement(this._tabster.getWindow, element2);
      } else {
        delete this._first;
      }
    }
    acceptElement(element2, state) {
      var _a5;
      const cachedGrouppers = state.cachedGrouppers;
      const parentElement = (_a5 = this.getElement()) === null || _a5 === void 0 ? void 0 : _a5.parentElement;
      const parentCtx = parentElement && RootAPI.getTabsterContext(this._tabster, parentElement);
      const parentCtxGroupper = parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.groupper;
      const parentGroupper = (parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.isGroupperFirst) ? parentCtxGroupper : void 0;
      let parentGroupperElement;
      const getIsActive = (groupper) => {
        let cached = cachedGrouppers[groupper.id];
        let isActive2;
        if (cached) {
          isActive2 = cached.isActive;
        } else {
          isActive2 = this.isActive(true);
          cached = cachedGrouppers[groupper.id] = {
            isActive: isActive2
          };
        }
        return isActive2;
      };
      if (parentGroupper) {
        parentGroupperElement = parentGroupper.getElement();
        if (!getIsActive(parentGroupper) && parentGroupperElement && state.container !== parentGroupperElement && state.container.contains(parentGroupperElement)) {
          state.skippedFocusable = true;
          return NodeFilter.FILTER_REJECT;
        }
      }
      const isActive = getIsActive(this);
      const groupperElement = this.getElement();
      if (groupperElement) {
        if (isActive !== true) {
          if (groupperElement === element2 && parentCtxGroupper) {
            if (!parentGroupperElement) {
              parentGroupperElement = parentCtxGroupper.getElement();
            }
            if (parentGroupperElement && !getIsActive(parentCtxGroupper) && state.container.contains(parentGroupperElement) && parentGroupperElement !== state.container) {
              state.skippedFocusable = true;
              return NodeFilter.FILTER_REJECT;
            }
          }
          if (groupperElement !== element2 && groupperElement.contains(element2)) {
            state.skippedFocusable = true;
            return NodeFilter.FILTER_REJECT;
          }
          const cached = cachedGrouppers[this.id];
          let first2;
          if ("first" in cached) {
            first2 = cached.first;
          } else {
            first2 = cached.first = this.getFirst(true);
          }
          if (first2 && state.acceptCondition(first2)) {
            state.lastToIgnore = groupperElement;
            state.skippedFocusable = true;
            if (first2 !== state.from) {
              state.found = true;
              state.foundElement = first2;
              return NodeFilter.FILTER_ACCEPT;
            } else {
              return NodeFilter.FILTER_REJECT;
            }
          }
        }
      }
      return void 0;
    }
  };
  var GroupperAPI = class {
    constructor(tabster, getWindow3) {
      this._current = {};
      this._grouppers = {};
      this._init = () => {
        const win2 = this._win();
        this._tabster.focusedElement.subscribeFirst(this._onFocus);
        win2.document.addEventListener("mousedown", this._onMouseDown, true);
        win2.addEventListener("keydown", this._onKeyDown, true);
      };
      this._onGroupperDispose = (groupper) => {
        delete this._grouppers[groupper.id];
      };
      this._onFocus = (element2) => {
        if (element2) {
          this._updateCurrent(element2, true, true);
        }
      };
      this._onMouseDown = (e3) => {
        if (e3.target) {
          this._updateCurrent(e3.target, true);
        }
      };
      this._onKeyDown = (event) => {
        if (event.keyCode !== Keys.Enter && event.keyCode !== Keys.Esc) {
          return;
        }
        if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
          return;
        }
        const element2 = this._tabster.focusedElement.getFocusedElement();
        if (element2) {
          this.handleKeyPress(element2, event);
        }
      };
      this._tabster = tabster;
      this._win = getWindow3;
      tabster.queueInit(this._init);
    }
    dispose() {
      const win2 = this._win();
      this._current = {};
      if (this._updateTimer) {
        win2.clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      this._tabster.focusedElement.unsubscribe(this._onFocus);
      win2.document.removeEventListener("mousedown", this._onMouseDown, true);
      win2.removeEventListener("keydown", this._onKeyDown, true);
      Object.keys(this._grouppers).forEach((groupperId) => {
        if (this._grouppers[groupperId]) {
          this._grouppers[groupperId].dispose();
          delete this._grouppers[groupperId];
        }
      });
    }
    createGroupper(element2, props, sys) {
      if (true)
        ;
      const newGroupper = new Groupper(this._tabster, element2, this._onGroupperDispose, props, sys);
      this._grouppers[newGroupper.id] = newGroupper;
      const focusedElement = this._tabster.focusedElement.getFocusedElement();
      if (focusedElement && element2.contains(focusedElement) && !this._updateTimer) {
        this._updateTimer = this._win().setTimeout(() => {
          delete this._updateTimer;
          if (focusedElement === this._tabster.focusedElement.getFocusedElement()) {
            this._updateCurrent(focusedElement, true, true);
          }
        }, 0);
      }
      return newGroupper;
    }
    forgetCurrentGrouppers() {
      this._current = {};
    }
    _updateCurrent(element2, includeTarget, checkTarget) {
      var _a5;
      if (this._updateTimer) {
        this._win().clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      const newIds = {};
      let isTarget = true;
      for (let el = element2; el; el = el.parentElement) {
        const groupper = (_a5 = getTabsterOnElement(this._tabster, el)) === null || _a5 === void 0 ? void 0 : _a5.groupper;
        if (groupper) {
          newIds[groupper.id] = true;
          if (isTarget && checkTarget && el !== element2) {
            isTarget = false;
          }
          if (includeTarget || !isTarget) {
            this._current[groupper.id] = groupper;
            const isTabbable = groupper.isActive() || element2 !== el && (!groupper.getProps().delegated || groupper.getFirst(false) !== element2);
            groupper.makeTabbable(isTabbable);
          }
          isTarget = false;
        }
      }
      for (const id of Object.keys(this._current)) {
        const groupper = this._current[id];
        if (!(groupper.id in newIds)) {
          groupper.makeTabbable(false);
          groupper.setFirst(void 0);
          delete this._current[id];
        }
      }
    }
    handleKeyPress(element2, event, noGoUp) {
      var _a5;
      const tabster = this._tabster;
      const ctx = RootAPI.getTabsterContext(tabster, element2);
      const modalizerInGroupper = ctx === null || ctx === void 0 ? void 0 : ctx.modalizerInGroupper;
      let groupper = (ctx === null || ctx === void 0 ? void 0 : ctx.groupper) || modalizerInGroupper;
      if (ctx && groupper) {
        if (ctx.ignoreKeydown(event)) {
          return;
        }
        let next4;
        const groupperElement = groupper.getElement();
        if (event.keyCode === Keys.Enter) {
          if (groupperElement && (element2 === groupperElement || groupper.getProps().delegated && element2 === groupper.getFirst(false))) {
            next4 = tabster.focusable.findNext({
              container: groupperElement,
              currentElement: element2,
              useActiveModalizer: true
            });
          }
        } else if (event.keyCode === Keys.Esc) {
          if (groupperElement && groupperElement.contains(element2)) {
            if (element2 !== groupperElement || noGoUp) {
              next4 = groupper.getFirst(true);
            } else {
              const parentElement = groupperElement.parentElement;
              const parentCtx = parentElement ? RootAPI.getTabsterContext(tabster, parentElement) : void 0;
              groupper = parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.groupper;
              next4 = groupper === null || groupper === void 0 ? void 0 : groupper.getFirst(true);
            }
          }
          if (groupper) {
            groupper.makeTabbable(false);
            if (modalizerInGroupper) {
              (_a5 = tabster.modalizer) === null || _a5 === void 0 ? void 0 : _a5.setActive(void 0);
            }
          }
        }
        if (next4) {
          event.preventDefault();
          event.stopImmediatePropagation();
          next4.focus();
        }
      }
    }
  };
  function _setInformativeStyle$1(weakElement, remove) {
    if (true) {
      const element2 = weakElement.get();
      if (element2) {
        if (remove) {
          element2.style.removeProperty("--tabster-groupper");
        } else {
          element2.style.setProperty("--tabster-groupper", "unlimited");
        }
      }
    }
  }
  var KeyboardNavigationState = class extends Subscribable {
    constructor(getWindow3) {
      super();
      this._onChange = (isNavigatingWithKeyboard) => {
        this.setVal(isNavigatingWithKeyboard, void 0);
      };
      this._keyborg = createKeyborg(getWindow3());
      this._keyborg.subscribe(this._onChange);
    }
    dispose() {
      super.dispose();
      if (this._keyborg) {
        this._keyborg.unsubscribe(this._onChange);
        disposeKeyborg(this._keyborg);
        delete this._keyborg;
      }
    }
    setNavigatingWithKeyboard(isNavigatingWithKeyboard) {
      var _a5;
      (_a5 = this._keyborg) === null || _a5 === void 0 ? void 0 : _a5.setVal(isNavigatingWithKeyboard);
    }
    isNavigatingWithKeyboard() {
      var _a5;
      return !!((_a5 = this._keyborg) === null || _a5 === void 0 ? void 0 : _a5.isNavigatingWithKeyboard());
    }
  };
  var _wasFocusedCounter = 0;
  var _ariaHidden = "aria-hidden";
  function _setInformativeStyle(weakElement, remove, internalId, userId, isActive, wasFocused) {
    if (true) {
      const element2 = weakElement.get();
      if (element2) {
        if (remove) {
          element2.style.removeProperty("--tabster-modalizer");
        } else {
          element2.style.setProperty("--tabster-modalizer", internalId + "," + userId + "," + (isActive ? "active" : "inactive") + ",," + (wasFocused ? `focused(${wasFocused})` : "not-focused"));
        }
      }
    }
  }
  var ModalizerDummyManager = class extends DummyInputManager {
    constructor(element2, tabster, sys) {
      super(tabster, element2, DummyInputManagerPriorities.Modalizer, sys);
      this._setHandlers((dummyInput, isBackward) => {
        var _a5, _b, _c;
        const el = element2.get();
        const container = el && ((_a5 = RootAPI.getRoot(tabster, el)) === null || _a5 === void 0 ? void 0 : _a5.getElement());
        const input = dummyInput.input;
        let toFocus;
        if (container && input) {
          const dummyContainer = (_b = input.__tabsterDummyContainer) === null || _b === void 0 ? void 0 : _b.get();
          const ctx = RootAPI.getTabsterContext(tabster, dummyContainer || input);
          if (ctx) {
            toFocus = (_c = FocusedElementState.findNextTabbable(tabster, ctx, container, input, void 0, isBackward, true, true)) === null || _c === void 0 ? void 0 : _c.element;
          }
          if (toFocus) {
            nativeFocus(toFocus);
          }
        }
      });
    }
  };
  var Modalizer = class extends TabsterPart {
    constructor(tabster, element2, onDispose, props, sys, activeElements) {
      super(tabster, element2, props);
      this._wasFocused = 0;
      this.userId = props.id;
      this._onDispose = onDispose;
      this._activeElements = activeElements;
      if (!tabster.controlTab) {
        this.dummyManager = new ModalizerDummyManager(this._element, tabster, sys);
      }
      if (true) {
        _setInformativeStyle(this._element, false, this.id, this.userId, this._isActive, this._wasFocused);
      }
    }
    makeActive(isActive) {
      if (this._isActive !== isActive) {
        this._isActive = isActive;
        const element2 = this.getElement();
        if (element2) {
          const activeElements = this._activeElements;
          const index2 = activeElements.map((e3) => e3.deref()).indexOf(element2);
          if (isActive) {
            if (index2 < 0) {
              activeElements.push(new WeakRef(element2));
            }
          } else {
            if (index2 >= 0) {
              activeElements.splice(index2, 1);
            }
          }
        }
        if (true) {
          _setInformativeStyle(this._element, false, this.id, this.userId, this._isActive, this._wasFocused);
        }
        this.triggerFocusEvent(isActive ? ModalizerActiveEventName : ModalizerInactiveEventName);
      }
    }
    focused(noIncrement) {
      if (!noIncrement) {
        this._wasFocused = ++_wasFocusedCounter;
      }
      return this._wasFocused;
    }
    setProps(props) {
      if (props.id) {
        this.userId = props.id;
      }
      this._props = {
        ...props
      };
    }
    dispose() {
      var _a5;
      this.makeActive(false);
      this._onDispose(this);
      (_a5 = this.dummyManager) === null || _a5 === void 0 ? void 0 : _a5.dispose();
      this._activeElements = [];
      this._remove();
    }
    isActive() {
      return !!this._isActive;
    }
    contains(element2) {
      var _a5;
      return !!((_a5 = this.getElement()) === null || _a5 === void 0 ? void 0 : _a5.contains(element2));
    }
    findNextTabbable(currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      var _a5, _b;
      const modalizerElement = this.getElement();
      if (!modalizerElement) {
        return null;
      }
      const tabster = this._tabster;
      let next4 = null;
      let uncontrolled;
      let outOfDOMOrder = false;
      const onUncontrolled = (el) => {
        uncontrolled = el;
      };
      const container = currentElement && ((_a5 = RootAPI.getRoot(tabster, currentElement)) === null || _a5 === void 0 ? void 0 : _a5.getElement());
      if (container) {
        const findProps = {
          container,
          currentElement,
          referenceElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        };
        const findPropsOut = {};
        next4 = tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
        if (!uncontrolled && !next4 && this._props.isTrapped && ((_b = tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
          next4 = tabster.focusable[isBackward ? "findLast" : "findFirst"]({
            container,
            ignoreUncontrolled: true,
            ignoreAccessibility,
            useActiveModalizer: true
          });
          outOfDOMOrder = true;
        } else {
          outOfDOMOrder = !!findPropsOut.outOfDOMOrder;
        }
      }
      return {
        element: next4,
        uncontrolled,
        outOfDOMOrder
      };
    }
    triggerFocusEvent(eventName, allElements) {
      const element2 = this.getElement();
      let defaultPrevented = false;
      if (element2) {
        const elements = allElements ? this._activeElements.map((e3) => e3.deref()) : [element2];
        for (const el of elements) {
          if (el && !triggerEvent(el, eventName, {
            id: this.userId,
            element: element2,
            eventName
          })) {
            defaultPrevented = true;
          }
        }
      }
      return defaultPrevented;
    }
    _remove() {
      if (true) {
        _setInformativeStyle(this._element, true);
      }
    }
  };
  var ModalizerAPI = class {
    constructor(tabster, alwaysAccessibleSelector, accessibleCheck) {
      this._onModalizerDispose = (modalizer) => {
        const id = modalizer.id;
        const userId = modalizer.userId;
        const part = this._parts[userId];
        delete this._modalizers[id];
        if (part) {
          delete part[id];
          if (Object.keys(part).length === 0) {
            delete this._parts[userId];
            if (this.activeId === userId) {
              this.setActive(void 0);
            }
          }
        }
      };
      this._onKeyDown = (event) => {
        var _a5;
        if (event.keyCode !== Keys.Esc) {
          return;
        }
        const tabster2 = this._tabster;
        const element2 = tabster2.focusedElement.getFocusedElement();
        if (element2) {
          const ctx = RootAPI.getTabsterContext(tabster2, element2);
          const modalizer = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer;
          if (ctx && !ctx.groupper && (modalizer === null || modalizer === void 0 ? void 0 : modalizer.isActive()) && !ctx.ignoreKeydown(event)) {
            const activeId = modalizer.userId;
            if (activeId) {
              const part = this._parts[activeId];
              if (part) {
                const focusedSince = Object.keys(part).map((id) => {
                  var _a6;
                  const m2 = part[id];
                  const el = m2.getElement();
                  let groupper;
                  if (el) {
                    groupper = (_a6 = getTabsterOnElement(this._tabster, el)) === null || _a6 === void 0 ? void 0 : _a6.groupper;
                  }
                  return m2 && el && groupper ? {
                    el,
                    focusedSince: m2.focused(true)
                  } : {
                    focusedSince: 0
                  };
                }).filter((f4) => f4.focusedSince > 0).sort((a3, b4) => a3.focusedSince > b4.focusedSince ? -1 : a3.focusedSince < b4.focusedSince ? 1 : 0);
                if (focusedSince.length) {
                  const groupperElement = focusedSince[0].el;
                  if (groupperElement) {
                    (_a5 = tabster2.groupper) === null || _a5 === void 0 ? void 0 : _a5.handleKeyPress(groupperElement, event, true);
                  }
                }
              }
            }
          }
        }
      };
      this._onFocus = (focusedElement, details) => {
        var _a5, _b;
        const ctx = focusedElement && RootAPI.getTabsterContext(this._tabster, focusedElement);
        if (!ctx || !focusedElement) {
          return;
        }
        const augmentedMap = this._augMap;
        for (let e3 = focusedElement; e3; e3 = e3.parentElement) {
          if (augmentedMap.has(e3)) {
            augmentedMap.delete(e3);
            augmentAttribute(this._tabster, e3, _ariaHidden);
          }
        }
        const modalizer = ctx.modalizer;
        (_b = modalizer || ((_a5 = getTabsterOnElement(this._tabster, focusedElement)) === null || _a5 === void 0 ? void 0 : _a5.modalizer)) === null || _b === void 0 ? void 0 : _b.focused();
        if ((modalizer === null || modalizer === void 0 ? void 0 : modalizer.userId) === this.activeId) {
          this.currentIsOthersAccessible = modalizer === null || modalizer === void 0 ? void 0 : modalizer.getProps().isOthersAccessible;
          return;
        }
        if (details.isFocusedProgrammatically || this.currentIsOthersAccessible || (modalizer === null || modalizer === void 0 ? void 0 : modalizer.getProps().isAlwaysAccessible)) {
          this.setActive(modalizer);
        } else {
          const win3 = this._win();
          win3.clearTimeout(this._restoreModalizerFocusTimer);
          this._restoreModalizerFocusTimer = win3.setTimeout(() => this._restoreModalizerFocus(focusedElement), 100);
        }
      };
      this._tabster = tabster;
      this._win = tabster.getWindow;
      this._modalizers = {};
      this._parts = {};
      this._augMap = /* @__PURE__ */ new WeakMap();
      this._aug = [];
      this._alwaysAccessibleSelector = alwaysAccessibleSelector;
      this._accessibleCheck = accessibleCheck;
      this.activeElements = [];
      if (!tabster.controlTab) {
        tabster.root.addDummyInputs();
      }
      const win2 = this._win();
      win2.addEventListener("keydown", this._onKeyDown, true);
      tabster.queueInit(() => {
        this._tabster.focusedElement.subscribe(this._onFocus);
      });
    }
    dispose() {
      const win2 = this._win();
      win2.removeEventListener("keydown", this._onKeyDown, true);
      Object.keys(this._modalizers).forEach((modalizerId) => {
        if (this._modalizers[modalizerId]) {
          this._modalizers[modalizerId].dispose();
          delete this._modalizers[modalizerId];
        }
      });
      win2.clearTimeout(this._restoreModalizerFocusTimer);
      win2.clearTimeout(this._hiddenUpdateTimer);
      this._parts = {};
      delete this.activeId;
      this.activeElements = [];
      this._augMap = /* @__PURE__ */ new WeakMap();
      this._aug = [];
      this._tabster.focusedElement.unsubscribe(this._onFocus);
    }
    createModalizer(element2, props, sys) {
      var _a5;
      if (true)
        ;
      const modalizer = new Modalizer(this._tabster, element2, this._onModalizerDispose, props, sys, this.activeElements);
      const id = modalizer.id;
      const userId = props.id;
      this._modalizers[id] = modalizer;
      let part = this._parts[userId];
      if (!part) {
        part = this._parts[userId] = {};
      }
      part[id] = modalizer;
      if (element2.contains((_a5 = this._tabster.focusedElement.getFocusedElement()) !== null && _a5 !== void 0 ? _a5 : null)) {
        if (userId !== this.activeId) {
          this.setActive(modalizer);
        } else {
          modalizer.makeActive(true);
        }
      }
      return modalizer;
    }
    isAugmented(element2) {
      return this._augMap.has(element2);
    }
    hiddenUpdate() {
      if (this._hiddenUpdateTimer) {
        return;
      }
      this._hiddenUpdateTimer = this._win().setTimeout(() => {
        delete this._hiddenUpdateTimer;
        this._hiddenUpdate();
      }, 250);
    }
    setActive(modalizer) {
      const userId = modalizer === null || modalizer === void 0 ? void 0 : modalizer.userId;
      const activeId = this.activeId;
      if (activeId === userId) {
        return;
      }
      this.activeId = userId;
      if (activeId) {
        const part = this._parts[activeId];
        if (part) {
          for (const id of Object.keys(part)) {
            part[id].makeActive(false);
          }
        }
      }
      if (userId) {
        const part = this._parts[userId];
        if (part) {
          for (const id of Object.keys(part)) {
            part[id].makeActive(true);
          }
        }
      }
      this.currentIsOthersAccessible = modalizer === null || modalizer === void 0 ? void 0 : modalizer.getProps().isOthersAccessible;
      this.hiddenUpdate();
    }
    focus(elementFromModalizer, noFocusFirst, noFocusDefault) {
      const ctx = RootAPI.getTabsterContext(this._tabster, elementFromModalizer);
      const modalizer = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer;
      if (modalizer) {
        this.setActive(modalizer);
        const props = modalizer.getProps();
        const modalizerRoot = modalizer.getElement();
        if (modalizerRoot) {
          if (noFocusFirst === void 0) {
            noFocusFirst = props.isNoFocusFirst;
          }
          if (!noFocusFirst && this._tabster.keyboardNavigation.isNavigatingWithKeyboard() && this._tabster.focusedElement.focusFirst({
            container: modalizerRoot
          })) {
            return true;
          }
          if (noFocusDefault === void 0) {
            noFocusDefault = props.isNoFocusDefault;
          }
          if (!noFocusDefault && this._tabster.focusedElement.focusDefault(modalizerRoot)) {
            return true;
          }
          this._tabster.focusedElement.resetFocus(modalizerRoot);
        }
      } else if (true) {
        console.error("Element is not in Modalizer.", elementFromModalizer);
      }
      return false;
    }
    acceptElement(element2, state) {
      var _a5;
      const modalizerUserId = state.modalizerUserId;
      const currentModalizer = (_a5 = state.currentCtx) === null || _a5 === void 0 ? void 0 : _a5.modalizer;
      if (modalizerUserId) {
        for (const e3 of this.activeElements) {
          const el = e3.deref();
          if (el && (element2.contains(el) || el === element2)) {
            return NodeFilter.FILTER_SKIP;
          }
        }
      }
      const ret = modalizerUserId === (currentModalizer === null || currentModalizer === void 0 ? void 0 : currentModalizer.userId) || !modalizerUserId && (currentModalizer === null || currentModalizer === void 0 ? void 0 : currentModalizer.getProps().isAlwaysAccessible) ? void 0 : NodeFilter.FILTER_SKIP;
      if (ret !== void 0) {
        state.skippedFocusable = true;
      }
      return ret;
    }
    _hiddenUpdate() {
      var _a5;
      const tabster = this._tabster;
      const body = tabster.getWindow().document.body;
      const activeId = this.activeId;
      const parts = this._parts;
      const visibleElements = [];
      const hiddenElements = [];
      const alwaysAccessibleSelector = this._alwaysAccessibleSelector;
      const alwaysAccessibleElements = alwaysAccessibleSelector ? Array.from(body.querySelectorAll(alwaysAccessibleSelector)) : [];
      const activeModalizerElements = [];
      for (const userId of Object.keys(parts)) {
        const modalizerParts = parts[userId];
        for (const id of Object.keys(modalizerParts)) {
          const modalizer = modalizerParts[id];
          const el = modalizer.getElement();
          const props = modalizer.getProps();
          const isAlwaysAccessible = props.isAlwaysAccessible;
          if (el) {
            if (userId === activeId) {
              activeModalizerElements.push(el);
              if (!this.currentIsOthersAccessible) {
                visibleElements.push(el);
              }
            } else if (isAlwaysAccessible) {
              alwaysAccessibleElements.push(el);
            } else {
              hiddenElements.push(el);
            }
          }
        }
      }
      const augmentedMap = this._augMap;
      const allVisibleElements = visibleElements.length > 0 ? [...visibleElements, ...alwaysAccessibleElements] : void 0;
      const newAugmented = [];
      const newAugmentedMap = /* @__PURE__ */ new WeakMap();
      const toggle = (element2, hide2) => {
        var _a6;
        const tagName = element2.tagName;
        if (tagName === "SCRIPT" || tagName === "STYLE") {
          return;
        }
        let isAugmented = false;
        if (augmentedMap.has(element2)) {
          if (hide2) {
            isAugmented = true;
          } else {
            augmentedMap.delete(element2);
            augmentAttribute(tabster, element2, _ariaHidden);
          }
        } else if (hide2 && !((_a6 = this._accessibleCheck) === null || _a6 === void 0 ? void 0 : _a6.call(this, element2, activeModalizerElements)) && augmentAttribute(tabster, element2, _ariaHidden, "true")) {
          augmentedMap.set(element2, true);
          isAugmented = true;
        }
        if (isAugmented) {
          newAugmented.push(new WeakRef(element2));
          newAugmentedMap.set(element2, true);
        }
      };
      const walk = (element2) => {
        for (let el = element2.firstElementChild; el; el = el.nextElementSibling) {
          let skip = false;
          let containsModalizer = false;
          if (allVisibleElements) {
            for (const c3 of allVisibleElements) {
              if (el === c3) {
                skip = true;
                break;
              }
              if (el.contains(c3)) {
                containsModalizer = true;
                break;
              }
            }
            if (containsModalizer) {
              walk(el);
            } else if (!skip) {
              toggle(el, true);
            }
          } else {
            toggle(el, false);
          }
        }
      };
      if (!allVisibleElements) {
        alwaysAccessibleElements.forEach((e3) => toggle(e3, false));
      }
      hiddenElements.forEach((e3) => toggle(e3, true));
      if (body) {
        walk(body);
      }
      (_a5 = this._aug) === null || _a5 === void 0 ? void 0 : _a5.map((e3) => e3.deref()).forEach((e3) => {
        if (e3 && !newAugmentedMap.get(e3)) {
          toggle(e3, false);
        }
      });
      this._aug = newAugmented;
      this._augMap = newAugmentedMap;
    }
    /**
     * Called when an element is focused outside of an active modalizer.
     * Attempts to pull focus back into the active modalizer
     * @param outsideElement - An element being focused outside of the modalizer
     */
    _restoreModalizerFocus(outsideElement) {
      const ownerDocument = outsideElement === null || outsideElement === void 0 ? void 0 : outsideElement.ownerDocument;
      if (!outsideElement || !ownerDocument) {
        return;
      }
      const ctx = RootAPI.getTabsterContext(this._tabster, outsideElement);
      const modalizer = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer;
      const activeId = this.activeId;
      if (!modalizer && !activeId || modalizer && activeId === modalizer.userId) {
        return;
      }
      const container = ctx === null || ctx === void 0 ? void 0 : ctx.root.getElement();
      if (container) {
        let toFocus = this._tabster.focusable.findFirst({
          container,
          ignoreUncontrolled: true,
          useActiveModalizer: true
        });
        if (toFocus) {
          if (outsideElement.compareDocumentPosition(toFocus) & document.DOCUMENT_POSITION_PRECEDING) {
            toFocus = this._tabster.focusable.findLast({
              container,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
            if (!toFocus) {
              throw new Error("Something went wrong.");
            }
          }
          this._tabster.focusedElement.focus(toFocus);
          return;
        }
      }
      outsideElement.blur();
    }
  };
  var _inputSelector = /* @__PURE__ */ ["input", "textarea", "*[contenteditable]"].join(", ");
  var MoverDummyManager = class extends DummyInputManager {
    constructor(element2, tabster, getMemorized, sys) {
      super(tabster, element2, DummyInputManagerPriorities.Mover, sys);
      this._onFocusDummyInput = (dummyInput) => {
        var _a5, _b;
        const container = this._element.get();
        const input = dummyInput.input;
        if (container && input) {
          const ctx = RootAPI.getTabsterContext(this._tabster, container);
          let toFocus;
          if (ctx) {
            toFocus = (_a5 = FocusedElementState.findNextTabbable(this._tabster, ctx, void 0, input, void 0, !dummyInput.isFirst, true)) === null || _a5 === void 0 ? void 0 : _a5.element;
          }
          const memorized = (_b = this._getMemorized()) === null || _b === void 0 ? void 0 : _b.get();
          if (memorized) {
            toFocus = memorized;
          }
          if (toFocus) {
            nativeFocus(toFocus);
          }
        }
      };
      this._tabster = tabster;
      this._getMemorized = getMemorized;
      this._setHandlers(this._onFocusDummyInput);
    }
  };
  var _moverUpdateAdd = 1;
  var _moverUpdateAttr = 2;
  var _moverUpdateRemove = 3;
  var Mover = class extends TabsterPart {
    constructor(tabster, element2, onDispose, props, sys) {
      var _a5;
      super(tabster, element2, props);
      this._visible = {};
      this._onIntersection = (entries) => {
        for (const entry of entries) {
          const el = entry.target;
          const id = getElementUId(this._win, el);
          let newVisibility;
          let fullyVisible = this._fullyVisible;
          if (entry.intersectionRatio >= 0.25) {
            newVisibility = entry.intersectionRatio >= 0.75 ? Visibilities.Visible : Visibilities.PartiallyVisible;
            if (newVisibility === Visibilities.Visible) {
              fullyVisible = id;
            }
          } else {
            newVisibility = Visibilities.Invisible;
          }
          if (this._visible[id] !== newVisibility) {
            if (newVisibility === void 0) {
              delete this._visible[id];
              if (fullyVisible === id) {
                delete this._fullyVisible;
              }
            } else {
              this._visible[id] = newVisibility;
              this._fullyVisible = fullyVisible;
            }
            const state = this.getState(el);
            if (state) {
              triggerEvent(el, MoverEventName, state);
            }
          }
        }
      };
      this._win = tabster.getWindow;
      this.visibilityTolerance = (_a5 = props.visibilityTolerance) !== null && _a5 !== void 0 ? _a5 : 0.8;
      if (this._props.trackState || this._props.visibilityAware) {
        this._intersectionObserver = new IntersectionObserver(this._onIntersection, {
          threshold: [0, 0.25, 0.5, 0.75, 1]
        });
        this._observeState();
      }
      this._onDispose = onDispose;
      const getMemorized = () => props.memorizeCurrent ? this._current : void 0;
      if (!tabster.controlTab) {
        this.dummyManager = new MoverDummyManager(this._element, tabster, getMemorized, sys);
      }
    }
    dispose() {
      var _a5;
      this._onDispose(this);
      if (this._intersectionObserver) {
        this._intersectionObserver.disconnect();
        delete this._intersectionObserver;
      }
      delete this._current;
      delete this._fullyVisible;
      delete this._allElements;
      delete this._updateQueue;
      if (this._unobserve) {
        this._unobserve();
        delete this._unobserve;
      }
      const win2 = this._win();
      if (this._setCurrentTimer) {
        win2.clearTimeout(this._setCurrentTimer);
        delete this._setCurrentTimer;
      }
      if (this._updateTimer) {
        win2.clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      (_a5 = this.dummyManager) === null || _a5 === void 0 ? void 0 : _a5.dispose();
    }
    setCurrent(element2) {
      if (element2) {
        this._current = new WeakHTMLElement(this._win, element2);
      } else {
        this._current = void 0;
      }
      if ((this._props.trackState || this._props.visibilityAware) && !this._setCurrentTimer) {
        this._setCurrentTimer = this._win().setTimeout(() => {
          var _a5;
          delete this._setCurrentTimer;
          const changed = [];
          if (this._current !== this._prevCurrent) {
            changed.push(this._current);
            changed.push(this._prevCurrent);
            this._prevCurrent = this._current;
          }
          for (const weak of changed) {
            const el = weak === null || weak === void 0 ? void 0 : weak.get();
            if (el && ((_a5 = this._allElements) === null || _a5 === void 0 ? void 0 : _a5.get(el)) === this) {
              const props = this._props;
              if (el && (props.visibilityAware !== void 0 || props.trackState)) {
                const state = this.getState(el);
                if (state) {
                  triggerEvent(el, MoverEventName, state);
                }
              }
            }
          }
        });
      }
    }
    getCurrent() {
      var _a5;
      return ((_a5 = this._current) === null || _a5 === void 0 ? void 0 : _a5.get()) || null;
    }
    findNextTabbable(currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      var _a5;
      const container = this.getElement();
      const currentIsDummy = container && ((_a5 = currentElement === null || currentElement === void 0 ? void 0 : currentElement.__tabsterDummyContainer) === null || _a5 === void 0 ? void 0 : _a5.get()) === container;
      if (!container) {
        return null;
      }
      const tabster = this._tabster;
      let next4 = null;
      let uncontrolled;
      let outOfDOMOrder = false;
      const onUncontrolled = (el) => {
        uncontrolled = el;
      };
      if (this._props.tabbable || currentIsDummy || currentElement && !container.contains(currentElement)) {
        const findProps = {
          currentElement,
          referenceElement,
          container,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        };
        const findPropsOut = {};
        next4 = tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
        outOfDOMOrder = !!findPropsOut.outOfDOMOrder;
      }
      return {
        element: next4,
        uncontrolled,
        outOfDOMOrder
      };
    }
    acceptElement(element2, state) {
      var _a5, _b, _c;
      if (!FocusedElementState.isTabbing) {
        return ((_a5 = state.currentCtx) === null || _a5 === void 0 ? void 0 : _a5.isExcludedFromMover) ? NodeFilter.FILTER_REJECT : void 0;
      }
      const {
        memorizeCurrent,
        visibilityAware,
        hasDefault = true
      } = this._props;
      const moverElement = this.getElement();
      if (moverElement && (memorizeCurrent || visibilityAware || hasDefault) && (!moverElement.contains(state.from) || ((_b = state.from.__tabsterDummyContainer) === null || _b === void 0 ? void 0 : _b.get()) === moverElement)) {
        let found;
        if (memorizeCurrent) {
          const current = (_c = this._current) === null || _c === void 0 ? void 0 : _c.get();
          if (current && state.acceptCondition(current)) {
            found = current;
          }
        }
        if (!found && hasDefault) {
          found = this._tabster.focusable.findDefault({
            container: moverElement,
            ignoreUncontrolled: true,
            useActiveModalizer: true
          });
        }
        if (!found && visibilityAware) {
          found = this._tabster.focusable.findElement({
            container: moverElement,
            ignoreUncontrolled: true,
            useActiveModalizer: true,
            isBackward: state.isBackward,
            acceptCondition: (el) => {
              var _a6;
              const id = getElementUId(this._win, el);
              const visibility = this._visible[id];
              return moverElement !== el && !!((_a6 = this._allElements) === null || _a6 === void 0 ? void 0 : _a6.get(el)) && state.acceptCondition(el) && (visibility === Visibilities.Visible || visibility === Visibilities.PartiallyVisible && (visibilityAware === Visibilities.PartiallyVisible || !this._fullyVisible));
            }
          });
        }
        if (found) {
          state.found = true;
          state.foundElement = found;
          state.lastToIgnore = moverElement;
          state.skippedFocusable = true;
          return NodeFilter.FILTER_ACCEPT;
        }
      }
      return void 0;
    }
    _observeState() {
      const element2 = this.getElement();
      if (this._unobserve || !element2 || typeof MutationObserver === "undefined") {
        return;
      }
      const win2 = this._win();
      const allElements = this._allElements = /* @__PURE__ */ new WeakMap();
      const tabsterFocusable = this._tabster.focusable;
      let updateQueue = this._updateQueue = [];
      const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          const target = mutation.target;
          const removed = mutation.removedNodes;
          const added = mutation.addedNodes;
          if (mutation.type === "attributes") {
            if (mutation.attributeName === "tabindex") {
              updateQueue.push({
                element: target,
                type: _moverUpdateAttr
              });
            }
          } else {
            for (let i4 = 0; i4 < removed.length; i4++) {
              updateQueue.push({
                element: removed[i4],
                type: _moverUpdateRemove
              });
            }
            for (let i4 = 0; i4 < added.length; i4++) {
              updateQueue.push({
                element: added[i4],
                type: _moverUpdateAdd
              });
            }
          }
        }
        requestUpdate();
      });
      const setElement = (element3, remove) => {
        var _a5, _b;
        const current = allElements.get(element3);
        if (current && remove) {
          (_a5 = this._intersectionObserver) === null || _a5 === void 0 ? void 0 : _a5.unobserve(element3);
          allElements.delete(element3);
        }
        if (!current && !remove) {
          allElements.set(element3, this);
          (_b = this._intersectionObserver) === null || _b === void 0 ? void 0 : _b.observe(element3);
        }
      };
      const updateElement = (element3) => {
        const isFocusable = tabsterFocusable.isFocusable(element3);
        const current = allElements.get(element3);
        if (current) {
          if (!isFocusable) {
            setElement(element3, true);
          }
        } else {
          if (isFocusable) {
            setElement(element3);
          }
        }
      };
      const addNewElements = (element3) => {
        const {
          mover
        } = getMoverGroupper(element3);
        if (mover && mover !== this) {
          if (mover.getElement() === element3 && tabsterFocusable.isFocusable(element3)) {
            setElement(element3);
          } else {
            return;
          }
        }
        const walker = createElementTreeWalker(win2.document, element3, (node5) => {
          const {
            mover: mover2,
            groupper
          } = getMoverGroupper(node5);
          if (mover2 && mover2 !== this) {
            return NodeFilter.FILTER_REJECT;
          }
          const groupperFirstFocusable = groupper === null || groupper === void 0 ? void 0 : groupper.getFirst(true);
          if (groupper && groupper.getElement() !== node5 && groupperFirstFocusable && groupperFirstFocusable !== node5) {
            return NodeFilter.FILTER_REJECT;
          }
          if (tabsterFocusable.isFocusable(node5)) {
            setElement(node5);
          }
          return NodeFilter.FILTER_SKIP;
        });
        if (walker) {
          walker.currentNode = element3;
          while (walker.nextNode()) {
          }
        }
      };
      const removeWalk = (element3) => {
        const current = allElements.get(element3);
        if (current) {
          setElement(element3, true);
        }
        for (let el = element3.firstElementChild; el; el = el.nextElementSibling) {
          removeWalk(el);
        }
      };
      const requestUpdate = () => {
        if (!this._updateTimer && updateQueue.length) {
          this._updateTimer = win2.setTimeout(() => {
            delete this._updateTimer;
            for (const {
              element: element3,
              type
            } of updateQueue) {
              switch (type) {
                case _moverUpdateAttr:
                  updateElement(element3);
                  break;
                case _moverUpdateAdd:
                  addNewElements(element3);
                  break;
                case _moverUpdateRemove:
                  removeWalk(element3);
                  break;
              }
            }
            updateQueue = this._updateQueue = [];
          }, 0);
        }
      };
      const getMoverGroupper = (element3) => {
        const ret = {};
        for (let el = element3; el; el = el.parentElement) {
          const toe = getTabsterOnElement(this._tabster, el);
          if (toe) {
            if (toe.groupper && !ret.groupper) {
              ret.groupper = toe.groupper;
            }
            if (toe.mover) {
              ret.mover = toe.mover;
              break;
            }
          }
        }
        return ret;
      };
      updateQueue.push({
        element: element2,
        type: _moverUpdateAdd
      });
      requestUpdate();
      observer.observe(element2, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ["tabindex"]
      });
      this._unobserve = () => {
        observer.disconnect();
      };
    }
    getState(element2) {
      const id = getElementUId(this._win, element2);
      if (id in this._visible) {
        const visibility = this._visible[id] || Visibilities.Invisible;
        const isCurrent = this._current ? this._current.get() === element2 : void 0;
        return {
          isCurrent,
          visibility
        };
      }
      return void 0;
    }
  };
  function getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {
    const xDistance = ax2 < bx1 ? bx1 - ax2 : bx2 < ax1 ? ax1 - bx2 : 0;
    const yDistance = ay2 < by1 ? by1 - ay2 : by2 < ay1 ? ay1 - by2 : 0;
    return xDistance === 0 ? yDistance : yDistance === 0 ? xDistance : Math.sqrt(xDistance * xDistance + yDistance * yDistance);
  }
  var MoverAPI = class {
    constructor(tabster, getWindow3) {
      this._init = () => {
        const win2 = this._win();
        win2.addEventListener("keydown", this._onKeyDown, true);
        this._tabster.focusedElement.subscribe(this._onFocus);
      };
      this._onMoverDispose = (mover) => {
        delete this._movers[mover.id];
      };
      this._onFocus = (e3) => {
        var _a5;
        for (let el = e3; el; el = el.parentElement) {
          const mover = (_a5 = getTabsterOnElement(this._tabster, el)) === null || _a5 === void 0 ? void 0 : _a5.mover;
          if (mover) {
            mover.setCurrent(e3);
            break;
          }
        }
      };
      this._onKeyDown = async (event) => {
        var _a5, _b, _c, _d;
        if (this._ignoredInputTimer) {
          this._win().clearTimeout(this._ignoredInputTimer);
          delete this._ignoredInputTimer;
        }
        (_a5 = this._ignoredInputResolve) === null || _a5 === void 0 ? void 0 : _a5.call(this, false);
        let keyCode = event.keyCode;
        if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
          return;
        }
        switch (keyCode) {
          case Keys.Down:
          case Keys.Right:
          case Keys.Up:
          case Keys.Left:
          case Keys.PageDown:
          case Keys.PageUp:
          case Keys.Home:
          case Keys.End:
            break;
          default:
            return;
        }
        const tabster2 = this._tabster;
        const focused = tabster2.focusedElement.getFocusedElement();
        if (!focused || await this._isIgnoredInput(focused, keyCode)) {
          return;
        }
        const ctx = RootAPI.getTabsterContext(tabster2, focused, {
          checkRtl: true
        });
        if (!ctx || !ctx.mover || ctx.isExcludedFromMover || ctx.ignoreKeydown(event)) {
          return;
        }
        const mover = ctx.mover;
        const container = mover.getElement();
        if (ctx.isGroupperFirst) {
          const groupper = ctx.groupper;
          if (groupper && !groupper.isActive(true)) {
            for (let el = (_b = groupper.getElement()) === null || _b === void 0 ? void 0 : _b.parentElement; el && el !== container; el = el.parentElement) {
              if ((_d = (_c = getTabsterOnElement(tabster2, el)) === null || _c === void 0 ? void 0 : _c.groupper) === null || _d === void 0 ? void 0 : _d.isActive(true)) {
                return;
              }
            }
          } else {
            return;
          }
        }
        if (!container) {
          return;
        }
        const focusable = tabster2.focusable;
        const moverProps = mover.getProps();
        const direction = moverProps.direction || MoverDirections.Both;
        const isBoth = direction === MoverDirections.Both;
        const isVertical = isBoth || direction === MoverDirections.Vertical;
        const isHorizontal = isBoth || direction === MoverDirections.Horizontal;
        const isGridLinear = direction === MoverDirections.GridLinear;
        const isGrid = isGridLinear || direction === MoverDirections.Grid;
        const isCyclic = moverProps.cyclic;
        let next4;
        let focusedElementRect;
        let focusedElementX1 = 0;
        let focusedElementX2 = 0;
        if (isGrid) {
          focusedElementRect = focused.getBoundingClientRect();
          focusedElementX1 = Math.ceil(focusedElementRect.left);
          focusedElementX2 = Math.floor(focusedElementRect.right);
        }
        if (ctx.isRtl) {
          if (keyCode === Keys.Right) {
            keyCode = Keys.Left;
          } else if (keyCode === Keys.Left) {
            keyCode = Keys.Right;
          }
        }
        if (keyCode === Keys.Down && isVertical || keyCode === Keys.Right && (isHorizontal || isGrid)) {
          next4 = focusable.findNext({
            currentElement: focused,
            container,
            useActiveModalizer: true
          });
          if (next4 && isGrid) {
            const nextElementX1 = Math.ceil(next4.getBoundingClientRect().left);
            if (!isGridLinear && focusedElementX2 > nextElementX1) {
              next4 = void 0;
            }
          } else if (!next4 && isCyclic) {
            next4 = focusable.findFirst({
              container,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.Up && isVertical || keyCode === Keys.Left && (isHorizontal || isGrid)) {
          next4 = focusable.findPrev({
            currentElement: focused,
            container,
            useActiveModalizer: true
          });
          if (next4 && isGrid) {
            const nextElementX2 = Math.floor(next4.getBoundingClientRect().right);
            if (!isGridLinear && nextElementX2 > focusedElementX1) {
              next4 = void 0;
            }
          } else if (!next4 && isCyclic) {
            next4 = focusable.findLast({
              container,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.Home) {
          if (isGrid) {
            focusable.findElement({
              container,
              currentElement: focused,
              ignoreUncontrolled: true,
              useActiveModalizer: true,
              isBackward: true,
              acceptCondition: (el) => {
                var _a6;
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil((_a6 = el.getBoundingClientRect().left) !== null && _a6 !== void 0 ? _a6 : 0);
                if (el !== focused && focusedElementX1 <= nextElementX1) {
                  return true;
                }
                next4 = el;
                return false;
              }
            });
          } else {
            next4 = focusable.findFirst({
              container,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.End) {
          if (isGrid) {
            focusable.findElement({
              container,
              currentElement: focused,
              ignoreUncontrolled: true,
              useActiveModalizer: true,
              acceptCondition: (el) => {
                var _a6;
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil((_a6 = el.getBoundingClientRect().left) !== null && _a6 !== void 0 ? _a6 : 0);
                if (el !== focused && focusedElementX1 >= nextElementX1) {
                  return true;
                }
                next4 = el;
                return false;
              }
            });
          } else {
            next4 = focusable.findLast({
              container,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.PageUp) {
          focusable.findElement({
            currentElement: focused,
            container,
            useActiveModalizer: true,
            isBackward: true,
            acceptCondition: (el) => {
              if (!focusable.isFocusable(el)) {
                return false;
              }
              if (isElementVerticallyVisibleInContainer(this._win, el, mover.visibilityTolerance)) {
                next4 = el;
                return false;
              }
              return true;
            }
          });
          if (isGrid && next4) {
            const firstColumnX1 = Math.ceil(next4.getBoundingClientRect().left);
            focusable.findElement({
              currentElement: next4,
              container,
              useActiveModalizer: true,
              acceptCondition: (el) => {
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil(el.getBoundingClientRect().left);
                if (focusedElementX1 < nextElementX1 || firstColumnX1 >= nextElementX1) {
                  return true;
                }
                next4 = el;
                return false;
              }
            });
          }
          if (next4) {
            scrollIntoView(this._win, next4, false);
          }
        } else if (keyCode === Keys.PageDown) {
          focusable.findElement({
            currentElement: focused,
            container,
            useActiveModalizer: true,
            acceptCondition: (el) => {
              if (!focusable.isFocusable(el)) {
                return false;
              }
              if (isElementVerticallyVisibleInContainer(this._win, el, mover.visibilityTolerance)) {
                next4 = el;
                return false;
              }
              return true;
            }
          });
          if (isGrid && next4) {
            const lastColumnX1 = Math.ceil(next4.getBoundingClientRect().left);
            focusable.findElement({
              currentElement: next4,
              container,
              useActiveModalizer: true,
              isBackward: true,
              acceptCondition: (el) => {
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil(el.getBoundingClientRect().left);
                if (focusedElementX1 > nextElementX1 || lastColumnX1 <= nextElementX1) {
                  return true;
                }
                next4 = el;
                return false;
              }
            });
          }
          if (next4) {
            scrollIntoView(this._win, next4, true);
          }
        } else if (isGrid) {
          const isBackward = keyCode === Keys.Up;
          const ax1 = focusedElementX1;
          const ay1 = Math.ceil(focusedElementRect.top);
          const ax2 = focusedElementX2;
          const ay2 = Math.floor(focusedElementRect.bottom);
          let targetElement;
          let lastDistance;
          let lastIntersection = 0;
          focusable.findAll({
            container,
            currentElement: focused,
            isBackward,
            onElement: (el) => {
              const rect = el.getBoundingClientRect();
              const bx1 = Math.ceil(rect.left);
              const by1 = Math.ceil(rect.top);
              const bx2 = Math.floor(rect.right);
              const by2 = Math.floor(rect.bottom);
              if (isBackward && ay1 < by2 || !isBackward && ay2 > by1) {
                return true;
              }
              const xIntersectionWidth = Math.ceil(Math.min(ax2, bx2)) - Math.floor(Math.max(ax1, bx1));
              const minWidth = Math.ceil(Math.min(ax2 - ax1, bx2 - bx1));
              if (xIntersectionWidth > 0 && minWidth >= xIntersectionWidth) {
                const intersection = xIntersectionWidth / minWidth;
                if (intersection > lastIntersection) {
                  targetElement = el;
                  lastIntersection = intersection;
                }
              } else if (lastIntersection === 0) {
                const distance = getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2);
                if (lastDistance === void 0 || distance < lastDistance) {
                  lastDistance = distance;
                  targetElement = el;
                }
              } else if (lastIntersection > 0) {
                return false;
              }
              return true;
            }
          });
          next4 = targetElement;
        }
        if (next4) {
          event.preventDefault();
          event.stopImmediatePropagation();
          nativeFocus(next4);
        }
      };
      this._tabster = tabster;
      this._win = getWindow3;
      this._movers = {};
      tabster.queueInit(this._init);
    }
    dispose() {
      var _a5;
      const win2 = this._win();
      this._tabster.focusedElement.unsubscribe(this._onFocus);
      (_a5 = this._ignoredInputResolve) === null || _a5 === void 0 ? void 0 : _a5.call(this, false);
      if (this._ignoredInputTimer) {
        win2.clearTimeout(this._ignoredInputTimer);
        delete this._ignoredInputTimer;
      }
      win2.removeEventListener("keydown", this._onKeyDown, true);
      Object.keys(this._movers).forEach((moverId) => {
        if (this._movers[moverId]) {
          this._movers[moverId].dispose();
          delete this._movers[moverId];
        }
      });
    }
    createMover(element2, props, sys) {
      if (true)
        ;
      const newMover = new Mover(this._tabster, element2, this._onMoverDispose, props, sys);
      this._movers[newMover.id] = newMover;
      return newMover;
    }
    async _isIgnoredInput(element2, keyCode) {
      var _a5;
      if (element2.getAttribute("aria-expanded") === "true") {
        return true;
      }
      if (matchesSelector(element2, _inputSelector)) {
        let selectionStart = 0;
        let selectionEnd = 0;
        let textLength = 0;
        let asyncRet;
        if (element2.tagName === "INPUT" || element2.tagName === "TEXTAREA") {
          const type = element2.type;
          const value = element2.value;
          textLength = (value || "").length;
          if (type === "email" || type === "number") {
            if (textLength) {
              const selection = (_a5 = element2.ownerDocument.defaultView) === null || _a5 === void 0 ? void 0 : _a5.getSelection();
              if (selection) {
                const initialLength = selection.toString().length;
                const isBackward = keyCode === Keys.Left || keyCode === Keys.Up;
                selection.modify("extend", isBackward ? "backward" : "forward", "character");
                if (initialLength !== selection.toString().length) {
                  selection.modify("extend", isBackward ? "forward" : "backward", "character");
                  return true;
                } else {
                  textLength = 0;
                }
              }
            }
          } else {
            const selStart = element2.selectionStart;
            if (selStart === null) {
              return type === "hidden";
            }
            selectionStart = selStart || 0;
            selectionEnd = element2.selectionEnd || 0;
          }
        } else if (element2.contentEditable === "true") {
          asyncRet = new (getPromise(this._win))((resolve2) => {
            this._ignoredInputResolve = (value) => {
              delete this._ignoredInputResolve;
              resolve2(value);
            };
            const win2 = this._win();
            if (this._ignoredInputTimer) {
              win2.clearTimeout(this._ignoredInputTimer);
            }
            const {
              anchorNode: prevAnchorNode,
              focusNode: prevFocusNode,
              anchorOffset: prevAnchorOffset,
              focusOffset: prevFocusOffset
            } = win2.getSelection() || {};
            this._ignoredInputTimer = win2.setTimeout(() => {
              var _a6, _b, _c;
              delete this._ignoredInputTimer;
              const {
                anchorNode,
                focusNode,
                anchorOffset,
                focusOffset
              } = win2.getSelection() || {};
              if (anchorNode !== prevAnchorNode || focusNode !== prevFocusNode || anchorOffset !== prevAnchorOffset || focusOffset !== prevFocusOffset) {
                (_a6 = this._ignoredInputResolve) === null || _a6 === void 0 ? void 0 : _a6.call(this, false);
                return;
              }
              selectionStart = anchorOffset || 0;
              selectionEnd = focusOffset || 0;
              textLength = ((_b = element2.textContent) === null || _b === void 0 ? void 0 : _b.length) || 0;
              if (anchorNode && focusNode) {
                if (element2.contains(anchorNode) && element2.contains(focusNode)) {
                  if (anchorNode !== element2) {
                    let anchorFound = false;
                    const addOffsets = (node5) => {
                      if (node5 === anchorNode) {
                        anchorFound = true;
                      } else if (node5 === focusNode) {
                        return true;
                      }
                      const nodeText = node5.textContent;
                      if (nodeText && !node5.firstChild) {
                        const len = nodeText.length;
                        if (anchorFound) {
                          if (focusNode !== anchorNode) {
                            selectionEnd += len;
                          }
                        } else {
                          selectionStart += len;
                          selectionEnd += len;
                        }
                      }
                      let stop = false;
                      for (let e3 = node5.firstChild; e3 && !stop; e3 = e3.nextSibling) {
                        stop = addOffsets(e3);
                      }
                      return stop;
                    };
                    addOffsets(element2);
                  }
                }
              }
              (_c = this._ignoredInputResolve) === null || _c === void 0 ? void 0 : _c.call(this, true);
            }, 0);
          });
        }
        if (asyncRet && !await asyncRet) {
          return true;
        }
        if (selectionStart !== selectionEnd) {
          return true;
        }
        if (selectionStart > 0 && (keyCode === Keys.Left || keyCode === Keys.Up || keyCode === Keys.Home)) {
          return true;
        }
        if (selectionStart < textLength && (keyCode === Keys.Right || keyCode === Keys.Down || keyCode === Keys.End)) {
          return true;
        }
      }
      return false;
    }
  };
  function observeMutations(doc, tabster, updateTabsterByAttribute2, syncState) {
    if (typeof MutationObserver === "undefined") {
      return () => {
      };
    }
    const getWindow3 = tabster.getWindow;
    let elementByUId;
    const onMutation = (mutations) => {
      var _a5, _b, _c, _d, _e;
      for (const mutation of mutations) {
        const target = mutation.target;
        const removed = mutation.removedNodes;
        const added = mutation.addedNodes;
        if (mutation.type === "attributes") {
          if (mutation.attributeName === TabsterAttributeName) {
            updateTabsterByAttribute2(tabster, target);
          }
        } else {
          for (let i4 = 0; i4 < removed.length; i4++) {
            updateTabsterElements(removed[i4], true);
            (_b = (_a5 = tabster._dummyObserver).domChanged) === null || _b === void 0 ? void 0 : _b.call(_a5, target);
          }
          for (let i4 = 0; i4 < added.length; i4++) {
            updateTabsterElements(added[i4]);
            (_d = (_c = tabster._dummyObserver).domChanged) === null || _d === void 0 ? void 0 : _d.call(_c, target);
          }
        }
      }
      (_e = tabster.modalizer) === null || _e === void 0 ? void 0 : _e.hiddenUpdate();
    };
    function updateTabsterElements(node5, removed) {
      if (!elementByUId) {
        elementByUId = getInstanceContext(getWindow3).elementByUId;
      }
      processNode(node5, removed);
      const walker = createElementTreeWalker(doc, node5, (element2) => {
        return processNode(element2, removed);
      });
      if (walker) {
        while (walker.nextNode()) {
        }
      }
    }
    function processNode(element2, removed) {
      var _a5;
      if (!element2.getAttribute) {
        return NodeFilter.FILTER_SKIP;
      }
      const uid = element2.__tabsterElementUID;
      if (uid && elementByUId) {
        if (removed) {
          delete elementByUId[uid];
        } else {
          (_a5 = elementByUId[uid]) !== null && _a5 !== void 0 ? _a5 : elementByUId[uid] = new WeakHTMLElement(getWindow3, element2);
        }
      }
      if (getTabsterOnElement(tabster, element2) || element2.hasAttribute(TabsterAttributeName)) {
        updateTabsterByAttribute2(tabster, element2, removed);
      }
      return NodeFilter.FILTER_SKIP;
    }
    const observer = new MutationObserver(onMutation);
    if (syncState) {
      updateTabsterElements(getWindow3().document.body);
    }
    observer.observe(doc, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: [TabsterAttributeName]
    });
    return () => {
      observer.disconnect();
    };
  }
  var UncontrolledAPI = class {
    constructor() {
    }
  };
  var EVENT_NAME = "restorer:restorefocus";
  var HISOTRY_DEPTH = 10;
  var Restorer = class extends TabsterPart {
    constructor(tabster, element2, props) {
      var _a5;
      super(tabster, element2, props);
      this._hasFocus = false;
      this._onFocusOut = (e3) => {
        var _a6;
        const element3 = (_a6 = this._element) === null || _a6 === void 0 ? void 0 : _a6.get();
        if (element3 && e3.relatedTarget === null) {
          element3.dispatchEvent(new Event(EVENT_NAME, {
            bubbles: true
          }));
        }
        if (element3 && !element3.contains(e3.relatedTarget)) {
          this._hasFocus = false;
        }
      };
      this._onFocusIn = () => {
        this._hasFocus = true;
      };
      if (this._props.type === RestorerTypes.Source) {
        const element3 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
        element3 === null || element3 === void 0 ? void 0 : element3.addEventListener("focusout", this._onFocusOut);
        element3 === null || element3 === void 0 ? void 0 : element3.addEventListener("focusin", this._onFocusIn);
      }
    }
    dispose() {
      var _a5, _b;
      if (this._props.type === RestorerTypes.Source) {
        const element2 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
        element2 === null || element2 === void 0 ? void 0 : element2.removeEventListener("focusout", this._onFocusOut);
        element2 === null || element2 === void 0 ? void 0 : element2.removeEventListener("focusin", this._onFocusIn);
        if (this._hasFocus) {
          const doc = this._tabster.getWindow().document;
          (_b = doc.body) === null || _b === void 0 ? void 0 : _b.dispatchEvent(new Event(EVENT_NAME, {
            bubbles: true
          }));
        }
      }
    }
  };
  var RestorerAPI = class {
    constructor(tabster) {
      this._history = [];
      this._restoreFocusTimeout = 0;
      this._onRestoreFocus = (e3) => {
        const win2 = this._getWindow();
        if (this._restoreFocusTimeout) {
          win2.clearTimeout(this._restoreFocusTimeout);
        }
        this._restoreFocusTimeout = win2.setTimeout(() => this._restoreFocus(e3.target));
      };
      this._onFocusIn = (element2) => {
        var _a5;
        if (!element2) {
          return;
        }
        const tabsterAttribute = getTabsterOnElement(this._tabster, element2);
        if (((_a5 = tabsterAttribute === null || tabsterAttribute === void 0 ? void 0 : tabsterAttribute.restorer) === null || _a5 === void 0 ? void 0 : _a5.getProps().type) !== RestorerTypes.Target) {
          return;
        }
        this._addToHistory(element2);
      };
      this._restoreFocus = (source) => {
        var _a5, _b, _c;
        const doc = this._getWindow().document;
        if (doc.activeElement !== doc.body) {
          return;
        }
        if (
          // clicking on any empty space focuses body - this is can be a false positive
          !this._keyboardNavState.isNavigatingWithKeyboard() && // Source no longer exists on DOM - always restore focus
          doc.body.contains(source)
        ) {
          return;
        }
        let weakRef = this._history.pop();
        while (weakRef && !doc.body.contains((_b = (_a5 = weakRef.deref()) === null || _a5 === void 0 ? void 0 : _a5.parentElement) !== null && _b !== void 0 ? _b : null)) {
          weakRef = this._history.pop();
        }
        (_c = weakRef === null || weakRef === void 0 ? void 0 : weakRef.deref()) === null || _c === void 0 ? void 0 : _c.focus();
      };
      this._tabster = tabster;
      this._getWindow = tabster.getWindow;
      this._getWindow().addEventListener(EVENT_NAME, this._onRestoreFocus);
      this._keyboardNavState = tabster.keyboardNavigation;
      this._focusedElementState = tabster.focusedElement;
      this._focusedElementState.subscribe(this._onFocusIn);
    }
    dispose() {
      const win2 = this._getWindow();
      this._focusedElementState.unsubscribe(this._onFocusIn);
      win2.removeEventListener(EVENT_NAME, this._onRestoreFocus);
      if (this._restoreFocusTimeout) {
        win2.clearTimeout(this._restoreFocusTimeout);
      }
    }
    _addToHistory(element2) {
      var _a5;
      if (((_a5 = this._history[this._history.length - 1]) === null || _a5 === void 0 ? void 0 : _a5.deref()) === element2) {
        return;
      }
      if (this._history.length > HISOTRY_DEPTH) {
        this._history.shift();
      }
      this._history.push(new WeakRef(element2));
    }
    createRestorer(element2, props) {
      const restorer = new Restorer(this._tabster, element2, props);
      if (props.type === RestorerTypes.Target && element2.ownerDocument.activeElement === element2) {
        this._addToHistory(element2);
      }
      return restorer;
    }
  };
  var Tabster = class {
    constructor(tabster) {
      this.keyboardNavigation = tabster.keyboardNavigation;
      this.focusedElement = tabster.focusedElement;
      this.focusable = tabster.focusable;
      this.root = tabster.root;
      this.uncontrolled = tabster.uncontrolled;
      this.core = tabster;
    }
  };
  var TabsterCore = class {
    constructor(win2, props) {
      var _a5;
      this._forgetMemorizedElements = [];
      this._wrappers = /* @__PURE__ */ new Set();
      this._initQueue = [];
      this._version = "4.7.3";
      this._noop = false;
      this.getWindow = () => {
        if (!this._win) {
          throw new Error("Using disposed Tabster.");
        }
        return this._win;
      };
      this._storage = createWeakMap(win2);
      this._win = win2;
      const getWindow3 = this.getWindow;
      this.keyboardNavigation = new KeyboardNavigationState(getWindow3);
      this.focusedElement = new FocusedElementState(this, getWindow3);
      this.focusable = new FocusableAPI(this);
      this.root = new RootAPI(this, props === null || props === void 0 ? void 0 : props.autoRoot);
      this.uncontrolled = new UncontrolledAPI();
      this.controlTab = (_a5 = props === null || props === void 0 ? void 0 : props.controlTab) !== null && _a5 !== void 0 ? _a5 : true;
      this.rootDummyInputs = !!(props === null || props === void 0 ? void 0 : props.rootDummyInputs);
      this._dummyObserver = new DummyInputObserver(getWindow3);
      this.internal = {
        stopObserver: () => {
          if (this._unobserve) {
            this._unobserve();
            delete this._unobserve;
          }
        },
        resumeObserver: (syncState) => {
          if (!this._unobserve) {
            const doc = getWindow3().document;
            this._unobserve = observeMutations(doc, this, updateTabsterByAttribute, syncState);
          }
        }
      };
      startFakeWeakRefsCleanup(getWindow3);
      this.queueInit(() => {
        this.internal.resumeObserver(true);
      });
    }
    createTabster(noRefCount) {
      const wrapper = new Tabster(this);
      if (!noRefCount) {
        this._wrappers.add(wrapper);
      }
      return wrapper;
    }
    disposeTabster(wrapper, allInstances) {
      if (allInstances) {
        this._wrappers.clear();
      } else {
        this._wrappers.delete(wrapper);
      }
      if (this._wrappers.size === 0) {
        this.dispose();
      }
    }
    dispose() {
      var _a5, _b, _c, _d, _e, _f, _g, _h;
      this.internal.stopObserver();
      const win2 = this._win;
      win2 === null || win2 === void 0 ? void 0 : win2.clearTimeout(this._initTimer);
      delete this._initTimer;
      this._initQueue = [];
      this._forgetMemorizedElements = [];
      if (win2 && this._forgetMemorizedTimer) {
        win2.clearTimeout(this._forgetMemorizedTimer);
        delete this._forgetMemorizedTimer;
      }
      (_a5 = this.outline) === null || _a5 === void 0 ? void 0 : _a5.dispose();
      (_b = this.crossOrigin) === null || _b === void 0 ? void 0 : _b.dispose();
      (_c = this.deloser) === null || _c === void 0 ? void 0 : _c.dispose();
      (_d = this.groupper) === null || _d === void 0 ? void 0 : _d.dispose();
      (_e = this.mover) === null || _e === void 0 ? void 0 : _e.dispose();
      (_f = this.modalizer) === null || _f === void 0 ? void 0 : _f.dispose();
      (_g = this.observedElement) === null || _g === void 0 ? void 0 : _g.dispose();
      (_h = this.restorer) === null || _h === void 0 ? void 0 : _h.dispose();
      this.keyboardNavigation.dispose();
      this.focusable.dispose();
      this.focusedElement.dispose();
      this.root.dispose();
      this._dummyObserver.dispose();
      stopFakeWeakRefsCleanupAndClearStorage(this.getWindow);
      clearElementCache(this.getWindow);
      this._storage = /* @__PURE__ */ new WeakMap();
      this._wrappers.clear();
      if (win2) {
        disposeInstanceContext(win2);
        delete win2.__tabsterInstance;
        delete this._win;
      }
    }
    storageEntry(element2, addremove) {
      const storage = this._storage;
      let entry = storage.get(element2);
      if (entry) {
        if (addremove === false && Object.keys(entry).length === 0) {
          storage.delete(element2);
        }
      } else if (addremove === true) {
        entry = {};
        storage.set(element2, entry);
      }
      return entry;
    }
    forceCleanup() {
      if (!this._win) {
        return;
      }
      this._forgetMemorizedElements.push(this._win.document.body);
      if (this._forgetMemorizedTimer) {
        return;
      }
      this._forgetMemorizedTimer = this._win.setTimeout(() => {
        delete this._forgetMemorizedTimer;
        for (let el = this._forgetMemorizedElements.shift(); el; el = this._forgetMemorizedElements.shift()) {
          clearElementCache(this.getWindow, el);
          FocusedElementState.forgetMemorized(this.focusedElement, el);
        }
      }, 0);
      cleanupFakeWeakRefs(this.getWindow, true);
    }
    queueInit(callback) {
      var _a5;
      if (!this._win) {
        return;
      }
      this._initQueue.push(callback);
      if (!this._initTimer) {
        this._initTimer = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.setTimeout(() => {
          delete this._initTimer;
          this.drainInitQueue();
        }, 0);
      }
    }
    drainInitQueue() {
      if (!this._win) {
        return;
      }
      const queue = this._initQueue;
      this._initQueue = [];
      queue.forEach((callback) => callback());
    }
  };
  function createTabster(win2, props) {
    let tabster = getCurrentTabster(win2);
    if (tabster) {
      return tabster.createTabster();
    }
    tabster = new TabsterCore(win2, props);
    win2.__tabsterInstance = tabster;
    return tabster.createTabster();
  }
  function getGroupper(tabster) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.groupper) {
      tabsterCore.groupper = new GroupperAPI(tabsterCore, tabsterCore.getWindow);
    }
    return tabsterCore.groupper;
  }
  function getMover(tabster) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.mover) {
      tabsterCore.mover = new MoverAPI(tabsterCore, tabsterCore.getWindow);
    }
    return tabsterCore.mover;
  }
  function getModalizer(tabster, alwaysAccessibleSelector, accessibleCheck) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.modalizer) {
      tabsterCore.modalizer = new ModalizerAPI(tabsterCore, alwaysAccessibleSelector, accessibleCheck);
    }
    return tabsterCore.modalizer;
  }
  function getRestorer(tabster) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.restorer) {
      tabsterCore.restorer = new RestorerAPI(tabsterCore);
    }
    return tabsterCore.restorer;
  }
  function disposeTabster(tabster, allInstances) {
    tabster.core.disposeTabster(tabster, allInstances);
  }
  function getCurrentTabster(win2) {
    return win2.__tabsterInstance;
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useTabster.js
  var React33 = __toESM(require_react());
  var useTabster = () => {
    var _targetDocument;
    const { targetDocument } = useFluent();
    const defaultView = ((_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.defaultView) || void 0;
    const tabster = React33.useMemo(() => {
      if (!defaultView) {
        return null;
      }
      return createTabster(defaultView, {
        autoRoot: {},
        controlTab: false
      });
    }, [
      defaultView
    ]);
    useIsomorphicLayoutEffect(() => {
      return () => {
        if (tabster) {
          disposeTabster(tabster);
        }
      };
    }, [
      tabster
    ]);
    return tabster;
  };

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useTabsterAttributes.js
  var useTabsterAttributes = (props) => {
    useTabster();
    return getTabsterAttribute(props);
  };

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useArrowNavigationGroup.js
  var useArrowNavigationGroup = (options = {}) => {
    const {
      circular,
      axis,
      memorizeCurrent,
      tabbable,
      ignoreDefaultKeydown,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_hasDefault
    } = options;
    const tabster = useTabster();
    if (tabster) {
      getMover(tabster);
    }
    return useTabsterAttributes({
      mover: {
        cyclic: !!circular,
        direction: axisToMoverDirection(axis !== null && axis !== void 0 ? axis : "vertical"),
        memorizeCurrent,
        tabbable,
        hasDefault: unstable_hasDefault
      },
      ...ignoreDefaultKeydown && {
        focusable: {
          ignoreKeydown: ignoreDefaultKeydown
        }
      }
    });
  };
  function axisToMoverDirection(axis) {
    switch (axis) {
      case "horizontal":
        return Types.MoverDirections.Horizontal;
      case "grid":
        return Types.MoverDirections.Grid;
      case "grid-linear":
        return Types.MoverDirections.GridLinear;
      case "both":
        return Types.MoverDirections.Both;
      case "vertical":
      default:
        return Types.MoverDirections.Vertical;
    }
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusableGroup.js
  var useFocusableGroup = (options) => {
    var _options, _options1;
    const tabster = useTabster();
    if (tabster) {
      getGroupper(tabster);
    }
    return useTabsterAttributes({
      groupper: {
        tabbability: getTabbability((_options = options) === null || _options === void 0 ? void 0 : _options.tabBehavior)
      },
      focusable: {
        ignoreKeydown: (_options1 = options) === null || _options1 === void 0 ? void 0 : _options1.ignoreDefaultKeydown
      }
    });
  };
  var getTabbability = (tabBehavior) => {
    switch (tabBehavior) {
      case "unlimited":
        return Types.GroupperTabbabilities.Unlimited;
      case "limited":
        return Types.GroupperTabbabilities.Limited;
      case "limited-trap-focus":
        return Types.GroupperTabbabilities.LimitedTrapFocus;
      default:
        return void 0;
    }
  };

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusFinders.js
  var React34 = __toESM(require_react());
  var useFocusFinders = () => {
    const tabster = useTabster();
    const { targetDocument } = useFluent();
    const findAllFocusable = React34.useCallback((container, acceptCondition) => {
      var _tabster;
      return ((_tabster = tabster) === null || _tabster === void 0 ? void 0 : _tabster.focusable.findAll({
        container,
        acceptCondition
      })) || [];
    }, [
      tabster
    ]);
    const findFirstFocusable = React34.useCallback((container) => {
      var _tabster;
      return (_tabster = tabster) === null || _tabster === void 0 ? void 0 : _tabster.focusable.findFirst({
        container
      });
    }, [
      tabster
    ]);
    const findLastFocusable = React34.useCallback((container) => {
      var _tabster;
      return (_tabster = tabster) === null || _tabster === void 0 ? void 0 : _tabster.focusable.findLast({
        container
      });
    }, [
      tabster
    ]);
    const findNextFocusable = React34.useCallback((currentElement, options = {}) => {
      if (!tabster || !targetDocument) {
        return null;
      }
      const { container = targetDocument.body } = options;
      return tabster.focusable.findNext({
        currentElement,
        container
      });
    }, [
      tabster,
      targetDocument
    ]);
    const findPrevFocusable = React34.useCallback((currentElement, options = {}) => {
      if (!tabster || !targetDocument) {
        return null;
      }
      const { container = targetDocument.body } = options;
      return tabster.focusable.findPrev({
        currentElement,
        container
      });
    }, [
      tabster,
      targetDocument
    ]);
    return {
      findAllFocusable,
      findFirstFocusable,
      findLastFocusable,
      findNextFocusable,
      findPrevFocusable
    };
  };

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusVisible.js
  var React35 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabster/lib/focus/constants.js
  var KEYBOARD_NAV_ATTRIBUTE = "data-keyboard-nav";
  var KEYBOARD_NAV_SELECTOR = `:global([${KEYBOARD_NAV_ATTRIBUTE}])`;
  var FOCUS_VISIBLE_ATTR = "data-fui-focus-visible";
  var FOCUS_WITHIN_ATTR = "data-fui-focus-within";

  // ../node_modules/@fluentui/react-tabster/lib/focus/focusVisiblePolyfill.js
  function applyFocusVisiblePolyfill(scope, targetWindow) {
    if (alreadyInScope(scope)) {
      return () => void 0;
    }
    const state = {
      current: void 0
    };
    const keyborg = createKeyborg(targetWindow);
    keyborg.subscribe((isNavigatingWithKeyboard) => {
      if (!isNavigatingWithKeyboard && state.current) {
        removeFocusVisibleClass(state.current);
        state.current = void 0;
      }
    });
    const keyborgListener = (e3) => {
      if (state.current) {
        removeFocusVisibleClass(state.current);
        state.current = void 0;
      }
      if (keyborg.isNavigatingWithKeyboard() && isHTMLElement(e3.target) && e3.target) {
        state.current = e3.target;
        applyFocusVisibleClass(state.current);
      }
    };
    const blurListener = (e3) => {
      if (!e3.relatedTarget || isHTMLElement(e3.relatedTarget) && !scope.contains(e3.relatedTarget)) {
        if (state.current) {
          removeFocusVisibleClass(state.current);
          state.current = void 0;
        }
      }
    };
    scope.addEventListener(KEYBORG_FOCUSIN, keyborgListener);
    scope.addEventListener("focusout", blurListener);
    scope.focusVisible = true;
    return () => {
      scope.removeEventListener(KEYBORG_FOCUSIN, keyborgListener);
      scope.removeEventListener("focusout", blurListener);
      delete scope.focusVisible;
      disposeKeyborg(keyborg);
    };
  }
  function applyFocusVisibleClass(el) {
    el.setAttribute(FOCUS_VISIBLE_ATTR, "");
  }
  function removeFocusVisibleClass(el) {
    el.removeAttribute(FOCUS_VISIBLE_ATTR);
  }
  function alreadyInScope(el) {
    var _el;
    if (!el) {
      return false;
    }
    if (el.focusVisible) {
      return true;
    }
    return alreadyInScope((_el = el) === null || _el === void 0 ? void 0 : _el.parentElement);
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusVisible.js
  function useFocusVisible(options = {}) {
    const contextValue = useFluent();
    const scopeRef = React35.useRef(null);
    var _options_targetDocument;
    const targetDocument = (_options_targetDocument = options.targetDocument) !== null && _options_targetDocument !== void 0 ? _options_targetDocument : contextValue.targetDocument;
    React35.useEffect(() => {
      var _targetDocument;
      if (((_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.defaultView) && scopeRef.current) {
        return applyFocusVisiblePolyfill(scopeRef.current, targetDocument.defaultView);
      }
    }, [
      scopeRef,
      targetDocument
    ]);
    return scopeRef;
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusWithin.js
  var React36 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabster/lib/focus/focusWithinPolyfill.js
  function applyFocusWithinPolyfill(element2, win2) {
    const keyborg = createKeyborg(win2);
    keyborg.subscribe((isNavigatingWithKeyboard) => {
      if (!isNavigatingWithKeyboard) {
        removeFocusWithinClass(element2);
      }
    });
    const keyborgListener = (e3) => {
      if (keyborg.isNavigatingWithKeyboard() && isHTMLElement2(e3.target)) {
        applyFocusWithinClass(element2);
      }
    };
    const blurListener = (e3) => {
      if (!e3.relatedTarget || isHTMLElement2(e3.relatedTarget) && !element2.contains(e3.relatedTarget)) {
        removeFocusWithinClass(element2);
      }
    };
    element2.addEventListener(KEYBORG_FOCUSIN, keyborgListener);
    element2.addEventListener("focusout", blurListener);
    return () => {
      element2.removeEventListener(KEYBORG_FOCUSIN, keyborgListener);
      element2.removeEventListener("focusout", blurListener);
      disposeKeyborg(keyborg);
    };
  }
  function applyFocusWithinClass(el) {
    el.setAttribute(FOCUS_WITHIN_ATTR, "");
  }
  function removeFocusWithinClass(el) {
    el.removeAttribute(FOCUS_WITHIN_ATTR);
  }
  function isHTMLElement2(target) {
    if (!target) {
      return false;
    }
    return Boolean(target && typeof target === "object" && "classList" in target && "contains" in target);
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusWithin.js
  function useFocusWithin() {
    const { targetDocument } = useFluent();
    const elementRef = React36.useRef(null);
    React36.useEffect(() => {
      var _targetDocument;
      if (((_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.defaultView) && elementRef.current) {
        return applyFocusWithinPolyfill(elementRef.current, targetDocument.defaultView);
      }
    }, [
      elementRef,
      targetDocument
    ]);
    return elementRef;
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useModalAttributes.js
  var useModalAttributes = (options = {}) => {
    const { trapFocus, alwaysFocusable, legacyTrapFocus } = options;
    const tabster = useTabster();
    if (tabster) {
      getModalizer(tabster);
      getRestorer(tabster);
    }
    const id = useId2("modal-", options.id);
    const modalAttributes = useTabsterAttributes({
      restorer: {
        type: Types.RestorerTypes.Source
      },
      ...trapFocus && {
        modalizer: {
          id,
          isOthersAccessible: !trapFocus,
          isAlwaysAccessible: alwaysFocusable,
          isTrapped: legacyTrapFocus && trapFocus
        }
      }
    });
    const triggerAttributes = useTabsterAttributes({
      restorer: {
        type: Types.RestorerTypes.Target
      }
    });
    return {
      modalAttributes,
      triggerAttributes
    };
  };

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useRestoreFocus.js
  function useRestoreFocusTarget() {
    const tabster = useTabster();
    if (tabster) {
      getRestorer(tabster);
    }
    return getTabsterAttribute({
      restorer: {
        type: Types.RestorerTypes.Target
      }
    });
  }
  function useRestoreFocusSource() {
    const tabster = useTabster();
    if (tabster) {
      getRestorer(tabster);
    }
    return getTabsterAttribute({
      restorer: {
        type: Types.RestorerTypes.Source
      }
    });
  }

  // ../node_modules/@fluentui/tokens/lib/global/colors.js
  var grey = {
    "2": "#050505",
    "4": "#0a0a0a",
    "6": "#0f0f0f",
    "8": "#141414",
    "10": "#1a1a1a",
    "12": "#1f1f1f",
    "14": "#242424",
    "16": "#292929",
    "18": "#2e2e2e",
    "20": "#333333",
    "22": "#383838",
    "24": "#3d3d3d",
    "26": "#424242",
    "28": "#474747",
    "30": "#4d4d4d",
    "32": "#525252",
    "34": "#575757",
    "36": "#5c5c5c",
    "38": "#616161",
    "40": "#666666",
    "42": "#6b6b6b",
    "44": "#707070",
    "46": "#757575",
    "48": "#7a7a7a",
    "50": "#808080",
    "52": "#858585",
    "54": "#8a8a8a",
    "56": "#8f8f8f",
    "58": "#949494",
    "60": "#999999",
    "62": "#9e9e9e",
    "64": "#a3a3a3",
    "66": "#a8a8a8",
    "68": "#adadad",
    "70": "#b3b3b3",
    "72": "#b8b8b8",
    "74": "#bdbdbd",
    "76": "#c2c2c2",
    "78": "#c7c7c7",
    "80": "#cccccc",
    "82": "#d1d1d1",
    "84": "#d6d6d6",
    "86": "#dbdbdb",
    "88": "#e0e0e0",
    "90": "#e6e6e6",
    "92": "#ebebeb",
    "94": "#f0f0f0",
    "96": "#f5f5f5",
    "98": "#fafafa"
  };
  var whiteAlpha = {
    "5": "rgba(255, 255, 255, 0.05)",
    "10": "rgba(255, 255, 255, 0.1)",
    "20": "rgba(255, 255, 255, 0.2)",
    "30": "rgba(255, 255, 255, 0.3)",
    "40": "rgba(255, 255, 255, 0.4)",
    "50": "rgba(255, 255, 255, 0.5)",
    "60": "rgba(255, 255, 255, 0.6)",
    "70": "rgba(255, 255, 255, 0.7)",
    "80": "rgba(255, 255, 255, 0.8)",
    "90": "rgba(255, 255, 255, 0.9)"
  };
  var blackAlpha = {
    "5": "rgba(0, 0, 0, 0.05)",
    "10": "rgba(0, 0, 0, 0.1)",
    "20": "rgba(0, 0, 0, 0.2)",
    "30": "rgba(0, 0, 0, 0.3)",
    "40": "rgba(0, 0, 0, 0.4)",
    "50": "rgba(0, 0, 0, 0.5)",
    "60": "rgba(0, 0, 0, 0.6)",
    "70": "rgba(0, 0, 0, 0.7)",
    "80": "rgba(0, 0, 0, 0.8)",
    "90": "rgba(0, 0, 0, 0.9)"
  };
  var grey10Alpha = {
    "5": "rgba(26, 26, 26, 0.05)",
    "10": "rgba(26, 26, 26, 0.1)",
    "20": "rgba(26, 26, 26, 0.2)",
    "30": "rgba(26, 26, 26, 0.3)",
    "40": "rgba(26, 26, 26, 0.4)",
    "50": "rgba(26, 26, 26, 0.5)",
    "60": "rgba(26, 26, 26, 0.6)",
    "70": "rgba(26, 26, 26, 0.7)",
    "80": "rgba(26, 26, 26, 0.8)",
    "90": "rgba(26, 26, 26, 0.9)"
  };
  var grey12Alpha = {
    "5": "rgba(31, 31, 31, 0.05)",
    "10": "rgba(31, 31, 31, 0.1)",
    "20": "rgba(31, 31, 31, 0.2)",
    "30": "rgba(31, 31, 31, 0.3)",
    "40": "rgba(31, 31, 31, 0.4)",
    "50": "rgba(31, 31, 31, 0.5)",
    "60": "rgba(31, 31, 31, 0.6)",
    "70": "rgba(31, 31, 31, 0.7)",
    "80": "rgba(31, 31, 31, 0.8)",
    "90": "rgba(31, 31, 31, 0.9)"
  };
  var grey14Alpha = {
    "5": "rgba(36, 36, 36, 0.05)",
    "10": "rgba(36, 36, 36, 0.1)",
    "20": "rgba(36, 36, 36, 0.2)",
    "30": "rgba(36, 36, 36, 0.3)",
    "40": "rgba(36, 36, 36, 0.4)",
    "50": "rgba(36, 36, 36, 0.5)",
    "60": "rgba(36, 36, 36, 0.6)",
    "70": "rgba(36, 36, 36, 0.7)",
    "80": "rgba(36, 36, 36, 0.8)",
    "90": "rgba(36, 36, 36, 0.9)"
  };
  var white = "#ffffff";
  var black = "#000000";
  var darkRed = {
    shade50: "#130204",
    shade40: "#230308",
    shade30: "#420610",
    shade20: "#590815",
    shade10: "#690a19",
    primary: "#750b1c",
    tint10: "#861b2c",
    tint20: "#962f3f",
    tint30: "#ac4f5e",
    tint40: "#d69ca5",
    tint50: "#e9c7cd",
    tint60: "#f9f0f2"
  };
  var cranberry = {
    shade50: "#200205",
    shade40: "#3b0509",
    shade30: "#6e0811",
    shade20: "#960b18",
    shade10: "#b10e1c",
    primary: "#c50f1f",
    tint10: "#cc2635",
    tint20: "#d33f4c",
    tint30: "#dc626d",
    tint40: "#eeacb2",
    tint50: "#f6d1d5",
    tint60: "#fdf3f4"
  };
  var red = {
    shade50: "#210809",
    shade40: "#3f1011",
    shade30: "#751d1f",
    shade20: "#9f282b",
    shade10: "#bc2f32",
    primary: "#d13438",
    tint10: "#d7494c",
    tint20: "#dc5e62",
    tint30: "#e37d80",
    tint40: "#f1bbbc",
    tint50: "#f8dadb",
    tint60: "#fdf6f6"
  };
  var darkOrange = {
    shade50: "#230900",
    shade40: "#411200",
    shade30: "#7a2101",
    shade20: "#a62d01",
    shade10: "#c43501",
    primary: "#da3b01",
    tint10: "#de501c",
    tint20: "#e36537",
    tint30: "#e9835e",
    tint40: "#f4bfab",
    tint50: "#f9dcd1",
    tint60: "#fdf6f3"
  };
  var pumpkin = {
    shade50: "#200d03",
    shade40: "#3d1805",
    shade30: "#712d09",
    shade20: "#9a3d0c",
    shade10: "#b6480e",
    primary: "#ca5010",
    tint10: "#d06228",
    tint20: "#d77440",
    tint30: "#df8e64",
    tint40: "#efc4ad",
    tint50: "#f7dfd2",
    tint60: "#fdf7f4"
  };
  var orange = {
    shade50: "#271002",
    shade40: "#4a1e04",
    shade30: "#8a3707",
    shade20: "#bc4b09",
    shade10: "#de590b",
    primary: "#f7630c",
    tint10: "#f87528",
    tint20: "#f98845",
    tint30: "#faa06b",
    tint40: "#fdcfb4",
    tint50: "#fee5d7",
    tint60: "#fff9f5"
  };
  var peach = {
    shade50: "#291600",
    shade40: "#4d2a00",
    shade30: "#8f4e00",
    shade20: "#c26a00",
    shade10: "#e67e00",
    primary: "#ff8c00",
    tint10: "#ff9a1f",
    tint20: "#ffa83d",
    tint30: "#ffba66",
    tint40: "#ffddb3",
    tint50: "#ffedd6",
    tint60: "#fffaf5"
  };
  var marigold = {
    shade50: "#251a00",
    shade40: "#463100",
    shade30: "#835b00",
    shade20: "#b27c00",
    shade10: "#d39300",
    primary: "#eaa300",
    tint10: "#edad1c",
    tint20: "#efb839",
    tint30: "#f2c661",
    tint40: "#f9e2ae",
    tint50: "#fcefd3",
    tint60: "#fefbf4"
  };
  var yellow = {
    primary: "#fde300",
    shade10: "#e4cc00",
    shade20: "#c0ad00",
    shade30: "#817400",
    shade40: "#4c4400",
    shade50: "#282400",
    tint10: "#fde61e",
    tint20: "#fdea3d",
    tint30: "#feee66",
    tint40: "#fef7b2",
    tint50: "#fffad6",
    tint60: "#fffef5"
  };
  var gold = {
    shade50: "#1f1900",
    shade40: "#3a2f00",
    shade30: "#6c5700",
    shade20: "#937700",
    shade10: "#ae8c00",
    primary: "#c19c00",
    tint10: "#c8a718",
    tint20: "#d0b232",
    tint30: "#dac157",
    tint40: "#ecdfa5",
    tint50: "#f5eece",
    tint60: "#fdfbf2"
  };
  var brass = {
    shade50: "#181202",
    shade40: "#2e2103",
    shade30: "#553e06",
    shade20: "#745408",
    shade10: "#89640a",
    primary: "#986f0b",
    tint10: "#a47d1e",
    tint20: "#b18c34",
    tint30: "#c1a256",
    tint40: "#e0cea2",
    tint50: "#efe4cb",
    tint60: "#fbf8f2"
  };
  var brown = {
    shade50: "#170e07",
    shade40: "#2b1a0e",
    shade30: "#50301a",
    shade20: "#6c4123",
    shade10: "#804d29",
    primary: "#8e562e",
    tint10: "#9c663f",
    tint20: "#a97652",
    tint30: "#bb8f6f",
    tint40: "#ddc3b0",
    tint50: "#edded3",
    tint60: "#faf7f4"
  };
  var forest = {
    shade50: "#0c1501",
    shade40: "#162702",
    shade30: "#294903",
    shade20: "#376304",
    shade10: "#427505",
    primary: "#498205",
    tint10: "#599116",
    tint20: "#6ba02b",
    tint30: "#85b44c",
    tint40: "#bdd99b",
    tint50: "#dbebc7",
    tint60: "#f6faf0"
  };
  var seafoam = {
    shade50: "#002111",
    shade40: "#003d20",
    shade30: "#00723b",
    shade20: "#009b51",
    shade10: "#00b85f",
    primary: "#00cc6a",
    tint10: "#19d279",
    tint20: "#34d889",
    tint30: "#5ae0a0",
    tint40: "#a8f0cd",
    tint50: "#cff7e4",
    tint60: "#f3fdf8"
  };
  var lightGreen = {
    shade50: "#031a02",
    shade40: "#063004",
    shade30: "#0b5a08",
    shade20: "#0e7a0b",
    shade10: "#11910d",
    primary: "#13a10e",
    tint10: "#27ac22",
    tint20: "#3db838",
    tint30: "#5ec75a",
    tint40: "#a7e3a5",
    tint50: "#cef0cd",
    tint60: "#f2fbf2"
  };
  var green = {
    shade50: "#031403",
    shade40: "#052505",
    shade30: "#094509",
    shade20: "#0c5e0c",
    shade10: "#0e700e",
    primary: "#107c10",
    tint10: "#218c21",
    tint20: "#359b35",
    tint30: "#54b054",
    tint40: "#9fd89f",
    tint50: "#c9eac9",
    tint60: "#f1faf1"
  };
  var darkGreen = {
    shade50: "#021102",
    shade40: "#032003",
    shade30: "#063b06",
    shade20: "#085108",
    shade10: "#0a5f0a",
    primary: "#0b6a0b",
    tint10: "#1a7c1a",
    tint20: "#2d8e2d",
    tint30: "#4da64d",
    tint40: "#9ad29a",
    tint50: "#c6e7c6",
    tint60: "#f0f9f0"
  };
  var lightTeal = {
    shade50: "#001d1f",
    shade40: "#00373a",
    shade30: "#00666d",
    shade20: "#008b94",
    shade10: "#00a5af",
    primary: "#00b7c3",
    tint10: "#18bfca",
    tint20: "#32c8d1",
    tint30: "#58d3db",
    tint40: "#a6e9ed",
    tint50: "#cef3f5",
    tint60: "#f2fcfd"
  };
  var teal = {
    shade50: "#001516",
    shade40: "#012728",
    shade30: "#02494c",
    shade20: "#026467",
    shade10: "#037679",
    primary: "#038387",
    tint10: "#159195",
    tint20: "#2aa0a4",
    tint30: "#4cb4b7",
    tint40: "#9bd9db",
    tint50: "#c7ebec",
    tint60: "#f0fafa"
  };
  var steel = {
    shade50: "#000f12",
    shade40: "#001b22",
    shade30: "#00333f",
    shade20: "#004555",
    shade10: "#005265",
    primary: "#005b70",
    tint10: "#0f6c81",
    tint20: "#237d92",
    tint30: "#4496a9",
    tint40: "#94c8d4",
    tint50: "#c3e1e8",
    tint60: "#eff7f9"
  };
  var blue = {
    shade50: "#001322",
    shade40: "#002440",
    shade30: "#004377",
    shade20: "#005ba1",
    shade10: "#006cbf",
    primary: "#0078d4",
    tint10: "#1a86d9",
    tint20: "#3595de",
    tint30: "#5caae5",
    tint40: "#a9d3f2",
    tint50: "#d0e7f8",
    tint60: "#f3f9fd"
  };
  var royalBlue = {
    shade50: "#000c16",
    shade40: "#00172a",
    shade30: "#002c4e",
    shade20: "#003b6a",
    shade10: "#00467e",
    primary: "#004e8c",
    tint10: "#125e9a",
    tint20: "#286fa8",
    tint30: "#4a89ba",
    tint40: "#9abfdc",
    tint50: "#c7dced",
    tint60: "#f0f6fa"
  };
  var cornflower = {
    shade50: "#0d1126",
    shade40: "#182047",
    shade30: "#2c3c85",
    shade20: "#3c51b4",
    shade10: "#4760d5",
    primary: "#4f6bed",
    tint10: "#637cef",
    tint20: "#778df1",
    tint30: "#93a4f4",
    tint40: "#c8d1fa",
    tint50: "#e1e6fc",
    tint60: "#f7f9fe"
  };
  var navy = {
    shade50: "#00061d",
    shade40: "#000c36",
    shade30: "#001665",
    shade20: "#001e89",
    shade10: "#0023a2",
    primary: "#0027b4",
    tint10: "#173bbd",
    tint20: "#3050c6",
    tint30: "#546fd2",
    tint40: "#a3b2e8",
    tint50: "#ccd5f3",
    tint60: "#f2f4fc"
  };
  var lavender = {
    shade50: "#120f25",
    shade40: "#221d46",
    shade30: "#3f3682",
    shade20: "#5649b0",
    shade10: "#6656d1",
    primary: "#7160e8",
    tint10: "#8172eb",
    tint20: "#9184ee",
    tint30: "#a79cf1",
    tint40: "#d2ccf8",
    tint50: "#e7e4fb",
    tint60: "#f9f8fe"
  };
  var purple = {
    shade50: "#0f0717",
    shade40: "#1c0e2b",
    shade30: "#341a51",
    shade20: "#46236e",
    shade10: "#532982",
    primary: "#5c2e91",
    tint10: "#6b3f9e",
    tint20: "#7c52ab",
    tint30: "#9470bd",
    tint40: "#c6b1de",
    tint50: "#e0d3ed",
    tint60: "#f7f4fb"
  };
  var grape = {
    shade50: "#160418",
    shade40: "#29072e",
    shade30: "#4c0d55",
    shade20: "#671174",
    shade10: "#7a1589",
    primary: "#881798",
    tint10: "#952aa4",
    tint20: "#a33fb1",
    tint30: "#b55fc1",
    tint40: "#d9a7e0",
    tint50: "#eaceef",
    tint60: "#faf2fb"
  };
  var berry = {
    shade50: "#1f091d",
    shade40: "#3a1136",
    shade30: "#6d2064",
    shade20: "#932b88",
    shade10: "#af33a1",
    primary: "#c239b3",
    tint10: "#c94cbc",
    tint20: "#d161c4",
    tint30: "#da7ed0",
    tint40: "#edbbe7",
    tint50: "#f5daf2",
    tint60: "#fdf5fc"
  };
  var lilac = {
    shade50: "#1c0b1f",
    shade40: "#35153a",
    shade30: "#63276d",
    shade20: "#863593",
    shade10: "#9f3faf",
    primary: "#b146c2",
    tint10: "#ba58c9",
    tint20: "#c36bd1",
    tint30: "#cf87da",
    tint40: "#e6bfed",
    tint50: "#f2dcf5",
    tint60: "#fcf6fd"
  };
  var pink = {
    shade50: "#24091b",
    shade40: "#441232",
    shade30: "#80215d",
    shade20: "#ad2d7e",
    shade10: "#cd3595",
    primary: "#e43ba6",
    tint10: "#e750b0",
    tint20: "#ea66ba",
    tint30: "#ef85c8",
    tint40: "#f7c0e3",
    tint50: "#fbddf0",
    tint60: "#fef6fb"
  };
  var magenta = {
    shade50: "#1f0013",
    shade40: "#390024",
    shade30: "#6b0043",
    shade20: "#91005a",
    shade10: "#ac006b",
    primary: "#bf0077",
    tint10: "#c71885",
    tint20: "#ce3293",
    tint30: "#d957a8",
    tint40: "#eca5d1",
    tint50: "#f5cee6",
    tint60: "#fcf2f9"
  };
  var plum = {
    shade50: "#13000c",
    shade40: "#240017",
    shade30: "#43002b",
    shade20: "#5a003b",
    shade10: "#6b0045",
    primary: "#77004d",
    tint10: "#87105d",
    tint20: "#98246f",
    tint30: "#ad4589",
    tint40: "#d696c0",
    tint50: "#e9c4dc",
    tint60: "#faf0f6"
  };
  var beige = {
    shade50: "#141313",
    shade40: "#252323",
    shade30: "#444241",
    shade20: "#5d5958",
    shade10: "#6e6968",
    primary: "#7a7574",
    tint10: "#8a8584",
    tint20: "#9a9594",
    tint30: "#afabaa",
    tint40: "#d7d4d4",
    tint50: "#eae8e8",
    tint60: "#faf9f9"
  };
  var mink = {
    shade50: "#0f0e0e",
    shade40: "#1c1b1a",
    shade30: "#343231",
    shade20: "#474443",
    shade10: "#54514f",
    primary: "#5d5a58",
    tint10: "#706d6b",
    tint20: "#84817e",
    tint30: "#9e9b99",
    tint40: "#cecccb",
    tint50: "#e5e4e3",
    tint60: "#f8f8f8"
  };
  var platinum = {
    shade50: "#111314",
    shade40: "#1f2426",
    shade30: "#3b4447",
    shade20: "#505c60",
    shade10: "#5f6d71",
    primary: "#69797e",
    tint10: "#79898d",
    tint20: "#89989d",
    tint30: "#a0adb2",
    tint40: "#cdd6d8",
    tint50: "#e4e9ea",
    tint60: "#f8f9fa"
  };
  var anchor = {
    shade50: "#090a0b",
    shade40: "#111315",
    shade30: "#202427",
    shade20: "#2b3135",
    shade10: "#333a3f",
    primary: "#394146",
    tint10: "#4d565c",
    tint20: "#626c72",
    tint30: "#808a90",
    tint40: "#bcc3c7",
    tint50: "#dbdfe1",
    tint60: "#f6f7f8"
  };

  // ../node_modules/@fluentui/tokens/lib/global/colorPalette.js
  var statusSharedColors = {
    red,
    green,
    darkOrange,
    yellow,
    berry,
    lightGreen,
    marigold
  };
  var personaSharedColors = {
    darkRed,
    cranberry,
    pumpkin,
    peach,
    gold,
    brass,
    brown,
    forest,
    seafoam,
    darkGreen,
    lightTeal,
    teal,
    steel,
    blue,
    royalBlue,
    cornflower,
    navy,
    lavender,
    purple,
    grape,
    lilac,
    pink,
    magenta,
    plum,
    beige,
    mink,
    platinum,
    anchor
  };
  var mappedStatusColors = {
    cranberry,
    green,
    orange
  };

  // ../node_modules/@fluentui/tokens/lib/sharedColorNames.js
  var statusSharedColorNames = [
    "red",
    "green",
    "darkOrange",
    "yellow",
    "berry",
    "lightGreen",
    "marigold"
  ];
  var personaSharedColorNames = [
    "darkRed",
    "cranberry",
    "pumpkin",
    "peach",
    "gold",
    "brass",
    "brown",
    "forest",
    "seafoam",
    "darkGreen",
    "lightTeal",
    "teal",
    "steel",
    "blue",
    "royalBlue",
    "cornflower",
    "navy",
    "lavender",
    "purple",
    "grape",
    "lilac",
    "pink",
    "magenta",
    "plum",
    "beige",
    "mink",
    "platinum",
    "anchor"
  ];

  // ../node_modules/@fluentui/tokens/lib/statusColorMapping.js
  var statusColorMapping = {
    success: "green",
    warning: "orange",
    danger: "cranberry"
  };

  // ../node_modules/@fluentui/tokens/lib/global/borderRadius.js
  var borderRadius3 = {
    borderRadiusNone: "0",
    borderRadiusSmall: "2px",
    borderRadiusMedium: "4px",
    borderRadiusLarge: "6px",
    borderRadiusXLarge: "8px",
    borderRadiusCircular: "10000px"
  };

  // ../node_modules/@fluentui/tokens/lib/global/curves.js
  var curves = {
    curveAccelerateMax: "cubic-bezier(1,0,1,1)",
    curveAccelerateMid: "cubic-bezier(0.7,0,1,0.5)",
    curveAccelerateMin: "cubic-bezier(0.8,0,1,1)",
    curveDecelerateMax: "cubic-bezier(0,0,0,1)",
    curveDecelerateMid: "cubic-bezier(0.1,0.9,0.2,1)",
    curveDecelerateMin: "cubic-bezier(0.33,0,0.1,1)",
    curveEasyEaseMax: "cubic-bezier(0.8,0,0.1,1)",
    curveEasyEase: "cubic-bezier(0.33,0,0.67,1)",
    curveLinear: "cubic-bezier(0,0,1,1)"
  };

  // ../node_modules/@fluentui/tokens/lib/global/durations.js
  var durations = {
    durationUltraFast: "50ms",
    durationFaster: "100ms",
    durationFast: "150ms",
    durationNormal: "200ms",
    durationGentle: "250ms",
    durationSlow: "300ms",
    durationSlower: "400ms",
    durationUltraSlow: "500ms"
  };

  // ../node_modules/@fluentui/tokens/lib/global/fonts.js
  var fontSizes = {
    fontSizeBase100: "10px",
    fontSizeBase200: "12px",
    fontSizeBase300: "14px",
    fontSizeBase400: "16px",
    fontSizeBase500: "20px",
    fontSizeBase600: "24px",
    fontSizeHero700: "28px",
    fontSizeHero800: "32px",
    fontSizeHero900: "40px",
    fontSizeHero1000: "68px"
  };
  var lineHeights = {
    lineHeightBase100: "14px",
    lineHeightBase200: "16px",
    lineHeightBase300: "20px",
    lineHeightBase400: "22px",
    lineHeightBase500: "28px",
    lineHeightBase600: "32px",
    lineHeightHero700: "36px",
    lineHeightHero800: "40px",
    lineHeightHero900: "52px",
    lineHeightHero1000: "92px"
  };
  var fontWeights = {
    fontWeightRegular: 400,
    fontWeightMedium: 500,
    fontWeightSemibold: 600,
    fontWeightBold: 700
  };
  var fontFamilies = {
    fontFamilyBase: (
      // eslint-disable-next-line @fluentui/max-len
      "'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif"
    ),
    fontFamilyMonospace: "Consolas, 'Courier New', Courier, monospace",
    fontFamilyNumeric: (
      // eslint-disable-next-line @fluentui/max-len
      "Bahnschrift, 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif"
    )
  };

  // ../node_modules/@fluentui/tokens/lib/global/spacings.js
  var spacings = {
    none: "0",
    xxs: "2px",
    xs: "4px",
    sNudge: "6px",
    s: "8px",
    mNudge: "10px",
    m: "12px",
    l: "16px",
    xl: "20px",
    xxl: "24px",
    xxxl: "32px"
  };
  var horizontalSpacings = {
    spacingHorizontalNone: spacings.none,
    spacingHorizontalXXS: spacings.xxs,
    spacingHorizontalXS: spacings.xs,
    spacingHorizontalSNudge: spacings.sNudge,
    spacingHorizontalS: spacings.s,
    spacingHorizontalMNudge: spacings.mNudge,
    spacingHorizontalM: spacings.m,
    spacingHorizontalL: spacings.l,
    spacingHorizontalXL: spacings.xl,
    spacingHorizontalXXL: spacings.xxl,
    spacingHorizontalXXXL: spacings.xxxl
  };
  var verticalSpacings = {
    spacingVerticalNone: spacings.none,
    spacingVerticalXXS: spacings.xxs,
    spacingVerticalXS: spacings.xs,
    spacingVerticalSNudge: spacings.sNudge,
    spacingVerticalS: spacings.s,
    spacingVerticalMNudge: spacings.mNudge,
    spacingVerticalM: spacings.m,
    spacingVerticalL: spacings.l,
    spacingVerticalXL: spacings.xl,
    spacingVerticalXXL: spacings.xxl,
    spacingVerticalXXXL: spacings.xxxl
  };

  // ../node_modules/@fluentui/tokens/lib/global/strokeWidths.js
  var strokeWidths = {
    strokeWidthThin: "1px",
    strokeWidthThick: "2px",
    strokeWidthThicker: "3px",
    strokeWidthThickest: "4px"
  };

  // ../node_modules/@fluentui/tokens/lib/tokens.js
  var tokens = {
    // Color tokens
    colorNeutralForeground1: "var(--colorNeutralForeground1)",
    colorNeutralForeground1Hover: "var(--colorNeutralForeground1Hover)",
    colorNeutralForeground1Pressed: "var(--colorNeutralForeground1Pressed)",
    colorNeutralForeground1Selected: "var(--colorNeutralForeground1Selected)",
    colorNeutralForeground2: "var(--colorNeutralForeground2)",
    colorNeutralForeground2Hover: "var(--colorNeutralForeground2Hover)",
    colorNeutralForeground2Pressed: "var(--colorNeutralForeground2Pressed)",
    colorNeutralForeground2Selected: "var(--colorNeutralForeground2Selected)",
    colorNeutralForeground2BrandHover: "var(--colorNeutralForeground2BrandHover)",
    colorNeutralForeground2BrandPressed: "var(--colorNeutralForeground2BrandPressed)",
    colorNeutralForeground2BrandSelected: "var(--colorNeutralForeground2BrandSelected)",
    colorNeutralForeground3: "var(--colorNeutralForeground3)",
    colorNeutralForeground3Hover: "var(--colorNeutralForeground3Hover)",
    colorNeutralForeground3Pressed: "var(--colorNeutralForeground3Pressed)",
    colorNeutralForeground3Selected: "var(--colorNeutralForeground3Selected)",
    colorNeutralForeground3BrandHover: "var(--colorNeutralForeground3BrandHover)",
    colorNeutralForeground3BrandPressed: "var(--colorNeutralForeground3BrandPressed)",
    colorNeutralForeground3BrandSelected: "var(--colorNeutralForeground3BrandSelected)",
    colorNeutralForeground4: "var(--colorNeutralForeground4)",
    colorNeutralForegroundDisabled: "var(--colorNeutralForegroundDisabled)",
    colorBrandForegroundLink: "var(--colorBrandForegroundLink)",
    colorBrandForegroundLinkHover: "var(--colorBrandForegroundLinkHover)",
    colorBrandForegroundLinkPressed: "var(--colorBrandForegroundLinkPressed)",
    colorBrandForegroundLinkSelected: "var(--colorBrandForegroundLinkSelected)",
    colorNeutralForeground2Link: "var(--colorNeutralForeground2Link)",
    colorNeutralForeground2LinkHover: "var(--colorNeutralForeground2LinkHover)",
    colorNeutralForeground2LinkPressed: "var(--colorNeutralForeground2LinkPressed)",
    colorNeutralForeground2LinkSelected: "var(--colorNeutralForeground2LinkSelected)",
    colorCompoundBrandForeground1: "var(--colorCompoundBrandForeground1)",
    colorCompoundBrandForeground1Hover: "var(--colorCompoundBrandForeground1Hover)",
    colorCompoundBrandForeground1Pressed: "var(--colorCompoundBrandForeground1Pressed)",
    colorNeutralForegroundOnBrand: "var(--colorNeutralForegroundOnBrand)",
    colorNeutralForegroundInverted: "var(--colorNeutralForegroundInverted)",
    colorNeutralForegroundInvertedHover: "var(--colorNeutralForegroundInvertedHover)",
    colorNeutralForegroundInvertedPressed: "var(--colorNeutralForegroundInvertedPressed)",
    colorNeutralForegroundInvertedSelected: "var(--colorNeutralForegroundInvertedSelected)",
    colorNeutralForegroundInverted2: "var(--colorNeutralForegroundInverted2)",
    colorNeutralForegroundStaticInverted: "var(--colorNeutralForegroundStaticInverted)",
    colorNeutralForegroundInvertedLink: "var(--colorNeutralForegroundInvertedLink)",
    colorNeutralForegroundInvertedLinkHover: "var(--colorNeutralForegroundInvertedLinkHover)",
    colorNeutralForegroundInvertedLinkPressed: "var(--colorNeutralForegroundInvertedLinkPressed)",
    colorNeutralForegroundInvertedLinkSelected: "var(--colorNeutralForegroundInvertedLinkSelected)",
    colorNeutralForegroundInvertedDisabled: "var(--colorNeutralForegroundInvertedDisabled)",
    colorBrandForeground1: "var(--colorBrandForeground1)",
    colorBrandForeground2: "var(--colorBrandForeground2)",
    colorBrandForeground2Hover: "var(--colorBrandForeground2Hover)",
    colorBrandForeground2Pressed: "var(--colorBrandForeground2Pressed)",
    colorNeutralForeground1Static: "var(--colorNeutralForeground1Static)",
    colorBrandForegroundInverted: "var(--colorBrandForegroundInverted)",
    colorBrandForegroundInvertedHover: "var(--colorBrandForegroundInvertedHover)",
    colorBrandForegroundInvertedPressed: "var(--colorBrandForegroundInvertedPressed)",
    colorBrandForegroundOnLight: "var(--colorBrandForegroundOnLight)",
    colorBrandForegroundOnLightHover: "var(--colorBrandForegroundOnLightHover)",
    colorBrandForegroundOnLightPressed: "var(--colorBrandForegroundOnLightPressed)",
    colorBrandForegroundOnLightSelected: "var(--colorBrandForegroundOnLightSelected)",
    colorNeutralBackground1: "var(--colorNeutralBackground1)",
    colorNeutralBackground1Hover: "var(--colorNeutralBackground1Hover)",
    colorNeutralBackground1Pressed: "var(--colorNeutralBackground1Pressed)",
    colorNeutralBackground1Selected: "var(--colorNeutralBackground1Selected)",
    colorNeutralBackground2: "var(--colorNeutralBackground2)",
    colorNeutralBackground2Hover: "var(--colorNeutralBackground2Hover)",
    colorNeutralBackground2Pressed: "var(--colorNeutralBackground2Pressed)",
    colorNeutralBackground2Selected: "var(--colorNeutralBackground2Selected)",
    colorNeutralBackground3: "var(--colorNeutralBackground3)",
    colorNeutralBackground3Hover: "var(--colorNeutralBackground3Hover)",
    colorNeutralBackground3Pressed: "var(--colorNeutralBackground3Pressed)",
    colorNeutralBackground3Selected: "var(--colorNeutralBackground3Selected)",
    colorNeutralBackground4: "var(--colorNeutralBackground4)",
    colorNeutralBackground4Hover: "var(--colorNeutralBackground4Hover)",
    colorNeutralBackground4Pressed: "var(--colorNeutralBackground4Pressed)",
    colorNeutralBackground4Selected: "var(--colorNeutralBackground4Selected)",
    colorNeutralBackground5: "var(--colorNeutralBackground5)",
    colorNeutralBackground5Hover: "var(--colorNeutralBackground5Hover)",
    colorNeutralBackground5Pressed: "var(--colorNeutralBackground5Pressed)",
    colorNeutralBackground5Selected: "var(--colorNeutralBackground5Selected)",
    colorNeutralBackground6: "var(--colorNeutralBackground6)",
    colorNeutralBackgroundInverted: "var(--colorNeutralBackgroundInverted)",
    colorNeutralBackgroundStatic: "var(--colorNeutralBackgroundStatic)",
    colorNeutralBackgroundAlpha: "var(--colorNeutralBackgroundAlpha)",
    colorNeutralBackgroundAlpha2: "var(--colorNeutralBackgroundAlpha2)",
    colorSubtleBackground: "var(--colorSubtleBackground)",
    colorSubtleBackgroundHover: "var(--colorSubtleBackgroundHover)",
    colorSubtleBackgroundPressed: "var(--colorSubtleBackgroundPressed)",
    colorSubtleBackgroundSelected: "var(--colorSubtleBackgroundSelected)",
    colorSubtleBackgroundLightAlphaHover: "var(--colorSubtleBackgroundLightAlphaHover)",
    colorSubtleBackgroundLightAlphaPressed: "var(--colorSubtleBackgroundLightAlphaPressed)",
    colorSubtleBackgroundLightAlphaSelected: "var(--colorSubtleBackgroundLightAlphaSelected)",
    colorSubtleBackgroundInverted: "var(--colorSubtleBackgroundInverted)",
    colorSubtleBackgroundInvertedHover: "var(--colorSubtleBackgroundInvertedHover)",
    colorSubtleBackgroundInvertedPressed: "var(--colorSubtleBackgroundInvertedPressed)",
    colorSubtleBackgroundInvertedSelected: "var(--colorSubtleBackgroundInvertedSelected)",
    colorTransparentBackground: "var(--colorTransparentBackground)",
    colorTransparentBackgroundHover: "var(--colorTransparentBackgroundHover)",
    colorTransparentBackgroundPressed: "var(--colorTransparentBackgroundPressed)",
    colorTransparentBackgroundSelected: "var(--colorTransparentBackgroundSelected)",
    colorNeutralBackgroundDisabled: "var(--colorNeutralBackgroundDisabled)",
    colorNeutralBackgroundInvertedDisabled: "var(--colorNeutralBackgroundInvertedDisabled)",
    colorNeutralStencil1: "var(--colorNeutralStencil1)",
    colorNeutralStencil2: "var(--colorNeutralStencil2)",
    colorNeutralStencil1Alpha: "var(--colorNeutralStencil1Alpha)",
    colorNeutralStencil2Alpha: "var(--colorNeutralStencil2Alpha)",
    colorBackgroundOverlay: "var(--colorBackgroundOverlay)",
    colorScrollbarOverlay: "var(--colorScrollbarOverlay)",
    colorBrandBackground: "var(--colorBrandBackground)",
    colorBrandBackgroundHover: "var(--colorBrandBackgroundHover)",
    colorBrandBackgroundPressed: "var(--colorBrandBackgroundPressed)",
    colorBrandBackgroundSelected: "var(--colorBrandBackgroundSelected)",
    colorCompoundBrandBackground: "var(--colorCompoundBrandBackground)",
    colorCompoundBrandBackgroundHover: "var(--colorCompoundBrandBackgroundHover)",
    colorCompoundBrandBackgroundPressed: "var(--colorCompoundBrandBackgroundPressed)",
    colorBrandBackgroundStatic: "var(--colorBrandBackgroundStatic)",
    colorBrandBackground2: "var(--colorBrandBackground2)",
    colorBrandBackground2Hover: "var(--colorBrandBackground2Hover)",
    colorBrandBackground2Pressed: "var(--colorBrandBackground2Pressed)",
    colorBrandBackgroundInverted: "var(--colorBrandBackgroundInverted)",
    colorBrandBackgroundInvertedHover: "var(--colorBrandBackgroundInvertedHover)",
    colorBrandBackgroundInvertedPressed: "var(--colorBrandBackgroundInvertedPressed)",
    colorBrandBackgroundInvertedSelected: "var(--colorBrandBackgroundInvertedSelected)",
    colorNeutralStrokeAccessible: "var(--colorNeutralStrokeAccessible)",
    colorNeutralStrokeAccessibleHover: "var(--colorNeutralStrokeAccessibleHover)",
    colorNeutralStrokeAccessiblePressed: "var(--colorNeutralStrokeAccessiblePressed)",
    colorNeutralStrokeAccessibleSelected: "var(--colorNeutralStrokeAccessibleSelected)",
    colorNeutralStroke1: "var(--colorNeutralStroke1)",
    colorNeutralStroke1Hover: "var(--colorNeutralStroke1Hover)",
    colorNeutralStroke1Pressed: "var(--colorNeutralStroke1Pressed)",
    colorNeutralStroke1Selected: "var(--colorNeutralStroke1Selected)",
    colorNeutralStroke2: "var(--colorNeutralStroke2)",
    colorNeutralStroke3: "var(--colorNeutralStroke3)",
    colorNeutralStrokeSubtle: "var(--colorNeutralStrokeSubtle)",
    colorNeutralStrokeOnBrand: "var(--colorNeutralStrokeOnBrand)",
    colorNeutralStrokeOnBrand2: "var(--colorNeutralStrokeOnBrand2)",
    colorNeutralStrokeOnBrand2Hover: "var(--colorNeutralStrokeOnBrand2Hover)",
    colorNeutralStrokeOnBrand2Pressed: "var(--colorNeutralStrokeOnBrand2Pressed)",
    colorNeutralStrokeOnBrand2Selected: "var(--colorNeutralStrokeOnBrand2Selected)",
    colorBrandStroke1: "var(--colorBrandStroke1)",
    colorBrandStroke2: "var(--colorBrandStroke2)",
    colorBrandStroke2Hover: "var(--colorBrandStroke2Hover)",
    colorBrandStroke2Pressed: "var(--colorBrandStroke2Pressed)",
    colorBrandStroke2Contrast: "var(--colorBrandStroke2Contrast)",
    colorCompoundBrandStroke: "var(--colorCompoundBrandStroke)",
    colorCompoundBrandStrokeHover: "var(--colorCompoundBrandStrokeHover)",
    colorCompoundBrandStrokePressed: "var(--colorCompoundBrandStrokePressed)",
    colorNeutralStrokeDisabled: "var(--colorNeutralStrokeDisabled)",
    colorNeutralStrokeInvertedDisabled: "var(--colorNeutralStrokeInvertedDisabled)",
    colorTransparentStroke: "var(--colorTransparentStroke)",
    colorTransparentStrokeInteractive: "var(--colorTransparentStrokeInteractive)",
    colorTransparentStrokeDisabled: "var(--colorTransparentStrokeDisabled)",
    colorNeutralStrokeAlpha: "var(--colorNeutralStrokeAlpha)",
    colorNeutralStrokeAlpha2: "var(--colorNeutralStrokeAlpha2)",
    colorStrokeFocus1: "var(--colorStrokeFocus1)",
    colorStrokeFocus2: "var(--colorStrokeFocus2)",
    colorNeutralShadowAmbient: "var(--colorNeutralShadowAmbient)",
    colorNeutralShadowKey: "var(--colorNeutralShadowKey)",
    colorNeutralShadowAmbientLighter: "var(--colorNeutralShadowAmbientLighter)",
    colorNeutralShadowKeyLighter: "var(--colorNeutralShadowKeyLighter)",
    colorNeutralShadowAmbientDarker: "var(--colorNeutralShadowAmbientDarker)",
    colorNeutralShadowKeyDarker: "var(--colorNeutralShadowKeyDarker)",
    colorBrandShadowAmbient: "var(--colorBrandShadowAmbient)",
    colorBrandShadowKey: "var(--colorBrandShadowKey)",
    // Color palette tokens
    // Color palette red tokens
    colorPaletteRedBackground1: "var(--colorPaletteRedBackground1)",
    colorPaletteRedBackground2: "var(--colorPaletteRedBackground2)",
    colorPaletteRedBackground3: "var(--colorPaletteRedBackground3)",
    colorPaletteRedBorderActive: "var(--colorPaletteRedBorderActive)",
    colorPaletteRedBorder1: "var(--colorPaletteRedBorder1)",
    colorPaletteRedBorder2: "var(--colorPaletteRedBorder2)",
    colorPaletteRedForeground1: "var(--colorPaletteRedForeground1)",
    colorPaletteRedForeground2: "var(--colorPaletteRedForeground2)",
    colorPaletteRedForeground3: "var(--colorPaletteRedForeground3)",
    colorPaletteRedForegroundInverted: "var(--colorPaletteRedForegroundInverted)",
    // Color palette green tokens
    colorPaletteGreenBackground1: "var(--colorPaletteGreenBackground1)",
    colorPaletteGreenBackground2: "var(--colorPaletteGreenBackground2)",
    colorPaletteGreenBackground3: "var(--colorPaletteGreenBackground3)",
    colorPaletteGreenBorderActive: "var(--colorPaletteGreenBorderActive)",
    colorPaletteGreenBorder1: "var(--colorPaletteGreenBorder1)",
    colorPaletteGreenBorder2: "var(--colorPaletteGreenBorder2)",
    colorPaletteGreenForeground1: "var(--colorPaletteGreenForeground1)",
    colorPaletteGreenForeground2: "var(--colorPaletteGreenForeground2)",
    colorPaletteGreenForeground3: "var(--colorPaletteGreenForeground3)",
    colorPaletteGreenForegroundInverted: "var(--colorPaletteGreenForegroundInverted)",
    // Color palette dark orange tokens
    colorPaletteDarkOrangeBackground1: "var(--colorPaletteDarkOrangeBackground1)",
    colorPaletteDarkOrangeBackground2: "var(--colorPaletteDarkOrangeBackground2)",
    colorPaletteDarkOrangeBackground3: "var(--colorPaletteDarkOrangeBackground3)",
    colorPaletteDarkOrangeBorderActive: "var(--colorPaletteDarkOrangeBorderActive)",
    colorPaletteDarkOrangeBorder1: "var(--colorPaletteDarkOrangeBorder1)",
    colorPaletteDarkOrangeBorder2: "var(--colorPaletteDarkOrangeBorder2)",
    colorPaletteDarkOrangeForeground1: "var(--colorPaletteDarkOrangeForeground1)",
    colorPaletteDarkOrangeForeground2: "var(--colorPaletteDarkOrangeForeground2)",
    colorPaletteDarkOrangeForeground3: "var(--colorPaletteDarkOrangeForeground3)",
    // Color palette yellow tokens
    colorPaletteYellowBackground1: "var(--colorPaletteYellowBackground1)",
    colorPaletteYellowBackground2: "var(--colorPaletteYellowBackground2)",
    colorPaletteYellowBackground3: "var(--colorPaletteYellowBackground3)",
    colorPaletteYellowBorderActive: "var(--colorPaletteYellowBorderActive)",
    colorPaletteYellowBorder1: "var(--colorPaletteYellowBorder1)",
    colorPaletteYellowBorder2: "var(--colorPaletteYellowBorder2)",
    colorPaletteYellowForeground1: "var(--colorPaletteYellowForeground1)",
    colorPaletteYellowForeground2: "var(--colorPaletteYellowForeground2)",
    colorPaletteYellowForeground3: "var(--colorPaletteYellowForeground3)",
    colorPaletteYellowForegroundInverted: "var(--colorPaletteYellowForegroundInverted)",
    // Color palette berry tokens
    colorPaletteBerryBackground1: "var(--colorPaletteBerryBackground1)",
    colorPaletteBerryBackground2: "var(--colorPaletteBerryBackground2)",
    colorPaletteBerryBackground3: "var(--colorPaletteBerryBackground3)",
    colorPaletteBerryBorderActive: "var(--colorPaletteBerryBorderActive)",
    colorPaletteBerryBorder1: "var(--colorPaletteBerryBorder1)",
    colorPaletteBerryBorder2: "var(--colorPaletteBerryBorder2)",
    colorPaletteBerryForeground1: "var(--colorPaletteBerryForeground1)",
    colorPaletteBerryForeground2: "var(--colorPaletteBerryForeground2)",
    colorPaletteBerryForeground3: "var(--colorPaletteBerryForeground3)",
    // Color palette marigold tokens
    colorPaletteMarigoldBackground1: "var(--colorPaletteMarigoldBackground1)",
    colorPaletteMarigoldBackground2: "var(--colorPaletteMarigoldBackground2)",
    colorPaletteMarigoldBackground3: "var(--colorPaletteMarigoldBackground3)",
    colorPaletteMarigoldBorderActive: "var(--colorPaletteMarigoldBorderActive)",
    colorPaletteMarigoldBorder1: "var(--colorPaletteMarigoldBorder1)",
    colorPaletteMarigoldBorder2: "var(--colorPaletteMarigoldBorder2)",
    colorPaletteMarigoldForeground1: "var(--colorPaletteMarigoldForeground1)",
    colorPaletteMarigoldForeground2: "var(--colorPaletteMarigoldForeground2)",
    colorPaletteMarigoldForeground3: "var(--colorPaletteMarigoldForeground3)",
    // Color palette light green tokens
    colorPaletteLightGreenBackground1: "var(--colorPaletteLightGreenBackground1)",
    colorPaletteLightGreenBackground2: "var(--colorPaletteLightGreenBackground2)",
    colorPaletteLightGreenBackground3: "var(--colorPaletteLightGreenBackground3)",
    colorPaletteLightGreenBorderActive: "var(--colorPaletteLightGreenBorderActive)",
    colorPaletteLightGreenBorder1: "var(--colorPaletteLightGreenBorder1)",
    colorPaletteLightGreenBorder2: "var(--colorPaletteLightGreenBorder2)",
    colorPaletteLightGreenForeground1: "var(--colorPaletteLightGreenForeground1)",
    colorPaletteLightGreenForeground2: "var(--colorPaletteLightGreenForeground2)",
    colorPaletteLightGreenForeground3: "var(--colorPaletteLightGreenForeground3)",
    // Color palette anchor tokens
    colorPaletteAnchorBackground2: "var(--colorPaletteAnchorBackground2)",
    colorPaletteAnchorBorderActive: "var(--colorPaletteAnchorBorderActive)",
    colorPaletteAnchorForeground2: "var(--colorPaletteAnchorForeground2)",
    // Color palette beige tokens
    colorPaletteBeigeBackground2: "var(--colorPaletteBeigeBackground2)",
    colorPaletteBeigeBorderActive: "var(--colorPaletteBeigeBorderActive)",
    colorPaletteBeigeForeground2: "var(--colorPaletteBeigeForeground2)",
    // Color palette blue tokens
    colorPaletteBlueBackground2: "var(--colorPaletteBlueBackground2)",
    colorPaletteBlueBorderActive: "var(--colorPaletteBlueBorderActive)",
    colorPaletteBlueForeground2: "var(--colorPaletteBlueForeground2)",
    // Color palette brass tokens
    colorPaletteBrassBackground2: "var(--colorPaletteBrassBackground2)",
    colorPaletteBrassBorderActive: "var(--colorPaletteBrassBorderActive)",
    colorPaletteBrassForeground2: "var(--colorPaletteBrassForeground2)",
    // Color palette brown tokens
    colorPaletteBrownBackground2: "var(--colorPaletteBrownBackground2)",
    colorPaletteBrownBorderActive: "var(--colorPaletteBrownBorderActive)",
    colorPaletteBrownForeground2: "var(--colorPaletteBrownForeground2)",
    // Color palette cornflower tokens
    colorPaletteCornflowerBackground2: "var(--colorPaletteCornflowerBackground2)",
    colorPaletteCornflowerBorderActive: "var(--colorPaletteCornflowerBorderActive)",
    colorPaletteCornflowerForeground2: "var(--colorPaletteCornflowerForeground2)",
    // Color palette cranberry tokens
    colorPaletteCranberryBackground2: "var(--colorPaletteCranberryBackground2)",
    colorPaletteCranberryBorderActive: "var(--colorPaletteCranberryBorderActive)",
    colorPaletteCranberryForeground2: "var(--colorPaletteCranberryForeground2)",
    // Color palette dark green tokens
    colorPaletteDarkGreenBackground2: "var(--colorPaletteDarkGreenBackground2)",
    colorPaletteDarkGreenBorderActive: "var(--colorPaletteDarkGreenBorderActive)",
    colorPaletteDarkGreenForeground2: "var(--colorPaletteDarkGreenForeground2)",
    // Color palette dark red tokens
    colorPaletteDarkRedBackground2: "var(--colorPaletteDarkRedBackground2)",
    colorPaletteDarkRedBorderActive: "var(--colorPaletteDarkRedBorderActive)",
    colorPaletteDarkRedForeground2: "var(--colorPaletteDarkRedForeground2)",
    // Color palette forest tokens
    colorPaletteForestBackground2: "var(--colorPaletteForestBackground2)",
    colorPaletteForestBorderActive: "var(--colorPaletteForestBorderActive)",
    colorPaletteForestForeground2: "var(--colorPaletteForestForeground2)",
    // Color palette gold tokens
    colorPaletteGoldBackground2: "var(--colorPaletteGoldBackground2)",
    colorPaletteGoldBorderActive: "var(--colorPaletteGoldBorderActive)",
    colorPaletteGoldForeground2: "var(--colorPaletteGoldForeground2)",
    // Color palette grape tokens
    colorPaletteGrapeBackground2: "var(--colorPaletteGrapeBackground2)",
    colorPaletteGrapeBorderActive: "var(--colorPaletteGrapeBorderActive)",
    colorPaletteGrapeForeground2: "var(--colorPaletteGrapeForeground2)",
    // Color palette lavender tokens
    colorPaletteLavenderBackground2: "var(--colorPaletteLavenderBackground2)",
    colorPaletteLavenderBorderActive: "var(--colorPaletteLavenderBorderActive)",
    colorPaletteLavenderForeground2: "var(--colorPaletteLavenderForeground2)",
    // Color palette light teal tokens
    colorPaletteLightTealBackground2: "var(--colorPaletteLightTealBackground2)",
    colorPaletteLightTealBorderActive: "var(--colorPaletteLightTealBorderActive)",
    colorPaletteLightTealForeground2: "var(--colorPaletteLightTealForeground2)",
    // Color palette lilac tokens
    colorPaletteLilacBackground2: "var(--colorPaletteLilacBackground2)",
    colorPaletteLilacBorderActive: "var(--colorPaletteLilacBorderActive)",
    colorPaletteLilacForeground2: "var(--colorPaletteLilacForeground2)",
    // Color palette magenta tokens
    colorPaletteMagentaBackground2: "var(--colorPaletteMagentaBackground2)",
    colorPaletteMagentaBorderActive: "var(--colorPaletteMagentaBorderActive)",
    colorPaletteMagentaForeground2: "var(--colorPaletteMagentaForeground2)",
    // Color palette mink tokens
    colorPaletteMinkBackground2: "var(--colorPaletteMinkBackground2)",
    colorPaletteMinkBorderActive: "var(--colorPaletteMinkBorderActive)",
    colorPaletteMinkForeground2: "var(--colorPaletteMinkForeground2)",
    // Color palette navy tokens
    colorPaletteNavyBackground2: "var(--colorPaletteNavyBackground2)",
    colorPaletteNavyBorderActive: "var(--colorPaletteNavyBorderActive)",
    colorPaletteNavyForeground2: "var(--colorPaletteNavyForeground2)",
    // Color palette peach tokens
    colorPalettePeachBackground2: "var(--colorPalettePeachBackground2)",
    colorPalettePeachBorderActive: "var(--colorPalettePeachBorderActive)",
    colorPalettePeachForeground2: "var(--colorPalettePeachForeground2)",
    // Color palette pink tokens
    colorPalettePinkBackground2: "var(--colorPalettePinkBackground2)",
    colorPalettePinkBorderActive: "var(--colorPalettePinkBorderActive)",
    colorPalettePinkForeground2: "var(--colorPalettePinkForeground2)",
    // Color palette platinum tokens
    colorPalettePlatinumBackground2: "var(--colorPalettePlatinumBackground2)",
    colorPalettePlatinumBorderActive: "var(--colorPalettePlatinumBorderActive)",
    colorPalettePlatinumForeground2: "var(--colorPalettePlatinumForeground2)",
    // Color palette plum tokens
    colorPalettePlumBackground2: "var(--colorPalettePlumBackground2)",
    colorPalettePlumBorderActive: "var(--colorPalettePlumBorderActive)",
    colorPalettePlumForeground2: "var(--colorPalettePlumForeground2)",
    // Color palette pumpkin tokens
    colorPalettePumpkinBackground2: "var(--colorPalettePumpkinBackground2)",
    colorPalettePumpkinBorderActive: "var(--colorPalettePumpkinBorderActive)",
    colorPalettePumpkinForeground2: "var(--colorPalettePumpkinForeground2)",
    // Color palette purple tokens
    colorPalettePurpleBackground2: "var(--colorPalettePurpleBackground2)",
    colorPalettePurpleBorderActive: "var(--colorPalettePurpleBorderActive)",
    colorPalettePurpleForeground2: "var(--colorPalettePurpleForeground2)",
    // Color palette royal blue tokens
    colorPaletteRoyalBlueBackground2: "var(--colorPaletteRoyalBlueBackground2)",
    colorPaletteRoyalBlueBorderActive: "var(--colorPaletteRoyalBlueBorderActive)",
    colorPaletteRoyalBlueForeground2: "var(--colorPaletteRoyalBlueForeground2)",
    // Color palette seafoam tokens
    colorPaletteSeafoamBackground2: "var(--colorPaletteSeafoamBackground2)",
    colorPaletteSeafoamBorderActive: "var(--colorPaletteSeafoamBorderActive)",
    colorPaletteSeafoamForeground2: "var(--colorPaletteSeafoamForeground2)",
    // Color palette steel tokens
    colorPaletteSteelBackground2: "var(--colorPaletteSteelBackground2)",
    colorPaletteSteelBorderActive: "var(--colorPaletteSteelBorderActive)",
    colorPaletteSteelForeground2: "var(--colorPaletteSteelForeground2)",
    // Color palette teal tokens
    colorPaletteTealBackground2: "var(--colorPaletteTealBackground2)",
    colorPaletteTealBorderActive: "var(--colorPaletteTealBorderActive)",
    colorPaletteTealForeground2: "var(--colorPaletteTealForeground2)",
    // Color status success tokens
    colorStatusSuccessBackground1: "var(--colorStatusSuccessBackground1)",
    colorStatusSuccessBackground2: "var(--colorStatusSuccessBackground2)",
    colorStatusSuccessBackground3: "var(--colorStatusSuccessBackground3)",
    colorStatusSuccessForeground1: "var(--colorStatusSuccessForeground1)",
    colorStatusSuccessForeground2: "var(--colorStatusSuccessForeground2)",
    colorStatusSuccessForeground3: "var(--colorStatusSuccessForeground3)",
    colorStatusSuccessForegroundInverted: "var(--colorStatusSuccessForegroundInverted)",
    colorStatusSuccessBorderActive: "var(--colorStatusSuccessBorderActive)",
    colorStatusSuccessBorder1: "var(--colorStatusSuccessBorder1)",
    colorStatusSuccessBorder2: "var(--colorStatusSuccessBorder2)",
    // Color status warning tokens
    colorStatusWarningBackground1: "var(--colorStatusWarningBackground1)",
    colorStatusWarningBackground2: "var(--colorStatusWarningBackground2)",
    colorStatusWarningBackground3: "var(--colorStatusWarningBackground3)",
    colorStatusWarningForeground1: "var(--colorStatusWarningForeground1)",
    colorStatusWarningForeground2: "var(--colorStatusWarningForeground2)",
    colorStatusWarningForeground3: "var(--colorStatusWarningForeground3)",
    colorStatusWarningForegroundInverted: "var(--colorStatusWarningForegroundInverted)",
    colorStatusWarningBorderActive: "var(--colorStatusWarningBorderActive)",
    colorStatusWarningBorder1: "var(--colorStatusWarningBorder1)",
    colorStatusWarningBorder2: "var(--colorStatusWarningBorder2)",
    // Color status danger tokens
    colorStatusDangerBackground1: "var(--colorStatusDangerBackground1)",
    colorStatusDangerBackground2: "var(--colorStatusDangerBackground2)",
    colorStatusDangerBackground3: "var(--colorStatusDangerBackground3)",
    colorStatusDangerForeground1: "var(--colorStatusDangerForeground1)",
    colorStatusDangerForeground2: "var(--colorStatusDangerForeground2)",
    colorStatusDangerForeground3: "var(--colorStatusDangerForeground3)",
    colorStatusDangerForegroundInverted: "var(--colorStatusDangerForegroundInverted)",
    colorStatusDangerBorderActive: "var(--colorStatusDangerBorderActive)",
    colorStatusDangerBorder1: "var(--colorStatusDangerBorder1)",
    colorStatusDangerBorder2: "var(--colorStatusDangerBorder2)",
    // Border radius tokens
    borderRadiusNone: "var(--borderRadiusNone)",
    borderRadiusSmall: "var(--borderRadiusSmall)",
    borderRadiusMedium: "var(--borderRadiusMedium)",
    borderRadiusLarge: "var(--borderRadiusLarge)",
    borderRadiusXLarge: "var(--borderRadiusXLarge)",
    borderRadiusCircular: "var(--borderRadiusCircular)",
    // Font family tokens
    fontFamilyBase: "var(--fontFamilyBase)",
    fontFamilyMonospace: "var(--fontFamilyMonospace)",
    fontFamilyNumeric: "var(--fontFamilyNumeric)",
    // Font size tokens
    fontSizeBase100: "var(--fontSizeBase100)",
    fontSizeBase200: "var(--fontSizeBase200)",
    fontSizeBase300: "var(--fontSizeBase300)",
    fontSizeBase400: "var(--fontSizeBase400)",
    fontSizeBase500: "var(--fontSizeBase500)",
    fontSizeBase600: "var(--fontSizeBase600)",
    fontSizeHero700: "var(--fontSizeHero700)",
    fontSizeHero800: "var(--fontSizeHero800)",
    fontSizeHero900: "var(--fontSizeHero900)",
    fontSizeHero1000: "var(--fontSizeHero1000)",
    // Font weight tokens
    fontWeightRegular: "var(--fontWeightRegular)",
    fontWeightMedium: "var(--fontWeightMedium)",
    fontWeightSemibold: "var(--fontWeightSemibold)",
    fontWeightBold: "var(--fontWeightBold)",
    // Line height tokens
    lineHeightBase100: "var(--lineHeightBase100)",
    lineHeightBase200: "var(--lineHeightBase200)",
    lineHeightBase300: "var(--lineHeightBase300)",
    lineHeightBase400: "var(--lineHeightBase400)",
    lineHeightBase500: "var(--lineHeightBase500)",
    lineHeightBase600: "var(--lineHeightBase600)",
    lineHeightHero700: "var(--lineHeightHero700)",
    lineHeightHero800: "var(--lineHeightHero800)",
    lineHeightHero900: "var(--lineHeightHero900)",
    lineHeightHero1000: "var(--lineHeightHero1000)",
    // Shadow tokens
    shadow2: "var(--shadow2)",
    shadow4: "var(--shadow4)",
    shadow8: "var(--shadow8)",
    shadow16: "var(--shadow16)",
    shadow28: "var(--shadow28)",
    shadow64: "var(--shadow64)",
    // Shadow brand tokens
    shadow2Brand: "var(--shadow2Brand)",
    shadow4Brand: "var(--shadow4Brand)",
    shadow8Brand: "var(--shadow8Brand)",
    shadow16Brand: "var(--shadow16Brand)",
    shadow28Brand: "var(--shadow28Brand)",
    shadow64Brand: "var(--shadow64Brand)",
    // Stroke width tokens
    strokeWidthThin: "var(--strokeWidthThin)",
    strokeWidthThick: "var(--strokeWidthThick)",
    strokeWidthThicker: "var(--strokeWidthThicker)",
    strokeWidthThickest: "var(--strokeWidthThickest)",
    // Spacings
    spacingHorizontalNone: "var(--spacingHorizontalNone)",
    spacingHorizontalXXS: "var(--spacingHorizontalXXS)",
    spacingHorizontalXS: "var(--spacingHorizontalXS)",
    spacingHorizontalSNudge: "var(--spacingHorizontalSNudge)",
    spacingHorizontalS: "var(--spacingHorizontalS)",
    spacingHorizontalMNudge: "var(--spacingHorizontalMNudge)",
    spacingHorizontalM: "var(--spacingHorizontalM)",
    spacingHorizontalL: "var(--spacingHorizontalL)",
    spacingHorizontalXL: "var(--spacingHorizontalXL)",
    spacingHorizontalXXL: "var(--spacingHorizontalXXL)",
    spacingHorizontalXXXL: "var(--spacingHorizontalXXXL)",
    spacingVerticalNone: "var(--spacingVerticalNone)",
    spacingVerticalXXS: "var(--spacingVerticalXXS)",
    spacingVerticalXS: "var(--spacingVerticalXS)",
    spacingVerticalSNudge: "var(--spacingVerticalSNudge)",
    spacingVerticalS: "var(--spacingVerticalS)",
    spacingVerticalMNudge: "var(--spacingVerticalMNudge)",
    spacingVerticalM: "var(--spacingVerticalM)",
    spacingVerticalL: "var(--spacingVerticalL)",
    spacingVerticalXL: "var(--spacingVerticalXL)",
    spacingVerticalXXL: "var(--spacingVerticalXXL)",
    spacingVerticalXXXL: "var(--spacingVerticalXXXL)",
    // Durations
    durationUltraFast: "var(--durationUltraFast)",
    durationFaster: "var(--durationFaster)",
    durationFast: "var(--durationFast)",
    durationNormal: "var(--durationNormal)",
    durationGentle: "var(--durationGentle)",
    durationSlow: "var(--durationSlow)",
    durationSlower: "var(--durationSlower)",
    durationUltraSlow: "var(--durationUltraSlow)",
    // Curves
    curveAccelerateMax: "var(--curveAccelerateMax)",
    curveAccelerateMid: "var(--curveAccelerateMid)",
    curveAccelerateMin: "var(--curveAccelerateMin)",
    curveDecelerateMax: "var(--curveDecelerateMax)",
    curveDecelerateMid: "var(--curveDecelerateMid)",
    curveDecelerateMin: "var(--curveDecelerateMin)",
    curveEasyEaseMax: "var(--curveEasyEaseMax)",
    curveEasyEase: "var(--curveEasyEase)",
    curveLinear: "var(--curveLinear)"
  };

  // ../node_modules/@fluentui/tokens/lib/utils/shadows.js
  function createShadowTokens(ambientColor, keyColor, tokenSuffix = "") {
    return {
      [`shadow2${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 1px 2px ${keyColor}`,
      [`shadow4${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 2px 4px ${keyColor}`,
      [`shadow8${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 4px 8px ${keyColor}`,
      [`shadow16${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 8px 16px ${keyColor}`,
      [`shadow28${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 14px 28px ${keyColor}`,
      [`shadow64${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 32px 64px ${keyColor}`
    };
  }

  // ../node_modules/@fluentui/tokens/lib/global/brandColors.js
  var brandWeb = {
    10: `#061724`,
    20: `#082338`,
    30: `#0a2e4a`,
    40: `#0c3b5e`,
    50: `#0e4775`,
    60: `#0f548c`,
    70: `#115ea3`,
    80: `#0f6cbd`,
    90: `#2886de`,
    100: `#479ef5`,
    110: `#62abf5`,
    120: `#77b7f7`,
    130: `#96c6fa`,
    140: `#b4d6fa`,
    150: `#cfe4fa`,
    160: `#ebf3fc`
  };

  // ../node_modules/@fluentui/tokens/lib/alias/darkColorPalette.js
  var statusColorPaletteTokens = statusSharedColorNames.reduce((acc, sharedColor) => {
    const color2 = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
    const sharedColorTokens = {
      [`colorPalette${color2}Background1`]: statusSharedColors[sharedColor].shade40,
      [`colorPalette${color2}Background2`]: statusSharedColors[sharedColor].shade30,
      [`colorPalette${color2}Background3`]: statusSharedColors[sharedColor].primary,
      [`colorPalette${color2}Foreground1`]: statusSharedColors[sharedColor].tint30,
      [`colorPalette${color2}Foreground2`]: statusSharedColors[sharedColor].tint40,
      [`colorPalette${color2}Foreground3`]: statusSharedColors[sharedColor].tint20,
      [`colorPalette${color2}BorderActive`]: statusSharedColors[sharedColor].tint30,
      [`colorPalette${color2}Border1`]: statusSharedColors[sharedColor].primary,
      [`colorPalette${color2}Border2`]: statusSharedColors[sharedColor].tint20
    };
    return Object.assign(acc, sharedColorTokens);
  }, {});
  statusColorPaletteTokens.colorPaletteRedForeground3 = statusSharedColors.red.tint30;
  statusColorPaletteTokens.colorPaletteRedBorder2 = statusSharedColors.red.tint30;
  statusColorPaletteTokens.colorPaletteGreenForeground3 = statusSharedColors.green.tint40;
  statusColorPaletteTokens.colorPaletteGreenBorder2 = statusSharedColors.green.tint40;
  statusColorPaletteTokens.colorPaletteDarkOrangeForeground3 = statusSharedColors.darkOrange.tint30;
  statusColorPaletteTokens.colorPaletteDarkOrangeBorder2 = statusSharedColors.darkOrange.tint30;
  statusColorPaletteTokens.colorPaletteRedForegroundInverted = statusSharedColors.red.primary;
  statusColorPaletteTokens.colorPaletteGreenForegroundInverted = statusSharedColors.green.primary;
  statusColorPaletteTokens.colorPaletteYellowForegroundInverted = statusSharedColors.yellow.shade30;
  var personaColorPaletteTokens = personaSharedColorNames.reduce((acc, sharedColor) => {
    const color2 = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
    const sharedColorTokens = {
      [`colorPalette${color2}Background2`]: personaSharedColors[sharedColor].shade30,
      [`colorPalette${color2}Foreground2`]: personaSharedColors[sharedColor].tint40,
      [`colorPalette${color2}BorderActive`]: personaSharedColors[sharedColor].tint30
    };
    return Object.assign(acc, sharedColorTokens);
  }, {});
  personaColorPaletteTokens.colorPaletteDarkRedBackground2 = personaSharedColors.darkRed.shade20;
  personaColorPaletteTokens.colorPalettePlumBackground2 = personaSharedColors.plum.shade20;
  var colorPaletteTokens = {
    ...statusColorPaletteTokens,
    ...personaColorPaletteTokens
  };
  var colorStatusTokens = Object.entries(statusColorMapping).reduce((acc, [statusColor, sharedColor]) => {
    const color2 = statusColor.slice(0, 1).toUpperCase() + statusColor.slice(1);
    const statusColorTokens = {
      [`colorStatus${color2}Background1`]: mappedStatusColors[sharedColor].shade40,
      [`colorStatus${color2}Background2`]: mappedStatusColors[sharedColor].shade30,
      [`colorStatus${color2}Background3`]: mappedStatusColors[sharedColor].primary,
      [`colorStatus${color2}Foreground1`]: mappedStatusColors[sharedColor].tint30,
      [`colorStatus${color2}Foreground2`]: mappedStatusColors[sharedColor].tint40,
      [`colorStatus${color2}Foreground3`]: mappedStatusColors[sharedColor].tint20,
      [`colorStatus${color2}BorderActive`]: mappedStatusColors[sharedColor].tint30,
      [`colorStatus${color2}ForegroundInverted`]: mappedStatusColors[sharedColor].shade10,
      [`colorStatus${color2}Border1`]: mappedStatusColors[sharedColor].primary,
      [`colorStatus${color2}Border2`]: mappedStatusColors[sharedColor].tint20
    };
    return Object.assign(acc, statusColorTokens);
  }, {});
  colorStatusTokens.colorStatusDangerForeground3 = mappedStatusColors[statusColorMapping.danger].tint30;
  colorStatusTokens.colorStatusDangerBorder2 = mappedStatusColors[statusColorMapping.danger].tint30;
  colorStatusTokens.colorStatusSuccessForeground3 = mappedStatusColors[statusColorMapping.success].tint40;
  colorStatusTokens.colorStatusSuccessBorder2 = mappedStatusColors[statusColorMapping.success].tint40;
  colorStatusTokens.colorStatusWarningForegroundInverted = mappedStatusColors[statusColorMapping.warning].shade20;

  // ../node_modules/@fluentui/tokens/lib/alias/darkColor.js
  var generateColorTokens = (brand) => ({
    colorNeutralForeground1: white,
    colorNeutralForeground1Hover: white,
    colorNeutralForeground1Pressed: white,
    colorNeutralForeground1Selected: white,
    colorNeutralForeground2: grey[84],
    colorNeutralForeground2Hover: white,
    colorNeutralForeground2Pressed: white,
    colorNeutralForeground2Selected: white,
    colorNeutralForeground2BrandHover: brand[100],
    colorNeutralForeground2BrandPressed: brand[90],
    colorNeutralForeground2BrandSelected: brand[100],
    colorNeutralForeground3: grey[68],
    colorNeutralForeground3Hover: grey[84],
    colorNeutralForeground3Pressed: grey[84],
    colorNeutralForeground3Selected: grey[84],
    colorNeutralForeground3BrandHover: brand[100],
    colorNeutralForeground3BrandPressed: brand[90],
    colorNeutralForeground3BrandSelected: brand[100],
    colorNeutralForeground4: grey[60],
    colorNeutralForegroundDisabled: grey[36],
    colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
    colorBrandForegroundLink: brand[100],
    colorBrandForegroundLinkHover: brand[110],
    colorBrandForegroundLinkPressed: brand[90],
    colorBrandForegroundLinkSelected: brand[100],
    colorNeutralForeground2Link: grey[84],
    colorNeutralForeground2LinkHover: white,
    colorNeutralForeground2LinkPressed: white,
    colorNeutralForeground2LinkSelected: white,
    colorCompoundBrandForeground1: brand[100],
    colorCompoundBrandForeground1Hover: brand[110],
    colorCompoundBrandForeground1Pressed: brand[90],
    colorBrandForeground1: brand[100],
    colorBrandForeground2: brand[110],
    colorBrandForeground2Hover: brand[130],
    colorBrandForeground2Pressed: brand[160],
    colorNeutralForeground1Static: grey[14],
    colorNeutralForegroundStaticInverted: white,
    colorNeutralForegroundInverted: grey[14],
    colorNeutralForegroundInvertedHover: grey[14],
    colorNeutralForegroundInvertedPressed: grey[14],
    colorNeutralForegroundInvertedSelected: grey[14],
    colorNeutralForegroundInverted2: grey[14],
    colorNeutralForegroundOnBrand: white,
    colorNeutralForegroundInvertedLink: white,
    colorNeutralForegroundInvertedLinkHover: white,
    colorNeutralForegroundInvertedLinkPressed: white,
    colorNeutralForegroundInvertedLinkSelected: white,
    colorBrandForegroundInverted: brand[80],
    colorBrandForegroundInvertedHover: brand[70],
    colorBrandForegroundInvertedPressed: brand[60],
    colorBrandForegroundOnLight: brand[80],
    colorBrandForegroundOnLightHover: brand[70],
    colorBrandForegroundOnLightPressed: brand[50],
    colorBrandForegroundOnLightSelected: brand[60],
    colorNeutralBackground1: grey[16],
    colorNeutralBackground1Hover: grey[24],
    colorNeutralBackground1Pressed: grey[12],
    colorNeutralBackground1Selected: grey[22],
    colorNeutralBackground2: grey[12],
    colorNeutralBackground2Hover: grey[20],
    colorNeutralBackground2Pressed: grey[8],
    colorNeutralBackground2Selected: grey[18],
    colorNeutralBackground3: grey[8],
    colorNeutralBackground3Hover: grey[16],
    colorNeutralBackground3Pressed: grey[4],
    colorNeutralBackground3Selected: grey[14],
    colorNeutralBackground4: grey[4],
    colorNeutralBackground4Hover: grey[12],
    colorNeutralBackground4Pressed: black,
    colorNeutralBackground4Selected: grey[10],
    colorNeutralBackground5: black,
    colorNeutralBackground5Hover: grey[8],
    colorNeutralBackground5Pressed: grey[2],
    colorNeutralBackground5Selected: grey[6],
    colorNeutralBackground6: grey[20],
    colorNeutralBackgroundInverted: white,
    colorNeutralBackgroundStatic: grey[24],
    colorNeutralBackgroundAlpha: grey10Alpha[50],
    colorNeutralBackgroundAlpha2: grey12Alpha[70],
    colorSubtleBackground: "transparent",
    colorSubtleBackgroundHover: grey[22],
    colorSubtleBackgroundPressed: grey[18],
    colorSubtleBackgroundSelected: grey[20],
    colorSubtleBackgroundLightAlphaHover: grey14Alpha[80],
    colorSubtleBackgroundLightAlphaPressed: grey14Alpha[50],
    colorSubtleBackgroundLightAlphaSelected: "transparent",
    colorSubtleBackgroundInverted: "transparent",
    colorSubtleBackgroundInvertedHover: blackAlpha[10],
    colorSubtleBackgroundInvertedPressed: blackAlpha[30],
    colorSubtleBackgroundInvertedSelected: blackAlpha[20],
    colorTransparentBackground: "transparent",
    colorTransparentBackgroundHover: "transparent",
    colorTransparentBackgroundPressed: "transparent",
    colorTransparentBackgroundSelected: "transparent",
    colorNeutralBackgroundDisabled: grey[8],
    colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
    colorNeutralStencil1: grey[34],
    colorNeutralStencil2: grey[20],
    colorNeutralStencil1Alpha: whiteAlpha[10],
    colorNeutralStencil2Alpha: whiteAlpha[5],
    colorBackgroundOverlay: blackAlpha[50],
    colorScrollbarOverlay: whiteAlpha[60],
    colorBrandBackground: brand[70],
    colorBrandBackgroundHover: brand[80],
    colorBrandBackgroundPressed: brand[40],
    colorBrandBackgroundSelected: brand[60],
    colorCompoundBrandBackground: brand[100],
    colorCompoundBrandBackgroundHover: brand[110],
    colorCompoundBrandBackgroundPressed: brand[90],
    colorBrandBackgroundStatic: brand[80],
    colorBrandBackground2: brand[20],
    colorBrandBackground2Hover: brand[40],
    colorBrandBackground2Pressed: brand[10],
    colorBrandBackgroundInverted: white,
    colorBrandBackgroundInvertedHover: brand[160],
    colorBrandBackgroundInvertedPressed: brand[140],
    colorBrandBackgroundInvertedSelected: brand[150],
    colorNeutralStrokeAccessible: grey[68],
    colorNeutralStrokeAccessibleHover: grey[74],
    colorNeutralStrokeAccessiblePressed: grey[70],
    colorNeutralStrokeAccessibleSelected: brand[100],
    colorNeutralStroke1: grey[40],
    colorNeutralStroke1Hover: grey[46],
    colorNeutralStroke1Pressed: grey[42],
    colorNeutralStroke1Selected: grey[44],
    colorNeutralStroke2: grey[32],
    colorNeutralStroke3: grey[24],
    colorNeutralStrokeSubtle: grey[4],
    colorNeutralStrokeOnBrand: grey[16],
    colorNeutralStrokeOnBrand2: white,
    colorNeutralStrokeOnBrand2Hover: white,
    colorNeutralStrokeOnBrand2Pressed: white,
    colorNeutralStrokeOnBrand2Selected: white,
    colorBrandStroke1: brand[100],
    colorBrandStroke2: brand[50],
    colorBrandStroke2Hover: brand[50],
    colorBrandStroke2Pressed: brand[30],
    colorBrandStroke2Contrast: brand[50],
    colorCompoundBrandStroke: brand[100],
    colorCompoundBrandStrokeHover: brand[110],
    colorCompoundBrandStrokePressed: brand[90],
    colorNeutralStrokeDisabled: grey[26],
    colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
    colorTransparentStroke: "transparent",
    colorTransparentStrokeInteractive: "transparent",
    colorTransparentStrokeDisabled: "transparent",
    colorNeutralStrokeAlpha: whiteAlpha[10],
    colorNeutralStrokeAlpha2: whiteAlpha[20],
    colorStrokeFocus1: black,
    colorStrokeFocus2: white,
    colorNeutralShadowAmbient: "rgba(0,0,0,0.24)",
    colorNeutralShadowKey: "rgba(0,0,0,0.28)",
    colorNeutralShadowAmbientLighter: "rgba(0,0,0,0.12)",
    colorNeutralShadowKeyLighter: "rgba(0,0,0,0.14)",
    colorNeutralShadowAmbientDarker: "rgba(0,0,0,0.40)",
    colorNeutralShadowKeyDarker: "rgba(0,0,0,0.48)",
    colorBrandShadowAmbient: "rgba(0,0,0,0.30)",
    colorBrandShadowKey: "rgba(0,0,0,0.25)"
  });

  // ../node_modules/@fluentui/tokens/lib/utils/createDarkTheme.js
  var createDarkTheme = (brand) => {
    const colorTokens = generateColorTokens(brand);
    return {
      ...borderRadius3,
      ...fontSizes,
      ...lineHeights,
      ...fontFamilies,
      ...fontWeights,
      ...strokeWidths,
      ...horizontalSpacings,
      ...verticalSpacings,
      ...durations,
      ...curves,
      ...colorTokens,
      ...colorPaletteTokens,
      ...colorStatusTokens,
      ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
      ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, "Brand")
    };
  };

  // ../node_modules/@fluentui/tokens/lib/themes/web/darkTheme.js
  var webDarkTheme = createDarkTheme(brandWeb);

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProvider.js
  var React38 = __toESM(require_react());

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderThemeStyleTag.js
  var React37 = __toESM(require_react());

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderStyles.styles.js
  var fluentProviderClassNames = {
    root: "fui-FluentProvider"
  };
  var useStyles = /* @__PURE__ */ __styles({
    root: {
      sj55zd: "f19n0e5",
      De3pzq: "fxugw4r",
      fsow6f: ["f1o700av", "fes3tcz"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    }
  }, {
    d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1o700av{text-align:left;}", ".fes3tcz{text-align:right;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}"]
  });
  var useFluentProviderStyles_unstable = (state) => {
    const renderer = useRenderer();
    const styles4 = useStyles({
      dir: state.dir,
      renderer
    });
    state.root.className = mergeClasses(fluentProviderClassNames.root, state.themeClassName, styles4.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderThemeStyleTag.js
  var useInsertionEffect4 = React37["useInsertionEffect"] ? React37["useInsertionEffect"] : useIsomorphicLayoutEffect;
  var createStyleTag = (target, elementAttributes) => {
    if (!target) {
      return void 0;
    }
    const tag = target.createElement("style");
    Object.keys(elementAttributes).forEach((attrName) => {
      tag.setAttribute(attrName, elementAttributes[attrName]);
    });
    target.head.appendChild(tag);
    return tag;
  };
  var insertSheet = (tag, rule) => {
    const sheet = tag.sheet;
    if (sheet) {
      if (sheet.cssRules.length > 0) {
        sheet.deleteRule(0);
      }
      sheet.insertRule(rule, 0);
    } else if (true) {
      console.error("FluentProvider: No sheet available on styleTag, styles will not be inserted into DOM.");
    }
  };
  var useFluentProviderThemeStyleTag = (options) => {
    const { targetDocument, theme, rendererAttributes } = options;
    const styleTag = React37.useRef();
    const styleTagId = useId2(fluentProviderClassNames.root);
    const styleElementAttributes = rendererAttributes;
    const cssVarsAsString = React37.useMemo(() => {
      return theme ? Object.keys(theme).reduce((cssVarRule, cssVar) => {
        cssVarRule += `--${cssVar}: ${theme[cssVar]}; `;
        return cssVarRule;
      }, "") : "";
    }, [
      theme
    ]);
    const rule = `.${styleTagId} { ${cssVarsAsString} }`;
    if (true) {
      React37.useMemo(() => {
        if (targetDocument) {
          const providerSelector = `.${fluentProviderClassNames.root}.${styleTagId}`;
          const providerElements = targetDocument.querySelectorAll(providerSelector);
          const isSSR = targetDocument.querySelector(`${providerSelector} > style[id="${styleTagId}"]`) !== null;
          const elementsCount = isSSR ? 1 : 0;
          if (providerElements.length > elementsCount) {
            console.error([
              "@fluentui/react-provider: There are conflicting ids in your DOM.",
              "Please make sure that you configured your application properly.",
              "\n",
              "\n",
              "Configuration guide: https://aka.ms/fluentui-conflicting-ids"
            ].join(" "));
          }
        }
      }, []);
    }
    useHandleSSRStyleElements(targetDocument, styleTagId);
    useInsertionEffect4(() => {
      var _targetDocument;
      const ssrStyleElement = (_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.getElementById(styleTagId);
      if (ssrStyleElement) {
        styleTag.current = ssrStyleElement;
      } else {
        styleTag.current = createStyleTag(targetDocument, {
          ...styleElementAttributes,
          id: styleTagId
        });
        if (styleTag.current) {
          insertSheet(styleTag.current, rule);
        }
      }
      return () => {
        var _styleTag_current;
        (_styleTag_current = styleTag.current) === null || _styleTag_current === void 0 ? void 0 : _styleTag_current.remove();
      };
    }, [
      styleTagId,
      targetDocument,
      rule,
      styleElementAttributes
    ]);
    return {
      styleTagId,
      rule
    };
  };
  function useHandleSSRStyleElements(targetDocument, styleTagId) {
    React37.useState(() => {
      if (!targetDocument) {
        return;
      }
      const themeStyleElement = targetDocument.getElementById(styleTagId);
      if (themeStyleElement) {
        targetDocument.head.append(themeStyleElement);
      }
    });
  }

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProvider.js
  var useFluentProvider_unstable = (props, ref) => {
    const parentContext = useFluent();
    const parentTheme = useTheme();
    const parentOverrides = useOverrides();
    const parentCustomStyleHooks = React38.useContext(CustomStyleHooksContext) || {};
    const {
      applyStylesToPortals = true,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      dir = parentContext.dir,
      targetDocument = parentContext.targetDocument,
      theme,
      overrides_unstable: overrides = {}
    } = props;
    const mergedTheme = shallowMerge(parentTheme, theme);
    const mergedOverrides = shallowMerge(parentOverrides, overrides);
    const mergedCustomStyleHooks = shallowMerge(parentCustomStyleHooks, customStyleHooks_unstable);
    const renderer = useRenderer();
    var _renderer_styleElementAttributes;
    const { styleTagId, rule } = useFluentProviderThemeStyleTag({
      theme: mergedTheme,
      targetDocument,
      rendererAttributes: (_renderer_styleElementAttributes = renderer.styleElementAttributes) !== null && _renderer_styleElementAttributes !== void 0 ? _renderer_styleElementAttributes : {}
    });
    if (true) {
      React38.useEffect(() => {
        if (mergedTheme === void 0) {
          console.warn([
            '@fluentui/react-provider: FluentProvider does not have your "theme" defined.',
            "Make sure that your top-level FluentProvider has set a `theme` prop or you're setting the theme in your child FluentProvider."
          ].join(" "));
        }
      }, []);
    }
    return {
      applyStylesToPortals,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable: mergedCustomStyleHooks,
      dir,
      targetDocument,
      theme: mergedTheme,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable: mergedOverrides,
      themeClassName: styleTagId,
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ...props,
        dir,
        ref: useMergedRefs(ref, useFocusVisible({
          targetDocument
        }))
      }), {
        elementType: "div"
      }),
      serverStyleProps: {
        cssRule: rule,
        attributes: {
          ...renderer.styleElementAttributes,
          id: styleTagId
        }
      }
    };
  };
  function shallowMerge(a3, b4) {
    if (a3 && b4) {
      return {
        ...a3,
        ...b4
      };
    }
    if (a3) {
      return a3;
    }
    return b4;
  }
  function useTheme() {
    return React38.useContext(ThemeContext);
  }

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderContextValues.js
  var React39 = __toESM(require_react());
  function useFluentProviderContextValues_unstable(state) {
    const {
      applyStylesToPortals,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      dir,
      root: root3,
      targetDocument,
      theme,
      themeClassName,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable
    } = state;
    const provider = React39.useMemo(() => ({
      dir,
      targetDocument
    }), [
      dir,
      targetDocument
    ]);
    const [tooltip] = React39.useState(() => ({}));
    const iconDirection = React39.useMemo(() => ({
      textDirection: dir
    }), [
      dir
    ]);
    return {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable,
      provider,
      textDirection: dir,
      iconDirection,
      tooltip,
      theme,
      themeClassName: applyStylesToPortals ? root3.className : themeClassName
    };
  }

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/FluentProvider.js
  var FluentProvider = /* @__PURE__ */ React40.forwardRef((props, ref) => {
    const state = useFluentProvider_unstable(props, ref);
    useFluentProviderStyles_unstable(state);
    const contextValues = useFluentProviderContextValues_unstable(state);
    return renderFluentProvider_unstable(state, contextValues);
  });
  FluentProvider.displayName = "FluentProvider";

  // ../node_modules/@fluentui/react-context-selector/lib/createContext.js
  var React41 = __toESM(require_react());
  var import_scheduler = __toESM(require_scheduler2());
  var createProvider = (Original) => {
    const Provider2 = (props) => {
      const valueRef = React41.useRef(props.value);
      const versionRef = React41.useRef(0);
      const contextValue = React41.useRef();
      if (!contextValue.current) {
        contextValue.current = {
          value: valueRef,
          version: versionRef,
          listeners: []
        };
      }
      useIsomorphicLayoutEffect(() => {
        valueRef.current = props.value;
        versionRef.current += 1;
        (0, import_scheduler.unstable_runWithPriority)(import_scheduler.unstable_NormalPriority, () => {
          contextValue.current.listeners.forEach((listener) => {
            listener([
              versionRef.current,
              props.value
            ]);
          });
        });
      }, [
        props.value
      ]);
      return React41.createElement(Original, {
        value: contextValue.current
      }, props.children);
    };
    if (true) {
      Provider2.displayName = "ContextSelector.Provider";
    }
    return Provider2;
  };
  var createContext14 = (defaultValue) => {
    const context = React41.createContext({
      value: {
        current: defaultValue
      },
      version: {
        current: -1
      },
      listeners: []
    });
    context.Provider = createProvider(context.Provider);
    delete context.Consumer;
    return context;
  };

  // ../node_modules/@fluentui/react-context-selector/lib/useContextSelector.js
  var React42 = __toESM(require_react());
  var useContextSelector = (context, selector) => {
    const contextValue = React42.useContext(context);
    const { value: { current: value }, version: { current: version2 }, listeners } = contextValue;
    const selected = selector(value);
    const [state, dispatch] = React42.useReducer((prevState, payload) => {
      if (!payload) {
        return [
          value,
          selected
        ];
      }
      if (payload[0] <= version2) {
        if (objectIs(prevState[1], selected)) {
          return prevState;
        }
        return [
          value,
          selected
        ];
      }
      try {
        if (objectIs(prevState[0], payload[1])) {
          return prevState;
        }
        const nextSelected = selector(payload[1]);
        if (objectIs(prevState[1], nextSelected)) {
          return prevState;
        }
        return [
          payload[1],
          nextSelected
        ];
      } catch (e3) {
      }
      return [
        prevState[0],
        prevState[1]
      ];
    }, [
      value,
      selected
    ]);
    if (!objectIs(state[1], selected)) {
      dispatch(void 0);
    }
    useIsomorphicLayoutEffect(() => {
      listeners.push(dispatch);
      return () => {
        const index2 = listeners.indexOf(dispatch);
        listeners.splice(index2, 1);
      };
    }, [
      listeners
    ]);
    return state[1];
  };
  function is(x2, y3) {
    return x2 === y3 && (x2 !== 0 || 1 / x2 === 1 / y3) || x2 !== x2 && y3 !== y3;
  }
  var objectIs = (
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore fallback to native if it exists (not in IE11)
    typeof Object.is === "function" ? Object.is : is
  );

  // ../node_modules/@fluentui/react-context-selector/lib/useHasParentContext.js
  var React43 = __toESM(require_react());
  function useHasParentContext(context) {
    const contextValue = React43.useContext(context);
    if (contextValue.version) {
      return contextValue.version.current !== -1;
    }
    return false;
  }

  // ../node_modules/@fluentui/keyboard-keys/lib/keys.js
  var Enter = "Enter";
  var Space = " ";
  var Tab = "Tab";
  var ArrowDown = "ArrowDown";
  var ArrowLeft = "ArrowLeft";
  var ArrowRight = "ArrowRight";
  var ArrowUp = "ArrowUp";
  var End = "End";
  var Home = "Home";
  var PageDown = "PageDown";
  var PageUp = "PageUp";
  var Escape = "Escape";

  // ../node_modules/@fluentui/react-aria/lib/button/useARIAButtonProps.js
  var React44 = __toESM(require_react());
  function useARIAButtonProps(type, props) {
    const { disabled, disabledFocusable = false, ["aria-disabled"]: ariaDisabled, onClick, onKeyDown, onKeyUp, ...rest } = props !== null && props !== void 0 ? props : {};
    const normalizedARIADisabled = typeof ariaDisabled === "string" ? ariaDisabled === "true" : ariaDisabled;
    const isDisabled = disabled || disabledFocusable || normalizedARIADisabled;
    const handleClick = useEventCallback((ev) => {
      if (isDisabled) {
        ev.preventDefault();
        ev.stopPropagation();
      } else {
        var _onClick;
        (_onClick = onClick) === null || _onClick === void 0 ? void 0 : _onClick(ev);
      }
    });
    const handleKeyDown = useEventCallback((ev) => {
      var _onKeyDown2;
      (_onKeyDown2 = onKeyDown) === null || _onKeyDown2 === void 0 ? void 0 : _onKeyDown2(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        return;
      } else if (key === Enter) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    const handleKeyUp = useEventCallback((ev) => {
      var _onKeyUp2;
      (_onKeyUp2 = onKeyUp) === null || _onKeyUp2 === void 0 ? void 0 : _onKeyUp2(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    if (type === "button" || type === void 0) {
      return {
        ...rest,
        disabled: disabled && !disabledFocusable,
        "aria-disabled": disabledFocusable ? true : normalizedARIADisabled,
        // onclick should still use internal handler to ensure prevention if disabled
        // if disabledFocusable then there's no requirement for handlers as those events should not be propagated
        onClick: disabledFocusable ? void 0 : handleClick,
        onKeyUp: disabledFocusable ? void 0 : onKeyUp,
        onKeyDown: disabledFocusable ? void 0 : onKeyDown
      };
    } else {
      const resultProps = {
        role: "button",
        tabIndex: disabled && !disabledFocusable ? void 0 : 0,
        ...rest,
        // If it's not a <button> than listeners are required even with disabledFocusable
        // Since you cannot assure the default behavior of the element
        // E.g: <a> will redirect on click
        onClick: handleClick,
        onKeyUp: handleKeyUp,
        onKeyDown: handleKeyDown,
        "aria-disabled": disabled || disabledFocusable || normalizedARIADisabled
      };
      if (type === "a" && isDisabled) {
        resultProps.href = void 0;
      }
      return resultProps;
    }
  }

  // ../node_modules/@fluentui/react-aria/lib/button/useARIAButtonShorthand.js
  var useARIAButtonShorthand = (value, options) => {
    var _shorthand;
    const shorthand = resolveShorthand2(value, options);
    var _shorthand_as;
    const shorthandARIAButton = useARIAButtonProps((_shorthand_as = (_shorthand = shorthand) === null || _shorthand === void 0 ? void 0 : _shorthand.as) !== null && _shorthand_as !== void 0 ? _shorthand_as : "button", shorthand);
    return shorthand && shorthandARIAButton;
  };

  // ../node_modules/@fluentui/react-avatar/lib/components/Avatar/Avatar.js
  var React52 = __toESM(require_react());

  // ../node_modules/@fluentui/react-avatar/lib/components/Avatar/renderAvatar.js
  var renderAvatar_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.initials && /* @__PURE__ */ jsx(state.initials, {}),
        state.icon && /* @__PURE__ */ jsx(state.icon, {}),
        state.image && /* @__PURE__ */ jsx(state.image, {}),
        state.badge && /* @__PURE__ */ jsx(state.badge, {}),
        state.activeAriaLabelElement
      ]
    });
  };

  // ../node_modules/@fluentui/react-avatar/lib/components/Avatar/useAvatar.js
  var React51 = __toESM(require_react());

  // ../node_modules/@fluentui/react-avatar/lib/utils/getInitials.js
  var UNWANTED_ENCLOSURES_REGEX = /[\(\[\{][^\)\]\}]*[\)\]\}]/g;
  var UNWANTED_CHARS_REGEX = /[\0-\u001F\!-/:-@\[-`\{-\u00BF\u0250-\u036F\uD800-\uFFFF]/g;
  var PHONENUMBER_REGEX = /^\d+[\d\s]*(:?ext|x|)\s*\d+$/i;
  var MULTIPLE_WHITESPACES_REGEX = /\s+/g;
  var UNSUPPORTED_TEXT_REGEX = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\u1100-\u11FF\u3130-\u318F\uA960-\uA97F\uAC00-\uD7AF\uD7B0-\uD7FF\u3040-\u309F\u30A0-\u30FF\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD869][\uDC00-\uDED6]/;
  function getInitialsLatin(displayName, isRtl, firstInitialOnly) {
    let initials = "";
    const splits = displayName.split(" ");
    if (splits.length !== 0) {
      initials += splits[0].charAt(0).toUpperCase();
    }
    if (!firstInitialOnly) {
      if (splits.length === 2) {
        initials += splits[1].charAt(0).toUpperCase();
      } else if (splits.length === 3) {
        initials += splits[2].charAt(0).toUpperCase();
      }
    }
    if (isRtl && initials.length > 1) {
      return initials.charAt(1) + initials.charAt(0);
    }
    return initials;
  }
  function cleanupDisplayName(displayName) {
    displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, "");
    displayName = displayName.replace(UNWANTED_CHARS_REGEX, "");
    displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, " ");
    displayName = displayName.trim();
    return displayName;
  }
  function getInitials(displayName, isRtl, options) {
    var _options, _options1;
    if (!displayName) {
      return "";
    }
    displayName = cleanupDisplayName(displayName);
    if (UNSUPPORTED_TEXT_REGEX.test(displayName) || !((_options = options) === null || _options === void 0 ? void 0 : _options.allowPhoneInitials) && PHONENUMBER_REGEX.test(displayName)) {
      return "";
    }
    return getInitialsLatin(displayName, isRtl, (_options1 = options) === null || _options1 === void 0 ? void 0 : _options1.firstInitialOnly);
  }

  // ../node_modules/@fluentui/react-badge/lib/components/Badge/Badge.js
  var React46 = __toESM(require_react());

  // ../node_modules/@fluentui/react-badge/lib/components/Badge/useBadge.js
  var React45 = __toESM(require_react());
  var useBadge_unstable = (props, ref) => {
    const { shape = "circular", size: size3 = "medium", iconPosition = "before", appearance = "filled", color: color2 = "brand" } = props;
    const state = {
      shape,
      size: size3,
      iconPosition,
      appearance,
      color: color2,
      components: {
        root: "div",
        icon: "span"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref,
        ...props
      }), {
        elementType: "div"
      }),
      icon: slot_exports.optional(props.icon, {
        elementType: "span"
      })
    };
    return state;
  };

  // ../node_modules/@fluentui/react-badge/lib/components/Badge/useBadgeStyles.styles.js
  var badgeClassNames = {
    root: "fui-Badge",
    icon: "fui-Badge__icon"
  };
  var textPadding = tokens.spacingHorizontalXXS;
  var useRootClassName = /* @__PURE__ */ __resetStyles2("r1l7mb74", "rntuq2r", [".r1l7mb74{display:inline-flex;box-sizing:border-box;align-items:center;justify-content:center;position:relative;font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase200);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase200);height:20px;width:20px;min-width:max-content;padding:0 calc(var(--spacingHorizontalXS) + var(--spacingHorizontalXXS));border-radius:var(--borderRadiusCircular);border-color:var(--colorTransparentStroke);}", '.r1l7mb74::after{content:"";position:absolute;top:0;left:0;bottom:0;right:0;border-style:solid;border-color:inherit;border-width:var(--strokeWidthThin);border-radius:inherit;}', ".rntuq2r{display:inline-flex;box-sizing:border-box;align-items:center;justify-content:center;position:relative;font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase200);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase200);height:20px;width:20px;min-width:max-content;padding:0 calc(var(--spacingHorizontalXS) + var(--spacingHorizontalXXS));border-radius:var(--borderRadiusCircular);border-color:var(--colorTransparentStroke);}", '.rntuq2r::after{content:"";position:absolute;top:0;right:0;bottom:0;left:0;border-style:solid;border-color:inherit;border-width:var(--strokeWidthThin);border-radius:inherit;}']);
  var useRootStyles2 = /* @__PURE__ */ __styles2({
    fontSmallToTiny: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "f13mqy1h",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "fcpl73t"
    },
    tiny: {
      a9b677: "f16dn6v3",
      Bqenvij: "f3mu39s",
      Be2twd7: "f130uwy9",
      Bg96gwp: "fod1mrr",
      Bf4jedk: "f18p0k4z",
      z8tnut: "f1q8r6hh",
      z189sj: ["fio2s09", "fkiw60q"],
      Byoj8tv: "f9yu9nh",
      uwmqm3: ["fkiw60q", "fio2s09"]
    },
    "extra-small": {
      a9b677: "fpd43o0",
      Bqenvij: "f30q22z",
      Be2twd7: "f1tccstq",
      Bg96gwp: "f1y3arg5",
      Bf4jedk: "f18p0k4z",
      z8tnut: "f1q8r6hh",
      z189sj: ["fio2s09", "fkiw60q"],
      Byoj8tv: "f9yu9nh",
      uwmqm3: ["fkiw60q", "fio2s09"]
    },
    small: {
      a9b677: "fjw5fx7",
      Bqenvij: "fd461yt",
      z8tnut: "f1g0x7ka",
      z189sj: ["fps1v9c", "f17ae1jz"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f17ae1jz", "fps1v9c"]
    },
    medium: {},
    large: {
      a9b677: "fq4mcun",
      Bqenvij: "frvgh55",
      z8tnut: "f1g0x7ka",
      z189sj: ["f17a92cs", "f1pe0i86"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1pe0i86", "f17a92cs"]
    },
    "extra-large": {
      a9b677: "f1szoe96",
      Bqenvij: "f1d2rq10",
      z8tnut: "f1g0x7ka",
      z189sj: ["fqznh8f", "f1xile11"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1xile11", "fqznh8f"]
    },
    square: {
      Bbmb7ep: ["fzi6hpg", "fyowgf4"],
      Beyfa6y: ["fyowgf4", "fzi6hpg"],
      B7oj6ja: ["f3fg2lr", "f13av6d4"],
      Btl43ni: ["f13av6d4", "f3fg2lr"]
    },
    rounded: {
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"]
    },
    roundedSmallToTiny: {
      Bbmb7ep: ["f1g3puop", "fi2rrw2"],
      Beyfa6y: ["fi2rrw2", "f1g3puop"],
      B7oj6ja: ["f1rstyi9", "f1s4nn1u"],
      Btl43ni: ["f1s4nn1u", "f1rstyi9"]
    },
    circular: {},
    borderGhost: {
      ap17g6: "f10ludwy"
    },
    filled: {},
    "filled-brand": {
      De3pzq: "ffp7eso",
      sj55zd: "f1phragk"
    },
    "filled-danger": {
      De3pzq: "fdl5y0r",
      sj55zd: "f1phragk"
    },
    "filled-important": {
      De3pzq: "f1c73kur",
      sj55zd: "fr0bkrk"
    },
    "filled-informative": {
      De3pzq: "f3vzo32",
      sj55zd: "f11d4kpn"
    },
    "filled-severe": {
      De3pzq: "f1s438gw",
      sj55zd: "f1phragk"
    },
    "filled-subtle": {
      De3pzq: "fxugw4r",
      sj55zd: "f19n0e5"
    },
    "filled-success": {
      De3pzq: "flxk52p",
      sj55zd: "f1phragk"
    },
    "filled-warning": {
      De3pzq: "ffq97bm",
      sj55zd: "ff5vbop"
    },
    ghost: {},
    "ghost-brand": {
      sj55zd: "f16muhyy"
    },
    "ghost-danger": {
      sj55zd: "f1whyuy6"
    },
    "ghost-important": {
      sj55zd: "f19n0e5"
    },
    "ghost-informative": {
      sj55zd: "f11d4kpn"
    },
    "ghost-severe": {
      sj55zd: "f1l8vj45"
    },
    "ghost-subtle": {
      sj55zd: "fonrgv7"
    },
    "ghost-success": {
      sj55zd: "f1m7fhi8"
    },
    "ghost-warning": {
      sj55zd: "fpti2h4"
    },
    outline: {
      g2u3we: "f23ftbb",
      h3c5rm: ["f1gkuv52", "f1p1bl80"],
      B9xav0g: "fioka3i",
      zhjwy3: ["f1p1bl80", "f1gkuv52"]
    },
    "outline-brand": {
      sj55zd: "f16muhyy"
    },
    "outline-danger": {
      sj55zd: "f1whyuy6",
      g2u3we: "fyqpifd",
      h3c5rm: ["f3ukxca", "f1k7dugc"],
      B9xav0g: "f1njxb2b",
      zhjwy3: ["f1k7dugc", "f3ukxca"]
    },
    "outline-important": {
      sj55zd: "f11d4kpn",
      g2u3we: "fq0vr37",
      h3c5rm: ["f1byw159", "f11cr0be"],
      B9xav0g: "f1c1zstj",
      zhjwy3: ["f11cr0be", "f1byw159"]
    },
    "outline-informative": {
      sj55zd: "f11d4kpn",
      g2u3we: "f68mrw8",
      h3c5rm: ["f7pw515", "fw35ms5"],
      B9xav0g: "frpde29",
      zhjwy3: ["fw35ms5", "f7pw515"]
    },
    "outline-severe": {
      sj55zd: "f1l8vj45"
    },
    "outline-subtle": {
      sj55zd: "fonrgv7"
    },
    "outline-success": {
      sj55zd: "f1m7fhi8",
      g2u3we: "f1mmhl11",
      h3c5rm: ["f1tjpp2f", "f1ocn5n7"],
      B9xav0g: "f1gjv25d",
      zhjwy3: ["f1ocn5n7", "f1tjpp2f"]
    },
    "outline-warning": {
      sj55zd: "fpti2h4"
    },
    tint: {},
    "tint-brand": {
      De3pzq: "f16xkysk",
      sj55zd: "faj9fo0",
      g2u3we: "f161y7kd",
      h3c5rm: ["f1c8dzaj", "f1sl6hi9"],
      B9xav0g: "f1619yhw",
      zhjwy3: ["f1sl6hi9", "f1c8dzaj"]
    },
    "tint-danger": {
      De3pzq: "ff0poqj",
      sj55zd: "f1hcrxcs",
      g2u3we: "f1oqjm8o",
      h3c5rm: ["fkgrb8g", "frb5wm0"],
      B9xav0g: "f1iai1ph",
      zhjwy3: ["frb5wm0", "fkgrb8g"]
    },
    "tint-important": {
      De3pzq: "f945g0u",
      sj55zd: "fr0bkrk",
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"]
    },
    "tint-informative": {
      De3pzq: "f1ctqxl6",
      sj55zd: "f11d4kpn",
      g2u3we: "f68mrw8",
      h3c5rm: ["f7pw515", "fw35ms5"],
      B9xav0g: "frpde29",
      zhjwy3: ["fw35ms5", "f7pw515"]
    },
    "tint-severe": {
      De3pzq: "f1xzsg4",
      sj55zd: "f1k5f75o",
      g2u3we: "fxy9dsj",
      h3c5rm: ["f54u6j2", "fcm23ze"],
      B9xav0g: "f4vf0uq",
      zhjwy3: ["fcm23ze", "f54u6j2"]
    },
    "tint-subtle": {
      De3pzq: "fxugw4r",
      sj55zd: "f11d4kpn",
      g2u3we: "f68mrw8",
      h3c5rm: ["f7pw515", "fw35ms5"],
      B9xav0g: "frpde29",
      zhjwy3: ["fw35ms5", "f7pw515"]
    },
    "tint-success": {
      De3pzq: "f2vsrz6",
      sj55zd: "ffmvakt",
      g2u3we: "fdmic9h",
      h3c5rm: ["f196y6m", "fetptd8"],
      B9xav0g: "f1pev5xq",
      zhjwy3: ["fetptd8", "f196y6m"]
    },
    "tint-warning": {
      De3pzq: "f10s6hli",
      sj55zd: "f42v8de",
      g2u3we: "fn9i3n",
      h3c5rm: ["f1aw8cx4", "f51if14"],
      B9xav0g: "fvq8iai",
      zhjwy3: ["f51if14", "f1aw8cx4"]
    }
  }, {
    d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".f13mqy1h{font-size:var(--fontSizeBase100);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".fcpl73t{line-height:var(--lineHeightBase100);}", ".f16dn6v3{width:6px;}", ".f3mu39s{height:6px;}", ".f130uwy9{font-size:4px;}", ".fod1mrr{line-height:4px;}", ".f18p0k4z{min-width:unset;}", ".f1q8r6hh{padding-top:unset;}", ".fio2s09{padding-right:unset;}", ".fkiw60q{padding-left:unset;}", ".f9yu9nh{padding-bottom:unset;}", ".fpd43o0{width:10px;}", ".f30q22z{height:10px;}", ".f1tccstq{font-size:6px;}", ".f1y3arg5{line-height:6px;}", ".fjw5fx7{width:16px;}", ".fd461yt{height:16px;}", ".f1g0x7ka{padding-top:0;}", ".fps1v9c{padding-right:calc(var(--spacingHorizontalXXS) + var(--spacingHorizontalXXS));}", ".f17ae1jz{padding-left:calc(var(--spacingHorizontalXXS) + var(--spacingHorizontalXXS));}", ".f1qch9an{padding-bottom:0;}", ".fq4mcun{width:24px;}", ".frvgh55{height:24px;}", ".f17a92cs{padding-right:calc(var(--spacingHorizontalXS) + var(--spacingHorizontalXXS));}", ".f1pe0i86{padding-left:calc(var(--spacingHorizontalXS) + var(--spacingHorizontalXXS));}", ".f1szoe96{width:32px;}", ".f1d2rq10{height:32px;}", ".fqznh8f{padding-right:calc(var(--spacingHorizontalSNudge) + var(--spacingHorizontalXXS));}", ".f1xile11{padding-left:calc(var(--spacingHorizontalSNudge) + var(--spacingHorizontalXXS));}", ".fzi6hpg{border-bottom-right-radius:var(--borderRadiusNone);}", ".fyowgf4{border-bottom-left-radius:var(--borderRadiusNone);}", ".f3fg2lr{border-top-right-radius:var(--borderRadiusNone);}", ".f13av6d4{border-top-left-radius:var(--borderRadiusNone);}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f1g3puop{border-bottom-right-radius:var(--borderRadiusSmall);}", ".fi2rrw2{border-bottom-left-radius:var(--borderRadiusSmall);}", ".f1rstyi9{border-top-right-radius:var(--borderRadiusSmall);}", ".f1s4nn1u{border-top-left-radius:var(--borderRadiusSmall);}", ".f10ludwy::after{display:none;}", ".ffp7eso{background-color:var(--colorBrandBackground);}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".fdl5y0r{background-color:var(--colorPaletteRedBackground3);}", ".f1c73kur{background-color:var(--colorNeutralForeground1);}", ".fr0bkrk{color:var(--colorNeutralBackground1);}", ".f3vzo32{background-color:var(--colorNeutralBackground5);}", ".f11d4kpn{color:var(--colorNeutralForeground3);}", ".f1s438gw{background-color:var(--colorPaletteDarkOrangeBackground3);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".flxk52p{background-color:var(--colorPaletteGreenBackground3);}", ".ffq97bm{background-color:var(--colorPaletteYellowBackground3);}", ".ff5vbop{color:var(--colorNeutralForeground1Static);}", ".f16muhyy{color:var(--colorBrandForeground1);}", ".f1whyuy6{color:var(--colorPaletteRedForeground3);}", ".f1l8vj45{color:var(--colorPaletteDarkOrangeForeground3);}", ".fonrgv7{color:var(--colorNeutralForegroundStaticInverted);}", ".f1m7fhi8{color:var(--colorPaletteGreenForeground3);}", ".fpti2h4{color:var(--colorPaletteYellowForeground2);}", ".f23ftbb{border-top-color:currentColor;}", ".f1gkuv52{border-right-color:currentColor;}", ".f1p1bl80{border-left-color:currentColor;}", ".fioka3i{border-bottom-color:currentColor;}", ".fyqpifd{border-top-color:var(--colorPaletteRedBorder2);}", ".f3ukxca{border-right-color:var(--colorPaletteRedBorder2);}", ".f1k7dugc{border-left-color:var(--colorPaletteRedBorder2);}", ".f1njxb2b{border-bottom-color:var(--colorPaletteRedBorder2);}", ".fq0vr37{border-top-color:var(--colorNeutralStrokeAccessible);}", ".f1byw159{border-right-color:var(--colorNeutralStrokeAccessible);}", ".f11cr0be{border-left-color:var(--colorNeutralStrokeAccessible);}", ".f1c1zstj{border-bottom-color:var(--colorNeutralStrokeAccessible);}", ".f68mrw8{border-top-color:var(--colorNeutralStroke2);}", ".f7pw515{border-right-color:var(--colorNeutralStroke2);}", ".fw35ms5{border-left-color:var(--colorNeutralStroke2);}", ".frpde29{border-bottom-color:var(--colorNeutralStroke2);}", ".f1mmhl11{border-top-color:var(--colorPaletteGreenBorder2);}", ".f1tjpp2f{border-right-color:var(--colorPaletteGreenBorder2);}", ".f1ocn5n7{border-left-color:var(--colorPaletteGreenBorder2);}", ".f1gjv25d{border-bottom-color:var(--colorPaletteGreenBorder2);}", ".f16xkysk{background-color:var(--colorBrandBackground2);}", ".faj9fo0{color:var(--colorBrandForeground2);}", ".f161y7kd{border-top-color:var(--colorBrandStroke2);}", ".f1c8dzaj{border-right-color:var(--colorBrandStroke2);}", ".f1sl6hi9{border-left-color:var(--colorBrandStroke2);}", ".f1619yhw{border-bottom-color:var(--colorBrandStroke2);}", ".ff0poqj{background-color:var(--colorPaletteRedBackground1);}", ".f1hcrxcs{color:var(--colorPaletteRedForeground1);}", ".f1oqjm8o{border-top-color:var(--colorPaletteRedBorder1);}", ".fkgrb8g{border-right-color:var(--colorPaletteRedBorder1);}", ".frb5wm0{border-left-color:var(--colorPaletteRedBorder1);}", ".f1iai1ph{border-bottom-color:var(--colorPaletteRedBorder1);}", ".f945g0u{background-color:var(--colorNeutralForeground3);}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".f1ctqxl6{background-color:var(--colorNeutralBackground4);}", ".f1xzsg4{background-color:var(--colorPaletteDarkOrangeBackground1);}", ".f1k5f75o{color:var(--colorPaletteDarkOrangeForeground1);}", ".fxy9dsj{border-top-color:var(--colorPaletteDarkOrangeBorder1);}", ".f54u6j2{border-right-color:var(--colorPaletteDarkOrangeBorder1);}", ".fcm23ze{border-left-color:var(--colorPaletteDarkOrangeBorder1);}", ".f4vf0uq{border-bottom-color:var(--colorPaletteDarkOrangeBorder1);}", ".f2vsrz6{background-color:var(--colorPaletteGreenBackground1);}", ".ffmvakt{color:var(--colorPaletteGreenForeground1);}", ".fdmic9h{border-top-color:var(--colorPaletteGreenBorder1);}", ".f196y6m{border-right-color:var(--colorPaletteGreenBorder1);}", ".fetptd8{border-left-color:var(--colorPaletteGreenBorder1);}", ".f1pev5xq{border-bottom-color:var(--colorPaletteGreenBorder1);}", ".f10s6hli{background-color:var(--colorPaletteYellowBackground1);}", ".f42v8de{color:var(--colorPaletteYellowForeground1);}", ".fn9i3n{border-top-color:var(--colorPaletteYellowBorder1);}", ".f1aw8cx4{border-right-color:var(--colorPaletteYellowBorder1);}", ".f51if14{border-left-color:var(--colorPaletteYellowBorder1);}", ".fvq8iai{border-bottom-color:var(--colorPaletteYellowBorder1);}"]
  });
  var useIconRootClassName = /* @__PURE__ */ __resetStyles2("rttl5z0", null, [".rttl5z0{display:flex;line-height:1;margin:0 calc(-1 * var(--spacingHorizontalXXS));font-size:12px;}"]);
  var useIconStyles = /* @__PURE__ */ __styles2({
    beforeText: {
      t21cq0: ["f1t8l4o1", "f11juvx6"]
    },
    afterText: {
      Frg6f3: ["f11juvx6", "f1t8l4o1"]
    },
    beforeTextXL: {
      t21cq0: ["f1rs9grm", "f1kwmkpi"]
    },
    afterTextXL: {
      Frg6f3: ["f1kwmkpi", "f1rs9grm"]
    },
    tiny: {
      Be2twd7: "f1tccstq"
    },
    "extra-small": {
      Be2twd7: "fnmn6fi"
    },
    small: {
      Be2twd7: "f1ugzwwg"
    },
    medium: {},
    large: {
      Be2twd7: "f4ybsrx"
    },
    "extra-large": {
      Be2twd7: "fe5j1ua"
    }
  }, {
    d: [".f1t8l4o1{margin-right:calc(var(--spacingHorizontalXXS) + var(--spacingHorizontalXXS));}", ".f11juvx6{margin-left:calc(var(--spacingHorizontalXXS) + var(--spacingHorizontalXXS));}", ".f1rs9grm{margin-right:calc(var(--spacingHorizontalXS) + var(--spacingHorizontalXXS));}", ".f1kwmkpi{margin-left:calc(var(--spacingHorizontalXS) + var(--spacingHorizontalXXS));}", ".f1tccstq{font-size:6px;}", ".fnmn6fi{font-size:10px;}", ".f1ugzwwg{font-size:12px;}", ".f4ybsrx{font-size:16px;}", ".fe5j1ua{font-size:20px;}"]
  });
  var useBadgeStyles_unstable = (state) => {
    const rootClassName = useRootClassName();
    const rootStyles = useRootStyles2();
    const smallToTiny = state.size === "small" || state.size === "extra-small" || state.size === "tiny";
    state.root.className = mergeClasses(badgeClassNames.root, rootClassName, smallToTiny && rootStyles.fontSmallToTiny, rootStyles[state.size], rootStyles[state.shape], state.shape === "rounded" && smallToTiny && rootStyles.roundedSmallToTiny, state.appearance === "ghost" && rootStyles.borderGhost, rootStyles[state.appearance], rootStyles[`${state.appearance}-${state.color}`], state.root.className);
    const iconRootClassName = useIconRootClassName();
    const iconStyles = useIconStyles();
    if (state.icon) {
      let iconPositionClass;
      if (state.root.children) {
        if (state.size === "extra-large") {
          iconPositionClass = state.iconPosition === "after" ? iconStyles.afterTextXL : iconStyles.beforeTextXL;
        } else {
          iconPositionClass = state.iconPosition === "after" ? iconStyles.afterText : iconStyles.beforeText;
        }
      }
      state.icon.className = mergeClasses(badgeClassNames.icon, iconRootClassName, iconPositionClass, iconStyles[state.size], state.icon.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-badge/lib/components/Badge/renderBadge.js
  var renderBadge_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.iconPosition === "before" && state.icon && /* @__PURE__ */ jsx(state.icon, {}),
        state.root.children,
        state.iconPosition === "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-badge/lib/components/Badge/Badge.js
  var Badge = /* @__PURE__ */ React46.forwardRef((props, ref) => {
    const state = useBadge_unstable(props, ref);
    useBadgeStyles_unstable(state);
    useCustomStyleHook("useBadgeStyles_unstable")(state);
    return renderBadge_unstable(state);
  });
  Badge.displayName = "Badge";

  // ../node_modules/@fluentui/react-badge/lib/components/PresenceBadge/PresenceBadge.js
  var React49 = __toESM(require_react());

  // ../node_modules/@fluentui/react-badge/lib/components/PresenceBadge/usePresenceBadge.js
  var React48 = __toESM(require_react());

  // ../node_modules/@fluentui/react-badge/lib/components/PresenceBadge/presenceIcons.js
  var React47 = __toESM(require_react());
  var presenceAwayRegular = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceAway10Regular,
    "extra-small": PresenceAway10Regular,
    small: PresenceAway12Regular,
    medium: PresenceAway16Regular,
    large: PresenceAway20Regular,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceAway20Regular
  };
  var presenceAwayFilled = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceAway10Filled,
    "extra-small": PresenceAway10Filled,
    small: PresenceAway12Filled,
    medium: PresenceAway16Filled,
    large: PresenceAway20Filled,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceAway20Filled
  };
  var presenceAvailableRegular = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceAvailable10Regular,
    "extra-small": PresenceAvailable10Regular,
    small: PresenceAvailable12Regular,
    medium: PresenceAvailable16Regular,
    large: PresenceAvailable20Regular,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceAvailable20Regular
  };
  var presenceAvailableFilled = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceAvailable10Filled,
    "extra-small": PresenceAvailable10Filled,
    small: PresenceAvailable12Filled,
    medium: PresenceAvailable16Filled,
    large: PresenceAvailable20Filled,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceAvailable20Filled
  };
  var presenceBlockedRegular = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceBlocked10Regular,
    "extra-small": PresenceBlocked10Regular,
    small: PresenceBlocked12Regular,
    medium: PresenceBlocked16Regular,
    large: PresenceBlocked20Regular,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceBlocked20Regular
  };
  var presenceBusyFilled = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceBusy10Filled,
    "extra-small": PresenceBusy10Filled,
    small: PresenceBusy12Filled,
    medium: PresenceBusy16Filled,
    large: PresenceBusy20Filled,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceBusy20Filled
  };
  var presenceDndFilled = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceDnd10Filled,
    "extra-small": PresenceDnd10Filled,
    small: PresenceDnd12Filled,
    medium: PresenceDnd16Filled,
    large: PresenceDnd20Filled,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceDnd20Filled
  };
  var presenceDndRegular = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceDnd10Regular,
    "extra-small": PresenceDnd10Regular,
    small: PresenceDnd12Regular,
    medium: PresenceDnd16Regular,
    large: PresenceDnd20Regular,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceDnd20Regular
  };
  var presenceOofRegular = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceOof10Regular,
    "extra-small": PresenceOof10Regular,
    small: PresenceOof12Regular,
    medium: PresenceOof16Regular,
    large: PresenceOof20Regular,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceOof20Regular
  };
  var presenceOfflineRegular = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceOffline10Regular,
    "extra-small": PresenceOffline10Regular,
    small: PresenceOffline12Regular,
    medium: PresenceOffline16Regular,
    large: PresenceOffline20Regular,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceOffline20Regular
  };
  var presenceUnknownRegular = {
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    tiny: PresenceUnknown10Regular,
    "extra-small": PresenceUnknown10Regular,
    small: PresenceUnknown12Regular,
    medium: PresenceUnknown16Regular,
    large: PresenceUnknown20Regular,
    // FIXME not all presence icon sizes are available
    // https://github.com/microsoft/fluentui/issues/20650
    "extra-large": PresenceUnknown20Regular
  };

  // ../node_modules/@fluentui/react-badge/lib/components/PresenceBadge/usePresenceBadge.js
  var iconMap = (status, outOfOffice, size3) => {
    switch (status) {
      case "available":
        return outOfOffice ? presenceAvailableRegular[size3] : presenceAvailableFilled[size3];
      case "away":
        return outOfOffice ? presenceAwayRegular[size3] : presenceAwayFilled[size3];
      case "blocked":
        return presenceBlockedRegular[size3];
      case "busy":
        return outOfOffice ? presenceUnknownRegular[size3] : presenceBusyFilled[size3];
      case "do-not-disturb":
        return outOfOffice ? presenceDndRegular[size3] : presenceDndFilled[size3];
      case "offline":
        return presenceOfflineRegular[size3];
      case "out-of-office":
        return presenceOofRegular[size3];
      case "unknown":
        return presenceUnknownRegular[size3];
    }
  };
  var DEFAULT_STRINGS = {
    busy: "busy",
    "out-of-office": "out of office",
    away: "away",
    available: "available",
    offline: "offline",
    "do-not-disturb": "do not disturb",
    unknown: "unknown",
    blocked: "blocked"
  };
  var usePresenceBadge_unstable = (props, ref) => {
    const { size: size3 = "medium", status = "available", outOfOffice = false } = props;
    const statusText = DEFAULT_STRINGS[status];
    const oofText = props.outOfOffice && props.status !== "out-of-office" ? ` ${DEFAULT_STRINGS["out-of-office"]}` : "";
    const IconElement = iconMap(status, outOfOffice, size3);
    const state = {
      ...useBadge_unstable({
        "aria-label": statusText + oofText,
        role: "img",
        ...props,
        size: size3,
        icon: slot_exports.optional(props.icon, {
          defaultProps: {
            children: IconElement ? /* @__PURE__ */ React48.createElement(IconElement, null) : null
          },
          renderByDefault: true,
          elementType: "span"
        })
      }, ref),
      status,
      outOfOffice
    };
    return state;
  };

  // ../node_modules/@fluentui/react-badge/lib/components/PresenceBadge/usePresenceBadgeStyles.styles.js
  var presenceBadgeClassNames = {
    root: "fui-PresenceBadge",
    icon: "fui-PresenceBadge__icon"
  };
  var getIsBusy = (status) => {
    if (status === "busy" || status === "do-not-disturb" || status === "blocked") {
      return true;
    }
    return false;
  };
  var useRootClassName2 = /* @__PURE__ */ __resetStyles2("r832ydo", null, [".r832ydo{display:inline-flex;box-sizing:border-box;align-items:center;justify-content:center;border-radius:var(--borderRadiusCircular);background-color:var(--colorNeutralBackground1);padding:1px;background-clip:content-box;}"]);
  var useIconClassName = /* @__PURE__ */ __resetStyles2("r11ag4qr", null, [".r11ag4qr{display:flex;margin:-1px;}"]);
  var useStyles2 = /* @__PURE__ */ __styles2({
    statusBusy: {
      sj55zd: "fvi85wt"
    },
    statusAway: {
      sj55zd: "f14k8a89"
    },
    statusAvailable: {
      sj55zd: "fqa5hgp"
    },
    statusOffline: {
      sj55zd: "f11d4kpn"
    },
    statusOutOfOffice: {
      sj55zd: "fdce8r3"
    },
    statusUnknown: {
      sj55zd: "f11d4kpn"
    },
    outOfOffice: {
      sj55zd: "fr0bkrk"
    },
    outOfOfficeAvailable: {
      sj55zd: "fqa5hgp"
    },
    outOfOfficeBusy: {
      sj55zd: "fvi85wt"
    },
    outOfOfficeUnknown: {
      sj55zd: "f11d4kpn"
    },
    tiny: {
      Bubjx69: "f9ikmtg",
      a9b677: "f16dn6v3",
      B2eet1l: "f1w2irj7",
      B5pe6w7: "fab5kbq",
      p4uzdd: "f1ms1d91"
    },
    large: {
      Bubjx69: "f9ikmtg",
      a9b677: "f64fuq3",
      B5pe6w7: "f1vfi1yj",
      p4uzdd: "f15s34gz"
    },
    extraLarge: {
      Bubjx69: "f9ikmtg",
      a9b677: "f1w9dchk",
      B5pe6w7: "f14efy9b",
      p4uzdd: "fhipgdu"
    }
  }, {
    d: [".fvi85wt{color:var(--colorPaletteRedBackground3);}", ".f14k8a89{color:var(--colorPaletteMarigoldBackground3);}", ".fqa5hgp{color:var(--colorPaletteLightGreenForeground3);}", ".f11d4kpn{color:var(--colorNeutralForeground3);}", ".fdce8r3{color:var(--colorPaletteBerryForeground3);}", ".fr0bkrk{color:var(--colorNeutralBackground1);}", ".f9ikmtg{aspect-ratio:1;}", ".f16dn6v3{width:6px;}", ".f1w2irj7{background-clip:unset;}", ".fab5kbq svg{width:6px!important;}", ".f1ms1d91 svg{height:6px!important;}", ".f64fuq3{width:20px;}", ".f1vfi1yj svg{width:20px!important;}", ".f15s34gz svg{height:20px!important;}", ".f1w9dchk{width:28px;}", ".f14efy9b svg{width:28px!important;}", ".fhipgdu svg{height:28px!important;}"]
  });
  var usePresenceBadgeStyles_unstable = (state) => {
    const rootClassName = useRootClassName2();
    const iconClassName = useIconClassName();
    const styles4 = useStyles2();
    const isBusy = getIsBusy(state.status);
    state.root.className = mergeClasses(presenceBadgeClassNames.root, rootClassName, isBusy && styles4.statusBusy, state.status === "away" && styles4.statusAway, state.status === "available" && styles4.statusAvailable, state.status === "offline" && styles4.statusOffline, state.status === "out-of-office" && styles4.statusOutOfOffice, state.status === "unknown" && styles4.statusUnknown, state.outOfOffice && styles4.outOfOffice, state.outOfOffice && state.status === "available" && styles4.outOfOfficeAvailable, state.outOfOffice && isBusy && styles4.outOfOfficeBusy, state.outOfOffice && state.status === "away" && styles4.statusAway, state.outOfOffice && state.status === "offline" && styles4.statusOffline, state.outOfOffice && state.status === "out-of-office" && styles4.statusOutOfOffice, state.outOfOffice && state.status === "unknown" && styles4.outOfOfficeUnknown, state.size === "tiny" && styles4.tiny, state.size === "large" && styles4.large, state.size === "extra-large" && styles4.extraLarge, state.root.className);
    if (state.icon) {
      state.icon.className = mergeClasses(presenceBadgeClassNames.icon, iconClassName, state.icon.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-badge/lib/components/PresenceBadge/PresenceBadge.js
  var PresenceBadge = /* @__PURE__ */ React49.forwardRef((props, ref) => {
    const state = usePresenceBadge_unstable(props, ref);
    usePresenceBadgeStyles_unstable(state);
    useCustomStyleHook("usePresenceBadgeStyles_unstable")(state);
    return renderBadge_unstable(state);
  });
  PresenceBadge.displayName = "PresenceBadge";

  // ../node_modules/@fluentui/react-avatar/lib/contexts/AvatarContext.js
  var React50 = __toESM(require_react());
  var avatarContext = React50.createContext(void 0);
  var avatarContextDefaultValue = {};
  var AvatarContextProvider = avatarContext.Provider;
  var _React_useContext;
  var useAvatarContext = () => (_React_useContext = React50.useContext(avatarContext)) !== null && _React_useContext !== void 0 ? _React_useContext : avatarContextDefaultValue;

  // ../node_modules/@fluentui/react-avatar/lib/components/Avatar/useAvatar.js
  var DEFAULT_STRINGS2 = {
    active: "active",
    inactive: "inactive"
  };
  var useAvatar_unstable = (props, ref) => {
    var _image, _initials;
    const { dir } = useFluent();
    const { shape: contextShape, size: contextSize } = useAvatarContext();
    const { name, size: size3 = contextSize !== null && contextSize !== void 0 ? contextSize : 32, shape = contextShape !== null && contextShape !== void 0 ? contextShape : "circular", active = "unset", activeAppearance = "ring", idForColor } = props;
    let { color: color2 = "neutral" } = props;
    if (color2 === "colorful") {
      var _ref;
      color2 = avatarColors[getHashCode((_ref = idForColor !== null && idForColor !== void 0 ? idForColor : name) !== null && _ref !== void 0 ? _ref : "") % avatarColors.length];
    }
    const baseId = useId2("avatar-");
    const root3 = slot_exports.always(getNativeElementProps(
      "span",
      {
        role: "img",
        id: baseId,
        // aria-label and/or aria-labelledby are resolved below
        ...props,
        ref
      },
      /* excludedPropNames: */
      [
        "name"
      ]
    ), {
      elementType: "span"
    });
    const [imageHidden, setImageHidden] = React51.useState(void 0);
    let image2 = slot_exports.optional(props.image, {
      defaultProps: {
        alt: "",
        role: "presentation",
        "aria-hidden": true,
        hidden: imageHidden
      },
      elementType: "img"
    });
    if (!((_image = image2) === null || _image === void 0 ? void 0 : _image.src)) {
      image2 = void 0;
    }
    if (image2) {
      image2.onError = mergeCallbacks(image2.onError, () => setImageHidden(true));
      image2.onLoad = mergeCallbacks(image2.onLoad, () => setImageHidden(void 0));
    }
    let initials = slot_exports.optional(props.initials, {
      renderByDefault: true,
      defaultProps: {
        children: getInitials(name, dir === "rtl", {
          firstInitialOnly: size3 <= 16
        }),
        id: baseId + "__initials"
      },
      elementType: "span"
    });
    if (!((_initials = initials) === null || _initials === void 0 ? void 0 : _initials.children)) {
      initials = void 0;
    }
    let icon = void 0;
    if (!initials && (!image2 || imageHidden)) {
      icon = slot_exports.optional(props.icon, {
        renderByDefault: true,
        defaultProps: {
          children: /* @__PURE__ */ React51.createElement(PersonRegular, null),
          "aria-hidden": true
        },
        elementType: "span"
      });
    }
    const badge = slot_exports.optional(props.badge, {
      defaultProps: {
        size: getBadgeSize(size3),
        id: baseId + "__badge"
      },
      elementType: PresenceBadge
    });
    let activeAriaLabelElement;
    if (!root3["aria-label"] && !root3["aria-labelledby"]) {
      if (name) {
        root3["aria-label"] = name;
        if (badge) {
          root3["aria-labelledby"] = root3.id + " " + badge.id;
        }
      } else if (initials) {
        root3["aria-labelledby"] = initials.id + (badge ? " " + badge.id : "");
      }
      if (active === "active" || active === "inactive") {
        const activeText = DEFAULT_STRINGS2[active];
        if (root3["aria-labelledby"]) {
          const activeId = baseId + "__active";
          root3["aria-labelledby"] += " " + activeId;
          activeAriaLabelElement = /* @__PURE__ */ React51.createElement("span", {
            hidden: true,
            id: activeId
          }, activeText);
        } else if (root3["aria-label"]) {
          root3["aria-label"] += " " + activeText;
        }
      }
    }
    return {
      size: size3,
      shape,
      active,
      activeAppearance,
      activeAriaLabelElement,
      color: color2,
      components: {
        root: "span",
        initials: "span",
        icon: "span",
        image: "img",
        badge: PresenceBadge
      },
      root: root3,
      initials,
      icon,
      image: image2,
      badge
    };
  };
  var getBadgeSize = (size3) => {
    if (size3 >= 96) {
      return "extra-large";
    } else if (size3 >= 64) {
      return "large";
    } else if (size3 >= 56) {
      return "medium";
    } else if (size3 >= 40) {
      return "small";
    } else if (size3 >= 28) {
      return "extra-small";
    } else {
      return "tiny";
    }
  };
  var avatarColors = [
    "dark-red",
    "cranberry",
    "red",
    "pumpkin",
    "peach",
    "marigold",
    "gold",
    "brass",
    "brown",
    "forest",
    "seafoam",
    "dark-green",
    "light-teal",
    "teal",
    "steel",
    "blue",
    "royal-blue",
    "cornflower",
    "navy",
    "lavender",
    "purple",
    "grape",
    "lilac",
    "pink",
    "magenta",
    "plum",
    "beige",
    "mink",
    "platinum",
    "anchor"
  ];
  var getHashCode = (str) => {
    let hashCode = 0;
    for (let len = str.length - 1; len >= 0; len--) {
      const ch = str.charCodeAt(len);
      const shift3 = len % 8;
      hashCode ^= (ch << shift3) + (ch >> 8 - shift3);
    }
    return hashCode;
  };

  // ../node_modules/@fluentui/react-avatar/lib/components/Avatar/useAvatarStyles.styles.js
  var avatarClassNames = {
    root: "fui-Avatar",
    image: "fui-Avatar__image",
    initials: "fui-Avatar__initials",
    icon: "fui-Avatar__icon",
    badge: "fui-Avatar__badge"
  };
  var useRootClassName3 = /* @__PURE__ */ __resetStyles2("r81b29z", "r1aatmv", {
    r: [".r81b29z{display:inline-block;flex-shrink:0;position:relative;vertical-align:middle;border-radius:var(--borderRadiusCircular);font-family:var(--fontFamilyBase);font-weight:var(--fontWeightSemibold);font-size:var(--fontSizeBase300);width:32px;height:32px;}", ".r81b29z::before,.r81b29z::after{position:absolute;top:0;left:0;bottom:0;right:0;z-index:-1;margin:calc(-2 * var(--fui-Avatar-ringWidth, 0px));border-radius:inherit;transition-property:margin,opacity;transition-timing-function:var(--curveEasyEaseMax),var(--curveLinear);transition-duration:var(--durationUltraSlow),var(--durationSlower);}", ".r81b29z::before{border-style:solid;border-width:var(--fui-Avatar-ringWidth);}", ".r1aatmv{display:inline-block;flex-shrink:0;position:relative;vertical-align:middle;border-radius:var(--borderRadiusCircular);font-family:var(--fontFamilyBase);font-weight:var(--fontWeightSemibold);font-size:var(--fontSizeBase300);width:32px;height:32px;}", ".r1aatmv::before,.r1aatmv::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:-1;margin:calc(-2 * var(--fui-Avatar-ringWidth, 0px));border-radius:inherit;transition-property:margin,opacity;transition-timing-function:var(--curveEasyEaseMax),var(--curveLinear);transition-duration:var(--durationUltraSlow),var(--durationSlower);}", ".r1aatmv::before{border-style:solid;border-width:var(--fui-Avatar-ringWidth);}"],
    s: ["@media screen and (prefers-reduced-motion: reduce){.r81b29z::before,.r81b29z::after{transition-duration:0.01ms;}}", "@media screen and (prefers-reduced-motion: reduce){.r1aatmv::before,.r1aatmv::after{transition-duration:0.01ms;}}"]
  });
  var useImageClassName = /* @__PURE__ */ __resetStyles2("r136dc0n", "rjly0nl", [".r136dc0n{position:absolute;top:0;left:0;width:100%;height:100%;border-radius:inherit;object-fit:cover;vertical-align:top;}", ".rjly0nl{position:absolute;top:0;right:0;width:100%;height:100%;border-radius:inherit;object-fit:cover;vertical-align:top;}"]);
  var useIconInitialsClassName = /* @__PURE__ */ __resetStyles2("rip04v", "r31uzil", [".rip04v{position:absolute;box-sizing:border-box;top:0;left:0;width:100%;height:100%;line-height:1;border:var(--strokeWidthThin) solid var(--colorTransparentStroke);display:flex;align-items:center;justify-content:center;vertical-align:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border-radius:inherit;}", ".r31uzil{position:absolute;box-sizing:border-box;top:0;right:0;width:100%;height:100%;line-height:1;border:var(--strokeWidthThin) solid var(--colorTransparentStroke);display:flex;align-items:center;justify-content:center;vertical-align:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border-radius:inherit;}"]);
  var useStyles3 = /* @__PURE__ */ __styles2({
    textCaption2Strong: {
      Be2twd7: "f13mqy1h"
    },
    textCaption1Strong: {
      Be2twd7: "fy9rknc"
    },
    textSubtitle2: {
      Be2twd7: "fod5ikn"
    },
    textSubtitle1: {
      Be2twd7: "f1pp30po"
    },
    textTitle3: {
      Be2twd7: "f1x0m3f5"
    },
    squareSmall: {
      Bbmb7ep: ["f1g3puop", "fi2rrw2"],
      Beyfa6y: ["fi2rrw2", "f1g3puop"],
      B7oj6ja: ["f1rstyi9", "f1s4nn1u"],
      Btl43ni: ["f1s4nn1u", "f1rstyi9"]
    },
    squareMedium: {
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"]
    },
    squareLarge: {
      Bbmb7ep: ["f1ldthgs", "frrelxk"],
      Beyfa6y: ["frrelxk", "f1ldthgs"],
      B7oj6ja: ["fobrfso", "ffisxpw"],
      Btl43ni: ["ffisxpw", "fobrfso"]
    },
    squareXLarge: {
      Bbmb7ep: ["fnivh3a", "fc7yr5o"],
      Beyfa6y: ["fc7yr5o", "fnivh3a"],
      B7oj6ja: ["f1el4m67", "f8yange"],
      Btl43ni: ["f8yange", "f1el4m67"]
    },
    activeOrInactive: {
      Bz10aip: "ftfx35i",
      Bmy1vo4: "fv0atk9",
      B3o57yi: "f1iry5bo",
      Bkqvd7p: "f15n41j8",
      Hwfdqs: "f1onx1g3"
    },
    ring: {
      Ftih45: "f1wl9k8s"
    },
    ringBadgeCutout: {
      f4a502: "fp2gujx"
    },
    ringThick: {
      of393c: "fq1w1vq"
    },
    ringThicker: {
      of393c: "fzg6ace"
    },
    ringThickest: {
      of393c: "f1nu8p71"
    },
    shadow: {
      Bsft5z2: "f13zj6fq"
    },
    shadow4: {
      Be6vj1x: "fcjn15l"
    },
    shadow8: {
      Be6vj1x: "f1tm8t9f"
    },
    shadow16: {
      Be6vj1x: "f1a1aohj"
    },
    shadow28: {
      Be6vj1x: "fond6v5"
    },
    inactive: {
      abs64n: "fp25eh",
      Bz10aip: "f1clczzi",
      Bkqvd7p: "f1l3s34x",
      Bucmhp4: "f1f5ar78",
      b2tv09: ["fqxtap0", "fhjukvy"],
      Bfgortx: "f1qj1nzo",
      Bnvr3x9: ["fhjukvy", "fqxtap0"],
      b6ubon: "fw457kn",
      Bqinb2h: "f1wmllxl"
    },
    badge: {
      qhf8xq: "f1euv43f",
      B5kzvoi: "f1yab3r1",
      j35jbq: ["f1e31b4d", "f1vgc2s3"]
    },
    badgeCutout: {
      btxmck: "f1eugkqs"
    },
    badgeAlign: {
      Dnlfbu: ["f1tlnv9o", "f1y9kyih"]
    },
    tiny: {
      Bdjeniz: "f1uwoubl",
      niu6jh: "fid048z"
    },
    "extra-small": {
      Bdjeniz: "f13ar0e0",
      niu6jh: "fid048z"
    },
    small: {
      Bdjeniz: "fwwuruf",
      niu6jh: "fid048z"
    },
    medium: {
      Bdjeniz: "f1af27q5",
      niu6jh: "fid048z"
    },
    large: {
      Bdjeniz: "f18yy57a",
      niu6jh: "f924bxt"
    },
    "extra-large": {
      Bdjeniz: "f2jg042",
      niu6jh: "f924bxt"
    },
    icon12: {
      Be2twd7: "f1ugzwwg"
    },
    icon16: {
      Be2twd7: "f4ybsrx"
    },
    icon20: {
      Be2twd7: "fe5j1ua"
    },
    icon24: {
      Be2twd7: "f1rt2boy"
    },
    icon28: {
      Be2twd7: "f24l1pt"
    },
    icon32: {
      Be2twd7: "ffl51b"
    },
    icon48: {
      Be2twd7: "f18m8u13"
    }
  }, {
    d: [".f13mqy1h{font-size:var(--fontSizeBase100);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".f1x0m3f5{font-size:var(--fontSizeBase600);}", ".f1g3puop{border-bottom-right-radius:var(--borderRadiusSmall);}", ".fi2rrw2{border-bottom-left-radius:var(--borderRadiusSmall);}", ".f1rstyi9{border-top-right-radius:var(--borderRadiusSmall);}", ".f1s4nn1u{border-top-left-radius:var(--borderRadiusSmall);}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f1ldthgs{border-bottom-right-radius:var(--borderRadiusLarge);}", ".frrelxk{border-bottom-left-radius:var(--borderRadiusLarge);}", ".fobrfso{border-top-right-radius:var(--borderRadiusLarge);}", ".ffisxpw{border-top-left-radius:var(--borderRadiusLarge);}", ".fnivh3a{border-bottom-right-radius:var(--borderRadiusXLarge);}", ".fc7yr5o{border-bottom-left-radius:var(--borderRadiusXLarge);}", ".f1el4m67{border-top-right-radius:var(--borderRadiusXLarge);}", ".f8yange{border-top-left-radius:var(--borderRadiusXLarge);}", ".ftfx35i{transform:perspective(1px);}", ".fv0atk9{transition-property:transform,opacity;}", ".f1iry5bo{transition-duration:var(--durationUltraSlow),var(--durationFaster);}", ".f15n41j8{transition-timing-function:var(--curveEasyEaseMax),var(--curveLinear);}", '.f1wl9k8s::before{content:"";}', ".fp2gujx::before{-webkit-mask-image:radial-gradient(circle at bottom calc(var(--fui-Avatar-badgeRadius) + 2 * var(--fui-Avatar-ringWidth)) var(--fui-Avatar-badgeAlign) calc(var(--fui-Avatar-badgeRadius) + 2 * var(--fui-Avatar-ringWidth)), transparent calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) - 0.25px), white calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) + 0.25px));mask-image:radial-gradient(circle at bottom calc(var(--fui-Avatar-badgeRadius) + 2 * var(--fui-Avatar-ringWidth)) var(--fui-Avatar-badgeAlign) calc(var(--fui-Avatar-badgeRadius) + 2 * var(--fui-Avatar-ringWidth)), transparent calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) - 0.25px), white calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) + 0.25px));}", ".fq1w1vq{--fui-Avatar-ringWidth:var(--strokeWidthThick);}", ".fzg6ace{--fui-Avatar-ringWidth:var(--strokeWidthThicker);}", ".f1nu8p71{--fui-Avatar-ringWidth:var(--strokeWidthThickest);}", '.f13zj6fq::after{content:"";}', ".fcjn15l::after{box-shadow:var(--shadow4);}", ".f1tm8t9f::after{box-shadow:var(--shadow8);}", ".f1a1aohj::after{box-shadow:var(--shadow16);}", ".fond6v5::after{box-shadow:var(--shadow28);}", ".fp25eh{opacity:0.8;}", ".f1clczzi{transform:scale(0.875);}", ".f1l3s34x{transition-timing-function:var(--curveDecelerateMin),var(--curveLinear);}", ".f1f5ar78::before,.f1f5ar78::after{margin-top:0;}", ".fqxtap0::before,.fqxtap0::after{margin-right:0;}", ".fhjukvy::before,.fhjukvy::after{margin-left:0;}", ".f1qj1nzo::before,.f1qj1nzo::after{margin-bottom:0;}", ".fw457kn::before,.fw457kn::after{opacity:0;}", ".f1wmllxl::before,.f1wmllxl::after{transition-timing-function:var(--curveDecelerateMin),var(--curveLinear);}", ".f1euv43f{position:absolute;}", ".f1yab3r1{bottom:0;}", ".f1e31b4d{right:0;}", ".f1vgc2s3{left:0;}", ".f1eugkqs{-webkit-mask-image:radial-gradient(circle at bottom var(--fui-Avatar-badgeRadius) var(--fui-Avatar-badgeAlign) var(--fui-Avatar-badgeRadius), transparent calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) - 0.25px), white calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) + 0.25px));mask-image:radial-gradient(circle at bottom var(--fui-Avatar-badgeRadius) var(--fui-Avatar-badgeAlign) var(--fui-Avatar-badgeRadius), transparent calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) - 0.25px), white calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) + 0.25px));}", ".f1tlnv9o{--fui-Avatar-badgeAlign:right;}", ".f1y9kyih{--fui-Avatar-badgeAlign:left;}", ".f1uwoubl{--fui-Avatar-badgeRadius:3px;}", ".fid048z{--fui-Avatar-badgeGap:var(--strokeWidthThin);}", ".f13ar0e0{--fui-Avatar-badgeRadius:5px;}", ".fwwuruf{--fui-Avatar-badgeRadius:6px;}", ".f1af27q5{--fui-Avatar-badgeRadius:8px;}", ".f18yy57a{--fui-Avatar-badgeRadius:10px;}", ".f924bxt{--fui-Avatar-badgeGap:var(--strokeWidthThick);}", ".f2jg042{--fui-Avatar-badgeRadius:14px;}", ".f1ugzwwg{font-size:12px;}", ".f4ybsrx{font-size:16px;}", ".fe5j1ua{font-size:20px;}", ".f1rt2boy{font-size:24px;}", ".f24l1pt{font-size:28px;}", ".ffl51b{font-size:32px;}", ".f18m8u13{font-size:48px;}"],
    m: [["@media screen and (prefers-reduced-motion: reduce){.f1onx1g3{transition-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }]]
  });
  var useSizeStyles = /* @__PURE__ */ __styles2({
    "16": {
      a9b677: "fjw5fx7",
      Bqenvij: "fd461yt"
    },
    "20": {
      a9b677: "f64fuq3",
      Bqenvij: "fjamq6b"
    },
    "24": {
      a9b677: "fq4mcun",
      Bqenvij: "frvgh55"
    },
    "28": {
      a9b677: "f1w9dchk",
      Bqenvij: "fxldao9"
    },
    "32": {
      a9b677: "f1szoe96",
      Bqenvij: "f1d2rq10"
    },
    "36": {
      a9b677: "fpdz1er",
      Bqenvij: "f8ljn23"
    },
    "40": {
      a9b677: "feqmc2u",
      Bqenvij: "fbhnoac"
    },
    "48": {
      a9b677: "f124akge",
      Bqenvij: "ff2sm71"
    },
    "56": {
      a9b677: "f1u66zr1",
      Bqenvij: "fzki0ko"
    },
    "64": {
      a9b677: "fa9ln6p",
      Bqenvij: "f16k9i2m"
    },
    "72": {
      a9b677: "fhcae8x",
      Bqenvij: "f1shusfg"
    },
    "96": {
      a9b677: "f1kyr2gn",
      Bqenvij: "fypu0ge"
    },
    "120": {
      a9b677: "fwfqyga",
      Bqenvij: "fjr5b71"
    },
    "128": {
      a9b677: "f1iksgmy",
      Bqenvij: "fele2au"
    }
  }, {
    d: [".fjw5fx7{width:16px;}", ".fd461yt{height:16px;}", ".f64fuq3{width:20px;}", ".fjamq6b{height:20px;}", ".fq4mcun{width:24px;}", ".frvgh55{height:24px;}", ".f1w9dchk{width:28px;}", ".fxldao9{height:28px;}", ".f1szoe96{width:32px;}", ".f1d2rq10{height:32px;}", ".fpdz1er{width:36px;}", ".f8ljn23{height:36px;}", ".feqmc2u{width:40px;}", ".fbhnoac{height:40px;}", ".f124akge{width:48px;}", ".ff2sm71{height:48px;}", ".f1u66zr1{width:56px;}", ".fzki0ko{height:56px;}", ".fa9ln6p{width:64px;}", ".f16k9i2m{height:64px;}", ".fhcae8x{width:72px;}", ".f1shusfg{height:72px;}", ".f1kyr2gn{width:96px;}", ".fypu0ge{height:96px;}", ".fwfqyga{width:120px;}", ".fjr5b71{height:120px;}", ".f1iksgmy{width:128px;}", ".fele2au{height:128px;}"]
  });
  var useColorStyles = /* @__PURE__ */ __styles2({
    neutral: {
      sj55zd: "f11d4kpn",
      De3pzq: "f18f03hv"
    },
    brand: {
      sj55zd: "fonrgv7",
      De3pzq: "f1blnnmj"
    },
    "dark-red": {
      sj55zd: "fqjd1y1",
      De3pzq: "f1vq2oo4"
    },
    cranberry: {
      sj55zd: "fg9gses",
      De3pzq: "f1lwxszt"
    },
    red: {
      sj55zd: "f23f7i0",
      De3pzq: "f1q9qhfq"
    },
    pumpkin: {
      sj55zd: "fjnan08",
      De3pzq: "fz91bi3"
    },
    peach: {
      sj55zd: "fknu15p",
      De3pzq: "f1b9nr51"
    },
    marigold: {
      sj55zd: "f9603vw",
      De3pzq: "f3z4w6d"
    },
    gold: {
      sj55zd: "fmq0uwp",
      De3pzq: "fg50kya"
    },
    brass: {
      sj55zd: "f28g5vo",
      De3pzq: "f4w2gd0"
    },
    brown: {
      sj55zd: "ftl572b",
      De3pzq: "f14wu1f4"
    },
    forest: {
      sj55zd: "f1gymlvd",
      De3pzq: "f19ut4y6"
    },
    seafoam: {
      sj55zd: "fnnb6wn",
      De3pzq: "f1n057jc"
    },
    "dark-green": {
      sj55zd: "ff58qw8",
      De3pzq: "f11t05wk"
    },
    "light-teal": {
      sj55zd: "f1up9qbj",
      De3pzq: "f42feg1"
    },
    teal: {
      sj55zd: "f135dsb4",
      De3pzq: "f6hvv1p"
    },
    steel: {
      sj55zd: "f151dlcp",
      De3pzq: "f1lnp8zf"
    },
    blue: {
      sj55zd: "f1rjv50u",
      De3pzq: "f1ggcpy6"
    },
    "royal-blue": {
      sj55zd: "f1emykk5",
      De3pzq: "f12rj61f"
    },
    cornflower: {
      sj55zd: "fqsigj7",
      De3pzq: "f8k7hur"
    },
    navy: {
      sj55zd: "f1nj97xi",
      De3pzq: "f19gw0ux"
    },
    lavender: {
      sj55zd: "fwctg0i",
      De3pzq: "ff379vm"
    },
    purple: {
      sj55zd: "fjrsgpu",
      De3pzq: "f1mzf1e1"
    },
    grape: {
      sj55zd: "f1fiiydq",
      De3pzq: "f1o4k8oy"
    },
    lilac: {
      sj55zd: "f1res9jt",
      De3pzq: "f1x6mz1o"
    },
    pink: {
      sj55zd: "fv3fbbi",
      De3pzq: "fydlv6t"
    },
    magenta: {
      sj55zd: "f1f1fwnz",
      De3pzq: "f4xb6j5"
    },
    plum: {
      sj55zd: "f8ptl6j",
      De3pzq: "fqo8e26"
    },
    beige: {
      sj55zd: "f1ntv3ld",
      De3pzq: "f101elhj"
    },
    mink: {
      sj55zd: "f1fscmp",
      De3pzq: "f13g8o5c"
    },
    platinum: {
      sj55zd: "f1dr00v2",
      De3pzq: "fkh7blw"
    },
    anchor: {
      sj55zd: "f1f3ti53",
      De3pzq: "fu4yj0j"
    }
  }, {
    d: [".f11d4kpn{color:var(--colorNeutralForeground3);}", ".f18f03hv{background-color:var(--colorNeutralBackground6);}", ".fonrgv7{color:var(--colorNeutralForegroundStaticInverted);}", ".f1blnnmj{background-color:var(--colorBrandBackgroundStatic);}", ".fqjd1y1{color:var(--colorPaletteDarkRedForeground2);}", ".f1vq2oo4{background-color:var(--colorPaletteDarkRedBackground2);}", ".fg9gses{color:var(--colorPaletteCranberryForeground2);}", ".f1lwxszt{background-color:var(--colorPaletteCranberryBackground2);}", ".f23f7i0{color:var(--colorPaletteRedForeground2);}", ".f1q9qhfq{background-color:var(--colorPaletteRedBackground2);}", ".fjnan08{color:var(--colorPalettePumpkinForeground2);}", ".fz91bi3{background-color:var(--colorPalettePumpkinBackground2);}", ".fknu15p{color:var(--colorPalettePeachForeground2);}", ".f1b9nr51{background-color:var(--colorPalettePeachBackground2);}", ".f9603vw{color:var(--colorPaletteMarigoldForeground2);}", ".f3z4w6d{background-color:var(--colorPaletteMarigoldBackground2);}", ".fmq0uwp{color:var(--colorPaletteGoldForeground2);}", ".fg50kya{background-color:var(--colorPaletteGoldBackground2);}", ".f28g5vo{color:var(--colorPaletteBrassForeground2);}", ".f4w2gd0{background-color:var(--colorPaletteBrassBackground2);}", ".ftl572b{color:var(--colorPaletteBrownForeground2);}", ".f14wu1f4{background-color:var(--colorPaletteBrownBackground2);}", ".f1gymlvd{color:var(--colorPaletteForestForeground2);}", ".f19ut4y6{background-color:var(--colorPaletteForestBackground2);}", ".fnnb6wn{color:var(--colorPaletteSeafoamForeground2);}", ".f1n057jc{background-color:var(--colorPaletteSeafoamBackground2);}", ".ff58qw8{color:var(--colorPaletteDarkGreenForeground2);}", ".f11t05wk{background-color:var(--colorPaletteDarkGreenBackground2);}", ".f1up9qbj{color:var(--colorPaletteLightTealForeground2);}", ".f42feg1{background-color:var(--colorPaletteLightTealBackground2);}", ".f135dsb4{color:var(--colorPaletteTealForeground2);}", ".f6hvv1p{background-color:var(--colorPaletteTealBackground2);}", ".f151dlcp{color:var(--colorPaletteSteelForeground2);}", ".f1lnp8zf{background-color:var(--colorPaletteSteelBackground2);}", ".f1rjv50u{color:var(--colorPaletteBlueForeground2);}", ".f1ggcpy6{background-color:var(--colorPaletteBlueBackground2);}", ".f1emykk5{color:var(--colorPaletteRoyalBlueForeground2);}", ".f12rj61f{background-color:var(--colorPaletteRoyalBlueBackground2);}", ".fqsigj7{color:var(--colorPaletteCornflowerForeground2);}", ".f8k7hur{background-color:var(--colorPaletteCornflowerBackground2);}", ".f1nj97xi{color:var(--colorPaletteNavyForeground2);}", ".f19gw0ux{background-color:var(--colorPaletteNavyBackground2);}", ".fwctg0i{color:var(--colorPaletteLavenderForeground2);}", ".ff379vm{background-color:var(--colorPaletteLavenderBackground2);}", ".fjrsgpu{color:var(--colorPalettePurpleForeground2);}", ".f1mzf1e1{background-color:var(--colorPalettePurpleBackground2);}", ".f1fiiydq{color:var(--colorPaletteGrapeForeground2);}", ".f1o4k8oy{background-color:var(--colorPaletteGrapeBackground2);}", ".f1res9jt{color:var(--colorPaletteLilacForeground2);}", ".f1x6mz1o{background-color:var(--colorPaletteLilacBackground2);}", ".fv3fbbi{color:var(--colorPalettePinkForeground2);}", ".fydlv6t{background-color:var(--colorPalettePinkBackground2);}", ".f1f1fwnz{color:var(--colorPaletteMagentaForeground2);}", ".f4xb6j5{background-color:var(--colorPaletteMagentaBackground2);}", ".f8ptl6j{color:var(--colorPalettePlumForeground2);}", ".fqo8e26{background-color:var(--colorPalettePlumBackground2);}", ".f1ntv3ld{color:var(--colorPaletteBeigeForeground2);}", ".f101elhj{background-color:var(--colorPaletteBeigeBackground2);}", ".f1fscmp{color:var(--colorPaletteMinkForeground2);}", ".f13g8o5c{background-color:var(--colorPaletteMinkBackground2);}", ".f1dr00v2{color:var(--colorPalettePlatinumForeground2);}", ".fkh7blw{background-color:var(--colorPalettePlatinumBackground2);}", ".f1f3ti53{color:var(--colorPaletteAnchorForeground2);}", ".fu4yj0j{background-color:var(--colorPaletteAnchorBackground2);}"]
  });
  var useRingColorStyles = /* @__PURE__ */ __styles2({
    neutral: {
      Bic5iru: "f1uuiafn"
    },
    brand: {
      Bic5iru: "f1uuiafn"
    },
    "dark-red": {
      Bic5iru: "f1t2x9on"
    },
    cranberry: {
      Bic5iru: "f1pvshc9"
    },
    red: {
      Bic5iru: "f1ectbk9"
    },
    pumpkin: {
      Bic5iru: "fvzpl0b"
    },
    peach: {
      Bic5iru: "fwj2kd7"
    },
    marigold: {
      Bic5iru: "fr120vy"
    },
    gold: {
      Bic5iru: "f8xmmar"
    },
    brass: {
      Bic5iru: "f1hbety2"
    },
    brown: {
      Bic5iru: "f1vg3s4g"
    },
    forest: {
      Bic5iru: "f1m3olm5"
    },
    seafoam: {
      Bic5iru: "f17xiqtr"
    },
    "dark-green": {
      Bic5iru: "fx32vyh"
    },
    "light-teal": {
      Bic5iru: "f1mkihwv"
    },
    teal: {
      Bic5iru: "fecnooh"
    },
    steel: {
      Bic5iru: "f15hfgzm"
    },
    blue: {
      Bic5iru: "fqproka"
    },
    "royal-blue": {
      Bic5iru: "f17v2w59"
    },
    cornflower: {
      Bic5iru: "fp0q1mo"
    },
    navy: {
      Bic5iru: "f1nlym55"
    },
    lavender: {
      Bic5iru: "f62vk8h"
    },
    purple: {
      Bic5iru: "f15zl69q"
    },
    grape: {
      Bic5iru: "f53w4j7"
    },
    lilac: {
      Bic5iru: "fu2771t"
    },
    pink: {
      Bic5iru: "fzflscs"
    },
    magenta: {
      Bic5iru: "fb6rmqc"
    },
    plum: {
      Bic5iru: "f1a4gm5b"
    },
    beige: {
      Bic5iru: "f1qpf9z1"
    },
    mink: {
      Bic5iru: "f1l7or83"
    },
    platinum: {
      Bic5iru: "fzrj0iu"
    },
    anchor: {
      Bic5iru: "f8oz6wf"
    }
  }, {
    d: [".f1uuiafn::before{color:var(--colorBrandStroke1);}", ".f1t2x9on::before{color:var(--colorPaletteDarkRedBorderActive);}", ".f1pvshc9::before{color:var(--colorPaletteCranberryBorderActive);}", ".f1ectbk9::before{color:var(--colorPaletteRedBorderActive);}", ".fvzpl0b::before{color:var(--colorPalettePumpkinBorderActive);}", ".fwj2kd7::before{color:var(--colorPalettePeachBorderActive);}", ".fr120vy::before{color:var(--colorPaletteMarigoldBorderActive);}", ".f8xmmar::before{color:var(--colorPaletteGoldBorderActive);}", ".f1hbety2::before{color:var(--colorPaletteBrassBorderActive);}", ".f1vg3s4g::before{color:var(--colorPaletteBrownBorderActive);}", ".f1m3olm5::before{color:var(--colorPaletteForestBorderActive);}", ".f17xiqtr::before{color:var(--colorPaletteSeafoamBorderActive);}", ".fx32vyh::before{color:var(--colorPaletteDarkGreenBorderActive);}", ".f1mkihwv::before{color:var(--colorPaletteLightTealBorderActive);}", ".fecnooh::before{color:var(--colorPaletteTealBorderActive);}", ".f15hfgzm::before{color:var(--colorPaletteSteelBorderActive);}", ".fqproka::before{color:var(--colorPaletteBlueBorderActive);}", ".f17v2w59::before{color:var(--colorPaletteRoyalBlueBorderActive);}", ".fp0q1mo::before{color:var(--colorPaletteCornflowerBorderActive);}", ".f1nlym55::before{color:var(--colorPaletteNavyBorderActive);}", ".f62vk8h::before{color:var(--colorPaletteLavenderBorderActive);}", ".f15zl69q::before{color:var(--colorPalettePurpleBorderActive);}", ".f53w4j7::before{color:var(--colorPaletteGrapeBorderActive);}", ".fu2771t::before{color:var(--colorPaletteLilacBorderActive);}", ".fzflscs::before{color:var(--colorPalettePinkBorderActive);}", ".fb6rmqc::before{color:var(--colorPaletteMagentaBorderActive);}", ".f1a4gm5b::before{color:var(--colorPalettePlumBorderActive);}", ".f1qpf9z1::before{color:var(--colorPaletteBeigeBorderActive);}", ".f1l7or83::before{color:var(--colorPaletteMinkBorderActive);}", ".fzrj0iu::before{color:var(--colorPalettePlatinumBorderActive);}", ".f8oz6wf::before{color:var(--colorPaletteAnchorBorderActive);}"]
  });
  var useAvatarStyles_unstable = (state) => {
    const {
      size: size3,
      shape,
      active,
      activeAppearance,
      color: color2
    } = state;
    const rootClassName = useRootClassName3();
    const imageClassName = useImageClassName();
    const iconInitialsClassName = useIconInitialsClassName();
    const styles4 = useStyles3();
    const sizeStyles = useSizeStyles();
    const colorStyles = useColorStyles();
    const ringColorStyles = useRingColorStyles();
    const rootClasses = [rootClassName, size3 !== 32 && sizeStyles[size3]];
    if (state.badge) {
      rootClasses.push(styles4.badgeAlign, styles4[state.badge.size || "medium"]);
    }
    if (size3 <= 24) {
      rootClasses.push(styles4.textCaption2Strong);
    } else if (size3 <= 28) {
      rootClasses.push(styles4.textCaption1Strong);
    } else if (size3 <= 40) {
    } else if (size3 <= 56) {
      rootClasses.push(styles4.textSubtitle2);
    } else if (size3 <= 96) {
      rootClasses.push(styles4.textSubtitle1);
    } else {
      rootClasses.push(styles4.textTitle3);
    }
    if (shape === "square") {
      if (size3 <= 24) {
        rootClasses.push(styles4.squareSmall);
      } else if (size3 <= 48) {
        rootClasses.push(styles4.squareMedium);
      } else if (size3 <= 72) {
        rootClasses.push(styles4.squareLarge);
      } else {
        rootClasses.push(styles4.squareXLarge);
      }
    }
    if (active === "active" || active === "inactive") {
      rootClasses.push(styles4.activeOrInactive);
      if (activeAppearance === "ring" || activeAppearance === "ring-shadow") {
        rootClasses.push(styles4.ring, ringColorStyles[color2]);
        if (state.badge) {
          rootClasses.push(styles4.ringBadgeCutout);
        }
        if (size3 <= 48) {
          rootClasses.push(styles4.ringThick);
        } else if (size3 <= 64) {
          rootClasses.push(styles4.ringThicker);
        } else {
          rootClasses.push(styles4.ringThickest);
        }
      }
      if (activeAppearance === "shadow" || activeAppearance === "ring-shadow") {
        rootClasses.push(styles4.shadow);
        if (size3 <= 28) {
          rootClasses.push(styles4.shadow4);
        } else if (size3 <= 48) {
          rootClasses.push(styles4.shadow8);
        } else if (size3 <= 64) {
          rootClasses.push(styles4.shadow16);
        } else {
          rootClasses.push(styles4.shadow28);
        }
      }
      if (active === "inactive") {
        rootClasses.push(styles4.inactive);
      }
    }
    state.root.className = mergeClasses(avatarClassNames.root, ...rootClasses, state.root.className);
    if (state.badge) {
      state.badge.className = mergeClasses(avatarClassNames.badge, styles4.badge, state.badge.className);
    }
    if (state.image) {
      state.image.className = mergeClasses(avatarClassNames.image, imageClassName, colorStyles[color2], state.badge && styles4.badgeCutout, state.image.className);
    }
    if (state.initials) {
      state.initials.className = mergeClasses(avatarClassNames.initials, iconInitialsClassName, colorStyles[color2], state.badge && styles4.badgeCutout, state.initials.className);
    }
    if (state.icon) {
      let iconSizeClass;
      if (size3 <= 16) {
        iconSizeClass = styles4.icon12;
      } else if (size3 <= 24) {
        iconSizeClass = styles4.icon16;
      } else if (size3 <= 40) {
        iconSizeClass = styles4.icon20;
      } else if (size3 <= 48) {
        iconSizeClass = styles4.icon24;
      } else if (size3 <= 56) {
        iconSizeClass = styles4.icon28;
      } else if (size3 <= 72) {
        iconSizeClass = styles4.icon32;
      } else {
        iconSizeClass = styles4.icon48;
      }
      state.icon.className = mergeClasses(avatarClassNames.icon, iconInitialsClassName, iconSizeClass, colorStyles[color2], state.badge && styles4.badgeCutout, state.icon.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-avatar/lib/components/Avatar/Avatar.js
  var Avatar = /* @__PURE__ */ React52.forwardRef((props, ref) => {
    const state = useAvatar_unstable(props, ref);
    useAvatarStyles_unstable(state);
    useCustomStyleHook("useAvatarStyles_unstable")(state);
    return renderAvatar_unstable(state);
  });
  Avatar.displayName = "Avatar";

  // ../node_modules/@fluentui/react-popover/lib/components/Popover/Popover.js
  var React66 = __toESM(require_react());

  // ../node_modules/@fluentui/react-popover/lib/components/Popover/usePopover.js
  var React64 = __toESM(require_react());

  // ../node_modules/@fluentui/react-positioning/lib/createVirtualElementFromClick.js
  function createVirtualElementFromClick(nativeEvent) {
    const left = nativeEvent.clientX;
    const top = nativeEvent.clientY;
    const right = left + 1;
    const bottom = top + 1;
    function getBoundingClientRect2() {
      return {
        left,
        top,
        right,
        bottom,
        x: left,
        y: top,
        height: 1,
        width: 1
      };
    }
    return {
      getBoundingClientRect: getBoundingClientRect2
    };
  }

  // ../node_modules/@fluentui/react-positioning/lib/constants.js
  var DATA_POSITIONING_INTERSECTING = "data-popper-is-intersecting";
  var DATA_POSITIONING_ESCAPED = "data-popper-escaped";
  var DATA_POSITIONING_HIDDEN = "data-popper-reference-hidden";
  var DATA_POSITIONING_PLACEMENT = "data-popper-placement";

  // ../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
  var sides = ["top", "right", "bottom", "left"];
  var min = Math.min;
  var max = Math.max;
  var round = Math.round;
  var createCoords = (v3) => ({
    x: v3,
    y: v3
  });
  var oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  var oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function clamp2(start2, value, end2) {
    return max(start2, min(value, end2));
  }
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length2 = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length2] > rects.floating[length2]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  function getSideList(side, isStart2, rtl) {
    const lr = ["left", "right"];
    const rl = ["right", "left"];
    const tb = ["top", "bottom"];
    const bt = ["bottom", "top"];
    switch (side) {
      case "top":
      case "bottom":
        if (rtl)
          return isStart2 ? rl : lr;
        return isStart2 ? lr : rl;
      case "left":
      case "right":
        return isStart2 ? tb : bt;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list3 = getSideList(getSide(placement), direction === "start", rtl);
    if (alignment) {
      list3 = list3.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list3 = list3.concat(list3.map(getOppositeAlignmentPlacement));
      }
    }
    return list3;
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding3) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding3
    };
  }
  function getPaddingObject(padding3) {
    return typeof padding3 !== "number" ? expandPaddingObject(padding3) : {
      top: padding3,
      right: padding3,
      bottom: padding3,
      left: padding3
    };
  }
  function rectToClientRect(rect) {
    return {
      ...rect,
      top: rect.y,
      left: rect.x,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    };
  }

  // ../node_modules/@floating-ui/core/dist/floating-ui.core.mjs
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  var computePosition = async (reference, floating, config) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware: middleware2 = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware2.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x: x2,
      y: y3
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i4 = 0; i4 < validMiddleware.length; i4++) {
      const {
        name,
        fn: fn2
      } = validMiddleware[i4];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn2({
        x: x2,
        y: y3,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x2 = nextX != null ? nextX : x2;
      y3 = nextY != null ? nextY : y3;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x: x2,
            y: y3
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i4 = -1;
        continue;
      }
    }
    return {
      x: x2,
      y: y3,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  async function detectOverflow(state, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x: x2,
      y: y3,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding: padding3 = 0
    } = evaluate(options, state);
    const paddingObject = getPaddingObject(padding3);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element2 = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element2))) != null ? _await$platform$isEle : true) ? element2 : element2.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      ...rects.floating,
      x: x2,
      y: y3
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  var arrow = (options) => ({
    name: "arrow",
    options,
    async fn(state) {
      const {
        x: x2,
        y: y3,
        placement,
        rects,
        platform: platform2,
        elements,
        middlewareData
      } = state;
      const {
        element: element2,
        padding: padding3 = 0
      } = evaluate(options, state) || {};
      if (element2 == null) {
        return {};
      }
      const paddingObject = getPaddingObject(padding3);
      const coords = {
        x: x2,
        y: y3
      };
      const axis = getAlignmentAxis(placement);
      const length2 = getAxisLength(axis);
      const arrowDimensions = await platform2.getDimensions(element2);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length2] + rects.reference[axis] - coords[axis] - rects.floating[length2];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element2));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements.floating[clientProp] || rects.floating[length2];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length2] / 2 - 1;
      const minPadding = min(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
      const min$1 = minPadding;
      const max2 = clientSize - arrowDimensions[length2] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length2] / 2 + centerToReference;
      const offset3 = clamp2(min$1, center, max2);
      const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset3 && rects.reference[length2] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length2] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
      return {
        [axis]: coords[axis] + alignmentOffset,
        data: {
          [axis]: offset3,
          centerOffset: center - offset3 - alignmentOffset,
          ...shouldAddOffset && {
            alignmentOffset
          }
        },
        reset: shouldAddOffset
      };
    }
  });
  var flip = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements2 = [initialPlacement, ...fallbackPlacements];
        const overflow2 = await detectOverflow(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow2[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow2[sides2[0]], overflow2[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements2[nextIndex];
          if (nextPlacement) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d3) => d3.overflows[0] <= 0).sort((a3, b4) => a3.overflows[1] - b4.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$map$so;
                const placement2 = (_overflowsData$map$so = overflowsData.map((d3) => [d3.placement, d3.overflows.filter((overflow3) => overflow3 > 0).reduce((acc, overflow3) => acc + overflow3, 0)]).sort((a3, b4) => a3[1] - b4[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };
  function getSideOffsets(overflow2, rect) {
    return {
      top: overflow2.top - rect.height,
      right: overflow2.right - rect.width,
      bottom: overflow2.bottom - rect.height,
      left: overflow2.left - rect.width
    };
  }
  function isAnySideFullyClipped(overflow2) {
    return sides.some((side) => overflow2[side] >= 0);
  }
  var hide = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "hide",
      options,
      async fn(state) {
        const {
          rects
        } = state;
        const {
          strategy = "referenceHidden",
          ...detectOverflowOptions
        } = evaluate(options, state);
        switch (strategy) {
          case "referenceHidden": {
            const overflow2 = await detectOverflow(state, {
              ...detectOverflowOptions,
              elementContext: "reference"
            });
            const offsets = getSideOffsets(overflow2, rects.reference);
            return {
              data: {
                referenceHiddenOffsets: offsets,
                referenceHidden: isAnySideFullyClipped(offsets)
              }
            };
          }
          case "escaped": {
            const overflow2 = await detectOverflow(state, {
              ...detectOverflowOptions,
              altBoundary: true
            });
            const offsets = getSideOffsets(overflow2, rects.floating);
            return {
              data: {
                escapedOffsets: offsets,
                escaped: isAnySideFullyClipped(offsets)
              }
            };
          }
          default: {
            return {};
          }
        }
      }
    };
  };
  async function convertValueToCoords(state, options) {
    const {
      placement,
      platform: platform2,
      elements
    } = state;
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: 0,
      crossAxis: 0,
      alignmentAxis: null,
      ...rawValue
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  var offset = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state) {
        const {
          x: x2,
          y: y3
        } = state;
        const diffCoords = await convertValueToCoords(state, options);
        return {
          x: x2 + diffCoords.x,
          y: y3 + diffCoords.y,
          data: diffCoords
        };
      }
    };
  };
  var shift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "shift",
      options,
      async fn(state) {
        const {
          x: x2,
          y: y3,
          placement
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: (_ref) => {
              let {
                x: x3,
                y: y4
              } = _ref;
              return {
                x: x3,
                y: y4
              };
            }
          },
          ...detectOverflowOptions
        } = evaluate(options, state);
        const coords = {
          x: x2,
          y: y3
        };
        const overflow2 = await detectOverflow(state, detectOverflowOptions);
        const crossAxis = getSideAxis(getSide(placement));
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min2 = mainAxisCoord + overflow2[minSide];
          const max2 = mainAxisCoord - overflow2[maxSide];
          mainAxisCoord = clamp2(min2, mainAxisCoord, max2);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min2 = crossAxisCoord + overflow2[minSide];
          const max2 = crossAxisCoord - overflow2[maxSide];
          crossAxisCoord = clamp2(min2, crossAxisCoord, max2);
        }
        const limitedCoords = limiter.fn({
          ...state,
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        });
        return {
          ...limitedCoords,
          data: {
            x: limitedCoords.x - x2,
            y: limitedCoords.y - y3
          }
        };
      }
    };
  };
  var limitShift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      options,
      fn(state) {
        const {
          x: x2,
          y: y3,
          placement,
          rects,
          middlewareData
        } = state;
        const {
          offset: offset3 = 0,
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true
        } = evaluate(options, state);
        const coords = {
          x: x2,
          y: y3
        };
        const crossAxis = getSideAxis(placement);
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        const rawOffset = evaluate(offset3, state);
        const computedOffset = typeof rawOffset === "number" ? {
          mainAxis: rawOffset,
          crossAxis: 0
        } : {
          mainAxis: 0,
          crossAxis: 0,
          ...rawOffset
        };
        if (checkMainAxis) {
          const len = mainAxis === "y" ? "height" : "width";
          const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
          const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
          if (mainAxisCoord < limitMin) {
            mainAxisCoord = limitMin;
          } else if (mainAxisCoord > limitMax) {
            mainAxisCoord = limitMax;
          }
        }
        if (checkCrossAxis) {
          var _middlewareData$offse, _middlewareData$offse2;
          const len = mainAxis === "y" ? "width" : "height";
          const isOriginSide = ["top", "left"].includes(getSide(placement));
          const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
          const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
          if (crossAxisCoord < limitMin) {
            crossAxisCoord = limitMin;
          } else if (crossAxisCoord > limitMax) {
            crossAxisCoord = limitMax;
          }
        }
        return {
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        };
      }
    };
  };
  var size = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "size",
      options,
      async fn(state) {
        const {
          placement,
          rects,
          platform: platform2,
          elements
        } = state;
        const {
          apply: apply2 = () => {
          },
          ...detectOverflowOptions
        } = evaluate(options, state);
        const overflow2 = await detectOverflow(state, detectOverflowOptions);
        const side = getSide(placement);
        const alignment = getAlignment(placement);
        const isYAxis = getSideAxis(placement) === "y";
        const {
          width,
          height
        } = rects.floating;
        let heightSide;
        let widthSide;
        if (side === "top" || side === "bottom") {
          heightSide = side;
          widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
        } else {
          widthSide = side;
          heightSide = alignment === "end" ? "top" : "bottom";
        }
        const overflowAvailableHeight = height - overflow2[heightSide];
        const overflowAvailableWidth = width - overflow2[widthSide];
        const noShift = !state.middlewareData.shift;
        let availableHeight = overflowAvailableHeight;
        let availableWidth = overflowAvailableWidth;
        if (isYAxis) {
          const maximumClippingWidth = width - overflow2.left - overflow2.right;
          availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
        } else {
          const maximumClippingHeight = height - overflow2.top - overflow2.bottom;
          availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
        }
        if (noShift && !alignment) {
          const xMin = max(overflow2.left, 0);
          const xMax = max(overflow2.right, 0);
          const yMin = max(overflow2.top, 0);
          const yMax = max(overflow2.bottom, 0);
          if (isYAxis) {
            availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow2.left, overflow2.right));
          } else {
            availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow2.top, overflow2.bottom));
          }
        }
        await apply2({
          ...state,
          availableWidth,
          availableHeight
        });
        const nextDimensions = await platform2.getDimensions(elements.floating);
        if (width !== nextDimensions.width || height !== nextDimensions.height) {
          return {
            reset: {
              rects: true
            }
          };
        }
        return {};
      }
    };
  };

  // ../node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs
  function getNodeName(node5) {
    if (isNode(node5)) {
      return (node5.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow(node5) {
    var _node$ownerDocument;
    return (node5 == null ? void 0 : (_node$ownerDocument = node5.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement(node5) {
    var _ref;
    return (_ref = (isNode(node5) ? node5.ownerDocument : node5.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  function isNode(value) {
    return value instanceof Node || value instanceof getWindow(value).Node;
  }
  function isElement(value) {
    return value instanceof Element || value instanceof getWindow(value).Element;
  }
  function isHTMLElement3(value) {
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
  }
  function isShadowRoot(value) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
  }
  function isOverflowElement(element2) {
    const {
      overflow: overflow2,
      overflowX,
      overflowY,
      display
    } = getComputedStyle2(element2);
    return /auto|scroll|overlay|hidden|clip/.test(overflow2 + overflowY + overflowX) && !["inline", "contents"].includes(display);
  }
  function isTableElement(element2) {
    return ["table", "td", "th"].includes(getNodeName(element2));
  }
  function isContainingBlock(element2) {
    const webkit = isWebKit();
    const css2 = getComputedStyle2(element2);
    return css2.transform !== "none" || css2.perspective !== "none" || (css2.containerType ? css2.containerType !== "normal" : false) || !webkit && (css2.backdropFilter ? css2.backdropFilter !== "none" : false) || !webkit && (css2.filter ? css2.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css2.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css2.contain || "").includes(value));
  }
  function getContainingBlock(element2) {
    let currentNode = getParentNode(element2);
    while (isHTMLElement3(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else {
        currentNode = getParentNode(currentNode);
      }
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports)
      return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  function isLastTraversableNode(node5) {
    return ["html", "body", "#document"].includes(getNodeName(node5));
  }
  function getComputedStyle2(element2) {
    return getWindow(element2).getComputedStyle(element2);
  }
  function getNodeScroll(element2) {
    if (isElement(element2)) {
      return {
        scrollLeft: element2.scrollLeft,
        scrollTop: element2.scrollTop
      };
    }
    return {
      scrollLeft: element2.pageXOffset,
      scrollTop: element2.pageYOffset
    };
  }
  function getParentNode(node5) {
    if (getNodeName(node5) === "html") {
      return node5;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node5.assignedSlot || // DOM Element detected.
      node5.parentNode || // ShadowRoot detected.
      isShadowRoot(node5) && node5.host || // Fallback.
      getDocumentElement(node5)
    );
    return isShadowRoot(result) ? result.host : result;
  }
  function getNearestOverflowAncestor(node5) {
    const parentNode = getParentNode(node5);
    if (isLastTraversableNode(parentNode)) {
      return node5.ownerDocument ? node5.ownerDocument.body : node5.body;
    }
    if (isHTMLElement3(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node5, list3, traverseIframes) {
    var _node$ownerDocument2;
    if (list3 === void 0) {
      list3 = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node5);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node5.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win2 = getWindow(scrollableAncestor);
    if (isBody) {
      return list3.concat(win2, win2.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win2.frameElement && traverseIframes ? getOverflowAncestors(win2.frameElement) : []);
    }
    return list3.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }

  // ../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
  function getCssDimensions(element2) {
    const css2 = getComputedStyle2(element2);
    let width = parseFloat(css2.width) || 0;
    let height = parseFloat(css2.height) || 0;
    const hasOffset = isHTMLElement3(element2);
    const offsetWidth = hasOffset ? element2.offsetWidth : width;
    const offsetHeight = hasOffset ? element2.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement(element2) {
    return !isElement(element2) ? element2.contextElement : element2;
  }
  function getScale(element2) {
    const domElement = unwrapElement(element2);
    if (!isHTMLElement3(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $: $2
    } = getCssDimensions(domElement);
    let x2 = ($2 ? round(rect.width) : rect.width) / width;
    let y3 = ($2 ? round(rect.height) : rect.height) / height;
    if (!x2 || !Number.isFinite(x2)) {
      x2 = 1;
    }
    if (!y3 || !Number.isFinite(y3)) {
      y3 = 1;
    }
    return {
      x: x2,
      y: y3
    };
  }
  var noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element2) {
    const win2 = getWindow(element2);
    if (!isWebKit() || !win2.visualViewport) {
      return noOffsets;
    }
    return {
      x: win2.visualViewport.offsetLeft,
      y: win2.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element2, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element2)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element2, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element2.getBoundingClientRect();
    const domElement = unwrapElement(element2);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element2);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x2 = (clientRect.left + visualOffsets.x) / scale.x;
    let y3 = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win2 = getWindow(domElement);
      const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
      let currentIFrame = win2.frameElement;
      while (currentIFrame && offsetParent && offsetWin !== win2) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css2 = getComputedStyle2(currentIFrame);
        const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css2.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css2.paddingTop)) * iframeScale.y;
        x2 *= iframeScale.x;
        y3 *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x2 += left;
        y3 += top;
        currentIFrame = getWindow(currentIFrame).frameElement;
      }
    }
    return rectToClientRect({
      width,
      height,
      x: x2,
      y: y3
    });
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isOffsetParentAnElement = isHTMLElement3(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    if (offsetParent === documentElement) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement3(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
    };
  }
  function getClientRects(element2) {
    return Array.from(element2.getClientRects());
  }
  function getWindowScrollBarX(element2) {
    return getBoundingClientRect(getDocumentElement(element2)).left + getNodeScroll(element2).scrollLeft;
  }
  function getDocumentRect(element2) {
    const html4 = getDocumentElement(element2);
    const scroll = getNodeScroll(element2);
    const body = element2.ownerDocument.body;
    const width = max(html4.scrollWidth, html4.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max(html4.scrollHeight, html4.clientHeight, body.scrollHeight, body.clientHeight);
    let x2 = -scroll.scrollLeft + getWindowScrollBarX(element2);
    const y3 = -scroll.scrollTop;
    if (getComputedStyle2(body).direction === "rtl") {
      x2 += max(html4.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x: x2,
      y: y3
    };
  }
  function getViewportRect(element2, strategy) {
    const win2 = getWindow(element2);
    const html4 = getDocumentElement(element2);
    const visualViewport = win2.visualViewport;
    let width = html4.clientWidth;
    let height = html4.clientHeight;
    let x2 = 0;
    let y3 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x2 = visualViewport.offsetLeft;
        y3 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x2,
      y: y3
    };
  }
  function getInnerBoundingClientRect(element2, strategy) {
    const clientRect = getBoundingClientRect(element2, true, strategy === "fixed");
    const top = clientRect.top + element2.clientTop;
    const left = clientRect.left + element2.clientLeft;
    const scale = isHTMLElement3(element2) ? getScale(element2) : createCoords(1);
    const width = element2.clientWidth * scale.x;
    const height = element2.clientHeight * scale.y;
    const x2 = left * scale.x;
    const y3 = top * scale.y;
    return {
      width,
      height,
      x: x2,
      y: y3
    };
  }
  function getClientRectFromClippingAncestor(element2, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element2, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element2));
    } else if (isElement(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element2);
      rect = {
        ...clippingAncestor,
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element2, stopNode) {
    const parentNode = getParentNode(element2);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element2, cache3) {
    const cachedResult = cache3.get(element2);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element2, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle2(element2).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element2) : element2;
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle2(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element2, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache3.set(element2, result);
    return result;
  }
  function getClippingRect(_ref) {
    let {
      element: element2,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element2, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element2, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element2, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element2) {
    return getCssDimensions(element2);
  }
  function getRectRelativeToOffsetParent(element2, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement3(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element2, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }
  function getTrueOffsetParent(element2, polyfill) {
    if (!isHTMLElement3(element2) || getComputedStyle2(element2).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element2);
    }
    return element2.offsetParent;
  }
  function getOffsetParent(element2, polyfill) {
    const window2 = getWindow(element2);
    if (!isHTMLElement3(element2)) {
      return window2;
    }
    let offsetParent = getTrueOffsetParent(element2, polyfill);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
      return window2;
    }
    return offsetParent || getContainingBlock(element2) || window2;
  }
  var getElementRects = async function(_ref) {
    let {
      reference,
      floating,
      strategy
    } = _ref;
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    return {
      reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
      floating: {
        x: 0,
        y: 0,
        ...await getDimensionsFn(floating)
      }
    };
  };
  function isRTL(element2) {
    return getComputedStyle2(element2).direction === "rtl";
  }
  var platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL
  };
  var computePosition2 = (reference, floating, options) => {
    const cache3 = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache3
    };
    return computePosition(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };

  // ../node_modules/@fluentui/react-positioning/lib/usePositioning.js
  var React55 = __toESM(require_react());

  // ../node_modules/@fluentui/react-positioning/lib/utils/parseFloatingUIPlacement.js
  function parseFloatingUIPlacement(placement) {
    const tokens2 = placement.split("-");
    return {
      side: tokens2[0],
      alignment: tokens2[1]
    };
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/getScrollParent.js
  var getParentNode2 = (node5) => {
    if (node5.nodeName === "HTML") {
      return node5;
    }
    return node5.parentNode || node5.host;
  };
  var getStyleComputedProperty = (node5) => {
    var _node_ownerDocument;
    if (node5.nodeType !== 1) {
      return {};
    }
    const window2 = (_node_ownerDocument = node5.ownerDocument) === null || _node_ownerDocument === void 0 ? void 0 : _node_ownerDocument.defaultView;
    return window2.getComputedStyle(node5, null);
  };
  var getScrollParent = (node5) => {
    const parentNode = node5 && getParentNode2(node5);
    if (!parentNode)
      return document.body;
    switch (parentNode.nodeName) {
      case "HTML":
      case "BODY":
        return parentNode.ownerDocument.body;
      case "#document":
        return parentNode.body;
    }
    const { overflow: overflow2, overflowX, overflowY } = getStyleComputedProperty(parentNode);
    if (/(auto|scroll|overlay)/.test(overflow2 + overflowY + overflowX)) {
      return parentNode;
    }
    return getScrollParent(parentNode);
  };
  var hasScrollParent = (node5) => {
    var _scrollParentElement_ownerDocument;
    const scrollParentElement = getScrollParent(node5);
    return scrollParentElement ? scrollParentElement !== ((_scrollParentElement_ownerDocument = scrollParentElement.ownerDocument) === null || _scrollParentElement_ownerDocument === void 0 ? void 0 : _scrollParentElement_ownerDocument.body) : false;
  };

  // ../node_modules/@fluentui/react-positioning/lib/utils/getBoundary.js
  function getBoundary(element2, boundary) {
    if (boundary === "window") {
      var _element;
      return (_element = element2) === null || _element === void 0 ? void 0 : _element.ownerDocument.documentElement;
    }
    if (boundary === "clippingParents") {
      return "clippingAncestors";
    }
    if (boundary === "scrollParent") {
      let boundariesNode = getScrollParent(element2);
      if (boundariesNode.nodeName === "BODY") {
        var _element1;
        boundariesNode = (_element1 = element2) === null || _element1 === void 0 ? void 0 : _element1.ownerDocument.documentElement;
      }
      return boundariesNode;
    }
    return boundary;
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/getReactFiberFromNode.js
  var React53 = __toESM(require_react());
  var WorkTag;
  (function(WorkTag2) {
    WorkTag2[WorkTag2["FunctionComponent"] = 0] = "FunctionComponent";
    WorkTag2[WorkTag2["ClassComponent"] = 1] = "ClassComponent";
    WorkTag2[WorkTag2["IndeterminateComponent"] = 2] = "IndeterminateComponent";
    WorkTag2[WorkTag2["HostRoot"] = 3] = "HostRoot";
    WorkTag2[WorkTag2["HostPortal"] = 4] = "HostPortal";
    WorkTag2[WorkTag2["HostComponent"] = 5] = "HostComponent";
    WorkTag2[WorkTag2["HostText"] = 6] = "HostText";
    WorkTag2[WorkTag2["Fragment"] = 7] = "Fragment";
    WorkTag2[WorkTag2["Mode"] = 8] = "Mode";
    WorkTag2[WorkTag2["ContextConsumer"] = 9] = "ContextConsumer";
    WorkTag2[WorkTag2["ContextProvider"] = 10] = "ContextProvider";
    WorkTag2[WorkTag2["ForwardRef"] = 11] = "ForwardRef";
    WorkTag2[WorkTag2["Profiler"] = 12] = "Profiler";
    WorkTag2[WorkTag2["SuspenseComponent"] = 13] = "SuspenseComponent";
    WorkTag2[WorkTag2["MemoComponent"] = 14] = "MemoComponent";
    WorkTag2[WorkTag2["SimpleMemoComponent"] = 15] = "SimpleMemoComponent";
    WorkTag2[WorkTag2["LazyComponent"] = 16] = "LazyComponent";
    WorkTag2[WorkTag2["IncompleteClassComponent"] = 17] = "IncompleteClassComponent";
    WorkTag2[WorkTag2["DehydratedFragment"] = 18] = "DehydratedFragment";
    WorkTag2[WorkTag2["SuspenseListComponent"] = 19] = "SuspenseListComponent";
    WorkTag2[WorkTag2["FundamentalComponent"] = 20] = "FundamentalComponent";
    WorkTag2[WorkTag2["ScopeComponent"] = 21] = "ScopeComponent";
  })(WorkTag || (WorkTag = {}));
  function getReactFiberFromNode(elm) {
    if (!elm) {
      return null;
    }
    for (const k2 in elm) {
      if (k2.indexOf("__reactInternalInstance$") === 0 || k2.indexOf("__reactFiber$") === 0) {
        return elm[k2];
      }
    }
    throw new Error("getReactFiber(): Failed to find a React Fiber on a node");
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/mergeArrowOffset.js
  function mergeArrowOffset(userOffset, arrowHeight) {
    if (typeof userOffset === "number") {
      return addArrowOffset(userOffset, arrowHeight);
    }
    if (typeof userOffset === "object" && userOffset !== null) {
      return addArrowOffset(userOffset, arrowHeight);
    }
    if (typeof userOffset === "function") {
      return (offsetParams) => {
        const offset3 = userOffset(offsetParams);
        return addArrowOffset(offset3, arrowHeight);
      };
    }
    return {
      mainAxis: arrowHeight
    };
  }
  var addArrowOffset = (offset3, arrowHeight) => {
    if (typeof offset3 === "number") {
      return {
        mainAxis: offset3 + arrowHeight
      };
    }
    var _offset_mainAxis;
    return {
      ...offset3,
      mainAxis: ((_offset_mainAxis = offset3.mainAxis) !== null && _offset_mainAxis !== void 0 ? _offset_mainAxis : 0) + arrowHeight
    };
  };

  // ../node_modules/@fluentui/react-positioning/lib/utils/toFloatingUIPadding.js
  function toFloatingUIPadding(padding3, isRtl) {
    if (typeof padding3 === "number") {
      return padding3;
    }
    const { start: start2, end: end2, ...verticalPadding } = padding3;
    const paddingObject = verticalPadding;
    const left = isRtl ? "end" : "start";
    const right = isRtl ? "start" : "end";
    if (padding3[left]) {
      paddingObject.left = padding3[left];
    }
    if (padding3[right]) {
      paddingObject.right = padding3[right];
    }
    return paddingObject;
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/toFloatingUIPlacement.js
  var getPositionMap = (rtl) => ({
    above: "top",
    below: "bottom",
    before: rtl ? "right" : "left",
    after: rtl ? "left" : "right"
  });
  var getAlignmentMap = () => ({
    start: "start",
    end: "end",
    top: "start",
    bottom: "end",
    center: void 0
  });
  var shouldAlignToCenter = (p3, a3) => {
    const positionedVertically = p3 === "above" || p3 === "below";
    const alignedVertically = a3 === "top" || a3 === "bottom";
    return positionedVertically && alignedVertically || !positionedVertically && !alignedVertically;
  };
  var toFloatingUIPlacement = (align, position4, rtl) => {
    const alignment = shouldAlignToCenter(position4, align) ? "center" : align;
    const computedPosition = position4 && getPositionMap(rtl)[position4];
    const computedAlignment = alignment && getAlignmentMap()[alignment];
    if (computedPosition && computedAlignment) {
      return `${computedPosition}-${computedAlignment}`;
    }
    return computedPosition;
  };

  // ../node_modules/@fluentui/react-positioning/lib/utils/fromFloatingUIPlacement.js
  var getPositionMap2 = () => ({
    top: "above",
    bottom: "below",
    right: "after",
    left: "before"
  });
  var getAlignmentMap2 = (position4) => {
    if (position4 === "above" || position4 === "below") {
      return {
        start: "start",
        end: "end"
      };
    }
    return {
      start: "top",
      end: "bottom"
    };
  };
  var fromFloatingUIPlacement = (placement) => {
    const { side, alignment: floatingUIAlignment } = parseFloatingUIPlacement(placement);
    const position4 = getPositionMap2()[side];
    const alignment = floatingUIAlignment && getAlignmentMap2(position4)[floatingUIAlignment];
    return {
      position: position4,
      alignment
    };
  };

  // ../node_modules/@fluentui/react-positioning/lib/utils/resolvePositioningShorthand.js
  var shorthandLookup = {
    above: {
      position: "above",
      align: "center"
    },
    "above-start": {
      position: "above",
      align: "start"
    },
    "above-end": {
      position: "above",
      align: "end"
    },
    below: {
      position: "below",
      align: "center"
    },
    "below-start": {
      position: "below",
      align: "start"
    },
    "below-end": {
      position: "below",
      align: "end"
    },
    before: {
      position: "before",
      align: "center"
    },
    "before-top": {
      position: "before",
      align: "top"
    },
    "before-bottom": {
      position: "before",
      align: "bottom"
    },
    after: {
      position: "after",
      align: "center"
    },
    "after-top": {
      position: "after",
      align: "top"
    },
    "after-bottom": {
      position: "after",
      align: "bottom"
    }
  };
  function resolvePositioningShorthand(shorthand) {
    if (shorthand === void 0 || shorthand === null) {
      return {};
    }
    if (typeof shorthand === "string") {
      return shorthandLookup[shorthand];
    }
    return shorthand;
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/useCallbackRef.js
  var React54 = __toESM(require_react());
  function useCallbackRef(initialValue, callback, skipInitialResolve) {
    const isFirst = React54.useRef(true);
    const [ref] = React54.useState(() => ({
      // value
      value: initialValue,
      // last callback
      callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          const last2 = ref.value;
          if (last2 !== value) {
            ref.value = value;
            if (skipInitialResolve && isFirst.current) {
              return;
            }
            ref.callback(value, last2);
          }
        }
      }
    }));
    useIsomorphicLayoutEffect(() => {
      isFirst.current = false;
    }, []);
    ref.callback = callback;
    return ref.facade;
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/debounce.js
  function debounce(fn2) {
    let pending;
    return () => {
      if (!pending) {
        pending = new Promise((resolve2) => {
          Promise.resolve().then(() => {
            pending = void 0;
            resolve2(fn2());
          });
        });
      }
      return pending;
    };
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/hasAutoFocusFilter.js
  function hasAutofocusProp(node5) {
    const isAutoFocusableElement = node5.nodeName === "BUTTON" || node5.nodeName === "INPUT" || node5.nodeName === "SELECT" || node5.nodeName === "TEXTAREA";
    if (isAutoFocusableElement) {
      var _getReactFiberFromNode;
      return !!((_getReactFiberFromNode = getReactFiberFromNode(node5)) === null || _getReactFiberFromNode === void 0 ? void 0 : _getReactFiberFromNode.pendingProps.autoFocus);
    }
    return false;
  }
  function hasAutofocusFilter(node5) {
    return hasAutofocusProp(node5) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/writeArrowUpdates.js
  function writeArrowUpdates(options) {
    const { arrow: arrow2, middlewareData } = options;
    if (!middlewareData.arrow || !arrow2) {
      return;
    }
    const { x: arrowX, y: arrowY } = middlewareData.arrow;
    Object.assign(arrow2.style, {
      left: `${arrowX}px`,
      top: `${arrowY}px`
    });
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/writeContainerupdates.js
  function writeContainerUpdates(options) {
    var _middlewareData_hide, _middlewareData_hide1, _container_ownerDocument_defaultView;
    const { container, placement, middlewareData, strategy, lowPPI, coordinates, useTransform = true } = options;
    if (!container) {
      return;
    }
    container.setAttribute(DATA_POSITIONING_PLACEMENT, placement);
    container.removeAttribute(DATA_POSITIONING_INTERSECTING);
    if (middlewareData.intersectionObserver.intersecting) {
      container.setAttribute(DATA_POSITIONING_INTERSECTING, "");
    }
    container.removeAttribute(DATA_POSITIONING_ESCAPED);
    if ((_middlewareData_hide = middlewareData.hide) === null || _middlewareData_hide === void 0 ? void 0 : _middlewareData_hide.escaped) {
      container.setAttribute(DATA_POSITIONING_ESCAPED, "");
    }
    container.removeAttribute(DATA_POSITIONING_HIDDEN);
    if ((_middlewareData_hide1 = middlewareData.hide) === null || _middlewareData_hide1 === void 0 ? void 0 : _middlewareData_hide1.referenceHidden) {
      container.setAttribute(DATA_POSITIONING_HIDDEN, "");
    }
    const devicePixelRatio2 = ((_container_ownerDocument_defaultView = container.ownerDocument.defaultView) === null || _container_ownerDocument_defaultView === void 0 ? void 0 : _container_ownerDocument_defaultView.devicePixelRatio) || 1;
    const x2 = Math.round(coordinates.x * devicePixelRatio2) / devicePixelRatio2;
    const y3 = Math.round(coordinates.y * devicePixelRatio2) / devicePixelRatio2;
    Object.assign(container.style, {
      position: strategy
    });
    if (useTransform) {
      Object.assign(container.style, {
        transform: lowPPI ? `translate(${x2}px, ${y3}px)` : `translate3d(${x2}px, ${y3}px, 0)`
      });
      return;
    }
    Object.assign(container.style, {
      left: `${x2}px`,
      top: `${y3}px`
    });
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/normalizeAutoSize.js
  var normalizeAutoSize = (autoSize) => {
    switch (autoSize) {
      case "always":
      case true:
        return {
          applyMaxWidth: true,
          applyMaxHeight: true
        };
      case "width-always":
      case "width":
        return {
          applyMaxWidth: true,
          applyMaxHeight: false
        };
      case "height-always":
      case "height":
        return {
          applyMaxWidth: false,
          applyMaxHeight: true
        };
      default:
        return false;
    }
  };

  // ../node_modules/@fluentui/react-positioning/lib/middleware/coverTarget.js
  function coverTarget() {
    return {
      name: "coverTarget",
      fn: (middlewareArguments) => {
        const { placement, rects, x: x2, y: y3 } = middlewareArguments;
        const basePlacement = parseFloatingUIPlacement(placement).side;
        const newCoords = {
          x: x2,
          y: y3
        };
        switch (basePlacement) {
          case "bottom":
            newCoords.y -= rects.reference.height;
            break;
          case "top":
            newCoords.y += rects.reference.height;
            break;
          case "left":
            newCoords.x += rects.reference.width;
            break;
          case "right":
            newCoords.x -= rects.reference.width;
            break;
        }
        return newCoords;
      }
    };
  }

  // ../node_modules/@fluentui/react-positioning/lib/middleware/flip.js
  function flip2(options) {
    const { hasScrollableElement, flipBoundary, container, fallbackPositions = [], isRtl } = options;
    const fallbackPlacements = fallbackPositions.reduce((acc, shorthand) => {
      const { position: position4, align } = resolvePositioningShorthand(shorthand);
      const placement = toFloatingUIPlacement(align, position4, isRtl);
      if (placement) {
        acc.push(placement);
      }
      return acc;
    }, []);
    return flip({
      ...hasScrollableElement && {
        boundary: "clippingAncestors"
      },
      ...flipBoundary && {
        altBoundary: true,
        boundary: getBoundary(container, flipBoundary)
      },
      fallbackStrategy: "bestFit",
      ...fallbackPlacements.length && {
        fallbackPlacements
      }
    });
  }

  // ../node_modules/@fluentui/react-positioning/lib/middleware/intersecting.js
  function intersecting() {
    return {
      name: "intersectionObserver",
      fn: async (middlewareArguments) => {
        const floatingRect = middlewareArguments.rects.floating;
        const altOverflow = await detectOverflow(middlewareArguments, {
          altBoundary: true
        });
        const isIntersectingTop = altOverflow.top < floatingRect.height && altOverflow.top > 0;
        const isIntersectingBottom = altOverflow.bottom < floatingRect.height && altOverflow.bottom > 0;
        const isIntersecting = isIntersectingTop || isIntersectingBottom;
        return {
          data: {
            intersecting: isIntersecting
          }
        };
      }
    };
  }

  // ../node_modules/@fluentui/react-positioning/lib/middleware/maxSize.js
  var resetMaxSize = (autoSize) => ({
    name: "resetMaxSize",
    fn({ middlewareData, elements }) {
      var _middlewareData_resetMaxSize;
      if ((_middlewareData_resetMaxSize = middlewareData.resetMaxSize) === null || _middlewareData_resetMaxSize === void 0 ? void 0 : _middlewareData_resetMaxSize.maxSizeAlreadyReset) {
        return {};
      }
      const { applyMaxWidth, applyMaxHeight } = autoSize;
      if (applyMaxWidth) {
        elements.floating.style.removeProperty("box-sizing");
        elements.floating.style.removeProperty("max-width");
        elements.floating.style.removeProperty("width");
      }
      if (applyMaxHeight) {
        elements.floating.style.removeProperty("box-sizing");
        elements.floating.style.removeProperty("max-height");
        elements.floating.style.removeProperty("height");
      }
      return {
        data: {
          maxSizeAlreadyReset: true
        },
        reset: {
          rects: true
        }
      };
    }
  });
  function maxSize(autoSize, options) {
    const { container, overflowBoundary } = options;
    return size({
      ...overflowBoundary && {
        altBoundary: true,
        boundary: getBoundary(container, overflowBoundary)
      },
      apply({ availableHeight, availableWidth, elements, rects }) {
        const applyMaxSizeStyles = (apply2, dimension, availableSize) => {
          if (!apply2) {
            return;
          }
          elements.floating.style.setProperty("box-sizing", "border-box");
          elements.floating.style.setProperty(`max-${dimension}`, `${availableSize}px`);
          if (rects.floating[dimension] > availableSize) {
            elements.floating.style.setProperty(dimension, `${availableSize}px`);
            const axis = dimension === "width" ? "x" : "y";
            if (!elements.floating.style.getPropertyValue(`overflow-${axis}`)) {
              elements.floating.style.setProperty(`overflow-${axis}`, "auto");
            }
          }
        };
        const { applyMaxWidth, applyMaxHeight } = autoSize;
        applyMaxSizeStyles(applyMaxWidth, "width", availableWidth);
        applyMaxSizeStyles(applyMaxHeight, "height", availableHeight);
      }
    });
  }

  // ../node_modules/@fluentui/react-positioning/lib/utils/getFloatingUIOffset.js
  function getFloatingUIOffset(rawOffset) {
    if (!rawOffset) {
      return rawOffset;
    }
    if (typeof rawOffset === "number" || typeof rawOffset === "object") {
      return rawOffset;
    }
    return ({ rects: { floating, reference }, placement }) => {
      const { position: position4, alignment } = fromFloatingUIPlacement(placement);
      return rawOffset({
        positionedRect: floating,
        targetRect: reference,
        position: position4,
        alignment
      });
    };
  }

  // ../node_modules/@fluentui/react-positioning/lib/middleware/offset.js
  function offset2(offsetValue) {
    const floatingUIOffset = getFloatingUIOffset(offsetValue);
    return offset(floatingUIOffset);
  }

  // ../node_modules/@fluentui/react-positioning/lib/middleware/shift.js
  function shift2(options) {
    const { hasScrollableElement, disableTether, overflowBoundary, container, overflowBoundaryPadding, isRtl } = options;
    return shift({
      ...hasScrollableElement && {
        boundary: "clippingAncestors"
      },
      ...disableTether && {
        crossAxis: disableTether === "all",
        limiter: limitShift({
          crossAxis: disableTether !== "all",
          mainAxis: false
        })
      },
      ...overflowBoundaryPadding && {
        padding: toFloatingUIPadding(overflowBoundaryPadding, isRtl)
      },
      ...overflowBoundary && {
        altBoundary: true,
        boundary: getBoundary(container, overflowBoundary)
      }
    });
  }

  // ../node_modules/@fluentui/react-positioning/lib/createPositionManager.js
  function createPositionManager(options) {
    const { container, target, arrow: arrow2, strategy, middleware: middleware2, placement, useTransform = true } = options;
    let isDestroyed = false;
    if (!target || !container) {
      return {
        updatePosition: () => void 0,
        dispose: () => void 0
      };
    }
    let isFirstUpdate = true;
    const scrollParents = /* @__PURE__ */ new Set();
    const targetWindow = container.ownerDocument.defaultView;
    Object.assign(container.style, {
      position: "fixed",
      left: 0,
      top: 0,
      margin: 0
    });
    const forceUpdate = () => {
      if (isDestroyed) {
        return;
      }
      if (isFirstUpdate) {
        scrollParents.add(getScrollParent(container));
        if (isHTMLElement(target)) {
          scrollParents.add(getScrollParent(target));
        }
        scrollParents.forEach((scrollParent) => {
          scrollParent.addEventListener("scroll", updatePosition, {
            passive: true
          });
        });
        isFirstUpdate = false;
      }
      Object.assign(container.style, {
        position: strategy
      });
      computePosition2(target, container, {
        placement,
        middleware: middleware2,
        strategy
      }).then(({ x: x2, y: y3, middlewareData, placement: computedPlacement }) => {
        var _targetWindow;
        if (isDestroyed) {
          return;
        }
        writeArrowUpdates({
          arrow: arrow2,
          middlewareData
        });
        writeContainerUpdates({
          container,
          middlewareData,
          placement: computedPlacement,
          coordinates: {
            x: x2,
            y: y3
          },
          lowPPI: (((_targetWindow = targetWindow) === null || _targetWindow === void 0 ? void 0 : _targetWindow.devicePixelRatio) || 1) <= 1,
          strategy,
          useTransform
        });
      }).catch((err) => {
        if (true) {
          console.error("[usePositioning]: Failed to calculate position", err);
        }
      });
    };
    const updatePosition = debounce(() => forceUpdate());
    const dispose = () => {
      isDestroyed = true;
      if (targetWindow) {
        targetWindow.removeEventListener("scroll", updatePosition);
        targetWindow.removeEventListener("resize", updatePosition);
      }
      scrollParents.forEach((scrollParent) => {
        scrollParent.removeEventListener("scroll", updatePosition);
      });
    };
    if (targetWindow) {
      targetWindow.addEventListener("scroll", updatePosition, {
        passive: true
      });
      targetWindow.addEventListener("resize", updatePosition);
    }
    updatePosition();
    return {
      updatePosition,
      dispose
    };
  }

  // ../node_modules/@fluentui/react-positioning/lib/usePositioning.js
  function usePositioning(options) {
    const managerRef = React55.useRef(null);
    const targetRef = React55.useRef(null);
    const overrideTargetRef = React55.useRef(null);
    const containerRef = React55.useRef(null);
    const arrowRef = React55.useRef(null);
    const { enabled = true } = options;
    const resolvePositioningOptions = usePositioningOptions(options);
    const updatePositionManager = React55.useCallback(() => {
      if (managerRef.current) {
        managerRef.current.dispose();
      }
      managerRef.current = null;
      var _overrideTargetRef_current;
      const target = (_overrideTargetRef_current = overrideTargetRef.current) !== null && _overrideTargetRef_current !== void 0 ? _overrideTargetRef_current : targetRef.current;
      if (enabled && canUseDOM2() && target && containerRef.current) {
        managerRef.current = createPositionManager({
          container: containerRef.current,
          target,
          arrow: arrowRef.current,
          ...resolvePositioningOptions(containerRef.current, arrowRef.current)
        });
      }
    }, [
      enabled,
      resolvePositioningOptions
    ]);
    const setOverrideTarget = useEventCallback((target) => {
      overrideTargetRef.current = target;
      updatePositionManager();
    });
    React55.useImperativeHandle(options.positioningRef, () => ({
      updatePosition: () => {
        var _managerRef_current;
        return (_managerRef_current = managerRef.current) === null || _managerRef_current === void 0 ? void 0 : _managerRef_current.updatePosition();
      },
      setTarget: (target) => {
        if (options.target && true) {
          const err = new Error();
          console.warn("Imperative setTarget should not be used at the same time as target option");
          console.warn(err.stack);
        }
        setOverrideTarget(target);
      }
    }), [
      options.target,
      setOverrideTarget
    ]);
    useIsomorphicLayoutEffect(() => {
      var _options_target;
      setOverrideTarget((_options_target = options.target) !== null && _options_target !== void 0 ? _options_target : null);
    }, [
      options.target,
      setOverrideTarget
    ]);
    useIsomorphicLayoutEffect(() => {
      updatePositionManager();
    }, [
      updatePositionManager
    ]);
    if (true) {
      React55.useEffect(() => {
        if (containerRef.current) {
          var _contentNode_ownerDocument;
          const contentNode = containerRef.current;
          const treeWalker = (_contentNode_ownerDocument = contentNode.ownerDocument) === null || _contentNode_ownerDocument === void 0 ? void 0 : _contentNode_ownerDocument.createTreeWalker(contentNode, NodeFilter.SHOW_ELEMENT, {
            acceptNode: hasAutofocusFilter
          });
          while (treeWalker.nextNode()) {
            const node5 = treeWalker.currentNode;
            console.warn("<Popper>:", node5);
            console.warn([
              '<Popper>: ^ this node contains "autoFocus" prop on a React element. This can break the initial',
              "positioning of an element and cause a window jump effect. This issue occurs because React polyfills",
              '"autoFocus" behavior to solve inconsistencies between different browsers:',
              "https://github.com/facebook/react/issues/11851#issuecomment-351787078",
              "\n",
              'However, ".focus()" in this case occurs before any other React effects will be executed',
              "(React.useEffect(), componentDidMount(), etc.) and we can not prevent this behavior. If you really",
              'want to use "autoFocus" please add "position: fixed" to styles of the element that is wrapped by',
              '"Popper".',
              `In general, it's not recommended to use "autoFocus" as it may break accessibility aspects:`,
              "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-autofocus.md",
              "\n",
              'We suggest to use the "trapFocus" prop on Fluent components or a catch "ref" and then use',
              '"ref.current.focus" in React.useEffect():',
              "https://reactjs.org/docs/refs-and-the-dom.html#adding-a-ref-to-a-dom-element"
            ].join(" "));
          }
        }
      }, []);
    }
    const setTarget = useCallbackRef(null, (target) => {
      if (targetRef.current !== target) {
        targetRef.current = target;
        updatePositionManager();
      }
    });
    const setContainer = useCallbackRef(null, (container) => {
      if (containerRef.current !== container) {
        containerRef.current = container;
        updatePositionManager();
      }
    });
    const setArrow = useCallbackRef(null, (arrow2) => {
      if (arrowRef.current !== arrow2) {
        arrowRef.current = arrow2;
        updatePositionManager();
      }
    });
    return {
      targetRef: setTarget,
      containerRef: setContainer,
      arrowRef: setArrow
    };
  }
  function usePositioningOptions(options) {
    const {
      align,
      arrowPadding,
      autoSize: rawAutoSize,
      coverTarget: coverTarget2,
      flipBoundary,
      offset: offset3,
      overflowBoundary,
      pinned,
      position: position4,
      unstable_disableTether: disableTether,
      // eslint-disable-next-line deprecation/deprecation
      positionFixed,
      strategy,
      overflowBoundaryPadding,
      fallbackPositions,
      useTransform
    } = options;
    const { dir } = useFluent();
    const isRtl = dir === "rtl";
    const positionStrategy = (strategy !== null && strategy !== void 0 ? strategy : positionFixed) ? "fixed" : "absolute";
    const autoSize = normalizeAutoSize(rawAutoSize);
    return React55.useCallback((container, arrow2) => {
      const hasScrollableElement = hasScrollParent(container);
      const middleware2 = [
        autoSize && resetMaxSize(autoSize),
        offset3 && offset2(offset3),
        coverTarget2 && coverTarget(),
        !pinned && flip2({
          container,
          flipBoundary,
          hasScrollableElement,
          isRtl,
          fallbackPositions
        }),
        shift2({
          container,
          hasScrollableElement,
          overflowBoundary,
          disableTether,
          overflowBoundaryPadding,
          isRtl
        }),
        autoSize && maxSize(autoSize, {
          container,
          overflowBoundary
        }),
        intersecting(),
        arrow2 && arrow({
          element: arrow2,
          padding: arrowPadding
        }),
        hide({
          strategy: "referenceHidden"
        }),
        hide({
          strategy: "escaped"
        })
      ].filter(Boolean);
      const placement = toFloatingUIPlacement(align, position4, isRtl);
      return {
        placement,
        middleware: middleware2,
        strategy: positionStrategy,
        useTransform
      };
    }, [
      align,
      arrowPadding,
      autoSize,
      coverTarget2,
      disableTether,
      flipBoundary,
      isRtl,
      offset3,
      overflowBoundary,
      pinned,
      position4,
      positionStrategy,
      overflowBoundaryPadding,
      fallbackPositions,
      useTransform
    ]);
  }

  // ../node_modules/@fluentui/react-positioning/lib/usePositioningMouseTarget.js
  var React56 = __toESM(require_react());
  var usePositioningMouseTarget = (initialState2) => {
    const [virtualElement, setVirtualElement] = React56.useState(initialState2);
    const setVirtualMouseTarget = (event) => {
      if (event === void 0 || event === null) {
        setVirtualElement(void 0);
        return;
      }
      let mouseevent;
      if (!(event instanceof MouseEvent)) {
        mouseevent = event.nativeEvent;
      } else {
        mouseevent = event;
      }
      if (!(mouseevent instanceof MouseEvent) && true) {
        console.error("usePositioningMouseTarget should only be used with MouseEvent");
      }
      const contextTarget = createVirtualElementFromClick(mouseevent);
      setVirtualElement(contextTarget);
    };
    return [
      virtualElement,
      setVirtualMouseTarget
    ];
  };

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/Portal.js
  var React61 = __toESM(require_react());

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortal.js
  var React59 = __toESM(require_react());

  // ../node_modules/@fluentui/react-portal/lib/virtualParent/isVirtualElement.js
  function isVirtualElement(element2) {
    return element2 && !!element2._virtual;
  }

  // ../node_modules/@fluentui/react-portal/lib/virtualParent/getParent.js
  function getVirtualParent(child) {
    return isVirtualElement(child) ? child._virtual.parent || null : null;
  }
  function getParent(child, options = {}) {
    var _child;
    if (!child) {
      return null;
    }
    if (!options.skipVirtual) {
      const virtualParent = getVirtualParent(child);
      if (virtualParent) {
        return virtualParent;
      }
    }
    return ((_child = child) === null || _child === void 0 ? void 0 : _child.parentNode) || null;
  }

  // ../node_modules/@fluentui/react-portal/lib/virtualParent/elementContains.js
  function elementContains(parent3, child) {
    if (!parent3 || !child) {
      return false;
    }
    if (parent3 === child) {
      return true;
    } else {
      const set = /* @__PURE__ */ new WeakSet();
      while (child) {
        const nextParent = getParent(child, {
          skipVirtual: set.has(child)
        });
        set.add(child);
        if (nextParent === parent3) {
          return true;
        }
        child = nextParent;
      }
    }
    return false;
  }

  // ../node_modules/@fluentui/react-portal/lib/virtualParent/setVirtualParent.js
  function setVirtualParent(child, parent3) {
    if (!child) {
      return;
    }
    const virtualChild = child;
    if (!virtualChild._virtual) {
      virtualChild._virtual = {};
    }
    virtualChild._virtual.parent = parent3;
  }

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortalMountNode.js
  var React58 = __toESM(require_react());

  // ../node_modules/use-disposable/lib/index.js
  var React57 = __toESM(require_react(), 1);
  var React410 = __toESM(require_react(), 1);
  var React210 = __toESM(require_react(), 1);
  var React310 = __toESM(require_react(), 1);
  var getCurrentOwner = () => React57.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
  var REACT_STRICT_MODE_TYPE = /* @__PURE__ */ Symbol.for("react.strict_mode");
  var useIsStrictMode = () => {
    if (false) {
      return false;
    }
    const isStrictMode = React57.useRef(void 0);
    const reactMajorVersion = React57.useMemo(() => {
      return Number(React57.version.split(".")[0]);
    }, [React57.version]);
    if (isNaN(reactMajorVersion) || reactMajorVersion < 18) {
      return false;
    }
    if (isStrictMode.current === void 0) {
      let currentOwner = getCurrentOwner();
      while (currentOwner && currentOwner.return) {
        currentOwner = currentOwner.return;
        if (currentOwner.type === REACT_STRICT_MODE_TYPE || currentOwner.elementType === REACT_STRICT_MODE_TYPE) {
          isStrictMode.current = true;
        }
      }
    }
    return !!isStrictMode.current;
  };
  var effectSet = /* @__PURE__ */ new WeakSet();
  function useStrictEffect(effect, deps) {
    const currentOwner = getCurrentOwner();
    React210.useEffect(() => {
      if (!effectSet.has(currentOwner)) {
        effectSet.add(currentOwner);
        effect();
        return;
      }
      const dispose = effect();
      return dispose;
    }, deps);
  }
  var memoSet = /* @__PURE__ */ new WeakSet();
  function useStrictMemo(factory, deps) {
    return React310.useMemo(() => {
      const currentOwner = getCurrentOwner();
      if (!memoSet.has(currentOwner)) {
        memoSet.add(currentOwner);
        return null;
      }
      return factory();
    }, deps);
  }
  function useDisposable(factory, deps) {
    var _a5;
    const isStrictMode = useIsStrictMode() && true;
    const useMemo42 = isStrictMode ? useStrictMemo : React410.useMemo;
    const useEffect310 = isStrictMode ? useStrictEffect : React410.useEffect;
    const [disposable, dispose] = (_a5 = useMemo42(() => factory(), deps)) != null ? _a5 : [
      null,
      () => null
    ];
    useEffect310(() => {
      return dispose;
    }, deps);
    return disposable;
  }

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortalMountNodeStyles.styles.js
  var usePortalMountNodeStylesStyles = /* @__PURE__ */ __styles2({
    root: {
      qhf8xq: "f1euv43f",
      Bhzewxz: "f15twtuk",
      oyh7mz: ["f1vgc2s3", "f1e31b4d"],
      j35jbq: ["f1e31b4d", "f1vgc2s3"],
      Bj3rh1h: "f494woh"
    }
  }, {
    d: [".f1euv43f{position:absolute;}", ".f15twtuk{top:0;}", ".f1vgc2s3{left:0;}", ".f1e31b4d{right:0;}", ".f494woh{z-index:1000000;}"]
  });

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortalMountNode.js
  var useInsertionEffect6 = React58["useInsertionEffect"];
  var usePortalMountNode2 = (options) => {
    var _targetDocument;
    const { targetDocument, dir } = useFluent();
    const mountNode = usePortalMountNode();
    const focusVisibleRef = useFocusVisible();
    const classes = usePortalMountNodeStylesStyles();
    const themeClassName = useThemeClassName();
    const className = mergeClasses(themeClassName, classes.root, options.className);
    const targetNode = mountNode !== null && mountNode !== void 0 ? mountNode : (_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.body;
    const element2 = useDisposable(() => {
      if (targetNode === void 0 || options.disabled) {
        return [
          null,
          () => null
        ];
      }
      const newElement = targetNode.ownerDocument.createElement("div");
      targetNode.appendChild(newElement);
      return [
        newElement,
        () => newElement.remove()
      ];
    }, [
      targetNode
    ]);
    if (useInsertionEffect6) {
      useInsertionEffect6(() => {
        if (!element2) {
          return;
        }
        const classesToApply = className.split(" ").filter(Boolean);
        element2.classList.add(...classesToApply);
        element2.setAttribute("dir", dir);
        focusVisibleRef.current = element2;
        return () => {
          element2.classList.remove(...classesToApply);
          element2.removeAttribute("dir");
        };
      }, [
        className,
        dir,
        element2,
        focusVisibleRef
      ]);
    } else {
      React58.useMemo(() => {
        if (!element2) {
          return;
        }
        element2.className = className;
        element2.setAttribute("dir", dir);
        focusVisibleRef.current = element2;
      }, [
        className,
        dir,
        element2,
        focusVisibleRef
      ]);
    }
    return element2;
  };

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortal.js
  function toMountNodeProps(mountNode) {
    if (isHTMLElement(mountNode)) {
      return {
        element: mountNode
      };
    }
    if (typeof mountNode === "object") {
      if (mountNode === null) {
        return {
          element: null
        };
      }
      return mountNode;
    }
    return {};
  }
  var usePortal_unstable = (props) => {
    const { element: element2, className } = toMountNodeProps(props.mountNode);
    const virtualParentRootRef = React59.useRef(null);
    const fallbackElement = usePortalMountNode2({
      disabled: !!element2,
      className
    });
    const state = {
      children: props.children,
      mountNode: element2 !== null && element2 !== void 0 ? element2 : fallbackElement,
      virtualParentRootRef
    };
    React59.useEffect(() => {
      if (state.virtualParentRootRef.current && state.mountNode) {
        setVirtualParent(state.mountNode, state.virtualParentRootRef.current);
      }
      return () => {
        if (state.mountNode) {
          setVirtualParent(state.mountNode, void 0);
        }
      };
    }, [
      state.virtualParentRootRef,
      state.mountNode
    ]);
    return state;
  };

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/renderPortal.js
  var ReactDOM = __toESM(require_react_dom());
  var React60 = __toESM(require_react());
  var renderPortal_unstable = (state) => {
    return /* @__PURE__ */ React60.createElement("span", {
      hidden: true,
      ref: state.virtualParentRootRef
    }, state.mountNode && /* @__PURE__ */ ReactDOM.createPortal(state.children, state.mountNode));
  };

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/Portal.js
  var Portal = (props) => {
    const state = usePortal_unstable(props);
    return renderPortal_unstable(state);
  };
  Portal.displayName = "Portal";

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverSurface/PopoverSurface.js
  var React63 = __toESM(require_react());

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverSurface/usePopoverSurface.js
  var React62 = __toESM(require_react());

  // ../node_modules/@fluentui/react-popover/lib/popoverContext.js
  var PopoverContext = createContext14(void 0);
  var popoverContextDefaultValue = {
    open: false,
    setOpen: () => null,
    toggleOpen: () => null,
    triggerRef: {
      current: null
    },
    contentRef: {
      current: null
    },
    arrowRef: {
      current: null
    },
    openOnContext: false,
    openOnHover: false,
    size: "medium",
    trapFocus: false,
    inline: false
  };
  var PopoverProvider = PopoverContext.Provider;
  var usePopoverContext_unstable = (selector) => useContextSelector(PopoverContext, (ctx = popoverContextDefaultValue) => selector(ctx));

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverSurface/usePopoverSurface.js
  var usePopoverSurface_unstable = (props, ref) => {
    const contentRef = usePopoverContext_unstable((context) => context.contentRef);
    const openOnHover = usePopoverContext_unstable((context) => context.openOnHover);
    const setOpen = usePopoverContext_unstable((context) => context.setOpen);
    const mountNode = usePopoverContext_unstable((context) => context.mountNode);
    const arrowRef = usePopoverContext_unstable((context) => context.arrowRef);
    const size3 = usePopoverContext_unstable((context) => context.size);
    const withArrow = usePopoverContext_unstable((context) => context.withArrow);
    const appearance = usePopoverContext_unstable((context) => context.appearance);
    const trapFocus = usePopoverContext_unstable((context) => context.trapFocus);
    const inertTrapFocus = usePopoverContext_unstable((context) => context.inertTrapFocus);
    const inline2 = usePopoverContext_unstable((context) => context.inline);
    const { modalAttributes } = useModalAttributes({
      trapFocus,
      legacyTrapFocus: !inertTrapFocus,
      alwaysFocusable: !trapFocus
    });
    const state = {
      inline: inline2,
      appearance,
      withArrow,
      size: size3,
      arrowRef,
      mountNode,
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref: useMergedRefs(ref, contentRef),
        role: trapFocus ? "dialog" : "group",
        "aria-modal": trapFocus ? true : void 0,
        ...modalAttributes,
        ...props
      }), {
        elementType: "div"
      })
    };
    const { onMouseEnter: onMouseEnterOriginal, onMouseLeave: onMouseLeaveOriginal, onKeyDown: onKeyDownOriginal } = state.root;
    state.root.onMouseEnter = (e3) => {
      var _onMouseEnterOriginal;
      if (openOnHover) {
        setOpen(e3, true);
      }
      (_onMouseEnterOriginal = onMouseEnterOriginal) === null || _onMouseEnterOriginal === void 0 ? void 0 : _onMouseEnterOriginal(e3);
    };
    state.root.onMouseLeave = (e3) => {
      var _onMouseLeaveOriginal;
      if (openOnHover) {
        setOpen(e3, false);
      }
      (_onMouseLeaveOriginal = onMouseLeaveOriginal) === null || _onMouseLeaveOriginal === void 0 ? void 0 : _onMouseLeaveOriginal(e3);
    };
    state.root.onKeyDown = (e3) => {
      var _contentRef_current, _onKeyDownOriginal;
      if (e3.key === "Escape" && ((_contentRef_current = contentRef.current) === null || _contentRef_current === void 0 ? void 0 : _contentRef_current.contains(e3.target))) {
        e3.preventDefault();
        setOpen(e3, false);
      }
      (_onKeyDownOriginal = onKeyDownOriginal) === null || _onKeyDownOriginal === void 0 ? void 0 : _onKeyDownOriginal(e3);
    };
    return state;
  };

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverSurface/renderPopoverSurface.js
  var renderPopoverSurface_unstable = (state) => {
    assertSlots(state);
    const surface = /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.withArrow && /* @__PURE__ */ jsx("div", {
          ref: state.arrowRef,
          className: state.arrowClassName
        }),
        state.root.children
      ]
    });
    if (state.inline) {
      return surface;
    }
    return /* @__PURE__ */ jsx(Portal, {
      mountNode: state.mountNode,
      children: surface
    });
  };

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverSurface/usePopoverSurfaceStyles.styles.js
  var popoverSurfaceClassNames = {
    root: "fui-PopoverSurface"
  };
  var arrowHeights = {
    small: 6,
    medium: 8,
    large: 8
  };
  var useStyles4 = /* @__PURE__ */ __styles2({
    root: {
      sj55zd: "f19n0e5",
      De3pzq: "fxugw4r",
      E5pizo: "f1hg901r",
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      B4j52fo: "f5ogflp",
      Bekrc4i: ["f1hqa2wf", "finvdd3"],
      Bn0qgzm: "f1f09k3d",
      ibv6hh: ["finvdd3", "f1hqa2wf"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi",
      B93otf3: "f18k4bn6",
      vin17d: "fo1kyvf",
      Ezkn3b: "fetxo7e",
      ex8oj8: "fmm77a6",
      Bksk4gw: "f12t24nk",
      Bc5phfd: "f1babd7",
      cbiifc: "f1jgo889",
      fyiq5g: "f1ij1pew",
      Bqc19t1: "f1gu8pa9",
      Eet2gb: "fhfnl4n",
      Bhl7k63: "fk8tkmz",
      Bv12yb3: "f3n0535",
      z0t1cu: "fi19xcv",
      Bks05zx: "f1mzajhk",
      Bvtglag: "fjp4h9y"
    },
    inverted: {
      De3pzq: "fg3r6xk",
      sj55zd: "fonrgv7"
    },
    brand: {
      De3pzq: "ffp7eso",
      sj55zd: "f1phragk"
    },
    smallPadding: {
      z8tnut: "f1kcqot9",
      z189sj: ["f11qrl6u", "fjlbh76"],
      Byoj8tv: "fpe6lb7",
      uwmqm3: ["fjlbh76", "f11qrl6u"]
    },
    mediumPadding: {
      z8tnut: "fqag9an",
      z189sj: ["f1gbmcue", "f1rh9g5y"],
      Byoj8tv: "fp67ikv",
      uwmqm3: ["f1rh9g5y", "f1gbmcue"]
    },
    largePadding: {
      z8tnut: "fc7z3ec",
      z189sj: ["fat0sn4", "fekwl8i"],
      Byoj8tv: "fe2my4m",
      uwmqm3: ["fekwl8i", "fat0sn4"]
    },
    smallArrow: {
      a9b677: "f1ekdpwm",
      Bqenvij: "f83vc9z"
    },
    mediumLargeArrow: {
      a9b677: "f1kmc0fn",
      Bqenvij: "fb6lvc5"
    },
    arrow: {
      qhf8xq: "f1euv43f",
      De3pzq: "f1u2r49w",
      Bcdw1i0: "fd7fpy0",
      Bj3rh1h: "f1bsuimh",
      Ftih45: "f1wl9k8s",
      B1puzpu: "f1wkw4r9",
      Brfgrao: "f1j7ml58",
      Bcvre1j: "fyl8oag",
      Ccq8qp: "frdoeuz",
      Baz25je: "fb81m9q",
      cmx5o7: "f1ljr5q2",
      B4f6apu: "fyfemzf",
      m598lv: "focyt6c",
      Bk5zm6e: "fnhxbxj",
      y0oebl: "fdw6hkg",
      qa3bma: "f11yjt3y",
      Bqjgrrk: "f1172wan",
      Budzafs: ["f9e5op9", "f112wvtl"],
      Hv9wc6: ["ftj5xct", "fyavhwi"],
      hl6cv3: "f1773hnp",
      Bh2vraf: "f1n8855c",
      yayu3t: "f1v7783n",
      wedwtw: "fsw6im5",
      rhl9o9: "fh2hsk5",
      Bu8t5uz: "f159pzir",
      B6q6orb: "f11yvu4",
      Bwwlvwl: "fm1ycve"
    }
  }, {
    d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1hg901r{box-shadow:var(--shadow16);}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f5ogflp{border-top-width:1px;}", ".f1hqa2wf{border-right-width:1px;}", ".finvdd3{border-left-width:1px;}", ".f1f09k3d{border-bottom-width:1px;}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f18k4bn6{animation-composition:accumulate;}", ".fo1kyvf{animation-duration:var(--durationSlower);}", ".fetxo7e{animation-timing-function:var(--curveDecelerateMid);}", ".fmm77a6{--slide-distance-x:0px;}", ".f12t24nk{--slide-distance-y:10px;}", ".f1babd7[data-popper-placement^=right]{--slide-distance-x:-10px;}", ".f1jgo889[data-popper-placement^=right]{--slide-distance-y:0px;}", ".f1ij1pew[data-popper-placement^=bottom]{--slide-distance-x:0px;}", ".f1gu8pa9[data-popper-placement^=bottom]{--slide-distance-y:-10px;}", ".fhfnl4n[data-popper-placement^=left]{--slide-distance-x:10px;}", ".fk8tkmz[data-popper-placement^=left]{--slide-distance-y:0px;}", ".f3n0535{animation-name:f5j8bii,fld5wjx;}", ".fg3r6xk{background-color:var(--colorNeutralBackgroundStatic);}", ".fonrgv7{color:var(--colorNeutralForegroundStaticInverted);}", ".ffp7eso{background-color:var(--colorBrandBackground);}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".f1kcqot9{padding-top:12px;}", ".f11qrl6u{padding-right:12px;}", ".fjlbh76{padding-left:12px;}", ".fpe6lb7{padding-bottom:12px;}", ".fqag9an{padding-top:16px;}", ".f1gbmcue{padding-right:16px;}", ".f1rh9g5y{padding-left:16px;}", ".fp67ikv{padding-bottom:16px;}", ".fc7z3ec{padding-top:20px;}", ".fat0sn4{padding-right:20px;}", ".fekwl8i{padding-left:20px;}", ".fe2my4m{padding-bottom:20px;}", ".f1ekdpwm{width:8.484px;}", ".f83vc9z{height:8.484px;}", ".f1kmc0fn{width:11.312px;}", ".fb6lvc5{height:11.312px;}", ".f1euv43f{position:absolute;}", ".f1u2r49w{background-color:inherit;}", ".fd7fpy0{visibility:hidden;}", ".f1bsuimh{z-index:-1;}", '.f1wl9k8s::before{content:"";}', ".f1wkw4r9::before{visibility:visible;}", ".f1j7ml58::before{position:absolute;}", ".fyl8oag::before{box-sizing:border-box;}", ".frdoeuz::before{width:inherit;}", ".fb81m9q::before{height:inherit;}", ".f1ljr5q2::before{background-color:inherit;}", ".fyfemzf::before{border-right-width:1px;}", ".focyt6c::before{border-right-style:solid;}", ".fnhxbxj::before{border-right-color:var(--colorTransparentStroke);}", ".fdw6hkg::before{border-bottom-width:1px;}", ".f11yjt3y::before{border-bottom-style:solid;}", ".f1172wan::before{border-bottom-color:var(--colorTransparentStroke);}", ".f9e5op9::before{border-bottom-right-radius:var(--borderRadiusSmall);}", ".f112wvtl::before{border-bottom-left-radius:var(--borderRadiusSmall);}", ".ftj5xct::before{transform:rotate(var(--angle)) translate(0, 50%) rotate(45deg);}", ".fyavhwi::before{transform:rotate(var(--angle)) translate(0, 50%) rotate(-45deg);}", '[data-popper-placement^="top"] .f1773hnp{bottom:-1px;}', '[data-popper-placement^="top"] .f1n8855c{--angle:0;}', '[data-popper-placement^="right"] .f1v7783n{left:-1px;}', '[data-popper-placement^="right"] .fsw6im5{--angle:90deg;}', '[data-popper-placement^="bottom"] .fh2hsk5{top:-1px;}', '[data-popper-placement^="bottom"] .f159pzir{--angle:180deg;}', '[data-popper-placement^="left"] .f11yvu4{right:-1px;}', '[data-popper-placement^="left"] .fm1ycve{--angle:270deg;}'],
    k: ["@keyframes f5j8bii{from{opacity:0;}to{opacity:1;}}", "@keyframes fld5wjx{from{transform:translate(var(--slide-distance-x), var(--slide-distance-y));}}"],
    m: [["@media (prefers-reduced-motion){.fi19xcv[data-popper-placement]{animation-duration:1ms;}}", {
      m: "(prefers-reduced-motion)"
    }], ["@media (prefers-reduced-motion){.f1mzajhk[data-popper-placement]{animation-name:f5j8bii;}}", {
      m: "(prefers-reduced-motion)"
    }]],
    t: ["@supports not (animation-composition: accumulate){.fjp4h9y[data-popper-placement]{animation-name:f5j8bii;}}"]
  });
  var usePopoverSurfaceStyles_unstable = (state) => {
    const styles4 = useStyles4();
    state.root.className = mergeClasses(popoverSurfaceClassNames.root, styles4.root, state.size === "small" && styles4.smallPadding, state.size === "medium" && styles4.mediumPadding, state.size === "large" && styles4.largePadding, state.appearance === "inverted" && styles4.inverted, state.appearance === "brand" && styles4.brand, state.root.className);
    state.arrowClassName = mergeClasses(styles4.arrow, state.size === "small" ? styles4.smallArrow : styles4.mediumLargeArrow);
    return state;
  };

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverSurface/PopoverSurface.js
  var PopoverSurface = /* @__PURE__ */ React63.forwardRef((props, ref) => {
    const state = usePopoverSurface_unstable(props, ref);
    usePopoverSurfaceStyles_unstable(state);
    useCustomStyleHook("usePopoverSurfaceStyles_unstable")(state);
    return renderPopoverSurface_unstable(state);
  });
  PopoverSurface.displayName = "PopoverSurface";

  // ../node_modules/@fluentui/react-popover/lib/components/Popover/constants.js
  var popoverSurfaceBorderRadius = 4;

  // ../node_modules/@fluentui/react-popover/lib/components/Popover/usePopover.js
  var usePopover_unstable = (props) => {
    const [contextTarget, setContextTarget] = usePositioningMouseTarget();
    const initialState2 = {
      size: "medium",
      contextTarget,
      setContextTarget,
      ...props
    };
    const children = React64.Children.toArray(props.children);
    if (true) {
      if (children.length === 0) {
        console.warn("Popover must contain at least one child");
      }
      if (children.length > 2) {
        console.warn("Popover must contain at most two children");
      }
    }
    let popoverTrigger = void 0;
    let popoverSurface = void 0;
    if (children.length === 2) {
      popoverTrigger = children[0];
      popoverSurface = children[1];
    } else if (children.length === 1) {
      popoverSurface = children[0];
    }
    const [open, setOpenState] = useOpenState(initialState2);
    const setOpenTimeoutRef = React64.useRef(0);
    const setOpen = useEventCallback((e3, shouldOpen) => {
      clearTimeout(setOpenTimeoutRef.current);
      if (!(e3 instanceof Event) && e3.persist) {
        e3.persist();
      }
      if (e3.type === "mouseleave") {
        var _props_mouseLeaveDelay;
        setOpenTimeoutRef.current = setTimeout(() => {
          setOpenState(e3, shouldOpen);
        }, (_props_mouseLeaveDelay = props.mouseLeaveDelay) !== null && _props_mouseLeaveDelay !== void 0 ? _props_mouseLeaveDelay : 500);
      } else {
        setOpenState(e3, shouldOpen);
      }
    });
    React64.useEffect(() => {
      return () => {
        clearTimeout(setOpenTimeoutRef.current);
      };
    }, []);
    const toggleOpen = React64.useCallback((e3) => {
      setOpen(e3, !open);
    }, [
      setOpen,
      open
    ]);
    const positioningRefs = usePopoverRefs(initialState2);
    const { targetDocument } = useFluent();
    var _props_closeOnIframeFocus;
    useOnClickOutside({
      contains: elementContains,
      element: targetDocument,
      callback: (ev) => setOpen(ev, false),
      refs: [
        positioningRefs.triggerRef,
        positioningRefs.contentRef
      ],
      disabled: !open,
      disabledFocusOnIframe: !((_props_closeOnIframeFocus = props.closeOnIframeFocus) !== null && _props_closeOnIframeFocus !== void 0 ? _props_closeOnIframeFocus : true)
    });
    const closeOnScroll = initialState2.openOnContext || initialState2.closeOnScroll;
    useOnScrollOutside({
      contains: elementContains,
      element: targetDocument,
      callback: (ev) => setOpen(ev, false),
      refs: [
        positioningRefs.triggerRef,
        positioningRefs.contentRef
      ],
      disabled: !open || !closeOnScroll
    });
    const { findFirstFocusable } = useFocusFinders();
    React64.useEffect(() => {
      if (props.unstable_disableAutoFocus) {
        return;
      }
      if (open && positioningRefs.contentRef.current) {
        var _firstFocusable;
        var _positioningRefs_contentRef_current_getAttribute;
        const containerTabIndex = (_positioningRefs_contentRef_current_getAttribute = positioningRefs.contentRef.current.getAttribute("tabIndex")) !== null && _positioningRefs_contentRef_current_getAttribute !== void 0 ? _positioningRefs_contentRef_current_getAttribute : void 0;
        const firstFocusable = isNaN(containerTabIndex) ? findFirstFocusable(positioningRefs.contentRef.current) : positioningRefs.contentRef.current;
        (_firstFocusable = firstFocusable) === null || _firstFocusable === void 0 ? void 0 : _firstFocusable.focus();
      }
    }, [
      findFirstFocusable,
      open,
      positioningRefs.contentRef,
      props.unstable_disableAutoFocus
    ]);
    var _props_inertTrapFocus, _props_inline;
    return {
      ...initialState2,
      ...positioningRefs,
      // eslint-disable-next-line deprecation/deprecation
      inertTrapFocus: (_props_inertTrapFocus = props.inertTrapFocus) !== null && _props_inertTrapFocus !== void 0 ? _props_inertTrapFocus : props.legacyTrapFocus === void 0 ? false : !props.legacyTrapFocus,
      popoverTrigger,
      popoverSurface,
      open,
      setOpen,
      toggleOpen,
      setContextTarget,
      contextTarget,
      inline: (_props_inline = props.inline) !== null && _props_inline !== void 0 ? _props_inline : false
    };
  };
  function useOpenState(state) {
    const onOpenChange = useEventCallback((e3, data) => {
      var _state_onOpenChange, _state2;
      return (_state_onOpenChange = (_state2 = state).onOpenChange) === null || _state_onOpenChange === void 0 ? void 0 : _state_onOpenChange.call(_state2, e3, data);
    });
    const [open, setOpenState] = useControllableState({
      state: state.open,
      defaultState: state.defaultOpen,
      initialState: false
    });
    state.open = open !== void 0 ? open : state.open;
    const setContextTarget = state.setContextTarget;
    const setOpen = React64.useCallback((e3, shouldOpen) => {
      var _onOpenChange;
      if (shouldOpen && e3.type === "contextmenu") {
        setContextTarget(e3);
      }
      if (!shouldOpen) {
        setContextTarget(void 0);
      }
      setOpenState(shouldOpen);
      (_onOpenChange = onOpenChange) === null || _onOpenChange === void 0 ? void 0 : _onOpenChange(e3, {
        open: shouldOpen
      });
    }, [
      setOpenState,
      onOpenChange,
      setContextTarget
    ]);
    return [
      open,
      setOpen
    ];
  }
  function usePopoverRefs(state) {
    const positioningOptions = {
      position: "above",
      align: "center",
      arrowPadding: 2 * popoverSurfaceBorderRadius,
      target: state.openOnContext ? state.contextTarget : void 0,
      ...resolvePositioningShorthand(state.positioning)
    };
    if (positioningOptions.coverTarget) {
      state.withArrow = false;
    }
    if (state.withArrow) {
      positioningOptions.offset = mergeArrowOffset(positioningOptions.offset, arrowHeights[state.size]);
    }
    const { targetRef: triggerRef, containerRef: contentRef, arrowRef } = usePositioning(positioningOptions);
    return {
      triggerRef,
      contentRef,
      arrowRef
    };
  }

  // ../node_modules/@fluentui/react-popover/lib/components/Popover/renderPopover.js
  var React65 = __toESM(require_react());
  var renderPopover_unstable = (state) => {
    const { appearance, arrowRef, contentRef, inline: inline2, mountNode, open, openOnContext, openOnHover, setOpen, size: size3, toggleOpen, trapFocus, triggerRef, withArrow, inertTrapFocus } = state;
    return /* @__PURE__ */ React65.createElement(PopoverContext.Provider, {
      value: {
        appearance,
        arrowRef,
        contentRef,
        inline: inline2,
        mountNode,
        open,
        openOnContext,
        openOnHover,
        setOpen,
        toggleOpen,
        triggerRef,
        size: size3,
        trapFocus,
        inertTrapFocus,
        withArrow
      }
    }, state.popoverTrigger, state.open && state.popoverSurface);
  };

  // ../node_modules/@fluentui/react-popover/lib/components/Popover/Popover.js
  var Popover = (props) => {
    const state = usePopover_unstable(props);
    return renderPopover_unstable(state);
  };
  Popover.displayName = "Popover";

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverTrigger/PopoverTrigger.js
  var React68 = __toESM(require_react());

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverTrigger/usePopoverTrigger.js
  var React67 = __toESM(require_react());
  var usePopoverTrigger_unstable = (props) => {
    var _child, _child1, _child2, _child3, _child4, _child5, _child6, _child7, _child8, _child9, _child10;
    const { children, disableButtonEnhancement = false } = props;
    const child = getTriggerChild(children);
    const open = usePopoverContext_unstable((context) => context.open);
    const setOpen = usePopoverContext_unstable((context) => context.setOpen);
    const toggleOpen = usePopoverContext_unstable((context) => context.toggleOpen);
    const triggerRef = usePopoverContext_unstable((context) => context.triggerRef);
    const openOnHover = usePopoverContext_unstable((context) => context.openOnHover);
    const openOnContext = usePopoverContext_unstable((context) => context.openOnContext);
    const { triggerAttributes } = useModalAttributes();
    const onContextMenu = (e3) => {
      if (openOnContext) {
        e3.preventDefault();
        setOpen(e3, true);
      }
    };
    const onClick = (e3) => {
      if (!openOnContext) {
        toggleOpen(e3);
      }
    };
    const onKeyDown = (e3) => {
      if (e3.key === Escape && open) {
        setOpen(e3, false);
        e3.stopPropagation();
      }
    };
    const onMouseEnter = (e3) => {
      if (openOnHover) {
        setOpen(e3, true);
      }
    };
    const onMouseLeave = (e3) => {
      if (openOnHover) {
        setOpen(e3, false);
      }
    };
    const contextMenuProps = {
      ...triggerAttributes,
      "aria-expanded": `${open}`,
      ...(_child = child) === null || _child === void 0 ? void 0 : _child.props,
      onMouseEnter: useEventCallback(mergeCallbacks((_child1 = child) === null || _child1 === void 0 ? void 0 : _child1.props.onMouseEnter, onMouseEnter)),
      onMouseLeave: useEventCallback(mergeCallbacks((_child2 = child) === null || _child2 === void 0 ? void 0 : _child2.props.onMouseLeave, onMouseLeave)),
      onContextMenu: useEventCallback(mergeCallbacks((_child3 = child) === null || _child3 === void 0 ? void 0 : _child3.props.onContextMenu, onContextMenu)),
      ref: useMergedRefs(triggerRef, (_child4 = child) === null || _child4 === void 0 ? void 0 : _child4.ref)
    };
    const triggerChildProps = {
      ...contextMenuProps,
      onClick: useEventCallback(mergeCallbacks((_child5 = child) === null || _child5 === void 0 ? void 0 : _child5.props.onClick, onClick)),
      onKeyDown: useEventCallback(mergeCallbacks((_child6 = child) === null || _child6 === void 0 ? void 0 : _child6.props.onKeyDown, onKeyDown))
    };
    const ariaButtonTriggerChildProps = useARIAButtonProps(((_child7 = child) === null || _child7 === void 0 ? void 0 : _child7.type) === "button" || ((_child8 = child) === null || _child8 === void 0 ? void 0 : _child8.type) === "a" ? child.type : "div", triggerChildProps);
    return {
      children: applyTriggerPropsToChildren(props.children, useARIAButtonProps(((_child9 = child) === null || _child9 === void 0 ? void 0 : _child9.type) === "button" || ((_child10 = child) === null || _child10 === void 0 ? void 0 : _child10.type) === "a" ? child.type : "div", openOnContext ? contextMenuProps : disableButtonEnhancement ? triggerChildProps : ariaButtonTriggerChildProps))
    };
  };

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverTrigger/renderPopoverTrigger.js
  var renderPopoverTrigger_unstable = (state) => {
    return state.children;
  };

  // ../node_modules/@fluentui/react-popover/lib/components/PopoverTrigger/PopoverTrigger.js
  var PopoverTrigger = (props) => {
    const state = usePopoverTrigger_unstable(props);
    return renderPopoverTrigger_unstable(state);
  };
  PopoverTrigger.displayName = "PopoverTrigger";
  PopoverTrigger.isFluentTriggerComponent = true;

  // ../node_modules/@fluentui/react-button/lib/components/Button/Button.js
  var React71 = __toESM(require_react());

  // ../node_modules/@fluentui/react-button/lib/components/Button/renderButton.js
  var renderButton_unstable = (state) => {
    assertSlots(state);
    const { iconOnly, iconPosition } = state;
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        iconPosition !== "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {}),
        !iconOnly && state.root.children,
        iconPosition === "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/useButton.js
  var React70 = __toESM(require_react());

  // ../node_modules/@fluentui/react-button/lib/contexts/ButtonContext.js
  var React69 = __toESM(require_react());
  var buttonContext = React69.createContext(void 0);
  var buttonContextDefaultValue = {};
  var ButtonContextProvider = buttonContext.Provider;
  var _React_useContext2;
  var useButtonContext = () => (_React_useContext2 = React69.useContext(buttonContext)) !== null && _React_useContext2 !== void 0 ? _React_useContext2 : buttonContextDefaultValue;

  // ../node_modules/@fluentui/react-button/lib/components/Button/useButton.js
  var useButton_unstable = (props, ref) => {
    var _iconShorthand;
    const { size: contextSize } = useButtonContext();
    const { appearance = "secondary", as = "button", disabled = false, disabledFocusable = false, icon, iconPosition = "before", shape = "rounded", size: size3 = contextSize !== null && contextSize !== void 0 ? contextSize : "medium" } = props;
    const iconShorthand = slot_exports.optional(icon, {
      elementType: "span"
    });
    return {
      // Props passed at the top-level
      appearance,
      disabled,
      disabledFocusable,
      iconPosition,
      shape,
      size: size3,
      iconOnly: Boolean(((_iconShorthand = iconShorthand) === null || _iconShorthand === void 0 ? void 0 : _iconShorthand.children) && !props.children),
      components: {
        root: "button",
        icon: "span"
      },
      root: slot_exports.always(getNativeElementProps(as, useARIAButtonShorthand(props, {
        required: true,
        defaultProps: {
          ref,
          type: "button"
        }
      })), {
        elementType: "button"
      }),
      icon: iconShorthand
    };
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/useButtonStyles.styles.js
  var buttonClassNames = {
    root: "fui-Button",
    icon: "fui-Button__icon"
  };
  var useRootBaseClassName = /* @__PURE__ */ __resetStyles2("rlr4yyk", "r1hbzg6e", {
    r: [".rlr4yyk{align-items:center;box-sizing:border-box;display:inline-flex;justify-content:center;text-decoration-line:none;vertical-align:middle;margin:0;overflow:hidden;background-color:var(--colorNeutralBackground1);color:var(--colorNeutralForeground1);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);font-family:var(--fontFamilyBase);outline-style:none;padding:5px var(--spacingHorizontalM);min-width:96px;border-radius:var(--borderRadiusMedium);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);transition-duration:var(--durationFaster);transition-property:background,border,color;transition-timing-function:var(--curveEasyEase);}", ".rlr4yyk:hover{background-color:var(--colorNeutralBackground1Hover);border-color:var(--colorNeutralStroke1Hover);color:var(--colorNeutralForeground1Hover);cursor:pointer;}", ".rlr4yyk:hover:active{background-color:var(--colorNeutralBackground1Pressed);border-color:var(--colorNeutralStroke1Pressed);color:var(--colorNeutralForeground1Pressed);outline-style:none;}", ".rlr4yyk[data-fui-focus-visible]{border-color:var(--colorTransparentStroke);border-radius:var(--borderRadiusMedium);outline:var(--strokeWidthThick) solid var(--colorTransparentStroke);box-shadow:var(--shadow4),0 0 0 2px var(--colorStrokeFocus2);z-index:1;}", ".r1hbzg6e{align-items:center;box-sizing:border-box;display:inline-flex;justify-content:center;text-decoration-line:none;vertical-align:middle;margin:0;overflow:hidden;background-color:var(--colorNeutralBackground1);color:var(--colorNeutralForeground1);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);font-family:var(--fontFamilyBase);outline-style:none;padding:5px var(--spacingHorizontalM);min-width:96px;border-radius:var(--borderRadiusMedium);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);transition-duration:var(--durationFaster);transition-property:background,border,color;transition-timing-function:var(--curveEasyEase);}", ".r1hbzg6e:hover{background-color:var(--colorNeutralBackground1Hover);border-color:var(--colorNeutralStroke1Hover);color:var(--colorNeutralForeground1Hover);cursor:pointer;}", ".r1hbzg6e:hover:active{background-color:var(--colorNeutralBackground1Pressed);border-color:var(--colorNeutralStroke1Pressed);color:var(--colorNeutralForeground1Pressed);outline-style:none;}", ".r1hbzg6e[data-fui-focus-visible]{border-color:var(--colorTransparentStroke);border-radius:var(--borderRadiusMedium);outline:var(--strokeWidthThick) solid var(--colorTransparentStroke);box-shadow:var(--shadow4),0 0 0 2px var(--colorStrokeFocus2);z-index:1;}"],
    s: ["@media screen and (prefers-reduced-motion: reduce){.rlr4yyk{transition-duration:0.01ms;}}", "@media (forced-colors: active){.rlr4yyk:focus{border-color:ButtonText;}.rlr4yyk:hover{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}.rlr4yyk:hover:active{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}}", "@media screen and (prefers-reduced-motion: reduce){.r1hbzg6e{transition-duration:0.01ms;}}", "@media (forced-colors: active){.r1hbzg6e:focus{border-color:ButtonText;}.r1hbzg6e:hover{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}.r1hbzg6e:hover:active{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}}"]
  });
  var useIconBaseClassName = /* @__PURE__ */ __resetStyles2("rywnvv2", null, [".rywnvv2{align-items:center;display:inline-flex;justify-content:center;font-size:20px;height:20px;width:20px;--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}"]);
  var useRootStyles3 = /* @__PURE__ */ __styles2({
    outline: {
      De3pzq: "f1c21dwh",
      Jwef8y: "fjxutwb",
      iro3zm: "fwiml72"
    },
    primary: {
      De3pzq: "ffp7eso",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "f1phragk",
      Jwef8y: "f15wkkf3",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f1rq72xc",
      iro3zm: "fnp9lpt",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1d6v5y2",
      Bsw6fvg: "f1rirnrt",
      Bjwas2f: "f1uu00uk",
      Bn1d65q: ["fkvaka8", "f9a0qzu"],
      Bxeuatn: "f1ux7til",
      n51gp8: ["f9a0qzu", "fkvaka8"],
      Bbusuzp: "f1lkg8j3",
      ycbfsm: "fkc42ay",
      Bqrx1nm: "fq7113v",
      pgvf35: "ff1wgvm",
      Bh7lczh: ["fiob0tu", "f1x4h75k"],
      dpv3f4: "f1j6scgf",
      Bpnjhaq: ["f1x4h75k", "fiob0tu"],
      ze5xyy: "f4xjyn1",
      g2kj27: "fbgcvur",
      Bf756sw: "f1ks1yx8",
      Bow2dr7: ["f1o6qegi", "fmxjhhp"],
      Bvhedfk: "fcnxywj",
      Gye4lf: ["fmxjhhp", "f1o6qegi"],
      pc6evw: "f9ddjv3"
    },
    secondary: {},
    subtle: {
      De3pzq: "fhovq9v",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "fkfq4zb",
      Jwef8y: "f1t94bn6",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "fnwyq0v",
      Bk3fhr4: "ft1hn21",
      Bmfj8id: "fuxngvv",
      Bbdnnc7: "fy5bs14",
      iro3zm: "fsv2rcd",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1omzyqd",
      em6i61: "f1dfjoow",
      vm6p8p: "f1j98vj9",
      x3br3k: "fj8yq94",
      ze5xyy: "f4xjyn1",
      Bx3q9su: "f1et0tmh",
      pc6evw: "f9ddjv3",
      xd2cci: "f1wi8ngl"
    },
    transparent: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "fkfq4zb",
      Jwef8y: "fjxutwb",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f139oj5f",
      Bk3fhr4: "ft1hn21",
      Bmfj8id: "fuxngvv",
      iro3zm: "fwiml72",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1fg1p5m",
      em6i61: "f1dfjoow",
      vm6p8p: "f1j98vj9",
      Bqrx1nm: "fwa4z56",
      pgvf35: "fe5wyld",
      Bh7lczh: ["ffrv2ww", "f9dg1pr"],
      dpv3f4: "f1rnfj6r",
      Bpnjhaq: ["f9dg1pr", "ffrv2ww"],
      ze5xyy: "f4xjyn1",
      g2kj27: "f19ot1t3",
      Bf756sw: "fjaevkr",
      Bow2dr7: ["f1yrt24w", "f11cxmw1"],
      Bvhedfk: "f1lym4af",
      Gye4lf: ["f11cxmw1", "f1yrt24w"],
      pc6evw: "f9ddjv3"
    },
    circular: {
      Bbmb7ep: ["f8fbkgy", "f1nfllo7"],
      Beyfa6y: ["f1nfllo7", "f8fbkgy"],
      B7oj6ja: ["f1djnp8u", "f1s8kh49"],
      Btl43ni: ["f1s8kh49", "f1djnp8u"]
    },
    rounded: {},
    square: {
      Bbmb7ep: ["fzi6hpg", "fyowgf4"],
      Beyfa6y: ["fyowgf4", "fzi6hpg"],
      B7oj6ja: ["f3fg2lr", "f13av6d4"],
      Btl43ni: ["f13av6d4", "f3fg2lr"]
    },
    small: {
      Bf4jedk: "fh7ncta",
      z8tnut: "f1khb0e9",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f1jnq6q7",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    smallWithIcon: {
      Byoj8tv: "f1brlhvm",
      z8tnut: "f1sl3k7w"
    },
    medium: {},
    large: {
      Bf4jedk: "f14es27b",
      z8tnut: "fp9bwmr",
      z189sj: ["fjodcmx", "fhx4nu"],
      Byoj8tv: "f150uoa4",
      uwmqm3: ["fhx4nu", "fjodcmx"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    },
    largeWithIcon: {
      Byoj8tv: "fy7v416",
      z8tnut: "f1a1bwwz"
    }
  }, {
    d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".ffp7eso{background-color:var(--colorBrandBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".f8fbkgy{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1nfllo7{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1djnp8u{border-top-right-radius:var(--borderRadiusCircular);}", ".f1s8kh49{border-top-left-radius:var(--borderRadiusCircular);}", ".fzi6hpg{border-bottom-right-radius:var(--borderRadiusNone);}", ".fyowgf4{border-bottom-left-radius:var(--borderRadiusNone);}", ".f3fg2lr{border-top-right-radius:var(--borderRadiusNone);}", ".f13av6d4{border-top-left-radius:var(--borderRadiusNone);}", ".fh7ncta{min-width:64px;}", ".f1khb0e9{padding-top:3px;}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f1jnq6q7{padding-bottom:3px;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1brlhvm{padding-bottom:1px;}", ".f1sl3k7w{padding-top:1px;}", ".f14es27b{min-width:96px;}", ".fp9bwmr{padding-top:8px;}", ".fjodcmx{padding-right:var(--spacingHorizontalL);}", ".fhx4nu{padding-left:var(--spacingHorizontalL);}", ".f150uoa4{padding-bottom:8px;}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fy7v416{padding-bottom:7px;}", ".f1a1bwwz{padding-top:7px;}"],
    h: [".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".fwiml72:hover:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f15wkkf3:hover{background-color:var(--colorBrandBackgroundHover);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1rq72xc:hover{color:var(--colorNeutralForegroundOnBrand);}", ".fnp9lpt:hover:active{background-color:var(--colorBrandBackgroundPressed);}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}", ".f1d6v5y2:hover:active{color:var(--colorNeutralForegroundOnBrand);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".ft1hn21:hover .fui-Icon-filled{display:inline;}", ".fuxngvv:hover .fui-Icon-regular{display:none;}", ".fy5bs14:hover .fui-Button__icon{color:var(--colorNeutralForeground2BrandHover);}", ".fsv2rcd:hover:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f1omzyqd:hover:active{color:var(--colorNeutralForeground2Pressed);}", ".f1dfjoow:hover:active .fui-Icon-filled{display:inline;}", ".f1j98vj9:hover:active .fui-Icon-regular{display:none;}", ".fj8yq94:hover:active .fui-Button__icon{color:var(--colorNeutralForeground2BrandPressed);}", ".f139oj5f:hover{color:var(--colorNeutralForeground2BrandHover);}", ".f1fg1p5m:hover:active{color:var(--colorNeutralForeground2BrandPressed);}"],
    m: [["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1uu00uk{border-top-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9a0qzu{border-left-color:HighlightText;}.fkvaka8{border-right-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ux7til{border-bottom-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fq7113v:hover{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.ff1wgvm:hover{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1x4h75k:hover{border-left-color:Highlight;}.fiob0tu:hover{border-right-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1j6scgf:hover{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f4xjyn1:hover{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fbgcvur:hover:active{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ks1yx8:hover:active{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1o6qegi:hover:active{border-right-color:Highlight;}.fmxjhhp:hover:active{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fcnxywj:hover:active{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9ddjv3:hover:active{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1et0tmh:hover .fui-Button__icon{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1wi8ngl:hover:active .fui-Button__icon{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fwa4z56:hover{background-color:var(--colorTransparentBackgroundHover);}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fe5wyld:hover{border-top-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9dg1pr:hover{border-left-color:transparent;}.ffrv2ww:hover{border-right-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rnfj6r:hover{border-bottom-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f19ot1t3:hover:active{background-color:var(--colorTransparentBackgroundHover);}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fjaevkr:hover:active{border-top-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f11cxmw1:hover:active{border-left-color:transparent;}.f1yrt24w:hover:active{border-right-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lym4af:hover:active{border-bottom-color:transparent;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useRootDisabledStyles = /* @__PURE__ */ __styles2({
    base: {
      De3pzq: "f1bg9a2p",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      sj55zd: "f1s2aq7o",
      Bceei9c: "fdrzuqr",
      Jwef8y: "f1falr9n",
      Bgoe8wy: "f12mpcsy",
      Bwzppfd: ["f1gwvigk", "f18rmfxp"],
      oetu4i: "f1jnshp0",
      gg5e9n: ["f18rmfxp", "f1gwvigk"],
      Bi91k9c: "fvgxktp",
      eoavqd: "fphbwmw",
      Bk3fhr4: "f19vpps7",
      Bmfj8id: "fv5swzo",
      iro3zm: "f1t6o4dc",
      b661bw: "f10ztigi",
      Bk6r4ia: ["f1ft5sdu", "f1gzf82w"],
      B9zn80p: "f12zbtn2",
      Bpld233: ["f1gzf82w", "f1ft5sdu"],
      B2d53fq: "fcvwxyo",
      c3iz72: "f8w4c43",
      em6i61: "f1ol4fw6",
      vm6p8p: "f1q1lw4e"
    },
    highContrast: {
      Bsw6fvg: "f4lkoma",
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"],
      Bbusuzp: "f1dcs8yz",
      G867l3: "fjwq6ea",
      gdbnj: ["f1lr3nhc", "f1mbxvi6"],
      mxns5l: "fn5gmvv",
      o3nasb: ["f1mbxvi6", "f1lr3nhc"],
      Bqrx1nm: "f1vmkb5g",
      pgvf35: "f53ppgq",
      Bh7lczh: ["f1663y11", "f80fkiy"],
      dpv3f4: "f18v5270",
      Bpnjhaq: ["f80fkiy", "f1663y11"],
      ze5xyy: "f1kc2mi9",
      g2kj27: "f1y0svfh",
      Bf756sw: "fihuait",
      Bow2dr7: ["fnxhupq", "fyd6l6x"],
      Bvhedfk: "fx507ft",
      Gye4lf: ["fyd6l6x", "fnxhupq"],
      pc6evw: "fb3rf2x"
    },
    outline: {
      De3pzq: "f1c21dwh",
      Jwef8y: "f9ql6rf",
      iro3zm: "f3h1zc4"
    },
    primary: {
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    secondary: {},
    subtle: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "f9ql6rf",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "f3h1zc4",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    transparent: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "f9ql6rf",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "f3h1zc4",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    }
  }, {
    d: [".f1bg9a2p{background-color:var(--colorNeutralBackgroundDisabled);}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}"],
    h: [".f1falr9n:hover{background-color:var(--colorNeutralBackgroundDisabled);}", ".f12mpcsy:hover{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1gwvigk:hover{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f18rmfxp:hover{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f1jnshp0:hover{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fvgxktp:hover{color:var(--colorNeutralForegroundDisabled);}", ".fphbwmw:hover{cursor:not-allowed;}", ".f19vpps7:hover .fui-Icon-filled{display:none;}", ".fv5swzo:hover .fui-Icon-regular{display:inline;}", ".f1t6o4dc:hover:active{background-color:var(--colorNeutralBackgroundDisabled);}", ".f10ztigi:hover:active{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1ft5sdu:hover:active{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f1gzf82w:hover:active{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f12zbtn2:hover:active{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fcvwxyo:hover:active{color:var(--colorNeutralForegroundDisabled);}", ".f8w4c43:hover:active{cursor:not-allowed;}", ".f1ol4fw6:hover:active .fui-Icon-filled{display:none;}", ".f1q1lw4e:hover:active .fui-Icon-regular{display:inline;}", ".f9ql6rf:hover{background-color:var(--colorTransparentBackground);}", ".f3h1zc4:hover:active{background-color:var(--colorTransparentBackground);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}"],
    m: [["@media (forced-colors: active){.f4lkoma{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fjwq6ea:focus{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lr3nhc:focus{border-right-color:GrayText;}.f1mbxvi6:focus{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fn5gmvv:focus{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1vmkb5g:hover{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f53ppgq:hover{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1663y11:hover{border-right-color:GrayText;}.f80fkiy:hover{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f18v5270:hover{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1kc2mi9:hover{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1y0svfh:hover:active{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fihuait:hover:active{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fnxhupq:hover:active{border-right-color:GrayText;}.fyd6l6x:hover:active{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fx507ft:hover:active{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fb3rf2x:hover:active{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useRootFocusStyles = /* @__PURE__ */ __styles2({
    circular: {
      kdpuga: ["fanj13w", "f1gou5sz"],
      Bw81rd7: ["f1gou5sz", "fanj13w"],
      B6xbmo0: ["fulf6x3", "foeb2x"],
      dm238s: ["foeb2x", "fulf6x3"]
    },
    rounded: {},
    square: {
      kdpuga: ["f1ndz5i7", "f1co4qro"],
      Bw81rd7: ["f1co4qro", "f1ndz5i7"],
      B6xbmo0: ["f146y5a9", "f1k2ftg"],
      dm238s: ["f1k2ftg", "f146y5a9"]
    },
    primary: {
      B8q5s1w: "f15my96h",
      Bci5o5g: ["f8yq1e5", "f59w28j"],
      n8qw10: "f1mze7uc",
      Bdrgwmp: ["f59w28j", "f8yq1e5"],
      j6ew2k: "ftbnf46"
    },
    small: {
      kdpuga: ["fg3gtdo", "fwii5mg"],
      Bw81rd7: ["fwii5mg", "fg3gtdo"],
      B6xbmo0: ["f1palphq", "f12nxie7"],
      dm238s: ["f12nxie7", "f1palphq"]
    },
    medium: {},
    large: {
      kdpuga: ["ft3lys4", "f1la4x2g"],
      Bw81rd7: ["f1la4x2g", "ft3lys4"],
      B6xbmo0: ["f156y0zm", "fakimq4"],
      dm238s: ["fakimq4", "f156y0zm"]
    }
  }, {
    d: [".fanj13w[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1gou5sz[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusCircular);}", ".fulf6x3[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusCircular);}", ".foeb2x[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusCircular);}", ".f1ndz5i7[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusNone);}", ".f1co4qro[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusNone);}", ".f146y5a9[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusNone);}", ".f1k2ftg[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusNone);}", ".f15my96h[data-fui-focus-visible]{border-top-color:var(--colorNeutralForegroundOnBrand);}", ".f8yq1e5[data-fui-focus-visible]{border-right-color:var(--colorNeutralForegroundOnBrand);}", ".f59w28j[data-fui-focus-visible]{border-left-color:var(--colorNeutralForegroundOnBrand);}", ".f1mze7uc[data-fui-focus-visible]{border-bottom-color:var(--colorNeutralForegroundOnBrand);}", ".ftbnf46[data-fui-focus-visible]{box-shadow:var(--shadow2),0 0 0 2px var(--colorStrokeFocus2);}", ".fg3gtdo[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusSmall);}", ".fwii5mg[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusSmall);}", ".f1palphq[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusSmall);}", ".f12nxie7[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusSmall);}", ".ft3lys4[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusLarge);}", ".f1la4x2g[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusLarge);}", ".f156y0zm[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusLarge);}", ".fakimq4[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusLarge);}"]
  });
  var useRootIconOnlyStyles = /* @__PURE__ */ __styles2({
    small: {
      z8tnut: "f1sl3k7w",
      z189sj: ["f136y8j8", "f10xn8zz"],
      Byoj8tv: "f1brlhvm",
      uwmqm3: ["f10xn8zz", "f136y8j8"],
      Bf4jedk: "f17fgpbq",
      B2u0y6b: "f1jt17bm"
    },
    medium: {
      z8tnut: "f1sbtcvk",
      z189sj: ["fwiuce9", "f15vdbe4"],
      Byoj8tv: "fdghr9",
      uwmqm3: ["f15vdbe4", "fwiuce9"],
      Bf4jedk: "fwbmr0d",
      B2u0y6b: "f44c6la"
    },
    large: {
      z8tnut: "f1a1bwwz",
      z189sj: ["f18k1jr3", "f1rtp3s9"],
      Byoj8tv: "fy7v416",
      uwmqm3: ["f1rtp3s9", "f18k1jr3"],
      Bf4jedk: "f12clzc2",
      B2u0y6b: "fjy1crr"
    }
  }, {
    d: [".f1sl3k7w{padding-top:1px;}", ".f136y8j8{padding-right:1px;}", ".f10xn8zz{padding-left:1px;}", ".f1brlhvm{padding-bottom:1px;}", ".f17fgpbq{min-width:24px;}", ".f1jt17bm{max-width:24px;}", ".f1sbtcvk{padding-top:5px;}", ".fwiuce9{padding-right:5px;}", ".f15vdbe4{padding-left:5px;}", ".fdghr9{padding-bottom:5px;}", ".fwbmr0d{min-width:32px;}", ".f44c6la{max-width:32px;}", ".f1a1bwwz{padding-top:7px;}", ".f18k1jr3{padding-right:7px;}", ".f1rtp3s9{padding-left:7px;}", ".fy7v416{padding-bottom:7px;}", ".f12clzc2{min-width:40px;}", ".fjy1crr{max-width:40px;}"]
  });
  var useIconStyles2 = /* @__PURE__ */ __styles2({
    small: {
      Be2twd7: "fe5j1ua",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3",
      Bqrlyyl: "fbaiahx"
    },
    medium: {},
    large: {
      Be2twd7: "f1rt2boy",
      Bqenvij: "frvgh55",
      a9b677: "fq4mcun",
      Bqrlyyl: "f1exjqw5"
    },
    before: {
      t21cq0: ["f1nizpg2", "f1a695kz"]
    },
    after: {
      Frg6f3: ["f1a695kz", "f1nizpg2"]
    }
  }, {
    d: [".fe5j1ua{font-size:20px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".fbaiahx{--fui-Button__icon--spacing:var(--spacingHorizontalXS);}", ".f1rt2boy{font-size:24px;}", ".frvgh55{height:24px;}", ".fq4mcun{width:24px;}", ".f1exjqw5{--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}", ".f1nizpg2{margin-right:var(--fui-Button__icon--spacing);}", ".f1a695kz{margin-left:var(--fui-Button__icon--spacing);}"]
  });
  var useButtonStyles_unstable = (state) => {
    const rootBaseClassName = useRootBaseClassName();
    const iconBaseClassName = useIconBaseClassName();
    const rootStyles = useRootStyles3();
    const rootDisabledStyles = useRootDisabledStyles();
    const rootFocusStyles = useRootFocusStyles();
    const rootIconOnlyStyles = useRootIconOnlyStyles();
    const iconStyles = useIconStyles2();
    const {
      appearance,
      disabled,
      disabledFocusable,
      icon,
      iconOnly,
      iconPosition,
      shape,
      size: size3
    } = state;
    state.root.className = mergeClasses(
      buttonClassNames.root,
      rootBaseClassName,
      appearance && rootStyles[appearance],
      rootStyles[size3],
      icon && size3 === "small" && rootStyles.smallWithIcon,
      icon && size3 === "large" && rootStyles.largeWithIcon,
      rootStyles[shape],
      // Disabled styles
      (disabled || disabledFocusable) && rootDisabledStyles.base,
      (disabled || disabledFocusable) && rootDisabledStyles.highContrast,
      appearance && (disabled || disabledFocusable) && rootDisabledStyles[appearance],
      // Focus styles
      appearance === "primary" && rootFocusStyles.primary,
      rootFocusStyles[size3],
      rootFocusStyles[shape],
      // Icon-only styles
      iconOnly && rootIconOnlyStyles[size3],
      // User provided class name
      state.root.className
    );
    if (state.icon) {
      state.icon.className = mergeClasses(buttonClassNames.icon, iconBaseClassName, !!state.root.children && iconStyles[iconPosition], iconStyles[size3], state.icon.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/Button.js
  var Button = /* @__PURE__ */ React71.forwardRef((props, ref) => {
    const state = useButton_unstable(props, ref);
    useButtonStyles_unstable(state);
    useCustomStyleHook("useButtonStyles_unstable")(state);
    return renderButton_unstable(state);
  });
  Button.displayName = "Button";

  // ../node_modules/@fluentui/react-button/lib/components/MenuButton/MenuButton.js
  var React73 = __toESM(require_react());

  // ../node_modules/@fluentui/react-button/lib/components/MenuButton/renderMenuButton.js
  var renderMenuButton_unstable = (state) => {
    var _icon;
    assertSlots(state);
    const { icon, iconOnly } = state;
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.icon && /* @__PURE__ */ jsx(state.icon, {}),
        !iconOnly && state.root.children,
        (!iconOnly || !((_icon = icon) === null || _icon === void 0 ? void 0 : _icon.children)) && state.menuIcon && /* @__PURE__ */ jsx(state.menuIcon, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-button/lib/components/MenuButton/useMenuButton.js
  var React72 = __toESM(require_react());
  var useMenuButton_unstable = ({ menuIcon, ...props }, ref) => {
    const buttonState = useButton_unstable(props, ref);
    var _props_ariaexpanded;
    buttonState.root["aria-expanded"] = (_props_ariaexpanded = props["aria-expanded"]) !== null && _props_ariaexpanded !== void 0 ? _props_ariaexpanded : false;
    return {
      // Button state
      ...buttonState,
      // State calculated from a set of props
      iconOnly: Boolean(!props.children),
      // Slots definition
      components: {
        root: "button",
        icon: "span",
        menuIcon: "span"
      },
      menuIcon: slot_exports.optional(menuIcon, {
        defaultProps: {
          children: /* @__PURE__ */ React72.createElement(ChevronDownRegular, null)
        },
        renderByDefault: true,
        elementType: "span"
      })
    };
  };

  // ../node_modules/@fluentui/react-button/lib/components/MenuButton/useMenuButtonStyles.styles.js
  var menuButtonClassNames = {
    root: "fui-MenuButton",
    icon: "fui-MenuButton__icon",
    menuIcon: "fui-MenuButton__menuIcon"
  };
  var useRootExpandedStyles = /* @__PURE__ */ __styles2({
    base: {
      D0sxk3: "fxoiby5",
      t6yez3: "f15q0o9g"
    },
    outline: {
      g2u3we: "f1ly1fcm",
      h3c5rm: ["fi8bssc", "fj6btzu"],
      B9xav0g: "f1s9tnsa",
      zhjwy3: ["fj6btzu", "fi8bssc"],
      B4j52fo: "fgx37oo",
      Bekrc4i: ["f130t4y6", "f1efpmoh"],
      Bn0qgzm: "fv51ejd",
      ibv6hh: ["f1efpmoh", "f130t4y6"],
      sj55zd: "f14nttnl"
    },
    primary: {
      De3pzq: "f8w4g0q"
    },
    secondary: {
      De3pzq: "f1nfm20t",
      g2u3we: "f1ly1fcm",
      h3c5rm: ["fi8bssc", "fj6btzu"],
      B9xav0g: "f1s9tnsa",
      zhjwy3: ["fj6btzu", "fi8bssc"],
      sj55zd: "f14nttnl"
    },
    subtle: {
      De3pzq: "fq5gl1p",
      sj55zd: "f1eryozh"
    },
    transparent: {
      De3pzq: "f1q9pm1r",
      sj55zd: "f1qj7y59"
    }
  }, {
    d: [".fxoiby5 .fui-Icon-filled{display:inline;}", ".f15q0o9g .fui-Icon-regular{display:none;}", ".f1ly1fcm{border-top-color:var(--colorNeutralStroke1Selected);}", ".fi8bssc{border-right-color:var(--colorNeutralStroke1Selected);}", ".fj6btzu{border-left-color:var(--colorNeutralStroke1Selected);}", ".f1s9tnsa{border-bottom-color:var(--colorNeutralStroke1Selected);}", ".fgx37oo{border-top-width:var(--strokeWidthThicker);}", ".f130t4y6{border-right-width:var(--strokeWidthThicker);}", ".f1efpmoh{border-left-width:var(--strokeWidthThicker);}", ".fv51ejd{border-bottom-width:var(--strokeWidthThicker);}", ".f14nttnl{color:var(--colorNeutralForeground1Selected);}", ".f8w4g0q{background-color:var(--colorBrandBackgroundSelected);}", ".f1nfm20t{background-color:var(--colorNeutralBackground1Selected);}", ".fq5gl1p{background-color:var(--colorSubtleBackgroundSelected);}", ".f1eryozh{color:var(--colorNeutralForeground2Selected);}", ".f1q9pm1r{background-color:var(--colorTransparentBackgroundSelected);}", ".f1qj7y59{color:var(--colorNeutralForeground2BrandSelected);}"]
  });
  var useIconExpandedStyles = /* @__PURE__ */ __styles2({
    outline: {
      sj55zd: "f14nttnl"
    },
    primary: {},
    secondary: {
      sj55zd: "f14nttnl"
    },
    subtle: {
      sj55zd: "f1qj7y59"
    },
    transparent: {
      sj55zd: "f1qj7y59"
    },
    highContrast: {
      ze5xyy: "fqyhrn0"
    }
  }, {
    d: [".f14nttnl{color:var(--colorNeutralForeground1Selected);}", ".f1qj7y59{color:var(--colorNeutralForeground2BrandSelected);}"],
    m: [["@media (forced-colors: active){.fqyhrn0:hover{color:Canvas;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useMenuIconStyles = /* @__PURE__ */ __styles2({
    base: {
      Bg96gwp: "fez10in"
    },
    small: {
      Be2twd7: "f1ugzwwg",
      Bqenvij: "fvblgha",
      Bg96gwp: "fwrc4pm",
      a9b677: "frx94fk"
    },
    medium: {
      Be2twd7: "f1ugzwwg",
      Bqenvij: "fvblgha",
      Bg96gwp: "fwrc4pm",
      a9b677: "frx94fk"
    },
    large: {
      Be2twd7: "f4ybsrx",
      Bqenvij: "fd461yt",
      Bg96gwp: "faaz57k",
      a9b677: "fjw5fx7"
    },
    notIconOnly: {
      Frg6f3: ["fbyavb5", "fm0x6gh"]
    }
  }, {
    d: [".fez10in{line-height:0;}", ".f1ugzwwg{font-size:12px;}", ".fvblgha{height:12px;}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".frx94fk{width:12px;}", ".f4ybsrx{font-size:16px;}", ".fd461yt{height:16px;}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fjw5fx7{width:16px;}", ".fbyavb5{margin-left:var(--spacingHorizontalXS);}", ".fm0x6gh{margin-right:var(--spacingHorizontalXS);}"]
  });
  var useMenuButtonStyles_unstable = (state) => {
    const rootExpandedStyles = useRootExpandedStyles();
    const iconExpandedStyles = useIconExpandedStyles();
    const menuIconStyles = useMenuIconStyles();
    state.root.className = mergeClasses(menuButtonClassNames.root, state.root["aria-expanded"] && rootExpandedStyles.base, state.root["aria-expanded"] && rootExpandedStyles[state.appearance], state.root.className);
    if (state.icon) {
      state.icon.className = mergeClasses(menuButtonClassNames.icon, state.root["aria-expanded"] && iconExpandedStyles[state.appearance] && iconExpandedStyles.highContrast, state.icon.className);
    }
    if (state.menuIcon) {
      state.menuIcon.className = mergeClasses(menuButtonClassNames.menuIcon, menuIconStyles.base, menuIconStyles[state.size], !state.iconOnly && menuIconStyles.notIconOnly, state.menuIcon.className);
    }
    useButtonStyles_unstable({
      ...state,
      iconPosition: "before"
    });
    return state;
  };

  // ../node_modules/@fluentui/react-button/lib/components/MenuButton/MenuButton.js
  var MenuButton = /* @__PURE__ */ React73.forwardRef((props, ref) => {
    const state = useMenuButton_unstable(props, ref);
    useMenuButtonStyles_unstable(state);
    useCustomStyleHook("useMenuButtonStyles_unstable")(state);
    return renderMenuButton_unstable(state);
  });
  MenuButton.displayName = "MenuButton";

  // ../node_modules/@fluentui/react-button/lib/components/ToggleButton/ToggleButton.js
  var React76 = __toESM(require_react());

  // ../node_modules/@fluentui/react-button/lib/components/ToggleButton/useToggleButton.js
  var React75 = __toESM(require_react());

  // ../node_modules/@fluentui/react-button/lib/utils/useToggleState.js
  var React74 = __toESM(require_react());
  function useToggleState(props, state) {
    const { checked, defaultChecked, disabled, disabledFocusable } = props;
    const { onClick, role } = state.root;
    const [checkedValue, setCheckedValue] = useControllableState({
      state: checked,
      defaultState: defaultChecked,
      initialState: false
    });
    const isCheckboxTypeRole = role === "menuitemcheckbox" || role === "checkbox";
    const onToggleClick = React74.useCallback((ev) => {
      if (!disabled && !disabledFocusable) {
        if (ev.defaultPrevented) {
          return;
        }
        setCheckedValue(!checkedValue);
      }
    }, [
      checkedValue,
      disabled,
      disabledFocusable,
      setCheckedValue
    ]);
    return {
      ...state,
      checked: checkedValue,
      root: {
        ...state.root,
        [isCheckboxTypeRole ? "aria-checked" : "aria-pressed"]: checkedValue,
        onClick: useEventCallback(mergeCallbacks(onClick, onToggleClick))
      }
    };
  }

  // ../node_modules/@fluentui/react-button/lib/components/ToggleButton/useToggleButton.js
  var useToggleButton_unstable = (props, ref) => {
    const buttonState = useButton_unstable(props, ref);
    return useToggleState(props, buttonState);
  };

  // ../node_modules/@fluentui/react-button/lib/components/ToggleButton/useToggleButtonStyles.styles.js
  var toggleButtonClassNames = {
    root: "fui-ToggleButton",
    icon: "fui-ToggleButton__icon"
  };
  var useRootCheckedStyles = /* @__PURE__ */ __styles2({
    base: {
      De3pzq: "f1nfm20t",
      g2u3we: "fj3muxo",
      h3c5rm: ["f1akhkt", "f1lxtadh"],
      B9xav0g: "f1aperda",
      zhjwy3: ["f1lxtadh", "f1akhkt"],
      sj55zd: "f14nttnl",
      B4j52fo: "f192inf7",
      Bekrc4i: ["f5tn483", "f1ojsxk5"],
      Bn0qgzm: "f1vxd6vx",
      ibv6hh: ["f1ojsxk5", "f5tn483"],
      D0sxk3: "fxoiby5",
      t6yez3: "f15q0o9g",
      Jwef8y: "f1knas48",
      Bgoe8wy: "fvcxoqz",
      Bwzppfd: ["f1ub3y4t", "f1m52nbi"],
      oetu4i: "f1xlaoq0",
      gg5e9n: ["f1m52nbi", "f1ub3y4t"],
      Bi91k9c: "feu1g3u",
      iro3zm: "f141de4g",
      b661bw: "f11v6sdu",
      Bk6r4ia: ["f9yn8i4", "f1ajwf28"],
      B9zn80p: "f1uwu36w",
      Bpld233: ["f1ajwf28", "f9yn8i4"],
      B2d53fq: "f9olfzr"
    },
    highContrast: {
      Bsw6fvg: "f1rirnrt",
      Bjwas2f: "f132fbg1",
      Bn1d65q: ["f1ene5x0", "fzbc999"],
      Bxeuatn: "f6jgcol",
      n51gp8: ["fzbc999", "f1ene5x0"],
      Bbusuzp: "f1lkg8j3",
      ycbfsm: "fkc42ay",
      Bqrx1nm: "fq7113v",
      pgvf35: "ff1wgvm",
      Bh7lczh: ["fiob0tu", "f1x4h75k"],
      dpv3f4: "f1j6scgf",
      Bpnjhaq: ["f1x4h75k", "fiob0tu"],
      ze5xyy: "f4xjyn1",
      g2kj27: "fbgcvur",
      Bf756sw: "f1ks1yx8",
      Bow2dr7: ["f1o6qegi", "fmxjhhp"],
      Bvhedfk: "fcnxywj",
      Gye4lf: ["fmxjhhp", "f1o6qegi"],
      pc6evw: "f9ddjv3",
      Btyszwp: "f1j4zkqc",
      B8jyv7h: ["f1ug3svw", "f10xfdm4"],
      l9kbep: "f4xlnbu",
      By5cl00: ["f10xfdm4", "f1ug3svw"],
      abbn9y: "f1jhcl7q",
      Bw5jppy: ["fokje0w", "fpctg2v"],
      B0tp99d: "f1yfuj62",
      B55dcl7: ["fpctg2v", "fokje0w"],
      G867l3: "fk75khc",
      gdbnj: ["f90nk7n", "f16eiqta"],
      mxns5l: "fnz8tm1",
      o3nasb: ["f16eiqta", "f90nk7n"],
      B7d2ofm: "fkom8lu"
    },
    outline: {
      De3pzq: "f1q9pm1r",
      g2u3we: "fj3muxo",
      h3c5rm: ["f1akhkt", "f1lxtadh"],
      B9xav0g: "f1aperda",
      zhjwy3: ["f1lxtadh", "f1akhkt"],
      B4j52fo: "fgx37oo",
      Bekrc4i: ["f130t4y6", "f1efpmoh"],
      Bn0qgzm: "fv51ejd",
      ibv6hh: ["f1efpmoh", "f130t4y6"],
      Jwef8y: "fjxutwb",
      iro3zm: "fwiml72",
      B8q5s1w: "fcaw57c",
      Bci5o5g: ["fpwd27e", "f1999bjr"],
      n8qw10: "f1hi52o4",
      Bdrgwmp: ["f1999bjr", "fpwd27e"]
    },
    primary: {
      De3pzq: "f8w4g0q",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "f1phragk",
      Jwef8y: "f15wkkf3",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f1rq72xc",
      iro3zm: "fnp9lpt",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1d6v5y2"
    },
    secondary: {},
    subtle: {
      De3pzq: "fq5gl1p",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "f1eryozh",
      Jwef8y: "f1t94bn6",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "fnwyq0v",
      iro3zm: "fsv2rcd",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1omzyqd"
    },
    transparent: {
      De3pzq: "f1q9pm1r",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "f1qj7y59",
      Jwef8y: "fjxutwb",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f139oj5f",
      iro3zm: "fwiml72",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1fg1p5m"
    }
  }, {
    d: [".f1nfm20t{background-color:var(--colorNeutralBackground1Selected);}", ".fj3muxo{border-top-color:var(--colorNeutralStroke1);}", ".f1akhkt{border-right-color:var(--colorNeutralStroke1);}", ".f1lxtadh{border-left-color:var(--colorNeutralStroke1);}", ".f1aperda{border-bottom-color:var(--colorNeutralStroke1);}", ".f14nttnl{color:var(--colorNeutralForeground1Selected);}", ".f192inf7{border-top-width:var(--strokeWidthThin);}", ".f5tn483{border-right-width:var(--strokeWidthThin);}", ".f1ojsxk5{border-left-width:var(--strokeWidthThin);}", ".f1vxd6vx{border-bottom-width:var(--strokeWidthThin);}", ".fxoiby5 .fui-Icon-filled{display:inline;}", ".f15q0o9g .fui-Icon-regular{display:none;}", ".f1q9pm1r{background-color:var(--colorTransparentBackgroundSelected);}", ".fgx37oo{border-top-width:var(--strokeWidthThicker);}", ".f130t4y6{border-right-width:var(--strokeWidthThicker);}", ".f1efpmoh{border-left-width:var(--strokeWidthThicker);}", ".fv51ejd{border-bottom-width:var(--strokeWidthThicker);}", ".fcaw57c[data-fui-focus-visible]{border-top-color:var(--colorNeutralStroke1);}", ".fpwd27e[data-fui-focus-visible]{border-right-color:var(--colorNeutralStroke1);}", ".f1999bjr[data-fui-focus-visible]{border-left-color:var(--colorNeutralStroke1);}", ".f1hi52o4[data-fui-focus-visible]{border-bottom-color:var(--colorNeutralStroke1);}", ".f8w4g0q{background-color:var(--colorBrandBackgroundSelected);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".fq5gl1p{background-color:var(--colorSubtleBackgroundSelected);}", ".f1eryozh{color:var(--colorNeutralForeground2Selected);}", ".f1qj7y59{color:var(--colorNeutralForeground2BrandSelected);}"],
    h: [".f1knas48:hover{background-color:var(--colorNeutralBackground1Hover);}", ".fvcxoqz:hover{border-top-color:var(--colorNeutralStroke1Hover);}", ".f1ub3y4t:hover{border-right-color:var(--colorNeutralStroke1Hover);}", ".f1m52nbi:hover{border-left-color:var(--colorNeutralStroke1Hover);}", ".f1xlaoq0:hover{border-bottom-color:var(--colorNeutralStroke1Hover);}", ".feu1g3u:hover{color:var(--colorNeutralForeground1Hover);}", ".f141de4g:hover:active{background-color:var(--colorNeutralBackground1Pressed);}", ".f11v6sdu:hover:active{border-top-color:var(--colorNeutralStroke1Pressed);}", ".f9yn8i4:hover:active{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f1ajwf28:hover:active{border-left-color:var(--colorNeutralStroke1Pressed);}", ".f1uwu36w:hover:active{border-bottom-color:var(--colorNeutralStroke1Pressed);}", ".f9olfzr:hover:active{color:var(--colorNeutralForeground1Pressed);}", ".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".fwiml72:hover:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f15wkkf3:hover{background-color:var(--colorBrandBackgroundHover);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1rq72xc:hover{color:var(--colorNeutralForegroundOnBrand);}", ".fnp9lpt:hover:active{background-color:var(--colorBrandBackgroundPressed);}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}", ".f1d6v5y2:hover:active{color:var(--colorNeutralForegroundOnBrand);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".fsv2rcd:hover:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f1omzyqd:hover:active{color:var(--colorNeutralForeground2Pressed);}", ".f139oj5f:hover{color:var(--colorNeutralForeground2BrandHover);}", ".f1fg1p5m:hover:active{color:var(--colorNeutralForeground2BrandPressed);}"],
    m: [["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f132fbg1{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ene5x0{border-right-color:Highlight;}.fzbc999{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f6jgcol{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fq7113v:hover{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.ff1wgvm:hover{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1x4h75k:hover{border-left-color:Highlight;}.fiob0tu:hover{border-right-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1j6scgf:hover{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f4xjyn1:hover{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fbgcvur:hover:active{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ks1yx8:hover:active{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1o6qegi:hover:active{border-right-color:Highlight;}.fmxjhhp:hover:active{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fcnxywj:hover:active{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9ddjv3:hover:active{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1j4zkqc:focus{border-top-width:1px;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f10xfdm4:focus{border-left-width:1px;}.f1ug3svw:focus{border-right-width:1px;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f4xlnbu:focus{border-bottom-width:1px;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1jhcl7q:focus{border-top-style:solid;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fokje0w:focus{border-right-style:solid;}.fpctg2v:focus{border-left-style:solid;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1yfuj62:focus{border-bottom-style:solid;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fk75khc:focus{border-top-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f16eiqta:focus{border-left-color:HighlightText;}.f90nk7n:focus{border-right-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fnz8tm1:focus{border-bottom-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fkom8lu:focus{outline-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useRootDisabledStyles2 = /* @__PURE__ */ __styles2({
    base: {
      De3pzq: "f1bg9a2p",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      sj55zd: "f1s2aq7o",
      Jwef8y: "f1falr9n",
      Bgoe8wy: "f12mpcsy",
      Bwzppfd: ["f1gwvigk", "f18rmfxp"],
      oetu4i: "f1jnshp0",
      gg5e9n: ["f18rmfxp", "f1gwvigk"],
      Bi91k9c: "fvgxktp",
      iro3zm: "f1t6o4dc",
      b661bw: "f10ztigi",
      Bk6r4ia: ["f1ft5sdu", "f1gzf82w"],
      B9zn80p: "f12zbtn2",
      Bpld233: ["f1gzf82w", "f1ft5sdu"],
      B2d53fq: "fcvwxyo"
    },
    outline: {},
    primary: {
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    secondary: {},
    subtle: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "fjxutwb",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "fwiml72",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    transparent: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "fjxutwb",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "fwiml72",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    }
  }, {
    d: [".f1bg9a2p{background-color:var(--colorNeutralBackgroundDisabled);}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}"],
    h: [".f1falr9n:hover{background-color:var(--colorNeutralBackgroundDisabled);}", ".f12mpcsy:hover{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1gwvigk:hover{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f18rmfxp:hover{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f1jnshp0:hover{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fvgxktp:hover{color:var(--colorNeutralForegroundDisabled);}", ".f1t6o4dc:hover:active{background-color:var(--colorNeutralBackgroundDisabled);}", ".f10ztigi:hover:active{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1ft5sdu:hover:active{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f1gzf82w:hover:active{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f12zbtn2:hover:active{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fcvwxyo:hover:active{color:var(--colorNeutralForegroundDisabled);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}", ".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".fwiml72:hover:active{background-color:var(--colorTransparentBackgroundPressed);}"]
  });
  var useIconCheckedStyles = /* @__PURE__ */ __styles2({
    subtleOrTransparent: {
      sj55zd: "f1qj7y59"
    },
    highContrast: {
      ycbfsm: "fg4l7m0"
    }
  }, {
    d: [".f1qj7y59{color:var(--colorNeutralForeground2BrandSelected);}"],
    m: [["@media (forced-colors: active){.fg4l7m0{forced-color-adjust:auto;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var usePrimaryHighContrastStyles = /* @__PURE__ */ __styles2({
    base: {
      Bsw6fvg: "f4lkoma",
      Bjwas2f: "f1bauw5b",
      Bn1d65q: ["fbpknfk", "fedl69w"],
      Bxeuatn: "f15s25nd",
      n51gp8: ["fedl69w", "fbpknfk"],
      Bbusuzp: "f1e4kh5",
      ycbfsm: "fg4l7m0"
    },
    disabled: {
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"],
      Bbusuzp: "f1dcs8yz",
      G867l3: "fjwq6ea",
      gdbnj: ["f1lr3nhc", "f1mbxvi6"],
      mxns5l: "fn5gmvv",
      o3nasb: ["f1mbxvi6", "f1lr3nhc"]
    }
  }, {
    m: [["@media (forced-colors: active){.f4lkoma{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1bauw5b{border-top-color:ButtonBorder;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fbpknfk{border-right-color:ButtonBorder;}.fedl69w{border-left-color:ButtonBorder;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f15s25nd{border-bottom-color:ButtonBorder;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1e4kh5{color:ButtonText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fg4l7m0{forced-color-adjust:auto;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fjwq6ea:focus{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lr3nhc:focus{border-right-color:GrayText;}.f1mbxvi6:focus{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fn5gmvv:focus{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useToggleButtonStyles_unstable = (state) => {
    const rootCheckedStyles = useRootCheckedStyles();
    const rootDisabledStyles = useRootDisabledStyles2();
    const iconCheckedStyles = useIconCheckedStyles();
    const primaryHighContrastStyles = usePrimaryHighContrastStyles();
    const {
      appearance,
      checked,
      disabled,
      disabledFocusable
    } = state;
    state.root.className = mergeClasses(
      toggleButtonClassNames.root,
      // Primary high contrast styles
      appearance === "primary" && primaryHighContrastStyles.base,
      appearance === "primary" && (disabled || disabledFocusable) && primaryHighContrastStyles.disabled,
      // Checked styles
      checked && rootCheckedStyles.base,
      checked && rootCheckedStyles.highContrast,
      appearance && checked && rootCheckedStyles[appearance],
      // Disabled styles
      (disabled || disabledFocusable) && rootDisabledStyles.base,
      appearance && (disabled || disabledFocusable) && rootDisabledStyles[appearance],
      // User provided class name
      state.root.className
    );
    if (state.icon) {
      state.icon.className = mergeClasses(toggleButtonClassNames.icon, (appearance === "subtle" || appearance === "transparent") && iconCheckedStyles.subtleOrTransparent && iconCheckedStyles.highContrast, state.icon.className);
    }
    useButtonStyles_unstable(state);
    return state;
  };

  // ../node_modules/@fluentui/react-button/lib/components/ToggleButton/ToggleButton.js
  var ToggleButton = /* @__PURE__ */ React76.forwardRef((props, ref) => {
    const state = useToggleButton_unstable(props, ref);
    useToggleButtonStyles_unstable(state);
    useCustomStyleHook("useToggleButtonStyles_unstable")(state);
    return renderButton_unstable(state);
  });
  ToggleButton.displayName = "ToggleButton";

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/Checkbox.js
  var React81 = __toESM(require_react());

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/useCheckbox.js
  var React80 = __toESM(require_react());

  // ../node_modules/@fluentui/react-field/lib/contexts/FieldContext.js
  var React77 = __toESM(require_react());
  var FieldContext = React77.createContext(void 0);
  var FieldContextProvider = FieldContext.Provider;
  var useFieldContext_unstable = () => React77.useContext(FieldContext);

  // ../node_modules/@fluentui/react-field/lib/contexts/useFieldControlProps.js
  function useFieldControlProps_unstable(props, options) {
    return getFieldControlProps(useFieldContext_unstable(), props, options);
  }
  function getFieldControlProps(context, props, options) {
    var _options, _options1;
    if (!context) {
      return props;
    }
    props = {
      ...props
    };
    const { generatedControlId, hintId, labelFor, labelId, required, validationMessageId, validationState } = context;
    if (generatedControlId) {
      var _props;
      var _id;
      (_id = (_props = props).id) !== null && _id !== void 0 ? _id : _props.id = generatedControlId;
    }
    if (labelId && (!((_options = options) === null || _options === void 0 ? void 0 : _options.supportsLabelFor) || labelFor !== props.id)) {
      var _props1, _arialabelledby;
      var _3;
      (_3 = (_props1 = props)[_arialabelledby = "aria-labelledby"]) !== null && _3 !== void 0 ? _3 : _props1[_arialabelledby] = labelId;
    }
    if (validationMessageId || hintId) {
      var _props2;
      props["aria-describedby"] = [
        validationMessageId,
        hintId,
        (_props2 = props) === null || _props2 === void 0 ? void 0 : _props2["aria-describedby"]
      ].filter(Boolean).join(" ");
    }
    if (validationState === "error") {
      var _props3, _ariainvalid;
      var _1;
      (_1 = (_props3 = props)[_ariainvalid = "aria-invalid"]) !== null && _1 !== void 0 ? _1 : _props3[_ariainvalid] = true;
    }
    if (required) {
      var _options2;
      if ((_options2 = options) === null || _options2 === void 0 ? void 0 : _options2.supportsRequired) {
        var _props4;
        var _required;
        (_required = (_props4 = props).required) !== null && _required !== void 0 ? _required : _props4.required = true;
      } else {
        var _props5, _ariarequired;
        var _22;
        (_22 = (_props5 = props)[_ariarequired = "aria-required"]) !== null && _22 !== void 0 ? _22 : _props5[_ariarequired] = true;
      }
    }
    if ((_options1 = options) === null || _options1 === void 0 ? void 0 : _options1.supportsSize) {
      var _props6;
      var _size;
      (_size = (_props6 = props).size) !== null && _size !== void 0 ? _size : _props6.size = context.size;
    }
    return props;
  }

  // ../node_modules/@fluentui/react-label/lib/components/Label/Label.js
  var React79 = __toESM(require_react());

  // ../node_modules/@fluentui/react-label/lib/components/Label/useLabel.js
  var React78 = __toESM(require_react());
  var useLabel_unstable = (props, ref) => {
    const { disabled = false, required = false, weight = "regular", size: size3 = "medium" } = props;
    return {
      disabled,
      required: slot_exports.optional(required === true ? "*" : required || void 0, {
        defaultProps: {
          "aria-hidden": "true"
        },
        elementType: "span"
      }),
      weight,
      size: size3,
      components: {
        root: "label",
        required: "span"
      },
      root: slot_exports.always(getNativeElementProps("label", {
        ref,
        ...props
      }), {
        elementType: "label"
      })
    };
  };

  // ../node_modules/@fluentui/react-label/lib/components/Label/renderLabel.js
  var renderLabel_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.root.children,
        state.required && /* @__PURE__ */ jsx(state.required, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-label/lib/components/Label/useLabelStyles.styles.js
  var labelClassNames = {
    root: "fui-Label",
    required: "fui-Label__required"
  };
  var useStyles5 = /* @__PURE__ */ __styles2({
    root: {
      Bahqtrf: "fk6fouc",
      sj55zd: "f19n0e5"
    },
    disabled: {
      sj55zd: "f1s2aq7o"
    },
    required: {
      sj55zd: "f1whyuy6",
      uwmqm3: ["fycuoez", "f8wuabp"]
    },
    requiredDisabled: {
      sj55zd: "f1s2aq7o"
    },
    small: {
      Be2twd7: "fy9rknc",
      Bg96gwp: "fwrc4pm"
    },
    medium: {
      Be2twd7: "fkhj508",
      Bg96gwp: "f1i3iumi"
    },
    large: {
      Be2twd7: "fod5ikn",
      Bg96gwp: "faaz57k",
      Bhrd7zp: "fl43uef"
    },
    semibold: {
      Bhrd7zp: "fl43uef"
    }
  }, {
    d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f1whyuy6{color:var(--colorPaletteRedForeground3);}", ".fycuoez{padding-left:4px;}", ".f8wuabp{padding-right:4px;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}"]
  });
  var useLabelStyles_unstable = (state) => {
    const styles4 = useStyles5();
    state.root.className = mergeClasses(labelClassNames.root, styles4.root, state.disabled && styles4.disabled, styles4[state.size], state.weight === "semibold" && styles4.semibold, state.root.className);
    if (state.required) {
      state.required.className = mergeClasses(labelClassNames.required, styles4.required, state.disabled && styles4.requiredDisabled, state.required.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-label/lib/components/Label/Label.js
  var Label = /* @__PURE__ */ React79.forwardRef((props, ref) => {
    const state = useLabel_unstable(props, ref);
    useLabelStyles_unstable(state);
    useCustomStyleHook("useLabelStyles_unstable")(state);
    return renderLabel_unstable(state);
  });
  Label.displayName = "Label";

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/useCheckbox.js
  var useCheckbox_unstable = (props, ref) => {
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsRequired: true
    });
    const { disabled = false, required, shape = "square", size: size3 = "medium", labelPosition = "after", onChange } = props;
    const [checked, setChecked] = useControllableState({
      defaultState: props.defaultChecked,
      state: props.checked,
      initialState: false
    });
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: [
        "checked",
        "defaultChecked",
        "size",
        "onChange"
      ]
    });
    const mixed = checked === "mixed";
    const id = useId2("checkbox-", nativeProps.primary.id);
    let checkmarkIcon;
    if (mixed) {
      if (shape === "circular") {
        checkmarkIcon = /* @__PURE__ */ React80.createElement(CircleFilled, null);
      } else {
        checkmarkIcon = size3 === "large" ? /* @__PURE__ */ React80.createElement(Square16Filled, null) : /* @__PURE__ */ React80.createElement(Square12Filled, null);
      }
    } else if (checked) {
      checkmarkIcon = size3 === "large" ? /* @__PURE__ */ React80.createElement(Checkmark16Filled, null) : /* @__PURE__ */ React80.createElement(Checkmark12Filled, null);
    }
    const state = {
      shape,
      checked,
      disabled,
      size: size3,
      labelPosition,
      components: {
        root: "span",
        input: "input",
        indicator: "div",
        label: Label
      },
      root: slot_exports.always(props.root, {
        defaultProps: {
          ref: useFocusWithin(),
          ...nativeProps.root
        },
        elementType: "span"
      }),
      input: slot_exports.always(props.input, {
        defaultProps: {
          type: "checkbox",
          id,
          ref,
          checked: checked === true,
          ...nativeProps.primary
        },
        elementType: "input"
      }),
      label: slot_exports.optional(props.label, {
        defaultProps: {
          htmlFor: id,
          disabled,
          required,
          size: "medium"
        },
        elementType: Label
      }),
      indicator: slot_exports.optional(props.indicator, {
        renderByDefault: true,
        defaultProps: {
          "aria-hidden": true,
          children: checkmarkIcon
        },
        elementType: "div"
      })
    };
    state.input.onChange = useEventCallback((ev) => {
      var _onChange;
      const val = ev.currentTarget.indeterminate ? "mixed" : ev.currentTarget.checked;
      (_onChange = onChange) === null || _onChange === void 0 ? void 0 : _onChange(ev, {
        checked: val
      });
      setChecked(val);
    });
    const inputRef = useMergedRefs(state.input.ref);
    state.input.ref = inputRef;
    useIsomorphicLayoutEffect(() => {
      if (inputRef.current) {
        inputRef.current.indeterminate = mixed;
      }
    }, [
      inputRef,
      mixed
    ]);
    return state;
  };

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/renderCheckbox.js
  var renderCheckbox_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        /* @__PURE__ */ jsx(state.input, {}),
        state.labelPosition === "before" && state.label && /* @__PURE__ */ jsx(state.label, {}),
        /* @__PURE__ */ jsx(state.indicator, {}),
        state.labelPosition === "after" && state.label && /* @__PURE__ */ jsx(state.label, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/useCheckboxStyles.styles.js
  var checkboxClassNames = {
    root: "fui-Checkbox",
    label: "fui-Checkbox__label",
    input: "fui-Checkbox__input",
    indicator: "fui-Checkbox__indicator"
  };
  var useRootBaseClassName2 = /* @__PURE__ */ __resetStyles2("r1qaeuiq", "rm0k3vm", [".r1qaeuiq{position:relative;display:inline-flex;cursor:pointer;vertical-align:middle;color:var(--colorNeutralForeground3);}", ".r1qaeuiq:focus{outline-style:none;}", ".r1qaeuiq:focus-visible{outline-style:none;}", ".r1qaeuiq[data-fui-focus-within]:focus-within{border-top-color:transparent;border-right-color:transparent;border-bottom-color:transparent;border-left-color:transparent;}", '.r1qaeuiq[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-right-style:solid;border-bottom-style:solid;border-left-style:solid;border-top-width:2px;border-right-width:2px;border-bottom-width:2px;border-left-width:2px;border-bottom-right-radius:var(--borderRadiusMedium);border-bottom-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);top:calc(2px * -1);right:calc(2px * -1);bottom:calc(2px * -1);left:calc(2px * -1);}', ".rm0k3vm{position:relative;display:inline-flex;cursor:pointer;vertical-align:middle;color:var(--colorNeutralForeground3);}", ".rm0k3vm:focus{outline-style:none;}", ".rm0k3vm:focus-visible{outline-style:none;}", ".rm0k3vm[data-fui-focus-within]:focus-within{border-top-color:transparent;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;}", '.rm0k3vm[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-left-style:solid;border-bottom-style:solid;border-right-style:solid;border-top-width:2px;border-left-width:2px;border-bottom-width:2px;border-right-width:2px;border-bottom-left-radius:var(--borderRadiusMedium);border-bottom-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);top:calc(2px * -1);left:calc(2px * -1);bottom:calc(2px * -1);right:calc(2px * -1);}']);
  var useRootStyles4 = /* @__PURE__ */ __styles2({
    unchecked: {
      Bi91k9c: "f3p8bqa",
      ns3gzv: "ffqb913",
      n5iecx: ["f42z0vd", "f1j37kh1"],
      Bq2lx2j: "f10v6cc1",
      Bv7p3up: ["f1j37kh1", "f42z0vd"],
      lj723h: "f1r2dosr",
      B6u2zzw: "f1oarbgq",
      Be5wueo: ["fo8gord", "f18ci1af"],
      Cgwcxn: "fviagcr",
      Btnvhkj: ["f18ci1af", "fo8gord"]
    },
    checked: {
      sj55zd: "f19n0e5",
      Bvs3sgl: "f5opsb9",
      opw9sb: "fpaw01r",
      C5wppx: "f1gqj827",
      B32epof: ["fub94a2", "f13mj44e"],
      Bphahg7: "f1qq5vh1",
      Jctw66: ["f13mj44e", "fub94a2"],
      Bq0zqd5: "f5x9vvn",
      ns3gzv: "fub8hyy",
      n5iecx: ["fffzknn", "f172bh4s"],
      Bq2lx2j: "f6tipb1",
      Bv7p3up: ["f172bh4s", "fffzknn"],
      Bgesukf: "f8adco2",
      B6u2zzw: "f1lepnt8",
      Be5wueo: ["f80ygm0", "frrkusm"],
      Cgwcxn: "f1gg953z",
      Btnvhkj: ["frrkusm", "f80ygm0"]
    },
    mixed: {
      sj55zd: "f19n0e5",
      C5wppx: "f12fgbth",
      B32epof: ["f171e6fm", "fttsnhr"],
      Bphahg7: "f1fyk1ks",
      Jctw66: ["fttsnhr", "f171e6fm"],
      opw9sb: "fvvg2h8",
      ns3gzv: "f1nlwys0",
      n5iecx: ["f1bhstg2", "f6tsdgz"],
      Bq2lx2j: "fqxbw9v",
      Bv7p3up: ["f6tsdgz", "f1bhstg2"],
      cc1l3s: "f1r38qqt",
      B6u2zzw: "f12q3i2l",
      Be5wueo: ["f9g1hxu", "f1o4ic5t"],
      Cgwcxn: "f1c3thm1",
      Btnvhkj: ["f1o4ic5t", "f9g1hxu"],
      km5s60: "ffd07pq"
    },
    disabled: {
      Bceei9c: "f158kwzp",
      sj55zd: "f1s2aq7o",
      C5wppx: "fgiuqeu",
      B32epof: ["f1q4sfkt", "f71co73"],
      Bphahg7: "f1u7lsiy",
      Jctw66: ["f71co73", "f1q4sfkt"],
      opw9sb: "f3vxa14",
      Bbusuzp: "f1dcs8yz",
      B7bxudy: "f1lmtjkn"
    }
  }, {
    h: [".f3p8bqa:hover{color:var(--colorNeutralForeground2);}", ".ffqb913:hover>.fui-Checkbox__indicator{border-top-color:var(--colorNeutralStrokeAccessibleHover);}", ".f42z0vd:hover>.fui-Checkbox__indicator{border-right-color:var(--colorNeutralStrokeAccessibleHover);}", ".f1j37kh1:hover>.fui-Checkbox__indicator{border-left-color:var(--colorNeutralStrokeAccessibleHover);}", ".f10v6cc1:hover>.fui-Checkbox__indicator{border-bottom-color:var(--colorNeutralStrokeAccessibleHover);}", ".f5x9vvn:hover>.fui-Checkbox__indicator{background-color:var(--colorCompoundBrandBackgroundHover);}", ".fub8hyy:hover>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandBackgroundHover);}", ".fffzknn:hover>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandBackgroundHover);}", ".f172bh4s:hover>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandBackgroundHover);}", ".f6tipb1:hover>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandBackgroundHover);}", ".f1nlwys0:hover>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandStrokeHover);}", ".f1bhstg2:hover>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandStrokeHover);}", ".f6tsdgz:hover>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandStrokeHover);}", ".fqxbw9v:hover>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandStrokeHover);}", ".f1r38qqt:hover>.fui-Checkbox__indicator{color:var(--colorCompoundBrandForeground1Hover);}"],
    a: [".f1r2dosr:active{color:var(--colorNeutralForeground1);}", ".f1oarbgq:active>.fui-Checkbox__indicator{border-top-color:var(--colorNeutralStrokeAccessiblePressed);}", ".fo8gord:active>.fui-Checkbox__indicator{border-right-color:var(--colorNeutralStrokeAccessiblePressed);}", ".f18ci1af:active>.fui-Checkbox__indicator{border-left-color:var(--colorNeutralStrokeAccessiblePressed);}", ".fviagcr:active>.fui-Checkbox__indicator{border-bottom-color:var(--colorNeutralStrokeAccessiblePressed);}", ".f8adco2:active>.fui-Checkbox__indicator{background-color:var(--colorCompoundBrandBackgroundPressed);}", ".f1lepnt8:active>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandBackgroundPressed);}", ".f80ygm0:active>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandBackgroundPressed);}", ".frrkusm:active>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandBackgroundPressed);}", ".f1gg953z:active>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandBackgroundPressed);}", ".f12q3i2l:active>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandStrokePressed);}", ".f9g1hxu:active>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandStrokePressed);}", ".f1o4ic5t:active>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandStrokePressed);}", ".f1c3thm1:active>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".ffd07pq:active>.fui-Checkbox__indicator{color:var(--colorCompoundBrandForeground1Pressed);}"],
    d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".f5opsb9>.fui-Checkbox__indicator{background-color:var(--colorCompoundBrandBackground);}", ".fpaw01r>.fui-Checkbox__indicator{color:var(--colorNeutralForegroundInverted);}", ".f1gqj827>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandBackground);}", ".fub94a2>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandBackground);}", ".f13mj44e>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandBackground);}", ".f1qq5vh1>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandBackground);}", ".f12fgbth>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandStroke);}", ".f171e6fm>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandStroke);}", ".fttsnhr>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandStroke);}", ".f1fyk1ks>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandStroke);}", ".fvvg2h8>.fui-Checkbox__indicator{color:var(--colorCompoundBrandForeground1);}", ".f158kwzp{cursor:default;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fgiuqeu>.fui-Checkbox__indicator{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1q4sfkt>.fui-Checkbox__indicator{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f71co73>.fui-Checkbox__indicator{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f1u7lsiy>.fui-Checkbox__indicator{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f3vxa14>.fui-Checkbox__indicator{color:var(--colorNeutralForegroundDisabled);}"],
    m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lmtjkn>.fui-Checkbox__indicator{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useInputBaseClassName = /* @__PURE__ */ __resetStyles2("ruo9svu", null, [".ruo9svu{box-sizing:border-box;cursor:inherit;height:100%;margin:0;opacity:0;position:absolute;top:0;width:calc(16px + 2 * var(--spacingHorizontalS));}"]);
  var useInputStyles = /* @__PURE__ */ __styles2({
    before: {
      j35jbq: ["f1e31b4d", "f1vgc2s3"]
    },
    after: {
      oyh7mz: ["f1vgc2s3", "f1e31b4d"]
    },
    large: {
      a9b677: "f1mq5jt6"
    }
  }, {
    d: [".f1e31b4d{right:0;}", ".f1vgc2s3{left:0;}", ".f1mq5jt6{width:calc(20px + 2 * var(--spacingHorizontalS));}"]
  });
  var useIndicatorBaseClassName = /* @__PURE__ */ __resetStyles2("rrh91wr", null, [".rrh91wr{align-self:flex-start;box-sizing:border-box;flex-shrink:0;display:flex;align-items:center;justify-content:center;overflow:hidden;border:var(--strokeWidthThin) solid var(--colorNeutralStrokeAccessible);border-radius:var(--borderRadiusSmall);margin:var(--spacingVerticalS) var(--spacingHorizontalS);fill:currentColor;pointer-events:none;font-size:12px;height:16px;width:16px;}"]);
  var useIndicatorStyles = /* @__PURE__ */ __styles2({
    large: {
      Be2twd7: "f4ybsrx",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3"
    },
    circular: {
      Bbmb7ep: ["f8fbkgy", "f1nfllo7"],
      Beyfa6y: ["f1nfllo7", "f8fbkgy"],
      B7oj6ja: ["f1djnp8u", "f1s8kh49"],
      Btl43ni: ["f1s8kh49", "f1djnp8u"]
    }
  }, {
    d: [".f4ybsrx{font-size:16px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".f8fbkgy{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1nfllo7{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1djnp8u{border-top-right-radius:var(--borderRadiusCircular);}", ".f1s8kh49{border-top-left-radius:var(--borderRadiusCircular);}"]
  });
  var useLabelStyles = /* @__PURE__ */ __styles2({
    base: {
      qb2dma: "f7nlbp4",
      sj55zd: "f1ym3bx4",
      Bceei9c: "fpo1scq",
      z8tnut: "f1kwiid1",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f5b47ha",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"]
    },
    before: {
      z189sj: ["f7x41pl", "fruq291"]
    },
    after: {
      uwmqm3: ["fruq291", "f7x41pl"]
    },
    medium: {
      B6of3ja: "fjzwpt6",
      jrapky: "fh6j2fo"
    },
    large: {
      B6of3ja: "f1xlvstr",
      jrapky: "f49ad5g"
    }
  }, {
    d: [".f7nlbp4{align-self:center;}", ".f1ym3bx4{color:inherit;}", ".fpo1scq{cursor:inherit;}", ".f1kwiid1{padding-top:var(--spacingVerticalS);}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f5b47ha{padding-bottom:var(--spacingVerticalS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".fjzwpt6{margin-top:calc((16px - var(--lineHeightBase300)) / 2);}", ".fh6j2fo{margin-bottom:calc((16px - var(--lineHeightBase300)) / 2);}", ".f1xlvstr{margin-top:calc((20px - var(--lineHeightBase300)) / 2);}", ".f49ad5g{margin-bottom:calc((20px - var(--lineHeightBase300)) / 2);}"]
  });
  var useCheckboxStyles_unstable = (state) => {
    const {
      checked,
      disabled,
      labelPosition,
      shape,
      size: size3
    } = state;
    const rootBaseClassName = useRootBaseClassName2();
    const rootStyles = useRootStyles4();
    state.root.className = mergeClasses(checkboxClassNames.root, rootBaseClassName, disabled ? rootStyles.disabled : checked === "mixed" ? rootStyles.mixed : checked ? rootStyles.checked : rootStyles.unchecked, state.root.className);
    const inputBaseClassName = useInputBaseClassName();
    const inputStyles = useInputStyles();
    state.input.className = mergeClasses(checkboxClassNames.input, inputBaseClassName, size3 === "large" && inputStyles.large, inputStyles[labelPosition], state.input.className);
    const indicatorBaseClassName = useIndicatorBaseClassName();
    const indicatorStyles = useIndicatorStyles();
    if (state.indicator) {
      state.indicator.className = mergeClasses(checkboxClassNames.indicator, indicatorBaseClassName, size3 === "large" && indicatorStyles.large, shape === "circular" && indicatorStyles.circular, state.indicator.className);
    }
    const labelStyles = useLabelStyles();
    if (state.label) {
      state.label.className = mergeClasses(checkboxClassNames.label, labelStyles.base, labelStyles[size3], labelStyles[labelPosition], state.label.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/Checkbox.js
  var Checkbox = /* @__PURE__ */ React81.forwardRef((props, ref) => {
    const state = useCheckbox_unstable(props, ref);
    useCheckboxStyles_unstable(state);
    useCustomStyleHook("useCheckboxStyles_unstable")(state);
    return renderCheckbox_unstable(state);
  });
  Checkbox.displayName = "Checkbox";

  // ../node_modules/@fluentui/react-combobox/lib/contexts/ComboboxContext.js
  var ComboboxContext = createContext14({
    activeOption: void 0,
    appearance: "outline",
    focusVisible: false,
    open: false,
    registerOption() {
      return () => void 0;
    },
    selectedOptions: [],
    selectOption() {
    },
    setActiveOption() {
    },
    setOpen() {
    },
    size: "medium"
  });
  var ComboboxProvider = ComboboxContext.Provider;

  // ../node_modules/@fluentui/react-combobox/lib/contexts/ListboxContext.js
  var ListboxContext = createContext14({
    activeOption: void 0,
    focusVisible: false,
    multiselect: false,
    registerOption() {
      return () => void 0;
    },
    selectedOptions: [],
    selectOption() {
    },
    setActiveOption() {
    }
  });
  var ListboxProvider = ListboxContext.Provider;

  // ../node_modules/@fluentui/react-combobox/lib/contexts/useComboboxContextValues.js
  function useComboboxContextValues(state) {
    const { activeOption, appearance, focusVisible, open, registerOption, selectedOptions, selectOption, setActiveOption, setOpen, size: size3 } = state;
    const combobox = {
      activeOption,
      appearance,
      focusVisible,
      open,
      registerOption,
      selectedOptions,
      selectOption,
      setActiveOption,
      setOpen,
      size: size3
    };
    return {
      combobox
    };
  }

  // ../node_modules/@fluentui/react-combobox/lib/contexts/useListboxContextValues.js
  function useListboxContextValues(state) {
    const hasComboboxContext = useHasParentContext(ComboboxContext);
    const { activeOption, focusVisible, multiselect, registerOption, selectedOptions, selectOption, setActiveOption } = state;
    const comboboxRegisterOption = useContextSelector(ComboboxContext, (ctx) => ctx.registerOption);
    const registerOptionValue = hasComboboxContext ? comboboxRegisterOption : registerOption;
    const listbox = {
      activeOption,
      focusVisible,
      multiselect,
      registerOption: registerOptionValue,
      selectedOptions,
      selectOption,
      setActiveOption
    };
    return {
      listbox
    };
  }

  // ../node_modules/@fluentui/react-combobox/lib/components/Listbox/Listbox.js
  var React86 = __toESM(require_react());

  // ../node_modules/@fluentui/react-combobox/lib/components/Listbox/useListbox.js
  var React85 = __toESM(require_react());

  // ../node_modules/@fluentui/react-combobox/lib/utils/dropdownKeyActions.js
  var React82 = __toESM(require_react());
  function getDropdownActionFromKey(e3, options = {}) {
    const { open = true, multiselect = false } = options;
    const code2 = e3.key;
    const { altKey, ctrlKey, key, metaKey } = e3;
    if (key.length === 1 && code2 !== Space && !altKey && !ctrlKey && !metaKey) {
      return "Type";
    }
    if (!open) {
      if (code2 === ArrowDown || code2 === ArrowUp || code2 === Enter || code2 === Space) {
        return "Open";
      }
      return "None";
    }
    if (code2 === ArrowUp && altKey || code2 === Enter || !multiselect && code2 === Space) {
      return "CloseSelect";
    }
    if (multiselect && code2 === Space) {
      return "Select";
    }
    if (code2 === Escape) {
      return "Close";
    }
    if (code2 === ArrowDown) {
      return "Next";
    }
    if (code2 === ArrowUp) {
      return "Previous";
    }
    if (code2 === Home) {
      return "First";
    }
    if (code2 === End) {
      return "Last";
    }
    if (code2 === PageUp) {
      return "PageUp";
    }
    if (code2 === PageDown) {
      return "PageDown";
    }
    if (code2 === Tab) {
      return "Tab";
    }
    return "None";
  }
  function getIndexFromAction(action, currentIndex, maxIndex) {
    switch (action) {
      case "Next":
        return Math.min(maxIndex, currentIndex + 1);
        break;
      case "Previous":
        return Math.max(0, currentIndex - 1);
      case "First":
        return 0;
      case "Last":
        return maxIndex;
      case "PageDown":
        return Math.min(maxIndex, currentIndex + 10);
      case "PageUp":
        return Math.max(0, currentIndex - 10);
      default:
        return currentIndex;
    }
  }

  // ../node_modules/@fluentui/react-combobox/lib/utils/useOptionCollection.js
  var React83 = __toESM(require_react());
  var useOptionCollection = () => {
    const nodes2 = React83.useRef([]);
    const collectionAPI = React83.useMemo(() => {
      const getCount = () => nodes2.current.length;
      const getOptionAtIndex = (index2) => {
        var _nodes_current_index;
        return (_nodes_current_index = nodes2.current[index2]) === null || _nodes_current_index === void 0 ? void 0 : _nodes_current_index.option;
      };
      const getIndexOfId = (id) => nodes2.current.findIndex((node5) => node5.option.id === id);
      const getOptionById = (id) => {
        var _item;
        const item = nodes2.current.find((node5) => node5.option.id === id);
        return (_item = item) === null || _item === void 0 ? void 0 : _item.option;
      };
      const getOptionsMatchingText = (matcher) => {
        return nodes2.current.filter((node5) => matcher(node5.option.text)).map((node5) => node5.option);
      };
      const getOptionsMatchingValue = (matcher) => {
        return nodes2.current.filter((node5) => matcher(node5.option.value)).map((node5) => node5.option);
      };
      return {
        getCount,
        getOptionAtIndex,
        getIndexOfId,
        getOptionById,
        getOptionsMatchingText,
        getOptionsMatchingValue
      };
    }, []);
    const registerOption = React83.useCallback((option, element2) => {
      var _nodes_current_index;
      const index2 = nodes2.current.findIndex((node5) => {
        if (!node5.element || !element2) {
          return false;
        }
        if (node5.option.id === option.id) {
          return true;
        }
        return node5.element.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_PRECEDING;
      });
      if (((_nodes_current_index = nodes2.current[index2]) === null || _nodes_current_index === void 0 ? void 0 : _nodes_current_index.option.id) !== option.id) {
        const newItem = {
          element: element2,
          option
        };
        if (index2 === -1) {
          nodes2.current = [
            ...nodes2.current,
            newItem
          ];
        } else {
          nodes2.current.splice(index2, 0, newItem);
        }
      }
      return () => {
        nodes2.current = nodes2.current.filter((node5) => node5.option.id !== option.id);
      };
    }, []);
    return {
      ...collectionAPI,
      options: nodes2.current.map((node5) => node5.option),
      registerOption
    };
  };

  // ../node_modules/@fluentui/react-combobox/lib/utils/useScrollOptionsIntoView.js
  var React84 = __toESM(require_react());
  function useScrollOptionsIntoView(state) {
    const { activeOption } = state;
    const scrollContainerRef = React84.useRef(null);
    React84.useEffect(() => {
      if (scrollContainerRef.current && activeOption && canUseDOM2()) {
        const activeOptionElement = scrollContainerRef.current.querySelector(`#${activeOption.id}`);
        if (!activeOptionElement) {
          return;
        }
        const { offsetHeight, offsetTop } = activeOptionElement;
        const { offsetHeight: parentOffsetHeight, scrollTop } = scrollContainerRef.current;
        const isAbove = offsetTop < scrollTop;
        const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;
        const buffer2 = 2;
        if (isAbove) {
          scrollContainerRef.current.scrollTo(0, offsetTop - buffer2);
        } else if (isBelow) {
          scrollContainerRef.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight + buffer2);
        }
      }
    }, [
      activeOption
    ]);
    return scrollContainerRef;
  }

  // ../node_modules/@fluentui/react-combobox/lib/utils/useSelection.js
  var import_react19 = __toESM(require_react());
  var useSelection = (props) => {
    const { defaultSelectedOptions, multiselect, onOptionSelect } = props;
    const [selectedOptions, setSelectedOptions] = useControllableState({
      state: props.selectedOptions,
      defaultState: defaultSelectedOptions,
      initialState: []
    });
    const selectOption = (0, import_react19.useCallback)((event, option) => {
      var _onOptionSelect;
      if (option.disabled) {
        return;
      }
      let newSelection = [
        option.value
      ];
      if (multiselect) {
        const selectedIndex = selectedOptions.findIndex((o3) => o3 === option.value);
        if (selectedIndex > -1) {
          newSelection = [
            ...selectedOptions.slice(0, selectedIndex),
            ...selectedOptions.slice(selectedIndex + 1)
          ];
        } else {
          newSelection = [
            ...selectedOptions,
            option.value
          ];
        }
      }
      setSelectedOptions(newSelection);
      (_onOptionSelect = onOptionSelect) === null || _onOptionSelect === void 0 ? void 0 : _onOptionSelect(event, {
        optionValue: option.value,
        optionText: option.text,
        selectedOptions: newSelection
      });
    }, [
      onOptionSelect,
      multiselect,
      selectedOptions,
      setSelectedOptions
    ]);
    const clearSelection = (event) => {
      var _onOptionSelect;
      setSelectedOptions([]);
      (_onOptionSelect = onOptionSelect) === null || _onOptionSelect === void 0 ? void 0 : _onOptionSelect(event, {
        optionValue: void 0,
        optionText: void 0,
        selectedOptions: []
      });
    };
    return {
      clearSelection,
      selectOption,
      selectedOptions
    };
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Listbox/useListbox.js
  var useListbox_unstable = (props, ref) => {
    var _activeOption;
    const { multiselect } = props;
    const optionCollection = useOptionCollection();
    const { getCount, getOptionAtIndex, getIndexOfId } = optionCollection;
    const { clearSelection, selectedOptions, selectOption } = useSelection(props);
    const [activeOption, setActiveOption] = React85.useState();
    const [focusVisible, setFocusVisible] = React85.useState(false);
    const onKeyDown = (event) => {
      const action = getDropdownActionFromKey(event, {
        open: true
      });
      const maxIndex = getCount() - 1;
      const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;
      let newIndex = activeIndex;
      switch (action) {
        case "Select":
        case "CloseSelect":
          activeOption && selectOption(event, activeOption);
          break;
        default:
          newIndex = getIndexFromAction(action, activeIndex, maxIndex);
      }
      if (newIndex !== activeIndex) {
        event.preventDefault();
        setActiveOption(getOptionAtIndex(newIndex));
        setFocusVisible(true);
      }
    };
    const onMouseOver = (event) => {
      setFocusVisible(false);
    };
    const hasComboboxContext = useHasParentContext(ComboboxContext);
    const comboboxActiveOption = useContextSelector(ComboboxContext, (ctx) => ctx.activeOption);
    const comboboxFocusVisible = useContextSelector(ComboboxContext, (ctx) => ctx.focusVisible);
    const comboboxSelectedOptions = useContextSelector(ComboboxContext, (ctx) => ctx.selectedOptions);
    const comboboxSelectOption = useContextSelector(ComboboxContext, (ctx) => ctx.selectOption);
    const comboboxSetActiveOption = useContextSelector(ComboboxContext, (ctx) => ctx.setActiveOption);
    const optionContextValues = hasComboboxContext ? {
      activeOption: comboboxActiveOption,
      focusVisible: comboboxFocusVisible,
      selectedOptions: comboboxSelectedOptions,
      selectOption: comboboxSelectOption,
      setActiveOption: comboboxSetActiveOption
    } : {
      activeOption,
      focusVisible,
      selectedOptions,
      selectOption,
      setActiveOption
    };
    const state = {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref,
        role: multiselect ? "menu" : "listbox",
        "aria-activedescendant": hasComboboxContext ? void 0 : (_activeOption = activeOption) === null || _activeOption === void 0 ? void 0 : _activeOption.id,
        "aria-multiselectable": multiselect,
        tabIndex: 0,
        ...props
      }), {
        elementType: "div"
      }),
      multiselect,
      clearSelection,
      ...optionCollection,
      ...optionContextValues
    };
    const scrollContainerRef = useScrollOptionsIntoView(state);
    state.root.ref = useMergedRefs(state.root.ref, scrollContainerRef);
    state.root.onKeyDown = useEventCallback(mergeCallbacks(state.root.onKeyDown, onKeyDown));
    state.root.onMouseOver = useEventCallback(mergeCallbacks(state.root.onMouseOver, onMouseOver));
    return state;
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Listbox/renderListbox.js
  var renderListbox_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(ListboxContext.Provider, {
      value: contextValues.listbox,
      children: /* @__PURE__ */ jsx(state.root, {})
    });
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Listbox/useListboxStyles.styles.js
  var listboxClassNames = {
    root: "fui-Listbox"
  };
  var useStyles6 = /* @__PURE__ */ __styles2({
    root: {
      De3pzq: "fxugw4r",
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Beiy3e4: "f1vx9l62",
      Bf4jedk: "f3hsy1e",
      Bmxbyg5: "f5zp4f",
      Bpd4iqm: "fpvhumw",
      oeaueh: "f1yog68k",
      Bw0xxkn: "f13sgyd8",
      z8tnut: "f1x4af0m",
      z189sj: ["f7x41pl", "fruq291"],
      Byoj8tv: "fd55psn",
      uwmqm3: ["fruq291", "f7x41pl"],
      Belr9w4: "fiut8dr"
    }
  }, {
    d: [".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1ewtqcl{box-sizing:border-box;}", ".f22iagw{display:flex;}", ".f1vx9l62{flex-direction:column;}", ".f3hsy1e{min-width:160px;}", ".f5zp4f{overflow-y:auto;}", ".fpvhumw{outline-width:1px;}", ".f1yog68k{outline-style:solid;}", ".f13sgyd8{outline-color:var(--colorTransparentStroke);}", ".f1x4af0m{padding-top:var(--spacingHorizontalXS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".fd55psn{padding-bottom:var(--spacingHorizontalXS);}", ".fiut8dr{row-gap:var(--spacingHorizontalXXS);}"]
  });
  var useListboxStyles_unstable = (state) => {
    const styles4 = useStyles6();
    state.root.className = mergeClasses(listboxClassNames.root, styles4.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Listbox/Listbox.js
  var Listbox = /* @__PURE__ */ React86.forwardRef((props, ref) => {
    const state = useListbox_unstable(props, ref);
    const contextValues = useListboxContextValues(state);
    useListboxStyles_unstable(state);
    useCustomStyleHook("useListboxStyles_unstable")(state);
    return renderListbox_unstable(state, contextValues);
  });
  Listbox.displayName = "Listbox";

  // ../node_modules/@fluentui/react-combobox/lib/components/Option/Option.js
  var React88 = __toESM(require_react());

  // ../node_modules/@fluentui/react-combobox/lib/components/Option/useOption.js
  var React87 = __toESM(require_react());
  function getTextString(text4, children) {
    if (text4 !== void 0) {
      return text4;
    }
    let textString = "";
    let hasNonStringChild = false;
    React87.Children.forEach(children, (child) => {
      if (typeof child === "string") {
        textString += child;
      } else {
        hasNonStringChild = true;
      }
    });
    if (hasNonStringChild) {
      console.warn("Provide a `text` prop to Option components when they contain non-string children.");
    }
    return textString;
  }
  var useOption_unstable = (props, ref) => {
    const { children, disabled, text: text4, value } = props;
    const optionRef = React87.useRef(null);
    const optionText = getTextString(text4, children);
    const optionValue = value !== null && value !== void 0 ? value : optionText;
    const id = useId2("fluent-option", props.id);
    const optionData = React87.useMemo(() => ({
      id,
      disabled,
      text: optionText,
      value: optionValue
    }), [
      id,
      disabled,
      optionText,
      optionValue
    ]);
    const focusVisible = useContextSelector(ListboxContext, (ctx) => ctx.focusVisible);
    const multiselect = useContextSelector(ListboxContext, (ctx) => ctx.multiselect);
    const registerOption = useContextSelector(ListboxContext, (ctx) => ctx.registerOption);
    const selected = useContextSelector(ListboxContext, (ctx) => {
      const selectedOptions = ctx.selectedOptions;
      return !!optionValue && !!selectedOptions.find((o3) => o3 === optionValue);
    });
    const selectOption = useContextSelector(ListboxContext, (ctx) => ctx.selectOption);
    const setActiveOption = useContextSelector(ListboxContext, (ctx) => ctx.setActiveOption);
    const setOpen = useContextSelector(ComboboxContext, (ctx) => ctx.setOpen);
    const active = useContextSelector(ListboxContext, (ctx) => {
      var _ctx_activeOption, _ctx_activeOption1;
      return ((_ctx_activeOption = ctx.activeOption) === null || _ctx_activeOption === void 0 ? void 0 : _ctx_activeOption.id) !== void 0 && ((_ctx_activeOption1 = ctx.activeOption) === null || _ctx_activeOption1 === void 0 ? void 0 : _ctx_activeOption1.id) === id;
    });
    let CheckIcon = /* @__PURE__ */ React87.createElement(CheckmarkFilled, null);
    if (multiselect) {
      CheckIcon = selected ? /* @__PURE__ */ React87.createElement(Checkmark12Filled, null) : "";
    }
    const onClick = (event) => {
      var _props_onClick, _props;
      if (disabled) {
        event.preventDefault();
        return;
      }
      setActiveOption(optionData);
      if (!multiselect) {
        var _setOpen;
        (_setOpen = setOpen) === null || _setOpen === void 0 ? void 0 : _setOpen(event, false);
      }
      selectOption(event, optionData);
      (_props_onClick = (_props = props).onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(_props, event);
    };
    React87.useEffect(() => {
      if (id && optionRef.current) {
        return registerOption(optionData, optionRef.current);
      }
    }, [
      id,
      optionData,
      registerOption
    ]);
    const semanticProps = multiselect ? {
      role: "menuitemcheckbox",
      "aria-checked": selected
    } : {
      role: "option",
      "aria-selected": selected
    };
    return {
      components: {
        root: "div",
        checkIcon: "span"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref: useMergedRefs(ref, optionRef),
        "aria-disabled": disabled ? "true" : void 0,
        id,
        ...semanticProps,
        ...props,
        onClick
      }), {
        elementType: "div"
      }),
      checkIcon: slot_exports.optional(props.checkIcon, {
        renderByDefault: true,
        defaultProps: {
          "aria-hidden": "true",
          children: CheckIcon
        },
        elementType: "span"
      }),
      active,
      disabled,
      focusVisible,
      multiselect,
      selected
    };
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Option/renderOption.js
  var renderOption_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.checkIcon && /* @__PURE__ */ jsx(state.checkIcon, {}),
        state.root.children
      ]
    });
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Option/useOptionStyles.styles.js
  var optionClassNames = {
    root: "fui-Option",
    checkIcon: "fui-Option__checkIcon"
  };
  var useStyles7 = /* @__PURE__ */ __styles2({
    root: {
      Bt984gj: "f122n59",
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      sj55zd: "f19n0e5",
      i8kkvl: "f1ufnopg",
      Bceei9c: "f1k6fduh",
      mc9l5x: "f22iagw",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bg96gwp: "f1i3iumi",
      z8tnut: "fp2oml8",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f1tdddsa",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"],
      qhf8xq: "f10pi13n",
      Jwef8y: "f1knas48",
      ecr2s2: "fb40n2d"
    },
    active: {
      Bsft5z2: "f13zj6fq",
      E3zdtr: "f1mdlcz9",
      B80jsxd: "f1nwj1ja",
      t2ki1e: "ffmd2fr",
      Bm2nyyq: "f8rth92",
      Barhvk9: ["flthirb", "ftkbnf5"],
      Bw17bha: "f1lh990p",
      vfts7: ["ftkbnf5", "flthirb"],
      xrcqlc: "fc9v8v1",
      Ihftqj: ["f1mwfetb", "f18mat8f"],
      Bcgy8vk: "f1cb6c3",
      Bhxzhr1: ["f18mat8f", "f1mwfetb"],
      B3778ie: ["f1ibwz09", "f1kp91vd"],
      d9w3h3: ["f1kp91vd", "f1ibwz09"],
      Bl18szs: ["f1pix4dl", "f13nd1z4"],
      B4j8arr: ["f13nd1z4", "f1pix4dl"],
      B0n5ga8: "f1qw5sz7",
      s924m2: ["f19va7ni", "f1a9v3mw"],
      B1q35kw: "fkkziue",
      Gp14am: ["f1a9v3mw", "f19va7ni"],
      bn5sak: "f1a97anr",
      By385i5: "f5226zp",
      Eqx8gd: ["fa2bdqt", "fei6g0k"],
      B1piin3: ["fei6g0k", "fa2bdqt"]
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      Jwef8y: "f9ql6rf",
      ecr2s2: "fgj9um3",
      Bbusuzp: "f1dcs8yz"
    },
    selected: {},
    checkIcon: {
      Be2twd7: "fod5ikn",
      Frg6f3: ["f18b9hdq", "fn6qj8t"],
      t21cq0: ["f1xk557c", "f1h9en5y"],
      Bcdw1i0: "fd7fpy0",
      Bo70h7d: "fvc9v3g"
    },
    selectedCheck: {
      Bcdw1i0: "f1022m68"
    },
    multiselectCheck: {
      B4j52fo: "f192inf7",
      Bekrc4i: ["f5tn483", "f1ojsxk5"],
      Bn0qgzm: "f1vxd6vx",
      ibv6hh: ["f1ojsxk5", "f5tn483"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fq0vr37",
      h3c5rm: ["f1byw159", "f11cr0be"],
      B9xav0g: "f1c1zstj",
      zhjwy3: ["f11cr0be", "f1byw159"],
      Bbmb7ep: ["f1g3puop", "fi2rrw2"],
      Beyfa6y: ["fi2rrw2", "f1g3puop"],
      B7oj6ja: ["f1rstyi9", "f1s4nn1u"],
      Btl43ni: ["f1s4nn1u", "f1rstyi9"],
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59",
      Brf1p80: "f4d9j23",
      Bkfmm31: "f1w9h62z",
      Be2twd7: "f1ugzwwg",
      Bqenvij: "fd461yt",
      a9b677: "fjw5fx7",
      Bcdw1i0: "f1022m68"
    },
    selectedMultiselectCheck: {
      De3pzq: "ftywsgz",
      sj55zd: "fqpbvvt",
      g2u3we: "f3xi7mh",
      h3c5rm: ["ftovhe4", "f1wczvin"],
      B9xav0g: "f68vbr6",
      zhjwy3: ["f1wczvin", "ftovhe4"]
    },
    checkDisabled: {
      sj55zd: "f1s2aq7o",
      Bbusuzp: "f1dcs8yz"
    }
  }, {
    d: [".f122n59{align-items:center;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1ufnopg{column-gap:var(--spacingHorizontalXS);}", ".f1k6fduh{cursor:pointer;}", ".f22iagw{display:flex;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fp2oml8{padding-top:var(--spacingVerticalSNudge);}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f1tdddsa{padding-bottom:var(--spacingVerticalSNudge);}", ".f10pi13n{position:relative;}", '.f13zj6fq::after{content:"";}', ".f1mdlcz9::after{position:absolute;}", ".f1nwj1ja::after{pointer-events:none;}", ".ffmd2fr::after{z-index:1;}", ".f8rth92::after{border-top-style:solid;}", ".flthirb::after{border-right-style:solid;}", ".ftkbnf5::after{border-left-style:solid;}", ".f1lh990p::after{border-bottom-style:solid;}", ".fc9v8v1::after{border-top-width:2px;}", ".f1mwfetb::after{border-right-width:2px;}", ".f18mat8f::after{border-left-width:2px;}", ".f1cb6c3::after{border-bottom-width:2px;}", ".f1ibwz09::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f1kp91vd::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1pix4dl::after{border-top-right-radius:var(--borderRadiusMedium);}", ".f13nd1z4::after{border-top-left-radius:var(--borderRadiusMedium);}", ".f1qw5sz7::after{border-top-color:var(--colorStrokeFocus2);}", ".f19va7ni::after{border-right-color:var(--colorStrokeFocus2);}", ".f1a9v3mw::after{border-left-color:var(--colorStrokeFocus2);}", ".fkkziue::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f1a97anr::after{top:-2px;}", ".f5226zp::after{bottom:-2px;}", ".fa2bdqt::after{left:-2px;}", ".fei6g0k::after{right:-2px;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".f18b9hdq{margin-left:calc(var(--spacingHorizontalXXS) * -1);}", ".fn6qj8t{margin-right:calc(var(--spacingHorizontalXXS) * -1);}", ".f1xk557c{margin-right:var(--spacingHorizontalXXS);}", ".f1h9en5y{margin-left:var(--spacingHorizontalXXS);}", ".fd7fpy0{visibility:hidden;}", ".fvc9v3g svg{display:block;}", ".f1022m68{visibility:visible;}", ".f192inf7{border-top-width:var(--strokeWidthThin);}", ".f5tn483{border-right-width:var(--strokeWidthThin);}", ".f1ojsxk5{border-left-width:var(--strokeWidthThin);}", ".f1vxd6vx{border-bottom-width:var(--strokeWidthThin);}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".fq0vr37{border-top-color:var(--colorNeutralStrokeAccessible);}", ".f1byw159{border-right-color:var(--colorNeutralStrokeAccessible);}", ".f11cr0be{border-left-color:var(--colorNeutralStrokeAccessible);}", ".f1c1zstj{border-bottom-color:var(--colorNeutralStrokeAccessible);}", ".f1g3puop{border-bottom-right-radius:var(--borderRadiusSmall);}", ".fi2rrw2{border-bottom-left-radius:var(--borderRadiusSmall);}", ".f1rstyi9{border-top-right-radius:var(--borderRadiusSmall);}", ".f1s4nn1u{border-top-left-radius:var(--borderRadiusSmall);}", ".f1ewtqcl{box-sizing:border-box;}", ".f4d9j23{justify-content:center;}", ".f1w9h62z{fill:currentColor;}", ".f1ugzwwg{font-size:12px;}", ".fd461yt{height:16px;}", ".fjw5fx7{width:16px;}", ".ftywsgz{background-color:var(--colorCompoundBrandBackground);}", ".fqpbvvt{color:var(--colorNeutralForegroundInverted);}", ".f3xi7mh{border-top-color:var(--colorCompoundBrandBackground);}", ".ftovhe4{border-right-color:var(--colorCompoundBrandBackground);}", ".f1wczvin{border-left-color:var(--colorCompoundBrandBackground);}", ".f68vbr6{border-bottom-color:var(--colorCompoundBrandBackground);}"],
    h: [".f1knas48:hover{background-color:var(--colorNeutralBackground1Hover);}", ".f9ql6rf:hover{background-color:var(--colorTransparentBackground);}"],
    a: [".fb40n2d:active{background-color:var(--colorNeutralBackground1Pressed);}", ".fgj9um3:active{background-color:var(--colorTransparentBackground);}"],
    m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useOptionStyles_unstable = (state) => {
    const {
      active,
      disabled,
      focusVisible,
      multiselect,
      selected
    } = state;
    const styles4 = useStyles7();
    state.root.className = mergeClasses(optionClassNames.root, styles4.root, active && focusVisible && styles4.active, disabled && styles4.disabled, selected && styles4.selected, state.root.className);
    if (state.checkIcon) {
      state.checkIcon.className = mergeClasses(optionClassNames.checkIcon, styles4.checkIcon, multiselect && styles4.multiselectCheck, selected && styles4.selectedCheck, selected && multiselect && styles4.selectedMultiselectCheck, disabled && styles4.checkDisabled, state.checkIcon.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Option/Option.js
  var Option = /* @__PURE__ */ React88.forwardRef((props, ref) => {
    const state = useOption_unstable(props, ref);
    useOptionStyles_unstable(state);
    useCustomStyleHook("useOptionStyles_unstable")(state);
    return renderOption_unstable(state);
  });
  Option.displayName = "Option";

  // ../node_modules/@fluentui/react-combobox/lib/components/Combobox/Combobox.js
  var React92 = __toESM(require_react());

  // ../node_modules/@fluentui/react-combobox/lib/components/Combobox/useCombobox.js
  var React91 = __toESM(require_react());

  // ../node_modules/@fluentui/react-combobox/lib/utils/useComboboxBaseState.js
  var React89 = __toESM(require_react());
  var useComboboxBaseState = (props) => {
    const { appearance = "outline", children, editable = false, inlinePopup = false, mountNode = void 0, multiselect, onOpenChange, size: size3 = "medium" } = props;
    const optionCollection = useOptionCollection();
    const { getOptionAtIndex, getOptionsMatchingValue } = optionCollection;
    const [activeOption, setActiveOption] = React89.useState();
    const [focusVisible, setFocusVisible] = React89.useState(false);
    const [hasFocus, setHasFocus] = React89.useState(false);
    const ignoreNextBlur = React89.useRef(false);
    const selectionState = useSelection(props);
    const { selectedOptions } = selectionState;
    const isFirstMount = useFirstMount();
    const [controllableValue, setValue] = useControllableState({
      state: props.value,
      initialState: void 0
    });
    const value = React89.useMemo(() => {
      if (controllableValue !== void 0) {
        return controllableValue;
      }
      if (isFirstMount && props.defaultValue !== void 0) {
        return props.defaultValue;
      }
      const selectedOptionsText = getOptionsMatchingValue((optionValue) => {
        return selectedOptions.includes(optionValue);
      }).map((option) => option.text);
      if (multiselect) {
        return editable ? "" : selectedOptionsText.join(", ");
      }
      return selectedOptionsText[0];
    }, [
      controllableValue,
      editable,
      getOptionsMatchingValue,
      multiselect,
      props.defaultValue,
      selectedOptions
    ]);
    const [open, setOpenState] = useControllableState({
      state: props.open,
      defaultState: props.defaultOpen,
      initialState: false
    });
    const setOpen = React89.useCallback((event, newState) => {
      var _onOpenChange;
      (_onOpenChange = onOpenChange) === null || _onOpenChange === void 0 ? void 0 : _onOpenChange(event, {
        open: newState
      });
      setOpenState(newState);
    }, [
      onOpenChange,
      setOpenState
    ]);
    React89.useEffect(() => {
      if (open && !activeOption) {
        if (!multiselect && selectedOptions.length > 0) {
          const selectedOption = getOptionsMatchingValue((v3) => v3 === selectedOptions[0]).pop();
          selectedOption && setActiveOption(selectedOption);
        } else {
          setActiveOption(getOptionAtIndex(0));
        }
      } else if (!open) {
        setActiveOption(void 0);
      }
    }, [
      open,
      children
    ]);
    return {
      ...optionCollection,
      ...selectionState,
      activeOption,
      appearance,
      focusVisible,
      hasFocus,
      ignoreNextBlur,
      inlinePopup,
      mountNode,
      open,
      setActiveOption,
      setFocusVisible,
      setHasFocus,
      setOpen,
      setValue,
      size: size3,
      value
    };
  };

  // ../node_modules/@fluentui/react-combobox/lib/utils/useComboboxPopup.js
  function useComboboxPopup(props, triggerShorthand, listboxShorthand) {
    var _listboxShorthand, _triggerShorthand;
    const { positioning } = props;
    const fallbackPositions = [
      "above",
      "after",
      "after-top",
      "before",
      "before-top"
    ];
    const popperOptions = {
      position: "below",
      align: "start",
      offset: {
        crossAxis: 0,
        mainAxis: 2
      },
      fallbackPositions,
      ...resolvePositioningShorthand(positioning)
    };
    const { targetRef, containerRef } = usePositioning(popperOptions);
    const listboxRef = useMergedRefs((_listboxShorthand = listboxShorthand) === null || _listboxShorthand === void 0 ? void 0 : _listboxShorthand.ref, containerRef);
    const listbox = listboxShorthand && {
      ...listboxShorthand,
      ref: listboxRef
    };
    return [
      {
        ...triggerShorthand,
        ref: useMergedRefs((_triggerShorthand = triggerShorthand) === null || _triggerShorthand === void 0 ? void 0 : _triggerShorthand.ref, targetRef)
      },
      listbox
    ];
  }

  // ../node_modules/@fluentui/react-combobox/lib/utils/useTriggerListboxSlots.js
  var React90 = __toESM(require_react());
  function useTriggerListboxSlots(props, state, ref, triggerSlot, listboxSlot) {
    var _listboxSlot, _activeOption, _triggerSlot, _listbox, _listbox1, _listbox2;
    const { multiselect } = props;
    const { activeOption, getCount, getIndexOfId, getOptionAtIndex, ignoreNextBlur, open, selectOption, setActiveOption, setFocusVisible, setHasFocus, setOpen } = state;
    const triggerRef = React90.useRef(null);
    const listboxId = useId2("fluent-listbox", (_listboxSlot = listboxSlot) === null || _listboxSlot === void 0 ? void 0 : _listboxSlot.id);
    const listbox = listboxSlot && {
      id: listboxId,
      multiselect,
      tabIndex: void 0,
      ...listboxSlot
    };
    const trigger2 = {
      "aria-expanded": open,
      "aria-activedescendant": open ? (_activeOption = activeOption) === null || _activeOption === void 0 ? void 0 : _activeOption.id : void 0,
      role: "combobox",
      ...triggerSlot,
      // explicitly type the ref as an intersection here to prevent type errors
      // since the `children` prop has mutually incompatible types between input/button
      // functionally both ref and triggerRef will always be the same element type
      ref: useMergedRefs(ref, (_triggerSlot = triggerSlot) === null || _triggerSlot === void 0 ? void 0 : _triggerSlot.ref, triggerRef)
    };
    const listboxOnClick = useEventCallback(mergeCallbacks((event) => {
      var _triggerRef_current;
      (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();
    }, (_listbox = listbox) === null || _listbox === void 0 ? void 0 : _listbox.onClick));
    const listboxOnMouseOver = useEventCallback(mergeCallbacks((event) => {
      setFocusVisible(false);
    }, (_listbox1 = listbox) === null || _listbox1 === void 0 ? void 0 : _listbox1.onMouseOver));
    const listboxOnMouseDown = useEventCallback(mergeCallbacks((event) => {
      ignoreNextBlur.current = true;
    }, (_listbox2 = listbox) === null || _listbox2 === void 0 ? void 0 : _listbox2.onMouseDown));
    if (listbox) {
      listbox.onClick = listboxOnClick;
      listbox.onMouseOver = listboxOnMouseOver;
      listbox.onMouseDown = listboxOnMouseDown;
    }
    trigger2.onBlur = mergeCallbacks((event) => {
      if (!ignoreNextBlur.current) {
        setOpen(event, false);
      }
      ignoreNextBlur.current = false;
      setHasFocus(false);
    }, trigger2.onBlur);
    trigger2.onClick = mergeCallbacks((event) => {
      setOpen(event, !open);
    }, trigger2.onClick);
    trigger2.onFocus = mergeCallbacks((event) => {
      setHasFocus(true);
    }, trigger2.onFocus);
    trigger2.onKeyDown = mergeCallbacks((event) => {
      const action = getDropdownActionFromKey(event, {
        open,
        multiselect
      });
      const maxIndex = getCount() - 1;
      const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;
      let newIndex = activeIndex;
      switch (action) {
        case "Open":
          event.preventDefault();
          setFocusVisible(true);
          setOpen(event, true);
          break;
        case "Close":
          event.stopPropagation();
          event.preventDefault();
          setOpen(event, false);
          break;
        case "CloseSelect":
          var _activeOption2;
          !multiselect && !((_activeOption2 = activeOption) === null || _activeOption2 === void 0 ? void 0 : _activeOption2.disabled) && setOpen(event, false);
        case "Select":
          activeOption && selectOption(event, activeOption);
          event.preventDefault();
          break;
        case "Tab":
          !multiselect && activeOption && selectOption(event, activeOption);
          break;
        default:
          newIndex = getIndexFromAction(action, activeIndex, maxIndex);
      }
      if (newIndex !== activeIndex) {
        event.preventDefault();
        setActiveOption(getOptionAtIndex(newIndex));
        setFocusVisible(true);
      }
    }, trigger2.onKeyDown);
    trigger2.onMouseOver = mergeCallbacks((event) => {
      setFocusVisible(false);
    }, trigger2.onMouseOver);
    return [
      trigger2,
      listbox
    ];
  }

  // ../node_modules/@fluentui/react-combobox/lib/components/Combobox/useCombobox.js
  var useCombobox_unstable = (props, ref) => {
    var _props_input, _listboxSlot;
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsRequired: true,
      supportsSize: true
    });
    const baseState = useComboboxBaseState({
      ...props,
      editable: true
    });
    const { activeOption, clearSelection, getIndexOfId, getOptionsMatchingText, hasFocus, open, selectOption, selectedOptions, setActiveOption, setFocusVisible, setOpen, setValue, value } = baseState;
    const { disabled, freeform, inlinePopup, multiselect } = props;
    const comboId = useId2("combobox-");
    const { primary: triggerNativeProps, root: rootNativeProps } = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: [
        "children",
        "size"
      ]
    });
    const rootRef = React91.useRef(null);
    const triggerRef = React91.useRef(null);
    const [hideActiveDescendant, setHideActiveDescendant] = React91.useState(false);
    const isTyping = React91.useRef(false);
    const [popupDimensions, setPopupDimensions] = React91.useState();
    React91.useEffect(() => {
      if (open) {
        var _rootRef_current, _popupDimensions;
        const width = `${(_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.clientWidth}px`;
        if (width !== ((_popupDimensions = popupDimensions) === null || _popupDimensions === void 0 ? void 0 : _popupDimensions.width)) {
          setPopupDimensions({
            width
          });
        }
      }
    }, [
      open,
      popupDimensions
    ]);
    const getOptionFromInput = (inputValue) => {
      var _inputValue;
      const searchString = (_inputValue = inputValue) === null || _inputValue === void 0 ? void 0 : _inputValue.trim().toLowerCase();
      if (!searchString || searchString.length === 0) {
        return;
      }
      const matcher = (optionText) => optionText.toLowerCase().indexOf(searchString) === 0;
      const matches = getOptionsMatchingText(matcher);
      if (matches.length > 1 && activeOption) {
        const startIndex = getIndexOfId(activeOption.id);
        const nextMatch = matches.find((option) => getIndexOfId(option.id) >= startIndex);
        return nextMatch !== null && nextMatch !== void 0 ? nextMatch : matches[0];
      }
      var _matches_;
      return (_matches_ = matches[0]) !== null && _matches_ !== void 0 ? _matches_ : void 0;
    };
    baseState.selectOption = (ev, option) => {
      setValue(void 0);
      selectOption(ev, option);
    };
    const onTriggerBlur = (ev) => {
      if (!baseState.open && !freeform) {
        var _activeOption;
        if (value && activeOption && value.trim().toLowerCase() === ((_activeOption = activeOption) === null || _activeOption === void 0 ? void 0 : _activeOption.text.toLowerCase())) {
          baseState.selectOption(ev, activeOption);
        }
        setValue(void 0);
      }
    };
    baseState.setOpen = (ev, newState) => {
      if (disabled) {
        return;
      }
      if (!newState && !freeform) {
        setValue(void 0);
      }
      setOpen(ev, newState);
    };
    const onTriggerChange = (ev) => {
      const inputValue = ev.target.value;
      baseState.setValue(inputValue);
      const matchingOption = getOptionFromInput(inputValue);
      setActiveOption(matchingOption);
      setFocusVisible(true);
      if (!multiselect && selectedOptions.length === 1 && (inputValue.length < 1 || !matchingOption)) {
        clearSelection(ev);
      }
    };
    let triggerSlot;
    let listboxSlot;
    triggerSlot = slot_exports.always(props.input, {
      defaultProps: {
        ref: useMergedRefs((_props_input = props.input) === null || _props_input === void 0 ? void 0 : _props_input.ref, triggerRef),
        type: "text",
        value: value !== null && value !== void 0 ? value : "",
        ...triggerNativeProps
      },
      elementType: "input"
    });
    const resolvedPropsOnKeyDown = triggerSlot.onKeyDown;
    triggerSlot.onChange = mergeCallbacks(triggerSlot.onChange, onTriggerChange);
    triggerSlot.onBlur = mergeCallbacks(triggerSlot.onBlur, onTriggerBlur);
    listboxSlot = open || hasFocus ? slot_exports.optional(props.listbox, {
      renderByDefault: true,
      defaultProps: {
        children: props.children,
        style: popupDimensions
      },
      elementType: Listbox
    }) : void 0;
    [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);
    [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);
    if (hideActiveDescendant) {
      triggerSlot["aria-activedescendant"] = void 0;
    }
    const state = {
      components: {
        root: "div",
        input: "input",
        expandIcon: "span",
        listbox: Listbox
      },
      root: slot_exports.always(props.root, {
        defaultProps: {
          "aria-owns": !inlinePopup ? (_listboxSlot = listboxSlot) === null || _listboxSlot === void 0 ? void 0 : _listboxSlot.id : void 0,
          ...rootNativeProps
        },
        elementType: "div"
      }),
      input: triggerSlot,
      listbox: listboxSlot,
      expandIcon: slot_exports.optional(props.expandIcon, {
        renderByDefault: true,
        defaultProps: {
          "aria-expanded": open,
          children: /* @__PURE__ */ React91.createElement(ChevronDownRegular, null),
          role: "button"
        },
        elementType: "span"
      }),
      ...baseState
    };
    state.root.ref = useMergedRefs(state.root.ref, rootRef);
    const defaultOnTriggerKeyDown = state.input.onKeyDown;
    state.input.onKeyDown = useEventCallback((ev) => {
      var _defaultOnTriggerKeyDown;
      if (!open && getDropdownActionFromKey(ev) === "Type") {
        baseState.setOpen(ev, true);
      }
      if (ev.key === ArrowLeft || ev.key === ArrowRight) {
        setHideActiveDescendant(true);
      } else {
        setHideActiveDescendant(false);
      }
      const action = getDropdownActionFromKey(ev, {
        open,
        multiselect
      });
      if (action === "Type") {
        isTyping.current = true;
      } else if (action === "Open" && ev.key !== " " || action === "Next" || action === "Previous" || action === "First" || action === "Last" || action === "PageUp" || action === "PageDown") {
        isTyping.current = false;
      }
      if (freeform && (isTyping.current || !open) && ev.key === " ") {
        var _resolvedPropsOnKeyDown;
        (_resolvedPropsOnKeyDown = resolvedPropsOnKeyDown) === null || _resolvedPropsOnKeyDown === void 0 ? void 0 : _resolvedPropsOnKeyDown(ev);
        return;
      }
      (_defaultOnTriggerKeyDown = defaultOnTriggerKeyDown) === null || _defaultOnTriggerKeyDown === void 0 ? void 0 : _defaultOnTriggerKeyDown(ev);
    });
    const { onMouseDown: onIconMouseDown, onClick: onIconClick } = state.expandIcon || {};
    const onExpandIconMouseDown = useEventCallback(mergeCallbacks(onIconMouseDown, () => {
      if (open) {
        baseState.ignoreNextBlur.current = true;
      }
    }));
    const onExpandIconClick = useEventCallback(mergeCallbacks(onIconClick, (event) => {
      var _triggerRef_current;
      state.setOpen(event, !state.open);
      (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();
      setFocusVisible(false);
    }));
    if (state.expandIcon) {
      state.expandIcon.onMouseDown = onExpandIconMouseDown;
      state.expandIcon.onClick = onExpandIconClick;
      const hasExpandLabel = state.expandIcon["aria-label"] || state.expandIcon["aria-labelledby"];
      const defaultOpenString = "Open";
      if (!hasExpandLabel) {
        if (props["aria-labelledby"]) {
          var _state_expandIcon_id;
          const chevronId = (_state_expandIcon_id = state.expandIcon.id) !== null && _state_expandIcon_id !== void 0 ? _state_expandIcon_id : `${comboId}-chevron`;
          const chevronLabelledBy = `${chevronId} ${state.input["aria-labelledby"]}`;
          state.expandIcon["aria-label"] = defaultOpenString;
          state.expandIcon.id = chevronId;
          state.expandIcon["aria-labelledby"] = chevronLabelledBy;
        } else if (props["aria-label"]) {
          state.expandIcon["aria-label"] = `${defaultOpenString} ${props["aria-label"]}`;
        } else {
          state.expandIcon["aria-label"] = defaultOpenString;
        }
      }
    }
    return state;
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Combobox/renderCombobox.js
  var renderCombobox_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {
      children: /* @__PURE__ */ jsxs(ComboboxContext.Provider, {
        value: contextValues.combobox,
        children: [
          /* @__PURE__ */ jsx(state.input, {}),
          state.expandIcon && /* @__PURE__ */ jsx(state.expandIcon, {}),
          state.listbox && (state.inlinePopup ? /* @__PURE__ */ jsx(state.listbox, {}) : /* @__PURE__ */ jsx(Portal, {
            mountNode: state.mountNode,
            children: /* @__PURE__ */ jsx(state.listbox, {})
          }))
        ]
      })
    });
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Combobox/useComboboxStyles.styles.js
  var comboboxClassNames = {
    root: "fui-Combobox",
    input: "fui-Combobox__input",
    expandIcon: "fui-Combobox__expandIcon",
    listbox: "fui-Combobox__listbox"
  };
  var useStyles8 = /* @__PURE__ */ __styles2({
    root: {
      Bt984gj: "f122n59",
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      B7ck84d: "f1ewtqcl",
      i8kkvl: "f14mj54c",
      mc9l5x: "fwk3njj",
      Budl1dq: "fz17x9o",
      Brf1p80: "f1869bpl",
      Bf4jedk: "f1exfvgq",
      qhf8xq: "f10pi13n",
      Bbr2w1p: "f14a1fxs",
      Bduesf4: "f3e99gv",
      Bpq79vn: "fhljsf7",
      li1rpt: "f1gw3sf2",
      Bsft5z2: "f13zj6fq",
      E3zdtr: "f1mdlcz9",
      Eqx8gd: ["f1a7op3", "f1cjjd47"],
      By385i5: "f1gboi2j",
      B1piin3: ["f1cjjd47", "f1a7op3"],
      Dlnsje: "f145g4dw",
      d9w3h3: ["f1kp91vd", "f1ibwz09"],
      B3778ie: ["f1ibwz09", "f1kp91vd"],
      Bcgy8vk: "f14pi962",
      Bw17bha: "f1lh990p",
      B1q35kw: "f1jc6hxc",
      Gjdm7m: "f13evtba",
      b1kco5: "f1yk9hq",
      Ba2ppi3: "fhwpy7i",
      F2fol1: "f14ee0xe",
      lck23g: "f1xhbsuh",
      df92cz: "fv8e3ye",
      I188md: "ftb5wc6",
      umuwi5: "fjw5xc1",
      Blcqepd: "f1xdyd5c",
      nplu4u: "fatpbeo",
      Bioka5o: "fb7uyps",
      H713fs: "f1cmft4k",
      B9ooomg: "f1x58t8o",
      Bercvud: "f1ibeo51"
    },
    listbox: {
      E5pizo: "f1hg901r",
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      Bxyxcbc: "fmmk62d"
    },
    listboxCollapsed: {
      mc9l5x: "fjseox"
    },
    small: {
      z189sj: ["fdw0yi8", "fk8j09s"]
    },
    medium: {
      z189sj: ["f11gcy0p", "f1ng84yb"]
    },
    large: {
      i8kkvl: "f1rjii52",
      z189sj: ["fw5db7e", "f1uw59to"]
    },
    outline: {
      De3pzq: "fxugw4r",
      B4j52fo: "f192inf7",
      Bekrc4i: ["f5tn483", "f1ojsxk5"],
      Bn0qgzm: "f1vxd6vx",
      ibv6hh: ["f1ojsxk5", "f5tn483"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fj3muxo",
      h3c5rm: ["f1akhkt", "f1lxtadh"],
      B9xav0g: "f1c1zstj",
      zhjwy3: ["f1lxtadh", "f1akhkt"]
    },
    outlineInteractive: {
      Bgoe8wy: "fvcxoqz",
      Bwzppfd: ["f1ub3y4t", "f1m52nbi"],
      oetu4i: "flmw63s",
      gg5e9n: ["f1m52nbi", "f1ub3y4t"],
      B6oc9vd: "fvs00aa",
      ak43y8: ["f1assf6x", "f4ruux4"],
      wmxk5l: "fqhmt4z",
      B50zh58: ["f4ruux4", "f1assf6x"]
    },
    underline: {
      De3pzq: "f1c21dwh",
      Bn0qgzm: "f1vxd6vx",
      oivjwe: "fg706s2",
      B9xav0g: "f1c1zstj",
      Bbmb7ep: ["f1krrbdw", "f1deotkl"],
      Beyfa6y: ["f1deotkl", "f1krrbdw"],
      B7oj6ja: ["f10ostut", "f1ozlkrg"],
      Btl43ni: ["f1ozlkrg", "f10ostut"]
    },
    "filled-lighter": {
      De3pzq: "fxugw4r",
      B4j52fo: "f192inf7",
      Bekrc4i: ["f5tn483", "f1ojsxk5"],
      Bn0qgzm: "f1vxd6vx",
      ibv6hh: ["f1ojsxk5", "f5tn483"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"]
    },
    "filled-darker": {
      De3pzq: "f16xq7d1",
      B4j52fo: "f192inf7",
      Bekrc4i: ["f5tn483", "f1ojsxk5"],
      Bn0qgzm: "f1vxd6vx",
      ibv6hh: ["f1ojsxk5", "f5tn483"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"]
    },
    invalid: {
      tvckwq: "fs4k3qj",
      gk2u95: ["fcee079", "fmyw78r"],
      hhx65j: "f1fgmyf4",
      Bxowmz0: ["fmyw78r", "fcee079"]
    },
    invalidUnderline: {
      hhx65j: "f1fgmyf4"
    },
    disabled: {
      Bceei9c: "fdrzuqr",
      De3pzq: "f1c21dwh",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"]
    }
  }, {
    d: [".f122n59{align-items:center;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f1ewtqcl{box-sizing:border-box;}", ".f14mj54c{column-gap:var(--spacingHorizontalXXS);}", ".fwk3njj{display:inline-grid;}", ".fz17x9o{grid-template-columns:1fr auto;}", ".f1869bpl{justify-content:space-between;}", ".f1exfvgq{min-width:250px;}", ".f10pi13n{position:relative;}", ".f1gw3sf2::after{box-sizing:border-box;}", '.f13zj6fq::after{content:"";}', ".f1mdlcz9::after{position:absolute;}", ".f1a7op3::after{left:-1px;}", ".f1cjjd47::after{right:-1px;}", ".f1gboi2j::after{bottom:-1px;}", ".f145g4dw::after{height:max(2px, var(--borderRadiusMedium));}", ".f1kp91vd::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1ibwz09::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f14pi962::after{border-bottom-width:var(--strokeWidthThick);}", ".f1lh990p::after{border-bottom-style:solid;}", ".f1jc6hxc::after{border-bottom-color:var(--colorCompoundBrandStroke);}", ".f13evtba::after{clip-path:inset(calc(100% - 2px) 0 0 0);}", ".f1yk9hq::after{transform:scaleX(0);}", ".fhwpy7i::after{transition-property:transform;}", ".f14ee0xe::after{transition-duration:var(--durationUltraFast);}", ".f1xhbsuh::after{transition-delay:var(--curveAccelerateMid);}", ".f1hg901r{box-shadow:var(--shadow16);}", ".fmmk62d{max-height:80vh;}", ".fjseox{display:none;}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".f11gcy0p{padding-right:var(--spacingHorizontalMNudge);}", ".f1ng84yb{padding-left:var(--spacingHorizontalMNudge);}", ".f1rjii52{column-gap:var(--spacingHorizontalSNudge);}", ".fw5db7e{padding-right:var(--spacingHorizontalM);}", ".f1uw59to{padding-left:var(--spacingHorizontalM);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f192inf7{border-top-width:var(--strokeWidthThin);}", ".f5tn483{border-right-width:var(--strokeWidthThin);}", ".f1ojsxk5{border-left-width:var(--strokeWidthThin);}", ".f1vxd6vx{border-bottom-width:var(--strokeWidthThin);}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".fj3muxo{border-top-color:var(--colorNeutralStroke1);}", ".f1akhkt{border-right-color:var(--colorNeutralStroke1);}", ".f1lxtadh{border-left-color:var(--colorNeutralStroke1);}", ".f1c1zstj{border-bottom-color:var(--colorNeutralStrokeAccessible);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1krrbdw{border-bottom-right-radius:0;}", ".f1deotkl{border-bottom-left-radius:0;}", ".f10ostut{border-top-right-radius:0;}", ".f1ozlkrg{border-top-left-radius:0;}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".f16xq7d1{background-color:var(--colorNeutralBackground3);}", ".fs4k3qj:not(:focus-within),.fs4k3qj:hover:not(:focus-within){border-top-color:var(--colorPaletteRedBorder2);}", ".fcee079:not(:focus-within),.fcee079:hover:not(:focus-within){border-right-color:var(--colorPaletteRedBorder2);}", ".fmyw78r:not(:focus-within),.fmyw78r:hover:not(:focus-within){border-left-color:var(--colorPaletteRedBorder2);}", ".f1fgmyf4:not(:focus-within),.f1fgmyf4:hover:not(:focus-within){border-bottom-color:var(--colorPaletteRedBorder2);}", ".fdrzuqr{cursor:not-allowed;}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}"],
    w: [".f14a1fxs:focus-within{outline-width:2px;}", ".f3e99gv:focus-within{outline-style:solid;}", ".fhljsf7:focus-within{outline-color:transparent;}", ".fjw5xc1:focus-within::after{transform:scaleX(1);}", ".f1xdyd5c:focus-within::after{transition-property:transform;}", ".fatpbeo:focus-within::after{transition-duration:var(--durationNormal);}", ".fb7uyps:focus-within::after{transition-delay:var(--curveDecelerateMid);}", ".f1ibeo51:focus-within:active::after{border-bottom-color:var(--colorCompoundBrandStrokePressed);}"],
    m: [["@media screen and (prefers-reduced-motion: reduce){.fv8e3ye::after{transition-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.ftb5wc6::after{transition-delay:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.f1cmft4k:focus-within::after{transition-duration:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media screen and (prefers-reduced-motion: reduce){.f1x58t8o:focus-within::after{transition-delay:0.01ms;}}", {
      m: "screen and (prefers-reduced-motion: reduce)"
    }], ["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]],
    h: [".fvcxoqz:hover{border-top-color:var(--colorNeutralStroke1Hover);}", ".f1ub3y4t:hover{border-right-color:var(--colorNeutralStroke1Hover);}", ".f1m52nbi:hover{border-left-color:var(--colorNeutralStroke1Hover);}", ".flmw63s:hover{border-bottom-color:var(--colorNeutralStrokeAccessible);}"],
    a: [".fvs00aa:active{border-top-color:var(--colorNeutralStroke1Pressed);}", ".f1assf6x:active{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f4ruux4:active{border-left-color:var(--colorNeutralStroke1Pressed);}", ".fqhmt4z:active{border-bottom-color:var(--colorNeutralStrokeAccessible);}"]
  });
  var useInputStyles2 = /* @__PURE__ */ __styles2({
    input: {
      De3pzq: "f1c21dwh",
      B4j52fo: "fre7gi1",
      Bekrc4i: ["f1358rze", "f1rvrf73"],
      Bn0qgzm: "fqdk4by",
      ibv6hh: ["f1rvrf73", "f1358rze"],
      sj55zd: "f19n0e5",
      Bahqtrf: "fk6fouc",
      Brovlpu: "ftqa4ok",
      yvdlaj: "fwyc1cq",
      B3o7kgh: "f13ta7ih"
    },
    small: {
      Bqenvij: "f50nw0v",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm",
      z8tnut: "f1g0x7ka",
      z189sj: ["fhxju0i", "f1cnd47f"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1xile11", "fqznh8f"]
    },
    medium: {
      Bqenvij: "f1tvdnth",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi",
      z8tnut: "f1g0x7ka",
      z189sj: ["fhxju0i", "f1cnd47f"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1e60jzv", "f135dnwl"]
    },
    large: {
      Bqenvij: "f1ihhdec",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "figsok6",
      Bg96gwp: "faaz57k",
      z8tnut: "f1g0x7ka",
      z189sj: ["fhxju0i", "f1cnd47f"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["fnphzt9", "flt1dlf"]
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      De3pzq: "f1c21dwh",
      Bceei9c: "fdrzuqr",
      yvdlaj: "fahhnxm"
    }
  }, {
    d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".fre7gi1{border-top-width:0;}", ".f1358rze{border-right-width:0;}", ".f1rvrf73{border-left-width:0;}", ".fqdk4by{border-bottom-width:0;}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fwyc1cq::-webkit-input-placeholder{color:var(--colorNeutralForeground4);}", ".fwyc1cq::-moz-placeholder{color:var(--colorNeutralForeground4);}", ".f13ta7ih::-webkit-input-placeholder{opacity:1;}", ".f13ta7ih::-moz-placeholder{opacity:1;}", ".f50nw0v{height:22px;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1g0x7ka{padding-top:0;}", ".fhxju0i{padding-right:0;}", ".f1cnd47f{padding-left:0;}", ".f1qch9an{padding-bottom:0;}", ".f1xile11{padding-left:calc(var(--spacingHorizontalSNudge) + var(--spacingHorizontalXXS));}", ".fqznh8f{padding-right:calc(var(--spacingHorizontalSNudge) + var(--spacingHorizontalXXS));}", ".f1tvdnth{height:30px;}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f1e60jzv{padding-left:calc(var(--spacingHorizontalMNudge) + var(--spacingHorizontalXXS));}", ".f135dnwl{padding-right:calc(var(--spacingHorizontalMNudge) + var(--spacingHorizontalXXS));}", ".f1ihhdec{height:38px;}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fnphzt9{padding-left:calc(var(--spacingHorizontalM) + var(--spacingHorizontalSNudge));}", ".flt1dlf{padding-right:calc(var(--spacingHorizontalM) + var(--spacingHorizontalSNudge));}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".fahhnxm::-webkit-input-placeholder{color:var(--colorNeutralForegroundDisabled);}", ".fahhnxm::-moz-placeholder{color:var(--colorNeutralForegroundDisabled);}"],
    f: [".ftqa4ok:focus{outline-style:none;}"]
  });
  var useIconStyles3 = /* @__PURE__ */ __styles2({
    icon: {
      B7ck84d: "f1ewtqcl",
      sj55zd: "fxkbij4",
      Bceei9c: "f1k6fduh",
      mc9l5x: "ftgm304",
      Be2twd7: "f1pp30po",
      Bo70h7d: "fvc9v3g"
    },
    small: {
      Be2twd7: "f4ybsrx",
      Frg6f3: ["f1h9en5y", "f1xk557c"]
    },
    medium: {
      Be2twd7: "fe5j1ua",
      Frg6f3: ["f1h9en5y", "f1xk557c"]
    },
    large: {
      Be2twd7: "f1rt2boy",
      Frg6f3: ["f1t5qyk5", "f1ikr372"]
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      Bceei9c: "fdrzuqr"
    }
  }, {
    d: [".f1ewtqcl{box-sizing:border-box;}", ".fxkbij4{color:var(--colorNeutralStrokeAccessible);}", ".f1k6fduh{cursor:pointer;}", ".ftgm304{display:block;}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".fvc9v3g svg{display:block;}", ".f4ybsrx{font-size:16px;}", ".f1h9en5y{margin-left:var(--spacingHorizontalXXS);}", ".f1xk557c{margin-right:var(--spacingHorizontalXXS);}", ".fe5j1ua{font-size:20px;}", ".f1rt2boy{font-size:24px;}", ".f1t5qyk5{margin-left:var(--spacingHorizontalSNudge);}", ".f1ikr372{margin-right:var(--spacingHorizontalSNudge);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}"]
  });
  var useComboboxStyles_unstable = (state) => {
    const {
      appearance,
      open,
      size: size3
    } = state;
    const invalid = `${state.input["aria-invalid"]}` === "true";
    const disabled = state.input.disabled;
    const styles4 = useStyles8();
    const iconStyles = useIconStyles3();
    const inputStyles = useInputStyles2();
    state.root.className = mergeClasses(comboboxClassNames.root, styles4.root, styles4[appearance], styles4[size3], !disabled && appearance === "outline" && styles4.outlineInteractive, invalid && appearance !== "underline" && styles4.invalid, invalid && appearance === "underline" && styles4.invalidUnderline, disabled && styles4.disabled, state.root.className);
    state.input.className = mergeClasses(comboboxClassNames.input, inputStyles.input, inputStyles[size3], disabled && inputStyles.disabled, state.input.className);
    if (state.listbox) {
      state.listbox.className = mergeClasses(comboboxClassNames.listbox, styles4.listbox, !open && styles4.listboxCollapsed, state.listbox.className);
    }
    if (state.expandIcon) {
      state.expandIcon.className = mergeClasses(comboboxClassNames.expandIcon, iconStyles.icon, iconStyles[size3], disabled && iconStyles.disabled, state.expandIcon.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-combobox/lib/components/Combobox/Combobox.js
  var Combobox = /* @__PURE__ */ React92.forwardRef((props, ref) => {
    const state = useCombobox_unstable(props, ref);
    const contextValues = useComboboxContextValues(state);
    useComboboxStyles_unstable(state);
    useCustomStyleHook("useComboboxStyles_unstable")(state);
    return renderCombobox_unstable(state, contextValues);
  });
  Combobox.displayName = "Combobox";

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/Divider.js
  var React94 = __toESM(require_react());

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/renderDivider.js
  var renderDivider_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {
      children: state.root.children !== void 0 && /* @__PURE__ */ jsx(state.wrapper, {
        children: state.root.children
      })
    });
  };

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/useDivider.js
  var React93 = __toESM(require_react());
  var useDivider_unstable = (props, ref) => {
    const { alignContent = "center", appearance = "default", inset: inset2 = false, vertical = false, wrapper } = props;
    const dividerId = useId2("divider-");
    return {
      // Props passed at the top-level
      alignContent,
      appearance,
      inset: inset2,
      vertical,
      // Slots definition
      components: {
        root: "div",
        wrapper: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        role: "separator",
        "aria-orientation": vertical ? "vertical" : "horizontal",
        "aria-labelledby": props.children ? dividerId : void 0,
        ...props,
        ref
      }), {
        elementType: "div"
      }),
      wrapper: slot_exports.always(wrapper, {
        defaultProps: {
          id: dividerId,
          children: props.children
        },
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/useDividerStyles.styles.js
  var dividerClassNames = {
    root: "fui-Divider",
    wrapper: "fui-Divider__wrapper"
  };
  var useBaseStyles = /* @__PURE__ */ __styles2({
    base: {
      Bt984gj: "f122n59",
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Beiy3e4: "f1063pyq",
      Bh6795r: "fqerorx",
      qhf8xq: "f10pi13n",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm",
      fsow6f: "f17mccla",
      Bcvre1j: "fyl8oag",
      Br0sdwz: "f16vkdww",
      Bn78ew0: "fhsnbul",
      li1rpt: "f1gw3sf2",
      ap17g6: "f1ly5f7u",
      B771hl4: "f1s3tz6t"
    },
    childless: {
      susq4k: "f1kyqvp9",
      Bicfajf: ["fzynn9s", "f1z0ukd1"],
      jwcpgy: ["fekrn8e", "ftdg338"],
      B4rk6o: "fesgyo"
    },
    start: {
      Bsft5z2: "f13zj6fq"
    },
    center: {
      Ftih45: "f1wl9k8s",
      Bsft5z2: "f13zj6fq"
    },
    end: {
      Ftih45: "f1wl9k8s"
    },
    brand: {
      sj55zd: "f16muhyy",
      Bq4z7u6: "fcbuu2a",
      Bk5zm6e: ["f1wdw2dr", "f1ttio3w"],
      Bqjgrrk: "f1582fpk",
      Bm6vgfq: ["f1ttio3w", "f1wdw2dr"],
      B0n5ga8: "f1ahrvm8",
      s924m2: ["f1cd3wbc", "f17hbk9y"],
      B1q35kw: "fvrapl0",
      Gp14am: ["f17hbk9y", "f1cd3wbc"]
    },
    "default": {
      sj55zd: "fkfq4zb",
      Bq4z7u6: "f1vccso1",
      Bk5zm6e: ["f1geml7w", "fjml6kk"],
      Bqjgrrk: "f1r7kh1m",
      Bm6vgfq: ["fjml6kk", "f1geml7w"],
      B0n5ga8: "f16j7guv",
      s924m2: ["fx01ahm", "fj1a37q"],
      B1q35kw: "fl8d8yv",
      Gp14am: ["fj1a37q", "fx01ahm"]
    },
    subtle: {
      sj55zd: "fkfq4zb",
      Bq4z7u6: "f5g06un",
      Bk5zm6e: ["f13sxdku", "f1n015lb"],
      Bqjgrrk: "f1x6bl8t",
      Bm6vgfq: ["f1n015lb", "f13sxdku"],
      B0n5ga8: "fvod1wy",
      s924m2: ["fwslg65", "flk0e17"],
      B1q35kw: "f103fvts",
      Gp14am: ["flk0e17", "fwslg65"]
    },
    strong: {
      sj55zd: "fkfq4zb",
      Bq4z7u6: "f10tv6oz",
      Bk5zm6e: ["f16xp3sf", "f1seuxxq"],
      Bqjgrrk: "fwrmqbx",
      Bm6vgfq: ["f1seuxxq", "f16xp3sf"],
      B0n5ga8: "ft83z1f",
      s924m2: ["f1g4150c", "f192dr6e"],
      B1q35kw: "f1qnawh6",
      Gp14am: ["f192dr6e", "f1g4150c"]
    }
  }, {
    d: [".f122n59{align-items:center;}", ".f1ewtqcl{box-sizing:border-box;}", ".f22iagw{display:flex;}", ".f1063pyq{flex-direction:row;}", ".fqerorx{flex-grow:1;}", ".f10pi13n{position:relative;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f17mccla{text-align:center;}", ".fyl8oag::before{box-sizing:border-box;}", ".f16vkdww::before{display:flex;}", ".fhsnbul::before{flex-grow:1;}", ".f1gw3sf2::after{box-sizing:border-box;}", ".f1ly5f7u::after{display:flex;}", ".f1s3tz6t::after{flex-grow:1;}", ".f1kyqvp9::before{margin-bottom:0;}", ".fzynn9s::before{margin-right:0;}", ".f1z0ukd1::before{margin-left:0;}", ".fekrn8e::after{margin-left:0;}", ".ftdg338::after{margin-right:0;}", ".fesgyo::after{margin-top:0;}", '.f13zj6fq::after{content:"";}', '.f1wl9k8s::before{content:"";}', ".f16muhyy{color:var(--colorBrandForeground1);}", ".fcbuu2a::before{border-top-color:var(--colorBrandStroke1);}", ".f1wdw2dr::before{border-right-color:var(--colorBrandStroke1);}", ".f1ttio3w::before{border-left-color:var(--colorBrandStroke1);}", ".f1582fpk::before{border-bottom-color:var(--colorBrandStroke1);}", ".f1ahrvm8::after{border-top-color:var(--colorBrandStroke1);}", ".f1cd3wbc::after{border-right-color:var(--colorBrandStroke1);}", ".f17hbk9y::after{border-left-color:var(--colorBrandStroke1);}", ".fvrapl0::after{border-bottom-color:var(--colorBrandStroke1);}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".f1vccso1::before{border-top-color:var(--colorNeutralStroke2);}", ".f1geml7w::before{border-right-color:var(--colorNeutralStroke2);}", ".fjml6kk::before{border-left-color:var(--colorNeutralStroke2);}", ".f1r7kh1m::before{border-bottom-color:var(--colorNeutralStroke2);}", ".f16j7guv::after{border-top-color:var(--colorNeutralStroke2);}", ".fx01ahm::after{border-right-color:var(--colorNeutralStroke2);}", ".fj1a37q::after{border-left-color:var(--colorNeutralStroke2);}", ".fl8d8yv::after{border-bottom-color:var(--colorNeutralStroke2);}", ".f5g06un::before{border-top-color:var(--colorNeutralStroke3);}", ".f13sxdku::before{border-right-color:var(--colorNeutralStroke3);}", ".f1n015lb::before{border-left-color:var(--colorNeutralStroke3);}", ".f1x6bl8t::before{border-bottom-color:var(--colorNeutralStroke3);}", ".fvod1wy::after{border-top-color:var(--colorNeutralStroke3);}", ".fwslg65::after{border-right-color:var(--colorNeutralStroke3);}", ".flk0e17::after{border-left-color:var(--colorNeutralStroke3);}", ".f103fvts::after{border-bottom-color:var(--colorNeutralStroke3);}", ".f10tv6oz::before{border-top-color:var(--colorNeutralStroke1);}", ".f16xp3sf::before{border-right-color:var(--colorNeutralStroke1);}", ".f1seuxxq::before{border-left-color:var(--colorNeutralStroke1);}", ".fwrmqbx::before{border-bottom-color:var(--colorNeutralStroke1);}", ".ft83z1f::after{border-top-color:var(--colorNeutralStroke1);}", ".f1g4150c::after{border-right-color:var(--colorNeutralStroke1);}", ".f192dr6e::after{border-left-color:var(--colorNeutralStroke1);}", ".f1qnawh6::after{border-bottom-color:var(--colorNeutralStroke1);}"]
  });
  var useHorizontalStyles = /* @__PURE__ */ __styles2({
    base: {
      a9b677: "fly5x3f",
      Bdkvgpv: "f163fonl",
      B0qfbqy: "f51yk4v",
      pbipgd: "f13rof3u",
      Bm2nyyq: "f8rth92",
      xrcqlc: "f6czdpx",
      i5u598: "f1iyka9k"
    },
    inset: {
      uwmqm3: ["fjlbh76", "f11qrl6u"],
      z189sj: ["f11qrl6u", "fjlbh76"]
    },
    start: {
      Ftih45: "f1wl9k8s",
      Bicfajf: ["f1ojjlep", "fk1kexq"],
      Bxwl2t9: "f1he2m4d",
      jwcpgy: ["f12w1bnb", "f1558wlj"]
    },
    center: {
      Bicfajf: ["f1ojjlep", "fk1kexq"],
      jwcpgy: ["f12w1bnb", "f1558wlj"]
    },
    end: {
      Bicfajf: ["f1ojjlep", "fk1kexq"],
      Bsft5z2: "f13zj6fq",
      jwcpgy: ["f12w1bnb", "f1558wlj"],
      Iy66sp: "f1ayce8x"
    }
  }, {
    d: [".fly5x3f{width:100%;}", ".f163fonl::before{border-top-style:solid;}", ".f51yk4v::before{border-top-width:var(--strokeWidthThin);}", ".f13rof3u::before{min-width:8px;}", ".f8rth92::after{border-top-style:solid;}", ".f6czdpx::after{border-top-width:var(--strokeWidthThin);}", ".f1iyka9k::after{min-width:8px;}", ".fjlbh76{padding-left:12px;}", ".f11qrl6u{padding-right:12px;}", '.f1wl9k8s::before{content:"";}', ".f1ojjlep::before{margin-right:12px;}", ".fk1kexq::before{margin-left:12px;}", ".f1he2m4d::before{max-width:8px;}", ".f12w1bnb::after{margin-left:12px;}", ".f1558wlj::after{margin-right:12px;}", '.f13zj6fq::after{content:"";}', ".f1ayce8x::after{max-width:8px;}"]
  });
  var useVerticalStyles = /* @__PURE__ */ __styles2({
    base: {
      Beiy3e4: "f1vx9l62",
      sshi5w: "f16gbxbe",
      m598lv: ["f1yq6w5o", "f1jpmc5p"],
      B4f6apu: ["f9sc749", "f1x8pvcy"],
      zkzzav: "fhkwbjy",
      Barhvk9: ["flthirb", "ftkbnf5"],
      Ihftqj: ["f13hvwk3", "f1en4csx"],
      Bde111x: "f19onpk6"
    },
    inset: {
      B6of3ja: "f1xdg43u",
      jrapky: "f1jlhsmd"
    },
    withChildren: {
      sshi5w: "f1tjaq3g"
    },
    start: {
      Ftih45: "f1wl9k8s",
      susq4k: "fg2pwug",
      Bbdr6tz: "fkjtzyi",
      B4rk6o: "f8vk40g"
    },
    center: {
      susq4k: "fg2pwug",
      B4rk6o: "f8vk40g"
    },
    end: {
      susq4k: "fg2pwug",
      Bsft5z2: "f13zj6fq",
      B4rk6o: "f8vk40g",
      gn64ia: "fqg5mu5"
    }
  }, {
    d: [".f1vx9l62{flex-direction:column;}", ".f16gbxbe{min-height:20px;}", ".f1yq6w5o::before{border-right-style:solid;}", ".f1jpmc5p::before{border-left-style:solid;}", ".f9sc749::before{border-right-width:var(--strokeWidthThin);}", ".f1x8pvcy::before{border-left-width:var(--strokeWidthThin);}", ".fhkwbjy::before{min-height:8px;}", ".flthirb::after{border-right-style:solid;}", ".ftkbnf5::after{border-left-style:solid;}", ".f13hvwk3::after{border-right-width:var(--strokeWidthThin);}", ".f1en4csx::after{border-left-width:var(--strokeWidthThin);}", ".f19onpk6::after{min-height:8px;}", ".f1xdg43u{margin-top:12px;}", ".f1jlhsmd{margin-bottom:12px;}", ".f1tjaq3g{min-height:84px;}", '.f1wl9k8s::before{content:"";}', ".fg2pwug::before{margin-bottom:12px;}", ".fkjtzyi::before{max-height:8px;}", ".f8vk40g::after{margin-top:12px;}", '.f13zj6fq::after{content:"";}', ".fqg5mu5::after{max-height:8px;}"]
  });
  var useDividerStyles_unstable = (state) => {
    const baseStyles = useBaseStyles();
    const horizontalStyles = useHorizontalStyles();
    const verticalStyles = useVerticalStyles();
    const {
      alignContent,
      appearance,
      inset: inset2,
      vertical
    } = state;
    state.root.className = mergeClasses(
      dividerClassNames.root,
      // Base styles
      baseStyles.base,
      baseStyles[alignContent],
      appearance && baseStyles[appearance],
      // Horizontal styles
      !vertical && horizontalStyles.base,
      !vertical && inset2 && horizontalStyles.inset,
      !vertical && horizontalStyles[alignContent],
      // Vertical styles
      vertical && verticalStyles.base,
      vertical && inset2 && verticalStyles.inset,
      vertical && verticalStyles[alignContent],
      vertical && state.root.children !== void 0 && verticalStyles.withChildren,
      // Childless styles
      state.root.children === void 0 && baseStyles.childless,
      // User provided class name
      state.root.className
    );
    if (state.wrapper) {
      state.wrapper.className = mergeClasses(dividerClassNames.wrapper, state.wrapper.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/Divider.js
  var Divider = /* @__PURE__ */ React94.forwardRef((props, ref) => {
    const state = useDivider_unstable(props, ref);
    useDividerStyles_unstable(state);
    useCustomStyleHook("useDividerStyles_unstable")(state);
    return renderDivider_unstable(state);
  });
  Divider.displayName = "Divider";

  // ../node_modules/@fluentui/react-input/lib/components/Input/Input.js
  var React96 = __toESM(require_react());

  // ../node_modules/@fluentui/react-input/lib/components/Input/useInput.js
  var React95 = __toESM(require_react());
  var useInput_unstable = (props, ref) => {
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsRequired: true,
      supportsSize: true
    });
    const overrides = useOverrides();
    var _overrides_inputDefaultAppearance;
    const { size: size3 = "medium", appearance = (_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : "outline", onChange } = props;
    if (appearance === "filled-darker-shadow" || appearance === "filled-lighter-shadow") {
      console.error("The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the future.");
    }
    const [value, setValue] = useControllableState({
      state: props.value,
      defaultState: props.defaultValue,
      initialState: ""
    });
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: [
        "size",
        "onChange",
        "value",
        "defaultValue"
      ]
    });
    const state = {
      size: size3,
      appearance,
      components: {
        root: "span",
        input: "input",
        contentBefore: "span",
        contentAfter: "span"
      },
      input: slot_exports.always(props.input, {
        defaultProps: {
          type: "text",
          ref,
          ...nativeProps.primary
        },
        elementType: "input"
      }),
      contentAfter: slot_exports.optional(props.contentAfter, {
        elementType: "span"
      }),
      contentBefore: slot_exports.optional(props.contentBefore, {
        elementType: "span"
      }),
      root: slot_exports.always(props.root, {
        defaultProps: nativeProps.root,
        elementType: "span"
      })
    };
    state.input.value = value;
    state.input.onChange = useEventCallback((ev) => {
      var _onChange;
      const newValue = ev.target.value;
      (_onChange = onChange) === null || _onChange === void 0 ? void 0 : _onChange(ev, {
        value: newValue
      });
      setValue(newValue);
    });
    return state;
  };

  // ../node_modules/@fluentui/react-input/lib/components/Input/renderInput.js
  var renderInput_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.contentBefore && /* @__PURE__ */ jsx(state.contentBefore, {}),
        /* @__PURE__ */ jsx(state.input, {}),
        state.contentAfter && /* @__PURE__ */ jsx(state.contentAfter, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-input/lib/components/Input/useInputStyles.styles.js
  var inputClassNames = {
    root: "fui-Input",
    input: "fui-Input__input",
    contentBefore: "fui-Input__contentBefore",
    contentAfter: "fui-Input__contentAfter"
  };
  var useRootClassName4 = /* @__PURE__ */ __resetStyles2("r1jtohuq", "rl1z2p5", {
    r: [".r1jtohuq{display:inline-flex;align-items:center;flex-wrap:nowrap;gap:var(--spacingHorizontalXXS);border-radius:var(--borderRadiusMedium);position:relative;box-sizing:border-box;min-height:32px;padding:0 var(--spacingHorizontalMNudge);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);background-color:var(--colorNeutralBackground1);border:1px solid var(--colorNeutralStroke1);border-bottom-color:var(--colorNeutralStrokeAccessible);}", '.r1jtohuq::after{box-sizing:border-box;content:"";position:absolute;left:-1px;bottom:-1px;right:-1px;height:max(2px, var(--borderRadiusMedium));border-bottom-left-radius:var(--borderRadiusMedium);border-bottom-right-radius:var(--borderRadiusMedium);border-bottom:2px solid var(--colorCompoundBrandStroke);clip-path:inset(calc(100% - 2px) 0 0 0);transform:scaleX(0);transition-property:transform;transition-duration:var(--durationUltraFast);transition-delay:var(--curveAccelerateMid);}', ".r1jtohuq:focus-within::after{transform:scaleX(1);transition-property:transform;transition-duration:var(--durationNormal);transition-delay:var(--curveDecelerateMid);}", ".r1jtohuq:focus-within:active::after{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".r1jtohuq:focus-within{outline:2px solid transparent;}", ".rl1z2p5{display:inline-flex;align-items:center;flex-wrap:nowrap;gap:var(--spacingHorizontalXXS);border-radius:var(--borderRadiusMedium);position:relative;box-sizing:border-box;min-height:32px;padding:0 var(--spacingHorizontalMNudge);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);background-color:var(--colorNeutralBackground1);border:1px solid var(--colorNeutralStroke1);border-bottom-color:var(--colorNeutralStrokeAccessible);}", '.rl1z2p5::after{box-sizing:border-box;content:"";position:absolute;right:-1px;bottom:-1px;left:-1px;height:max(2px, var(--borderRadiusMedium));border-bottom-right-radius:var(--borderRadiusMedium);border-bottom-left-radius:var(--borderRadiusMedium);border-bottom:2px solid var(--colorCompoundBrandStroke);clip-path:inset(calc(100% - 2px) 0 0 0);transform:scaleX(0);transition-property:transform;transition-duration:var(--durationUltraFast);transition-delay:var(--curveAccelerateMid);}', ".rl1z2p5:focus-within::after{transform:scaleX(1);transition-property:transform;transition-duration:var(--durationNormal);transition-delay:var(--curveDecelerateMid);}", ".rl1z2p5:focus-within:active::after{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".rl1z2p5:focus-within{outline:2px solid transparent;}"],
    s: ["@media screen and (prefers-reduced-motion: reduce){.r1jtohuq::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", "@media screen and (prefers-reduced-motion: reduce){.r1jtohuq:focus-within::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", "@media screen and (prefers-reduced-motion: reduce){.rl1z2p5::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", "@media screen and (prefers-reduced-motion: reduce){.rl1z2p5:focus-within::after{transition-duration:0.01ms;transition-delay:0.01ms;}}"]
  });
  var useRootStyles5 = /* @__PURE__ */ __styles2({
    small: {
      sshi5w: "f1pha7fy",
      uwmqm3: ["fk8j09s", "fdw0yi8"],
      z189sj: ["fdw0yi8", "fk8j09s"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    medium: {},
    large: {
      sshi5w: "f1w5jphr",
      uwmqm3: ["f1uw59to", "fw5db7e"],
      z189sj: ["fw5db7e", "f1uw59to"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "figsok6",
      Bg96gwp: "faaz57k",
      i8kkvl: "f1rjii52",
      Belr9w4: "f1r7g2jn"
    },
    outline: {},
    outlineInteractive: {
      Bgoe8wy: "fvcxoqz",
      Bwzppfd: ["f1ub3y4t", "f1m52nbi"],
      oetu4i: "f1l4zc64",
      gg5e9n: ["f1m52nbi", "f1ub3y4t"],
      Drbcw7: "f8vnjqi",
      udz0bu: ["fz1etlk", "f1hc16gm"],
      Be8ivqh: "f1klwx88",
      ofdepl: ["f1hc16gm", "fz1etlk"]
    },
    underline: {
      De3pzq: "f1c21dwh",
      Bbmb7ep: ["f1krrbdw", "f1deotkl"],
      Beyfa6y: ["f1deotkl", "f1krrbdw"],
      B7oj6ja: ["f10ostut", "f1ozlkrg"],
      Btl43ni: ["f1ozlkrg", "f10ostut"],
      icvyot: "f1ern45e",
      vrafjx: ["f1n71otn", "f1deefiw"],
      wvpqe5: ["f1deefiw", "f1n71otn"],
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      B1piin3: ["f15yvnhg", "f1n6gb5g"]
    },
    underlineInteractive: {
      oetu4i: "f1l4zc64",
      Be8ivqh: "f1klwx88",
      B3778ie: ["f1nf3wye", "feulmo5"],
      d9w3h3: ["feulmo5", "f1nf3wye"],
      Bl18szs: ["f18vqdqu", "f53nyzz"],
      B4j8arr: ["f53nyzz", "f18vqdqu"]
    },
    filled: {
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"]
    },
    filledInteractive: {
      q7v0qe: "ftmjh5b",
      kmh5ft: ["f17blpuu", "fsrcdbj"],
      nagaa4: "f1tpwn32",
      B1yhkcb: ["fsrcdbj", "f17blpuu"]
    },
    invalid: {
      tvckwq: "fs4k3qj",
      gk2u95: ["fcee079", "fmyw78r"],
      hhx65j: "f1fgmyf4",
      Bxowmz0: ["fmyw78r", "fcee079"]
    },
    "filled-darker": {
      De3pzq: "f16xq7d1"
    },
    "filled-lighter": {
      De3pzq: "fxugw4r"
    },
    "filled-darker-shadow": {
      De3pzq: "f16xq7d1",
      E5pizo: "fyed02w"
    },
    "filled-lighter-shadow": {
      De3pzq: "fxugw4r",
      E5pizo: "fyed02w"
    },
    disabled: {
      Bceei9c: "fdrzuqr",
      De3pzq: "f1c21dwh",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"],
      Bsft5z2: "fhr9occ",
      Bduesf4: "f99w1ws"
    }
  }, {
    d: [".f1pha7fy{min-height:24px;}", ".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1w5jphr{min-height:40px;}", ".f1uw59to{padding-left:var(--spacingHorizontalM);}", ".fw5db7e{padding-right:var(--spacingHorizontalM);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".f1rjii52{column-gap:var(--spacingHorizontalSNudge);}", ".f1r7g2jn{row-gap:var(--spacingHorizontalSNudge);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1krrbdw{border-bottom-right-radius:0;}", ".f1deotkl{border-bottom-left-radius:0;}", ".f10ostut{border-top-right-radius:0;}", ".f1ozlkrg{border-top-left-radius:0;}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1n6gb5g::after{left:0;}", ".f15yvnhg::after{right:0;}", ".f1nf3wye::after{border-bottom-right-radius:0;}", ".feulmo5::after{border-bottom-left-radius:0;}", ".f18vqdqu::after{border-top-right-radius:0;}", ".f53nyzz::after{border-top-left-radius:0;}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".fs4k3qj:not(:focus-within),.fs4k3qj:hover:not(:focus-within){border-top-color:var(--colorPaletteRedBorder2);}", ".fcee079:not(:focus-within),.fcee079:hover:not(:focus-within){border-right-color:var(--colorPaletteRedBorder2);}", ".fmyw78r:not(:focus-within),.fmyw78r:hover:not(:focus-within){border-left-color:var(--colorPaletteRedBorder2);}", ".f1fgmyf4:not(:focus-within),.f1fgmyf4:hover:not(:focus-within){border-bottom-color:var(--colorPaletteRedBorder2);}", ".f16xq7d1{background-color:var(--colorNeutralBackground3);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".fyed02w{box-shadow:var(--shadow2);}", ".fdrzuqr{cursor:not-allowed;}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fhr9occ::after{content:unset;}"],
    h: [".fvcxoqz:hover{border-top-color:var(--colorNeutralStroke1Hover);}", ".f1ub3y4t:hover{border-right-color:var(--colorNeutralStroke1Hover);}", ".f1m52nbi:hover{border-left-color:var(--colorNeutralStroke1Hover);}", ".f1l4zc64:hover{border-bottom-color:var(--colorNeutralStrokeAccessibleHover);}", ".ftmjh5b:hover,.ftmjh5b:focus-within{border-top-color:var(--colorTransparentStrokeInteractive);}", ".f17blpuu:hover,.f17blpuu:focus-within{border-right-color:var(--colorTransparentStrokeInteractive);}", ".fsrcdbj:hover,.fsrcdbj:focus-within{border-left-color:var(--colorTransparentStrokeInteractive);}", ".f1tpwn32:hover,.f1tpwn32:focus-within{border-bottom-color:var(--colorTransparentStrokeInteractive);}"],
    a: [".f8vnjqi:active,.f8vnjqi:focus-within{border-top-color:var(--colorNeutralStroke1Pressed);}", ".fz1etlk:active,.fz1etlk:focus-within{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f1hc16gm:active,.f1hc16gm:focus-within{border-left-color:var(--colorNeutralStroke1Pressed);}", ".f1klwx88:active,.f1klwx88:focus-within{border-bottom-color:var(--colorNeutralStrokeAccessiblePressed);}"],
    m: [["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]],
    w: [".f99w1ws:focus-within{outline-style:none;}"]
  });
  var useInputClassName = /* @__PURE__ */ __resetStyles2("rvp2gzh", null, [".rvp2gzh{box-sizing:border-box;flex-grow:1;min-width:0;border-style:none;padding:0 var(--spacingHorizontalXXS);color:var(--colorNeutralForeground1);background-color:transparent;outline-style:none;font-family:inherit;font-size:inherit;font-weight:inherit;line-height:inherit;}", ".rvp2gzh::-webkit-input-placeholder{color:var(--colorNeutralForeground4);opacity:1;}", ".rvp2gzh::-moz-placeholder{color:var(--colorNeutralForeground4);opacity:1;}", ".rvp2gzh:-ms-input-placeholder{color:var(--colorNeutralForeground4);opacity:1;}", ".rvp2gzh::placeholder{color:var(--colorNeutralForeground4);opacity:1;}"]);
  var useInputElementStyles = /* @__PURE__ */ __styles2({
    large: {
      uwmqm3: ["fk8j09s", "fdw0yi8"],
      z189sj: ["fdw0yi8", "fk8j09s"]
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      De3pzq: "f1c21dwh",
      Bceei9c: "fdrzuqr",
      yvdlaj: "fahhnxm"
    }
  }, {
    d: [".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".fdrzuqr{cursor:not-allowed;}", ".fahhnxm::-webkit-input-placeholder{color:var(--colorNeutralForegroundDisabled);}", ".fahhnxm::-moz-placeholder{color:var(--colorNeutralForegroundDisabled);}"]
  });
  var useContentClassName = /* @__PURE__ */ __resetStyles2("r1572tok", null, [".r1572tok{box-sizing:border-box;color:var(--colorNeutralForeground3);display:flex;}", ".r1572tok>svg{font-size:20px;}"]);
  var useContentStyles = /* @__PURE__ */ __styles2({
    disabled: {
      sj55zd: "f1s2aq7o"
    },
    small: {
      kwki1k: "f3u2cy0"
    },
    medium: {},
    large: {
      kwki1k: "fa420co"
    }
  }, {
    d: [".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f3u2cy0>svg{font-size:16px;}", ".fa420co>svg{font-size:24px;}"]
  });
  var useInputStyles_unstable = (state) => {
    const {
      size: size3,
      appearance
    } = state;
    const disabled = state.input.disabled;
    const invalid = `${state.input["aria-invalid"]}` === "true";
    const filled = appearance.startsWith("filled");
    const rootStyles = useRootStyles5();
    const inputStyles = useInputElementStyles();
    const contentStyles = useContentStyles();
    state.root.className = mergeClasses(inputClassNames.root, useRootClassName4(), rootStyles[size3], rootStyles[appearance], !disabled && appearance === "outline" && rootStyles.outlineInteractive, !disabled && appearance === "underline" && rootStyles.underlineInteractive, !disabled && filled && rootStyles.filledInteractive, filled && rootStyles.filled, !disabled && invalid && rootStyles.invalid, disabled && rootStyles.disabled, state.root.className);
    state.input.className = mergeClasses(inputClassNames.input, useInputClassName(), size3 === "large" && inputStyles.large, disabled && inputStyles.disabled, state.input.className);
    const contentClasses = [useContentClassName(), disabled && contentStyles.disabled, contentStyles[size3]];
    if (state.contentBefore) {
      state.contentBefore.className = mergeClasses(inputClassNames.contentBefore, ...contentClasses, state.contentBefore.className);
    }
    if (state.contentAfter) {
      state.contentAfter.className = mergeClasses(inputClassNames.contentAfter, ...contentClasses, state.contentAfter.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-input/lib/components/Input/Input.js
  var Input = /* @__PURE__ */ React96.forwardRef((props, ref) => {
    const state = useInput_unstable(props, ref);
    useInputStyles_unstable(state);
    useCustomStyleHook("useInputStyles_unstable")(state);
    return renderInput_unstable(state);
  });
  Input.displayName = "Input";

  // ../node_modules/@fluentui/react-menu/lib/contexts/menuContext.js
  var React97 = __toESM(require_react());
  var MenuContext = createContext14(void 0);
  var menuContextDefaultValue = {
    open: false,
    setOpen: () => false,
    checkedValues: {},
    onCheckedValueChange: () => null,
    isSubmenu: false,
    triggerRef: {
      current: null
    },
    menuPopoverRef: {
      current: null
    },
    mountNode: null,
    triggerId: "",
    openOnContext: false,
    openOnHover: false,
    hasIcons: false,
    hasCheckmarks: false,
    inline: false,
    persistOnItemClick: false
  };
  var MenuProvider = MenuContext.Provider;
  var useMenuContext_unstable = (selector) => useContextSelector(MenuContext, (ctx = menuContextDefaultValue) => selector(ctx));

  // ../node_modules/@fluentui/react-menu/lib/contexts/menuTriggerContext.js
  var React98 = __toESM(require_react());
  var MenuTriggerContext = React98.createContext(void 0);
  var menuTriggerContextDefaultValue = false;
  var MenuTriggerContextProvider = MenuTriggerContext.Provider;
  var _React_useContext3;
  var useMenuTriggerContext_unstable = () => (_React_useContext3 = React98.useContext(MenuTriggerContext)) !== null && _React_useContext3 !== void 0 ? _React_useContext3 : menuTriggerContextDefaultValue;

  // ../node_modules/@fluentui/react-menu/lib/contexts/menuListContext.js
  var React99 = __toESM(require_react());
  var MenuListContext = createContext14(void 0);
  var menuListContextDefaultValue = {
    checkedValues: {},
    setFocusByFirstCharacter: () => null,
    toggleCheckbox: () => null,
    selectRadio: () => null,
    hasIcons: false,
    hasCheckmarks: false
  };
  var MenuListProvider = MenuListContext.Provider;
  var useMenuListContext_unstable = (selector) => useContextSelector(MenuListContext, (ctx = menuListContextDefaultValue) => selector(ctx));

  // ../node_modules/@fluentui/react-menu/lib/components/Menu/Menu.js
  var React103 = __toESM(require_react());

  // ../node_modules/@fluentui/react-menu/lib/components/Menu/useMenu.js
  var React101 = __toESM(require_react());

  // ../node_modules/@fluentui/react-menu/lib/utils/useOnMenuEnter.js
  var React100 = __toESM(require_react());
  var MENU_ENTER_EVENT = "fuimenuenter";
  var useOnMenuMouseEnter = (options) => {
    const { refs, callback, element: element2, disabled } = options;
    const listener = useEventCallback((ev) => {
      const popoverRef = refs[0];
      const someMenuPopover = ev.target;
      var _popoverRef_current;
      const isOutsidePopover = !elementContains((_popoverRef_current = popoverRef.current) !== null && _popoverRef_current !== void 0 ? _popoverRef_current : null, someMenuPopover);
      if (isOutsidePopover && !disabled) {
        callback(ev);
      }
    });
    React100.useEffect(() => {
      if (element2 == null) {
        return;
      }
      if (!disabled) {
        element2.addEventListener(MENU_ENTER_EVENT, listener);
      }
      return () => {
        element2.removeEventListener(MENU_ENTER_EVENT, listener);
      };
    }, [
      listener,
      element2,
      disabled
    ]);
  };
  var dispatchMenuEnterEvent = (el, nativeEvent) => {
    el.dispatchEvent(new CustomEvent(MENU_ENTER_EVENT, {
      bubbles: true,
      detail: {
        nativeEvent
      }
    }));
  };

  // ../node_modules/@fluentui/react-menu/lib/utils/useIsSubmenu.js
  function useIsSubmenu() {
    const menuContextValue = useMenuContext_unstable((context) => context.isSubmenu);
    const hasMenuListContext = useHasParentContext(MenuListContext);
    return menuContextValue || hasMenuListContext;
  }

  // ../node_modules/@fluentui/react-menu/lib/components/Menu/useMenu.js
  var submenuFallbackPositions = [
    "after",
    "after-bottom",
    "before-top",
    "before",
    "before-bottom",
    "above"
  ];
  var useMenu_unstable = (props) => {
    const isSubmenu = useIsSubmenu();
    const { hoverDelay = 500, inline: inline2 = false, hasCheckmarks = false, hasIcons = false, closeOnScroll = false, openOnContext = false, persistOnItemClick = false, openOnHover = isSubmenu, defaultCheckedValues, mountNode = null } = props;
    const triggerId = useId2("menu");
    const [contextTarget, setContextTarget] = usePositioningMouseTarget();
    const positioningState = {
      position: isSubmenu ? "after" : "below",
      align: isSubmenu ? "top" : "start",
      target: props.openOnContext ? contextTarget : void 0,
      fallbackPositions: isSubmenu ? submenuFallbackPositions : void 0,
      ...resolvePositioningShorthand(props.positioning)
    };
    const children = React101.Children.toArray(props.children);
    if (true) {
      if (children.length === 0) {
        console.warn("Menu must contain at least one child");
      }
      if (children.length > 2) {
        console.warn("Menu must contain at most two children");
      }
    }
    let menuTrigger = void 0;
    let menuPopover = void 0;
    if (children.length === 2) {
      menuTrigger = children[0];
      menuPopover = children[1];
    } else if (children.length === 1) {
      menuPopover = children[0];
    }
    const { targetRef: triggerRef, containerRef: menuPopoverRef } = usePositioning(positioningState);
    const [open, setOpen] = useMenuOpenState({
      hoverDelay,
      isSubmenu,
      setContextTarget,
      closeOnScroll,
      menuPopoverRef,
      triggerRef,
      open: props.open,
      defaultOpen: props.defaultOpen,
      onOpenChange: props.onOpenChange,
      openOnContext
    });
    const [checkedValues, onCheckedValueChange] = useMenuSelectableState({
      checkedValues: props.checkedValues,
      defaultCheckedValues,
      onCheckedValueChange: props.onCheckedValueChange
    });
    return {
      inline: inline2,
      hoverDelay,
      triggerId,
      isSubmenu,
      openOnHover,
      contextTarget,
      setContextTarget,
      hasCheckmarks,
      hasIcons,
      closeOnScroll,
      menuTrigger,
      menuPopover,
      mountNode,
      triggerRef,
      menuPopoverRef,
      components: {},
      openOnContext,
      open,
      setOpen,
      checkedValues,
      onCheckedValueChange,
      persistOnItemClick
    };
  };
  var useMenuSelectableState = (props) => {
    const [checkedValues, setCheckedValues] = useControllableState({
      state: props.checkedValues,
      defaultState: props.defaultCheckedValues,
      initialState: {}
    });
    const onCheckedValueChange = useEventCallback((e3, { name, checkedItems }) => {
      var _props_onCheckedValueChange, _props;
      (_props_onCheckedValueChange = (_props = props).onCheckedValueChange) === null || _props_onCheckedValueChange === void 0 ? void 0 : _props_onCheckedValueChange.call(_props, e3, {
        name,
        checkedItems
      });
      setCheckedValues((currentValue) => ({
        ...currentValue,
        [name]: checkedItems
      }));
    });
    return [
      checkedValues,
      onCheckedValueChange
    ];
  };
  var useMenuOpenState = (state) => {
    const { targetDocument } = useFluent();
    const parentSetOpen = useMenuContext_unstable((context) => context.setOpen);
    const onOpenChange = useEventCallback((e3, data) => {
      var _state_onOpenChange, _state2;
      return (_state_onOpenChange = (_state2 = state).onOpenChange) === null || _state_onOpenChange === void 0 ? void 0 : _state_onOpenChange.call(_state2, e3, data);
    });
    const setOpenTimeout = React101.useRef(0);
    const enteringTriggerRef = React101.useRef(false);
    const [open, setOpenState] = useControllableState({
      state: state.open,
      defaultState: state.defaultOpen,
      initialState: false
    });
    const trySetOpen = useEventCallback((e3, data) => {
      var _onOpenChange;
      const event = e3 instanceof CustomEvent && e3.type === MENU_ENTER_EVENT ? e3.detail.nativeEvent : e3;
      (_onOpenChange = onOpenChange) === null || _onOpenChange === void 0 ? void 0 : _onOpenChange(event, {
        ...data
      });
      if (data.open && e3.type === "contextmenu") {
        state.setContextTarget(e3);
      }
      if (!data.open) {
        state.setContextTarget(void 0);
      }
      if (data.bubble) {
        parentSetOpen(e3, {
          ...data
        });
      }
      setOpenState(data.open);
    });
    const setOpen = useEventCallback((e3, data) => {
      clearTimeout(setOpenTimeout.current);
      if (!(e3 instanceof Event) && e3.persist) {
        e3.persist();
      }
      if (e3.type === "mouseleave" || e3.type === "mouseenter" || e3.type === "mousemove" || e3.type === MENU_ENTER_EVENT) {
        var _state_triggerRef_current;
        if ((_state_triggerRef_current = state.triggerRef.current) === null || _state_triggerRef_current === void 0 ? void 0 : _state_triggerRef_current.contains(e3.target)) {
          enteringTriggerRef.current = e3.type === "mouseenter" || e3.type === "mousemove";
        }
        setOpenTimeout.current = setTimeout(() => trySetOpen(e3, data), state.hoverDelay);
      } else {
        trySetOpen(e3, data);
      }
    });
    useOnClickOutside({
      contains: elementContains,
      disabled: !open,
      element: targetDocument,
      refs: [
        state.menuPopoverRef,
        !state.openOnContext && state.triggerRef
      ].filter(Boolean),
      callback: (event) => setOpen(event, {
        open: false,
        type: "clickOutside",
        event
      })
    });
    const closeOnScroll = state.openOnContext || state.closeOnScroll;
    useOnScrollOutside({
      contains: elementContains,
      element: targetDocument,
      callback: (event) => setOpen(event, {
        open: false,
        type: "scrollOutside",
        event
      }),
      refs: [
        state.menuPopoverRef,
        !state.openOnContext && state.triggerRef
      ].filter(Boolean),
      disabled: !open || !closeOnScroll
    });
    useOnMenuMouseEnter({
      element: targetDocument,
      callback: (event) => {
        if (!enteringTriggerRef.current) {
          setOpen(event, {
            open: false,
            type: "menuMouseEnter",
            event
          });
        }
      },
      disabled: !open,
      refs: [
        state.menuPopoverRef
      ]
    });
    React101.useEffect(() => {
      return () => {
        clearTimeout(setOpenTimeout.current);
      };
    }, []);
    const { findFirstFocusable } = useFocusFinders();
    const focusFirst = React101.useCallback(() => {
      var _firstFocusable;
      const firstFocusable = findFirstFocusable(state.menuPopoverRef.current);
      (_firstFocusable = firstFocusable) === null || _firstFocusable === void 0 ? void 0 : _firstFocusable.focus();
    }, [
      findFirstFocusable,
      state.menuPopoverRef
    ]);
    React101.useEffect(() => {
      if (open) {
        focusFirst();
      }
    }, [
      open,
      focusFirst
    ]);
    return [
      open,
      setOpen
    ];
  };

  // ../node_modules/@fluentui/react-menu/lib/components/Menu/useMenuContextValues.js
  function useMenuContextValues_unstable(state) {
    const { checkedValues, hasCheckmarks, hasIcons, inline: inline2, isSubmenu, menuPopoverRef, mountNode, onCheckedValueChange, open, openOnContext, openOnHover, persistOnItemClick, setOpen, triggerId, triggerRef } = state;
    const menu = {
      checkedValues,
      hasCheckmarks,
      hasIcons,
      inline: inline2,
      isSubmenu,
      menuPopoverRef,
      mountNode,
      onCheckedValueChange,
      open,
      openOnContext,
      openOnHover,
      persistOnItemClick,
      setOpen,
      triggerId,
      triggerRef
    };
    return {
      menu
    };
  }

  // ../node_modules/@fluentui/react-menu/lib/components/Menu/renderMenu.js
  var React102 = __toESM(require_react());
  var renderMenu_unstable = (state, contextValues) => {
    return /* @__PURE__ */ React102.createElement(MenuProvider, {
      value: contextValues.menu
    }, state.menuTrigger, state.open && state.menuPopover);
  };

  // ../node_modules/@fluentui/react-menu/lib/components/Menu/Menu.js
  var Menu = (props) => {
    const state = useMenu_unstable(props);
    const contextValues = useMenuContextValues_unstable(state);
    return renderMenu_unstable(state, contextValues);
  };
  Menu.displayName = "Menu";

  // ../node_modules/@fluentui/react-menu/lib/components/MenuItem/MenuItem.js
  var React106 = __toESM(require_react());

  // ../node_modules/@fluentui/react-menu/lib/components/MenuItem/useMenuItem.js
  var React105 = __toESM(require_react());

  // ../node_modules/@fluentui/react-menu/lib/components/MenuItem/useCharacterSearch.js
  var React104 = __toESM(require_react());
  var useCharacterSearch = (state, ref) => {
    const setFocusByFirstCharacter = useMenuListContext_unstable((context) => context.setFocusByFirstCharacter);
    const { onKeyDown: originalOnKeyDown } = state.root;
    state.root.onKeyDown = (e3) => {
      var _originalOnKeyDown, _e_key;
      (_originalOnKeyDown = originalOnKeyDown) === null || _originalOnKeyDown === void 0 ? void 0 : _originalOnKeyDown(e3);
      if (((_e_key = e3.key) === null || _e_key === void 0 ? void 0 : _e_key.length) > 1) {
        return;
      }
      if (ref.current) {
        var _setFocusByFirstCharacter;
        (_setFocusByFirstCharacter = setFocusByFirstCharacter) === null || _setFocusByFirstCharacter === void 0 ? void 0 : _setFocusByFirstCharacter(e3, ref.current);
      }
    };
    return state;
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuItem/useMenuItem.js
  var ChevronRightIcon = bundleIcon_default(ChevronRightFilled, ChevronRightRegular);
  var ChevronLeftIcon = bundleIcon_default(ChevronLeftFilled, ChevronLeftRegular);
  var useMenuItem_unstable = (props, ref) => {
    const isSubmenuTrigger = useMenuTriggerContext_unstable();
    const persistOnClickContext = useMenuContext_unstable((context) => context.persistOnItemClick);
    const { as = "div", disabled = false, hasSubmenu: hasSubmenu2 = isSubmenuTrigger, persistOnClick = persistOnClickContext } = props;
    const hasIcons = useMenuListContext_unstable((context) => context.hasIcons);
    const hasCheckmarks = useMenuListContext_unstable((context) => context.hasCheckmarks);
    const setOpen = useMenuContext_unstable((context) => context.setOpen);
    const { dir } = useFluent();
    const innerRef = React105.useRef(null);
    const dismissedWithKeyboardRef = React105.useRef(false);
    const state = {
      hasSubmenu: hasSubmenu2,
      disabled,
      persistOnClick,
      components: {
        root: "div",
        icon: "span",
        checkmark: "span",
        submenuIndicator: "span",
        content: "span",
        secondaryContent: "span"
      },
      root: slot_exports.always(getNativeElementProps(as, useARIAButtonProps(as, {
        role: "menuitem",
        ...props,
        disabled: false,
        disabledFocusable: disabled,
        ref: useMergedRefs(ref, innerRef),
        onKeyDown: useEventCallback((event) => {
          var _props_onKeyDown, _props;
          (_props_onKeyDown = (_props = props).onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(_props, event);
          if (!event.isDefaultPrevented() && (event.key === Space || event.key === Enter)) {
            dismissedWithKeyboardRef.current = true;
          }
        }),
        onMouseEnter: useEventCallback((event) => {
          var _innerRef_current, _props_onMouseEnter, _props;
          (_innerRef_current = innerRef.current) === null || _innerRef_current === void 0 ? void 0 : _innerRef_current.focus();
          (_props_onMouseEnter = (_props = props).onMouseEnter) === null || _props_onMouseEnter === void 0 ? void 0 : _props_onMouseEnter.call(_props, event);
        }),
        onClick: useEventCallback((event) => {
          var _props_onClick, _props;
          if (!hasSubmenu2 && !persistOnClick) {
            setOpen(event, {
              open: false,
              keyboard: dismissedWithKeyboardRef.current,
              bubble: true,
              type: "menuItemClick",
              event
            });
            dismissedWithKeyboardRef.current = false;
          }
          (_props_onClick = (_props = props).onClick) === null || _props_onClick === void 0 ? void 0 : _props_onClick.call(_props, event);
        })
      })), {
        elementType: "div"
      }),
      icon: slot_exports.optional(props.icon, {
        renderByDefault: hasIcons,
        elementType: "span"
      }),
      checkmark: slot_exports.optional(props.checkmark, {
        renderByDefault: hasCheckmarks,
        elementType: "span"
      }),
      submenuIndicator: slot_exports.optional(props.submenuIndicator, {
        renderByDefault: hasSubmenu2,
        defaultProps: {
          children: dir === "ltr" ? /* @__PURE__ */ React105.createElement(ChevronRightIcon, null) : /* @__PURE__ */ React105.createElement(ChevronLeftIcon, null)
        },
        elementType: "span"
      }),
      content: slot_exports.optional(props.content, {
        renderByDefault: !!props.children,
        defaultProps: {
          children: props.children
        },
        elementType: "span"
      }),
      secondaryContent: slot_exports.optional(props.secondaryContent, {
        elementType: "span"
      })
    };
    useCharacterSearch(state, innerRef);
    return state;
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuItem/renderMenuItem.js
  var renderMenuItem_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.checkmark && /* @__PURE__ */ jsx(state.checkmark, {}),
        state.icon && /* @__PURE__ */ jsx(state.icon, {}),
        state.content && /* @__PURE__ */ jsx(state.content, {}),
        state.secondaryContent && /* @__PURE__ */ jsx(state.secondaryContent, {}),
        state.submenuIndicator && /* @__PURE__ */ jsx(state.submenuIndicator, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-menu/lib/selectable/useCheckmarkStyles.styles.js
  var useStyles9 = /* @__PURE__ */ __styles2({
    root: {
      a9b677: "fjw5fx7",
      Bqenvij: "fd461yt",
      Bcdw1i0: "fd7fpy0"
    },
    rootChecked: {
      Bcdw1i0: "f1022m68"
    }
  }, {
    d: [".fjw5fx7{width:16px;}", ".fd461yt{height:16px;}", ".fd7fpy0{visibility:hidden;}", ".f1022m68{visibility:visible;}"]
  });
  var useCheckmarkStyles_unstable = (state) => {
    const styles4 = useStyles9();
    if (state.checkmark) {
      state.checkmark.className = mergeClasses(styles4.root, state.checked && styles4.rootChecked, state.checkmark.className);
    }
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuItem/useMenuItemStyles.styles.js
  var menuItemClassNames = {
    root: "fui-MenuItem",
    icon: "fui-MenuItem__icon",
    checkmark: "fui-MenuItem__checkmark",
    submenuIndicator: "fui-MenuItem__submenuIndicator",
    content: "fui-MenuItem__content",
    secondaryContent: "fui-MenuItem__secondaryContent"
  };
  var useStyles10 = /* @__PURE__ */ __styles2({
    focusIndicator: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "frrh606",
      clg4pj: ["f1v5zibi", "fo2hd23"],
      hgwjuy: "ful5kiu",
      Bonggc9: ["fo2hd23", "f1v5zibi"],
      B1tsrr9: ["f1jqcqds", "ftffrms"],
      Dah5zi: ["ftffrms", "f1jqcqds"],
      Bkh64rk: ["f2e7qr6", "fsr1zz6"],
      qqdqy8: ["fsr1zz6", "f2e7qr6"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "f57olzd",
      Bule8hv: ["f4stah7", "fs1por5"],
      Bjwuhne: "f480a47",
      Ghsupd: ["fs1por5", "f4stah7"]
    },
    root: {
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      qhf8xq: "f10pi13n",
      sj55zd: "fkfq4zb",
      De3pzq: "fxugw4r",
      z189sj: ["fkzw4jo", "fzzclc0"],
      uwmqm3: ["fzzclc0", "fkzw4jo"],
      z8tnut: "fp2oml8",
      B7ck84d: "f1ewtqcl",
      B2u0y6b: "f1wklaru",
      sshi5w: "f1nxs5xn",
      Bnnss6s: "fi64zpg",
      mc9l5x: "f22iagw",
      Bt984gj: "f1s2louj",
      Be2twd7: "fkhj508",
      Bceei9c: "f1k6fduh",
      i8kkvl: "f1q8lukm",
      Belr9w4: "f1ma2n7n",
      Jwef8y: "f1knas48",
      Bi91k9c: "fnwyq0v",
      Bk3fhr4: "ft1hn21",
      Bmfj8id: "fuxngvv",
      Bg7n49j: "fp258yr",
      famaaq: "f1xqy1su"
    },
    content: {
      uwmqm3: ["f161knb0", "f12huiiw"],
      z189sj: ["f12huiiw", "f161knb0"],
      De3pzq: "f3rmtva",
      Bh6795r: "fqerorx"
    },
    secondaryContent: {
      uwmqm3: ["f161knb0", "f12huiiw"],
      z189sj: ["f12huiiw", "f161knb0"],
      sj55zd: "f11d4kpn",
      Bi91k9c: "f1jp5ecu",
      t0hwav: "fc1cou1"
    },
    checkmark: {
      B6of3ja: "fmnzpld"
    },
    icon: {
      a9b677: "f64fuq3",
      Bqenvij: "fjamq6b",
      Be2twd7: "fe5j1ua",
      Bg96gwp: "fez10in",
      Bt984gj: "f122n59",
      mc9l5x: "ftuwxu6",
      Brf1p80: "f4d9j23"
    },
    submenuIndicator: {
      a9b677: "f64fuq3",
      Bqenvij: "fjamq6b",
      Be2twd7: "fe5j1ua",
      Bg96gwp: "fez10in",
      Bt984gj: "f122n59",
      mc9l5x: "ftuwxu6",
      Brf1p80: "f4d9j23"
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      Bi91k9c: "fvgxktp",
      Jwef8y: "f1ijtazh",
      eoavqd: "fphbwmw",
      Bk3fhr4: "f19vpps7",
      Bmfj8id: "fv5swzo",
      Bg7n49j: "f1q1x1ba",
      t0hwav: "ft33916",
      Bbusuzp: "f1dcs8yz",
      ze5xyy: "f1kc2mi9",
      Bctn1xl: "fk56vqo",
      Bh6z0a4: "f1ikwg0d"
    }
  }, {
    f: [".ftqa4ok:focus{outline-style:none;}", ".fc1cou1:focus{color:var(--colorNeutralForeground3Hover);}", ".ft33916:focus{color:var(--colorNeutralForegroundDisabled);}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"],
    d: [".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".frrh606[data-fui-focus-visible]::after{border-top-width:2px;}", ".f1v5zibi[data-fui-focus-visible]::after{border-right-width:2px;}", ".fo2hd23[data-fui-focus-visible]::after{border-left-width:2px;}", ".ful5kiu[data-fui-focus-visible]::after{border-bottom-width:2px;}", ".f1jqcqds[data-fui-focus-visible]::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".ftffrms[data-fui-focus-visible]::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f2e7qr6[data-fui-focus-visible]::after{border-top-right-radius:var(--borderRadiusMedium);}", ".fsr1zz6[data-fui-focus-visible]::after{border-top-left-radius:var(--borderRadiusMedium);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f57olzd[data-fui-focus-visible]::after{top:calc(2px * -1);}", ".f4stah7[data-fui-focus-visible]::after{right:calc(2px * -1);}", ".fs1por5[data-fui-focus-visible]::after{left:calc(2px * -1);}", ".f480a47[data-fui-focus-visible]::after{bottom:calc(2px * -1);}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f10pi13n{position:relative;}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".fkzw4jo{padding-right:var(--spacingVerticalSNudge);}", ".fzzclc0{padding-left:var(--spacingVerticalSNudge);}", ".fp2oml8{padding-top:var(--spacingVerticalSNudge);}", ".f1ewtqcl{box-sizing:border-box;}", ".f1wklaru{max-width:290px;}", ".f1nxs5xn{min-height:32px;}", ".fi64zpg{flex-shrink:0;}", ".f22iagw{display:flex;}", ".f1s2louj{align-items:start;}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1k6fduh{cursor:pointer;}", ".f1q8lukm{column-gap:4px;}", ".f1ma2n7n{row-gap:4px;}", ".f1xqy1su{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}", ".f161knb0{padding-left:2px;}", ".f12huiiw{padding-right:2px;}", ".f3rmtva{background-color:transparent;}", ".fqerorx{flex-grow:1;}", ".f11d4kpn{color:var(--colorNeutralForeground3);}", ".fmnzpld{margin-top:2px;}", ".f64fuq3{width:20px;}", ".fjamq6b{height:20px;}", ".fe5j1ua{font-size:20px;}", ".fez10in{line-height:0;}", ".f122n59{align-items:center;}", ".ftuwxu6{display:inline-flex;}", ".f4d9j23{justify-content:center;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}"],
    h: [".f1knas48:hover{background-color:var(--colorNeutralBackground1Hover);}", ".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".ft1hn21:hover .fui-Icon-filled{display:inline;}", ".fuxngvv:hover .fui-Icon-regular{display:none;}", ".fp258yr:hover .fui-MenuItem__icon{color:var(--colorNeutralForeground2BrandSelected);}", ".f1jp5ecu:hover{color:var(--colorNeutralForeground3Hover);}", ".fvgxktp:hover{color:var(--colorNeutralForegroundDisabled);}", ".f1ijtazh:hover{background-color:var(--colorNeutralBackground1);}", ".fphbwmw:hover{cursor:not-allowed;}", ".f19vpps7:hover .fui-Icon-filled{display:none;}", ".fv5swzo:hover .fui-Icon-regular{display:inline;}", ".f1q1x1ba:hover .fui-MenuItem__icon{color:var(--colorNeutralForegroundDisabled);}"],
    m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1kc2mi9:hover{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fk56vqo:hover .fui-MenuItem__icon{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ikwg0d:focus{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useMenuItemStyles_unstable = (state) => {
    const styles4 = useStyles10();
    state.root.className = mergeClasses(menuItemClassNames.root, styles4.root, styles4.focusIndicator, state.disabled && styles4.disabled, state.root.className);
    if (state.content) {
      state.content.className = mergeClasses(menuItemClassNames.content, styles4.content, state.content.className);
    }
    if (state.checkmark) {
      state.checkmark.className = mergeClasses(menuItemClassNames.checkmark, styles4.checkmark, state.checkmark.className);
    }
    if (state.secondaryContent) {
      state.secondaryContent.className = mergeClasses(menuItemClassNames.secondaryContent, !state.disabled && styles4.secondaryContent, state.secondaryContent.className);
    }
    if (state.icon) {
      state.icon.className = mergeClasses(menuItemClassNames.icon, styles4.icon, state.icon.className);
    }
    if (state.submenuIndicator) {
      state.submenuIndicator.className = mergeClasses(menuItemClassNames.submenuIndicator, styles4.submenuIndicator, state.submenuIndicator.className);
    }
    useCheckmarkStyles_unstable(state);
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuItem/MenuItem.js
  var MenuItem = /* @__PURE__ */ React106.forwardRef((props, ref) => {
    const state = useMenuItem_unstable(props, ref);
    useMenuItemStyles_unstable(state);
    useCustomStyleHook("useMenuItemStyles_unstable")(state);
    return renderMenuItem_unstable(state);
  });
  MenuItem.displayName = "MenuItem";

  // ../node_modules/@fluentui/react-menu/lib/components/MenuList/MenuList.js
  var React108 = __toESM(require_react());

  // ../node_modules/@fluentui/react-menu/lib/components/MenuList/useMenuList.js
  var React107 = __toESM(require_react());
  var useMenuList_unstable = (props, ref) => {
    const { findAllFocusable } = useFocusFinders();
    const menuContext = useMenuContextSelectors();
    const hasMenuContext = useHasParentContext(MenuContext);
    const focusAttributes = useArrowNavigationGroup({
      circular: true,
      ignoreDefaultKeydown: {
        Tab: hasMenuContext
      }
    });
    if (usingPropsAndMenuContext(props, menuContext, hasMenuContext)) {
      console.warn("You are using both MenuList and Menu props, we recommend you to use Menu props when available");
    }
    const innerRef = React107.useRef(null);
    const setFocusByFirstCharacter = React107.useCallback((e3, itemEl) => {
      const acceptedRoles = [
        "menuitem",
        "menuitemcheckbox",
        "menuitemradio"
      ];
      if (!innerRef.current) {
        return;
      }
      const menuItems = findAllFocusable(innerRef.current, (el) => el.hasAttribute("role") && acceptedRoles.indexOf(el.getAttribute("role")) !== -1);
      let startIndex = menuItems.indexOf(itemEl) + 1;
      if (startIndex === menuItems.length) {
        startIndex = 0;
      }
      const firstChars = menuItems.map((menuItem) => {
        var _menuItem_textContent;
        return (_menuItem_textContent = menuItem.textContent) === null || _menuItem_textContent === void 0 ? void 0 : _menuItem_textContent.charAt(0).toLowerCase();
      });
      const char2 = e3.key.toLowerCase();
      const getIndexFirstChars = (start2, firstChar) => {
        for (let i4 = start2; i4 < firstChars.length; i4++) {
          if (char2 === firstChars[i4]) {
            return i4;
          }
        }
        return -1;
      };
      let index2 = getIndexFirstChars(startIndex, char2);
      if (index2 === -1) {
        index2 = getIndexFirstChars(0, char2);
      }
      if (index2 > -1) {
        menuItems[index2].focus();
      }
    }, [
      findAllFocusable
    ]);
    var _props_checkedValues;
    const [checkedValues, setCheckedValues] = useControllableState({
      state: (_props_checkedValues = props.checkedValues) !== null && _props_checkedValues !== void 0 ? _props_checkedValues : hasMenuContext ? menuContext.checkedValues : void 0,
      defaultState: props.defaultCheckedValues,
      initialState: {}
    });
    var _props_onCheckedValueChange;
    const handleCheckedValueChange = (_props_onCheckedValueChange = props.onCheckedValueChange) !== null && _props_onCheckedValueChange !== void 0 ? _props_onCheckedValueChange : hasMenuContext ? menuContext.onCheckedValueChange : void 0;
    const toggleCheckbox = useEventCallback((e3, name, value, checked) => {
      var _checkedValues, _handleCheckedValueChange;
      const checkedItems = ((_checkedValues = checkedValues) === null || _checkedValues === void 0 ? void 0 : _checkedValues[name]) || [];
      const newCheckedItems = [
        ...checkedItems
      ];
      if (checked) {
        newCheckedItems.splice(newCheckedItems.indexOf(value), 1);
      } else {
        newCheckedItems.push(value);
      }
      (_handleCheckedValueChange = handleCheckedValueChange) === null || _handleCheckedValueChange === void 0 ? void 0 : _handleCheckedValueChange(e3, {
        name,
        checkedItems: newCheckedItems
      });
      setCheckedValues((s3) => ({
        ...s3,
        [name]: newCheckedItems
      }));
    });
    const selectRadio = useEventCallback((e3, name, value) => {
      var _handleCheckedValueChange;
      const newCheckedItems = [
        value
      ];
      setCheckedValues((s3) => ({
        ...s3,
        [name]: newCheckedItems
      }));
      (_handleCheckedValueChange = handleCheckedValueChange) === null || _handleCheckedValueChange === void 0 ? void 0 : _handleCheckedValueChange(e3, {
        name,
        checkedItems: newCheckedItems
      });
    });
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref: useMergedRefs(ref, innerRef),
        role: "menu",
        "aria-labelledby": menuContext.triggerId,
        ...focusAttributes,
        ...props
      }), {
        elementType: "div"
      }),
      hasIcons: menuContext.hasIcons || false,
      hasCheckmarks: menuContext.hasCheckmarks || false,
      checkedValues,
      hasMenuContext,
      setFocusByFirstCharacter,
      selectRadio,
      toggleCheckbox
    };
  };
  var useMenuContextSelectors = () => {
    const checkedValues = useMenuContext_unstable((context) => context.checkedValues);
    const onCheckedValueChange = useMenuContext_unstable((context) => context.onCheckedValueChange);
    const triggerId = useMenuContext_unstable((context) => context.triggerId);
    const hasIcons = useMenuContext_unstable((context) => context.hasIcons);
    const hasCheckmarks = useMenuContext_unstable((context) => context.hasCheckmarks);
    return {
      checkedValues,
      onCheckedValueChange,
      triggerId,
      hasIcons,
      hasCheckmarks
    };
  };
  var usingPropsAndMenuContext = (props, contextValue, hasMenuContext) => {
    let isUsingPropsAndContext = false;
    for (const val in contextValue) {
      if (props[val]) {
        isUsingPropsAndContext = true;
      }
    }
    return hasMenuContext && isUsingPropsAndContext;
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuList/renderMenuList.js
  var renderMenuList_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(MenuListProvider, {
      value: contextValues.menuList,
      children: /* @__PURE__ */ jsx(state.root, {})
    });
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuList/useMenuListContextValues.js
  function useMenuListContextValues_unstable(state) {
    const { checkedValues, hasCheckmarks, hasIcons, selectRadio, setFocusByFirstCharacter, toggleCheckbox } = state;
    const menuList = {
      checkedValues,
      hasCheckmarks,
      hasIcons,
      selectRadio,
      setFocusByFirstCharacter,
      toggleCheckbox
    };
    return {
      menuList
    };
  }

  // ../node_modules/@fluentui/react-menu/lib/components/MenuList/useMenuListStyles.styles.js
  var menuListClassNames = {
    root: "fui-MenuList"
  };
  var useStyles11 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Beiy3e4: "f1vx9l62",
      i8kkvl: "f16mnhsx",
      Belr9w4: "fbi42co"
    },
    hasMenuContext: {
      Bqenvij: "f1l02sjl"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f1vx9l62{flex-direction:column;}", ".f16mnhsx{column-gap:2px;}", ".fbi42co{row-gap:2px;}", ".f1l02sjl{height:100%;}"]
  });
  var useMenuListStyles_unstable = (state) => {
    const styles4 = useStyles11();
    state.root.className = mergeClasses(menuListClassNames.root, styles4.root, state.hasMenuContext && styles4.hasMenuContext, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuList/MenuList.js
  var MenuList = /* @__PURE__ */ React108.forwardRef((props, ref) => {
    const state = useMenuList_unstable(props, ref);
    const contextValues = useMenuListContextValues_unstable(state);
    useMenuListStyles_unstable(state);
    useCustomStyleHook("useMenuListStyles_unstable")(state);
    return renderMenuList_unstable(state, contextValues);
  });
  MenuList.displayName = "MenuList";

  // ../node_modules/@fluentui/react-menu/lib/components/MenuPopover/MenuPopover.js
  var React110 = __toESM(require_react());

  // ../node_modules/@fluentui/react-menu/lib/components/MenuPopover/useMenuPopover.js
  var React109 = __toESM(require_react());
  var useMenuPopover_unstable = (props, ref) => {
    const popoverRef = useMenuContext_unstable((context) => context.menuPopoverRef);
    const setOpen = useMenuContext_unstable((context) => context.setOpen);
    const open = useMenuContext_unstable((context) => context.open);
    const openOnHover = useMenuContext_unstable((context) => context.openOnHover);
    const triggerRef = useMenuContext_unstable((context) => context.triggerRef);
    const isSubmenu = useIsSubmenu();
    const canDispatchCustomEventRef = React109.useRef(true);
    const throttleDispatchTimerRef = React109.useRef(0);
    const restoreFocusSourceAttributes = useRestoreFocusSource();
    const { dir } = useFluent();
    const CloseArrowKey = dir === "ltr" ? ArrowLeft : ArrowRight;
    const mouseOverListenerCallbackRef = React109.useCallback((node5) => {
      if (node5) {
        node5.addEventListener("mouseover", (e3) => {
          if (canDispatchCustomEventRef.current) {
            canDispatchCustomEventRef.current = false;
            dispatchMenuEnterEvent(popoverRef.current, e3);
            throttleDispatchTimerRef.current = setTimeout(() => canDispatchCustomEventRef.current = true, 250);
          }
        });
      }
    }, [
      popoverRef,
      throttleDispatchTimerRef
    ]);
    React109.useEffect(() => {
      () => clearTimeout(throttleDispatchTimerRef.current);
    }, []);
    var _useMenuContext_unstable;
    const inline2 = (_useMenuContext_unstable = useMenuContext_unstable((context) => context.inline)) !== null && _useMenuContext_unstable !== void 0 ? _useMenuContext_unstable : false;
    const mountNode = useMenuContext_unstable((context) => context.mountNode);
    const rootProps = slot_exports.always(getNativeElementProps("div", {
      role: "presentation",
      ...restoreFocusSourceAttributes,
      ...props,
      ref: useMergedRefs(ref, popoverRef, mouseOverListenerCallbackRef)
    }), {
      elementType: "div"
    });
    const { onMouseEnter: onMouseEnterOriginal, onKeyDown: onKeyDownOriginal } = rootProps;
    rootProps.onMouseEnter = useEventCallback((event) => {
      var _onMouseEnterOriginal;
      if (openOnHover) {
        setOpen(event, {
          open: true,
          keyboard: false,
          type: "menuPopoverMouseEnter",
          event
        });
      }
      (_onMouseEnterOriginal = onMouseEnterOriginal) === null || _onMouseEnterOriginal === void 0 ? void 0 : _onMouseEnterOriginal(event);
    });
    rootProps.onKeyDown = useEventCallback((event) => {
      var _onKeyDownOriginal;
      const key = event.key;
      if (key === Escape || isSubmenu && key === CloseArrowKey) {
        var _popoverRef_current;
        if (open && ((_popoverRef_current = popoverRef.current) === null || _popoverRef_current === void 0 ? void 0 : _popoverRef_current.contains(event.target))) {
          setOpen(event, {
            open: false,
            keyboard: true,
            type: "menuPopoverKeyDown",
            event
          });
          event.stopPropagation();
        }
      }
      if (key === Tab) {
        setOpen(event, {
          open: false,
          keyboard: true,
          type: "menuPopoverKeyDown",
          event
        });
        if (!isSubmenu) {
          var _triggerRef_current;
          (_triggerRef_current = triggerRef.current) === null || _triggerRef_current === void 0 ? void 0 : _triggerRef_current.focus();
        }
      }
      (_onKeyDownOriginal = onKeyDownOriginal) === null || _onKeyDownOriginal === void 0 ? void 0 : _onKeyDownOriginal(event);
    });
    return {
      inline: inline2,
      mountNode,
      components: {
        root: "div"
      },
      root: rootProps
    };
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuPopover/useMenuPopoverStyles.styles.js
  var menuPopoverClassNames = {
    root: "fui-MenuPopover"
  };
  var useStyles12 = /* @__PURE__ */ __styles2({
    root: {
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      De3pzq: "fxugw4r",
      sj55zd: "f19n0e5",
      B7ck84d: "f1ewtqcl",
      Bf4jedk: "fl8fusi",
      B2u0y6b: "f1kaai3v",
      B68tc82: "f1p9o1ba",
      a9b677: "f1ahpp82",
      E5pizo: "f1hg901r",
      z8tnut: "f10ra9hq",
      z189sj: ["f8wuabp", "fycuoez"],
      Byoj8tv: "f1y2xyjm",
      uwmqm3: ["fycuoez", "f8wuabp"],
      B4j52fo: "f5ogflp",
      Bekrc4i: ["f1hqa2wf", "finvdd3"],
      Bn0qgzm: "f1f09k3d",
      ibv6hh: ["finvdd3", "f1hqa2wf"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi",
      B93otf3: "f18k4bn6",
      vin17d: "fo1kyvf",
      Ezkn3b: "fetxo7e",
      ex8oj8: "fmm77a6",
      Bksk4gw: "f12t24nk",
      Bc5phfd: "f1babd7",
      cbiifc: "f1jgo889",
      fyiq5g: "f1ij1pew",
      Bqc19t1: "f1gu8pa9",
      Eet2gb: "fhfnl4n",
      Bhl7k63: "fk8tkmz",
      Bv12yb3: "f3n0535",
      z0t1cu: "fi19xcv",
      Bks05zx: "f1mzajhk",
      Bvtglag: "fjp4h9y"
    }
  }, {
    d: [".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1ewtqcl{box-sizing:border-box;}", ".fl8fusi{min-width:138px;}", ".f1kaai3v{max-width:300px;}", ".f1p9o1ba{overflow-x:hidden;}", ".f1ahpp82{width:max-content;}", ".f1hg901r{box-shadow:var(--shadow16);}", ".f10ra9hq{padding-top:4px;}", ".f8wuabp{padding-right:4px;}", ".fycuoez{padding-left:4px;}", ".f1y2xyjm{padding-bottom:4px;}", ".f5ogflp{border-top-width:1px;}", ".f1hqa2wf{border-right-width:1px;}", ".finvdd3{border-left-width:1px;}", ".f1f09k3d{border-bottom-width:1px;}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f18k4bn6{animation-composition:accumulate;}", ".fo1kyvf{animation-duration:var(--durationSlower);}", ".fetxo7e{animation-timing-function:var(--curveDecelerateMid);}", ".fmm77a6{--slide-distance-x:0px;}", ".f12t24nk{--slide-distance-y:10px;}", ".f1babd7[data-popper-placement^=right]{--slide-distance-x:-10px;}", ".f1jgo889[data-popper-placement^=right]{--slide-distance-y:0px;}", ".f1ij1pew[data-popper-placement^=bottom]{--slide-distance-x:0px;}", ".f1gu8pa9[data-popper-placement^=bottom]{--slide-distance-y:-10px;}", ".fhfnl4n[data-popper-placement^=left]{--slide-distance-x:10px;}", ".fk8tkmz[data-popper-placement^=left]{--slide-distance-y:0px;}", ".f3n0535{animation-name:f5j8bii,fld5wjx;}"],
    k: ["@keyframes f5j8bii{from{opacity:0;}to{opacity:1;}}", "@keyframes fld5wjx{from{transform:translate(var(--slide-distance-x), var(--slide-distance-y));}}"],
    m: [["@media (prefers-reduced-motion){.fi19xcv[data-popper-placement]{animation-duration:1ms;}}", {
      m: "(prefers-reduced-motion)"
    }], ["@media (prefers-reduced-motion){.f1mzajhk[data-popper-placement]{animation-name:f5j8bii;}}", {
      m: "(prefers-reduced-motion)"
    }]],
    t: ["@supports not (animation-composition: accumulate){.fjp4h9y[data-popper-placement]{animation-name:f5j8bii;}}"]
  });
  var useMenuPopoverStyles_unstable = (state) => {
    const styles4 = useStyles12();
    state.root.className = mergeClasses(menuPopoverClassNames.root, styles4.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuPopover/renderMenuPopover.js
  var renderMenuPopover_unstable = (state) => {
    assertSlots(state);
    if (state.inline) {
      return /* @__PURE__ */ jsx(state.root, {});
    }
    return /* @__PURE__ */ jsx(Portal, {
      mountNode: state.mountNode,
      children: /* @__PURE__ */ jsx(state.root, {})
    });
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuPopover/MenuPopover.js
  var MenuPopover = /* @__PURE__ */ React110.forwardRef((props, ref) => {
    const state = useMenuPopover_unstable(props, ref);
    useMenuPopoverStyles_unstable(state);
    useCustomStyleHook("useMenuPopoverStyles_unstable")(state);
    return renderMenuPopover_unstable(state);
  });
  MenuPopover.displayName = "MenuPopover";

  // ../node_modules/@fluentui/react-menu/lib/components/MenuTrigger/MenuTrigger.js
  var React113 = __toESM(require_react());

  // ../node_modules/@fluentui/react-menu/lib/components/MenuTrigger/useMenuTrigger.js
  var React111 = __toESM(require_react());
  var useMenuTrigger_unstable = (props) => {
    var _child, _child1, _child2, _child3, _child4, _child5, _child6, _child7, _child8, _child9;
    const { children, disableButtonEnhancement = false } = props;
    const triggerRef = useMenuContext_unstable((context) => context.triggerRef);
    const menuPopoverRef = useMenuContext_unstable((context) => context.menuPopoverRef);
    const setOpen = useMenuContext_unstable((context) => context.setOpen);
    const open = useMenuContext_unstable((context) => context.open);
    const triggerId = useMenuContext_unstable((context) => context.triggerId);
    const openOnHover = useMenuContext_unstable((context) => context.openOnHover);
    const openOnContext = useMenuContext_unstable((context) => context.openOnContext);
    const restoreFocusTargetAttribute = useRestoreFocusTarget();
    const isSubmenu = useIsSubmenu();
    const { findFirstFocusable } = useFocusFinders();
    const focusFirst = React111.useCallback(() => {
      var _firstFocusable;
      const firstFocusable = findFirstFocusable(menuPopoverRef.current);
      (_firstFocusable = firstFocusable) === null || _firstFocusable === void 0 ? void 0 : _firstFocusable.focus();
    }, [
      findFirstFocusable,
      menuPopoverRef
    ]);
    const openedWithKeyboardRef = React111.useRef(false);
    const hasMouseMoved = React111.useRef(false);
    const { dir } = useFluent();
    const OpenArrowKey = dir === "ltr" ? ArrowRight : ArrowLeft;
    const child = getTriggerChild(children);
    const onContextMenu = (event) => {
      if (isTargetDisabled(event) || event.isDefaultPrevented()) {
        return;
      }
      if (openOnContext) {
        event.preventDefault();
        setOpen(event, {
          open: true,
          keyboard: false,
          type: "menuTriggerContextMenu",
          event
        });
      }
    };
    const onClick = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      if (!openOnContext) {
        setOpen(event, {
          open: !open,
          keyboard: openedWithKeyboardRef.current,
          type: "menuTriggerClick",
          event
        });
        openedWithKeyboardRef.current = false;
      }
    };
    const onKeyDown = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      const key = event.key;
      if (!openOnContext && (isSubmenu && key === OpenArrowKey || !isSubmenu && key === ArrowDown)) {
        setOpen(event, {
          open: true,
          keyboard: true,
          type: "menuTriggerKeyDown",
          event
        });
      }
      if (key === Escape && !isSubmenu) {
        setOpen(event, {
          open: false,
          keyboard: true,
          type: "menuTriggerKeyDown",
          event
        });
      }
      if (open && key === OpenArrowKey && isSubmenu) {
        focusFirst();
      }
    };
    const onMouseEnter = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      if (openOnHover && hasMouseMoved.current) {
        setOpen(event, {
          open: true,
          keyboard: false,
          type: "menuTriggerMouseEnter",
          event
        });
      }
    };
    const onMouseMove = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      if (openOnHover && !hasMouseMoved.current) {
        setOpen(event, {
          open: true,
          keyboard: false,
          type: "menuTriggerMouseMove",
          event
        });
        hasMouseMoved.current = true;
      }
    };
    const onMouseLeave = (event) => {
      if (isTargetDisabled(event)) {
        return;
      }
      if (openOnHover) {
        setOpen(event, {
          open: false,
          keyboard: false,
          type: "menuTriggerMouseLeave",
          event
        });
      }
    };
    const contextMenuProps = {
      id: triggerId,
      ...(_child = child) === null || _child === void 0 ? void 0 : _child.props,
      ref: useMergedRefs(triggerRef, (_child1 = child) === null || _child1 === void 0 ? void 0 : _child1.ref),
      onMouseEnter: useEventCallback(mergeCallbacks((_child2 = child) === null || _child2 === void 0 ? void 0 : _child2.props.onMouseEnter, onMouseEnter)),
      onMouseLeave: useEventCallback(mergeCallbacks((_child3 = child) === null || _child3 === void 0 ? void 0 : _child3.props.onMouseLeave, onMouseLeave)),
      onContextMenu: useEventCallback(mergeCallbacks((_child4 = child) === null || _child4 === void 0 ? void 0 : _child4.props.onContextMenu, onContextMenu)),
      onMouseMove: useEventCallback(mergeCallbacks((_child5 = child) === null || _child5 === void 0 ? void 0 : _child5.props.onMouseMove, onMouseMove))
    };
    const triggerChildProps = {
      "aria-haspopup": "menu",
      "aria-expanded": !open && !isSubmenu ? void 0 : open,
      ...restoreFocusTargetAttribute,
      ...contextMenuProps,
      onClick: useEventCallback(mergeCallbacks((_child6 = child) === null || _child6 === void 0 ? void 0 : _child6.props.onClick, onClick)),
      onKeyDown: useEventCallback(mergeCallbacks((_child7 = child) === null || _child7 === void 0 ? void 0 : _child7.props.onKeyDown, onKeyDown))
    };
    const ariaButtonTriggerChildProps = useARIAButtonProps(((_child8 = child) === null || _child8 === void 0 ? void 0 : _child8.type) === "button" || ((_child9 = child) === null || _child9 === void 0 ? void 0 : _child9.type) === "a" ? child.type : "div", triggerChildProps);
    return {
      isSubmenu,
      children: applyTriggerPropsToChildren(children, openOnContext ? contextMenuProps : disableButtonEnhancement ? triggerChildProps : ariaButtonTriggerChildProps)
    };
  };
  var isTargetDisabled = (event) => {
    const isDisabled = (el) => el.hasAttribute("disabled") || el.hasAttribute("aria-disabled") && el.getAttribute("aria-disabled") === "true";
    if (isHTMLElement(event.target) && isDisabled(event.target)) {
      return true;
    }
    return isHTMLElement(event.currentTarget) && isDisabled(event.currentTarget);
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuTrigger/renderMenuTrigger.js
  var React112 = __toESM(require_react());
  var renderMenuTrigger_unstable = (state) => {
    return /* @__PURE__ */ React112.createElement(MenuTriggerContextProvider, {
      value: state.isSubmenu
    }, state.children);
  };

  // ../node_modules/@fluentui/react-menu/lib/components/MenuTrigger/MenuTrigger.js
  var MenuTrigger = (props) => {
    const state = useMenuTrigger_unstable(props);
    return renderMenuTrigger_unstable(state);
  };
  MenuTrigger.displayName = "MenuTrigger";
  MenuTrigger.isFluentTriggerComponent = true;

  // ../node_modules/@fluentui/react-persona/lib/components/Persona/Persona.js
  var React115 = __toESM(require_react());

  // ../node_modules/@fluentui/react-persona/lib/components/Persona/renderPersona.js
  var renderPersona_unstable = (state) => {
    const { presenceOnly, textPosition } = state;
    assertSlots(state);
    const coin = presenceOnly ? state.presence && /* @__PURE__ */ jsx(state.presence, {}) : state.avatar && /* @__PURE__ */ jsx(state.avatar, {});
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        (textPosition === "after" || textPosition === "below") && coin,
        state.primaryText && /* @__PURE__ */ jsx(state.primaryText, {}),
        state.secondaryText && /* @__PURE__ */ jsx(state.secondaryText, {}),
        state.tertiaryText && /* @__PURE__ */ jsx(state.tertiaryText, {}),
        state.quaternaryText && /* @__PURE__ */ jsx(state.quaternaryText, {}),
        textPosition === "before" && coin
      ]
    });
  };

  // ../node_modules/@fluentui/react-persona/lib/components/Persona/usePersona.js
  var React114 = __toESM(require_react());
  var usePersona_unstable = (props, ref) => {
    const { name, presenceOnly = false, size: size3 = "medium", textAlignment = "start", textPosition = "after" } = props;
    const primaryText = slot_exports.optional(props.primaryText, {
      renderByDefault: true,
      defaultProps: {
        children: name
      },
      elementType: "span"
    });
    const secondaryText = slot_exports.optional(props.secondaryText, {
      elementType: "span"
    });
    const tertiaryText = slot_exports.optional(props.tertiaryText, {
      elementType: "span"
    });
    const quaternaryText = slot_exports.optional(props.quaternaryText, {
      elementType: "span"
    });
    const numTextLines = [
      primaryText,
      secondaryText,
      tertiaryText,
      quaternaryText
    ].filter(Boolean).length;
    return {
      numTextLines,
      presenceOnly,
      size: size3,
      textAlignment,
      textPosition,
      components: {
        root: "div",
        avatar: Avatar,
        presence: PresenceBadge,
        primaryText: "span",
        secondaryText: "span",
        tertiaryText: "span",
        quaternaryText: "span"
      },
      root: slot_exports.always(getNativeElementProps(
        "div",
        {
          ...props,
          ref
        },
        /* excludedPropNames */
        [
          "name"
        ]
      ), {
        elementType: "div"
      }),
      avatar: !presenceOnly ? slot_exports.optional(props.avatar, {
        renderByDefault: true,
        defaultProps: {
          name,
          badge: props.presence,
          size: avatarSizes[size3]
        },
        elementType: Avatar
      }) : void 0,
      presence: presenceOnly ? slot_exports.optional(props.presence, {
        defaultProps: {
          size: presenceSizes[size3]
        },
        elementType: PresenceBadge
      }) : void 0,
      primaryText,
      secondaryText,
      tertiaryText,
      quaternaryText
    };
  };
  var presenceSizes = {
    "extra-small": "tiny",
    small: "extra-small",
    medium: "small",
    large: "medium",
    "extra-large": "large",
    huge: "large"
  };
  var avatarSizes = {
    "extra-small": 20,
    small: 28,
    medium: 32,
    large: 36,
    "extra-large": 40,
    huge: 56
  };

  // ../node_modules/@fluentui/react-persona/lib/components/Persona/usePersonaStyles.styles.js
  var personaClassNames = {
    root: "fui-Persona",
    avatar: "fui-Persona__avatar",
    presence: "fui-Persona__presence",
    primaryText: "fui-Persona__primaryText",
    secondaryText: "fui-Persona__secondaryText",
    tertiaryText: "fui-Persona__tertiaryText",
    quaternaryText: "fui-Persona__quaternaryText"
  };
  var useRootClassName5 = /* @__PURE__ */ __resetStyles2("rlroi9i", null, [".rlroi9i{display:inline-grid;grid-auto-rows:max-content;grid-auto-flow:column;justify-items:start;grid-template-columns:max-content [middle] auto;}"]);
  var useStyles13 = /* @__PURE__ */ __styles2({
    beforeAfterCenter: {
      wkccdc: "f1iantul"
    },
    after: {},
    before: {
      B7hvi0a: "f1tll2w5",
      Budl1dq: "ffvkwdr"
    },
    below: {
      Bxotwcr: "f1nkeedh",
      B7hvi0a: "f1oiokrs",
      Budl1dq: "f1emgwh2"
    },
    media: {
      Ijaq50: "f1hek2iy"
    },
    mediaBeforeAfterCenter: {
      Ijaq50: "fa4dipu"
    },
    start: {
      qb2dma: "f9h729m"
    },
    center: {
      qb2dma: "f7nlbp4"
    },
    afterAlignToPrimary: {
      qb2dma: "f7nlbp4",
      Ijaq50: "f1rnkkuc",
      Bw0ie65: "f1warjpf"
    },
    beforeAlignToPrimary: {
      qb2dma: "f7nlbp4",
      Ijaq50: "f1rnkkuc",
      Br312pm: "fwu52yu"
    },
    secondLineSpacing: {
      B6of3ja: "f1ryq6si"
    },
    primary: {
      Ijaq50: "f1q3ipgb"
    },
    secondary: {
      Ijaq50: "f3drtdk"
    },
    tertiary: {
      Ijaq50: "fa1o6s1"
    },
    quaternary: {
      Ijaq50: "f1tuwaia"
    }
  }, {
    d: [".f1iantul{grid-template-rows:1fr [primary] max-content [secondary] max-content [tertiary] max-content [quaternary] max-content 1fr;}", ".f1tll2w5{justify-items:end;}", ".ffvkwdr{grid-template-columns:auto [middle] max-content;}", ".f1nkeedh{grid-auto-flow:unset;}", ".f1oiokrs{justify-items:center;}", ".f1emgwh2{grid-template-columns:unset;}", ".f1hek2iy{grid-row-start:span 5;}", ".fa4dipu{grid-row-start:span 6;}", ".f9h729m{align-self:start;}", ".f7nlbp4{align-self:center;}", ".f1rnkkuc{grid-row-start:unset;}", ".f1warjpf{grid-column-end:middle;}", ".fwu52yu{grid-column-start:middle;}", ".f1ryq6si{margin-top:-2px;}", ".f1q3ipgb{grid-row-start:primary;}", ".f3drtdk{grid-row-start:secondary;}", ".fa1o6s1{grid-row-start:tertiary;}", ".f1tuwaia{grid-row-start:quaternary;}"]
  });
  var useAvatarSpacingStyles = /* @__PURE__ */ __styles2({
    "extra-small": {
      Bs1gm4r: "f1e48tse"
    },
    small: {
      Bs1gm4r: "f18q9vkd"
    },
    medium: {
      Bs1gm4r: "f18q9vkd"
    },
    large: {
      Bs1gm4r: "fx34bi6"
    },
    "extra-large": {
      Bs1gm4r: "fx34bi6"
    },
    huge: {
      Bs1gm4r: "f1o96qtm"
    },
    after: {
      t21cq0: ["f103ycu4", "f1tao51"]
    },
    below: {
      jrapky: "fbo7acy"
    },
    before: {
      Frg6f3: ["f1tao51", "f103ycu4"]
    }
  }, {
    d: [".f1e48tse{--fui-Persona__avatar--spacing:var(--spacingHorizontalSNudge);}", ".f18q9vkd{--fui-Persona__avatar--spacing:var(--spacingHorizontalS);}", ".fx34bi6{--fui-Persona__avatar--spacing:var(--spacingHorizontalMNudge);}", ".f1o96qtm{--fui-Persona__avatar--spacing:var(--spacingHorizontalM);}", ".f103ycu4{margin-right:var(--fui-Persona__avatar--spacing);}", ".f1tao51{margin-left:var(--fui-Persona__avatar--spacing);}", ".fbo7acy{margin-bottom:var(--fui-Persona__avatar--spacing);}"]
  });
  var usePresenceSpacingStyles = /* @__PURE__ */ __styles2({
    small: {
      Bs1gm4r: "f1e48tse"
    }
  }, {
    d: [".f1e48tse{--fui-Persona__avatar--spacing:var(--spacingHorizontalSNudge);}"]
  });
  var usePersonaStyles_unstable = (state) => {
    const {
      presenceOnly,
      size: size3,
      textAlignment,
      textPosition
    } = state;
    const alignToPrimary = presenceOnly && textAlignment === "start" && size3 !== "extra-large" && size3 !== "huge";
    const alignBeforeAfterCenter = textPosition !== "below" && textAlignment === "center";
    const {
      primaryTextClassName,
      optionalTextClassName
    } = useTextClassNames(state, alignToPrimary);
    const rootClassName = useRootClassName5();
    const styles4 = useStyles13();
    const avatarSpacingStyles = useAvatarSpacingStyles();
    const presenceSpacingStyles = {
      ...avatarSpacingStyles,
      ...usePresenceSpacingStyles()
    };
    state.root.className = mergeClasses(personaClassNames.root, rootClassName, alignBeforeAfterCenter && styles4.beforeAfterCenter, styles4[textPosition], state.root.className);
    if (state.avatar) {
      state.avatar.className = mergeClasses(personaClassNames.avatar, textPosition !== "below" && styles4.media, alignBeforeAfterCenter && styles4.mediaBeforeAfterCenter, styles4[textAlignment], avatarSpacingStyles[size3], avatarSpacingStyles[textPosition], state.avatar.className);
    }
    if (state.presence) {
      state.presence.className = mergeClasses(personaClassNames.presence, textPosition !== "below" && styles4.media, alignBeforeAfterCenter && styles4.mediaBeforeAfterCenter, styles4[textAlignment], presenceSpacingStyles[size3], presenceSpacingStyles[textPosition], textPosition === "after" && alignToPrimary && styles4.afterAlignToPrimary, textPosition === "before" && alignToPrimary && styles4.beforeAlignToPrimary, state.presence.className);
    }
    if (state.primaryText) {
      state.primaryText.className = mergeClasses(personaClassNames.primaryText, alignBeforeAfterCenter && styles4.primary, primaryTextClassName, state.primaryText.className);
    }
    if (state.secondaryText) {
      state.secondaryText.className = mergeClasses(personaClassNames.secondaryText, alignBeforeAfterCenter && styles4.secondary, optionalTextClassName, styles4.secondLineSpacing, state.secondaryText.className);
    }
    if (state.tertiaryText) {
      state.tertiaryText.className = mergeClasses(personaClassNames.tertiaryText, alignBeforeAfterCenter && styles4.tertiary, optionalTextClassName, state.tertiaryText.className);
    }
    if (state.quaternaryText) {
      state.quaternaryText.className = mergeClasses(personaClassNames.quaternaryText, alignBeforeAfterCenter && styles4.quaternary, optionalTextClassName, state.quaternaryText.className);
    }
    return state;
  };
  var usePrimaryTextBaseClassName = /* @__PURE__ */ __resetStyles2("rvj41k9", null, [".rvj41k9{display:block;color:var(--colorNeutralForeground1);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);}"]);
  var useOptionalTextBaseClassName = /* @__PURE__ */ __resetStyles2("rp1pf9e", null, [".rp1pf9e{display:block;color:var(--colorNeutralForeground2);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase200);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase200);}"]);
  var useTextStyles = /* @__PURE__ */ __styles2({
    beforeAlignToPrimary: {
      Bw0ie65: "f1warjpf"
    },
    afterAlignToPrimary: {
      Br312pm: "fwu52yu"
    },
    body1: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    },
    caption1: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    subtitle2: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    }
  }, {
    d: [".f1warjpf{grid-column-end:middle;}", ".fwu52yu{grid-column-start:middle;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".faaz57k{line-height:var(--lineHeightBase400);}"]
  });
  var useTextClassNames = (state, alignToPrimary) => {
    const {
      presenceOnly,
      size: size3,
      textPosition
    } = state;
    const primaryTextBaseClassName = usePrimaryTextBaseClassName();
    const optionalTextBaseClassName = useOptionalTextBaseClassName();
    const textStyles = useTextStyles();
    let primaryTextSize;
    let alignToPrimaryClassName;
    if (presenceOnly) {
      if (size3 === "extra-small") {
        primaryTextSize = state.numTextLines <= 1 && textStyles.caption1;
      } else if (size3 === "extra-large" || size3 === "huge") {
        primaryTextSize = textStyles.subtitle2;
      }
      if (alignToPrimary) {
        if (textPosition === "before") {
          alignToPrimaryClassName = textStyles.beforeAlignToPrimary;
        } else if (textPosition === "after") {
          alignToPrimaryClassName = textStyles.afterAlignToPrimary;
        }
      }
    } else {
      if (size3 === "huge") {
        primaryTextSize = textStyles.subtitle2;
      } else if (size3 === "extra-large") {
        primaryTextSize = textStyles.subtitle2;
      }
    }
    return {
      primaryTextClassName: mergeClasses(primaryTextBaseClassName, primaryTextSize, alignToPrimaryClassName),
      optionalTextClassName: mergeClasses(optionalTextBaseClassName, !presenceOnly && size3 === "huge" && textStyles.body1, alignToPrimaryClassName)
    };
  };

  // ../node_modules/@fluentui/react-persona/lib/components/Persona/Persona.js
  var Persona = /* @__PURE__ */ React115.forwardRef((props, ref) => {
    const state = usePersona_unstable(props, ref);
    usePersonaStyles_unstable(state);
    useCustomStyleHook("usePersonaStyles_unstable")(state);
    return renderPersona_unstable(state);
  });
  Persona.displayName = "Persona";

  // ../node_modules/@fluentui/react-radio/lib/contexts/RadioGroupContext.js
  var React116 = __toESM(require_react());
  var RadioGroupContext = React116.createContext(void 0);
  var radioGroupContextDefaultValue = {};
  var RadioGroupProvider = RadioGroupContext.Provider;
  var useRadioGroupContextValue_unstable = () => React116.useContext(RadioGroupContext) || radioGroupContextDefaultValue;

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/Radio.js
  var React118 = __toESM(require_react());

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/renderRadio.js
  var renderRadio_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        /* @__PURE__ */ jsx(state.input, {}),
        /* @__PURE__ */ jsx(state.indicator, {}),
        state.label && /* @__PURE__ */ jsx(state.label, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/useRadio.js
  var React117 = __toESM(require_react());
  var useRadio_unstable = (props, ref) => {
    const group = useRadioGroupContextValue_unstable();
    const { name = group.name, checked = group.value !== void 0 ? group.value === props.value : void 0, defaultChecked = group.defaultValue !== void 0 ? group.defaultValue === props.value : void 0, labelPosition = group.layout === "horizontal-stacked" ? "below" : "after", disabled = group.disabled, required = group.required, "aria-describedby": ariaDescribedBy = group["aria-describedby"], onChange } = props;
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: [
        "checked",
        "defaultChecked",
        "onChange"
      ]
    });
    const root3 = slot_exports.always(props.root, {
      defaultProps: {
        ref: useFocusWithin(),
        ...nativeProps.root
      },
      elementType: "span"
    });
    const input = slot_exports.always(props.input, {
      defaultProps: {
        ref,
        type: "radio",
        id: useId2("radio-", nativeProps.primary.id),
        name,
        checked,
        defaultChecked,
        disabled,
        required,
        "aria-describedby": ariaDescribedBy,
        ...nativeProps.primary
      },
      elementType: "input"
    });
    input.onChange = mergeCallbacks(input.onChange, (ev) => {
      var _onChange;
      return (_onChange = onChange) === null || _onChange === void 0 ? void 0 : _onChange(ev, {
        value: ev.currentTarget.value
      });
    });
    const label = slot_exports.optional(props.label, {
      defaultProps: {
        htmlFor: input.id,
        disabled: input.disabled
      },
      elementType: Label
    });
    const indicator = slot_exports.always(props.indicator, {
      defaultProps: {
        "aria-hidden": true,
        children: /* @__PURE__ */ React117.createElement(CircleFilled, null)
      },
      elementType: "div"
    });
    return {
      labelPosition,
      components: {
        root: "span",
        input: "input",
        label: Label,
        indicator: "div"
      },
      root: root3,
      input,
      label,
      indicator
    };
  };

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/useRadioStyles.styles.js
  var radioClassNames = {
    root: "fui-Radio",
    indicator: "fui-Radio__indicator",
    input: "fui-Radio__input",
    label: "fui-Radio__label"
  };
  var useRootBaseClassName3 = /* @__PURE__ */ __resetStyles2("r12l4eqc", "r18esy0c", [".r12l4eqc{display:inline-flex;position:relative;}", ".r12l4eqc:focus{outline-style:none;}", ".r12l4eqc:focus-visible{outline-style:none;}", ".r12l4eqc[data-fui-focus-within]:focus-within{border-top-color:transparent;border-right-color:transparent;border-bottom-color:transparent;border-left-color:transparent;}", '.r12l4eqc[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-right-style:solid;border-bottom-style:solid;border-left-style:solid;border-top-width:2px;border-right-width:2px;border-bottom-width:2px;border-left-width:2px;border-bottom-right-radius:var(--borderRadiusMedium);border-bottom-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);top:calc(2px * -1);right:calc(2px * -1);bottom:calc(2px * -1);left:calc(2px * -1);}', ".r18esy0c{display:inline-flex;position:relative;}", ".r18esy0c:focus{outline-style:none;}", ".r18esy0c:focus-visible{outline-style:none;}", ".r18esy0c[data-fui-focus-within]:focus-within{border-top-color:transparent;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;}", '.r18esy0c[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-left-style:solid;border-bottom-style:solid;border-right-style:solid;border-top-width:2px;border-left-width:2px;border-bottom-width:2px;border-right-width:2px;border-bottom-left-radius:var(--borderRadiusMedium);border-bottom-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);top:calc(2px * -1);left:calc(2px * -1);bottom:calc(2px * -1);right:calc(2px * -1);}']);
  var useRootStyles6 = /* @__PURE__ */ __styles2({
    vertical: {
      Beiy3e4: "f1vx9l62",
      Bt984gj: "f122n59"
    }
  }, {
    d: [".f1vx9l62{flex-direction:column;}", ".f122n59{align-items:center;}"]
  });
  var useInputBaseClassName2 = /* @__PURE__ */ __resetStyles2("r9gx1vl", "r1uk1i2c", [".r9gx1vl{position:absolute;left:0;top:0;width:calc(16px + 2 * var(--spacingHorizontalS));height:100%;box-sizing:border-box;margin:0;opacity:0;}", ".r9gx1vl:enabled{cursor:pointer;}", ".r9gx1vl:enabled~.fui-Radio__label{cursor:pointer;}", ".r9gx1vl:not(:checked)~.fui-Radio__indicator>*{opacity:0;}", ".r9gx1vl:enabled:not(:checked)~.fui-Radio__label{color:var(--colorNeutralForeground3);}", ".r9gx1vl:enabled:not(:checked)~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessible);}", ".r9gx1vl:enabled:not(:checked):hover~.fui-Radio__label{color:var(--colorNeutralForeground2);}", ".r9gx1vl:enabled:not(:checked):hover~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessibleHover);}", ".r9gx1vl:enabled:not(:checked):hover:active~.fui-Radio__label{color:var(--colorNeutralForeground1);}", ".r9gx1vl:enabled:not(:checked):hover:active~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessiblePressed);}", ".r9gx1vl:enabled:checked~.fui-Radio__label{color:var(--colorNeutralForeground1);}", ".r9gx1vl:enabled:checked~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStroke);color:var(--colorCompoundBrandForeground1);}", ".r9gx1vl:enabled:checked:hover~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStrokeHover);color:var(--colorCompoundBrandForeground1Hover);}", ".r9gx1vl:enabled:checked:hover:active~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStrokePressed);color:var(--colorCompoundBrandForeground1Pressed);}", ".r9gx1vl:disabled~.fui-Radio__label{color:var(--colorNeutralForegroundDisabled);cursor:default;}", ".r9gx1vl:disabled~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeDisabled);color:var(--colorNeutralForegroundDisabled);}", ".r1uk1i2c{position:absolute;right:0;top:0;width:calc(16px + 2 * var(--spacingHorizontalS));height:100%;box-sizing:border-box;margin:0;opacity:0;}", ".r1uk1i2c:enabled{cursor:pointer;}", ".r1uk1i2c:enabled~.fui-Radio__label{cursor:pointer;}", ".r1uk1i2c:not(:checked)~.fui-Radio__indicator>*{opacity:0;}", ".r1uk1i2c:enabled:not(:checked)~.fui-Radio__label{color:var(--colorNeutralForeground3);}", ".r1uk1i2c:enabled:not(:checked)~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessible);}", ".r1uk1i2c:enabled:not(:checked):hover~.fui-Radio__label{color:var(--colorNeutralForeground2);}", ".r1uk1i2c:enabled:not(:checked):hover~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessibleHover);}", ".r1uk1i2c:enabled:not(:checked):hover:active~.fui-Radio__label{color:var(--colorNeutralForeground1);}", ".r1uk1i2c:enabled:not(:checked):hover:active~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessiblePressed);}", ".r1uk1i2c:enabled:checked~.fui-Radio__label{color:var(--colorNeutralForeground1);}", ".r1uk1i2c:enabled:checked~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStroke);color:var(--colorCompoundBrandForeground1);}", ".r1uk1i2c:enabled:checked:hover~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStrokeHover);color:var(--colorCompoundBrandForeground1Hover);}", ".r1uk1i2c:enabled:checked:hover:active~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStrokePressed);color:var(--colorCompoundBrandForeground1Pressed);}", ".r1uk1i2c:disabled~.fui-Radio__label{color:var(--colorNeutralForegroundDisabled);cursor:default;}", ".r1uk1i2c:disabled~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeDisabled);color:var(--colorNeutralForegroundDisabled);}"]);
  var useInputStyles3 = /* @__PURE__ */ __styles2({
    below: {
      a9b677: "fly5x3f",
      Bqenvij: "f1je6zif"
    }
  }, {
    d: [".fly5x3f{width:100%;}", ".f1je6zif{height:calc(16px + 2 * var(--spacingVerticalS));}"]
  });
  var useIndicatorBaseClassName2 = /* @__PURE__ */ __resetStyles2("rid4516", null, [".rid4516{width:16px;height:16px;font-size:12px;box-sizing:border-box;flex-shrink:0;display:flex;align-items:center;justify-content:center;overflow:hidden;border:var(--strokeWidthThin) solid;border-radius:var(--borderRadiusCircular);margin:var(--spacingVerticalS) var(--spacingHorizontalS);fill:currentColor;pointer-events:none;}"]);
  var useLabelStyles2 = /* @__PURE__ */ __styles2({
    base: {
      qb2dma: "f7nlbp4",
      z8tnut: "f1kwiid1",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f5b47ha",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"]
    },
    after: {
      uwmqm3: ["fruq291", "f7x41pl"],
      B6of3ja: "fjzwpt6",
      jrapky: "fh6j2fo"
    },
    below: {
      z8tnut: "f1ywm7hm",
      fsow6f: "f17mccla"
    }
  }, {
    d: [".f7nlbp4{align-self:center;}", ".f1kwiid1{padding-top:var(--spacingVerticalS);}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f5b47ha{padding-bottom:var(--spacingVerticalS);}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fjzwpt6{margin-top:calc((16px - var(--lineHeightBase300)) / 2);}", ".fh6j2fo{margin-bottom:calc((16px - var(--lineHeightBase300)) / 2);}", ".f1ywm7hm{padding-top:var(--spacingVerticalXS);}", ".f17mccla{text-align:center;}"]
  });
  var useRadioStyles_unstable = (state) => {
    const {
      labelPosition
    } = state;
    const rootBaseClassName = useRootBaseClassName3();
    const rootStyles = useRootStyles6();
    state.root.className = mergeClasses(radioClassNames.root, rootBaseClassName, labelPosition === "below" && rootStyles.vertical, state.root.className);
    const inputBaseClassName = useInputBaseClassName2();
    const inputStyles = useInputStyles3();
    state.input.className = mergeClasses(radioClassNames.input, inputBaseClassName, labelPosition === "below" && inputStyles.below, state.input.className);
    const indicatorBaseClassName = useIndicatorBaseClassName2();
    state.indicator.className = mergeClasses(radioClassNames.indicator, indicatorBaseClassName, state.indicator.className);
    const labelStyles = useLabelStyles2();
    if (state.label) {
      state.label.className = mergeClasses(radioClassNames.label, labelStyles.base, labelStyles[labelPosition], state.label.className);
    }
  };

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/Radio.js
  var Radio = /* @__PURE__ */ React118.forwardRef((props, ref) => {
    const state = useRadio_unstable(props, ref);
    useRadioStyles_unstable(state);
    useCustomStyleHook("useRadioStyles_unstable")(state);
    return renderRadio_unstable(state);
  });
  Radio.displayName = "Radio";

  // ../node_modules/@fluentui/react-switch/lib/components/Switch/Switch.js
  var React120 = __toESM(require_react());

  // ../node_modules/@fluentui/react-switch/lib/components/Switch/useSwitch.js
  var React119 = __toESM(require_react());
  var useSwitch_unstable = (props, ref) => {
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsRequired: true
    });
    const { checked, defaultChecked, disabled, labelPosition = "after", onChange, required } = props;
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: [
        "checked",
        "defaultChecked",
        "onChange"
      ]
    });
    const id = useId2("switch-", nativeProps.primary.id);
    const root3 = slot_exports.always(props.root, {
      defaultProps: {
        ref: useFocusWithin(),
        ...nativeProps.root
      },
      elementType: "div"
    });
    const indicator = slot_exports.always(props.indicator, {
      defaultProps: {
        "aria-hidden": true,
        children: /* @__PURE__ */ React119.createElement(CircleFilled, null)
      },
      elementType: "div"
    });
    const input = slot_exports.always(props.input, {
      defaultProps: {
        checked,
        defaultChecked,
        id,
        ref,
        role: "switch",
        type: "checkbox",
        ...nativeProps.primary
      },
      elementType: "input"
    });
    input.onChange = mergeCallbacks(input.onChange, (ev) => {
      var _onChange;
      return (_onChange = onChange) === null || _onChange === void 0 ? void 0 : _onChange(ev, {
        checked: ev.currentTarget.checked
      });
    });
    const label = slot_exports.optional(props.label, {
      defaultProps: {
        disabled,
        htmlFor: id,
        required,
        size: "medium"
      },
      elementType: Label
    });
    return {
      labelPosition,
      components: {
        root: "div",
        indicator: "div",
        input: "input",
        label: Label
      },
      root: root3,
      indicator,
      input,
      label
    };
  };

  // ../node_modules/@fluentui/react-switch/lib/components/Switch/renderSwitch.js
  var renderSwitch_unstable = (state) => {
    assertSlots(state);
    const { labelPosition } = state;
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        /* @__PURE__ */ jsx(state.input, {}),
        labelPosition !== "after" && state.label && /* @__PURE__ */ jsx(state.label, {}),
        /* @__PURE__ */ jsx(state.indicator, {}),
        labelPosition === "after" && state.label && /* @__PURE__ */ jsx(state.label, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-switch/lib/components/Switch/useSwitchStyles.styles.js
  var switchClassNames = {
    root: "fui-Switch",
    indicator: "fui-Switch__indicator",
    input: "fui-Switch__input",
    label: "fui-Switch__label"
  };
  var switchClassName = switchClassNames.root;
  var spaceBetweenThumbAndTrack = 2;
  var trackHeight = 20;
  var thumbSize = trackHeight - spaceBetweenThumbAndTrack;
  var useRootBaseClassName4 = /* @__PURE__ */ __resetStyles2("rugt7u1", "rqv95o1", [".rugt7u1{align-items:flex-start;box-sizing:border-box;display:inline-flex;position:relative;}", ".rugt7u1:focus{outline-style:none;}", ".rugt7u1:focus-visible{outline-style:none;}", ".rugt7u1[data-fui-focus-within]:focus-within{border-top-color:transparent;border-right-color:transparent;border-bottom-color:transparent;border-left-color:transparent;}", '.rugt7u1[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-right-style:solid;border-bottom-style:solid;border-left-style:solid;border-top-width:2px;border-right-width:2px;border-bottom-width:2px;border-left-width:2px;border-bottom-right-radius:var(--borderRadiusMedium);border-bottom-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);top:calc(2px * -1);right:calc(2px * -1);bottom:calc(2px * -1);left:calc(2px * -1);}', ".rqv95o1{align-items:flex-start;box-sizing:border-box;display:inline-flex;position:relative;}", ".rqv95o1:focus{outline-style:none;}", ".rqv95o1:focus-visible{outline-style:none;}", ".rqv95o1[data-fui-focus-within]:focus-within{border-top-color:transparent;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;}", '.rqv95o1[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-left-style:solid;border-bottom-style:solid;border-right-style:solid;border-top-width:2px;border-left-width:2px;border-bottom-width:2px;border-right-width:2px;border-bottom-left-radius:var(--borderRadiusMedium);border-bottom-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);top:calc(2px * -1);left:calc(2px * -1);bottom:calc(2px * -1);right:calc(2px * -1);}']);
  var useRootStyles7 = /* @__PURE__ */ __styles2({
    vertical: {
      Beiy3e4: "f1vx9l62"
    }
  }, {
    d: [".f1vx9l62{flex-direction:column;}"]
  });
  var useIndicatorBaseClassName3 = /* @__PURE__ */ __resetStyles2("r13wlxb8", null, {
    r: [".r13wlxb8{border-radius:var(--borderRadiusCircular);border:1px solid;line-height:0;box-sizing:border-box;fill:currentColor;flex-shrink:0;font-size:18px;height:20px;margin:var(--spacingVerticalS) var(--spacingHorizontalS);pointer-events:none;transition-duration:var(--durationNormal);transition-timing-function:var(--curveEasyEase);transition-property:background,border,color;width:40px;}", ".r13wlxb8>*{transition-duration:var(--durationNormal);transition-timing-function:var(--curveEasyEase);transition-property:transform;}"],
    s: ["@media screen and (prefers-reduced-motion: reduce){.r13wlxb8{transition-duration:0.01ms;}}", "@media screen and (prefers-reduced-motion: reduce){.r13wlxb8>*{transition-duration:0.01ms;}}"]
  });
  var useIndicatorStyles2 = /* @__PURE__ */ __styles2({
    labelAbove: {
      B6of3ja: "f1hu3pq6"
    }
  }, {
    d: [".f1hu3pq6{margin-top:0;}"]
  });
  var useInputBaseClassName3 = /* @__PURE__ */ __resetStyles2("rw4brat", "r1f4bxyr", {
    r: [".rw4brat{box-sizing:border-box;cursor:pointer;height:100%;margin:0;opacity:0;position:absolute;width:calc(40px + 2 * var(--spacingHorizontalS));}", ".rw4brat:checked~.fui-Switch__indicator>*{transform:translateX(20px);}", ".rw4brat:disabled{cursor:default;}", ".rw4brat:disabled~.fui-Switch__indicator{color:var(--colorNeutralForegroundDisabled);}", ".rw4brat:disabled~.fui-Switch__label{cursor:default;color:var(--colorNeutralForegroundDisabled);}", ".rw4brat:enabled:not(:checked)~.fui-Switch__indicator{color:var(--colorNeutralStrokeAccessible);border-color:var(--colorNeutralStrokeAccessible);}", ".rw4brat:enabled:not(:checked)~.fui-Switch__label{color:var(--colorNeutralForeground1);}", ".rw4brat:enabled:not(:checked):hover~.fui-Switch__indicator{color:var(--colorNeutralStrokeAccessibleHover);border-color:var(--colorNeutralStrokeAccessibleHover);}", ".rw4brat:enabled:not(:checked):hover:active~.fui-Switch__indicator{color:var(--colorNeutralStrokeAccessiblePressed);border-color:var(--colorNeutralStrokeAccessiblePressed);}", ".rw4brat:enabled:checked~.fui-Switch__indicator{background-color:var(--colorCompoundBrandBackground);color:var(--colorNeutralForegroundInverted);border-color:var(--colorTransparentStroke);}", ".rw4brat:enabled:checked:hover~.fui-Switch__indicator{background-color:var(--colorCompoundBrandBackgroundHover);border-color:var(--colorTransparentStrokeInteractive);}", ".rw4brat:enabled:checked:hover:active~.fui-Switch__indicator{background-color:var(--colorCompoundBrandBackgroundPressed);border-color:var(--colorTransparentStrokeInteractive);}", ".rw4brat:disabled:not(:checked)~.fui-Switch__indicator{border-color:var(--colorNeutralStrokeDisabled);}", ".rw4brat:disabled:checked~.fui-Switch__indicator{background-color:var(--colorNeutralBackgroundDisabled);border-color:var(--colorTransparentStrokeDisabled);}", ".r1f4bxyr{box-sizing:border-box;cursor:pointer;height:100%;margin:0;opacity:0;position:absolute;width:calc(40px + 2 * var(--spacingHorizontalS));}", ".r1f4bxyr:checked~.fui-Switch__indicator>*{transform:translateX(-20px);}", ".r1f4bxyr:disabled{cursor:default;}", ".r1f4bxyr:disabled~.fui-Switch__indicator{color:var(--colorNeutralForegroundDisabled);}", ".r1f4bxyr:disabled~.fui-Switch__label{cursor:default;color:var(--colorNeutralForegroundDisabled);}", ".r1f4bxyr:enabled:not(:checked)~.fui-Switch__indicator{color:var(--colorNeutralStrokeAccessible);border-color:var(--colorNeutralStrokeAccessible);}", ".r1f4bxyr:enabled:not(:checked)~.fui-Switch__label{color:var(--colorNeutralForeground1);}", ".r1f4bxyr:enabled:not(:checked):hover~.fui-Switch__indicator{color:var(--colorNeutralStrokeAccessibleHover);border-color:var(--colorNeutralStrokeAccessibleHover);}", ".r1f4bxyr:enabled:not(:checked):hover:active~.fui-Switch__indicator{color:var(--colorNeutralStrokeAccessiblePressed);border-color:var(--colorNeutralStrokeAccessiblePressed);}", ".r1f4bxyr:enabled:checked~.fui-Switch__indicator{background-color:var(--colorCompoundBrandBackground);color:var(--colorNeutralForegroundInverted);border-color:var(--colorTransparentStroke);}", ".r1f4bxyr:enabled:checked:hover~.fui-Switch__indicator{background-color:var(--colorCompoundBrandBackgroundHover);border-color:var(--colorTransparentStrokeInteractive);}", ".r1f4bxyr:enabled:checked:hover:active~.fui-Switch__indicator{background-color:var(--colorCompoundBrandBackgroundPressed);border-color:var(--colorTransparentStrokeInteractive);}", ".r1f4bxyr:disabled:not(:checked)~.fui-Switch__indicator{border-color:var(--colorNeutralStrokeDisabled);}", ".r1f4bxyr:disabled:checked~.fui-Switch__indicator{background-color:var(--colorNeutralBackgroundDisabled);border-color:var(--colorTransparentStrokeDisabled);}"],
    s: ["@media (forced-colors: active){.rw4brat:disabled~.fui-Switch__indicator{color:GrayText;border-color:GrayText;}.rw4brat:disabled~.fui-Switch__label{color:GrayText;}.rw4brat:enabled:checked:hover~.fui-Switch__indicator{background-color:Highlight;color:Canvas;}.rw4brat:enabled:checked~.fui-Switch__indicator{background-color:Highlight;color:Canvas;}}", "@media (forced-colors: active){.r1f4bxyr:disabled~.fui-Switch__indicator{color:GrayText;border-color:GrayText;}.r1f4bxyr:disabled~.fui-Switch__label{color:GrayText;}.r1f4bxyr:enabled:checked:hover~.fui-Switch__indicator{background-color:Highlight;color:Canvas;}.r1f4bxyr:enabled:checked~.fui-Switch__indicator{background-color:Highlight;color:Canvas;}}"]
  });
  var useInputStyles4 = /* @__PURE__ */ __styles2({
    before: {
      j35jbq: ["f1e31b4d", "f1vgc2s3"],
      Bhzewxz: "f15twtuk"
    },
    after: {
      oyh7mz: ["f1vgc2s3", "f1e31b4d"],
      Bhzewxz: "f15twtuk"
    },
    above: {
      B5kzvoi: "f1yab3r1",
      Bqenvij: "f1aar7gd",
      a9b677: "fly5x3f"
    }
  }, {
    d: [".f1e31b4d{right:0;}", ".f1vgc2s3{left:0;}", ".f15twtuk{top:0;}", ".f1yab3r1{bottom:0;}", ".f1aar7gd{height:calc(20px + var(--spacingVerticalS));}", ".fly5x3f{width:100%;}"]
  });
  var useLabelStyles3 = /* @__PURE__ */ __styles2({
    base: {
      Bceei9c: "f1k6fduh",
      jrapky: "f49ad5g",
      B6of3ja: "f1xlvstr",
      z8tnut: "f1kwiid1",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f5b47ha",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"]
    },
    above: {
      z8tnut: "f1ywm7hm",
      Byoj8tv: "f14wxoun",
      a9b677: "fly5x3f"
    },
    after: {
      uwmqm3: ["fruq291", "f7x41pl"]
    },
    before: {
      z189sj: ["f7x41pl", "fruq291"]
    }
  }, {
    d: [".f1k6fduh{cursor:pointer;}", ".f49ad5g{margin-bottom:calc((20px - var(--lineHeightBase300)) / 2);}", ".f1xlvstr{margin-top:calc((20px - var(--lineHeightBase300)) / 2);}", ".f1kwiid1{padding-top:var(--spacingVerticalS);}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f5b47ha{padding-bottom:var(--spacingVerticalS);}", ".f1ywm7hm{padding-top:var(--spacingVerticalXS);}", ".f14wxoun{padding-bottom:var(--spacingVerticalXS);}", ".fly5x3f{width:100%;}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}"]
  });
  var useSwitchStyles_unstable = (state) => {
    const rootBaseClassName = useRootBaseClassName4();
    const rootStyles = useRootStyles7();
    const indicatorBaseClassName = useIndicatorBaseClassName3();
    const indicatorStyles = useIndicatorStyles2();
    const inputBaseClassName = useInputBaseClassName3();
    const inputStyles = useInputStyles4();
    const labelStyles = useLabelStyles3();
    const {
      label,
      labelPosition
    } = state;
    state.root.className = mergeClasses(switchClassNames.root, rootBaseClassName, labelPosition === "above" && rootStyles.vertical, state.root.className);
    state.indicator.className = mergeClasses(switchClassNames.indicator, indicatorBaseClassName, label && labelPosition === "above" && indicatorStyles.labelAbove, state.indicator.className);
    state.input.className = mergeClasses(switchClassNames.input, inputBaseClassName, label && inputStyles[labelPosition], state.input.className);
    if (state.label) {
      state.label.className = mergeClasses(switchClassNames.label, labelStyles.base, labelStyles[labelPosition], state.label.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-switch/lib/components/Switch/Switch.js
  var Switch = /* @__PURE__ */ React120.forwardRef((props, ref) => {
    const state = useSwitch_unstable(props, ref);
    useSwitchStyles_unstable(state);
    useCustomStyleHook("useSwitchStyles_unstable")(state);
    return renderSwitch_unstable(state);
  });
  Switch.displayName = "Switch";

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/Tab.js
  var React123 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/useTab.js
  var React121 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/TabListContext.js
  var tabListContextDefaultValue = {
    appearance: "transparent",
    reserveSelectedTabSpace: true,
    disabled: false,
    selectedValue: void 0,
    onRegister: () => {
    },
    onUnregister: () => {
    },
    onSelect: () => {
    },
    getRegisteredTabs: () => {
      return {
        registeredTabs: {}
      };
    },
    size: "medium",
    vertical: false
  };
  var TabListContext = createContext14(void 0);
  var TabListProvider = TabListContext.Provider;
  var useTabListContext_unstable = (selector) => useContextSelector(TabListContext, (ctx = tabListContextDefaultValue) => selector(ctx));

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/useTab.js
  var useTab_unstable = (props, ref) => {
    var _iconSlot;
    const { content: content3, disabled: tabDisabled = false, icon, onClick, value } = props;
    const appearance = useTabListContext_unstable((ctx) => ctx.appearance);
    const reserveSelectedTabSpace = useTabListContext_unstable((ctx) => ctx.reserveSelectedTabSpace);
    const listDisabled = useTabListContext_unstable((ctx) => ctx.disabled);
    const selected = useTabListContext_unstable((ctx) => ctx.selectedValue === value);
    const onRegister = useTabListContext_unstable((ctx) => ctx.onRegister);
    const onUnregister = useTabListContext_unstable((ctx) => ctx.onUnregister);
    const onSelect = useTabListContext_unstable((ctx) => ctx.onSelect);
    const size3 = useTabListContext_unstable((ctx) => ctx.size);
    const vertical = useTabListContext_unstable((ctx) => !!ctx.vertical);
    const disabled = listDisabled || tabDisabled;
    const innerRef = React121.useRef(null);
    const onTabClick = useEventCallback(mergeCallbacks(onClick, (event) => onSelect(event, {
      value
    })));
    React121.useEffect(() => {
      onRegister({
        value,
        ref: innerRef
      });
      return () => {
        onUnregister({
          value,
          ref: innerRef
        });
      };
    }, [
      onRegister,
      onUnregister,
      innerRef,
      value
    ]);
    const iconSlot = slot_exports.optional(icon, {
      elementType: "span"
    });
    const contentSlot = slot_exports.always(content3, {
      defaultProps: {
        children: props.children
      },
      elementType: "span"
    });
    const iconOnly = Boolean(((_iconSlot = iconSlot) === null || _iconSlot === void 0 ? void 0 : _iconSlot.children) && !contentSlot.children);
    return {
      components: {
        root: "button",
        icon: "span",
        content: "span",
        contentReservedSpace: "span"
      },
      root: slot_exports.always(getNativeElementProps("button", {
        ref: useMergedRefs(ref, innerRef),
        role: "tab",
        type: "button",
        // aria-selected undefined indicates it is not selectable
        // according to https://www.w3.org/TR/wai-aria-1.1/#aria-selected
        "aria-selected": disabled ? void 0 : `${selected}`,
        ...props,
        disabled,
        onClick: onTabClick
      }), {
        elementType: "button"
      }),
      icon: iconSlot,
      iconOnly,
      content: contentSlot,
      contentReservedSpace: slot_exports.optional(content3, {
        renderByDefault: !selected && !iconOnly && reserveSelectedTabSpace,
        defaultProps: {
          children: props.children
        },
        elementType: "span"
      }),
      appearance,
      disabled,
      selected,
      size: size3,
      value,
      vertical
    };
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/renderTab.js
  var renderTab_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.icon && /* @__PURE__ */ jsx(state.icon, {}),
        !state.iconOnly && /* @__PURE__ */ jsx(state.content, {}),
        state.contentReservedSpace && /* @__PURE__ */ jsx(state.contentReservedSpace, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/useTabAnimatedIndicator.styles.js
  var React122 = __toESM(require_react());
  var tabIndicatorCssVars_unstable = {
    offsetVar: "--fui-Tab__indicator--offset",
    scaleVar: "--fui-Tab__indicator--scale"
  };
  var useActiveIndicatorStyles = /* @__PURE__ */ __styles2({
    base: {
      B68tc82: "f1mtd64y",
      Bmxbyg5: "f1y7q3j9"
    },
    animated: {
      Ba2ppi3: "fhwpy7i",
      F2fol1: "f6zz20j",
      B1dyfl9: "f1ai4sc1",
      B0vmy72: "f9qxlq5",
      u9bimw: "f1aql376"
    },
    horizontal: {
      sjv3b2: ["fug4aj8", "f1i5xzg7"],
      b1kco5: "f1q7ujh"
    },
    vertical: {
      sjv3b2: "f1hqboyk",
      b1kco5: "f1dxupa6"
    }
  }, {
    d: [".f1mtd64y{overflow-x:visible;}", ".f1y7q3j9{overflow-y:visible;}", ".fhwpy7i::after{transition-property:transform;}", ".f6zz20j::after{transition-duration:var(--durationSlow);}", ".f1ai4sc1::after{transition-timing-function:var(--curveDecelerateMax);}", ".fug4aj8::after{transform-origin:left;}", ".f1i5xzg7::after{transform-origin:right;}", ".f1q7ujh::after{transform:translateX(var(--fui-Tab__indicator--offset)) scaleX(var(--fui-Tab__indicator--scale));}", ".f1hqboyk::after{transform-origin:top;}", ".f1dxupa6::after{transform:translateY(var(--fui-Tab__indicator--offset)) scaleY(var(--fui-Tab__indicator--scale));}"],
    m: [["@media (prefers-reduced-motion: reduce){.f9qxlq5::after{transition-property:none;}}", {
      m: "(prefers-reduced-motion: reduce)"
    }], ["@media (prefers-reduced-motion: reduce){.f1aql376::after{transition-duration:0.01ms;}}", {
      m: "(prefers-reduced-motion: reduce)"
    }]]
  });
  var calculateTabRect = (element2) => {
    if (element2) {
      var _element_parentElement;
      const parentRect = ((_element_parentElement = element2.parentElement) === null || _element_parentElement === void 0 ? void 0 : _element_parentElement.getBoundingClientRect()) || {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      const tabRect = element2.getBoundingClientRect();
      return {
        x: tabRect.x - parentRect.x,
        y: tabRect.y - parentRect.y,
        width: tabRect.width,
        height: tabRect.height
      };
    }
    return void 0;
  };
  var getRegisteredTabRect = (registeredTabs, value) => {
    var _registeredTabs_JSON_stringify;
    const element2 = value !== void 0 && value !== null ? (_registeredTabs_JSON_stringify = registeredTabs[JSON.stringify(value)]) === null || _registeredTabs_JSON_stringify === void 0 ? void 0 : _registeredTabs_JSON_stringify.ref.current : void 0;
    return element2 ? calculateTabRect(element2) : void 0;
  };
  var useTabAnimatedIndicatorStyles_unstable = (state) => {
    const {
      disabled,
      selected,
      vertical
    } = state;
    const activeIndicatorStyles = useActiveIndicatorStyles();
    const [lastAnimatedFrom, setLastAnimatedFrom] = React122.useState();
    const [animationValues, setAnimationValues] = React122.useState({
      offset: 0,
      scale: 1
    });
    const getRegisteredTabs = useTabListContext_unstable((ctx) => ctx.getRegisteredTabs);
    React122.useEffect(() => {
      if (lastAnimatedFrom) {
        setAnimationValues({
          offset: 0,
          scale: 1
        });
      }
    }, [lastAnimatedFrom]);
    if (selected) {
      const {
        previousSelectedValue,
        selectedValue,
        registeredTabs
      } = getRegisteredTabs();
      if (previousSelectedValue && lastAnimatedFrom !== previousSelectedValue) {
        const previousSelectedTabRect = getRegisteredTabRect(registeredTabs, previousSelectedValue);
        const selectedTabRect = getRegisteredTabRect(registeredTabs, selectedValue);
        if (selectedTabRect && previousSelectedTabRect) {
          const offset3 = vertical ? previousSelectedTabRect.y - selectedTabRect.y : previousSelectedTabRect.x - selectedTabRect.x;
          const scale = vertical ? previousSelectedTabRect.height / selectedTabRect.height : previousSelectedTabRect.width / selectedTabRect.width;
          setAnimationValues({
            offset: offset3,
            scale
          });
          setLastAnimatedFrom(previousSelectedValue);
        }
      }
    } else if (lastAnimatedFrom) {
      setLastAnimatedFrom(void 0);
    }
    if (disabled) {
      return state;
    }
    const animating = animationValues.offset === 0 && animationValues.scale === 1;
    state.root.className = mergeClasses(state.root.className, selected && activeIndicatorStyles.base, selected && animating && activeIndicatorStyles.animated, selected && (vertical ? activeIndicatorStyles.vertical : activeIndicatorStyles.horizontal));
    const rootCssVars = {
      [tabIndicatorCssVars_unstable.offsetVar]: `${animationValues.offset}px`,
      [tabIndicatorCssVars_unstable.scaleVar]: `${animationValues.scale}`
    };
    state.root.style = {
      ...rootCssVars,
      ...state.root.style
    };
    return state;
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/useTabStyles.styles.js
  var tabClassNames = {
    root: "fui-Tab",
    icon: "fui-Tab__icon",
    content: "fui-Tab__content"
  };
  var reservedSpaceClassNames = {
    content: "fui-Tab__content--reserved-space"
  };
  var useRootStyles8 = /* @__PURE__ */ __styles2({
    base: {
      Bt984gj: "f122n59",
      g2u3we: "fwhevhj",
      h3c5rm: ["f61n433", "f1q8l70w"],
      B9xav0g: "fv1dfc8",
      zhjwy3: ["f1q8l70w", "f61n433"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      B4j52fo: "fre7gi1",
      Bekrc4i: ["f1358rze", "f1rvrf73"],
      Bn0qgzm: "fqdk4by",
      ibv6hh: ["f1rvrf73", "f1358rze"],
      Bceei9c: "f1k6fduh",
      mc9l5x: "f13qh94s",
      Bnnss6s: "fi64zpg",
      Bxotwcr: "f1u07yai",
      Budl1dq: "frn2hmy",
      wkccdc: "f1olsevy",
      Bahqtrf: "fk6fouc",
      Bg96gwp: "f1i3iumi",
      oeaueh: "f1s6fcnf",
      qhf8xq: "f10pi13n",
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      B9bfxx9: "f1cxpek8"
    },
    horizontal: {
      Brf1p80: "f4d9j23"
    },
    vertical: {
      Brf1p80: "f1s9ku6b"
    },
    smallHorizontal: {
      i8kkvl: "f14mj54c",
      z8tnut: "fp2oml8",
      z189sj: ["fdw0yi8", "fk8j09s"],
      Byoj8tv: "f1tdddsa",
      uwmqm3: ["fk8j09s", "fdw0yi8"]
    },
    smallVertical: {
      i8kkvl: "f14mj54c",
      z8tnut: "fclwglc",
      z189sj: ["fdw0yi8", "fk8j09s"],
      Byoj8tv: "fywfov9",
      uwmqm3: ["fk8j09s", "fdw0yi8"]
    },
    mediumHorizontal: {
      i8kkvl: "f1rjii52",
      z8tnut: "f5yzyt",
      z189sj: ["f11gcy0p", "f1ng84yb"],
      Byoj8tv: "fx3omr",
      uwmqm3: ["f1ng84yb", "f11gcy0p"]
    },
    mediumVertical: {
      i8kkvl: "f1rjii52",
      z8tnut: "fp2oml8",
      z189sj: ["f11gcy0p", "f1ng84yb"],
      Byoj8tv: "f1tdddsa",
      uwmqm3: ["f1ng84yb", "f11gcy0p"]
    },
    largeHorizontal: {
      i8kkvl: "f1rjii52",
      z8tnut: "fikn0iw",
      z189sj: ["f11gcy0p", "f1ng84yb"],
      Byoj8tv: "fdxej3c",
      uwmqm3: ["f1ng84yb", "f11gcy0p"]
    },
    largeVertical: {
      i8kkvl: "f1rjii52",
      z8tnut: "f1kwiid1",
      z189sj: ["f11gcy0p", "f1ng84yb"],
      Byoj8tv: "f5b47ha",
      uwmqm3: ["f1ng84yb", "f11gcy0p"]
    },
    transparent: {
      De3pzq: "f1c21dwh",
      Jwef8y: "fjxutwb",
      ecr2s2: "fophhak",
      Bptxc3x: "fmmjozx",
      B076xvk: "f1mfqf41",
      q9r9w5: "f10aiid4",
      cl4aha: "fpkze5g",
      Bk452zc: "f149wc3x",
      a4hkcw: "fjioou7"
    },
    subtle: {
      De3pzq: "fhovq9v",
      Jwef8y: "f1t94bn6",
      ecr2s2: "f1wfn5kd",
      Bptxc3x: "fmmjozx",
      B076xvk: "f1mfqf41",
      q9r9w5: "f10aiid4",
      cl4aha: "fpkze5g",
      Bk452zc: "f149wc3x",
      a4hkcw: "fjioou7"
    },
    disabled: {
      De3pzq: "f1c21dwh",
      Bptxc3x: "fato7r6",
      cl4aha: "fao1bnu",
      Bceei9c: "fdrzuqr"
    },
    selected: {
      Bptxc3x: "f1cadz5z",
      B076xvk: "f1ck17l",
      q9r9w5: "f42ak0g",
      cl4aha: "ffplhdr",
      Bk452zc: "ffth601",
      a4hkcw: "fhklyu5"
    }
  }, {
    d: [".f122n59{align-items:center;}", ".fwhevhj{border-top-color:none;}", ".f61n433{border-right-color:none;}", ".f1q8l70w{border-left-color:none;}", ".fv1dfc8{border-bottom-color:none;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".fre7gi1{border-top-width:0;}", ".f1358rze{border-right-width:0;}", ".f1rvrf73{border-left-width:0;}", ".fqdk4by{border-bottom-width:0;}", ".f1k6fduh{cursor:pointer;}", ".f13qh94s{display:grid;}", ".fi64zpg{flex-shrink:0;}", ".f1u07yai{grid-auto-flow:column;}", ".frn2hmy{grid-template-columns:auto;}", ".f1olsevy{grid-template-rows:auto;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f1s6fcnf{outline-style:none;}", ".f10pi13n{position:relative;}", ".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".f1cxpek8{text-transform:none;}", ".f4d9j23{justify-content:center;}", ".f1s9ku6b{justify-content:start;}", ".f14mj54c{column-gap:var(--spacingHorizontalXXS);}", ".fp2oml8{padding-top:var(--spacingVerticalSNudge);}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".f1tdddsa{padding-bottom:var(--spacingVerticalSNudge);}", ".fclwglc{padding-top:var(--spacingVerticalXXS);}", ".fywfov9{padding-bottom:var(--spacingVerticalXXS);}", ".f1rjii52{column-gap:var(--spacingHorizontalSNudge);}", ".f5yzyt{padding-top:var(--spacingVerticalM);}", ".f11gcy0p{padding-right:var(--spacingHorizontalMNudge);}", ".f1ng84yb{padding-left:var(--spacingHorizontalMNudge);}", ".fx3omr{padding-bottom:var(--spacingVerticalM);}", ".fikn0iw{padding-top:var(--spacingVerticalL);}", ".fdxej3c{padding-bottom:var(--spacingVerticalL);}", ".f1kwiid1{padding-top:var(--spacingVerticalS);}", ".f5b47ha{padding-bottom:var(--spacingVerticalS);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".fmmjozx .fui-Tab__icon{color:var(--colorNeutralForeground2);}", ".fpkze5g .fui-Tab__content{color:var(--colorNeutralForeground2);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fato7r6 .fui-Tab__icon{color:var(--colorNeutralForegroundDisabled);}", ".fao1bnu .fui-Tab__content{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".f1cadz5z .fui-Tab__icon{color:var(--colorCompoundBrandForeground1);}", ".ffplhdr .fui-Tab__content{color:var(--colorNeutralForeground1);}"],
    h: [".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".f1mfqf41:hover .fui-Tab__icon{color:var(--colorNeutralForeground2Hover);}", ".f149wc3x:hover .fui-Tab__content{color:var(--colorNeutralForeground2Hover);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".f1ck17l:hover .fui-Tab__icon{color:var(--colorCompoundBrandForeground1Hover);}", ".ffth601:hover .fui-Tab__content{color:var(--colorNeutralForeground1Hover);}"],
    a: [".fophhak:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f10aiid4:active .fui-Tab__icon{color:var(--colorNeutralForeground2Pressed);}", ".fjioou7:active .fui-Tab__content{color:var(--colorNeutralForeground2Pressed);}", ".f1wfn5kd:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f42ak0g:active .fui-Tab__icon{color:var(--colorCompoundBrandForeground1Pressed);}", ".fhklyu5:active .fui-Tab__content{color:var(--colorNeutralForeground1Pressed);}"]
  });
  var useFocusStyles = /* @__PURE__ */ __styles2({
    base: {
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bn4voq9: "f1p7hgxw",
      Bfpq7zp: "f1way5bb",
      g9k6zt: "f9znhxp",
      j6ew2k: ["fqa318h", "fqa318h"],
      Bhxq17a: "f1vjpng2"
    }
  }, {
    d: [".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", ".f1p7hgxw[data-fui-focus-visible]{outline-width:var(--strokeWidthThick);}", ".f1way5bb[data-fui-focus-visible]{outline-color:transparent;}", ".f9znhxp[data-fui-focus-visible]{outline-style:solid;}", ".fqa318h[data-fui-focus-visible]{box-shadow:var(--shadow4),0 0 0 var(--strokeWidthThick) var(--colorStrokeFocus2);}", ".f1vjpng2[data-fui-focus-visible]{z-index:1;}"]
  });
  var usePendingIndicatorStyles = /* @__PURE__ */ __styles2({
    base: {
      az7l2e: "fhw179n",
      Bv4n3vi: ["f10y1uxy", "f6aiuy0"],
      vqofr: ["f6aiuy0", "f10y1uxy"],
      B0uxbk8: ["f1kfpfnu", "f1dx5wco"],
      Bgqb9hq: ["f1dx5wco", "f1kfpfnu"],
      amg5m6: "f1kmhr4c",
      zkfqfm: "fl1ydde",
      Bkydozb: "f1y7maxz",
      vzq8l0: ["f105swax", "fscdmel"],
      Bka2azo: ["fscdmel", "f105swax"],
      Br4ovkg: ["f1tkcw1w", "f1u11x8o"],
      csmgbd: ["f1u11x8o", "f1tkcw1w"],
      y36c18: "f16cxu0",
      B1ctymy: "f1nwgacf",
      Bgvrrv0: "f15ovonk",
      ddr6p5: "fvje46l"
    },
    disabled: {
      az7l2e: "f1ut20fw",
      Bkydozb: "fhrzcfn"
    },
    smallHorizontal: {
      lawp4y: "fchca7p",
      Baz25je: "f1r53b5e",
      Fbdkly: ["f1s6rxz5", "fo35v8s"],
      mdwyqc: ["fo35v8s", "f1s6rxz5"]
    },
    smallVertical: {
      lawp4y: "fze4zud",
      Fbdkly: ["f1fzr1x6", "f1f351id"],
      Bciustq: "fdp32p8",
      Ccq8qp: "f1aij3q"
    },
    mediumHorizontal: {
      lawp4y: "fchca7p",
      Baz25je: "f1s2r9ax",
      Fbdkly: ["f1o0nnkk", "fxb7rol"],
      mdwyqc: ["fxb7rol", "f1o0nnkk"]
    },
    mediumVertical: {
      lawp4y: "f17jracn",
      Fbdkly: ["f1fzr1x6", "f1f351id"],
      Bciustq: "f117lcb2",
      Ccq8qp: "f1aij3q"
    },
    largeHorizontal: {
      lawp4y: "fchca7p",
      Baz25je: "f1s2r9ax",
      Fbdkly: ["f1o0nnkk", "fxb7rol"],
      mdwyqc: ["fxb7rol", "f1o0nnkk"]
    },
    largeVertical: {
      lawp4y: "fel9d3z",
      Fbdkly: ["f1fzr1x6", "f1f351id"],
      Bciustq: "f6vqlre",
      Ccq8qp: "f1aij3q"
    }
  }, {
    h: [".fhw179n:hover::before{background-color:var(--colorNeutralStroke1Hover);}", ".f10y1uxy:hover::before{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f6aiuy0:hover::before{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1kfpfnu:hover::before{border-top-right-radius:var(--borderRadiusCircular);}", ".f1dx5wco:hover::before{border-top-left-radius:var(--borderRadiusCircular);}", '.f1kmhr4c:hover::before{content:"";}', ".fl1ydde:hover::before{position:absolute;}", ".f1ut20fw:hover::before{background-color:var(--colorTransparentStroke);}"],
    a: [".f1y7maxz:active::before{background-color:var(--colorNeutralStroke1Pressed);}", ".f105swax:active::before{border-bottom-right-radius:var(--borderRadiusCircular);}", ".fscdmel:active::before{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1tkcw1w:active::before{border-top-right-radius:var(--borderRadiusCircular);}", ".f1u11x8o:active::before{border-top-left-radius:var(--borderRadiusCircular);}", '.f16cxu0:active::before{content:"";}', ".f1nwgacf:active::before{position:absolute;}", ".fhrzcfn:active::before{background-color:var(--colorTransparentStroke);}"],
    m: [["@media (forced-colors: active){.f15ovonk:hover::before{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fvje46l:active::before{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }]],
    d: [".fchca7p::before{bottom:0;}", ".f1r53b5e::before{height:var(--strokeWidthThick);}", ".f1s6rxz5::before{left:var(--spacingHorizontalSNudge);}", ".fo35v8s::before{right:var(--spacingHorizontalSNudge);}", ".fze4zud::before{bottom:var(--spacingVerticalXS);}", ".f1fzr1x6::before{left:0;}", ".f1f351id::before{right:0;}", ".fdp32p8::before{top:var(--spacingVerticalXS);}", ".f1aij3q::before{width:var(--strokeWidthThicker);}", ".f1s2r9ax::before{height:var(--strokeWidthThicker);}", ".f1o0nnkk::before{left:var(--spacingHorizontalM);}", ".fxb7rol::before{right:var(--spacingHorizontalM);}", ".f17jracn::before{bottom:var(--spacingVerticalS);}", ".f117lcb2::before{top:var(--spacingVerticalS);}", ".fel9d3z::before{bottom:var(--spacingVerticalMNudge);}", ".f6vqlre::before{top:var(--spacingVerticalMNudge);}"]
  });
  var useActiveIndicatorStyles2 = /* @__PURE__ */ __styles2({
    base: {
      Bjyk6c5: "f1rp0jgh",
      B3778ie: ["fprarqb", "f14vs0nd"],
      d9w3h3: ["f14vs0nd", "fprarqb"],
      Bl18szs: ["f1gtfqs9", "f18zvfd9"],
      B4j8arr: ["f18zvfd9", "f1gtfqs9"],
      Bsft5z2: "f13zj6fq",
      E3zdtr: "f1mdlcz9",
      t2ki1e: "ffmd2fr"
    },
    selected: {
      Bjyk6c5: "f1ksivud",
      Glksuk: "f1eytvvh",
      Blzl0y7: "fuaa9s",
      f7digc: "fy7ktjt",
      Biqphg1: "f16tp0gf",
      Bntoloa: "fj0yp7j"
    },
    disabled: {
      Bjyk6c5: "f13lkzet"
    },
    smallHorizontal: {
      By385i5: "fo72kxq",
      Dlnsje: "f9bb2ob",
      Eqx8gd: ["f1q70ajw", "f18rbzdx"],
      B1piin3: ["f18rbzdx", "f1q70ajw"]
    },
    smallVertical: {
      By385i5: "fqbue9b",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      bn5sak: "fk1klkt",
      a2br6o: "f1o25lip"
    },
    mediumHorizontal: {
      By385i5: "fo72kxq",
      Dlnsje: "f1vx7lu8",
      Eqx8gd: ["fna7m5n", "f1oxpfwv"],
      B1piin3: ["f1oxpfwv", "fna7m5n"]
    },
    mediumVertical: {
      By385i5: "fipylg0",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      bn5sak: "fqchiol",
      a2br6o: "f1o25lip"
    },
    largeHorizontal: {
      By385i5: "fo72kxq",
      Dlnsje: "f1vx7lu8",
      Eqx8gd: ["fna7m5n", "f1oxpfwv"],
      B1piin3: ["f1oxpfwv", "fna7m5n"]
    },
    largeVertical: {
      By385i5: "f1w7dm5g",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      bn5sak: "f1p6em4m",
      a2br6o: "f1o25lip"
    }
  }, {
    d: [".f1rp0jgh::after{background-color:var(--colorTransparentStroke);}", ".fprarqb::after{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f14vs0nd::after{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1gtfqs9::after{border-top-right-radius:var(--borderRadiusCircular);}", ".f18zvfd9::after{border-top-left-radius:var(--borderRadiusCircular);}", '.f13zj6fq::after{content:"";}', ".f1mdlcz9::after{position:absolute;}", ".ffmd2fr::after{z-index:1;}", ".f1ksivud::after{background-color:var(--colorCompoundBrandStroke);}", ".f13lkzet::after{background-color:var(--colorNeutralForegroundDisabled);}", ".fo72kxq::after{bottom:0;}", ".f9bb2ob::after{height:var(--strokeWidthThick);}", ".f1q70ajw::after{left:var(--spacingHorizontalSNudge);}", ".f18rbzdx::after{right:var(--spacingHorizontalSNudge);}", ".fqbue9b::after{bottom:var(--spacingVerticalXS);}", ".f1n6gb5g::after{left:0;}", ".f15yvnhg::after{right:0;}", ".fk1klkt::after{top:var(--spacingVerticalXS);}", ".f1o25lip::after{width:var(--strokeWidthThicker);}", ".f1vx7lu8::after{height:var(--strokeWidthThicker);}", ".fna7m5n::after{left:var(--spacingHorizontalM);}", ".f1oxpfwv::after{right:var(--spacingHorizontalM);}", ".fipylg0::after{bottom:var(--spacingVerticalS);}", ".fqchiol::after{top:var(--spacingVerticalS);}", ".f1w7dm5g::after{bottom:var(--spacingVerticalMNudge);}", ".f1p6em4m::after{top:var(--spacingVerticalMNudge);}"],
    h: [".f1eytvvh:hover::after{background-color:var(--colorCompoundBrandStrokeHover);}"],
    a: [".fuaa9s:active::after{background-color:var(--colorCompoundBrandStrokePressed);}"],
    m: [["@media (forced-colors: active){.fy7ktjt::after{background-color:ButtonText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f16tp0gf:hover::after{background-color:ButtonText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fj0yp7j:active::after{background-color:ButtonText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useIconStyles4 = /* @__PURE__ */ __styles2({
    base: {
      Br312pm: "fwpfdsa",
      Ijaq50: "f16hsg94",
      Bt984gj: "f122n59",
      mc9l5x: "ftuwxu6",
      Brf1p80: "f4d9j23",
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      D0sxk3: "f16u1re",
      t6yez3: "f8bsbmo"
    },
    small: {
      Be2twd7: "fe5j1ua",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3"
    },
    medium: {
      Be2twd7: "fe5j1ua",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3"
    },
    large: {
      Be2twd7: "f1rt2boy",
      Bqenvij: "frvgh55",
      a9b677: "fq4mcun"
    },
    selected: {
      D0sxk3: "fxoiby5",
      t6yez3: "f15q0o9g"
    }
  }, {
    d: [".fwpfdsa{grid-column-start:1;}", ".f16hsg94{grid-row-start:1;}", ".f122n59{align-items:center;}", ".ftuwxu6{display:inline-flex;}", ".f4d9j23{justify-content:center;}", ".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".f16u1re .fui-Icon-filled{display:none;}", ".f8bsbmo .fui-Icon-regular{display:inline;}", ".fe5j1ua{font-size:20px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".f1rt2boy{font-size:24px;}", ".frvgh55{height:24px;}", ".fq4mcun{width:24px;}", ".fxoiby5 .fui-Icon-filled{display:inline;}", ".f15q0o9g .fui-Icon-regular{display:none;}"]
  });
  var useContentStyles2 = /* @__PURE__ */ __styles2({
    base: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi",
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      z8tnut: "fztplxc",
      z189sj: ["ffczdla", "fgiv446"],
      Byoj8tv: "f9g1xly",
      uwmqm3: ["fgiv446", "ffczdla"]
    },
    selected: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "f1i3iumi"
    },
    large: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "figsok6",
      Bg96gwp: "faaz57k"
    },
    largeSelected: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    },
    noIconBefore: {
      Br312pm: "fwpfdsa",
      Ijaq50: "f16hsg94"
    },
    iconBefore: {
      Br312pm: "fd46tj4",
      Ijaq50: "f16hsg94"
    },
    placeholder: {
      Bcdw1i0: "fd7fpy0"
    }
  }, {
    d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".fztplxc{padding-top:var(--spacingVerticalNone);}", ".ffczdla{padding-right:var(--spacingHorizontalXXS);}", ".fgiv446{padding-left:var(--spacingHorizontalXXS);}", ".f9g1xly{padding-bottom:var(--spacingVerticalNone);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fwpfdsa{grid-column-start:1;}", ".f16hsg94{grid-row-start:1;}", ".fd46tj4{grid-column-start:2;}", ".fd7fpy0{visibility:hidden;}"]
  });
  var useTabStyles_unstable = (state) => {
    const rootStyles = useRootStyles8();
    const focusStyles = useFocusStyles();
    const pendingIndicatorStyles = usePendingIndicatorStyles();
    const activeIndicatorStyles = useActiveIndicatorStyles2();
    const iconStyles = useIconStyles4();
    const contentStyles = useContentStyles2();
    const {
      appearance,
      disabled,
      selected,
      size: size3,
      vertical
    } = state;
    state.root.className = mergeClasses(
      tabClassNames.root,
      rootStyles.base,
      vertical ? rootStyles.vertical : rootStyles.horizontal,
      size3 === "small" && (vertical ? rootStyles.smallVertical : rootStyles.smallHorizontal),
      size3 === "medium" && (vertical ? rootStyles.mediumVertical : rootStyles.mediumHorizontal),
      size3 === "large" && (vertical ? rootStyles.largeVertical : rootStyles.largeHorizontal),
      focusStyles.base,
      !disabled && appearance === "subtle" && rootStyles.subtle,
      !disabled && appearance === "transparent" && rootStyles.transparent,
      !disabled && selected && rootStyles.selected,
      disabled && rootStyles.disabled,
      // pending indicator (before pseudo element)
      pendingIndicatorStyles.base,
      size3 === "small" && (vertical ? pendingIndicatorStyles.smallVertical : pendingIndicatorStyles.smallHorizontal),
      size3 === "medium" && (vertical ? pendingIndicatorStyles.mediumVertical : pendingIndicatorStyles.mediumHorizontal),
      size3 === "large" && (vertical ? pendingIndicatorStyles.largeVertical : pendingIndicatorStyles.largeHorizontal),
      disabled && pendingIndicatorStyles.disabled,
      // active indicator (after pseudo element)
      selected && activeIndicatorStyles.base,
      selected && !disabled && activeIndicatorStyles.selected,
      selected && size3 === "small" && (vertical ? activeIndicatorStyles.smallVertical : activeIndicatorStyles.smallHorizontal),
      selected && size3 === "medium" && (vertical ? activeIndicatorStyles.mediumVertical : activeIndicatorStyles.mediumHorizontal),
      selected && size3 === "large" && (vertical ? activeIndicatorStyles.largeVertical : activeIndicatorStyles.largeHorizontal),
      selected && disabled && activeIndicatorStyles.disabled,
      state.root.className
    );
    if (state.icon) {
      state.icon.className = mergeClasses(tabClassNames.icon, iconStyles.base, iconStyles[size3], selected && iconStyles.selected, state.icon.className);
    }
    if (state.contentReservedSpace) {
      state.contentReservedSpace.className = mergeClasses(reservedSpaceClassNames.content, contentStyles.base, size3 === "large" ? contentStyles.largeSelected : contentStyles.selected, state.icon ? contentStyles.iconBefore : contentStyles.noIconBefore, contentStyles.placeholder, state.content.className);
      state.contentReservedSpaceClassName = state.contentReservedSpace.className;
    }
    state.content.className = mergeClasses(tabClassNames.content, contentStyles.base, size3 === "large" && contentStyles.large, selected && (size3 === "large" ? contentStyles.largeSelected : contentStyles.selected), state.icon ? contentStyles.iconBefore : contentStyles.noIconBefore, state.content.className);
    useTabAnimatedIndicatorStyles_unstable(state);
    return state;
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/Tab.js
  var Tab2 = /* @__PURE__ */ React123.forwardRef((props, ref) => {
    const state = useTab_unstable(props, ref);
    useTabStyles_unstable(state);
    useCustomStyleHook("useTabStyles_unstable")(state);
    return renderTab_unstable(state);
  });
  Tab2.displayName = "Tab";

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/TabList.js
  var React125 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/useTabList.js
  var React124 = __toESM(require_react());
  var useTabList_unstable = (props, ref) => {
    const { appearance = "transparent", reserveSelectedTabSpace = true, disabled = false, onTabSelect, size: size3 = "medium", vertical = false } = props;
    const innerRef = React124.useRef(null);
    const focusAttributes = useArrowNavigationGroup({
      circular: true,
      axis: vertical ? "vertical" : "horizontal",
      memorizeCurrent: true
    });
    const [selectedValue, setSelectedValue] = useControllableState({
      state: props.selectedValue,
      defaultState: props.defaultSelectedValue,
      initialState: void 0
    });
    const currentSelectedValue = React124.useRef(void 0);
    const previousSelectedValue = React124.useRef(void 0);
    React124.useEffect(() => {
      previousSelectedValue.current = currentSelectedValue.current;
      currentSelectedValue.current = selectedValue;
    }, [
      selectedValue
    ]);
    const onSelect = useEventCallback((event, data) => {
      var _onTabSelect;
      setSelectedValue(data.value);
      (_onTabSelect = onTabSelect) === null || _onTabSelect === void 0 ? void 0 : _onTabSelect(event, data);
    });
    const registeredTabs = React124.useRef({});
    const onRegister = useEventCallback((data) => {
      registeredTabs.current[JSON.stringify(data.value)] = data;
    });
    const onUnregister = useEventCallback((data) => {
      delete registeredTabs.current[JSON.stringify(data.value)];
    });
    const getRegisteredTabs = React124.useCallback(() => {
      return {
        selectedValue: currentSelectedValue.current,
        previousSelectedValue: previousSelectedValue.current,
        registeredTabs: registeredTabs.current
      };
    }, []);
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref: useMergedRefs(ref, innerRef),
        role: "tablist",
        "aria-orientation": vertical ? "vertical" : "horizontal",
        ...focusAttributes,
        ...props
      }), {
        elementType: "div"
      }),
      appearance,
      reserveSelectedTabSpace,
      disabled,
      selectedValue,
      size: size3,
      vertical,
      onRegister,
      onUnregister,
      onSelect,
      getRegisteredTabs
    };
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/renderTabList.js
  var renderTabList_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {
      children: /* @__PURE__ */ jsx(TabListProvider, {
        value: contextValues.tabList,
        children: state.root.children
      })
    });
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/useTabListStyles.styles.js
  var tabListClassNames = {
    root: "fui-TabList"
  };
  var useStyles14 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Beiy3e4: "f1063pyq",
      Bnnss6s: "fi64zpg",
      Eh141a: "flvyvdh",
      qhf8xq: "f10pi13n"
    },
    horizontal: {
      Bt984gj: "f1q9h2pe",
      Beiy3e4: "f1063pyq"
    },
    vertical: {
      Bt984gj: "f1q9h2pe",
      Beiy3e4: "f1vx9l62"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f1063pyq{flex-direction:row;}", ".fi64zpg{flex-shrink:0;}", ".flvyvdh{flex-wrap:nowrap;}", ".f10pi13n{position:relative;}", ".f1q9h2pe{align-items:stretch;}", ".f1vx9l62{flex-direction:column;}"]
  });
  var useTabListStyles_unstable = (state) => {
    const {
      vertical
    } = state;
    const styles4 = useStyles14();
    state.root.className = mergeClasses(tabListClassNames.root, styles4.root, vertical ? styles4.vertical : styles4.horizontal, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/useTabListContextValues.js
  function useTabListContextValues_unstable(state) {
    const { appearance, reserveSelectedTabSpace, disabled, selectedValue: selectedKey, onRegister, onUnregister, onSelect, getRegisteredTabs, size: size3, vertical } = state;
    const tabList = {
      appearance,
      reserveSelectedTabSpace,
      disabled,
      selectedValue: selectedKey,
      onSelect,
      onRegister,
      onUnregister,
      getRegisteredTabs,
      size: size3,
      vertical
    };
    return {
      tabList
    };
  }

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/TabList.js
  var TabList = /* @__PURE__ */ React125.forwardRef((props, ref) => {
    const state = useTabList_unstable(props, ref);
    const contextValues = useTabListContextValues_unstable(state);
    useTabListStyles_unstable(state);
    useCustomStyleHook("useTabListStyles_unstable")(state);
    return renderTabList_unstable(state, contextValues);
  });
  TabList.displayName = "TabList";

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/Dialog.js
  var React129 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/useDialog.js
  var React128 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/utils/useDisableBodyScroll.js
  var import_react35 = __toESM(require_react());
  var disableScrollElementProp = "__fluentDisableScrollElement";
  function useDisableBodyScroll() {
    const { targetDocument } = useFluent();
    return (0, import_react35.useCallback)(() => {
      if (targetDocument) {
        return disableScroll(targetDocument.body);
      }
    }, [
      targetDocument
    ]);
  }
  function disableScroll(target) {
    var _target_ownerDocument_defaultView;
    const { clientWidth } = target.ownerDocument.documentElement;
    var _target_ownerDocument_defaultView_innerWidth;
    const innerWidth2 = (_target_ownerDocument_defaultView_innerWidth = (_target_ownerDocument_defaultView = target.ownerDocument.defaultView) === null || _target_ownerDocument_defaultView === void 0 ? void 0 : _target_ownerDocument_defaultView.innerWidth) !== null && _target_ownerDocument_defaultView_innerWidth !== void 0 ? _target_ownerDocument_defaultView_innerWidth : 0;
    assertIsDisableScrollElement(target);
    if (target[disableScrollElementProp].count === 0) {
      target.style.overflow = "hidden";
      target.style.paddingRight = `${innerWidth2 - clientWidth}px`;
    }
    target[disableScrollElementProp].count++;
    return () => {
      target[disableScrollElementProp].count--;
      if (target[disableScrollElementProp].count === 0) {
        target.style.overflow = target[disableScrollElementProp].previousOverflowStyle;
        target.style.paddingRight = target[disableScrollElementProp].previousPaddingRightStyle;
      }
    };
  }
  function assertIsDisableScrollElement(element2) {
    var _element, _disableScrollElementProp;
    var _3;
    (_3 = (_element = element2)[_disableScrollElementProp = disableScrollElementProp]) !== null && _3 !== void 0 ? _3 : _element[_disableScrollElementProp] = {
      count: 0,
      previousOverflowStyle: element2.style.overflow,
      previousPaddingRightStyle: element2.style.paddingRight
    };
  }

  // ../node_modules/@fluentui/react-dialog/lib/utils/useFocusFirstElement.js
  var React126 = __toESM(require_react());
  function useFocusFirstElement(open, modalType) {
    const { findFirstFocusable } = useFocusFinders();
    const { targetDocument } = useFluent();
    const dialogRef = React126.useRef(null);
    React126.useEffect(() => {
      if (!open) {
        return;
      }
      const element2 = dialogRef.current && findFirstFocusable(dialogRef.current);
      if (element2) {
        element2.focus();
      } else {
        var _dialogRef_current;
        (_dialogRef_current = dialogRef.current) === null || _dialogRef_current === void 0 ? void 0 : _dialogRef_current.focus();
        if (true) {
          console.warn(`@fluentui/react-dialog [useFocusFirstElement]:
A Dialog should have at least one focusable element inside DialogSurface.
Please add at least a close button either on \`DialogTitle\` action slot or inside \`DialogActions\``);
        }
      }
    }, [
      findFirstFocusable,
      open,
      modalType,
      targetDocument
    ]);
    return dialogRef;
  }

  // ../node_modules/@fluentui/react-dialog/lib/contexts/dialogContext.js
  var React127 = __toESM(require_react());
  var defaultContextValue = {
    open: false,
    inertTrapFocus: false,
    modalType: "modal",
    isNestedDialog: false,
    dialogRef: {
      current: null
    },
    requestOpenChange() {
    }
  };
  var DialogContext = createContext14(void 0);
  var DialogProvider = DialogContext.Provider;
  var useDialogContext_unstable = (selector) => useContextSelector(DialogContext, (ctx = defaultContextValue) => selector(ctx));

  // ../node_modules/@fluentui/react-dialog/lib/contexts/dialogSurfaceContext.js
  var import_react36 = __toESM(require_react());
  var defaultContextValue2 = false;
  var DialogSurfaceContext = (0, import_react36.createContext)(void 0);
  var DialogSurfaceProvider = DialogSurfaceContext.Provider;
  var _useContext;
  var useDialogSurfaceContext_unstable = () => (_useContext = (0, import_react36.useContext)(DialogSurfaceContext)) !== null && _useContext !== void 0 ? _useContext : defaultContextValue2;

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/useDialog.js
  var useDialog_unstable = (props) => {
    const { children, modalType = "modal", onOpenChange, inertTrapFocus = false } = props;
    const [trigger2, content3] = childrenToTriggerAndContent(children);
    const [open, setOpen] = useControllableState({
      state: props.open,
      defaultState: props.defaultOpen,
      initialState: false
    });
    const requestOpenChange = useEventCallback((data) => {
      var _onOpenChange;
      (_onOpenChange = onOpenChange) === null || _onOpenChange === void 0 ? void 0 : _onOpenChange(data.event, data);
      if (!data.event.isDefaultPrevented()) {
        setOpen(data.open);
      }
    });
    const focusRef = useFocusFirstElement(open, modalType);
    const disableBodyScroll2 = useDisableBodyScroll();
    const isBodyScrollLocked = Boolean(open && modalType !== "non-modal");
    useIsomorphicLayoutEffect(() => {
      if (isBodyScrollLocked) {
        return disableBodyScroll2();
      }
    }, [
      disableBodyScroll2,
      isBodyScrollLocked
    ]);
    const { modalAttributes, triggerAttributes } = useModalAttributes({
      trapFocus: modalType !== "non-modal",
      legacyTrapFocus: !inertTrapFocus
    });
    return {
      components: {
        backdrop: "div"
      },
      inertTrapFocus,
      open,
      modalType,
      content: open ? content3 : null,
      trigger: trigger2,
      requestOpenChange,
      dialogTitleId: useId2("dialog-title-"),
      isNestedDialog: useHasParentContext(DialogContext),
      dialogRef: focusRef,
      modalAttributes: modalType !== "non-modal" ? modalAttributes : void 0,
      triggerAttributes
    };
  };
  function childrenToTriggerAndContent(children) {
    const childrenArray = React128.Children.toArray(children);
    if (true) {
      if (childrenArray.length !== 1 && childrenArray.length !== 2) {
        console.warn(`@fluentui/react-dialog [useDialog]:
Dialog must contain at least one child <DialogSurface/>,
and at most two children <DialogTrigger/> <DialogSurface/> (in this order).`);
      }
    }
    switch (childrenArray.length) {
      case 2:
        return childrenArray;
      case 1:
        return [
          void 0,
          childrenArray[0]
        ];
      default:
        return [
          void 0,
          void 0
        ];
    }
  }

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/renderDialog.js
  var renderDialog_unstable = (state, contextValues) => {
    const { content: content3, trigger: trigger2 } = state;
    return /* @__PURE__ */ jsx(DialogProvider, {
      value: contextValues.dialog,
      children: /* @__PURE__ */ jsxs(DialogSurfaceProvider, {
        value: contextValues.dialogSurface,
        children: [
          trigger2,
          content3
        ]
      })
    });
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/useDialogContextValues.js
  function useDialogContextValues_unstable(state) {
    const { modalType, open, dialogRef, dialogTitleId, isNestedDialog, inertTrapFocus, requestOpenChange, modalAttributes, triggerAttributes } = state;
    const dialog = {
      open,
      modalType,
      dialogRef,
      dialogTitleId,
      isNestedDialog,
      inertTrapFocus,
      modalAttributes,
      triggerAttributes,
      requestOpenChange
    };
    const dialogSurface = false;
    return {
      dialog,
      dialogSurface
    };
  }

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/Dialog.js
  var Dialog = /* @__PURE__ */ React129.memo((props) => {
    const state = useDialog_unstable(props);
    const contextValues = useDialogContextValues_unstable(state);
    return renderDialog_unstable(state, contextValues);
  });
  Dialog.displayName = "Dialog";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTrigger/DialogTrigger.js
  var React131 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTrigger/useDialogTrigger.js
  var React130 = __toESM(require_react());
  var useDialogTrigger_unstable = (props) => {
    var _child, _child1, _child2, _child3;
    const isInsideSurfaceDialog = useDialogSurfaceContext_unstable();
    const { children, disableButtonEnhancement = false, action = isInsideSurfaceDialog ? "close" : "open" } = props;
    const child = getTriggerChild(children);
    const requestOpenChange = useDialogContext_unstable((ctx) => ctx.requestOpenChange);
    const { triggerAttributes } = useModalAttributes();
    const handleClick = useEventCallback((event) => {
      var _child_props_onClick, _child4, _child_props;
      (_child4 = child) === null || _child4 === void 0 ? void 0 : (_child_props_onClick = (_child_props = _child4.props).onClick) === null || _child_props_onClick === void 0 ? void 0 : _child_props_onClick.call(_child_props, event);
      if (!event.isDefaultPrevented()) {
        requestOpenChange({
          event,
          type: "triggerClick",
          open: action === "open"
        });
      }
    });
    const triggerChildProps = {
      ...(_child = child) === null || _child === void 0 ? void 0 : _child.props,
      ref: (_child1 = child) === null || _child1 === void 0 ? void 0 : _child1.ref,
      onClick: handleClick,
      ...triggerAttributes
    };
    const ariaButtonTriggerChildProps = useARIAButtonProps(((_child2 = child) === null || _child2 === void 0 ? void 0 : _child2.type) === "button" || ((_child3 = child) === null || _child3 === void 0 ? void 0 : _child3.type) === "a" ? child.type : "div", {
      ...triggerChildProps,
      type: "button"
    });
    return {
      children: applyTriggerPropsToChildren(children, disableButtonEnhancement ? triggerChildProps : ariaButtonTriggerChildProps)
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTrigger/renderDialogTrigger.js
  var renderDialogTrigger_unstable = (state) => state.children;

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTrigger/DialogTrigger.js
  var DialogTrigger = (props) => {
    const state = useDialogTrigger_unstable(props);
    return renderDialogTrigger_unstable(state);
  };
  DialogTrigger.displayName = "DialogTrigger";
  DialogTrigger.isFluentTriggerComponent = true;

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/DialogActions.js
  var React133 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/useDialogActions.js
  var React132 = __toESM(require_react());
  var useDialogActions_unstable = (props, ref) => {
    const { position: position4 = "end", fluid = false } = props;
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref,
        ...props
      }), {
        elementType: "div"
      }),
      position: position4,
      fluid
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/renderDialogActions.js
  var renderDialogActions_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {});
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/useDialogActionsStyles.styles.js
  var dialogActionsClassNames = {
    root: "fui-DialogActions"
  };
  var useStyles15 = /* @__PURE__ */ __styles2({
    root: {
      Bqenvij: "f3052tw",
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Ijaq50: "f1cztu7b",
      nk6f5a: "fcu02xx",
      i8kkvl: "f4px1ci",
      Belr9w4: "fn67r4l",
      Bmdcpmo: "f6glcwc",
      th9wkt: "f1e3st1r"
    },
    gridPositionEnd: {
      Bdqf98w: "f1a7i8kp",
      Br312pm: "fd46tj4",
      Bw0ie65: "fsyjsko",
      B6n781s: "f1f41i0t",
      Bv5d0be: "f1jaqex3",
      v4ugfu: "f2ao6jk"
    },
    gridPositionStart: {
      Bdqf98w: "fsxvdwy",
      Br312pm: "fwpfdsa",
      Bw0ie65: "f1e2fz10",
      Bojbm9c: "f11ihkml",
      Bv5d0be: "fce5bvx",
      v4ugfu: "f2ao6jk"
    },
    fluidStart: {
      Bw0ie65: "fsyjsko"
    },
    fluidEnd: {
      Br312pm: "fwpfdsa"
    }
  }, {
    d: [".f3052tw{height:fit-content;}", ".f1ewtqcl{box-sizing:border-box;}", ".f22iagw{display:flex;}", ".f1cztu7b{grid-row-start:3;}", ".fcu02xx{grid-row-end:3;}", ".f4px1ci{column-gap:8px;}", ".fn67r4l{row-gap:8px;}", ".f1a7i8kp{justify-self:end;}", ".fd46tj4{grid-column-start:2;}", ".fsyjsko{grid-column-end:4;}", ".fsxvdwy{justify-self:start;}", ".fwpfdsa{grid-column-start:1;}", ".f1e2fz10{grid-column-end:2;}"],
    m: [["@media screen and (max-width: 480px){.f6glcwc{flex-direction:column;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f1e3st1r{justify-self:stretch;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f1f41i0t{grid-column-start:1;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f1jaqex3{grid-row-start:4;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f2ao6jk{grid-row-end:auto;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f11ihkml{grid-column-end:4;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.fce5bvx{grid-row-start:3;}}", {
      m: "screen and (max-width: 480px)"
    }]]
  });
  var useDialogActionsStyles_unstable = (state) => {
    const styles4 = useStyles15();
    state.root.className = mergeClasses(dialogActionsClassNames.root, styles4.root, state.position === "start" && styles4.gridPositionStart, state.position === "end" && styles4.gridPositionEnd, state.fluid && state.position === "start" && styles4.fluidStart, state.fluid && state.position === "end" && styles4.fluidEnd, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/DialogActions.js
  var DialogActions = /* @__PURE__ */ React133.forwardRef((props, ref) => {
    const state = useDialogActions_unstable(props, ref);
    useDialogActionsStyles_unstable(state);
    useCustomStyleHook("useDialogActionsStyles_unstable")(state);
    return renderDialogActions_unstable(state);
  });
  DialogActions.displayName = "DialogActions";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/DialogBody.js
  var React135 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/useDialogBody.js
  var React134 = __toESM(require_react());
  var useDialogBody_unstable = (props, ref) => {
    var _props_as;
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : "div", {
        ref,
        ...props
      }), {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/renderDialogBody.js
  var renderDialogBody_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {});
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/useDialogBodyStyles.styles.js
  var dialogBodyClassNames = {
    root: "fui-DialogBody"
  };
  var useStyles16 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f13qh94s",
      fshzfu: "f120kxnn",
      Bxyxcbc: "flnwrvu",
      B7ck84d: "f1ewtqcl",
      B68tc82: "f1ln0qer",
      Bmxbyg5: "fa2wlxz",
      i8kkvl: "f4px1ci",
      Belr9w4: "fn67r4l",
      wkccdc: "f1x46k84",
      Budl1dq: "fjj47a5",
      B5xtmjs: "ff54dml",
      Bqu9lor: "f1t97isy"
    }
  }, {
    d: [".f13qh94s{display:grid;}", ".f120kxnn::backdrop{background-color:rgba(0, 0, 0, 0.4);}", ".flnwrvu{max-height:calc(100vh - 2 * 24px);}", ".f1ewtqcl{box-sizing:border-box;}", ".f1ln0qer{overflow-x:unset;}", ".fa2wlxz{overflow-y:unset;}", ".f4px1ci{column-gap:8px;}", ".fn67r4l{row-gap:8px;}", ".f1x46k84{grid-template-rows:auto 1fr;}", ".fjj47a5{grid-template-columns:1fr 1fr auto;}"],
    m: [["@media screen and (max-width: 480px){.ff54dml{max-width:100vw;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f1t97isy{grid-template-rows:auto 1fr auto;}}", {
      m: "screen and (max-width: 480px)"
    }]]
  });
  var useDialogBodyStyles_unstable = (state) => {
    const styles4 = useStyles16();
    state.root.className = mergeClasses(dialogBodyClassNames.root, styles4.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/DialogBody.js
  var DialogBody = /* @__PURE__ */ React135.forwardRef((props, ref) => {
    const state = useDialogBody_unstable(props, ref);
    useDialogBodyStyles_unstable(state);
    useCustomStyleHook("useDialogBodyStyles_unstable")(state);
    return renderDialogBody_unstable(state);
  });
  DialogBody.displayName = "DialogBody";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/DialogTitle.js
  var React137 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/useDialogTitle.js
  var React136 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/useDialogTitleStyles.styles.js
  var dialogTitleClassNames = {
    root: "fui-DialogTitle",
    action: "fui-DialogTitle__action"
  };
  var useStyles17 = /* @__PURE__ */ __styles2({
    root: {
      Ijaq50: "f16hsg94",
      nk6f5a: "f1amvztq",
      Br312pm: "fwpfdsa",
      Bw0ie65: "fz1yyy6",
      Bahqtrf: "fk6fouc",
      Be2twd7: "f1pp30po",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "f106mvju",
      B6of3ja: "f1hu3pq6",
      t21cq0: ["f11qmguv", "f1tyq0we"],
      jrapky: "f19f4twv",
      Frg6f3: ["f1tyq0we", "f11qmguv"]
    },
    rootWithoutAction: {
      Bw0ie65: "fsyjsko"
    },
    action: {
      Ijaq50: "f16hsg94",
      nk6f5a: "f1amvztq",
      Br312pm: "fis13di",
      Bdqf98w: "f1a7i8kp",
      qb2dma: "f9h729m"
    }
  }, {
    d: [".f16hsg94{grid-row-start:1;}", ".f1amvztq{grid-row-end:1;}", ".fwpfdsa{grid-column-start:1;}", ".fz1yyy6{grid-column-end:3;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".f106mvju{line-height:var(--lineHeightBase500);}", ".f1hu3pq6{margin-top:0;}", ".f11qmguv{margin-right:0;}", ".f1tyq0we{margin-left:0;}", ".f19f4twv{margin-bottom:0;}", ".fsyjsko{grid-column-end:4;}", ".fis13di{grid-column-start:3;}", ".f1a7i8kp{justify-self:end;}", ".f9h729m{align-self:start;}"]
  });
  var useDialogTitleInternalStyles = /* @__PURE__ */ __styles2({
    button: {
      qhf8xq: "f10pi13n",
      B7ck84d: "f1e4lqlz",
      De3pzq: "f1u2r49w",
      sj55zd: "f1ym3bx4",
      Bahqtrf: "f1mo0ibp",
      Be2twd7: "fjoy568",
      Bceei9c: "f1k6fduh",
      Bg96gwp: "fez10in",
      B68tc82: "f1mtd64y",
      Bmxbyg5: "f1y7q3j9",
      z8tnut: "f1g0x7ka",
      z189sj: ["fhxju0i", "f1cnd47f"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1cnd47f", "fhxju0i"],
      icvyot: "f1ern45e",
      vrafjx: ["f1n71otn", "f1deefiw"],
      oivjwe: "f1h8hb77",
      wvpqe5: ["f1deefiw", "f1n71otn"],
      Bv0vk6g: "f37px4s",
      fsow6f: "fgusgyc",
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "frrh606",
      clg4pj: ["f1v5zibi", "fo2hd23"],
      hgwjuy: "ful5kiu",
      Bonggc9: ["fo2hd23", "f1v5zibi"],
      B1tsrr9: ["f1jqcqds", "ftffrms"],
      Dah5zi: ["ftffrms", "f1jqcqds"],
      Bkh64rk: ["f2e7qr6", "fsr1zz6"],
      qqdqy8: ["fsr1zz6", "f2e7qr6"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "f57olzd",
      Bule8hv: ["f4stah7", "fs1por5"],
      Bjwuhne: "f480a47",
      Ghsupd: ["fs1por5", "f4stah7"]
    }
  }, {
    d: [".f10pi13n{position:relative;}", ".f1e4lqlz{box-sizing:content-box;}", ".f1u2r49w{background-color:inherit;}", ".f1ym3bx4{color:inherit;}", ".f1mo0ibp{font-family:inherit;}", ".fjoy568{font-size:inherit;}", ".f1k6fduh{cursor:pointer;}", ".fez10in{line-height:0;}", ".f1mtd64y{overflow-x:visible;}", ".f1y7q3j9{overflow-y:visible;}", ".f1g0x7ka{padding-top:0;}", ".fhxju0i{padding-right:0;}", ".f1cnd47f{padding-left:0;}", ".f1qch9an{padding-bottom:0;}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1h8hb77{border-bottom-style:none;}", ".f37px4s{-webkit-appearance:button;}", ".fgusgyc{text-align:unset;}", ".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".frrh606[data-fui-focus-visible]::after{border-top-width:2px;}", ".f1v5zibi[data-fui-focus-visible]::after{border-right-width:2px;}", ".fo2hd23[data-fui-focus-visible]::after{border-left-width:2px;}", ".ful5kiu[data-fui-focus-visible]::after{border-bottom-width:2px;}", ".f1jqcqds[data-fui-focus-visible]::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".ftffrms[data-fui-focus-visible]::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f2e7qr6[data-fui-focus-visible]::after{border-top-right-radius:var(--borderRadiusMedium);}", ".fsr1zz6[data-fui-focus-visible]::after{border-top-left-radius:var(--borderRadiusMedium);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f57olzd[data-fui-focus-visible]::after{top:calc(2px * -1);}", ".f4stah7[data-fui-focus-visible]::after{right:calc(2px * -1);}", ".fs1por5[data-fui-focus-visible]::after{left:calc(2px * -1);}", ".f480a47[data-fui-focus-visible]::after{bottom:calc(2px * -1);}"],
    f: [".ftqa4ok:focus{outline-style:none;}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"]
  });
  var useDialogTitleStyles_unstable = (state) => {
    const styles4 = useStyles17();
    state.root.className = mergeClasses(dialogTitleClassNames.root, styles4.root, !state.action && styles4.rootWithoutAction, state.root.className);
    if (state.action) {
      state.action.className = mergeClasses(dialogTitleClassNames.action, styles4.action, state.action.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/useDialogTitle.js
  var useDialogTitle_unstable = (props, ref) => {
    const { as, action } = props;
    const modalType = useDialogContext_unstable((ctx) => ctx.modalType);
    const internalStyles = useDialogTitleInternalStyles();
    return {
      components: {
        root: "h2",
        action: "div"
      },
      root: slot_exports.always(getNativeElementProps(as !== null && as !== void 0 ? as : "h2", {
        ref,
        id: useDialogContext_unstable((ctx) => ctx.dialogTitleId),
        ...props
      }), {
        elementType: "h2"
      }),
      action: slot_exports.optional(action, {
        renderByDefault: modalType === "non-modal",
        defaultProps: {
          children: /* @__PURE__ */ React136.createElement(DialogTrigger, {
            disableButtonEnhancement: true,
            action: "close"
          }, /* @__PURE__ */ React136.createElement("button", {
            type: "button",
            className: internalStyles.button,
            // TODO: find a better way to add internal labels
            "aria-label": "close"
          }, /* @__PURE__ */ React136.createElement(Dismiss20Regular, null)))
        },
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/renderDialogTitle.js
  var renderDialogTitle_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(import_react2.Fragment, {
      children: [
        /* @__PURE__ */ jsx(state.root, {
          children: state.root.children
        }),
        state.action && /* @__PURE__ */ jsx(state.action, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/DialogTitle.js
  var DialogTitle = /* @__PURE__ */ React137.forwardRef((props, ref) => {
    const state = useDialogTitle_unstable(props, ref);
    useDialogTitleStyles_unstable(state);
    useCustomStyleHook("useDialogTitleStyles_unstable")(state);
    return renderDialogTitle_unstable(state);
  });
  DialogTitle.displayName = "DialogTitle";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/DialogSurface.js
  var React139 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/useDialogSurface.js
  var React138 = __toESM(require_react());
  var useDialogSurface_unstable = (props, ref) => {
    const modalType = useDialogContext_unstable((ctx) => ctx.modalType);
    const modalAttributes = useDialogContext_unstable((ctx) => ctx.modalAttributes);
    const dialogRef = useDialogContext_unstable((ctx) => ctx.dialogRef);
    const open = useDialogContext_unstable((ctx) => ctx.open);
    const requestOpenChange = useDialogContext_unstable((ctx) => ctx.requestOpenChange);
    const dialogTitleID = useDialogContext_unstable((ctx) => ctx.dialogTitleId);
    const handledBackdropClick = useEventCallback((event) => {
      if (isResolvedShorthand(props.backdrop)) {
        var _props_backdrop_onClick, _props_backdrop;
        (_props_backdrop_onClick = (_props_backdrop = props.backdrop).onClick) === null || _props_backdrop_onClick === void 0 ? void 0 : _props_backdrop_onClick.call(_props_backdrop, event);
      }
      if (modalType === "modal" && !event.isDefaultPrevented()) {
        requestOpenChange({
          event,
          open: false,
          type: "backdropClick"
        });
      }
    });
    const handleKeyDown = useEventCallback((event) => {
      var _props_onKeyDown, _props;
      (_props_onKeyDown = (_props = props).onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(_props, event);
      if (event.key === Escape && !event.isDefaultPrevented()) {
        requestOpenChange({
          event,
          open: false,
          type: "escapeKeyDown"
        });
        event.stopPropagation();
      }
    });
    const backdrop = slot_exports.optional(props.backdrop, {
      renderByDefault: open && modalType !== "non-modal",
      defaultProps: {
        "aria-hidden": "true"
      },
      elementType: "div"
    });
    if (backdrop) {
      backdrop.onClick = handledBackdropClick;
    }
    var _props_as;
    return {
      components: {
        backdrop: "div",
        root: "div"
      },
      backdrop,
      mountNode: props.mountNode,
      root: slot_exports.always(getNativeElementProps((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : "div", {
        tabIndex: -1,
        "aria-modal": modalType !== "non-modal",
        role: modalType === "alert" ? "alertdialog" : "dialog",
        "aria-labelledby": props["aria-label"] ? void 0 : dialogTitleID,
        ...props,
        ...modalAttributes,
        onKeyDown: handleKeyDown,
        ref: useMergedRefs(ref, dialogRef)
      }), {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/renderDialogSurface.js
  var renderDialogSurface_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(Portal, {
      mountNode: state.mountNode,
      children: [
        state.backdrop && /* @__PURE__ */ jsx(state.backdrop, {}),
        /* @__PURE__ */ jsx(DialogSurfaceProvider, {
          value: contextValues.dialogSurface,
          children: /* @__PURE__ */ jsx(state.root, {})
        })
      ]
    });
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/useDialogSurfaceStyles.styles.js
  var dialogSurfaceClassNames = {
    root: "fui-DialogSurface",
    backdrop: "fui-DialogSurface__backdrop"
  };
  var useStyles18 = /* @__PURE__ */ __styles2({
    focusOutline: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "frrh606",
      clg4pj: ["f1v5zibi", "fo2hd23"],
      hgwjuy: "ful5kiu",
      Bonggc9: ["fo2hd23", "f1v5zibi"],
      B1tsrr9: ["f1jqcqds", "ftffrms"],
      Dah5zi: ["ftffrms", "f1jqcqds"],
      Bkh64rk: ["f2e7qr6", "fsr1zz6"],
      qqdqy8: ["fsr1zz6", "f2e7qr6"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "f57olzd",
      Bule8hv: ["f4stah7", "fs1por5"],
      Bjwuhne: "f480a47",
      Ghsupd: ["fs1por5", "f4stah7"]
    },
    root: {
      mc9l5x: "ftgm304",
      famaaq: "f1c515w",
      Bcdw1i0: "f1bitti",
      Bhzewxz: "f15twtuk",
      j35jbq: ["f1e31b4d", "f1vgc2s3"],
      B5kzvoi: "f1yab3r1",
      oyh7mz: ["f1vgc2s3", "f1e31b4d"],
      z8tnut: "fuq56rw",
      z189sj: ["f15kemlc", "fdgang7"],
      Byoj8tv: "fl2zwns",
      uwmqm3: ["fdgang7", "f15kemlc"],
      B6of3ja: "fgr6219",
      t21cq0: ["f1ujusj6", "fcgxt0o"],
      jrapky: "f10jk5vf",
      Frg6f3: ["fcgxt0o", "f1ujusj6"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      B68tc82: "f1ln0qer",
      Bmxbyg5: "fa2wlxz",
      fshzfu: "f120kxnn",
      qhf8xq: "f19dog8a",
      Bqenvij: "f3052tw",
      B2u0y6b: "fvgz9i8",
      Bxyxcbc: "f6a9g1z",
      B7ck84d: "f1ewtqcl",
      E5pizo: "f10nrhrw",
      De3pzq: "fxugw4r",
      sj55zd: "f19n0e5",
      B4j52fo: "f5ogflp",
      Bekrc4i: ["f1hqa2wf", "finvdd3"],
      Bn0qgzm: "f1f09k3d",
      ibv6hh: ["finvdd3", "f1hqa2wf"],
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"],
      Bbmb7ep: ["fnivh3a", "fc7yr5o"],
      Beyfa6y: ["fc7yr5o", "fnivh3a"],
      B7oj6ja: ["f1el4m67", "f8yange"],
      Btl43ni: ["f8yange", "f1el4m67"],
      B5xtmjs: "ff54dml"
    },
    backdrop: {
      qhf8xq: "f19dog8a",
      De3pzq: "fju19wo",
      Bhzewxz: "f113wtx2",
      j35jbq: ["f10k790i", "f1xynx9j"],
      B5kzvoi: "f5gq2j6",
      oyh7mz: ["f1xynx9j", "f10k790i"]
    },
    nestedDialogBackdrop: {
      De3pzq: "f3rmtva"
    },
    nestedNativeDialogBackdrop: {
      fshzfu: "foe20jx"
    }
  }, {
    f: [".ftqa4ok:focus{outline-style:none;}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"],
    d: [".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".frrh606[data-fui-focus-visible]::after{border-top-width:2px;}", ".f1v5zibi[data-fui-focus-visible]::after{border-right-width:2px;}", ".fo2hd23[data-fui-focus-visible]::after{border-left-width:2px;}", ".ful5kiu[data-fui-focus-visible]::after{border-bottom-width:2px;}", ".f1jqcqds[data-fui-focus-visible]::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".ftffrms[data-fui-focus-visible]::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f2e7qr6[data-fui-focus-visible]::after{border-top-right-radius:var(--borderRadiusMedium);}", ".fsr1zz6[data-fui-focus-visible]::after{border-top-left-radius:var(--borderRadiusMedium);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f57olzd[data-fui-focus-visible]::after{top:calc(2px * -1);}", ".f4stah7[data-fui-focus-visible]::after{right:calc(2px * -1);}", ".fs1por5[data-fui-focus-visible]::after{left:calc(2px * -1);}", ".f480a47[data-fui-focus-visible]::after{bottom:calc(2px * -1);}", ".ftgm304{display:block;}", ".f1c515w{-webkit-user-select:unset;-moz-user-select:unset;-ms-user-select:unset;user-select:unset;}", ".f1bitti{visibility:unset;}", ".f15twtuk{top:0;}", ".f1e31b4d{right:0;}", ".f1vgc2s3{left:0;}", ".f1yab3r1{bottom:0;}", ".fuq56rw{padding-top:24px;}", ".f15kemlc{padding-right:24px;}", ".fdgang7{padding-left:24px;}", ".fl2zwns{padding-bottom:24px;}", ".fgr6219{margin-top:auto;}", ".f1ujusj6{margin-right:auto;}", ".fcgxt0o{margin-left:auto;}", ".f10jk5vf{margin-bottom:auto;}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".f1ln0qer{overflow-x:unset;}", ".fa2wlxz{overflow-y:unset;}", ".f120kxnn::backdrop{background-color:rgba(0, 0, 0, 0.4);}", ".f19dog8a{position:fixed;}", ".f3052tw{height:fit-content;}", ".fvgz9i8{max-width:600px;}", ".f6a9g1z{max-height:100vh;}", ".f1ewtqcl{box-sizing:border-box;}", ".f10nrhrw{box-shadow:var(--shadow64);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f5ogflp{border-top-width:1px;}", ".f1hqa2wf{border-right-width:1px;}", ".finvdd3{border-left-width:1px;}", ".f1f09k3d{border-bottom-width:1px;}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".fnivh3a{border-bottom-right-radius:var(--borderRadiusXLarge);}", ".fc7yr5o{border-bottom-left-radius:var(--borderRadiusXLarge);}", ".f1el4m67{border-top-right-radius:var(--borderRadiusXLarge);}", ".f8yange{border-top-left-radius:var(--borderRadiusXLarge);}", ".fju19wo{background-color:rgba(0, 0, 0, 0.4);}", ".f113wtx2{top:0px;}", ".f10k790i{right:0px;}", ".f1xynx9j{left:0px;}", ".f5gq2j6{bottom:0px;}", ".f3rmtva{background-color:transparent;}", ".foe20jx::backdrop{background-color:transparent;}"],
    m: [["@media screen and (max-width: 480px){.ff54dml{max-width:100vw;}}", {
      m: "screen and (max-width: 480px)"
    }]]
  });
  var useDialogSurfaceStyles_unstable = (state) => {
    const styles4 = useStyles18();
    const isNestedDialog = useDialogContext_unstable((ctx) => ctx.isNestedDialog);
    state.root.className = mergeClasses(dialogSurfaceClassNames.root, styles4.root, styles4.focusOutline, isNestedDialog && styles4.nestedNativeDialogBackdrop, state.root.className);
    if (state.backdrop) {
      state.backdrop.className = mergeClasses(dialogSurfaceClassNames.backdrop, styles4.backdrop, isNestedDialog && styles4.nestedDialogBackdrop, state.backdrop.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/useDialogSurfaceContextValues.js
  function useDialogSurfaceContextValues_unstable(state) {
    const dialogSurface = true;
    return {
      dialogSurface
    };
  }

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/DialogSurface.js
  var DialogSurface = /* @__PURE__ */ React139.forwardRef((props, ref) => {
    const state = useDialogSurface_unstable(props, ref);
    const contextValues = useDialogSurfaceContextValues_unstable(state);
    useDialogSurfaceStyles_unstable(state);
    useCustomStyleHook("useDialogSurfaceStyles_unstable")(state);
    return renderDialogSurface_unstable(state, contextValues);
  });
  DialogSurface.displayName = "DialogSurface";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/DialogContent.js
  var React141 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/useDialogContent.js
  var React140 = __toESM(require_react());
  var useDialogContent_unstable = (props, ref) => {
    var _props_as;
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : "div", {
        ref,
        ...props
      }), {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/renderDialogContent.js
  var renderDialogContent_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {});
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/useDialogContentStyles.styles.js
  var dialogContentClassNames = {
    root: "fui-DialogContent"
  };
  var useStyles19 = /* @__PURE__ */ __styles2({
    root: {
      Bmxbyg5: "f5zp4f",
      sshi5w: "f1nxs5xn",
      B7ck84d: "f1ewtqcl",
      Ijaq50: "faunodf",
      nk6f5a: "f88nxoq",
      Br312pm: "fwpfdsa",
      Bw0ie65: "fsyjsko",
      z8tnut: "fr4fn7s",
      z189sj: ["f171n1a0", "f1jwbs5a"],
      Byoj8tv: "f1ean75l",
      uwmqm3: ["f1jwbs5a", "f171n1a0"],
      B6of3ja: "fxlnl9e",
      t21cq0: ["ffs23cn", "f1v5tmjd"],
      jrapky: "f2uu7rc",
      Frg6f3: ["f1v5tmjd", "ffs23cn"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    }
  }, {
    d: [".f5zp4f{overflow-y:auto;}", ".f1nxs5xn{min-height:32px;}", ".f1ewtqcl{box-sizing:border-box;}", ".faunodf{grid-row-start:2;}", ".f88nxoq{grid-row-end:2;}", ".fwpfdsa{grid-column-start:1;}", ".fsyjsko{grid-column-end:4;}", ".fr4fn7s{padding-top:var(--strokeWidthThick);}", ".f171n1a0{padding-right:var(--strokeWidthThick);}", ".f1jwbs5a{padding-left:var(--strokeWidthThick);}", ".f1ean75l{padding-bottom:var(--strokeWidthThick);}", ".fxlnl9e{margin-top:calc(var(--strokeWidthThick) * -1);}", ".ffs23cn{margin-right:calc(var(--strokeWidthThick) * -1);}", ".f1v5tmjd{margin-left:calc(var(--strokeWidthThick) * -1);}", ".f2uu7rc{margin-bottom:calc(var(--strokeWidthThick) * -1);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}"]
  });
  var useDialogContentStyles_unstable = (state) => {
    const styles4 = useStyles19();
    state.root.className = mergeClasses(dialogContentClassNames.root, styles4.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/DialogContent.js
  var DialogContent = /* @__PURE__ */ React141.forwardRef((props, ref) => {
    const state = useDialogContent_unstable(props, ref);
    useDialogContentStyles_unstable(state);
    useCustomStyleHook("useDialogContentStyles_unstable")(state);
    return renderDialogContent_unstable(state);
  });
  DialogContent.displayName = "DialogContent";

  // ../node_modules/@fluentui/react-toolbar/lib/components/Toolbar/Toolbar.js
  var React143 = __toESM(require_react());

  // ../node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbar.js
  var React142 = __toESM(require_react());
  var useToolbar_unstable = (props, ref) => {
    const { size: size3 = "medium", vertical = false } = props;
    const arrowNavigationProps = useArrowNavigationGroup({
      circular: true,
      axis: "both"
    });
    const initialState2 = {
      size: size3,
      vertical,
      // TODO add appropriate props/defaults
      components: {
        // TODO add each slot's element type or component
        root: "div"
      },
      // TODO add appropriate slots, for example:
      // mySlot: resolveShorthand(props.mySlot),
      root: slot_exports.always(getNativeElementProps("div", {
        role: "toolbar",
        ref,
        ...vertical && {
          "aria-orientation": "vertical"
        },
        ...arrowNavigationProps,
        ...props
      }), {
        elementType: "div"
      })
    };
    const [checkedValues, onCheckedValueChange] = useToolbarSelectableState({
      checkedValues: props.checkedValues,
      defaultCheckedValues: props.defaultCheckedValues,
      onCheckedValueChange: props.onCheckedValueChange
    });
    const handleToggleButton = useEventCallback((e3, name, value, checked) => {
      if (name && value) {
        var _checkedValues, _onCheckedValueChange;
        const checkedItems = ((_checkedValues = checkedValues) === null || _checkedValues === void 0 ? void 0 : _checkedValues[name]) || [];
        const newCheckedItems = [
          ...checkedItems
        ];
        if (checked) {
          newCheckedItems.splice(newCheckedItems.indexOf(value), 1);
        } else {
          newCheckedItems.push(value);
        }
        (_onCheckedValueChange = onCheckedValueChange) === null || _onCheckedValueChange === void 0 ? void 0 : _onCheckedValueChange(e3, {
          name,
          checkedItems: newCheckedItems
        });
      }
    });
    const handleRadio = useEventCallback((e3, name, value, checked) => {
      if (name && value) {
        var _onCheckedValueChange;
        (_onCheckedValueChange = onCheckedValueChange) === null || _onCheckedValueChange === void 0 ? void 0 : _onCheckedValueChange(e3, {
          name,
          checkedItems: [
            value
          ]
        });
      }
    });
    return {
      ...initialState2,
      handleToggleButton,
      handleRadio,
      checkedValues: checkedValues !== null && checkedValues !== void 0 ? checkedValues : {}
    };
  };
  var useToolbarSelectableState = (state) => {
    const [checkedValues, setCheckedValues] = useControllableState({
      state: state.checkedValues,
      defaultState: state.defaultCheckedValues,
      initialState: {}
    });
    const { onCheckedValueChange: onCheckedValueChangeOriginal } = state;
    const onCheckedValueChange = useEventCallback((e3, { name, checkedItems }) => {
      if (onCheckedValueChangeOriginal) {
        onCheckedValueChangeOriginal(e3, {
          name,
          checkedItems
        });
      }
      setCheckedValues((s3) => {
        return s3 ? {
          ...s3,
          [name]: checkedItems
        } : {
          [name]: checkedItems
        };
      });
    });
    return [
      checkedValues,
      onCheckedValueChange
    ];
  };

  // ../node_modules/@fluentui/react-toolbar/lib/components/Toolbar/ToolbarContext.js
  var ToolbarContext = createContext14(void 0);
  var toolbarContextDefaultValue = {
    size: "medium",
    handleToggleButton: () => null,
    handleRadio: () => null,
    vertical: false,
    checkedValues: {}
  };
  var useToolbarContext_unstable = (selector) => useContextSelector(ToolbarContext, (ctx = toolbarContextDefaultValue) => selector(ctx));

  // ../node_modules/@fluentui/react-toolbar/lib/components/Toolbar/renderToolbar.js
  var renderToolbar_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(ToolbarContext.Provider, {
      value: contextValues.toolbar,
      children: /* @__PURE__ */ jsx(state.root, {
        children: state.root.children
      })
    });
  };

  // ../node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbarStyles.styles.js
  var toolbarClassNames = {
    root: "fui-Toolbar"
  };
  var useStyles20 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59",
      z8tnut: "f10ra9hq",
      z189sj: ["f19lj068", "f177v4lu"],
      Byoj8tv: "f1y2xyjm",
      uwmqm3: ["f177v4lu", "f19lj068"]
    },
    vertical: {
      Beiy3e4: "f1vx9l62",
      a9b677: "f1acs6jw"
    },
    small: {
      z8tnut: "f1nbblvp",
      z189sj: ["f8wuabp", "fycuoez"],
      Byoj8tv: "f1ov4xf1",
      uwmqm3: ["fycuoez", "f8wuabp"]
    },
    medium: {
      z8tnut: "f10ra9hq",
      z189sj: ["f19lj068", "f177v4lu"],
      Byoj8tv: "f1y2xyjm",
      uwmqm3: ["f177v4lu", "f19lj068"]
    },
    large: {
      z8tnut: "f10ra9hq",
      z189sj: ["fat0sn4", "fekwl8i"],
      Byoj8tv: "f1y2xyjm",
      uwmqm3: ["fekwl8i", "fat0sn4"]
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f122n59{align-items:center;}", ".f10ra9hq{padding-top:4px;}", ".f19lj068{padding-right:8px;}", ".f177v4lu{padding-left:8px;}", ".f1y2xyjm{padding-bottom:4px;}", ".f1vx9l62{flex-direction:column;}", ".f1acs6jw{width:fit-content;}", ".f1nbblvp{padding-top:0px;}", ".f8wuabp{padding-right:4px;}", ".fycuoez{padding-left:4px;}", ".f1ov4xf1{padding-bottom:0px;}", ".fat0sn4{padding-right:20px;}", ".fekwl8i{padding-left:20px;}"]
  });
  var useToolbarStyles_unstable = (state) => {
    const styles4 = useStyles20();
    const {
      vertical,
      size: size3
    } = state;
    state.root.className = mergeClasses(toolbarClassNames.root, styles4.root, vertical && styles4.vertical, size3 === "small" && !vertical && styles4.small, size3 === "medium" && !vertical && styles4.medium, size3 === "large" && !vertical && styles4.large, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbarContextValues.js
  function useToolbarContextValues_unstable(state) {
    const { size: size3, handleToggleButton, vertical, checkedValues, handleRadio } = state;
    const toolbar = {
      size: size3,
      vertical,
      handleToggleButton,
      handleRadio,
      checkedValues
    };
    return {
      toolbar
    };
  }

  // ../node_modules/@fluentui/react-toolbar/lib/components/Toolbar/Toolbar.js
  var Toolbar = /* @__PURE__ */ React143.forwardRef((props, ref) => {
    const state = useToolbar_unstable(props, ref);
    const contextValues = useToolbarContextValues_unstable(state);
    useToolbarStyles_unstable(state);
    useCustomStyleHook("useToolbarStyles_unstable")(state);
    return renderToolbar_unstable(state, contextValues);
  });
  Toolbar.displayName = "Toolbar";

  // ../node_modules/@fluentui/react-toolbar/lib/components/ToolbarRadioButton/ToolbarRadioButton.js
  var React145 = __toESM(require_react());

  // ../node_modules/@fluentui/react-toolbar/lib/components/ToolbarRadioButton/useToolbarRadioButton.js
  var React144 = __toESM(require_react());
  var useToolbarRadioButton_unstable = (props, ref) => {
    const handleRadio = useToolbarContext_unstable((ctx) => ctx.handleRadio);
    const checked = useToolbarContext_unstable((ctx) => {
      var _ctx_checkedValues_props_name;
      return !!((_ctx_checkedValues_props_name = ctx.checkedValues[props.name]) === null || _ctx_checkedValues_props_name === void 0 ? void 0 : _ctx_checkedValues_props_name.includes(props.value));
    });
    const size3 = useToolbarContext_unstable((ctx) => ctx.size);
    const { onClick: onClickOriginal } = props;
    const toggleButtonState = useToggleButton_unstable({
      size: size3,
      checked,
      role: "radio",
      "aria-checked": checked,
      ...props
    }, ref);
    const state = {
      ...toggleButtonState,
      name: props.name,
      value: props.value
    };
    const handleOnClick = useEventCallback((e3) => {
      var _handleRadio, _onClickOriginal;
      (_handleRadio = handleRadio) === null || _handleRadio === void 0 ? void 0 : _handleRadio(e3, state.name, state.value, state.checked);
      (_onClickOriginal = onClickOriginal) === null || _onClickOriginal === void 0 ? void 0 : _onClickOriginal(e3);
    });
    state.root["aria-pressed"] = void 0;
    state.root.onClick = handleOnClick;
    return state;
  };

  // ../node_modules/@fluentui/react-toolbar/lib/components/ToolbarRadioButton/useToolbarRadioButtonStyles.styles.js
  var useBaseStyles2 = /* @__PURE__ */ __styles2({
    selected: {
      sj55zd: "f16muhyy"
    }
  }, {
    d: [".f16muhyy{color:var(--colorBrandForeground1);}"]
  });
  var useToolbarRadioButtonStyles_unstable = (state) => {
    useToggleButtonStyles_unstable(state);
    const toggleButtonStyles = useBaseStyles2();
    state.root.className = mergeClasses(state.root.className, state.checked && toggleButtonStyles.selected);
  };

  // ../node_modules/@fluentui/react-toolbar/lib/components/ToolbarRadioButton/ToolbarRadioButton.js
  var ToolbarRadioButton = /* @__PURE__ */ React145.forwardRef((props, ref) => {
    const state = useToolbarRadioButton_unstable(props, ref);
    useToolbarRadioButtonStyles_unstable(state);
    useCustomStyleHook("useToolbarRadioButtonStyles_unstable")(state);
    return renderButton_unstable(state);
  });
  ToolbarRadioButton.displayName = "ToolbarRadioButton";

  // ../node_modules/@fluentui/react-toolbar/lib/components/ToolbarGroup/useToolbarGroup.js
  var React146 = __toESM(require_react());
  var useToolbarGroup_unstable = (props, ref) => {
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref,
        role: "presentation",
        ...props
      }), {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-toolbar/lib/components/ToolbarGroup/useToolbarGroupStyles.styles.js
  var toolbarGroupClassNames = {
    root: "fui-ToolbarGroup"
  };
  var useToolbarGroupStyles_unstable = (state) => {
    state.root.className = mergeClasses(toolbarGroupClassNames.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-toolbar/lib/components/ToolbarGroup/renderToolbarGroup.js
  var renderToolbarGroup_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {
      children: state.root.children
    });
  };

  // ../node_modules/@fluentui/react-toolbar/lib/components/ToolbarRadioGroup/ToolbarRadioGroup.js
  var React147 = __toESM(require_react());
  var ToolbarRadioGroup = /* @__PURE__ */ React147.forwardRef((props, ref) => {
    const state = useToolbarGroup_unstable({
      role: "radiogroup",
      ...props
    }, ref);
    useToolbarGroupStyles_unstable(state);
    useCustomStyleHook("useToolbarGroupStyles_unstable")(state);
    return renderToolbarGroup_unstable(state);
  });
  ToolbarRadioGroup.displayName = "ToolbarRadioGroup";

  // ../node_modules/@fluentui/react-card/lib/components/Card/Card.js
  var React152 = __toESM(require_react());

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCard.js
  var React150 = __toESM(require_react());

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCardSelectable.js
  var React148 = __toESM(require_react());
  var useCardSelectable = (props, { referenceLabel, referenceId }, cardRef) => {
    const { checkbox = {}, selected, defaultSelected, onSelectionChange, floatingAction, onClick, onKeyDown } = props;
    const { findAllFocusable } = useFocusFinders();
    const checkboxRef = React148.useRef(null);
    const isSelectable = [
      selected,
      defaultSelected,
      onSelectionChange
    ].some((prop) => typeof prop !== "undefined");
    const [isCardSelected, setIsCardSelected] = React148.useState(false);
    const [isSelectFocused, setIsSelectFocused] = React148.useState(false);
    const shouldRestrictTriggerAction = React148.useCallback((event) => {
      var _checkboxRef;
      if (!cardRef.current) {
        return false;
      }
      const focusableElements = findAllFocusable(cardRef.current);
      const target = event.target;
      const isElementInFocusableGroup = focusableElements.some((element2) => element2.contains(target));
      const isCheckboxSlot = ((_checkboxRef = checkboxRef) === null || _checkboxRef === void 0 ? void 0 : _checkboxRef.current) === target;
      return isElementInFocusableGroup && !isCheckboxSlot;
    }, [
      cardRef,
      findAllFocusable
    ]);
    const onChangeHandler = React148.useCallback((event) => {
      if (shouldRestrictTriggerAction(event)) {
        return;
      }
      const newCheckedValue = !isCardSelected;
      setIsCardSelected(newCheckedValue);
      if (onSelectionChange) {
        onSelectionChange(event, {
          selected: newCheckedValue
        });
      }
    }, [
      onSelectionChange,
      isCardSelected,
      shouldRestrictTriggerAction
    ]);
    const onKeyDownHandler = React148.useCallback((event) => {
      if ([
        Enter
      ].includes(event.key)) {
        event.preventDefault();
        onChangeHandler(event);
      }
    }, [
      onChangeHandler
    ]);
    const checkboxSlot = React148.useMemo(() => {
      if (!isSelectable || floatingAction) {
        return;
      }
      const selectableCheckboxProps = {};
      if (referenceId) {
        selectableCheckboxProps["aria-labelledby"] = referenceId;
      } else if (referenceLabel) {
        selectableCheckboxProps["aria-label"] = referenceLabel;
      }
      return slot_exports.optional(checkbox, {
        defaultProps: {
          ref: checkboxRef,
          type: "checkbox",
          checked: isCardSelected,
          onChange: (event) => onChangeHandler(event),
          onFocus: () => setIsSelectFocused(true),
          onBlur: () => setIsSelectFocused(false),
          ...selectableCheckboxProps
        },
        elementType: "input"
      });
    }, [
      checkbox,
      floatingAction,
      isCardSelected,
      isSelectable,
      onChangeHandler,
      referenceId,
      referenceLabel
    ]);
    const floatingActionSlot = React148.useMemo(() => {
      if (!floatingAction) {
        return;
      }
      return slot_exports.optional(floatingAction, {
        defaultProps: {
          ref: checkboxRef
        },
        elementType: "div"
      });
    }, [
      floatingAction
    ]);
    const selectableCardProps = React148.useMemo(() => {
      if (!isSelectable) {
        return null;
      }
      return {
        onClick: mergeCallbacks(onClick, onChangeHandler),
        onKeyDown: mergeCallbacks(onKeyDown, onKeyDownHandler)
      };
    }, [
      isSelectable,
      onChangeHandler,
      onClick,
      onKeyDown,
      onKeyDownHandler
    ]);
    React148.useEffect(() => setIsCardSelected(Boolean(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : selected)), [
      defaultSelected,
      selected,
      setIsCardSelected
    ]);
    return {
      selected: isCardSelected,
      selectable: isSelectable,
      selectFocused: isSelectFocused,
      selectableCardProps,
      checkboxSlot,
      floatingActionSlot
    };
  };

  // ../node_modules/@fluentui/react-card/lib/components/Card/CardContext.js
  var React149 = __toESM(require_react());
  var cardContext = React149.createContext(void 0);
  var cardContextDefaultValue = {
    selectableA11yProps: {
      referenceId: void 0,
      setReferenceId() {
      },
      referenceLabel: void 0,
      setReferenceLabel() {
      }
    }
  };
  var CardProvider = cardContext.Provider;
  var _React_useContext4;
  var useCardContext_unstable = () => (_React_useContext4 = React149.useContext(cardContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : cardContextDefaultValue;

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCard.js
  var focusMap = {
    off: void 0,
    "no-tab": "limited-trap-focus",
    "tab-exit": "limited",
    "tab-only": "unlimited"
  };
  var useCardInteractive = ({ focusMode = "off", ...props }) => {
    const interactive = [
      "onClick",
      "onDoubleClick",
      "onMouseUp",
      "onMouseDown",
      "onPointerUp",
      "onPointerDown",
      "onTouchStart",
      "onTouchEnd",
      "onDragStart",
      "onDragEnd"
    ].some((prop) => props[prop]);
    const groupperAttrs = useFocusableGroup({
      tabBehavior: focusMap[interactive ? "no-tab" : focusMode]
    });
    const interactiveFocusAttributes = {
      ...groupperAttrs,
      tabIndex: 0
    };
    return {
      interactive,
      focusAttributes: focusMode === "off" ? null : interactiveFocusAttributes
    };
  };
  var useCard_unstable = (props, ref) => {
    const { appearance = "filled", orientation = "vertical", size: size3 = "medium" } = props;
    const [referenceId, setReferenceId] = React150.useState(cardContextDefaultValue.selectableA11yProps.referenceId);
    const [referenceLabel, setReferenceLabel] = React150.useState(cardContextDefaultValue.selectableA11yProps.referenceId);
    const cardBaseRef = useFocusWithin();
    const { selectable, selected, selectableCardProps, selectFocused, checkboxSlot, floatingActionSlot } = useCardSelectable(props, {
      referenceId,
      referenceLabel
    }, cardBaseRef);
    const cardRef = useMergedRefs(cardBaseRef, ref);
    const { interactive, focusAttributes } = useCardInteractive(props);
    return {
      appearance,
      orientation,
      size: size3,
      interactive,
      selectable,
      selectFocused,
      selected,
      selectableA11yProps: {
        setReferenceId,
        referenceId,
        referenceLabel,
        setReferenceLabel
      },
      components: {
        root: "div",
        floatingAction: "div",
        checkbox: "input"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref: cardRef,
        role: "group",
        ...focusAttributes,
        ...props,
        ...selectableCardProps
      }), {
        elementType: "div"
      }),
      floatingAction: floatingActionSlot,
      checkbox: checkboxSlot
    };
  };

  // ../node_modules/@fluentui/react-card/lib/components/Card/renderCard.js
  var renderCard_unstable = (state, cardContextValue) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {
      children: /* @__PURE__ */ jsxs(CardProvider, {
        value: cardContextValue,
        children: [
          state.checkbox ? /* @__PURE__ */ jsx(state.checkbox, {}) : null,
          state.floatingAction ? /* @__PURE__ */ jsx(state.floatingAction, {}) : null,
          state.root.children
        ]
      })
    });
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardPreview/useCardPreviewStyles.styles.js
  var cardPreviewClassNames = {
    root: "fui-CardPreview",
    logo: "fui-CardPreview__logo"
  };
  var useStyles21 = /* @__PURE__ */ __styles2({
    root: {
      qhf8xq: "f10pi13n",
      pnb5jt: "f1rzl30s",
      Elg2ur: "f1chxnfo",
      B184ckt: "f17xb19f"
    },
    logo: {
      qhf8xq: "f1euv43f",
      B5kzvoi: "f1gcvs1y",
      oyh7mz: ["f1t6tvco", "ffrfxm3"],
      a9b677: "f1szoe96",
      Bqenvij: "f1d2rq10"
    }
  }, {
    d: [".f10pi13n{position:relative;}", ".f1rzl30s>:not(.fui-CardPreview__logo){display:block;}", ".f1chxnfo>:not(.fui-CardPreview__logo){height:100%;}", ".f17xb19f>:not(.fui-CardPreview__logo){width:100%;}", ".f1euv43f{position:absolute;}", ".f1gcvs1y{bottom:12px;}", ".f1t6tvco{left:12px;}", ".ffrfxm3{right:12px;}", ".f1szoe96{width:32px;}", ".f1d2rq10{height:32px;}"]
  });
  var useCardPreviewStyles_unstable = (state) => {
    const styles4 = useStyles21();
    state.root.className = mergeClasses(cardPreviewClassNames.root, styles4.root, state.root.className);
    if (state.logo) {
      state.logo.className = mergeClasses(cardPreviewClassNames.logo, styles4.logo, state.logo.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/useCardHeaderStyles.styles.js
  var cardHeaderClassNames = {
    root: "fui-CardHeader",
    image: "fui-CardHeader__image",
    header: "fui-CardHeader__header",
    description: "fui-CardHeader__description",
    action: "fui-CardHeader__action"
  };
  var useStyles22 = /* @__PURE__ */ __styles2({
    root: {
      Bkc6ea2: "fkufhic",
      mc9l5x: "f13qh94s",
      t4k1zu: "f8a668j",
      Bt984gj: "f122n59"
    },
    image: {
      mc9l5x: "ftuwxu6",
      t21cq0: ["fql5097", "f6yss9k"],
      Br312pm: "fwpfdsa",
      Ijaq50: "fldnz9j"
    },
    header: {
      Br312pm: "fd46tj4",
      Ijaq50: "f16hsg94",
      mc9l5x: "f22iagw"
    },
    description: {
      Br312pm: "fd46tj4",
      Ijaq50: "faunodf",
      mc9l5x: "f22iagw"
    },
    action: {
      Frg6f3: ["f6yss9k", "fql5097"],
      Br312pm: "fis13di",
      Ijaq50: "fldnz9j"
    }
  }, {
    d: [".fkufhic{--fui-CardHeader--gap:12px;}", ".f13qh94s{display:grid;}", ".f8a668j{grid-auto-columns:min-content 1fr min-content;}", ".f122n59{align-items:center;}", ".ftuwxu6{display:inline-flex;}", ".fql5097{margin-right:var(--fui-CardHeader--gap);}", ".f6yss9k{margin-left:var(--fui-CardHeader--gap);}", ".fwpfdsa{grid-column-start:1;}", ".fldnz9j{grid-row-start:span 2;}", ".fd46tj4{grid-column-start:2;}", ".f16hsg94{grid-row-start:1;}", ".f22iagw{display:flex;}", ".faunodf{grid-row-start:2;}", ".fis13di{grid-column-start:3;}"]
  });
  var useCardHeaderStyles_unstable = (state) => {
    const styles4 = useStyles22();
    state.root.className = mergeClasses(cardHeaderClassNames.root, styles4.root, state.root.className);
    if (state.image) {
      state.image.className = mergeClasses(cardHeaderClassNames.image, styles4.image, state.image.className);
    }
    if (state.header) {
      state.header.className = mergeClasses(cardHeaderClassNames.header, styles4.header, state.header.className);
    }
    if (state.description) {
      state.description.className = mergeClasses(cardHeaderClassNames.description, styles4.description, state.description.className);
    }
    if (state.action) {
      state.action.className = mergeClasses(cardHeaderClassNames.action, styles4.action, state.action.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardFooter/useCardFooterStyles.styles.js
  var cardFooterClassNames = {
    root: "fui-CardFooter",
    action: "fui-CardFooter__action"
  };
  var useStyles23 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Beiy3e4: "f1063pyq",
      i8kkvl: "f4akndk",
      Belr9w4: "fe5j3v"
    },
    action: {
      Frg6f3: ["fcgxt0o", "f1ujusj6"]
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f1063pyq{flex-direction:row;}", ".f4akndk{column-gap:12px;}", ".fe5j3v{row-gap:12px;}", ".fcgxt0o{margin-left:auto;}", ".f1ujusj6{margin-right:auto;}"]
  });
  var useCardFooterStyles_unstable = (state) => {
    const styles4 = useStyles23();
    state.root.className = mergeClasses(cardFooterClassNames.root, styles4.root, state.root.className);
    if (state.action) {
      state.action.className = mergeClasses(cardFooterClassNames.action, styles4.action, state.action.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCardStyles.styles.js
  var React151 = __toESM(require_react());
  var cardClassNames = {
    root: "fui-Card",
    floatingAction: "fui-Card__floatingAction",
    checkbox: "fui-Card__checkbox"
  };
  var cardCSSVars = {
    cardSizeVar: "--fui-Card--size",
    cardBorderRadiusVar: "--fui-Card--border-radius"
  };
  var focusOutlineStyle = {
    outlineRadius: `var(${cardCSSVars.cardBorderRadiusVar})`,
    outlineWidth: tokens.strokeWidthThick,
    outlineOffset: "-2px"
  };
  var useStyles24 = /* @__PURE__ */ __styles2({
    root: {
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      Bbmb7ep: ["fifeqxg", "f899z7z"],
      Beyfa6y: ["f899z7z", "fifeqxg"],
      B7oj6ja: ["f4h3tyx", "f18ur2pz"],
      Btl43ni: ["f18ur2pz", "f4h3tyx"],
      z8tnut: "f1lplnzb",
      z189sj: ["f10m5gbb", "f1k04kkk"],
      Byoj8tv: "fhftqfp",
      uwmqm3: ["f1k04kkk", "f10m5gbb"],
      i8kkvl: "fxsr4vj",
      Belr9w4: "fcvsdzp",
      mc9l5x: "f22iagw",
      qhf8xq: "f10pi13n",
      B7ck84d: "f1ewtqcl",
      sj55zd: "f19n0e5",
      E3zdtr: "f1mdlcz9",
      bn5sak: "frwkxtg",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      B1piin3: ["f15yvnhg", "f1n6gb5g"],
      By385i5: "fo72kxq",
      Bsft5z2: "f13zj6fq",
      B80jsxd: "f1nwj1ja",
      Bm2nyyq: "f8rth92",
      Barhvk9: ["flthirb", "ftkbnf5"],
      Bw17bha: "f1lh990p",
      vfts7: ["ftkbnf5", "flthirb"],
      xrcqlc: "f6czdpx",
      Ihftqj: ["f13hvwk3", "f1en4csx"],
      Bcgy8vk: "f1i1u9k0",
      Bhxzhr1: ["f1en4csx", "f13hvwk3"],
      B3778ie: ["f1qnomq5", "f2fl922"],
      d9w3h3: ["f2fl922", "f1qnomq5"],
      Bl18szs: ["f1anhtl", "f1n2zcl3"],
      B4j8arr: ["f1n2zcl3", "f1anhtl"],
      B2jhnfs: "f16v3d5c",
      wiictr: "f1su8t2g"
    },
    focused: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "f99gebs",
      clg4pj: ["f13b0oaq", "f8t2bz6"],
      hgwjuy: "f1jvq617",
      Bonggc9: ["f8t2bz6", "f13b0oaq"],
      B1tsrr9: ["f11unbnk", "fbd201q"],
      Dah5zi: ["fbd201q", "f11unbnk"],
      Bkh64rk: ["f12nqxso", "f1uguk4w"],
      qqdqy8: ["f1uguk4w", "f12nqxso"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "f15fr7a0",
      Bule8hv: ["fwsq40z", "fy0y4wt"],
      Bjwuhne: "f34ld9f",
      Ghsupd: ["fy0y4wt", "fwsq40z"]
    },
    selectableFocused: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      Bssx7fj: "f1b1k54r",
      uh7if5: ["f4ne723", "fqqcjud"],
      clntm0: "fh7aioi",
      Dlk2r6: ["fqqcjud", "f4ne723"],
      B2j2mmj: "ffht0p2",
      wigs8: "f1p0ul1q",
      pbfy6t: "f1c901ms",
      B0v4ure: "f1alokd7",
      ghq09: "f78i1la",
      B24cy0v: ["f1kvsw7t", "f1bw8brt"],
      Bwckmig: "f8k7e5g",
      Bvwlmkc: ["f1bw8brt", "f1kvsw7t"],
      Bbgo44z: "f125hn41",
      Bil7v7r: ["fgxkx34", "f1v56tyl"],
      skfxo0: "fdxas6f",
      jo1ztg: ["f1v56tyl", "fgxkx34"],
      Ba3ybja: ["fxwickw", "f1ia5cve"],
      az1dzo: ["f1ia5cve", "fxwickw"],
      vppk2z: ["f194aguw", "fqicc6c"],
      B6352mv: ["fqicc6c", "f194aguw"],
      nr063g: "fq4eyks",
      Blmvk6g: ["f1ya6x16", "ftuszwa"],
      Bsiemmq: "f1e2iu44",
      B98u21t: ["ftuszwa", "f1ya6x16"],
      B2pnrqr: "f1amxum7",
      B29w5g4: ["f1cec8w7", "f554mv0"],
      Bhhzhcn: "f1sj6kbr",
      Bec0n69: ["f554mv0", "f1cec8w7"]
    },
    orientationHorizontal: {
      Beiy3e4: "f1063pyq",
      Bt984gj: "f122n59",
      Bnoktp0: "fpfyeui",
      Idhjb2: "fwi74qw",
      ihgzqh: ["ffcmwrh", "f6ppoih"],
      Bgp6ld0: ["f1dc9p14", "fd933vt"],
      Bbucpmy: "f18esqgw"
    },
    orientationVertical: {
      Beiy3e4: "f1vx9l62",
      Bt4kzjz: ["fobhde4", "fx5r7kn"],
      B1ou843: ["fx5r7kn", "fobhde4"],
      y1433z: "f19chtn8",
      B7egwnw: "fuvs6re",
      B49b4xf: "fy4glsf"
    },
    sizeSmall: {
      B7balbw: "f1pi9uxy",
      B1h88n7: "f1h1zgly"
    },
    sizeMedium: {
      B7balbw: "frsmuga",
      B1h88n7: "fuldkky"
    },
    sizeLarge: {
      B7balbw: "f1qua4xo",
      B1h88n7: "fimkt6v"
    },
    filled: {
      De3pzq: "fxugw4r",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"]
    },
    filledInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "fxugw4r",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"],
      Jwef8y: "f1knas48",
      Bvxd0ez: "f1m145df",
      ecr2s2: "fb40n2d"
    },
    filledInteractiveSelected: {
      De3pzq: "f1nfm20t",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "f1kz6goq"
    },
    filledAlternative: {
      De3pzq: "f1dmdbja",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"]
    },
    filledAlternativeInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "f1dmdbja",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"],
      Jwef8y: "f1uvynv3",
      Bvxd0ez: "f1m145df",
      ecr2s2: "f1yhgkbh"
    },
    filledAlternativeInteractiveSelected: {
      De3pzq: "fjxa0vh",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "fehi0vp"
    },
    outline: {
      De3pzq: "f1c21dwh",
      E5pizo: "f1couhl3",
      B0n5ga8: "ft83z1f",
      s924m2: ["f1g4150c", "f192dr6e"],
      B1q35kw: "f1qnawh6",
      Gp14am: ["f192dr6e", "f1g4150c"]
    },
    outlineInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "f1c21dwh",
      E5pizo: "f1couhl3",
      B0n5ga8: "ft83z1f",
      s924m2: ["f1g4150c", "f192dr6e"],
      B1q35kw: "f1qnawh6",
      Gp14am: ["f192dr6e", "f1g4150c"],
      Jwef8y: "fjxutwb",
      Be0v6ae: "f1llr77y",
      B5kxglz: ["fzk0khw", "fjj8tog"],
      B3pwyw6: "fb1u8ub",
      Bymgtzf: ["fjj8tog", "fzk0khw"],
      ecr2s2: "fophhak",
      dmfk: "f1uohb70",
      B4ofi8: ["f1jm7v1n", "f1bus3rq"],
      jgq6uv: "f1fbu7rr",
      Baxewws: ["f1bus3rq", "f1jm7v1n"]
    },
    outlineInteractiveSelected: {
      De3pzq: "f1q9pm1r",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "fg59vm4"
    },
    subtle: {
      De3pzq: "fhovq9v",
      E5pizo: "f1couhl3",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"]
    },
    subtleInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "fhovq9v",
      E5pizo: "f1couhl3",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"],
      Jwef8y: "f1t94bn6",
      ecr2s2: "f1wfn5kd"
    },
    subtleInteractiveSelected: {
      De3pzq: "fq5gl1p",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "f1uqaxdt"
    },
    highContrastSelected: {
      ycbfsm: "fkc42ay",
      Bsw6fvg: "f1rirnrt",
      Bbusuzp: "f1lkg8j3",
      xgfqdd: "f1nkj0oa",
      Bmmdzwq: "fey3rwa",
      zkpvhj: ["f5jhx11", "fff9uym"],
      B20bydw: "fm7n0jy",
      Bwwwggl: ["fff9uym", "f5jhx11"]
    },
    highContrastInteractive: {
      h1vhog: "fpfvv3l",
      kslmdy: "f1oamsm6",
      Baaf6ca: "f1il21bs",
      x9zz3d: "fnn5dk0",
      Bmmdzwq: "fey3rwa",
      zkpvhj: ["f5jhx11", "fff9uym"],
      B20bydw: "fm7n0jy",
      Bwwwggl: ["fff9uym", "f5jhx11"]
    },
    select: {
      qhf8xq: "f1euv43f",
      Bhzewxz: "fqclxi7",
      j35jbq: ["fiv86kb", "f36uhnt"],
      Bj3rh1h: "f19g0ac"
    },
    hiddenCheckbox: {
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      a9b677: "frkrog8",
      Bqenvij: "f1mpe4l3",
      qhf8xq: "f1euv43f",
      Bh84pgu: "fmf1zke",
      Bgl5zvf: "f1wch0ki",
      Huce71: "fz5stix"
    }
  }, {
    d: [".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".fifeqxg{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".f899z7z{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f4h3tyx{border-top-right-radius:var(--fui-Card--border-radius);}", ".f18ur2pz{border-top-left-radius:var(--fui-Card--border-radius);}", ".f1lplnzb{padding-top:var(--fui-Card--size);}", ".f10m5gbb{padding-right:var(--fui-Card--size);}", ".f1k04kkk{padding-left:var(--fui-Card--size);}", ".fhftqfp{padding-bottom:var(--fui-Card--size);}", ".fxsr4vj{column-gap:var(--fui-Card--size);}", ".fcvsdzp{row-gap:var(--fui-Card--size);}", ".f22iagw{display:flex;}", ".f10pi13n{position:relative;}", ".f1ewtqcl{box-sizing:border-box;}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1mdlcz9::after{position:absolute;}", ".frwkxtg::after{top:0;}", ".f1n6gb5g::after{left:0;}", ".f15yvnhg::after{right:0;}", ".fo72kxq::after{bottom:0;}", '.f13zj6fq::after{content:"";}', ".f1nwj1ja::after{pointer-events:none;}", ".f8rth92::after{border-top-style:solid;}", ".flthirb::after{border-right-style:solid;}", ".ftkbnf5::after{border-left-style:solid;}", ".f1lh990p::after{border-bottom-style:solid;}", ".f6czdpx::after{border-top-width:var(--strokeWidthThin);}", ".f13hvwk3::after{border-right-width:var(--strokeWidthThin);}", ".f1en4csx::after{border-left-width:var(--strokeWidthThin);}", ".f1i1u9k0::after{border-bottom-width:var(--strokeWidthThin);}", ".f1qnomq5::after{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".f2fl922::after{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f1anhtl::after{border-top-right-radius:var(--fui-Card--border-radius);}", ".f1n2zcl3::after{border-top-left-radius:var(--fui-Card--border-radius);}", ".f16v3d5c>.fui-CardHeader,.f16v3d5c>.fui-CardFooter{flex-shrink:0;}", ".f1su8t2g>:not(.fui-CardPreview):not(.fui-CardHeader):not(.fui-CardFooter){flex-grow:1;}", ".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".f99gebs[data-fui-focus-visible]::after{border-top-width:var(--strokeWidthThick);}", ".f13b0oaq[data-fui-focus-visible]::after{border-right-width:var(--strokeWidthThick);}", ".f8t2bz6[data-fui-focus-visible]::after{border-left-width:var(--strokeWidthThick);}", ".f1jvq617[data-fui-focus-visible]::after{border-bottom-width:var(--strokeWidthThick);}", ".f11unbnk[data-fui-focus-visible]::after{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".fbd201q[data-fui-focus-visible]::after{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f12nqxso[data-fui-focus-visible]::after{border-top-right-radius:var(--fui-Card--border-radius);}", ".f1uguk4w[data-fui-focus-visible]::after{border-top-left-radius:var(--fui-Card--border-radius);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f15fr7a0[data-fui-focus-visible]::after{top:calc(0px - var(--strokeWidthThick) - -2px);}", ".fwsq40z[data-fui-focus-visible]::after{right:calc(0px - var(--strokeWidthThick) - -2px);}", ".fy0y4wt[data-fui-focus-visible]::after{left:calc(0px - var(--strokeWidthThick) - -2px);}", ".f34ld9f[data-fui-focus-visible]::after{bottom:calc(0px - var(--strokeWidthThick) - -2px);}", ".f1b1k54r[data-fui-focus-within]:focus-within{border-top-color:transparent;}", ".f4ne723[data-fui-focus-within]:focus-within{border-right-color:transparent;}", ".fqqcjud[data-fui-focus-within]:focus-within{border-left-color:transparent;}", ".fh7aioi[data-fui-focus-within]:focus-within{border-bottom-color:transparent;}", '.ffht0p2[data-fui-focus-within]:focus-within::after{content:"";}', ".f1p0ul1q[data-fui-focus-within]:focus-within::after{position:absolute;}", ".f1c901ms[data-fui-focus-within]:focus-within::after{pointer-events:none;}", ".f1alokd7[data-fui-focus-within]:focus-within::after{z-index:1;}", ".f78i1la[data-fui-focus-within]:focus-within::after{border-top-style:solid;}", ".f1kvsw7t[data-fui-focus-within]:focus-within::after{border-right-style:solid;}", ".f1bw8brt[data-fui-focus-within]:focus-within::after{border-left-style:solid;}", ".f8k7e5g[data-fui-focus-within]:focus-within::after{border-bottom-style:solid;}", ".f125hn41[data-fui-focus-within]:focus-within::after{border-top-width:var(--strokeWidthThick);}", ".fgxkx34[data-fui-focus-within]:focus-within::after{border-right-width:var(--strokeWidthThick);}", ".f1v56tyl[data-fui-focus-within]:focus-within::after{border-left-width:var(--strokeWidthThick);}", ".fdxas6f[data-fui-focus-within]:focus-within::after{border-bottom-width:var(--strokeWidthThick);}", ".fxwickw[data-fui-focus-within]:focus-within::after{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".f1ia5cve[data-fui-focus-within]:focus-within::after{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f194aguw[data-fui-focus-within]:focus-within::after{border-top-right-radius:var(--fui-Card--border-radius);}", ".fqicc6c[data-fui-focus-within]:focus-within::after{border-top-left-radius:var(--fui-Card--border-radius);}", ".fq4eyks[data-fui-focus-within]:focus-within::after{border-top-color:var(--colorStrokeFocus2);}", ".f1ya6x16[data-fui-focus-within]:focus-within::after{border-right-color:var(--colorStrokeFocus2);}", ".ftuszwa[data-fui-focus-within]:focus-within::after{border-left-color:var(--colorStrokeFocus2);}", ".f1e2iu44[data-fui-focus-within]:focus-within::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f1amxum7[data-fui-focus-within]:focus-within::after{top:calc(0px - var(--strokeWidthThick) - -2px);}", ".f1cec8w7[data-fui-focus-within]:focus-within::after{right:calc(0px - var(--strokeWidthThick) - -2px);}", ".f554mv0[data-fui-focus-within]:focus-within::after{left:calc(0px - var(--strokeWidthThick) - -2px);}", ".f1sj6kbr[data-fui-focus-within]:focus-within::after{bottom:calc(0px - var(--strokeWidthThick) - -2px);}", ".f1063pyq{flex-direction:row;}", ".f122n59{align-items:center;}", ".fpfyeui>.fui-CardPreview{margin-top:calc(var(--fui-Card--size) * -1);}", ".fwi74qw>.fui-CardPreview{margin-bottom:calc(var(--fui-Card--size) * -1);}", '.ffcmwrh>:not([aria-hidden="true"]).fui-CardPreview:first-of-type{margin-left:calc(var(--fui-Card--size) * -1);}', '.f6ppoih>:not([aria-hidden="true"]).fui-CardPreview:first-of-type{margin-right:calc(var(--fui-Card--size) * -1);}', '.f1dc9p14>:not([aria-hidden="true"]).fui-CardPreview:last-of-type{margin-right:calc(var(--fui-Card--size) * -1);}', '.fd933vt>:not([aria-hidden="true"]).fui-CardPreview:last-of-type{margin-left:calc(var(--fui-Card--size) * -1);}', ".f18esqgw>.fui-CardHeader:last-of-type,.f18esqgw>.fui-CardFooter:last-of-type{flex-grow:1;}", ".f1vx9l62{flex-direction:column;}", ".fobhde4>.fui-CardPreview{margin-left:calc(var(--fui-Card--size) * -1);}", ".fx5r7kn>.fui-CardPreview{margin-right:calc(var(--fui-Card--size) * -1);}", '.f19chtn8>:not([aria-hidden="true"]).fui-CardPreview:first-of-type{margin-top:calc(var(--fui-Card--size) * -1);}', ".fuvs6re>.fui-Card__floatingAction+.fui-CardPreview{margin-top:calc(var(--fui-Card--size) * -1);}", '.fy4glsf>:not([aria-hidden="true"]).fui-CardPreview:last-of-type{margin-bottom:calc(var(--fui-Card--size) * -1);}', ".f1pi9uxy{--fui-Card--size:8px;}", ".f1h1zgly{--fui-Card--border-radius:var(--borderRadiusSmall);}", ".frsmuga{--fui-Card--size:12px;}", ".fuldkky{--fui-Card--border-radius:var(--borderRadiusMedium);}", ".f1qua4xo{--fui-Card--size:16px;}", ".fimkt6v{--fui-Card--border-radius:var(--borderRadiusLarge);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1whvlc6{box-shadow:var(--shadow4);}", ".f16gxe2i::after{border-top-color:var(--colorTransparentStroke);}", ".fpgykix::after{border-right-color:var(--colorTransparentStroke);}", ".fzybk4o::after{border-left-color:var(--colorTransparentStroke);}", ".f1osi826::after{border-bottom-color:var(--colorTransparentStroke);}", ".f1k6fduh{cursor:pointer;}", ".f1nfm20t{background-color:var(--colorNeutralBackground1Selected);}", ".f16eln5f::after{border-top-color:var(--colorNeutralStroke1Selected);}", ".fa2okxs::after{border-right-color:var(--colorNeutralStroke1Selected);}", ".fg4zq3l::after{border-left-color:var(--colorNeutralStroke1Selected);}", ".ff6932p::after{border-bottom-color:var(--colorNeutralStroke1Selected);}", ".f1dmdbja{background-color:var(--colorNeutralBackground2);}", ".fjxa0vh{background-color:var(--colorNeutralBackground2Selected);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1couhl3{box-shadow:none;}", ".ft83z1f::after{border-top-color:var(--colorNeutralStroke1);}", ".f1g4150c::after{border-right-color:var(--colorNeutralStroke1);}", ".f192dr6e::after{border-left-color:var(--colorNeutralStroke1);}", ".f1qnawh6::after{border-bottom-color:var(--colorNeutralStroke1);}", ".f1q9pm1r{background-color:var(--colorTransparentBackgroundSelected);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fq5gl1p{background-color:var(--colorSubtleBackgroundSelected);}", ".f1euv43f{position:absolute;}", ".fqclxi7{top:4px;}", ".fiv86kb{right:4px;}", ".f36uhnt{left:4px;}", ".f19g0ac{z-index:1;}", ".frkrog8{width:1px;}", ".f1mpe4l3{height:1px;}", ".fmf1zke{clip:rect(0 0 0 0);}", ".f1wch0ki{clip-path:inset(50%);}", ".fz5stix{white-space:nowrap;}"],
    f: [".ftqa4ok:focus{outline-style:none;}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"],
    h: [".f1knas48:hover{background-color:var(--colorNeutralBackground1Hover);}", ".f1m145df:hover{box-shadow:var(--shadow8);}", ".f1kz6goq:hover{background-color:var(--colorNeutralBackground1Selected);}", ".f1uvynv3:hover{background-color:var(--colorNeutralBackground2Hover);}", ".fehi0vp:hover{background-color:var(--colorNeutralBackground2Selected);}", ".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".f1llr77y:hover::after{border-top-color:var(--colorNeutralStroke1Hover);}", ".fzk0khw:hover::after{border-right-color:var(--colorNeutralStroke1Hover);}", ".fjj8tog:hover::after{border-left-color:var(--colorNeutralStroke1Hover);}", ".fb1u8ub:hover::after{border-bottom-color:var(--colorNeutralStroke1Hover);}", ".fg59vm4:hover{background-color:var(--colorTransparentBackgroundSelected);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".f1uqaxdt:hover{background-color:var(--colorSubtleBackgroundSelected);}"],
    a: [".fb40n2d:active{background-color:var(--colorNeutralBackground1Pressed);}", ".f1yhgkbh:active{background-color:var(--colorNeutralBackground2Pressed);}", ".fophhak:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f1uohb70:active::after{border-top-color:var(--colorNeutralStroke1Pressed);}", ".f1jm7v1n:active::after{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f1bus3rq:active::after{border-left-color:var(--colorNeutralStroke1Pressed);}", ".f1fbu7rr:active::after{border-bottom-color:var(--colorNeutralStroke1Pressed);}", ".f1wfn5kd:active{background-color:var(--colorSubtleBackgroundPressed);}"],
    m: [["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1nkj0oa .fui-CardPreview,.f1nkj0oa .fui-CardFooter{forced-color-adjust:auto;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fey3rwa::after{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f5jhx11::after{border-right-color:Highlight;}.fff9uym::after{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fm7n0jy::after{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fpfvv3l:hover,.fpfvv3l :active{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1oamsm6:hover,.f1oamsm6 :active{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1il21bs:hover,.f1il21bs :active{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fnn5dk0:hover .fui-CardPreview,.fnn5dk0 :active .fui-CardPreview,.fnn5dk0:hover .fui-CardFooter,.fnn5dk0 :active .fui-CardFooter{forced-color-adjust:auto;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useCardStyles_unstable = (state) => {
    const styles4 = useStyles24();
    const orientationMap = {
      horizontal: styles4.orientationHorizontal,
      vertical: styles4.orientationVertical
    };
    const sizeMap = {
      small: styles4.sizeSmall,
      medium: styles4.sizeMedium,
      large: styles4.sizeLarge
    };
    const appearanceMap = {
      filled: styles4.filled,
      "filled-alternative": styles4.filledAlternative,
      outline: styles4.outline,
      subtle: styles4.subtle
    };
    const selectedMap = {
      filled: styles4.filledInteractiveSelected,
      "filled-alternative": styles4.filledAlternativeInteractiveSelected,
      outline: styles4.outlineInteractiveSelected,
      subtle: styles4.subtleInteractiveSelected
    };
    const interactiveMap = {
      filled: styles4.filledInteractive,
      "filled-alternative": styles4.filledAlternativeInteractive,
      outline: styles4.outlineInteractive,
      subtle: styles4.subtleInteractive
    };
    const isSelectableOrInteractive = state.interactive || state.selectable;
    const focusedClassName = React151.useMemo(() => {
      if (state.selectable) {
        if (state.selectFocused) {
          return styles4.selectableFocused;
        }
        return "";
      }
      return styles4.focused;
    }, [state.selectFocused, state.selectable, styles4.focused, styles4.selectableFocused]);
    state.root.className = mergeClasses(
      cardClassNames.root,
      styles4.root,
      orientationMap[state.orientation],
      sizeMap[state.size],
      appearanceMap[state.appearance],
      isSelectableOrInteractive && interactiveMap[state.appearance],
      state.selected && selectedMap[state.appearance],
      // Focus overrides
      focusedClassName,
      // High contrast overrides
      isSelectableOrInteractive && styles4.highContrastInteractive,
      state.selected && styles4.highContrastSelected,
      state.root.className
    );
    if (state.floatingAction) {
      state.floatingAction.className = mergeClasses(cardClassNames.floatingAction, styles4.select, state.floatingAction.className);
    }
    if (state.checkbox) {
      state.checkbox.className = mergeClasses(cardClassNames.checkbox, styles4.hiddenCheckbox, state.checkbox.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCardContextValue.js
  function useCardContextValue({ selectableA11yProps }) {
    return {
      selectableA11yProps
    };
  }

  // ../node_modules/@fluentui/react-card/lib/components/Card/Card.js
  var Card = /* @__PURE__ */ React152.forwardRef((props, ref) => {
    const state = useCard_unstable(props, ref);
    const cardContextValue = useCardContextValue(state);
    useCardStyles_unstable(state);
    return renderCard_unstable(state, cardContextValue);
  });
  Card.displayName = "Card";

  // ../node_modules/@fluentui/react-card/lib/components/CardFooter/CardFooter.js
  var React154 = __toESM(require_react());

  // ../node_modules/@fluentui/react-card/lib/components/CardFooter/useCardFooter.js
  var React153 = __toESM(require_react());
  var useCardFooter_unstable = (props, ref) => {
    const { action } = props;
    return {
      components: {
        root: "div",
        action: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref,
        ...props
      }), {
        elementType: "div"
      }),
      action: slot_exports.optional(action, {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardFooter/renderCardFooter.js
  var renderCardFooter_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.root.children,
        state.action && /* @__PURE__ */ jsx(state.action, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardFooter/CardFooter.js
  var CardFooter = /* @__PURE__ */ React154.forwardRef((props, ref) => {
    const state = useCardFooter_unstable(props, ref);
    useCardFooterStyles_unstable(state);
    return renderCardFooter_unstable(state);
  });
  CardFooter.displayName = "CardFooter";

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/CardHeader.js
  var React156 = __toESM(require_react());

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/useCardHeader.js
  var React155 = __toESM(require_react());
  function getChildWithId(header) {
    function isReactElementWithIdProp(element2) {
      return React155.isValidElement(element2) && Boolean(element2.props.id);
    }
    return React155.Children.toArray(header).find(isReactElementWithIdProp);
  }
  function getReferenceId(headerId, childWithId, generatedId) {
    var _childWithId;
    if (headerId) {
      return headerId;
    }
    if ((_childWithId = childWithId) === null || _childWithId === void 0 ? void 0 : _childWithId.props.id) {
      return childWithId.props.id;
    }
    return generatedId;
  }
  var useCardHeader_unstable = (props, ref) => {
    const { image: image2, header, description, action } = props;
    const { selectableA11yProps: { referenceId, setReferenceId } } = useCardContext_unstable();
    const headerRef = React155.useRef(null);
    const hasChildId = React155.useRef(false);
    const generatedId = useId2(cardHeaderClassNames.header, referenceId);
    const headerSlot = slot_exports.optional(header, {
      renderByDefault: true,
      defaultProps: {
        ref: headerRef,
        id: !hasChildId.current ? referenceId : void 0
      },
      elementType: "div"
    });
    React155.useEffect(() => {
      var _headerRef_current, _headerSlot;
      const headerId = !hasChildId.current ? (_headerRef_current = headerRef.current) === null || _headerRef_current === void 0 ? void 0 : _headerRef_current.id : void 0;
      const childWithId = getChildWithId((_headerSlot = headerSlot) === null || _headerSlot === void 0 ? void 0 : _headerSlot.children);
      hasChildId.current = Boolean(childWithId);
      setReferenceId(getReferenceId(headerId, childWithId, generatedId));
    }, [
      generatedId,
      header,
      headerSlot,
      setReferenceId
    ]);
    return {
      components: {
        root: "div",
        image: "div",
        header: "div",
        description: "div",
        action: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref,
        ...props
      }), {
        elementType: "div"
      }),
      image: slot_exports.optional(image2, {
        elementType: "div"
      }),
      header: headerSlot,
      description: slot_exports.optional(description, {
        elementType: "div"
      }),
      action: slot_exports.optional(action, {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/renderCardHeader.js
  var renderCardHeader_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.image && /* @__PURE__ */ jsx(state.image, {}),
        /* @__PURE__ */ jsx(state.header, {}),
        state.description && /* @__PURE__ */ jsx(state.description, {}),
        state.action && /* @__PURE__ */ jsx(state.action, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/CardHeader.js
  var CardHeader = /* @__PURE__ */ React156.forwardRef((props, ref) => {
    const state = useCardHeader_unstable(props, ref);
    useCardHeaderStyles_unstable(state);
    return renderCardHeader_unstable(state);
  });
  CardHeader.displayName = "CardHeader";

  // ../node_modules/@fluentui/react-card/lib/components/CardPreview/CardPreview.js
  var React158 = __toESM(require_react());

  // ../node_modules/@fluentui/react-card/lib/components/CardPreview/useCardPreview.js
  var React157 = __toESM(require_react());
  var useCardPreview_unstable = (props, ref) => {
    const { logo } = props;
    const { selectableA11yProps: { referenceLabel, referenceId, setReferenceLabel, setReferenceId } } = useCardContext_unstable();
    const previewRef = useMergedRefs(ref, React157.useRef(null));
    React157.useEffect(() => {
      if (referenceLabel && referenceId) {
        return;
      }
      if (previewRef.current && previewRef.current.parentNode) {
        const img = previewRef.current.parentNode.querySelector(`.${cardPreviewClassNames.root} > img`);
        if (img) {
          const ariaLabel = img.getAttribute("aria-label");
          const ariaDescribedby = img.getAttribute("aria-describedby");
          if (ariaDescribedby) {
            setReferenceId(ariaDescribedby);
          } else if (img.alt) {
            setReferenceLabel(img.alt);
          } else if (ariaLabel) {
            setReferenceLabel(ariaLabel);
          }
        }
      }
    }, [
      setReferenceLabel,
      referenceLabel,
      previewRef,
      referenceId,
      setReferenceId
    ]);
    return {
      components: {
        root: "div",
        logo: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref: previewRef,
        ...props
      }), {
        elementType: "div"
      }),
      logo: slot_exports.optional(logo, {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardPreview/renderCardPreview.js
  var renderCardPreview_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.root.children,
        state.logo && /* @__PURE__ */ jsx(state.logo, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardPreview/CardPreview.js
  var CardPreview = /* @__PURE__ */ React158.forwardRef((props, ref) => {
    const state = useCardPreview_unstable(props, ref);
    useCardPreviewStyles_unstable(state);
    return renderCardPreview_unstable(state);
  });
  CardPreview.displayName = "CardPreview";

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/Tree.js
  var React166 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/useTree.js
  var React165 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tree/lib/hooks/useControllableOpenItems.js
  var React159 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tree/lib/utils/ImmutableSet.js
  var emptyImmutableSet = createImmutableSet();
  function dangerouslyCreateImmutableSet(internalSet) {
    return {
      size: internalSet.size,
      add(value) {
        const nextSet = new Set(internalSet);
        nextSet.add(value);
        return dangerouslyCreateImmutableSet(nextSet);
      },
      clear() {
        return emptyImmutableSet;
      },
      delete(value) {
        const nextSet = new Set(internalSet);
        nextSet.delete(value);
        return dangerouslyCreateImmutableSet(nextSet);
      },
      has(value) {
        return internalSet.has(value);
      },
      [Symbol.iterator]() {
        return internalSet[Symbol.iterator]();
      },
      // eslint-disable-next-line @typescript-eslint/naming-convention
      dangerouslyGetInternalSet_unstable: () => internalSet
    };
  }
  function isImmutableSet(value) {
    return typeof value === "object" && value !== null && "dangerouslyGetInternalSet_unstable" in value;
  }
  function createImmutableSet(iterable) {
    const internalSet = new Set(iterable);
    return dangerouslyCreateImmutableSet(internalSet);
  }
  var ImmutableSet = {
    empty: emptyImmutableSet,
    create: createImmutableSet,
    isImmutableSet,
    // eslint-disable-next-line @typescript-eslint/naming-convention
    dangerouslyCreate_unstable: dangerouslyCreateImmutableSet
  };

  // ../node_modules/@fluentui/react-tree/lib/utils/createOpenItems.js
  function createOpenItems(iterable) {
    if (iterable === void 0) {
      return ImmutableSet.empty;
    }
    if (ImmutableSet.isImmutableSet(iterable)) {
      return iterable;
    }
    return ImmutableSet.create(iterable);
  }

  // ../node_modules/@fluentui/react-tree/lib/hooks/useControllableOpenItems.js
  function useControllableOpenItems(props) {
    return useControllableState({
      state: React159.useMemo(() => props.openItems && createOpenItems(props.openItems), [
        props.openItems
      ]),
      defaultState: () => createOpenItems(props.defaultOpenItems),
      initialState: ImmutableSet.empty
    });
  }
  function createNextOpenItems(data, previousOpenItems) {
    if (data.value === null) {
      return previousOpenItems;
    }
    const previousOpenItemsHasId = previousOpenItems.has(data.value);
    if (data.open ? previousOpenItemsHasId : !previousOpenItemsHasId) {
      return previousOpenItems;
    }
    const nextOpenItems = ImmutableSet.create(previousOpenItems);
    return data.open ? nextOpenItems.add(data.value) : nextOpenItems.delete(data.value);
  }

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/useNestedControllableCheckedItems.js
  var React160 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tree/lib/utils/ImmutableMap.js
  var emptyImmutableMap = createImmutableMap();
  function createImmutableMap(iterable) {
    const internalMap = new Map(iterable);
    return dangerouslyCreateImmutableMap(internalMap);
  }
  function dangerouslyCreateImmutableMap(internalMap) {
    return {
      size: internalMap.size,
      set: (key, value) => {
        const nextSet = new Map(internalMap);
        nextSet.set(key, value);
        return dangerouslyCreateImmutableMap(nextSet);
      },
      get: (key) => internalMap.get(key),
      clear: () => emptyImmutableMap,
      delete(value) {
        const nextSet = new Map(internalMap);
        nextSet.delete(value);
        return dangerouslyCreateImmutableMap(nextSet);
      },
      has: (value) => internalMap.has(value),
      [Symbol.iterator]: () => internalMap[Symbol.iterator](),
      // eslint-disable-next-line @typescript-eslint/naming-convention
      dangerouslyGetInternalMap_unstable: () => internalMap
    };
  }
  function isImmutableMap(value) {
    return typeof value === "object" && value !== null && "dangerouslyGetInternalMap_unstable" in value;
  }
  var ImmutableMap = {
    empty: emptyImmutableMap,
    create: createImmutableMap,
    isImmutableMap,
    // eslint-disable-next-line @typescript-eslint/naming-convention
    dangerouslyCreate_unstable: dangerouslyCreateImmutableMap
  };

  // ../node_modules/@fluentui/react-tree/lib/utils/createCheckedItems.js
  function createCheckedItems(iterable) {
    if (iterable === void 0) {
      return ImmutableMap.empty;
    }
    if (ImmutableMap.isImmutableMap(iterable)) {
      return iterable;
    }
    const internalMap = /* @__PURE__ */ new Map();
    for (const item of iterable) {
      if (Array.isArray(item)) {
        internalMap.set(item[0], item[1]);
      } else {
        internalMap.set(item, true);
      }
    }
    return ImmutableMap.dangerouslyCreate_unstable(internalMap);
  }

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/useNestedControllableCheckedItems.js
  function useNestedCheckedItems(props) {
    return React160.useMemo(() => createCheckedItems(props.checkedItems), [
      props.checkedItems
    ]);
  }
  function createNextNestedCheckedItems(data, previousCheckedItems) {
    if (data.selectionMode === "single") {
      return ImmutableMap.create([
        [
          data.value,
          data.checked
        ]
      ]);
    }
    if (data.selectionMode === "multiselect") {
      return previousCheckedItems.set(data.value, data.checked);
    }
    return previousCheckedItems;
  }

  // ../node_modules/@fluentui/react-tree/lib/contexts/treeContext.js
  var defaultContextValue3 = {
    level: 0,
    selectionMode: "none",
    openItems: ImmutableSet.empty,
    checkedItems: ImmutableMap.empty,
    requestTreeResponse: noop3,
    appearance: "subtle",
    size: "medium"
  };
  function noop3() {
  }
  var TreeContext = createContext14(void 0);
  var { Provider: TreeProvider } = TreeContext;
  var useTreeContext_unstable = (selector) => useContextSelector(TreeContext, (ctx = defaultContextValue3) => selector(ctx));

  // ../node_modules/@fluentui/react-tree/lib/hooks/useRootTree.js
  var React161 = __toESM(require_react());
  var ReactDOM2 = __toESM(require_react_dom());

  // ../node_modules/@fluentui/react-tree/lib/utils/tokens.js
  var treeDataTypes = {
    ArrowLeft,
    ArrowRight,
    Enter,
    Click: "Click",
    ExpandIconClick: "ExpandIconClick",
    End,
    Home,
    ArrowUp,
    ArrowDown,
    TypeAhead: "TypeAhead",
    Change: "Change"
  };

  // ../node_modules/@fluentui/react-tree/lib/hooks/useRootTree.js
  function useRootTree(props, ref) {
    warnIfNoProperPropsRootTree(props);
    const { appearance = "subtle", size: size3 = "medium", selectionMode = "none" } = props;
    const openItems = React161.useMemo(() => createOpenItems(props.openItems), [
      props.openItems
    ]);
    const checkedItems = React161.useMemo(() => createCheckedItems(props.checkedItems), [
      props.checkedItems
    ]);
    const requestOpenChange = (data) => {
      var _props_onOpenChange, _props;
      return (_props_onOpenChange = (_props = props).onOpenChange) === null || _props_onOpenChange === void 0 ? void 0 : _props_onOpenChange.call(_props, data.event, data);
    };
    const requestCheckedChange = (data) => {
      var _props_onCheckedChange, _props;
      return (_props_onCheckedChange = (_props = props).onCheckedChange) === null || _props_onCheckedChange === void 0 ? void 0 : _props_onCheckedChange.call(_props, data.event, data);
    };
    const requestNavigation = (data) => {
      var _props_onNavigation, _props;
      (_props_onNavigation = (_props = props).onNavigation) === null || _props_onNavigation === void 0 ? void 0 : _props_onNavigation.call(_props, data.event, data);
      switch (data.type) {
        case treeDataTypes.ArrowDown:
        case treeDataTypes.ArrowUp:
        case treeDataTypes.Home:
        case treeDataTypes.End:
          data.event.preventDefault();
      }
    };
    const requestTreeResponse = useEventCallback((request) => {
      switch (request.type) {
        case treeDataTypes.Click:
        case treeDataTypes.ExpandIconClick: {
          return ReactDOM2.unstable_batchedUpdates(() => {
            requestOpenChange({
              ...request,
              open: request.itemType === "branch" && !openItems.has(request.value),
              openItems: openItems.dangerouslyGetInternalSet_unstable()
            });
            requestNavigation({
              ...request,
              type: treeDataTypes.Click
            });
          });
        }
        case treeDataTypes.ArrowRight: {
          if (request.itemType === "leaf") {
            return;
          }
          const open = openItems.has(request.value);
          if (!open) {
            return requestOpenChange({
              ...request,
              open: true,
              openItems: openItems.dangerouslyGetInternalSet_unstable()
            });
          }
          return requestNavigation(request);
        }
        case treeDataTypes.Enter: {
          const open = openItems.has(request.value);
          return requestOpenChange({
            ...request,
            open: request.itemType === "branch" && !open,
            openItems: openItems.dangerouslyGetInternalSet_unstable()
          });
        }
        case treeDataTypes.ArrowLeft: {
          const open = openItems.has(request.value);
          if (open && request.itemType === "branch") {
            return requestOpenChange({
              ...request,
              open: false,
              type: treeDataTypes.ArrowLeft,
              openItems: openItems.dangerouslyGetInternalSet_unstable()
            });
          }
          return requestNavigation({
            ...request,
            type: treeDataTypes.ArrowLeft
          });
        }
        case treeDataTypes.End:
        case treeDataTypes.Home:
        case treeDataTypes.ArrowUp:
        case treeDataTypes.ArrowDown:
        case treeDataTypes.TypeAhead:
          return requestNavigation({
            ...request,
            target: request.event.currentTarget
          });
        case treeDataTypes.Change: {
          return requestCheckedChange({
            ...request,
            selectionMode,
            checkedItems: checkedItems.dangerouslyGetInternalMap_unstable()
          });
        }
      }
    });
    return {
      components: {
        root: "div"
      },
      selectionMode,
      open: true,
      appearance,
      size: size3,
      level: 1,
      openItems,
      checkedItems,
      requestTreeResponse,
      root: slot_exports.always(getNativeElementProps("div", {
        ref,
        role: "tree",
        "aria-multiselectable": selectionMode === "multiselect" ? true : void 0,
        ...props
      }), {
        elementType: "div"
      })
    };
  }
  function warnIfNoProperPropsRootTree(props) {
    if (true) {
      if (!props["aria-label"] && !props["aria-labelledby"]) {
        console.warn(`@fluentui/react-tree [useRootTree]:
Tree must have either a \`aria-label\` or \`aria-labelledby\` property defined`);
      }
    }
  }

  // ../node_modules/@fluentui/react-tree/lib/hooks/useSubtree.js
  var React163 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tree/lib/contexts/treeItemContext.js
  var React162 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tree/lib/utils/createHeadlessTree.js
  var headlessTreeRootId = "__fuiHeadlessTreeRoot";

  // ../node_modules/@fluentui/react-tree/lib/contexts/treeItemContext.js
  var defaultContextValue4 = {
    value: headlessTreeRootId,
    selectionRef: React162.createRef(),
    layoutRef: React162.createRef(),
    subtreeRef: React162.createRef(),
    actionsRef: React162.createRef(),
    expandIconRef: React162.createRef(),
    isActionsVisible: false,
    isAsideVisible: false,
    itemType: "leaf",
    open: false,
    checked: false
  };
  var TreeItemContext = createContext14(void 0);
  var { Provider: TreeItemProvider } = TreeItemContext;
  var useTreeItemContext_unstable = (selector) => useContextSelector(TreeItemContext, (ctx = defaultContextValue4) => selector(ctx));

  // ../node_modules/@fluentui/react-tree/lib/hooks/useSubtree.js
  function useSubtree(props, ref) {
    const contextAppearance = useTreeContext_unstable((ctx) => ctx.appearance);
    const contextSize = useTreeContext_unstable((ctx) => ctx.size);
    const subtreeRef = useTreeItemContext_unstable((ctx) => ctx.subtreeRef);
    const { appearance = contextAppearance !== null && contextAppearance !== void 0 ? contextAppearance : "subtle", size: size3 = contextSize !== null && contextSize !== void 0 ? contextSize : "medium" } = props;
    const parentLevel = useTreeContext_unstable((ctx) => ctx.level);
    const selectionMode = useTreeContext_unstable((ctx) => ctx.selectionMode);
    const openItems = useTreeContext_unstable((ctx) => ctx.openItems);
    const checkedItems = useTreeContext_unstable((ctx) => ctx.checkedItems);
    const requestTreeResponse = useTreeContext_unstable((ctx) => ctx.requestTreeResponse);
    const open = useTreeItemContext_unstable((ctx) => ctx.open);
    return {
      open,
      components: {
        root: "div"
      },
      appearance,
      size: size3,
      selectionMode,
      level: parentLevel + 1,
      root: slot_exports.always(getNativeElementProps("div", {
        ref: useMergedRefs(ref, subtreeRef),
        role: "group",
        ...props
      }), {
        elementType: "div"
      }),
      openItems,
      checkedItems,
      requestTreeResponse
    };
  }

  // ../node_modules/@fluentui/react-tree/lib/utils/createHTMLElementWalker.js
  function createHTMLElementWalker(root3, filter3 = () => NodeFilter.FILTER_ACCEPT) {
    let temporaryFilter;
    const treeWalker = document.createTreeWalker(root3, NodeFilter.SHOW_ELEMENT, {
      acceptNode(node5) {
        var _temporaryFilter;
        if (!isHTMLElement(node5)) {
          return NodeFilter.FILTER_REJECT;
        }
        const filterResult = filter3(node5);
        var _temporaryFilter1;
        return filterResult === NodeFilter.FILTER_ACCEPT ? (_temporaryFilter1 = (_temporaryFilter = temporaryFilter) === null || _temporaryFilter === void 0 ? void 0 : _temporaryFilter(node5)) !== null && _temporaryFilter1 !== void 0 ? _temporaryFilter1 : filterResult : filterResult;
      }
    });
    return {
      get root() {
        return treeWalker.root;
      },
      get currentElement() {
        return treeWalker.currentNode;
      },
      set currentElement(element2) {
        treeWalker.currentNode = element2;
      },
      firstChild: (localFilter) => {
        temporaryFilter = localFilter;
        const result = treeWalker.firstChild();
        temporaryFilter = void 0;
        return result;
      },
      lastChild: (localFilter) => {
        temporaryFilter = localFilter;
        const result = treeWalker.lastChild();
        temporaryFilter = void 0;
        return result;
      },
      nextElement: (localFilter) => {
        temporaryFilter = localFilter;
        const result = treeWalker.nextNode();
        temporaryFilter = void 0;
        return result;
      },
      nextSibling: (localFilter) => {
        temporaryFilter = localFilter;
        const result = treeWalker.nextSibling();
        temporaryFilter = void 0;
        return result;
      },
      parentElement: (localFilter) => {
        temporaryFilter = localFilter;
        const result = treeWalker.parentNode();
        temporaryFilter = void 0;
        return result;
      },
      previousElement: (localFilter) => {
        temporaryFilter = localFilter;
        const result = treeWalker.previousNode();
        temporaryFilter = void 0;
        return result;
      },
      previousSibling: (localFilter) => {
        temporaryFilter = localFilter;
        const result = treeWalker.previousSibling();
        temporaryFilter = void 0;
        return result;
      }
    };
  }

  // ../node_modules/@fluentui/react-tree/lib/utils/treeItemFilter.js
  var treeItemFilter = (element2) => {
    return element2.getAttribute("role") === "treeitem" ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
  };

  // ../node_modules/@fluentui/react-tree/lib/utils/nextTypeAheadElement.js
  function nextTypeAheadElement(treeWalker, key) {
    const keyToLowerCase = key.toLowerCase();
    const typeAheadFilter = (element2) => {
      var _element_textContent;
      return ((_element_textContent = element2.textContent) === null || _element_textContent === void 0 ? void 0 : _element_textContent.trim().charAt(0).toLowerCase()) === keyToLowerCase ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    };
    let nextElement = treeWalker.nextElement(typeAheadFilter);
    if (!nextElement) {
      treeWalker.currentElement = treeWalker.root;
      nextElement = treeWalker.nextElement(typeAheadFilter);
    }
    return nextElement;
  }

  // ../node_modules/@fluentui/react-tree/lib/hooks/useRovingTabIndexes.js
  var React164 = __toESM(require_react());
  function useRovingTabIndex(filter3) {
    const currentElementRef = React164.useRef();
    const initialize = React164.useCallback((walker) => {
      walker.currentElement = walker.root;
      let tabbableChild = walker.firstChild((element2) => element2.tabIndex === 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);
      walker.currentElement = walker.root;
      tabbableChild !== null && tabbableChild !== void 0 ? tabbableChild : tabbableChild = walker.firstChild();
      if (!tabbableChild) {
        return;
      }
      tabbableChild.tabIndex = 0;
      currentElementRef.current = tabbableChild;
      let nextElement = null;
      while ((nextElement = walker.nextElement()) && nextElement !== tabbableChild) {
        nextElement.tabIndex = -1;
      }
    }, []);
    const rove = React164.useCallback((nextElement) => {
      if (!currentElementRef.current) {
        return;
      }
      currentElementRef.current.tabIndex = -1;
      nextElement.tabIndex = 0;
      nextElement.focus();
      currentElementRef.current = nextElement;
    }, []);
    return {
      rove,
      initialize
    };
  }

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/useTreeNavigation.js
  function useTreeNavigation() {
    const { rove, initialize } = useRovingTabIndex(treeItemFilter);
    const getNextElement2 = (data, treeItemWalker) => {
      switch (data.type) {
        case treeDataTypes.Click:
          return data.target;
        case treeDataTypes.TypeAhead:
          treeItemWalker.currentElement = data.target;
          return nextTypeAheadElement(treeItemWalker, data.event.key);
        case treeDataTypes.ArrowLeft:
          treeItemWalker.currentElement = data.target;
          return treeItemWalker.parentElement();
        case treeDataTypes.ArrowRight:
          treeItemWalker.currentElement = data.target;
          return treeItemWalker.firstChild();
        case treeDataTypes.End:
          treeItemWalker.currentElement = treeItemWalker.root;
          return lastChildRecursive(treeItemWalker);
        case treeDataTypes.Home:
          treeItemWalker.currentElement = treeItemWalker.root;
          return treeItemWalker.firstChild();
        case treeDataTypes.ArrowDown:
          treeItemWalker.currentElement = data.target;
          return treeItemWalker.nextElement();
        case treeDataTypes.ArrowUp:
          treeItemWalker.currentElement = data.target;
          return treeItemWalker.previousElement();
      }
    };
    function navigate(data, walker) {
      const nextElement = getNextElement2(data, walker);
      if (nextElement) {
        rove(nextElement);
      }
    }
    return {
      navigate,
      initialize
    };
  }
  function lastChildRecursive(walker) {
    let lastElement = null;
    let nextElement = null;
    while (nextElement = walker.lastChild()) {
      lastElement = nextElement;
    }
    return lastElement;
  }

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/useTree.js
  var useTree_unstable = (props, ref) => {
    const isSubtree = useTreeContext_unstable((ctx) => ctx.level > 0);
    return isSubtree ? useSubtree(props, ref) : useNestedRootTree(props, ref);
  };
  function useNestedRootTree(props, ref) {
    const [openItems, setOpenItems] = useControllableOpenItems(props);
    const checkedItems = useNestedCheckedItems(props);
    const { navigate, initialize } = useTreeNavigation();
    const walkerRef = React165.useRef();
    const initializeWalker = React165.useCallback((root3) => {
      if (root3) {
        walkerRef.current = createHTMLElementWalker(root3, treeItemFilter);
        initialize(walkerRef.current);
      }
    }, [
      initialize
    ]);
    const handleOpenChange = useEventCallback((event, data) => {
      var _props_onOpenChange, _props;
      const nextOpenItems = createNextOpenItems(data, openItems);
      (_props_onOpenChange = (_props = props).onOpenChange) === null || _props_onOpenChange === void 0 ? void 0 : _props_onOpenChange.call(_props, event, {
        ...data,
        openItems: nextOpenItems.dangerouslyGetInternalSet_unstable()
      });
      setOpenItems(nextOpenItems);
    });
    const handleCheckedChange = useEventCallback((event, data) => {
      if (walkerRef.current) {
        var _props_onCheckedChange, _props;
        const nextCheckedItems = createNextNestedCheckedItems(data, checkedItems);
        (_props_onCheckedChange = (_props = props).onCheckedChange) === null || _props_onCheckedChange === void 0 ? void 0 : _props_onCheckedChange.call(_props, event, {
          ...data,
          checkedItems: nextCheckedItems.dangerouslyGetInternalMap_unstable()
        });
      }
    });
    const handleNavigation = useEventCallback((event, data) => {
      var _props_onNavigation, _props;
      (_props_onNavigation = (_props = props).onNavigation) === null || _props_onNavigation === void 0 ? void 0 : _props_onNavigation.call(_props, event, data);
      if (walkerRef.current) {
        navigate(data, walkerRef.current);
      }
    });
    return useRootTree({
      ...props,
      openItems,
      checkedItems,
      onOpenChange: handleOpenChange,
      onNavigation: handleNavigation,
      onCheckedChange: handleCheckedChange
    }, useMergedRefs(ref, initializeWalker));
  }

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/useTreeContextValues.js
  function useTreeContextValues_unstable(state) {
    const { openItems, checkedItems, selectionMode, level, appearance, size: size3, requestTreeResponse } = state;
    const tree = {
      size: size3,
      level,
      openItems,
      appearance,
      checkedItems,
      selectionMode,
      requestTreeResponse
    };
    return {
      tree
    };
  }

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/useTreeStyles.styles.js
  var treeClassNames = {
    root: "fui-Tree"
  };
  var useStyles25 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Beiy3e4: "f1vx9l62",
      Belr9w4: "f1j0q4x9"
    },
    subtree: {
      z8tnut: "fclwglc"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f1vx9l62{flex-direction:column;}", ".f1j0q4x9{row-gap:var(--spacingVerticalXXS);}", ".fclwglc{padding-top:var(--spacingVerticalXXS);}"]
  });
  var useTreeStyles_unstable = (state) => {
    const styles4 = useStyles25();
    const isSubTree = state.level > 1;
    state.root.className = mergeClasses(treeClassNames.root, styles4.root, isSubTree && styles4.subtree, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/renderTree.js
  var renderTree_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(TreeProvider, {
      value: contextValues.tree,
      children: state.open && /* @__PURE__ */ jsx(state.root, {
        children: state.root.children
      })
    });
  };

  // ../node_modules/@fluentui/react-tree/lib/components/Tree/Tree.js
  var Tree = /* @__PURE__ */ React166.forwardRef((props, ref) => {
    const state = useTree_unstable(props, ref);
    const contextValues = useTreeContextValues_unstable(state);
    useTreeStyles_unstable(state);
    return renderTree_unstable(state, contextValues);
  });
  Tree.displayName = "Tree";

  // ../node_modules/@fluentui/react-tree/lib/utils/getTreeItemValueFromElement.js
  var dataTreeItemValueAttrName = "data-fui-tree-item-value";

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItem/TreeItem.js
  var React168 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItem/useTreeItem.js
  var React167 = __toESM(require_react());
  var ReactDOM3 = __toESM(require_react_dom());
  function useTreeItem_unstable(props, ref) {
    var _props_value;
    const requestTreeResponse = useTreeContext_unstable((ctx) => ctx.requestTreeResponse);
    const contextLevel = useTreeContext_unstable((ctx) => ctx.level);
    const value = useId2("fuiTreeItemValue-", (_props_value = props.value) === null || _props_value === void 0 ? void 0 : _props_value.toString());
    const { onClick, onKeyDown, as = "div", itemType = "leaf", "aria-level": level = contextLevel, ...rest } = props;
    const [isActionsVisible, setActionsVisible] = React167.useState(false);
    const [isAsideVisible, setAsideVisible] = React167.useState(true);
    const handleActionsRef = React167.useCallback((actionsElement) => {
      setAsideVisible(actionsElement === null);
    }, []);
    const actionsRef = React167.useRef(null);
    const expandIconRef = React167.useRef(null);
    const layoutRef = React167.useRef(null);
    const subtreeRef = React167.useRef(null);
    const selectionRef = React167.useRef(null);
    var _props_open;
    const open = useTreeContext_unstable((ctx) => (_props_open = props.open) !== null && _props_open !== void 0 ? _props_open : ctx.openItems.has(value));
    const selectionMode = useTreeContext_unstable((ctx) => ctx.selectionMode);
    var _ctx_checkedItems_get;
    const checked = useTreeContext_unstable((ctx) => (_ctx_checkedItems_get = ctx.checkedItems.get(value)) !== null && _ctx_checkedItems_get !== void 0 ? _ctx_checkedItems_get : false);
    const handleClick = useEventCallback((event) => {
      var _onClick;
      (_onClick = onClick) === null || _onClick === void 0 ? void 0 : _onClick(event);
      if (event.isDefaultPrevented()) {
        return;
      }
      const isEventFromActions = actionsRef.current && elementContains(actionsRef.current, event.target);
      if (isEventFromActions) {
        return;
      }
      const isEventFromSubtree = subtreeRef.current && elementContains(subtreeRef.current, event.target);
      if (isEventFromSubtree) {
        return;
      }
      const isEventFromSelection = selectionRef.current && elementContains(selectionRef.current, event.target);
      if (isEventFromSelection) {
        return;
      }
      const isEventFromExpandIcon = expandIconRef.current && elementContains(expandIconRef.current, event.target);
      ReactDOM3.unstable_batchedUpdates(() => {
        var _props_onOpenChange, _props;
        const data = {
          event,
          value,
          open: !open,
          target: event.currentTarget,
          type: isEventFromExpandIcon ? treeDataTypes.ExpandIconClick : treeDataTypes.Click
        };
        (_props_onOpenChange = (_props = props).onOpenChange) === null || _props_onOpenChange === void 0 ? void 0 : _props_onOpenChange.call(_props, event, data);
        requestTreeResponse({
          ...data,
          itemType
        });
      });
    });
    const handleKeyDown = useEventCallback((event) => {
      var _onKeyDown2;
      (_onKeyDown2 = onKeyDown) === null || _onKeyDown2 === void 0 ? void 0 : _onKeyDown2(event);
      if (event.isDefaultPrevented() || event.currentTarget !== event.target) {
        return;
      }
      switch (event.key) {
        case Space:
          if (selectionMode !== "none") {
            var _selectionRef_current;
            (_selectionRef_current = selectionRef.current) === null || _selectionRef_current === void 0 ? void 0 : _selectionRef_current.click();
            event.preventDefault();
          }
          return;
        case treeDataTypes.Enter: {
          var _props_onOpenChange, _props;
          const data2 = {
            value,
            event,
            open: !open,
            type: event.key,
            target: event.currentTarget
          };
          (_props_onOpenChange = (_props = props).onOpenChange) === null || _props_onOpenChange === void 0 ? void 0 : _props_onOpenChange.call(_props, event, data2);
          return requestTreeResponse({
            ...data2,
            itemType
          });
        }
        case treeDataTypes.End:
        case treeDataTypes.Home:
        case treeDataTypes.ArrowUp:
        case treeDataTypes.ArrowDown:
          return requestTreeResponse({
            event,
            value,
            itemType,
            type: event.key,
            target: event.currentTarget
          });
        case treeDataTypes.ArrowLeft: {
          if (level === 1 && !open) {
            return;
          }
          const data2 = {
            value,
            event,
            open: !open,
            type: event.key,
            target: event.currentTarget
          };
          if (open) {
            var _props_onOpenChange1, _props1;
            (_props_onOpenChange1 = (_props1 = props).onOpenChange) === null || _props_onOpenChange1 === void 0 ? void 0 : _props_onOpenChange1.call(_props1, event, data2);
          }
          return requestTreeResponse({
            ...data2,
            itemType
          });
        }
        case treeDataTypes.ArrowRight:
          if (itemType === "leaf") {
            return;
          }
          const data = {
            value,
            event,
            open: !open,
            type: event.key,
            target: event.currentTarget
          };
          if (!open) {
            var _props_onOpenChange2, _props2;
            (_props_onOpenChange2 = (_props2 = props).onOpenChange) === null || _props_onOpenChange2 === void 0 ? void 0 : _props_onOpenChange2.call(_props2, event, data);
          }
          return requestTreeResponse({
            ...data,
            itemType
          });
      }
      const isTypeAheadCharacter = event.key.length === 1 && event.key.match(/\w/) && !event.altKey && !event.ctrlKey && !event.metaKey;
      if (isTypeAheadCharacter) {
        requestTreeResponse({
          event,
          target: event.currentTarget,
          value,
          itemType,
          type: treeDataTypes.TypeAhead
        });
      }
    });
    const handleActionsVisible = useEventCallback((event) => {
      const isTargetFromSubtree = Boolean(subtreeRef.current && elementContains(subtreeRef.current, event.target));
      if (!isTargetFromSubtree) {
        setActionsVisible(true);
      }
    });
    const handleActionsInvisible = useEventCallback((event) => {
      const isTargetFromSubtree = Boolean(subtreeRef.current && elementContains(subtreeRef.current, event.target));
      const isRelatedTargetFromActions = Boolean(actionsRef.current && elementContains(actionsRef.current, event.relatedTarget));
      if (isRelatedTargetFromActions) {
        return setActionsVisible(true);
      }
      if (!isTargetFromSubtree) {
        return setActionsVisible(false);
      }
    });
    const handleChange = useEventCallback((event) => {
      if (event.isDefaultPrevented()) {
        return;
      }
      const isEventFromSubtree = subtreeRef.current && elementContains(subtreeRef.current, event.target);
      if (isEventFromSubtree) {
        return;
      }
      requestTreeResponse({
        event,
        value,
        itemType,
        type: "Change",
        target: event.currentTarget,
        checked: checked === "mixed" ? true : !checked
      });
    });
    return {
      value,
      open,
      checked,
      subtreeRef,
      layoutRef,
      selectionRef,
      expandIconRef,
      actionsRef: useMergedRefs(handleActionsRef, actionsRef),
      itemType,
      level,
      components: {
        root: "div"
      },
      isAsideVisible,
      isActionsVisible,
      root: slot_exports.always(getNativeElementProps(as, {
        tabIndex: -1,
        [dataTreeItemValueAttrName]: value,
        ...rest,
        ref,
        role: "treeitem",
        "aria-level": level,
        "aria-checked": selectionMode === "multiselect" ? checked : void 0,
        // aria-selected is required according to WAI-ARIA spec
        // https://www.w3.org/TR/wai-aria-1.1/#treeitem
        // Casting: when selectionMode is 'single', checked is a boolean
        "aria-selected": selectionMode === "single" ? checked : "false",
        "aria-expanded": itemType === "branch" ? open : void 0,
        onClick: handleClick,
        onKeyDown: handleKeyDown,
        onMouseOver: handleActionsVisible,
        onFocus: handleActionsVisible,
        onMouseOut: handleActionsInvisible,
        onBlur: handleActionsInvisible,
        onChange: handleChange
      }), {
        elementType: "div"
      })
    };
  }

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItem/renderTreeItem.js
  var renderTreeItem_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {
      children: /* @__PURE__ */ jsx(TreeItemProvider, {
        value: contextValues.treeItem,
        children: state.root.children
      })
    });
  };

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItem/useTreeItemStyles.styles.js
  var treeItemClassNames = {
    root: "fui-TreeItem"
  };
  var useRootStyles9 = /* @__PURE__ */ __styles2({
    level1: {
      iytv0q: "f10bgyvd"
    },
    level2: {
      iytv0q: "f1h0rod3"
    },
    level3: {
      iytv0q: "fgoqafk"
    },
    level4: {
      iytv0q: "f75dvuh"
    },
    level5: {
      iytv0q: "fqk7yw6"
    },
    level6: {
      iytv0q: "f1r3z17b"
    },
    level7: {
      iytv0q: "f1hrpd1h"
    },
    level8: {
      iytv0q: "f1iy65d0"
    },
    level9: {
      iytv0q: "ftg42e5"
    },
    level10: {
      iytv0q: "fyat3t"
    },
    base: {
      qhf8xq: "f10pi13n",
      Bceei9c: "f1k6fduh",
      mc9l5x: "f22iagw",
      Beiy3e4: "f1vx9l62",
      B7ck84d: "f1ewtqcl",
      De3pzq: "fhovq9v",
      sj55zd: "fkfq4zb",
      z189sj: ["flk2ux3", "fkl3uby"]
    },
    focusIndicator: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "frrh606",
      clg4pj: ["f1v5zibi", "fo2hd23"],
      hgwjuy: "ful5kiu",
      Bonggc9: ["fo2hd23", "f1v5zibi"],
      B1tsrr9: ["f1jqcqds", "ftffrms"],
      Dah5zi: ["ftffrms", "f1jqcqds"],
      Bkh64rk: ["f2e7qr6", "fsr1zz6"],
      qqdqy8: ["fsr1zz6", "f2e7qr6"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "f57olzd",
      Bule8hv: ["f4stah7", "fs1por5"],
      Bjwuhne: "f480a47",
      Ghsupd: ["fs1por5", "f4stah7"]
    }
  }, {
    d: [".f10bgyvd{--fluent-TreeItem--level:1;}", ".f1h0rod3{--fluent-TreeItem--level:2;}", ".fgoqafk{--fluent-TreeItem--level:3;}", ".f75dvuh{--fluent-TreeItem--level:4;}", ".fqk7yw6{--fluent-TreeItem--level:5;}", ".f1r3z17b{--fluent-TreeItem--level:6;}", ".f1hrpd1h{--fluent-TreeItem--level:7;}", ".f1iy65d0{--fluent-TreeItem--level:8;}", ".ftg42e5{--fluent-TreeItem--level:9;}", ".fyat3t{--fluent-TreeItem--level:10;}", ".f10pi13n{position:relative;}", ".f1k6fduh{cursor:pointer;}", ".f22iagw{display:flex;}", ".f1vx9l62{flex-direction:column;}", ".f1ewtqcl{box-sizing:border-box;}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".flk2ux3{padding-right:var(--spacingHorizontalNone);}", ".fkl3uby{padding-left:var(--spacingHorizontalNone);}", ".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".frrh606[data-fui-focus-visible]::after{border-top-width:2px;}", ".f1v5zibi[data-fui-focus-visible]::after{border-right-width:2px;}", ".fo2hd23[data-fui-focus-visible]::after{border-left-width:2px;}", ".ful5kiu[data-fui-focus-visible]::after{border-bottom-width:2px;}", ".f1jqcqds[data-fui-focus-visible]::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".ftffrms[data-fui-focus-visible]::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f2e7qr6[data-fui-focus-visible]::after{border-top-right-radius:var(--borderRadiusMedium);}", ".fsr1zz6[data-fui-focus-visible]::after{border-top-left-radius:var(--borderRadiusMedium);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f57olzd[data-fui-focus-visible]::after{top:calc(2px * -1);}", ".f4stah7[data-fui-focus-visible]::after{right:calc(2px * -1);}", ".fs1por5[data-fui-focus-visible]::after{left:calc(2px * -1);}", ".f480a47[data-fui-focus-visible]::after{bottom:calc(2px * -1);}"],
    f: [".ftqa4ok:focus{outline-style:none;}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"]
  });
  var useTreeItemStyles_unstable = (state) => {
    const rootStyles = useRootStyles9();
    const {
      level
    } = state;
    state.root.className = mergeClasses(treeItemClassNames.root, isStaticallyDefinedLevel(level) && rootStyles[`level${level}`], rootStyles.base, rootStyles.focusIndicator, state.root.className);
    return state;
  };
  function isStaticallyDefinedLevel(level) {
    return level >= 1 && level <= 10;
  }

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItem/useTreeItemContextValues.js
  function useTreeItemContextValues_unstable(state) {
    const { value, itemType, layoutRef, subtreeRef, open, expandIconRef, actionsRef, isActionsVisible, isAsideVisible, selectionRef, checked } = state;
    const treeItem = {
      value,
      checked,
      itemType,
      layoutRef,
      subtreeRef,
      open,
      selectionRef,
      isActionsVisible,
      isAsideVisible,
      actionsRef,
      expandIconRef
    };
    return {
      treeItem
    };
  }

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItem/TreeItem.js
  var TreeItem = /* @__PURE__ */ React168.forwardRef((props, ref) => {
    const state = useTreeItem_unstable(props, ref);
    useTreeItemStyles_unstable(state);
    const contextValues = useTreeItemContextValues_unstable(state);
    return renderTreeItem_unstable(state, contextValues);
  });
  TreeItem.displayName = "TreeItem";

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItemLayout/TreeItemLayout.js
  var React171 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItemLayout/useTreeItemLayout.js
  var React170 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItemChevron.js
  var React169 = __toESM(require_react());
  var TreeItemChevron = /* @__PURE__ */ React169.memo(() => {
    const open = useTreeItemContext_unstable((ctx) => ctx.open);
    const { dir } = useFluent();
    const expandIconRotation = open ? 90 : dir !== "rtl" ? 0 : 180;
    return /* @__PURE__ */ React169.createElement(ChevronRight12Regular, {
      style: expandIconInlineStyles[expandIconRotation]
    });
  });
  TreeItemChevron.displayName = "TreeItemChevron";
  var expandIconInlineStyles = {
    90: {
      transform: `rotate(90deg)`
    },
    0: {
      transform: `rotate(0deg)`
    },
    180: {
      transform: `rotate(180deg)`
    }
  };

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItemLayout/useTreeItemLayout.js
  var useTreeItemLayout_unstable = (props, ref) => {
    var _expandIcon, _actions;
    const { main, iconAfter, iconBefore, as = "span" } = props;
    const layoutRef = useTreeItemContext_unstable((ctx) => ctx.layoutRef);
    const selectionMode = useTreeContext_unstable((ctx) => ctx.selectionMode);
    const [isActionsVisibleExternal, actionsShorthand] = isResolvedShorthand(props.actions) ? [
      props.actions.visible,
      {
        ...props.actions,
        visible: void 0
      }
    ] : [
      void 0,
      props.actions
    ];
    const isActionsVisible = useTreeItemContext_unstable((ctx) => ctx.isActionsVisible) || isActionsVisibleExternal;
    const isAsideVisible = useTreeItemContext_unstable((ctx) => ctx.isAsideVisible);
    const selectionRef = useTreeItemContext_unstable((ctx) => ctx.selectionRef);
    const expandIconRef = useTreeItemContext_unstable((ctx) => ctx.expandIconRef);
    const actionsRef = useTreeItemContext_unstable((ctx) => ctx.actionsRef);
    const checked = useTreeItemContext_unstable((ctx) => ctx.checked);
    const isBranch = useTreeItemContext_unstable((ctx) => ctx.itemType === "branch");
    const expandIcon = slot_exports.optional(props.expandIcon, {
      renderByDefault: isBranch,
      defaultProps: {
        children: /* @__PURE__ */ React170.createElement(TreeItemChevron, null),
        "aria-hidden": true
      },
      elementType: "div"
    });
    const expandIconRefs = useMergedRefs((_expandIcon = expandIcon) === null || _expandIcon === void 0 ? void 0 : _expandIcon.ref, expandIconRef);
    if (expandIcon) {
      expandIcon.ref = expandIconRefs;
    }
    const arrowNavigationProps = useArrowNavigationGroup({
      circular: true,
      axis: "horizontal"
    });
    const actions = isActionsVisible ? slot_exports.optional(actionsShorthand, {
      defaultProps: {
        ...arrowNavigationProps,
        role: "toolbar"
      },
      elementType: "div"
    }) : void 0;
    const actionsRefs = useMergedRefs((_actions = actions) === null || _actions === void 0 ? void 0 : _actions.ref, actionsRef);
    if (actions) {
      actions.ref = actionsRefs;
    }
    return {
      components: {
        root: "div",
        expandIcon: "div",
        iconBefore: "div",
        main: "div",
        iconAfter: "div",
        actions: "div",
        aside: "div",
        // Casting here to a union between checkbox and radio
        selector: selectionMode === "multiselect" ? Checkbox : Radio
      },
      buttonContextValue: {
        size: "small"
      },
      root: slot_exports.always(getNativeElementProps(as, {
        ...props,
        ref: useMergedRefs(ref, layoutRef)
      }), {
        elementType: "div"
      }),
      iconBefore: slot_exports.optional(iconBefore, {
        defaultProps: {
          "aria-hidden": true
        },
        elementType: "div"
      }),
      main: slot_exports.always(main, {
        elementType: "div"
      }),
      iconAfter: slot_exports.optional(iconAfter, {
        defaultProps: {
          "aria-hidden": true
        },
        elementType: "div"
      }),
      aside: isAsideVisible ? slot_exports.optional(props.aside, {
        defaultProps: {
          "aria-hidden": true
        },
        elementType: "div"
      }) : void 0,
      actions,
      expandIcon,
      selector: slot_exports.optional(props.selector, {
        renderByDefault: selectionMode !== "none",
        defaultProps: {
          checked,
          tabIndex: -1,
          "aria-hidden": true,
          ref: selectionRef
        },
        elementType: selectionMode === "multiselect" ? Checkbox : Radio
      })
    };
  };

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItemLayout/renderTreeItemLayout.js
  var renderTreeItemLayout_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.expandIcon && /* @__PURE__ */ jsx(state.expandIcon, {}),
        state.selector && /* @__PURE__ */ jsx(state.selector, {}),
        state.iconBefore && /* @__PURE__ */ jsx(state.iconBefore, {}),
        /* @__PURE__ */ jsx(state.main, {
          children: state.root.children
        }),
        state.iconAfter && /* @__PURE__ */ jsx(state.iconAfter, {}),
        /* @__PURE__ */ jsxs(ButtonContextProvider, {
          value: state.buttonContextValue,
          children: [
            state.actions && /* @__PURE__ */ jsx(state.actions, {}),
            state.aside && /* @__PURE__ */ jsx(state.aside, {})
          ]
        })
      ]
    });
  };

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItemLayout/useTreeItemLayoutStyles.styles.js
  var treeItemLayoutClassNames = {
    root: "fui-TreeItemLayout",
    iconBefore: "fui-TreeItemLayout__iconBefore",
    main: "fui-TreeItemLayout__main",
    iconAfter: "fui-TreeItemLayout__iconAfter",
    expandIcon: "fui-TreeItemLayout__expandIcon",
    aside: "fui-TreeItemLayout__aside",
    actions: "fui-TreeItemLayout__actions",
    selector: "fui-TreeItemLayout__selector"
  };
  var useRootStyles10 = /* @__PURE__ */ __styles2({
    base: {
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59",
      sshi5w: "f1nxs5xn",
      B7ck84d: "f1ewtqcl",
      Ijaq50: "f15ws6j",
      Br312pm: "f135tdbu",
      nk6f5a: "f2e2169",
      Bw0ie65: "f4rqp6x",
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      lj723h: "flvvhsy",
      ecr2s2: "f1wfn5kd",
      qya0sb: "f1ih54s9",
      Bi91k9c: "fnwyq0v",
      Jwef8y: "f1t94bn6",
      Becwuud: "f1jk1nfw"
    },
    leaf: {
      uwmqm3: ["f1k1erfc", "faevyjx"]
    },
    branch: {
      uwmqm3: ["fo100m9", "f6yw3pu"]
    },
    medium: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    },
    small: {
      sshi5w: "f1pha7fy",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    subtle: {},
    "subtle-alpha": {
      Jwef8y: "f146ro5n",
      ecr2s2: "fkam630"
    },
    transparent: {
      De3pzq: "f1c21dwh",
      Jwef8y: "fjxutwb",
      ecr2s2: "fophhak"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f122n59{align-items:center;}", ".f1nxs5xn{min-height:32px;}", ".f1ewtqcl{box-sizing:border-box;}", ".f15ws6j{grid-row-start:layout;}", ".f135tdbu{grid-column-start:layout;}", ".f2e2169{grid-row-end:layout;}", ".f4rqp6x{grid-column-end:layout;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".f1k1erfc{padding-left:calc(var(--fluent-TreeItem--level, 1) * var(--spacingHorizontalXXL));}", ".faevyjx{padding-right:calc(var(--fluent-TreeItem--level, 1) * var(--spacingHorizontalXXL));}", ".fo100m9{padding-left:calc((var(--fluent-TreeItem--level, 1) - 1) * var(--spacingHorizontalXXL));}", ".f6yw3pu{padding-right:calc((var(--fluent-TreeItem--level, 1) - 1) * var(--spacingHorizontalXXL));}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f1pha7fy{min-height:24px;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}"],
    a: [".flvvhsy:active{color:var(--colorNeutralForeground2Pressed);}", ".f1wfn5kd:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f1ih54s9:active .fui-TreeItemLayout__expandIcon{color:var(--colorNeutralForeground3Pressed);}", ".fkam630:active{background-color:var(--colorSubtleBackgroundLightAlphaPressed);}", ".fophhak:active{background-color:var(--colorTransparentBackgroundPressed);}"],
    h: [".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".f1jk1nfw:hover .fui-TreeItemLayout__expandIcon{color:var(--colorNeutralForeground3Hover);}", ".f146ro5n:hover{background-color:var(--colorSubtleBackgroundLightAlphaHover);}", ".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}"]
  });
  var useActionsStyles = /* @__PURE__ */ __styles2({
    base: {
      mc9l5x: "f22iagw",
      Frg6f3: ["fcgxt0o", "f1ujusj6"],
      qhf8xq: "f10pi13n",
      Bj3rh1h: "f19g0ac",
      Ijaq50: "fobksn0",
      Br312pm: "fmy5l6f",
      nk6f5a: "fzqypwc",
      Bw0ie65: "f1tmftl3",
      z8tnut: "f1g0x7ka",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"]
    }
  }, {
    d: [".f22iagw{display:flex;}", ".fcgxt0o{margin-left:auto;}", ".f1ujusj6{margin-right:auto;}", ".f10pi13n{position:relative;}", ".f19g0ac{z-index:1;}", ".fobksn0{grid-row-start:aside;}", ".fmy5l6f{grid-column-start:aside;}", ".fzqypwc{grid-row-end:aside;}", ".f1tmftl3{grid-column-end:aside;}", ".f1g0x7ka{padding-top:0;}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f1qch9an{padding-bottom:0;}"]
  });
  var useAsideStyles = /* @__PURE__ */ __styles2({
    base: {
      mc9l5x: "f22iagw",
      Frg6f3: ["fcgxt0o", "f1ujusj6"],
      Bt984gj: "f122n59",
      Bj3rh1h: "f11zp4z2",
      Ijaq50: "fobksn0",
      Br312pm: "fmy5l6f",
      nk6f5a: "fzqypwc",
      Bw0ie65: "f1tmftl3",
      z8tnut: "f1g0x7ka",
      z189sj: ["fw5db7e", "f1uw59to"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1uw59to", "fw5db7e"],
      i8kkvl: "f1ufnopg",
      Belr9w4: "f14sijuj"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".fcgxt0o{margin-left:auto;}", ".f1ujusj6{margin-right:auto;}", ".f122n59{align-items:center;}", ".f11zp4z2{z-index:0;}", ".fobksn0{grid-row-start:aside;}", ".fmy5l6f{grid-column-start:aside;}", ".fzqypwc{grid-row-end:aside;}", ".f1tmftl3{grid-column-end:aside;}", ".f1g0x7ka{padding-top:0;}", ".fw5db7e{padding-right:var(--spacingHorizontalM);}", ".f1uw59to{padding-left:var(--spacingHorizontalM);}", ".f1qch9an{padding-bottom:0;}", ".f1ufnopg{column-gap:var(--spacingHorizontalXS);}", ".f14sijuj{row-gap:var(--spacingHorizontalXS);}"]
  });
  var useExpandIconStyles = /* @__PURE__ */ __styles2({
    base: {
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59",
      Brf1p80: "f4d9j23",
      Bf4jedk: "f17fgpbq",
      B7ck84d: "f1ewtqcl",
      sj55zd: "f11d4kpn",
      Bh6795r: "f1jhi6b8",
      Bnnss6s: "fi64zpg",
      xawz: "f1rmlqtg",
      z8tnut: "f1ywm7hm",
      z189sj: ["fhxju0i", "f1cnd47f"],
      Byoj8tv: "f14wxoun",
      uwmqm3: ["f1cnd47f", "fhxju0i"]
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f122n59{align-items:center;}", ".f4d9j23{justify-content:center;}", ".f17fgpbq{min-width:24px;}", ".f1ewtqcl{box-sizing:border-box;}", ".f11d4kpn{color:var(--colorNeutralForeground3);}", ".f1jhi6b8{flex-grow:0;}", ".fi64zpg{flex-shrink:0;}", ".f1rmlqtg{flex-basis:auto;}", ".f1ywm7hm{padding-top:var(--spacingVerticalXS);}", ".fhxju0i{padding-right:0;}", ".f1cnd47f{padding-left:0;}", ".f14wxoun{padding-bottom:var(--spacingVerticalXS);}"]
  });
  var useMainStyles = /* @__PURE__ */ __styles2({
    base: {
      z8tnut: "f1g0x7ka",
      z189sj: ["ffczdla", "fgiv446"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["fgiv446", "ffczdla"]
    }
  }, {
    d: [".f1g0x7ka{padding-top:0;}", ".ffczdla{padding-right:var(--spacingHorizontalXXS);}", ".fgiv446{padding-left:var(--spacingHorizontalXXS);}", ".f1qch9an{padding-bottom:0;}"]
  });
  var useIconStyles5 = /* @__PURE__ */ __styles2({
    base: {
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59",
      sj55zd: "fkfq4zb",
      Bg96gwp: "f106mvju",
      Be2twd7: "f1pp30po"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f122n59{align-items:center;}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".f106mvju{line-height:var(--lineHeightBase500);}", ".f1pp30po{font-size:var(--fontSizeBase500);}"]
  });
  var useIconBeforeStyles = /* @__PURE__ */ __styles2({
    medium: {
      z189sj: ["f7x41pl", "fruq291"]
    },
    small: {
      z189sj: ["ffczdla", "fgiv446"]
    }
  }, {
    d: [".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".ffczdla{padding-right:var(--spacingHorizontalXXS);}", ".fgiv446{padding-left:var(--spacingHorizontalXXS);}"]
  });
  var useIconAfterStyles = /* @__PURE__ */ __styles2({
    medium: {
      uwmqm3: ["fruq291", "f7x41pl"]
    },
    small: {
      uwmqm3: ["fgiv446", "ffczdla"]
    }
  }, {
    d: [".fruq291{padding-left:var(--spacingHorizontalXS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fgiv446{padding-left:var(--spacingHorizontalXXS);}", ".ffczdla{padding-right:var(--spacingHorizontalXXS);}"]
  });
  var useTreeItemLayoutStyles_unstable = (state) => {
    const {
      main,
      iconAfter,
      iconBefore,
      expandIcon,
      root: root3,
      aside,
      actions,
      selector
    } = state;
    const rootStyles = useRootStyles10();
    const actionsStyles = useActionsStyles();
    const asideStyles = useAsideStyles();
    const mainStyles = useMainStyles();
    const expandIconStyles = useExpandIconStyles();
    const iconStyles = useIconStyles5();
    const iconBeforeStyles = useIconBeforeStyles();
    const iconAfterStyles = useIconAfterStyles();
    const size3 = useTreeContext_unstable((ctx) => ctx.size);
    const appearance = useTreeContext_unstable((ctx) => ctx.appearance);
    const itemType = useTreeItemContext_unstable((ctx) => ctx.itemType);
    root3.className = mergeClasses(treeItemLayoutClassNames.root, rootStyles.base, rootStyles[appearance], rootStyles[size3], rootStyles[itemType], root3.className);
    main.className = mergeClasses(treeItemLayoutClassNames.main, mainStyles.base, main.className);
    if (expandIcon) {
      expandIcon.className = mergeClasses(treeItemLayoutClassNames.expandIcon, expandIconStyles.base, expandIcon.className);
    }
    if (iconBefore) {
      iconBefore.className = mergeClasses(treeItemLayoutClassNames.iconBefore, iconStyles.base, iconBeforeStyles[size3], iconBefore.className);
    }
    if (iconAfter) {
      iconAfter.className = mergeClasses(treeItemLayoutClassNames.iconAfter, iconStyles.base, iconAfterStyles[size3], iconAfter.className);
    }
    if (actions) {
      actions.className = mergeClasses(treeItemLayoutClassNames.actions, actionsStyles.base, actions.className);
    }
    if (aside) {
      aside.className = mergeClasses(treeItemLayoutClassNames.aside, asideStyles.base, aside.className);
    }
    if (expandIcon) {
      expandIcon.className = mergeClasses(treeItemLayoutClassNames.expandIcon, expandIconStyles.base, expandIcon.className);
    }
    if (selector) {
      selector.className = mergeClasses(treeItemLayoutClassNames.selector, selector.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-tree/lib/components/TreeItemLayout/TreeItemLayout.js
  var TreeItemLayout = /* @__PURE__ */ React171.forwardRef((props, ref) => {
    const state = useTreeItemLayout_unstable(props, ref);
    useTreeItemLayoutStyles_unstable(state);
    return renderTreeItemLayout_unstable(state);
  });
  TreeItemLayout.displayName = "TreeItemLayout";

  // ../node_modules/react-hotkeys-hook/src/HotkeysProvider.tsx
  var import_react54 = __toESM(require_react());

  // ../node_modules/react-hotkeys-hook/src/BoundHotkeysProxyProvider.tsx
  var import_react53 = __toESM(require_react());
  var BoundHotkeysProxyProvider = (0, import_react53.createContext)(void 0);
  function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }) {
    return /* @__PURE__ */ React.createElement(BoundHotkeysProxyProvider.Provider, { value: { addHotkey, removeHotkey } }, children);
  }

  // ../node_modules/react-hotkeys-hook/src/deepEqual.ts
  function deepEqual(x2, y3) {
    return x2 && y3 && typeof x2 === "object" && typeof y3 === "object" ? Object.keys(x2).length === Object.keys(y3).length && //@ts-ignore
    Object.keys(x2).reduce((isEqual, key) => isEqual && deepEqual(x2[key], y3[key]), true) : x2 === y3;
  }

  // ../node_modules/react-hotkeys-hook/src/HotkeysProvider.tsx
  var HotkeysContext = (0, import_react54.createContext)({
    hotkeys: [],
    enabledScopes: [],
    // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
    toggleScope: () => {
    },
    enableScope: () => {
    },
    disableScope: () => {
    }
  });
  var HotkeysProvider = ({ initiallyActiveScopes = ["*"], children }) => {
    const [internalActiveScopes, setInternalActiveScopes] = (0, import_react54.useState)(
      initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ["*"]
    );
    const [boundHotkeys, setBoundHotkeys] = (0, import_react54.useState)([]);
    const enableScope = (0, import_react54.useCallback)((scope) => {
      setInternalActiveScopes((prev2) => {
        if (prev2.includes("*")) {
          return [scope];
        }
        return Array.from(/* @__PURE__ */ new Set([...prev2, scope]));
      });
    }, []);
    const disableScope = (0, import_react54.useCallback)((scope) => {
      setInternalActiveScopes((prev2) => {
        if (prev2.filter((s3) => s3 !== scope).length === 0) {
          return ["*"];
        } else {
          return prev2.filter((s3) => s3 !== scope);
        }
      });
    }, []);
    const toggleScope = (0, import_react54.useCallback)((scope) => {
      setInternalActiveScopes((prev2) => {
        if (prev2.includes(scope)) {
          if (prev2.filter((s3) => s3 !== scope).length === 0) {
            return ["*"];
          } else {
            return prev2.filter((s3) => s3 !== scope);
          }
        } else {
          if (prev2.includes("*")) {
            return [scope];
          }
          return Array.from(/* @__PURE__ */ new Set([...prev2, scope]));
        }
      });
    }, []);
    const addBoundHotkey = (0, import_react54.useCallback)((hotkey) => {
      setBoundHotkeys((prev2) => [...prev2, hotkey]);
    }, []);
    const removeBoundHotkey = (0, import_react54.useCallback)((hotkey) => {
      setBoundHotkeys((prev2) => prev2.filter((h4) => !deepEqual(h4, hotkey)));
    }, []);
    return /* @__PURE__ */ React.createElement(
      HotkeysContext.Provider,
      {
        value: { enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }
      },
      /* @__PURE__ */ React.createElement(BoundHotkeysProxyProviderProvider, { addHotkey: addBoundHotkey, removeHotkey: removeBoundHotkey }, children)
    );
  };

  // src/providers/ProjectProvider.tsx
  var import_react57 = __toESM(require_react(), 1);

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/assert.js
  function assert(condition, msg2) {
    if (!condition) {
      throw new Error(msg2);
    }
  }
  var FLOAT32_MAX = 34028234663852886e22;
  var FLOAT32_MIN = -34028234663852886e22;
  var UINT32_MAX = 4294967295;
  var INT32_MAX = 2147483647;
  var INT32_MIN = -2147483648;
  function assertInt32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid int 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
      throw new Error("invalid int 32: " + arg);
  }
  function assertUInt32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid uint 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
      throw new Error("invalid uint 32: " + arg);
  }
  function assertFloat32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid float 32: " + typeof arg);
    if (!Number.isFinite(arg))
      return;
    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)
      throw new Error("invalid float 32: " + arg);
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/enum.js
  var enumTypeSymbol = Symbol("@bufbuild/protobuf/enum-type");
  function getEnumType(enumObject) {
    const t4 = enumObject[enumTypeSymbol];
    assert(t4, "missing enum type on enum object");
    return t4;
  }
  function setEnumType(enumObject, typeName, values2, opt) {
    enumObject[enumTypeSymbol] = makeEnumType(typeName, values2.map((v3) => ({
      no: v3.no,
      name: v3.name,
      localName: enumObject[v3.no]
    })), opt);
  }
  function makeEnumType(typeName, values2, _opt) {
    const names = /* @__PURE__ */ Object.create(null);
    const numbers = /* @__PURE__ */ Object.create(null);
    const normalValues = [];
    for (const value of values2) {
      const n6 = normalizeEnumValue(value);
      normalValues.push(n6);
      names[value.name] = n6;
      numbers[value.no] = n6;
    }
    return {
      typeName,
      values: normalValues,
      // We do not surface options at this time
      // options: opt?.options ?? Object.create(null),
      findName(name) {
        return names[name];
      },
      findNumber(no) {
        return numbers[no];
      }
    };
  }
  function makeEnum(typeName, values2, opt) {
    const enumObject = {};
    for (const value of values2) {
      const n6 = normalizeEnumValue(value);
      enumObject[n6.localName] = n6.no;
      enumObject[n6.no] = n6.localName;
    }
    setEnumType(enumObject, typeName, values2, opt);
    return enumObject;
  }
  function normalizeEnumValue(value) {
    if ("localName" in value) {
      return value;
    }
    return Object.assign(Object.assign({}, value), { localName: value.name });
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/message.js
  var Message = class {
    /**
     * Compare with a message of the same type.
     */
    equals(other) {
      return this.getType().runtime.util.equals(this.getType(), this, other);
    }
    /**
     * Create a deep copy.
     */
    clone() {
      return this.getType().runtime.util.clone(this);
    }
    /**
     * Parse from binary data, merging fields.
     *
     * Repeated fields are appended. Map entries are added, overwriting
     * existing keys.
     *
     * If a message field is already present, it will be merged with the
     * new data.
     */
    fromBinary(bytes, options) {
      const type = this.getType(), format2 = type.runtime.bin, opt = format2.makeReadOptions(options);
      format2.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);
      return this;
    }
    /**
     * Parse a message from a JSON value.
     */
    fromJson(jsonValue, options) {
      const type = this.getType(), format2 = type.runtime.json, opt = format2.makeReadOptions(options);
      format2.readMessage(type, jsonValue, opt, this);
      return this;
    }
    /**
     * Parse a message from a JSON string.
     */
    fromJsonString(jsonString, options) {
      let json2;
      try {
        json2 = JSON.parse(jsonString);
      } catch (e3) {
        throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e3 instanceof Error ? e3.message : String(e3)}`);
      }
      return this.fromJson(json2, options);
    }
    /**
     * Serialize the message to binary data.
     */
    toBinary(options) {
      const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();
      bin.writeMessage(this, writer, opt);
      return writer.finish();
    }
    /**
     * Serialize the message to a JSON value, a JavaScript value that can be
     * passed to JSON.stringify().
     */
    toJson(options) {
      const type = this.getType(), json2 = type.runtime.json, opt = json2.makeWriteOptions(options);
      return json2.writeMessage(this, opt);
    }
    /**
     * Serialize the message to a JSON string.
     */
    toJsonString(options) {
      var _a5;
      const value = this.toJson(options);
      return JSON.stringify(value, null, (_a5 = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a5 !== void 0 ? _a5 : 0);
    }
    /**
     * Override for serialization behavior. This will be invoked when calling
     * JSON.stringify on this message (i.e. JSON.stringify(msg)).
     *
     * Note that this will not serialize google.protobuf.Any with a packed
     * message because the protobuf JSON format specifies that it needs to be
     * unpacked, and this is only possible with a type registry to look up the
     * message type.  As a result, attempting to serialize a message with this
     * type will throw an Error.
     *
     * This method is protected because you should not need to invoke it
     * directly -- instead use JSON.stringify or toJsonString for
     * stringified JSON.  Alternatively, if actual JSON is desired, you should
     * use toJson.
     */
    toJSON() {
      return this.toJson({
        emitDefaultValues: true
      });
    }
    /**
     * Retrieve the MessageType of this message - a singleton that represents
     * the protobuf message declaration and provides metadata for reflection-
     * based operations.
     */
    getType() {
      return Object.getPrototypeOf(this).constructor;
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js
  function makeMessageType(runtime, typeName, fields, opt) {
    var _a5;
    const localName = (_a5 = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a5 !== void 0 ? _a5 : typeName.substring(typeName.lastIndexOf(".") + 1);
    const type = {
      [localName]: function(data) {
        runtime.util.initFields(this);
        runtime.util.initPartial(data, this);
      }
    }[localName];
    Object.setPrototypeOf(type.prototype, new Message());
    Object.assign(type, {
      runtime,
      typeName,
      fields: runtime.util.newFieldList(fields),
      fromBinary(bytes, options) {
        return new type().fromBinary(bytes, options);
      },
      fromJson(jsonValue, options) {
        return new type().fromJson(jsonValue, options);
      },
      fromJsonString(jsonString, options) {
        return new type().fromJsonString(jsonString, options);
      },
      equals(a3, b4) {
        return runtime.util.equals(type, a3, b4);
      }
    });
    return type;
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js
  function makeProtoRuntime(syntax, json2, bin, util) {
    return {
      syntax,
      json: json2,
      bin,
      util,
      makeMessageType(typeName, fields, opt) {
        return makeMessageType(this, typeName, fields, opt);
      },
      makeEnum,
      makeEnumType,
      getEnumType
    };
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/field.js
  var ScalarType;
  (function(ScalarType2) {
    ScalarType2[ScalarType2["DOUBLE"] = 1] = "DOUBLE";
    ScalarType2[ScalarType2["FLOAT"] = 2] = "FLOAT";
    ScalarType2[ScalarType2["INT64"] = 3] = "INT64";
    ScalarType2[ScalarType2["UINT64"] = 4] = "UINT64";
    ScalarType2[ScalarType2["INT32"] = 5] = "INT32";
    ScalarType2[ScalarType2["FIXED64"] = 6] = "FIXED64";
    ScalarType2[ScalarType2["FIXED32"] = 7] = "FIXED32";
    ScalarType2[ScalarType2["BOOL"] = 8] = "BOOL";
    ScalarType2[ScalarType2["STRING"] = 9] = "STRING";
    ScalarType2[ScalarType2["BYTES"] = 12] = "BYTES";
    ScalarType2[ScalarType2["UINT32"] = 13] = "UINT32";
    ScalarType2[ScalarType2["SFIXED32"] = 15] = "SFIXED32";
    ScalarType2[ScalarType2["SFIXED64"] = 16] = "SFIXED64";
    ScalarType2[ScalarType2["SINT32"] = 17] = "SINT32";
    ScalarType2[ScalarType2["SINT64"] = 18] = "SINT64";
  })(ScalarType || (ScalarType = {}));

  // ../node_modules/@bufbuild/protobuf/dist/esm/google/varint.js
  function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift3 = 0; shift3 < 28; shift3 += 7) {
      let b4 = this.buf[this.pos++];
      lowBits |= (b4 & 127) << shift3;
      if ((b4 & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    let middleByte = this.buf[this.pos++];
    lowBits |= (middleByte & 15) << 28;
    highBits = (middleByte & 112) >> 4;
    if ((middleByte & 128) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
    for (let shift3 = 3; shift3 <= 31; shift3 += 7) {
      let b4 = this.buf[this.pos++];
      highBits |= (b4 & 127) << shift3;
      if ((b4 & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    throw new Error("invalid varint");
  }
  function varint64write(lo, hi, bytes) {
    for (let i4 = 0; i4 < 28; i4 = i4 + 7) {
      const shift3 = lo >>> i4;
      const hasNext = !(shift3 >>> 7 == 0 && hi == 0);
      const byte = (hasNext ? shift3 | 128 : shift3) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    const splitBits = lo >>> 28 & 15 | (hi & 7) << 4;
    const hasMoreBits = !(hi >> 3 == 0);
    bytes.push((hasMoreBits ? splitBits | 128 : splitBits) & 255);
    if (!hasMoreBits) {
      return;
    }
    for (let i4 = 3; i4 < 31; i4 = i4 + 7) {
      const shift3 = hi >>> i4;
      const hasNext = !(shift3 >>> 7 == 0);
      const byte = (hasNext ? shift3 | 128 : shift3) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    bytes.push(hi >>> 31 & 1);
  }
  var TWO_PWR_32_DBL = 4294967296;
  function int64FromString(dec) {
    const minus = dec[0] === "-";
    if (minus) {
      dec = dec.slice(1);
    }
    const base2 = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end2) {
      const digit1e6 = Number(dec.slice(begin, end2));
      highBits *= base2;
      lowBits = lowBits * base2 + digit1e6;
      if (lowBits >= TWO_PWR_32_DBL) {
        highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);
        lowBits = lowBits % TWO_PWR_32_DBL;
      }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
  }
  function int64ToString(lo, hi) {
    let bits = newBits(lo, hi);
    const negative = bits.hi & 2147483648;
    if (negative) {
      bits = negate(bits.lo, bits.hi);
    }
    const result = uInt64ToString(bits.lo, bits.hi);
    return negative ? "-" + result : result;
  }
  function uInt64ToString(lo, hi) {
    ({ lo, hi } = toUnsigned(lo, hi));
    if (hi <= 2097151) {
      return String(TWO_PWR_32_DBL * hi + lo);
    }
    const low = lo & 16777215;
    const mid = (lo >>> 24 | hi << 8) & 16777215;
    const high = hi >> 16 & 65535;
    let digitA = low + mid * 6777216 + high * 6710656;
    let digitB = mid + high * 8147497;
    let digitC = high * 2;
    const base2 = 1e7;
    if (digitA >= base2) {
      digitB += Math.floor(digitA / base2);
      digitA %= base2;
    }
    if (digitB >= base2) {
      digitC += Math.floor(digitB / base2);
      digitB %= base2;
    }
    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);
  }
  function toUnsigned(lo, hi) {
    return { lo: lo >>> 0, hi: hi >>> 0 };
  }
  function newBits(lo, hi) {
    return { lo: lo | 0, hi: hi | 0 };
  }
  function negate(lowBits, highBits) {
    highBits = ~highBits;
    if (lowBits) {
      lowBits = ~lowBits + 1;
    } else {
      highBits += 1;
    }
    return newBits(lowBits, highBits);
  }
  var decimalFrom1e7WithLeadingZeros = (digit1e7) => {
    const partial = String(digit1e7);
    return "0000000".slice(partial.length) + partial;
  };
  function varint32write(value, bytes) {
    if (value >= 0) {
      while (value > 127) {
        bytes.push(value & 127 | 128);
        value = value >>> 7;
      }
      bytes.push(value);
    } else {
      for (let i4 = 0; i4 < 9; i4++) {
        bytes.push(value & 127 | 128);
        value = value >> 7;
      }
      bytes.push(1);
    }
  }
  function varint32read() {
    let b4 = this.buf[this.pos++];
    let result = b4 & 127;
    if ((b4 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b4 = this.buf[this.pos++];
    result |= (b4 & 127) << 7;
    if ((b4 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b4 = this.buf[this.pos++];
    result |= (b4 & 127) << 14;
    if ((b4 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b4 = this.buf[this.pos++];
    result |= (b4 & 127) << 21;
    if ((b4 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b4 = this.buf[this.pos++];
    result |= (b4 & 15) << 28;
    for (let readBytes = 5; (b4 & 128) !== 0 && readBytes < 10; readBytes++)
      b4 = this.buf[this.pos++];
    if ((b4 & 128) != 0)
      throw new Error("invalid varint");
    this.assertBounds();
    return result >>> 0;
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js
  function makeInt64Support() {
    const dv = new DataView(new ArrayBuffer(8));
    const ok2 = typeof BigInt === "function" && typeof dv.getBigInt64 === "function" && typeof dv.getBigUint64 === "function" && typeof dv.setBigInt64 === "function" && typeof dv.setBigUint64 === "function" && (typeof process != "object" || typeof process.env != "object" || process.env.BUF_BIGINT_DISABLE !== "1");
    if (ok2) {
      const MIN = BigInt("-9223372036854775808"), MAX = BigInt("9223372036854775807"), UMIN = BigInt("0"), UMAX = BigInt("18446744073709551615");
      return {
        zero: BigInt(0),
        supported: true,
        parse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > MAX || bi < MIN) {
            throw new Error(`int64 invalid: ${value}`);
          }
          return bi;
        },
        uParse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > UMAX || bi < UMIN) {
            throw new Error(`uint64 invalid: ${value}`);
          }
          return bi;
        },
        enc(value) {
          dv.setBigInt64(0, this.parse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        uEnc(value) {
          dv.setBigInt64(0, this.uParse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        dec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigInt64(0, true);
        },
        uDec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigUint64(0, true);
        }
      };
    }
    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);
    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);
    return {
      zero: "0",
      supported: false,
      parse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return value;
      },
      uParse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return value;
      },
      enc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return int64FromString(value);
      },
      uEnc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return int64FromString(value);
      },
      dec(lo, hi) {
        return int64ToString(lo, hi);
      },
      uDec(lo, hi) {
        return uInt64ToString(lo, hi);
      }
    };
  }
  var protoInt64 = makeInt64Support();

  // ../node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js
  var WireType;
  (function(WireType2) {
    WireType2[WireType2["Varint"] = 0] = "Varint";
    WireType2[WireType2["Bit64"] = 1] = "Bit64";
    WireType2[WireType2["LengthDelimited"] = 2] = "LengthDelimited";
    WireType2[WireType2["StartGroup"] = 3] = "StartGroup";
    WireType2[WireType2["EndGroup"] = 4] = "EndGroup";
    WireType2[WireType2["Bit32"] = 5] = "Bit32";
  })(WireType || (WireType = {}));
  var BinaryWriter = class {
    constructor(textEncoder) {
      this.stack = [];
      this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
      this.chunks = [];
      this.buf = [];
    }
    /**
     * Return all bytes written and reset this writer.
     */
    finish() {
      this.chunks.push(new Uint8Array(this.buf));
      let len = 0;
      for (let i4 = 0; i4 < this.chunks.length; i4++)
        len += this.chunks[i4].length;
      let bytes = new Uint8Array(len);
      let offset3 = 0;
      for (let i4 = 0; i4 < this.chunks.length; i4++) {
        bytes.set(this.chunks[i4], offset3);
        offset3 += this.chunks[i4].length;
      }
      this.chunks = [];
      return bytes;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
    fork() {
      this.stack.push({ chunks: this.chunks, buf: this.buf });
      this.chunks = [];
      this.buf = [];
      return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
    join() {
      let chunk = this.finish();
      let prev2 = this.stack.pop();
      if (!prev2)
        throw new Error("invalid state, fork stack empty");
      this.chunks = prev2.chunks;
      this.buf = prev2.buf;
      this.uint32(chunk.byteLength);
      return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
    tag(fieldNo, type) {
      return this.uint32((fieldNo << 3 | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
    raw(chunk) {
      if (this.buf.length) {
        this.chunks.push(new Uint8Array(this.buf));
        this.buf = [];
      }
      this.chunks.push(chunk);
      return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
    uint32(value) {
      assertUInt32(value);
      while (value > 127) {
        this.buf.push(value & 127 | 128);
        value = value >>> 7;
      }
      this.buf.push(value);
      return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
    int32(value) {
      assertInt32(value);
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
    bool(value) {
      this.buf.push(value ? 1 : 0);
      return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
    bytes(value) {
      this.uint32(value.byteLength);
      return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
    string(value) {
      let chunk = this.textEncoder.encode(value);
      this.uint32(chunk.byteLength);
      return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
    float(value) {
      assertFloat32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setFloat32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
    double(value) {
      let chunk = new Uint8Array(8);
      new DataView(chunk.buffer).setFloat64(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
    fixed32(value) {
      assertUInt32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setUint32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
    sfixed32(value) {
      assertInt32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setInt32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
    sint32(value) {
      assertInt32(value);
      value = (value << 1 ^ value >> 31) >>> 0;
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
    sfixed64(value) {
      let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
    fixed64(value) {
      let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
    int64(value) {
      let tc = protoInt64.enc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64(value) {
      let tc = protoInt64.enc(value), sign = tc.hi >> 31, lo = tc.lo << 1 ^ sign, hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;
      varint64write(lo, hi, this.buf);
      return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
    uint64(value) {
      let tc = protoInt64.uEnc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
  };
  var BinaryReader = class {
    constructor(buf, textDecoder) {
      this.varint64 = varint64read;
      this.uint32 = varint32read;
      this.buf = buf;
      this.len = buf.length;
      this.pos = 0;
      this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
      this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();
    }
    /**
     * Reads a tag - field number and wire type.
     */
    tag() {
      let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
      if (fieldNo <= 0 || wireType < 0 || wireType > 5)
        throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
      return [fieldNo, wireType];
    }
    /**
     * Skip one element on the wire and return the skipped data.
     * Supports WireType.StartGroup since v2.0.0-alpha.23.
     */
    skip(wireType) {
      let start2 = this.pos;
      switch (wireType) {
        case WireType.Varint:
          while (this.buf[this.pos++] & 128) {
          }
          break;
        case WireType.Bit64:
          this.pos += 4;
        case WireType.Bit32:
          this.pos += 4;
          break;
        case WireType.LengthDelimited:
          let len = this.uint32();
          this.pos += len;
          break;
        case WireType.StartGroup:
          let t4;
          while ((t4 = this.tag()[1]) !== WireType.EndGroup) {
            this.skip(t4);
          }
          break;
        default:
          throw new Error("cant skip wire type " + wireType);
      }
      this.assertBounds();
      return this.buf.subarray(start2, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
    assertBounds() {
      if (this.pos > this.len)
        throw new RangeError("premature EOF");
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
    int32() {
      return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
    sint32() {
      let zze = this.uint32();
      return zze >>> 1 ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
    int64() {
      return protoInt64.dec(...this.varint64());
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
    uint64() {
      return protoInt64.uDec(...this.varint64());
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64() {
      let [lo, hi] = this.varint64();
      let s3 = -(lo & 1);
      lo = (lo >>> 1 | (hi & 1) << 31) ^ s3;
      hi = hi >>> 1 ^ s3;
      return protoInt64.dec(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
    bool() {
      let [lo, hi] = this.varint64();
      return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
    fixed32() {
      return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
    sfixed32() {
      return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
    fixed64() {
      return protoInt64.uDec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
    sfixed64() {
      return protoInt64.dec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
    float() {
      return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
    double() {
      return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
    bytes() {
      let len = this.uint32(), start2 = this.pos;
      this.pos += len;
      this.assertBounds();
      return this.buf.subarray(start2, start2 + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
    string() {
      return this.textDecoder.decode(this.bytes());
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js
  function wrapField(type, value) {
    if (value instanceof Message || !type.fieldWrapper) {
      return value;
    }
    return type.fieldWrapper.wrapField(value);
  }
  var wktWrapperToScalarType = {
    "google.protobuf.DoubleValue": ScalarType.DOUBLE,
    "google.protobuf.FloatValue": ScalarType.FLOAT,
    "google.protobuf.Int64Value": ScalarType.INT64,
    "google.protobuf.UInt64Value": ScalarType.UINT64,
    "google.protobuf.Int32Value": ScalarType.INT32,
    "google.protobuf.UInt32Value": ScalarType.UINT32,
    "google.protobuf.BoolValue": ScalarType.BOOL,
    "google.protobuf.StringValue": ScalarType.STRING,
    "google.protobuf.BytesValue": ScalarType.BYTES
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js
  function scalarEquals(type, a3, b4) {
    if (a3 === b4) {
      return true;
    }
    if (type == ScalarType.BYTES) {
      if (!(a3 instanceof Uint8Array) || !(b4 instanceof Uint8Array)) {
        return false;
      }
      if (a3.length !== b4.length) {
        return false;
      }
      for (let i4 = 0; i4 < a3.length; i4++) {
        if (a3[i4] !== b4[i4]) {
          return false;
        }
      }
      return true;
    }
    switch (type) {
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return a3 == b4;
    }
    return false;
  }
  function scalarDefaultValue(type) {
    switch (type) {
      case ScalarType.BOOL:
        return false;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return protoInt64.zero;
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        return 0;
      case ScalarType.BYTES:
        return new Uint8Array(0);
      case ScalarType.STRING:
        return "";
      default:
        return 0;
    }
  }
  function scalarTypeInfo(type, value) {
    const isUndefined = value === void 0;
    let wireType = WireType.Varint;
    let isIntrinsicDefault = value === 0;
    switch (type) {
      case ScalarType.STRING:
        isIntrinsicDefault = isUndefined || !value.length;
        wireType = WireType.LengthDelimited;
        break;
      case ScalarType.BOOL:
        isIntrinsicDefault = value === false;
        break;
      case ScalarType.DOUBLE:
        wireType = WireType.Bit64;
        break;
      case ScalarType.FLOAT:
        wireType = WireType.Bit32;
        break;
      case ScalarType.INT64:
        isIntrinsicDefault = isUndefined || value == 0;
        break;
      case ScalarType.UINT64:
        isIntrinsicDefault = isUndefined || value == 0;
        break;
      case ScalarType.FIXED64:
        isIntrinsicDefault = isUndefined || value == 0;
        wireType = WireType.Bit64;
        break;
      case ScalarType.BYTES:
        isIntrinsicDefault = isUndefined || !value.byteLength;
        wireType = WireType.LengthDelimited;
        break;
      case ScalarType.FIXED32:
        wireType = WireType.Bit32;
        break;
      case ScalarType.SFIXED32:
        wireType = WireType.Bit32;
        break;
      case ScalarType.SFIXED64:
        isIntrinsicDefault = isUndefined || value == 0;
        wireType = WireType.Bit64;
        break;
      case ScalarType.SINT64:
        isIntrinsicDefault = isUndefined || value == 0;
        break;
    }
    const method = ScalarType[type].toLowerCase();
    return [wireType, method, isUndefined || isIntrinsicDefault];
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-common.js
  var unknownFieldsSymbol = Symbol("@bufbuild/protobuf/unknown-fields");
  var readDefaults = {
    readUnknownFields: true,
    readerFactory: (bytes) => new BinaryReader(bytes)
  };
  var writeDefaults = {
    writeUnknownFields: true,
    writerFactory: () => new BinaryWriter()
  };
  function makeReadOptions(options) {
    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;
  }
  function makeWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;
  }
  function makeBinaryFormatCommon() {
    return {
      makeReadOptions,
      makeWriteOptions,
      listUnknownFields(message) {
        var _a5;
        return (_a5 = message[unknownFieldsSymbol]) !== null && _a5 !== void 0 ? _a5 : [];
      },
      discardUnknownFields(message) {
        delete message[unknownFieldsSymbol];
      },
      writeUnknownFields(message, writer) {
        const m2 = message;
        const c3 = m2[unknownFieldsSymbol];
        if (c3) {
          for (const f4 of c3) {
            writer.tag(f4.no, f4.wireType).raw(f4.data);
          }
        }
      },
      onUnknownField(message, no, wireType, data) {
        const m2 = message;
        if (!Array.isArray(m2[unknownFieldsSymbol])) {
          m2[unknownFieldsSymbol] = [];
        }
        m2[unknownFieldsSymbol].push({ no, wireType, data });
      },
      readMessage(message, reader, length2, options) {
        const type = message.getType();
        const end2 = length2 === void 0 ? reader.len : reader.pos + length2;
        while (reader.pos < end2) {
          const [fieldNo, wireType] = reader.tag(), field = type.fields.find(fieldNo);
          if (!field) {
            const data = reader.skip(wireType);
            if (options.readUnknownFields) {
              this.onUnknownField(message, fieldNo, wireType, data);
            }
            continue;
          }
          let target = message, repeated = field.repeated, localName = field.localName;
          if (field.oneof) {
            target = target[field.oneof.localName];
            if (target.case != localName) {
              delete target.value;
            }
            target.case = localName;
            localName = "value";
          }
          switch (field.kind) {
            case "scalar":
            case "enum":
              const scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
              if (repeated) {
                let arr = target[localName];
                if (wireType == WireType.LengthDelimited && scalarType != ScalarType.STRING && scalarType != ScalarType.BYTES) {
                  let e3 = reader.uint32() + reader.pos;
                  while (reader.pos < e3) {
                    arr.push(readScalar(reader, scalarType));
                  }
                } else {
                  arr.push(readScalar(reader, scalarType));
                }
              } else {
                target[localName] = readScalar(reader, scalarType);
              }
              break;
            case "message":
              const messageType = field.T;
              if (repeated) {
                target[localName].push(readMessageField(reader, new messageType(), options));
              } else {
                if (target[localName] instanceof Message) {
                  readMessageField(reader, target[localName], options);
                } else {
                  target[localName] = readMessageField(reader, new messageType(), options);
                  if (messageType.fieldWrapper && !field.oneof && !field.repeated) {
                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                  }
                }
              }
              break;
            case "map":
              let [mapKey, mapVal] = readMapEntry(field, reader, options);
              target[localName][mapKey] = mapVal;
              break;
          }
        }
      }
    };
  }
  function readMessageField(reader, message, options) {
    const format2 = message.getType().runtime.bin;
    format2.readMessage(message, reader, reader.uint32(), options);
    return message;
  }
  function readMapEntry(field, reader, options) {
    const length2 = reader.uint32(), end2 = reader.pos + length2;
    let key, val;
    while (reader.pos < end2) {
      let [fieldNo] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = readScalar(reader, field.K);
          break;
        case 2:
          switch (field.V.kind) {
            case "scalar":
              val = readScalar(reader, field.V.T);
              break;
            case "enum":
              val = reader.int32();
              break;
            case "message":
              val = readMessageField(reader, new field.V.T(), options);
              break;
          }
          break;
      }
    }
    if (key === void 0) {
      let keyRaw = scalarDefaultValue(field.K);
      key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;
    }
    if (typeof key != "string" && typeof key != "number") {
      key = key.toString();
    }
    if (val === void 0) {
      switch (field.V.kind) {
        case "scalar":
          val = scalarDefaultValue(field.V.T);
          break;
        case "enum":
          val = 0;
          break;
        case "message":
          val = new field.V.T();
          break;
      }
    }
    return [key, val];
  }
  function readScalar(reader, type) {
    switch (type) {
      case ScalarType.STRING:
        return reader.string();
      case ScalarType.BOOL:
        return reader.bool();
      case ScalarType.DOUBLE:
        return reader.double();
      case ScalarType.FLOAT:
        return reader.float();
      case ScalarType.INT32:
        return reader.int32();
      case ScalarType.INT64:
        return reader.int64();
      case ScalarType.UINT64:
        return reader.uint64();
      case ScalarType.FIXED64:
        return reader.fixed64();
      case ScalarType.BYTES:
        return reader.bytes();
      case ScalarType.FIXED32:
        return reader.fixed32();
      case ScalarType.SFIXED32:
        return reader.sfixed32();
      case ScalarType.SFIXED64:
        return reader.sfixed64();
      case ScalarType.SINT64:
        return reader.sint64();
      case ScalarType.UINT32:
        return reader.uint32();
      case ScalarType.SINT32:
        return reader.sint32();
    }
  }
  function writeMapEntry(writer, options, field, key, value) {
    writer.tag(field.no, WireType.LengthDelimited);
    writer.fork();
    let keyValue = key;
    switch (field.K) {
      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
        keyValue = Number.parseInt(key);
        break;
      case ScalarType.BOOL:
        assert(key == "true" || key == "false");
        keyValue = key == "true";
        break;
    }
    writeScalar(writer, field.K, 1, keyValue, true);
    switch (field.V.kind) {
      case "scalar":
        writeScalar(writer, field.V.T, 2, value, true);
        break;
      case "enum":
        writeScalar(writer, ScalarType.INT32, 2, value, true);
        break;
      case "message":
        writeMessageField(writer, options, field.V.T, 2, value);
        break;
    }
    writer.join();
  }
  function writeMessageField(writer, options, type, fieldNo, value) {
    if (value !== void 0) {
      const message = wrapField(type, value);
      writer.tag(fieldNo, WireType.LengthDelimited).bytes(message.toBinary(options));
    }
  }
  function writeScalar(writer, type, fieldNo, value, emitIntrinsicDefault) {
    let [wireType, method, isIntrinsicDefault] = scalarTypeInfo(type, value);
    if (!isIntrinsicDefault || emitIntrinsicDefault) {
      writer.tag(fieldNo, wireType)[method](value);
    }
  }
  function writePacked(writer, type, fieldNo, value) {
    if (!value.length) {
      return;
    }
    writer.tag(fieldNo, WireType.LengthDelimited).fork();
    let [, method] = scalarTypeInfo(type);
    for (let i4 = 0; i4 < value.length; i4++) {
      writer[method](value[i4]);
    }
    writer.join();
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-proto3.js
  function makeBinaryFormatProto3() {
    return Object.assign(Object.assign({}, makeBinaryFormatCommon()), { writeMessage(message, writer, options) {
      const type = message.getType();
      for (const field of type.fields.byNumber()) {
        let value, repeated = field.repeated, localName = field.localName;
        if (field.oneof) {
          const oneof = message[field.oneof.localName];
          if (oneof.case !== localName) {
            continue;
          }
          value = oneof.value;
        } else {
          value = message[localName];
        }
        switch (field.kind) {
          case "scalar":
          case "enum":
            let scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
            if (repeated) {
              if (field.packed) {
                writePacked(writer, scalarType, field.no, value);
              } else {
                for (const item of value) {
                  writeScalar(writer, scalarType, field.no, item, true);
                }
              }
            } else {
              if (value !== void 0) {
                writeScalar(writer, scalarType, field.no, value, !!field.oneof || field.opt);
              }
            }
            break;
          case "message":
            if (repeated) {
              for (const item of value) {
                writeMessageField(writer, options, field.T, field.no, item);
              }
            } else {
              writeMessageField(writer, options, field.T, field.no, value);
            }
            break;
          case "map":
            for (const [key, val] of Object.entries(value)) {
              writeMapEntry(writer, options, field, key, val);
            }
            break;
        }
      }
      if (options.writeUnknownFields) {
        this.writeUnknownFields(message, writer);
      }
      return writer;
    } });
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js
  var encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  var decTable = [];
  for (let i4 = 0; i4 < encTable.length; i4++)
    decTable[encTable[i4].charCodeAt(0)] = i4;
  decTable["-".charCodeAt(0)] = encTable.indexOf("+");
  decTable["_".charCodeAt(0)] = encTable.indexOf("/");
  var protoBase64 = {
    /**
     * Decodes a base64 string to a byte array.
     *
     * - ignores white-space, including line breaks and tabs
     * - allows inner padding (can decode concatenated base64 strings)
     * - does not require padding
     * - understands base64url encoding:
     *   "-" instead of "+",
     *   "_" instead of "/",
     *   no padding
     */
    dec(base64Str) {
      let es = base64Str.length * 3 / 4;
      if (base64Str[base64Str.length - 2] == "=")
        es -= 2;
      else if (base64Str[base64Str.length - 1] == "=")
        es -= 1;
      let bytes = new Uint8Array(es), bytePos = 0, groupPos = 0, b4, p3 = 0;
      for (let i4 = 0; i4 < base64Str.length; i4++) {
        b4 = decTable[base64Str.charCodeAt(i4)];
        if (b4 === void 0) {
          switch (base64Str[i4]) {
            case "=":
              groupPos = 0;
            case "\n":
            case "\r":
            case "	":
            case " ":
              continue;
            default:
              throw Error("invalid base64 string.");
          }
        }
        switch (groupPos) {
          case 0:
            p3 = b4;
            groupPos = 1;
            break;
          case 1:
            bytes[bytePos++] = p3 << 2 | (b4 & 48) >> 4;
            p3 = b4;
            groupPos = 2;
            break;
          case 2:
            bytes[bytePos++] = (p3 & 15) << 4 | (b4 & 60) >> 2;
            p3 = b4;
            groupPos = 3;
            break;
          case 3:
            bytes[bytePos++] = (p3 & 3) << 6 | b4;
            groupPos = 0;
            break;
        }
      }
      if (groupPos == 1)
        throw Error("invalid base64 string.");
      return bytes.subarray(0, bytePos);
    },
    /**
     * Encode a byte array to a base64 string.
     */
    enc(bytes) {
      let base64 = "", groupPos = 0, b4, p3 = 0;
      for (let i4 = 0; i4 < bytes.length; i4++) {
        b4 = bytes[i4];
        switch (groupPos) {
          case 0:
            base64 += encTable[b4 >> 2];
            p3 = (b4 & 3) << 4;
            groupPos = 1;
            break;
          case 1:
            base64 += encTable[p3 | b4 >> 4];
            p3 = (b4 & 15) << 2;
            groupPos = 2;
            break;
          case 2:
            base64 += encTable[p3 | b4 >> 6];
            base64 += encTable[b4 & 63];
            groupPos = 0;
            break;
        }
      }
      if (groupPos) {
        base64 += encTable[p3];
        base64 += "=";
        if (groupPos == 1)
          base64 += "=";
      }
      return base64;
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-common.js
  var jsonReadDefaults = {
    ignoreUnknownFields: false
  };
  var jsonWriteDefaults = {
    emitDefaultValues: false,
    enumAsInteger: false,
    useProtoFieldName: false,
    prettySpaces: 0
  };
  function makeReadOptions2(options) {
    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;
  }
  function makeWriteOptions2(options) {
    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;
  }
  function makeJsonFormatCommon(makeWriteField) {
    const writeField = makeWriteField(writeEnum, writeScalar2);
    return {
      makeReadOptions: makeReadOptions2,
      makeWriteOptions: makeWriteOptions2,
      readMessage(type, json2, options, message) {
        if (json2 == null || Array.isArray(json2) || typeof json2 != "object") {
          throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json2)}`);
        }
        message = message !== null && message !== void 0 ? message : new type();
        const oneofSeen = {};
        for (const [jsonKey, jsonValue] of Object.entries(json2)) {
          const field = type.fields.findJsonName(jsonKey);
          if (!field) {
            if (!options.ignoreUnknownFields) {
              throw new Error(`cannot decode message ${type.typeName} from JSON: key "${jsonKey}" is unknown`);
            }
            continue;
          }
          let localName = field.localName;
          let target = message;
          if (field.oneof) {
            if (jsonValue === null && field.kind == "scalar") {
              continue;
            }
            const seen = oneofSeen[field.oneof.localName];
            if (seen) {
              throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof "${field.oneof.name}" present: "${seen}", "${jsonKey}"`);
            }
            oneofSeen[field.oneof.localName] = jsonKey;
            target = target[field.oneof.localName] = { case: localName };
            localName = "value";
          }
          if (field.repeated) {
            if (jsonValue === null) {
              continue;
            }
            if (!Array.isArray(jsonValue)) {
              throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
            }
            const targetArray = target[localName];
            for (const jsonItem of jsonValue) {
              if (jsonItem === null) {
                throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);
              }
              let val;
              switch (field.kind) {
                case "message":
                  val = field.T.fromJson(jsonItem, options);
                  break;
                case "enum":
                  val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);
                  if (val === void 0)
                    continue;
                  break;
                case "scalar":
                  try {
                    val = readScalar2(field.T, jsonItem);
                  } catch (e3) {
                    let m2 = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;
                    if (e3 instanceof Error && e3.message.length > 0) {
                      m2 += `: ${e3.message}`;
                    }
                    throw new Error(m2);
                  }
                  break;
              }
              targetArray.push(val);
            }
          } else if (field.kind == "map") {
            if (jsonValue === null) {
              continue;
            }
            if (Array.isArray(jsonValue) || typeof jsonValue != "object") {
              throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
            }
            const targetMap = target[localName];
            for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {
              if (jsonMapValue === null) {
                throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);
              }
              let val;
              switch (field.V.kind) {
                case "message":
                  val = field.V.T.fromJson(jsonMapValue, options);
                  break;
                case "enum":
                  val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);
                  if (val === void 0)
                    continue;
                  break;
                case "scalar":
                  try {
                    val = readScalar2(field.V.T, jsonMapValue);
                  } catch (e3) {
                    let m2 = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                    if (e3 instanceof Error && e3.message.length > 0) {
                      m2 += `: ${e3.message}`;
                    }
                    throw new Error(m2);
                  }
                  break;
              }
              try {
                targetMap[readScalar2(field.K, field.K == ScalarType.BOOL ? jsonMapKey == "true" ? true : jsonMapKey == "false" ? false : jsonMapKey : jsonMapKey).toString()] = val;
              } catch (e3) {
                let m2 = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                if (e3 instanceof Error && e3.message.length > 0) {
                  m2 += `: ${e3.message}`;
                }
                throw new Error(m2);
              }
            }
          } else {
            switch (field.kind) {
              case "message":
                const messageType = field.T;
                if (jsonValue === null && messageType.typeName != "google.protobuf.Value") {
                  if (field.oneof) {
                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field "${jsonKey}"`);
                  }
                  continue;
                }
                if (target[localName] instanceof Message) {
                  target[localName].fromJson(jsonValue, options);
                } else {
                  target[localName] = messageType.fromJson(jsonValue, options);
                  if (messageType.fieldWrapper && !field.oneof) {
                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                  }
                }
                break;
              case "enum":
                const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);
                if (enumValue !== void 0) {
                  target[localName] = enumValue;
                }
                break;
              case "scalar":
                try {
                  target[localName] = readScalar2(field.T, jsonValue);
                } catch (e3) {
                  let m2 = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                  if (e3 instanceof Error && e3.message.length > 0) {
                    m2 += `: ${e3.message}`;
                  }
                  throw new Error(m2);
                }
                break;
            }
          }
        }
        return message;
      },
      writeMessage(message, options) {
        const type = message.getType();
        const json2 = {};
        let field;
        try {
          for (const member of type.fields.byMember()) {
            let jsonValue;
            if (member.kind == "oneof") {
              const oneof = message[member.localName];
              if (oneof.value === void 0) {
                continue;
              }
              field = member.findField(oneof.case);
              if (!field) {
                throw "oneof case not found: " + oneof.case;
              }
              jsonValue = writeField(field, oneof.value, options);
            } else {
              field = member;
              jsonValue = writeField(field, message[field.localName], options);
            }
            if (jsonValue !== void 0) {
              json2[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;
            }
          }
        } catch (e3) {
          const m2 = field ? `cannot encode field ${type.typeName}.${field.name} to JSON` : `cannot encode message ${type.typeName} to JSON`;
          const r3 = e3 instanceof Error ? e3.message : String(e3);
          throw new Error(m2 + (r3.length > 0 ? `: ${r3}` : ""));
        }
        return json2;
      },
      readScalar: readScalar2,
      writeScalar: writeScalar2,
      debug: debugJsonValue
    };
  }
  function debugJsonValue(json2) {
    if (json2 === null) {
      return "null";
    }
    switch (typeof json2) {
      case "object":
        return Array.isArray(json2) ? "array" : "object";
      case "string":
        return json2.length > 100 ? "string" : `"${json2.split('"').join('\\"')}"`;
      default:
        return String(json2);
    }
  }
  function readScalar2(type, json2) {
    switch (type) {
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        if (json2 === null)
          return 0;
        if (json2 === "NaN")
          return Number.NaN;
        if (json2 === "Infinity")
          return Number.POSITIVE_INFINITY;
        if (json2 === "-Infinity")
          return Number.NEGATIVE_INFINITY;
        if (json2 === "") {
          break;
        }
        if (typeof json2 == "string" && json2.trim().length !== json2.length) {
          break;
        }
        if (typeof json2 != "string" && typeof json2 != "number") {
          break;
        }
        const float = Number(json2);
        if (Number.isNaN(float)) {
          break;
        }
        if (!Number.isFinite(float)) {
          break;
        }
        if (type == ScalarType.FLOAT)
          assertFloat32(float);
        return float;
      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.UINT32:
        if (json2 === null)
          return 0;
        let int32;
        if (typeof json2 == "number")
          int32 = json2;
        else if (typeof json2 == "string" && json2.length > 0) {
          if (json2.trim().length === json2.length)
            int32 = Number(json2);
        }
        if (int32 === void 0)
          break;
        if (type == ScalarType.UINT32)
          assertUInt32(int32);
        else
          assertInt32(int32);
        return int32;
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        if (json2 === null)
          return protoInt64.zero;
        if (typeof json2 != "number" && typeof json2 != "string")
          break;
        return protoInt64.parse(json2);
      case ScalarType.FIXED64:
      case ScalarType.UINT64:
        if (json2 === null)
          return protoInt64.zero;
        if (typeof json2 != "number" && typeof json2 != "string")
          break;
        return protoInt64.uParse(json2);
      case ScalarType.BOOL:
        if (json2 === null)
          return false;
        if (typeof json2 !== "boolean")
          break;
        return json2;
      case ScalarType.STRING:
        if (json2 === null)
          return "";
        if (typeof json2 !== "string") {
          break;
        }
        try {
          encodeURIComponent(json2);
        } catch (e3) {
          throw new Error("invalid UTF8");
        }
        return json2;
      case ScalarType.BYTES:
        if (json2 === null || json2 === "")
          return new Uint8Array(0);
        if (typeof json2 !== "string")
          break;
        return protoBase64.dec(json2);
    }
    throw new Error();
  }
  function readEnum(type, json2, ignoreUnknownFields) {
    if (json2 === null) {
      return 0;
    }
    switch (typeof json2) {
      case "number":
        if (Number.isInteger(json2)) {
          return json2;
        }
        break;
      case "string":
        const value = type.findName(json2);
        if (value || ignoreUnknownFields) {
          return value === null || value === void 0 ? void 0 : value.no;
        }
        break;
    }
    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json2)}`);
  }
  function writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {
    var _a5;
    if (value === void 0) {
      return value;
    }
    if (value === 0 && !emitIntrinsicDefault) {
      return void 0;
    }
    if (enumAsInteger) {
      return value;
    }
    if (type.typeName == "google.protobuf.NullValue") {
      return null;
    }
    const val = type.findNumber(value);
    return (_a5 = val === null || val === void 0 ? void 0 : val.name) !== null && _a5 !== void 0 ? _a5 : value;
  }
  function writeScalar2(type, value, emitIntrinsicDefault) {
    if (value === void 0) {
      return void 0;
    }
    switch (type) {
      case ScalarType.INT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
        assert(typeof value == "number");
        return value != 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.FLOAT:
      case ScalarType.DOUBLE:
        assert(typeof value == "number");
        if (Number.isNaN(value))
          return "NaN";
        if (value === Number.POSITIVE_INFINITY)
          return "Infinity";
        if (value === Number.NEGATIVE_INFINITY)
          return "-Infinity";
        return value !== 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.STRING:
        assert(typeof value == "string");
        return value.length > 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.BOOL:
        assert(typeof value == "boolean");
        return value || emitIntrinsicDefault ? value : void 0;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        assert(typeof value == "bigint" || typeof value == "string" || typeof value == "number");
        return emitIntrinsicDefault || value != 0 ? value.toString(10) : void 0;
      case ScalarType.BYTES:
        assert(value instanceof Uint8Array);
        return emitIntrinsicDefault || value.byteLength > 0 ? protoBase64.enc(value) : void 0;
    }
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-proto3.js
  function makeJsonFormatProto3() {
    return makeJsonFormatCommon((writeEnum2, writeScalar3) => {
      return function writeField(field, value, options) {
        if (field.kind == "map") {
          const jsonObj = {};
          switch (field.V.kind) {
            case "scalar":
              for (const [entryKey, entryValue] of Object.entries(value)) {
                const val = writeScalar3(field.V.T, entryValue, true);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
            case "message":
              for (const [entryKey, entryValue] of Object.entries(value)) {
                jsonObj[entryKey.toString()] = entryValue.toJson(options);
              }
              break;
            case "enum":
              const enumType = field.V.T;
              for (const [entryKey, entryValue] of Object.entries(value)) {
                assert(entryValue === void 0 || typeof entryValue == "number");
                const val = writeEnum2(enumType, entryValue, true, options.enumAsInteger);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
          }
          return options.emitDefaultValues || Object.keys(jsonObj).length > 0 ? jsonObj : void 0;
        } else if (field.repeated) {
          const jsonArr = [];
          switch (field.kind) {
            case "scalar":
              for (let i4 = 0; i4 < value.length; i4++) {
                jsonArr.push(writeScalar3(field.T, value[i4], true));
              }
              break;
            case "enum":
              for (let i4 = 0; i4 < value.length; i4++) {
                jsonArr.push(writeEnum2(field.T, value[i4], true, options.enumAsInteger));
              }
              break;
            case "message":
              for (let i4 = 0; i4 < value.length; i4++) {
                jsonArr.push(wrapField(field.T, value[i4]).toJson(options));
              }
              break;
          }
          return options.emitDefaultValues || jsonArr.length > 0 ? jsonArr : void 0;
        } else {
          switch (field.kind) {
            case "scalar":
              return writeScalar3(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);
            case "enum":
              return writeEnum2(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);
            case "message":
              return value !== void 0 ? wrapField(field.T, value).toJson(options) : void 0;
          }
        }
      };
    });
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js
  function makeUtilCommon() {
    return {
      setEnumType,
      initPartial(source, target) {
        if (source === void 0) {
          return;
        }
        const type = target.getType();
        for (const member of type.fields.byMember()) {
          const localName = member.localName, t4 = target, s3 = source;
          if (s3[localName] === void 0) {
            continue;
          }
          switch (member.kind) {
            case "oneof":
              const sk = s3[localName].case;
              if (sk === void 0) {
                continue;
              }
              const sourceField = member.findField(sk);
              let val = s3[localName].value;
              if (sourceField && sourceField.kind == "message" && !(val instanceof sourceField.T)) {
                val = new sourceField.T(val);
              } else if (sourceField && sourceField.kind === "scalar" && sourceField.T === ScalarType.BYTES) {
                val = toU8Arr(val);
              }
              t4[localName] = { case: sk, value: val };
              break;
            case "scalar":
            case "enum":
              let copy2 = s3[localName];
              if (member.T === ScalarType.BYTES) {
                copy2 = member.repeated ? copy2.map(toU8Arr) : toU8Arr(copy2);
              }
              t4[localName] = copy2;
              break;
            case "map":
              switch (member.V.kind) {
                case "scalar":
                case "enum":
                  if (member.V.T === ScalarType.BYTES) {
                    for (const [k2, v3] of Object.entries(s3[localName])) {
                      t4[localName][k2] = toU8Arr(v3);
                    }
                  } else {
                    Object.assign(t4[localName], s3[localName]);
                  }
                  break;
                case "message":
                  const messageType = member.V.T;
                  for (const k2 of Object.keys(s3[localName])) {
                    let val2 = s3[localName][k2];
                    if (!messageType.fieldWrapper) {
                      val2 = new messageType(val2);
                    }
                    t4[localName][k2] = val2;
                  }
                  break;
              }
              break;
            case "message":
              const mt = member.T;
              if (member.repeated) {
                t4[localName] = s3[localName].map((val2) => val2 instanceof mt ? val2 : new mt(val2));
              } else if (s3[localName] !== void 0) {
                const val2 = s3[localName];
                if (mt.fieldWrapper) {
                  if (
                    // We can't use BytesValue.typeName as that will create a circular import
                    mt.typeName === "google.protobuf.BytesValue"
                  ) {
                    t4[localName] = toU8Arr(val2);
                  } else {
                    t4[localName] = val2;
                  }
                } else {
                  t4[localName] = val2 instanceof mt ? val2 : new mt(val2);
                }
              }
              break;
          }
        }
      },
      equals(type, a3, b4) {
        if (a3 === b4) {
          return true;
        }
        if (!a3 || !b4) {
          return false;
        }
        return type.fields.byMember().every((m2) => {
          const va = a3[m2.localName];
          const vb = b4[m2.localName];
          if (m2.repeated) {
            if (va.length !== vb.length) {
              return false;
            }
            switch (m2.kind) {
              case "message":
                return va.every((a4, i4) => m2.T.equals(a4, vb[i4]));
              case "scalar":
                return va.every((a4, i4) => scalarEquals(m2.T, a4, vb[i4]));
              case "enum":
                return va.every((a4, i4) => scalarEquals(ScalarType.INT32, a4, vb[i4]));
            }
            throw new Error(`repeated cannot contain ${m2.kind}`);
          }
          switch (m2.kind) {
            case "message":
              return m2.T.equals(va, vb);
            case "enum":
              return scalarEquals(ScalarType.INT32, va, vb);
            case "scalar":
              return scalarEquals(m2.T, va, vb);
            case "oneof":
              if (va.case !== vb.case) {
                return false;
              }
              const s3 = m2.findField(va.case);
              if (s3 === void 0) {
                return true;
              }
              switch (s3.kind) {
                case "message":
                  return s3.T.equals(va.value, vb.value);
                case "enum":
                  return scalarEquals(ScalarType.INT32, va.value, vb.value);
                case "scalar":
                  return scalarEquals(s3.T, va.value, vb.value);
              }
              throw new Error(`oneof cannot contain ${s3.kind}`);
            case "map":
              const keys2 = Object.keys(va).concat(Object.keys(vb));
              switch (m2.V.kind) {
                case "message":
                  const messageType = m2.V.T;
                  return keys2.every((k2) => messageType.equals(va[k2], vb[k2]));
                case "enum":
                  return keys2.every((k2) => scalarEquals(ScalarType.INT32, va[k2], vb[k2]));
                case "scalar":
                  const scalarType = m2.V.T;
                  return keys2.every((k2) => scalarEquals(scalarType, va[k2], vb[k2]));
              }
              break;
          }
        });
      },
      clone(message) {
        const type = message.getType(), target = new type(), any = target;
        for (const member of type.fields.byMember()) {
          const source = message[member.localName];
          let copy2;
          if (member.repeated) {
            copy2 = source.map(cloneSingularField);
          } else if (member.kind == "map") {
            copy2 = any[member.localName];
            for (const [key, v3] of Object.entries(source)) {
              copy2[key] = cloneSingularField(v3);
            }
          } else if (member.kind == "oneof") {
            const f4 = member.findField(source.case);
            copy2 = f4 ? { case: source.case, value: cloneSingularField(source.value) } : { case: void 0 };
          } else {
            copy2 = cloneSingularField(source);
          }
          any[member.localName] = copy2;
        }
        return target;
      }
    };
  }
  function cloneSingularField(value) {
    if (value === void 0) {
      return value;
    }
    if (value instanceof Message) {
      return value.clone();
    }
    if (value instanceof Uint8Array) {
      const c3 = new Uint8Array(value.byteLength);
      c3.set(value);
      return c3;
    }
    return value;
  }
  function toU8Arr(input) {
    return input instanceof Uint8Array ? input : new Uint8Array(input);
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js
  var InternalFieldList = class {
    constructor(fields, normalizer) {
      this._fields = fields;
      this._normalizer = normalizer;
    }
    findJsonName(jsonName) {
      if (!this.jsonNames) {
        const t4 = {};
        for (const f4 of this.list()) {
          t4[f4.jsonName] = t4[f4.name] = f4;
        }
        this.jsonNames = t4;
      }
      return this.jsonNames[jsonName];
    }
    find(fieldNo) {
      if (!this.numbers) {
        const t4 = {};
        for (const f4 of this.list()) {
          t4[f4.no] = f4;
        }
        this.numbers = t4;
      }
      return this.numbers[fieldNo];
    }
    list() {
      if (!this.all) {
        this.all = this._normalizer(this._fields);
      }
      return this.all;
    }
    byNumber() {
      if (!this.numbersAsc) {
        this.numbersAsc = this.list().concat().sort((a3, b4) => a3.no - b4.no);
      }
      return this.numbersAsc;
    }
    byMember() {
      if (!this.members) {
        this.members = [];
        const a3 = this.members;
        let o3;
        for (const f4 of this.list()) {
          if (f4.oneof) {
            if (f4.oneof !== o3) {
              o3 = f4.oneof;
              a3.push(o3);
            }
          } else {
            a3.push(f4);
          }
        }
      }
      return this.members;
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/names.js
  function localFieldName(protoName, inOneof) {
    const name = protoCamelCase(protoName);
    if (inOneof) {
      return name;
    }
    return safeObjectProperty(safeMessageProperty(name));
  }
  function localOneofName(protoName) {
    return localFieldName(protoName, false);
  }
  var fieldJsonName = protoCamelCase;
  function protoCamelCase(snakeCase) {
    let capNext = false;
    const b4 = [];
    for (let i4 = 0; i4 < snakeCase.length; i4++) {
      let c3 = snakeCase.charAt(i4);
      switch (c3) {
        case "_":
          capNext = true;
          break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          b4.push(c3);
          capNext = false;
          break;
        default:
          if (capNext) {
            capNext = false;
            c3 = c3.toUpperCase();
          }
          b4.push(c3);
          break;
      }
    }
    return b4.join("");
  }
  var reservedObjectProperties = /* @__PURE__ */ new Set([
    // names reserved by JavaScript
    "constructor",
    "toString",
    "toJSON",
    "valueOf"
  ]);
  var reservedMessageProperties = /* @__PURE__ */ new Set([
    // names reserved by the runtime
    "getType",
    "clone",
    "equals",
    "fromBinary",
    "fromJson",
    "fromJsonString",
    "toBinary",
    "toJson",
    "toJsonString",
    // names reserved by the runtime for the future
    "toObject"
  ]);
  var fallback = (name) => `${name}$`;
  var safeMessageProperty = (name) => {
    if (reservedMessageProperties.has(name)) {
      return fallback(name);
    }
    return name;
  };
  var safeObjectProperty = (name) => {
    if (reservedObjectProperties.has(name)) {
      return fallback(name);
    }
    return name;
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/field.js
  var InternalOneofInfo = class {
    constructor(name) {
      this.kind = "oneof";
      this.repeated = false;
      this.packed = false;
      this.opt = false;
      this.default = void 0;
      this.fields = [];
      this.name = name;
      this.localName = localOneofName(name);
    }
    addField(field) {
      assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);
      this.fields.push(field);
    }
    findField(localName) {
      if (!this._lookup) {
        this._lookup = /* @__PURE__ */ Object.create(null);
        for (let i4 = 0; i4 < this.fields.length; i4++) {
          this._lookup[this.fields[i4].localName] = this.fields[i4];
        }
      }
      return this._lookup[localName];
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/proto3.js
  var proto3 = makeProtoRuntime("proto3", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), {
    newFieldList(fields) {
      return new InternalFieldList(fields, normalizeFieldInfosProto3);
    },
    initFields(target) {
      for (const member of target.getType().fields.byMember()) {
        if (member.opt) {
          continue;
        }
        const name = member.localName, t4 = target;
        if (member.repeated) {
          t4[name] = [];
          continue;
        }
        switch (member.kind) {
          case "oneof":
            t4[name] = { case: void 0 };
            break;
          case "enum":
            t4[name] = 0;
            break;
          case "map":
            t4[name] = {};
            break;
          case "scalar":
            t4[name] = scalarDefaultValue(member.T);
            break;
          case "message":
            break;
        }
      }
    }
  }));
  function normalizeFieldInfosProto3(fieldInfos) {
    var _a5, _b, _c;
    const r3 = [];
    let o3;
    for (const field of typeof fieldInfos == "function" ? fieldInfos() : fieldInfos) {
      const f4 = field;
      f4.localName = localFieldName(field.name, field.oneof !== void 0);
      f4.jsonName = (_a5 = field.jsonName) !== null && _a5 !== void 0 ? _a5 : fieldJsonName(field.name);
      f4.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;
      f4.packed = (_c = field.packed) !== null && _c !== void 0 ? _c : field.kind == "enum" || field.kind == "scalar" && field.T != ScalarType.BYTES && field.T != ScalarType.STRING;
      if (field.oneof !== void 0) {
        const ooname = typeof field.oneof == "string" ? field.oneof : field.oneof.name;
        if (!o3 || o3.name != ooname) {
          o3 = new InternalOneofInfo(ooname);
        }
        f4.oneof = o3;
        o3.addField(f4);
      }
      r3.push(f4);
    }
    return r3;
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/service-type.js
  var MethodKind;
  (function(MethodKind2) {
    MethodKind2[MethodKind2["Unary"] = 0] = "Unary";
    MethodKind2[MethodKind2["ServerStreaming"] = 1] = "ServerStreaming";
    MethodKind2[MethodKind2["ClientStreaming"] = 2] = "ClientStreaming";
    MethodKind2[MethodKind2["BiDiStreaming"] = 3] = "BiDiStreaming";
  })(MethodKind || (MethodKind = {}));
  var MethodIdempotency;
  (function(MethodIdempotency2) {
    MethodIdempotency2[MethodIdempotency2["NoSideEffects"] = 1] = "NoSideEffects";
    MethodIdempotency2[MethodIdempotency2["Idempotent"] = 2] = "Idempotent";
  })(MethodIdempotency || (MethodIdempotency = {}));

  // ../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/empty_pb.js
  var Empty = class _Empty extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Empty().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Empty().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Empty().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Empty, a3, b4);
    }
  };
  Empty.runtime = proto3;
  Empty.typeName = "google.protobuf.Empty";
  Empty.fields = proto3.util.newFieldList(() => []);

  // ../node_modules/@bufbuild/connect/dist/esm/code.js
  var Code;
  (function(Code3) {
    Code3[Code3["Canceled"] = 1] = "Canceled";
    Code3[Code3["Unknown"] = 2] = "Unknown";
    Code3[Code3["InvalidArgument"] = 3] = "InvalidArgument";
    Code3[Code3["DeadlineExceeded"] = 4] = "DeadlineExceeded";
    Code3[Code3["NotFound"] = 5] = "NotFound";
    Code3[Code3["AlreadyExists"] = 6] = "AlreadyExists";
    Code3[Code3["PermissionDenied"] = 7] = "PermissionDenied";
    Code3[Code3["ResourceExhausted"] = 8] = "ResourceExhausted";
    Code3[Code3["FailedPrecondition"] = 9] = "FailedPrecondition";
    Code3[Code3["Aborted"] = 10] = "Aborted";
    Code3[Code3["OutOfRange"] = 11] = "OutOfRange";
    Code3[Code3["Unimplemented"] = 12] = "Unimplemented";
    Code3[Code3["Internal"] = 13] = "Internal";
    Code3[Code3["Unavailable"] = 14] = "Unavailable";
    Code3[Code3["DataLoss"] = 15] = "DataLoss";
    Code3[Code3["Unauthenticated"] = 16] = "Unauthenticated";
  })(Code || (Code = {}));

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/code-string.js
  function codeToString(value) {
    const name = Code[value];
    if (typeof name != "string") {
      return value.toString();
    }
    return name[0].toLowerCase() + name.substring(1).replace(/[A-Z]/g, (c3) => "_" + c3.toLowerCase());
  }
  var stringToCode;
  function codeFromString(value) {
    if (!stringToCode) {
      stringToCode = {};
      for (const value2 of Object.values(Code)) {
        if (typeof value2 == "string") {
          continue;
        }
        stringToCode[codeToString(value2)] = value2;
      }
    }
    return stringToCode[value];
  }

  // ../node_modules/@bufbuild/connect/dist/esm/connect-error.js
  var ConnectError = class _ConnectError extends Error {
    /**
     * Create a new ConnectError.
     * If no code is provided, code "unknown" is used.
     * Outgoing details are only relevant for the server side - a service may
     * raise an error with details, and it is up to the protocol implementation
     * to encode and send the details along with error.
     */
    constructor(message, code2 = Code.Unknown, metadata, outgoingDetails, cause) {
      super(createMessage(message, code2));
      this.name = "ConnectError";
      Object.setPrototypeOf(this, new.target.prototype);
      this.rawMessage = message;
      this.code = code2;
      this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});
      this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];
      this.cause = cause;
    }
    /**
     * Convert any value - typically a caught error into a ConnectError,
     * following these rules:
     * - If the value is already a ConnectError, return it as is.
     * - If the value is an AbortError from the fetch API, return the message
     *   of the AbortError with code Canceled.
     * - For other Errors, return the error message with code Unknown by default.
     * - For other values, return the values String representation as a message,
     *   with the code Unknown by default.
     * The original value will be used for the "cause" property for the new
     * ConnectError.
     */
    static from(reason, code2 = Code.Unknown) {
      if (reason instanceof _ConnectError) {
        return reason;
      }
      if (reason instanceof Error) {
        if (reason.name == "AbortError") {
          return new _ConnectError(reason.message, Code.Canceled);
        }
        return new _ConnectError(reason.message, code2, void 0, void 0, reason);
      }
      return new _ConnectError(String(reason), code2, void 0, void 0, reason);
    }
    findDetails(typeOrRegistry) {
      const registry = "typeName" in typeOrRegistry ? {
        findMessage: (typeName) => typeName === typeOrRegistry.typeName ? typeOrRegistry : void 0
      } : typeOrRegistry;
      const details = [];
      for (const data of this.details) {
        if (data instanceof Message) {
          if (registry.findMessage(data.getType().typeName)) {
            details.push(data);
          }
          continue;
        }
        const type = registry.findMessage(data.type);
        if (type) {
          try {
            details.push(type.fromBinary(data.value));
          } catch (_3) {
          }
        }
      }
      return details;
    }
  };
  function createMessage(message, code2) {
    return message.length ? `[${codeToString(code2)}] ${message}` : `[${codeToString(code2)}]`;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/http-headers.js
  function appendHeaders(...headers) {
    const h4 = new Headers();
    for (const e3 of headers) {
      e3.forEach((value, key) => {
        h4.append(key, value);
      });
    }
    return h4;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/any-client.js
  function makeAnyClient(service, createMethod) {
    const client = {};
    for (const [localName, methodInfo] of Object.entries(service.methods)) {
      const method = createMethod(Object.assign(Object.assign({}, methodInfo), {
        localName,
        service
      }));
      if (method != null) {
        client[localName] = method;
      }
    }
    return client;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/envelope.js
  function createEnvelopeReadableStream(stream) {
    let reader;
    let buffer2 = new Uint8Array(0);
    function append2(chunk) {
      const n6 = new Uint8Array(buffer2.length + chunk.length);
      n6.set(buffer2);
      n6.set(chunk, buffer2.length);
      buffer2 = n6;
    }
    return new ReadableStream({
      start() {
        reader = stream.getReader();
      },
      async pull(controller) {
        let header = void 0;
        for (; ; ) {
          if (header === void 0 && buffer2.byteLength >= 5) {
            let length2 = 0;
            for (let i4 = 1; i4 < 5; i4++) {
              length2 = (length2 << 8) + buffer2[i4];
            }
            header = { flags: buffer2[0], length: length2 };
          }
          if (header !== void 0 && buffer2.byteLength >= header.length + 5) {
            break;
          }
          const result = await reader.read();
          if (result.done) {
            break;
          }
          append2(result.value);
        }
        if (header === void 0) {
          if (buffer2.byteLength == 0) {
            controller.close();
            return;
          }
          controller.error(new ConnectError("premature end of stream", Code.DataLoss));
          return;
        }
        const data = buffer2.subarray(5, 5 + header.length);
        buffer2 = buffer2.subarray(5 + header.length);
        controller.enqueue({
          flags: header.flags,
          data
        });
      }
    });
  }
  function encodeEnvelope(flags, data) {
    const bytes = new Uint8Array(data.length + 5);
    bytes.set(data, 5);
    const v3 = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    v3.setUint8(0, flags);
    v3.setUint32(1, data.length);
    return bytes;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/async-iterable.js
  var __asyncValues = function(o3) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o3[Symbol.asyncIterator], i4;
    return m2 ? m2.call(o3) : (o3 = typeof __values === "function" ? __values(o3) : o3[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4);
    function verb(n6) {
      i4[n6] = o3[n6] && function(v3) {
        return new Promise(function(resolve2, reject) {
          v3 = o3[n6](v3), settle(resolve2, reject, v3.done, v3.value);
        });
      };
    }
    function settle(resolve2, reject, d3, v3) {
      Promise.resolve(v3).then(function(v4) {
        resolve2({ value: v4, done: d3 });
      }, reject);
    }
  };
  var __await = function(v3) {
    return this instanceof __await ? (this.v = v3, this) : new __await(v3);
  };
  var __asyncGenerator = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g3 = generator.apply(thisArg, _arguments || []), i4, q2 = [];
    return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4;
    function verb(n6) {
      if (g3[n6])
        i4[n6] = function(v3) {
          return new Promise(function(a3, b4) {
            q2.push([n6, v3, a3, b4]) > 1 || resume(n6, v3);
          });
        };
    }
    function resume(n6, v3) {
      try {
        step(g3[n6](v3));
      } catch (e3) {
        settle(q2[0][3], e3);
      }
    }
    function step(r3) {
      r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f4, v3) {
      if (f4(v3), q2.shift(), q2.length)
        resume(q2[0][0], q2[0][1]);
    }
  };
  var __asyncDelegator = function(o3) {
    var i4, p3;
    return i4 = {}, verb("next"), verb("throw", function(e3) {
      throw e3;
    }), verb("return"), i4[Symbol.iterator] = function() {
      return this;
    }, i4;
    function verb(n6, f4) {
      i4[n6] = o3[n6] ? function(v3) {
        return (p3 = !p3) ? { value: __await(o3[n6](v3)), done: false } : f4 ? f4(v3) : v3;
      } : f4;
    }
  };
  function createAsyncIterable(items) {
    return __asyncGenerator(this, arguments, function* createAsyncIterable_1() {
      yield __await(yield* __asyncDelegator(__asyncValues(items)));
    });
  }

  // ../node_modules/@bufbuild/connect/dist/esm/promise-client.js
  var __asyncValues2 = function(o3) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o3[Symbol.asyncIterator], i4;
    return m2 ? m2.call(o3) : (o3 = typeof __values === "function" ? __values(o3) : o3[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4);
    function verb(n6) {
      i4[n6] = o3[n6] && function(v3) {
        return new Promise(function(resolve2, reject) {
          v3 = o3[n6](v3), settle(resolve2, reject, v3.done, v3.value);
        });
      };
    }
    function settle(resolve2, reject, d3, v3) {
      Promise.resolve(v3).then(function(v4) {
        resolve2({ value: v4, done: d3 });
      }, reject);
    }
  };
  var __await2 = function(v3) {
    return this instanceof __await2 ? (this.v = v3, this) : new __await2(v3);
  };
  var __asyncDelegator2 = function(o3) {
    var i4, p3;
    return i4 = {}, verb("next"), verb("throw", function(e3) {
      throw e3;
    }), verb("return"), i4[Symbol.iterator] = function() {
      return this;
    }, i4;
    function verb(n6, f4) {
      i4[n6] = o3[n6] ? function(v3) {
        return (p3 = !p3) ? { value: __await2(o3[n6](v3)), done: false } : f4 ? f4(v3) : v3;
      } : f4;
    }
  };
  var __asyncGenerator2 = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g3 = generator.apply(thisArg, _arguments || []), i4, q2 = [];
    return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4;
    function verb(n6) {
      if (g3[n6])
        i4[n6] = function(v3) {
          return new Promise(function(a3, b4) {
            q2.push([n6, v3, a3, b4]) > 1 || resume(n6, v3);
          });
        };
    }
    function resume(n6, v3) {
      try {
        step(g3[n6](v3));
      } catch (e3) {
        settle(q2[0][3], e3);
      }
    }
    function step(r3) {
      r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f4, v3) {
      if (f4(v3), q2.shift(), q2.length)
        resume(q2[0][0], q2[0][1]);
    }
  };
  function createPromiseClient(service, transport2) {
    return makeAnyClient(service, (method) => {
      switch (method.kind) {
        case MethodKind.Unary:
          return createUnaryFn(transport2, service, method);
        case MethodKind.ServerStreaming:
          return createServerStreamingFn(transport2, service, method);
        case MethodKind.ClientStreaming:
          return createClientStreamingFn(transport2, service, method);
        case MethodKind.BiDiStreaming:
          return createBiDiStreamingFn(transport2, service, method);
        default:
          return null;
      }
    });
  }
  function createUnaryFn(transport2, service, method) {
    return async function(input, options) {
      var _a5, _b;
      const response = await transport2.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input);
      (_a5 = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a5 === void 0 ? void 0 : _a5.call(options, response.header);
      (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
      return response.message;
    };
  }
  function createServerStreamingFn(transport2, service, method) {
    return function(input, options) {
      return handleStreamResponse(transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, createAsyncIterable([input])), options);
    };
  }
  function createClientStreamingFn(transport2, service, method) {
    return async function(request, options) {
      var _a5, e_1, _b, _c;
      var _d, _e;
      const response = await transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request);
      (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);
      let singleMessage;
      try {
        for (var _f = true, _g = __asyncValues2(response.message), _h; _h = await _g.next(), _a5 = _h.done, !_a5; _f = true) {
          _c = _h.value;
          _f = false;
          const message = _c;
          singleMessage = message;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (!_f && !_a5 && (_b = _g.return))
            await _b.call(_g);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      if (!singleMessage) {
        throw new ConnectError("protocol error: missing response message", Code.Internal);
      }
      (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);
      return singleMessage;
    };
  }
  function createBiDiStreamingFn(transport2, service, method) {
    return function(request, options) {
      return handleStreamResponse(transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request), options);
    };
  }
  function handleStreamResponse(stream, options) {
    const it = function() {
      var _a5, _b;
      return __asyncGenerator2(this, arguments, function* () {
        const response = yield __await2(stream);
        (_a5 = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a5 === void 0 ? void 0 : _a5.call(options, response.header);
        yield __await2(yield* __asyncDelegator2(__asyncValues2(response.message)));
        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
      });
    }()[Symbol.asyncIterator]();
    return {
      [Symbol.asyncIterator]: () => ({
        next: () => it.next()
      })
    };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/signals.js
  function createLinkedAbortController(...signals) {
    const controller = new AbortController();
    const sa = signals.filter((s3) => s3 !== void 0).concat(controller.signal);
    for (const signal of sa) {
      if (signal.aborted) {
        onAbort.apply(signal);
        break;
      }
      signal.addEventListener("abort", onAbort);
    }
    function onAbort() {
      if (!controller.signal.aborted) {
        controller.abort(getAbortSignalReason(this));
      }
      for (const signal of sa) {
        signal.removeEventListener("abort", onAbort);
      }
    }
    return controller;
  }
  function createDeadlineSignal(timeoutMs) {
    const controller = new AbortController();
    const listener = () => {
      controller.abort(new ConnectError("the operation timed out", Code.DeadlineExceeded));
    };
    let timeoutId;
    if (timeoutMs !== void 0) {
      if (timeoutMs <= 0)
        listener();
      else
        timeoutId = setTimeout(listener, timeoutMs);
    }
    return {
      signal: controller.signal,
      cleanup: () => clearTimeout(timeoutId)
    };
  }
  function getAbortSignalReason(signal) {
    if (!signal.aborted) {
      return void 0;
    }
    if (signal.reason !== void 0) {
      return signal.reason;
    }
    const e3 = new Error("This operation was aborted");
    e3.name = "AbortError";
    return e3;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/create-method-url.js
  function createMethodUrl(baseUrl, service, method) {
    const s3 = typeof service == "string" ? service : service.typeName;
    const m2 = typeof method == "string" ? method : method.name;
    return baseUrl.toString().replace(/\/?$/, `/${s3}/${m2}`);
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/serialization.js
  function getJsonOptions(options) {
    var _a5;
    const o3 = Object.assign({}, options);
    (_a5 = o3.ignoreUnknownFields) !== null && _a5 !== void 0 ? _a5 : o3.ignoreUnknownFields = true;
    return o3;
  }
  function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {
    const input = useBinaryFormat ? createBinarySerialization(method.I, binaryOptions) : createJsonSerialization(method.I, jsonOptions);
    const output = useBinaryFormat ? createBinarySerialization(method.O, binaryOptions) : createJsonSerialization(method.O, jsonOptions);
    return { parse: output.parse, serialize: input.serialize };
  }
  function createBinarySerialization(messageType, options) {
    return {
      parse(data) {
        try {
          return messageType.fromBinary(data, options);
        } catch (e3) {
          const m2 = e3 instanceof Error ? e3.message : String(e3);
          throw new ConnectError(`parse binary: ${m2}`, Code.InvalidArgument);
        }
      },
      serialize(data) {
        try {
          return data.toBinary(options);
        } catch (e3) {
          const m2 = e3 instanceof Error ? e3.message : String(e3);
          throw new ConnectError(`serialize binary: ${m2}`, Code.Internal);
        }
      }
    };
  }
  function createJsonSerialization(messageType, options) {
    var _a5, _b;
    const textEncoder = (_a5 = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a5 !== void 0 ? _a5 : new TextEncoder();
    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();
    const o3 = getJsonOptions(options);
    return {
      parse(data) {
        try {
          const json2 = textDecoder.decode(data);
          return messageType.fromJsonString(json2, o3);
        } catch (e3) {
          throw ConnectError.from(e3, Code.InvalidArgument);
        }
      },
      serialize(data) {
        try {
          const json2 = data.toJsonString(o3);
          return textEncoder.encode(json2);
        } catch (e3) {
          throw ConnectError.from(e3, Code.Internal);
        }
      }
    };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/content-type.js
  var contentTypeRegExp = /^application\/(connect\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;
  var contentTypeUnaryProto = "application/proto";
  var contentTypeUnaryJson = "application/json";
  var contentTypeStreamProto = "application/connect+proto";
  var contentTypeStreamJson = "application/connect+json";
  function parseContentType(contentType) {
    const match2 = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);
    if (!match2) {
      return void 0;
    }
    const stream = !!match2[1];
    const binary = !!match2[3];
    return { stream, binary };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/error-json.js
  function errorFromJson(jsonValue, metadata, fallback2) {
    if (metadata) {
      new Headers(metadata).forEach((value, key) => fallback2.metadata.append(key, value));
    }
    if (typeof jsonValue !== "object" || jsonValue == null || Array.isArray(jsonValue) || !("code" in jsonValue) || typeof jsonValue.code !== "string") {
      throw fallback2;
    }
    const code2 = codeFromString(jsonValue.code);
    if (code2 === void 0) {
      throw fallback2;
    }
    const message = jsonValue.message;
    if (message != null && typeof message !== "string") {
      throw fallback2;
    }
    const error = new ConnectError(message !== null && message !== void 0 ? message : "", code2, metadata);
    if ("details" in jsonValue && Array.isArray(jsonValue.details)) {
      for (const detail of jsonValue.details) {
        if (detail === null || typeof detail != "object" || Array.isArray(detail) || typeof detail.type != "string" || typeof detail.value != "string" || "debug" in detail && typeof detail.debug != "object") {
          throw fallback2;
        }
        try {
          error.details.push({
            type: detail.type,
            value: protoBase64.dec(detail.value),
            debug: detail.debug
          });
        } catch (e3) {
          throw fallback2;
        }
      }
    }
    return error;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/end-stream.js
  var endStreamFlag = 2;
  function endStreamFromJson(data) {
    const parseErr = new ConnectError("invalid end stream", Code.InvalidArgument);
    let jsonValue;
    try {
      jsonValue = JSON.parse(typeof data == "string" ? data : new TextDecoder().decode(data));
    } catch (e3) {
      throw parseErr;
    }
    if (typeof jsonValue != "object" || jsonValue == null || Array.isArray(jsonValue)) {
      throw parseErr;
    }
    const metadata = new Headers();
    if ("metadata" in jsonValue) {
      if (typeof jsonValue.metadata != "object" || jsonValue.metadata == null || Array.isArray(jsonValue.metadata)) {
        throw parseErr;
      }
      for (const [key, values2] of Object.entries(jsonValue.metadata)) {
        if (!Array.isArray(values2) || values2.some((value) => typeof value != "string")) {
          throw parseErr;
        }
        for (const value of values2) {
          metadata.append(key, value);
        }
      }
    }
    const error = "error" in jsonValue ? errorFromJson(jsonValue.error, metadata, parseErr) : void 0;
    return { metadata, error };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/headers.js
  var headerContentType = "Content-Type";
  var headerUnaryContentLength = "Content-Length";
  var headerUnaryEncoding = "Content-Encoding";
  var headerUnaryAcceptEncoding = "Accept-Encoding";
  var headerTimeout = "Connect-Timeout-Ms";
  var headerProtocolVersion = "Connect-Protocol-Version";

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/http-status.js
  function codeFromHttpStatus(httpStatus) {
    switch (httpStatus) {
      case 400:
        return Code.InvalidArgument;
      case 401:
        return Code.Unauthenticated;
      case 403:
        return Code.PermissionDenied;
      case 404:
        return Code.Unimplemented;
      case 408:
        return Code.DeadlineExceeded;
      case 409:
        return Code.Aborted;
      case 412:
        return Code.FailedPrecondition;
      case 413:
        return Code.ResourceExhausted;
      case 415:
        return Code.Internal;
      case 429:
        return Code.Unavailable;
      case 431:
        return Code.ResourceExhausted;
      case 502:
        return Code.Unavailable;
      case 503:
        return Code.Unavailable;
      case 504:
        return Code.Unavailable;
      default:
        return Code.Unknown;
    }
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/trailer-mux.js
  function trailerDemux(header) {
    const h4 = new Headers(), t4 = new Headers();
    header.forEach((value, key) => {
      if (key.toLowerCase().startsWith("trailer-")) {
        t4.set(key.substring(8), value);
      } else {
        h4.set(key, value);
      }
    });
    return [h4, t4];
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/version.js
  var protocolVersion = "1";

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/request-header.js
  function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders) {
    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});
    if (timeoutMs !== void 0) {
      result.set(headerTimeout, `${timeoutMs}`);
    }
    result.set(headerContentType, methodKind == MethodKind.Unary ? useBinaryFormat ? contentTypeUnaryProto : contentTypeUnaryJson : useBinaryFormat ? contentTypeStreamProto : contentTypeStreamJson);
    result.set(headerProtocolVersion, protocolVersion);
    return result;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/validate-response.js
  function validateResponse(methodKind, status, headers) {
    const mimeType = headers.get("Content-Type");
    const parsedType = parseContentType(mimeType);
    if (status !== 200) {
      const errorFromStatus = new ConnectError(`HTTP ${status}`, codeFromHttpStatus(status), headers);
      if (methodKind == MethodKind.Unary && parsedType && !parsedType.binary) {
        return { isUnaryError: true, unaryError: errorFromStatus };
      }
      throw errorFromStatus;
    }
    return { isUnaryError: false };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/get-request.js
  var contentTypePrefix = "application/";
  function encodeMessageForUrl(message, useBase64) {
    if (useBase64) {
      return protoBase64.enc(message).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
    } else {
      return encodeURIComponent(new TextDecoder().decode(message));
    }
  }
  function transformConnectPostToGetRequest(request, message, useBase64) {
    let query = `?connect=v${protocolVersion}`;
    const contentType = request.header.get(headerContentType);
    if ((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(contentTypePrefix)) === 0) {
      query += "&encoding=" + encodeURIComponent(contentType.slice(contentTypePrefix.length));
    }
    const compression = request.header.get(headerUnaryEncoding);
    if (compression !== null && compression !== "identity") {
      query += "&compression=" + encodeURIComponent(compression);
      useBase64 = true;
    }
    if (useBase64) {
      query += "&base64=1";
    }
    query += "&message=" + encodeMessageForUrl(message, useBase64);
    const url = request.url + query;
    const header = new Headers(request.header);
    header.delete(headerProtocolVersion);
    header.delete(headerContentType);
    header.delete(headerUnaryContentLength);
    header.delete(headerUnaryEncoding);
    header.delete(headerUnaryAcceptEncoding);
    return Object.assign(Object.assign({}, request), {
      init: Object.assign(Object.assign({}, request.init), { method: "GET" }),
      url,
      header
    });
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/run-call.js
  function runUnaryCall(opt) {
    const next4 = applyInterceptors(opt.next, opt.interceptors);
    const [signal, abort, done] = setupSignal(opt);
    const req = Object.assign(Object.assign({}, opt.req), { message: normalize(opt.req.method.I, opt.req.message), signal });
    return next4(req).then((res) => {
      done();
      return res;
    }, abort);
  }
  function runStreamingCall(opt) {
    const next4 = applyInterceptors(opt.next, opt.interceptors);
    const [signal, abort, done] = setupSignal(opt);
    const req = Object.assign(Object.assign({}, opt.req), { message: normalizeIterable(opt.req.method.I, opt.req.message), signal });
    let doneCalled = false;
    signal.addEventListener("abort", function() {
      var _a5, _b;
      const it = opt.req.message[Symbol.asyncIterator]();
      if (!doneCalled) {
        (_a5 = it.throw) === null || _a5 === void 0 ? void 0 : _a5.call(it, this.reason).catch(() => {
        });
      }
      (_b = it.return) === null || _b === void 0 ? void 0 : _b.call(it).catch(() => {
      });
    });
    return next4(req).then((res) => {
      return Object.assign(Object.assign({}, res), { message: {
        [Symbol.asyncIterator]() {
          const it = res.message[Symbol.asyncIterator]();
          return {
            next() {
              return it.next().then((r3) => {
                if (r3.done == true) {
                  doneCalled = true;
                  done();
                }
                return r3;
              }, abort);
            }
            // We deliberately omit throw/return.
          };
        }
      } });
    }, abort);
  }
  function setupSignal(opt) {
    const { signal, cleanup } = createDeadlineSignal(opt.timeoutMs);
    const controller = createLinkedAbortController(opt.signal, signal);
    return [
      controller.signal,
      function abort(reason) {
        const e3 = ConnectError.from(signal.aborted ? getAbortSignalReason(signal) : reason);
        controller.abort(e3);
        cleanup();
        return Promise.reject(e3);
      },
      function done() {
        cleanup();
        controller.abort();
      }
    ];
  }
  function applyInterceptors(next4, interceptors) {
    var _a5;
    return (_a5 = interceptors === null || interceptors === void 0 ? void 0 : interceptors.concat().reverse().reduce(
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      (n6, i4) => i4(n6),
      next4
    )) !== null && _a5 !== void 0 ? _a5 : next4;
  }
  function normalize(type, message) {
    return message instanceof type ? message : new type(message);
  }
  function normalizeIterable(messageType, input) {
    function transform2(result) {
      if (result.done === true) {
        return result;
      }
      return {
        done: result.done,
        value: normalize(messageType, result.value)
      };
    }
    return {
      [Symbol.asyncIterator]() {
        const it = input[Symbol.asyncIterator]();
        const res = {
          next: () => it.next().then(transform2)
        };
        if (it.throw !== void 0) {
          res.throw = (e3) => it.throw(e3).then(transform2);
        }
        if (it.return !== void 0) {
          res.return = (v3) => it.return(v3).then(transform2);
        }
        return res;
      }
    };
  }

  // ../node_modules/@bufbuild/connect-web/dist/esm/assert-fetch-api.js
  function assertFetchApi() {
    try {
      new Headers();
    } catch (_3) {
      throw new Error("connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.");
    }
  }

  // ../node_modules/@bufbuild/connect-web/dist/esm/connect-transport.js
  var __await3 = function(v3) {
    return this instanceof __await3 ? (this.v = v3, this) : new __await3(v3);
  };
  var __asyncGenerator3 = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g3 = generator.apply(thisArg, _arguments || []), i4, q2 = [];
    return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4;
    function verb(n6) {
      if (g3[n6])
        i4[n6] = function(v3) {
          return new Promise(function(a3, b4) {
            q2.push([n6, v3, a3, b4]) > 1 || resume(n6, v3);
          });
        };
    }
    function resume(n6, v3) {
      try {
        step(g3[n6](v3));
      } catch (e3) {
        settle(q2[0][3], e3);
      }
    }
    function step(r3) {
      r3.value instanceof __await3 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f4, v3) {
      if (f4(v3), q2.shift(), q2.length)
        resume(q2[0][0], q2[0][1]);
    }
  };
  function createConnectTransport(options) {
    var _a5;
    assertFetchApi();
    const useBinaryFormat = (_a5 = options.useBinaryFormat) !== null && _a5 !== void 0 ? _a5 : false;
    return {
      async unary(service, method, signal, timeoutMs, header, message) {
        var _a6;
        const { serialize: serialize3, parse: parse3 } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
        return await runUnaryCall({
          interceptors: options.interceptors,
          signal,
          timeoutMs,
          req: {
            stream: false,
            service,
            method,
            url: createMethodUrl(options.baseUrl, service, method),
            init: {
              method: "POST",
              credentials: (_a6 = options.credentials) !== null && _a6 !== void 0 ? _a6 : "same-origin",
              redirect: "error",
              mode: "cors"
            },
            header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),
            message
          },
          next: async (req) => {
            var _a7;
            const useGet = options.useHttpGet === true && method.idempotency === MethodIdempotency.NoSideEffects;
            let body = null;
            if (useGet) {
              req = transformConnectPostToGetRequest(req, serialize3(req.message), useBinaryFormat);
            } else {
              body = serialize3(req.message);
            }
            const fetch = (_a7 = options.fetch) !== null && _a7 !== void 0 ? _a7 : globalThis.fetch;
            const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body }));
            const { isUnaryError, unaryError } = validateResponse(method.kind, response.status, response.headers);
            if (isUnaryError) {
              throw errorFromJson(await response.json(), appendHeaders(...trailerDemux(response.headers)), unaryError);
            }
            const [demuxedHeader, demuxedTrailer] = trailerDemux(response.headers);
            return {
              stream: false,
              service,
              method,
              header: demuxedHeader,
              message: useBinaryFormat ? parse3(new Uint8Array(await response.arrayBuffer())) : method.O.fromJson(await response.json(), getJsonOptions(options.jsonOptions)),
              trailer: demuxedTrailer
            };
          }
        });
      },
      async stream(service, method, signal, timeoutMs, header, input) {
        var _a6;
        const { serialize: serialize3, parse: parse3 } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
        function parseResponseBody(body, trailerTarget) {
          return __asyncGenerator3(this, arguments, function* parseResponseBody_1() {
            const reader = createEnvelopeReadableStream(body).getReader();
            let endStreamReceived = false;
            for (; ; ) {
              const result = yield __await3(reader.read());
              if (result.done) {
                break;
              }
              const { flags, data } = result.value;
              if ((flags & endStreamFlag) === endStreamFlag) {
                endStreamReceived = true;
                const endStream = endStreamFromJson(data);
                if (endStream.error) {
                  throw endStream.error;
                }
                endStream.metadata.forEach((value, key) => trailerTarget.set(key, value));
                continue;
              }
              yield yield __await3(parse3(data));
            }
            if (!endStreamReceived) {
              throw "missing EndStreamResponse";
            }
          });
        }
        async function createRequestBody(input2) {
          if (method.kind != MethodKind.ServerStreaming) {
            throw "The fetch API does not support streaming request bodies";
          }
          const r3 = await input2[Symbol.asyncIterator]().next();
          if (r3.done == true) {
            throw "missing request message";
          }
          return encodeEnvelope(0, serialize3(r3.value));
        }
        return await runStreamingCall({
          interceptors: options.interceptors,
          timeoutMs,
          signal,
          req: {
            stream: true,
            service,
            method,
            url: createMethodUrl(options.baseUrl, service, method),
            init: {
              method: "POST",
              credentials: (_a6 = options.credentials) !== null && _a6 !== void 0 ? _a6 : "same-origin",
              redirect: "error",
              mode: "cors"
            },
            header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),
            message: input
          },
          next: async (req) => {
            var _a7;
            const fetch = (_a7 = options.fetch) !== null && _a7 !== void 0 ? _a7 : globalThis.fetch;
            const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));
            validateResponse(method.kind, fRes.status, fRes.headers);
            if (fRes.body === null) {
              throw "missing response body";
            }
            const trailer = new Headers();
            const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, trailer) });
            return res;
          }
        });
      }
    };
  }

  // src/rpc/user/user_pb.ts
  var GroupInfoRequest = class _GroupInfoRequest extends Message {
    /**
     * @generated from field: string secret = 1;
     */
    secret = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.GroupInfoRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "secret",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GroupInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GroupInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GroupInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GroupInfoRequest, a3, b4);
    }
  };
  var GroupID = class _GroupID extends Message {
    /**
     * @generated from field: string group_id = 1;
     */
    groupId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.GroupID";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "group_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GroupID().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GroupID().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GroupID().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GroupID, a3, b4);
    }
  };
  var ShareRequest = class _ShareRequest extends Message {
    /**
     * @generated from field: string content_id = 1;
     */
    contentId = "";
    /**
     * @generated from field: string group_id = 2;
     */
    groupId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.ShareRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "content_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "group_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _ShareRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ShareRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ShareRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_ShareRequest, a3, b4);
    }
  };
  var GroupInvite = class _GroupInvite extends Message {
    /**
     * @generated from field: string secret = 1;
     */
    secret = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.GroupInvite";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "secret",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GroupInvite().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GroupInvite().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GroupInvite().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GroupInvite, a3, b4);
    }
  };
  var Groups = class _Groups extends Message {
    /**
     * @generated from field: repeated user.Group groups = 1;
     */
    groups = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.Groups";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "groups", kind: "message", T: Group, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Groups().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Groups().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Groups().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Groups, a3, b4);
    }
  };
  var AnalyzeConversationRequest = class _AnalyzeConversationRequest extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.AnalyzeConversationRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _AnalyzeConversationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeConversationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeConversationRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_AnalyzeConversationRequest, a3, b4);
    }
  };
  var User = class _User extends Message {
    /**
     * @generated from field: string email = 1;
     */
    email = "";
    /**
     * @generated from field: string password = 2;
     */
    password = "";
    /**
     * @generated from field: user.Config config = 3;
     */
    config;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.User";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "email",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "password",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "config", kind: "message", T: Config }
    ]);
    static fromBinary(bytes, options) {
      return new _User().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _User().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _User().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_User, a3, b4);
    }
  };
  var Group = class _Group extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated string users = 3;
     */
    users = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.Group";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "users", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Group().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Group().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Group().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Group, a3, b4);
    }
  };
  var Config = class _Config extends Message {
    /**
     * @generated from field: repeated string domain_whitelist = 1;
     */
    domainWhitelist = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.Config";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "domain_whitelist", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Config().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Config().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Config().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Config, a3, b4);
    }
  };
  var LoginResponse = class _LoginResponse extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.LoginResponse";
    static fields = proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
      return new _LoginResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _LoginResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _LoginResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_LoginResponse, a3, b4);
    }
  };

  // src/rpc/content/content_pb.ts
  var SetTagsRequest = class _SetTagsRequest extends Message {
    /**
     * @generated from field: string content_id = 1;
     */
    contentId = "";
    /**
     * @generated from field: repeated string tags = 2;
     */
    tags = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.SetTagsRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "content_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 2, name: "tags", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _SetTagsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _SetTagsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _SetTagsRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_SetTagsRequest, a3, b4);
    }
  };
  var TagRequest = class _TagRequest extends Message {
    /**
     * @generated from field: string group_id = 1;
     */
    groupId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.TagRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "group_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _TagRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _TagRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _TagRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_TagRequest, a3, b4);
    }
  };
  var VoteRequest = class _VoteRequest extends Message {
    /**
     * @generated from field: string content_id = 1;
     */
    contentId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.VoteRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "content_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _VoteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _VoteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _VoteRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_VoteRequest, a3, b4);
    }
  };
  var VoteResponse = class _VoteResponse extends Message {
    /**
     * @generated from field: uint32 votes = 1;
     */
    votes = 0;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.VoteResponse";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "votes",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _VoteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _VoteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _VoteResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_VoteResponse, a3, b4);
    }
  };
  var Tags = class _Tags extends Message {
    /**
     * @generated from field: repeated content.Tag tags = 1;
     */
    tags = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Tags";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "tags", kind: "message", T: Tag, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Tags().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Tags().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Tags().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Tags, a3, b4);
    }
  };
  var Tag = class _Tag extends Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from field: repeated content.Tag sub_tags = 2;
     */
    subTags = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Tag";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 2, name: "sub_tags", kind: "message", T: _Tag, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Tag().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Tag().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Tag().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Tag, a3, b4);
    }
  };
  var ContentIDs = class _ContentIDs extends Message {
    /**
     * @generated from field: repeated string content_ids = 1;
     */
    contentIds = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.ContentIDs";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "content_ids", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _ContentIDs().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ContentIDs().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ContentIDs().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_ContentIDs, a3, b4);
    }
  };
  var Contents = class _Contents extends Message {
    /**
     * @generated from field: content.Content content = 1;
     */
    content;
    /**
     * @generated from field: repeated content.Content related = 2;
     */
    related = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Contents";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "content", kind: "message", T: Content },
      { no: 2, name: "related", kind: "message", T: Content, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Contents().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Contents().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Contents().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Contents, a3, b4);
    }
  };
  var Query = class _Query extends Message {
    /**
     * @generated from field: string query = 1;
     */
    query = "";
    /**
     * @generated from field: uint32 page = 2;
     */
    page = 0;
    /**
     * @generated from field: string contentID = 3;
     */
    contentID = "";
    /**
     * @generated from field: string groupID = 4;
     */
    groupID = "";
    /**
     * @generated from field: repeated string tags = 5;
     */
    tags = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Query";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "query",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "page",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 3,
        name: "contentID",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 4,
        name: "groupID",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 5, name: "tags", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Query().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Query().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Query().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Query, a3, b4);
    }
  };
  var Results = class _Results extends Message {
    /**
     * @generated from field: repeated content.StoredContent storedContent = 1;
     */
    storedContent = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Results";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "storedContent", kind: "message", T: StoredContent, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Results().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Results().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Results().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Results, a3, b4);
    }
  };
  var StoredContent = class _StoredContent extends Message {
    /**
     * @generated from field: content.Content content = 1;
     */
    content;
    /**
     * @generated from field: string id = 2;
     */
    id = "";
    /**
     * @generated from field: repeated content.Content related = 3;
     */
    related = [];
    /**
     * @generated from field: string title = 4;
     */
    title = "";
    /**
     * @generated from field: string description = 5;
     */
    description = "";
    /**
     * @generated from field: string image = 6;
     */
    image = "";
    /**
     * @generated from field: string url = 7;
     */
    url = "";
    /**
     * @generated from field: int32 votes = 8;
     */
    votes = 0;
    /**
     * @generated from field: user.User user = 9;
     */
    user;
    /**
     * @generated from field: repeated content.Tag tags = 10;
     */
    tags = [];
    /**
     * @generated from field: string preview = 11;
     */
    preview = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.StoredContent";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "content", kind: "message", T: Content },
      {
        no: 2,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "related", kind: "message", T: Content, repeated: true },
      {
        no: 4,
        name: "title",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 5,
        name: "description",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 6,
        name: "image",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 7,
        name: "url",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 8,
        name: "votes",
        kind: "scalar",
        T: 5
        /* ScalarType.INT32 */
      },
      { no: 9, name: "user", kind: "message", T: User },
      { no: 10, name: "tags", kind: "message", T: Tag, repeated: true },
      {
        no: 11,
        name: "preview",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _StoredContent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _StoredContent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _StoredContent().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_StoredContent, a3, b4);
    }
  };
  var Edge = class _Edge extends Message {
    /**
     * @generated from field: string from = 1;
     */
    from = "";
    /**
     * @generated from field: string to = 2;
     */
    to = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Edge";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "from",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "to",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Edge().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Edge().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Edge().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Edge, a3, b4);
    }
  };
  var Content = class _Content extends Message {
    /**
     * @generated from field: repeated string tags = 1;
     */
    tags = [];
    /**
     * @generated from field: string created_at = 2;
     */
    createdAt = "";
    /**
     * @generated from field: string uri = 3;
     */
    uri = "";
    /**
     * @generated from field: string id = 4;
     */
    id = "";
    /**
     * @generated from oneof content.Content.type
     */
    type = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Content";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "tags", kind: "scalar", T: 9, repeated: true },
      {
        no: 2,
        name: "created_at",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 3,
        name: "uri",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 4,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 6, name: "data", kind: "message", T: Data, oneof: "type" },
      { no: 7, name: "normalized", kind: "message", T: Normalized, oneof: "type" },
      { no: 8, name: "transformed", kind: "message", T: Transformed, oneof: "type" }
    ]);
    static fromBinary(bytes, options) {
      return new _Content().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Content().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Content().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Content, a3, b4);
    }
  };
  var GitRepo = class _GitRepo extends Message {
    /**
     * @generated from field: string url = 1;
     */
    url = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.GitRepo";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "url",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GitRepo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GitRepo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GitRepo().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GitRepo, a3, b4);
    }
  };
  var Data = class _Data extends Message {
    /**
     * @generated from oneof content.Data.type
     */
    type = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Data";
    static fields = proto3.util.newFieldList(() => [
      { no: 4, name: "text", kind: "message", T: Text, oneof: "type" },
      { no: 5, name: "file", kind: "message", T: File, oneof: "type" },
      { no: 6, name: "url", kind: "message", T: URL2, oneof: "type" }
    ]);
    static fromBinary(bytes, options) {
      return new _Data().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Data().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Data().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Data, a3, b4);
    }
  };
  var Normalized = class _Normalized extends Message {
    /**
     * @generated from oneof content.Normalized.type
     */
    type = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Normalized";
    static fields = proto3.util.newFieldList(() => [
      { no: 3, name: "article", kind: "message", T: Article, oneof: "type" },
      { no: 4, name: "html", kind: "message", T: HTML, oneof: "type" },
      { no: 6, name: "transcript", kind: "message", T: Transcript, oneof: "type" },
      { no: 7, name: "readme", kind: "message", T: ReadMe, oneof: "type" }
    ]);
    static fromBinary(bytes, options) {
      return new _Normalized().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Normalized().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Normalized().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Normalized, a3, b4);
    }
  };
  var Transformed = class _Transformed extends Message {
    /**
     * @generated from oneof content.Transformed.type
     */
    type = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Transformed";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "summary", kind: "message", T: Summary, oneof: "type" },
      { no: 2, name: "categories", kind: "message", T: Categories, oneof: "type" }
    ]);
    static fromBinary(bytes, options) {
      return new _Transformed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Transformed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Transformed().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Transformed, a3, b4);
    }
  };
  var Article = class _Article extends Message {
    /**
     * @generated from field: string title = 1;
     */
    title = "";
    /**
     * @generated from field: string author = 2;
     */
    author = "";
    /**
     * @generated from field: int32 length = 3;
     */
    length = 0;
    /**
     * @generated from field: string excerpt = 4;
     */
    excerpt = "";
    /**
     * @generated from field: string site_name = 5;
     */
    siteName = "";
    /**
     * @generated from field: string image = 6;
     */
    image = "";
    /**
     * @generated from field: string favicon = 7;
     */
    favicon = "";
    /**
     * @generated from field: string text = 8;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Article";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "title",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "author",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 3,
        name: "length",
        kind: "scalar",
        T: 5
        /* ScalarType.INT32 */
      },
      {
        no: 4,
        name: "excerpt",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 5,
        name: "site_name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 6,
        name: "image",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 7,
        name: "favicon",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 8,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Article().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Article().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Article().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Article, a3, b4);
    }
  };
  var HTML = class _HTML extends Message {
    /**
     * @generated from field: string html = 1;
     */
    html = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.HTML";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "html",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _HTML().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _HTML().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _HTML().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_HTML, a3, b4);
    }
  };
  var ReadMe = class _ReadMe extends Message {
    /**
     * @generated from field: string data = 1;
     */
    data = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.ReadMe";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "data",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _ReadMe().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ReadMe().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ReadMe().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_ReadMe, a3, b4);
    }
  };
  var Summary = class _Summary extends Message {
    /**
     * @generated from field: string summary = 1;
     */
    summary = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Summary";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "summary",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Summary().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Summary().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Summary().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Summary, a3, b4);
    }
  };
  var Categories = class _Categories extends Message {
    /**
     * @generated from field: repeated string categories = 1;
     */
    categories = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Categories";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "categories", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Categories().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Categories().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Categories().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Categories, a3, b4);
    }
  };
  var File = class _File extends Message {
    /**
     * @generated from field: string file = 1;
     */
    file = "";
    /**
     * @generated from field: bytes data = 2;
     */
    data = new Uint8Array(0);
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.File";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "file",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "data",
        kind: "scalar",
        T: 12
        /* ScalarType.BYTES */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _File().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _File().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _File().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_File, a3, b4);
    }
  };
  var Text = class _Text extends Message {
    /**
     * @generated from field: string data = 1;
     */
    data = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Text";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "data",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Text().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Text().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Text().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Text, a3, b4);
    }
  };
  var URL2 = class _URL extends Message {
    /**
     * @generated from field: string url = 1;
     */
    url = "";
    /**
     * @generated from field: bool crawl = 2;
     */
    crawl = false;
    /**
     * @generated from field: string title = 3;
     */
    title = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.URL";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "url",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "crawl",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 3,
        name: "title",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _URL().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _URL().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _URL().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_URL, a3, b4);
    }
  };
  var Token = class _Token extends Message {
    /**
     * @generated from field: uint32 id = 1;
     */
    id = 0;
    /**
     * @generated from field: uint64 start_time = 2;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 3;
     */
    endTime = protoInt64.zero;
    /**
     * @generated from field: string text = 4;
     */
    text = "";
    /**
     * @generated from field: string p = 5;
     */
    p = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Token";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 2,
        name: "start_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 3,
        name: "end_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 4,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 5,
        name: "p",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Token().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Token().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Token().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Token, a3, b4);
    }
  };
  var Segment = class _Segment extends Message {
    /**
     * @generated from field: uint32 num = 1;
     */
    num = 0;
    /**
     * @generated from field: repeated content.Token tokens = 2;
     */
    tokens = [];
    /**
     * @generated from field: string text = 3;
     */
    text = "";
    /**
     * @generated from field: uint64 start_time = 4;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 5;
     */
    endTime = protoInt64.zero;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Segment";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "num",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      { no: 2, name: "tokens", kind: "message", T: Token, repeated: true },
      {
        no: 3,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 4,
        name: "start_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 5,
        name: "end_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Segment().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Segment().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Segment().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Segment, a3, b4);
    }
  };
  var Transcript = class _Transcript extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated content.Segment segments = 3;
     */
    segments = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Transcript";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "segments", kind: "message", T: Segment, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Transcript().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Transcript().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Transcript().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Transcript, a3, b4);
    }
  };

  // src/rpc/protoflow_pb.ts
  var AnalyzeConversationRequest2 = class _AnalyzeConversationRequest extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.AnalyzeConversationRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _AnalyzeConversationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeConversationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeConversationRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_AnalyzeConversationRequest, a3, b4);
    }
  };
  var GenerateImagesRequest = class _GenerateImagesRequest extends Message {
    /**
     * @generated from field: string prompt = 1;
     */
    prompt = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GenerateImagesRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "prompt",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GenerateImagesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GenerateImagesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GenerateImagesRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GenerateImagesRequest, a3, b4);
    }
  };
  var GenerateImagesResponse = class _GenerateImagesResponse extends Message {
    /**
     * @generated from field: repeated string images = 1;
     */
    images = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GenerateImagesResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "images", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _GenerateImagesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GenerateImagesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GenerateImagesResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GenerateImagesResponse, a3, b4);
    }
  };
  var DeleteSessionRequest = class _DeleteSessionRequest extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.DeleteSessionRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _DeleteSessionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _DeleteSessionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _DeleteSessionRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_DeleteSessionRequest, a3, b4);
    }
  };
  var Prompt = class _Prompt extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string text = 2;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Prompt";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Prompt().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Prompt().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Prompt().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Prompt, a3, b4);
    }
  };
  var GetPromptsRequest = class _GetPromptsRequest extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetPromptsRequest";
    static fields = proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
      return new _GetPromptsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetPromptsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetPromptsRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GetPromptsRequest, a3, b4);
    }
  };
  var GetPromptsResponse = class _GetPromptsResponse extends Message {
    /**
     * @generated from field: repeated protoflow.Prompt prompts = 1;
     */
    prompts = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetPromptsResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "prompts", kind: "message", T: Prompt, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _GetPromptsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetPromptsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetPromptsResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GetPromptsResponse, a3, b4);
    }
  };
  var InferRequest = class _InferRequest extends Message {
    /**
     * @generated from field: string prompt = 1;
     */
    prompt = "";
    /**
     * @generated from field: repeated string text = 2;
     */
    text = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.InferRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "prompt",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 2, name: "text", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _InferRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _InferRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _InferRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_InferRequest, a3, b4);
    }
  };
  var InferResponse = class _InferResponse extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.InferResponse";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _InferResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _InferResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _InferResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_InferResponse, a3, b4);
    }
  };
  var UploadContentRequest = class _UploadContentRequest extends Message {
    /**
     * @generated from field: content.Content content = 1;
     */
    content;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.UploadContentRequest";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "content", kind: "message", T: Content }
    ]);
    static fromBinary(bytes, options) {
      return new _UploadContentRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _UploadContentRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _UploadContentRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_UploadContentRequest, a3, b4);
    }
  };
  var UploadContentResponse = class _UploadContentResponse extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.UploadContentResponse";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _UploadContentResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _UploadContentResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _UploadContentResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_UploadContentResponse, a3, b4);
    }
  };
  var GetSessionRequest = class _GetSessionRequest extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetSessionRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GetSessionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GetSessionRequest, a3, b4);
    }
  };
  var GetSessionResponse = class _GetSessionResponse extends Message {
    /**
     * @generated from field: protoflow.Session session = 1;
     */
    session;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetSessionResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "session", kind: "message", T: Session }
    ]);
    static fromBinary(bytes, options) {
      return new _GetSessionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GetSessionResponse, a3, b4);
    }
  };
  var GetSessionsRequest = class _GetSessionsRequest extends Message {
    /**
     * @generated from field: uint64 page = 1;
     */
    page = protoInt64.zero;
    /**
     * @generated from field: uint64 limit = 2;
     */
    limit = protoInt64.zero;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetSessionsRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "page",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 2,
        name: "limit",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GetSessionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GetSessionsRequest, a3, b4);
    }
  };
  var GetSessionsResponse = class _GetSessionsResponse extends Message {
    /**
     * @generated from field: repeated protoflow.Session sessions = 1;
     */
    sessions = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetSessionsResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "sessions", kind: "message", T: Session, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _GetSessionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_GetSessionsResponse, a3, b4);
    }
  };
  var Token2 = class _Token extends Message {
    /**
     * @generated from field: uint32 id = 1;
     */
    id = 0;
    /**
     * @generated from field: uint64 start_time = 2;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 3;
     */
    endTime = protoInt64.zero;
    /**
     * @generated from field: string text = 4;
     */
    text = "";
    /**
     * @generated from field: string p = 5;
     */
    p = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Token";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 2,
        name: "start_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 3,
        name: "end_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 4,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 5,
        name: "p",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Token().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Token().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Token().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Token, a3, b4);
    }
  };
  var Segment2 = class _Segment extends Message {
    /**
     * @generated from field: uint32 num = 1;
     */
    num = 0;
    /**
     * @generated from field: repeated protoflow.Token tokens = 2;
     */
    tokens = [];
    /**
     * @generated from field: string text = 3;
     */
    text = "";
    /**
     * @generated from field: uint64 start_time = 4;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 5;
     */
    endTime = protoInt64.zero;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Segment";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "num",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      { no: 2, name: "tokens", kind: "message", T: Token2, repeated: true },
      {
        no: 3,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 4,
        name: "start_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 5,
        name: "end_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Segment().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Segment().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Segment().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Segment, a3, b4);
    }
  };
  var Session = class _Session extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated protoflow.Segment segments = 3;
     */
    segments = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Session";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "segments", kind: "message", T: Segment2, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Session().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Session().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Session().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Session, a3, b4);
    }
  };
  var TranscriptionRequest = class _TranscriptionRequest extends Message {
    /**
     * @generated from field: string file_path = 14;
     */
    filePath = "";
    /**
     * Path to the model file
     *
     * @generated from field: string model = 1;
     */
    model = "";
    /**
     * Spoken language
     *
     * @generated from field: string language = 2;
     */
    language = "";
    /**
     * Translate from source language to English
     *
     * @generated from field: bool translate = 3;
     */
    translate = false;
    /**
     * Time offset in nanoseconds to match Go's time.Duration
     *
     * @generated from field: int64 offset = 4;
     */
    offset = protoInt64.zero;
    /**
     * Duration of audio to process in nanoseconds
     *
     * @generated from field: int64 duration = 5;
     */
    duration = protoInt64.zero;
    /**
     * Number of threads to use
     *
     * @generated from field: uint32 threads = 6;
     */
    threads = 0;
    /**
     * Enable speedup
     *
     * @generated from field: bool speedup = 7;
     */
    speedup = false;
    /**
     * Maximum segment length in characters
     *
     * @generated from field: uint32 max_len = 8;
     */
    maxLen = 0;
    /**
     * Maximum tokens per segment
     *
     * @generated from field: uint32 max_tokens = 9;
     */
    maxTokens = 0;
    /**
     * Maximum segment score
     *
     * @generated from field: double word_threshold = 10;
     */
    wordThreshold = 0;
    /**
     * Display tokens
     *
     * @generated from field: bool tokens = 11;
     */
    tokens = false;
    /**
     * Colorize tokens
     *
     * @generated from field: bool colorize = 12;
     */
    colorize = false;
    /**
     * Output format (srt, none or leave as empty string)
     *
     * @generated from field: string out = 13;
     */
    out = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.TranscriptionRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 14,
        name: "file_path",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 1,
        name: "model",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "language",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 3,
        name: "translate",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 4,
        name: "offset",
        kind: "scalar",
        T: 3
        /* ScalarType.INT64 */
      },
      {
        no: 5,
        name: "duration",
        kind: "scalar",
        T: 3
        /* ScalarType.INT64 */
      },
      {
        no: 6,
        name: "threads",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 7,
        name: "speedup",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 8,
        name: "max_len",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 9,
        name: "max_tokens",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 10,
        name: "word_threshold",
        kind: "scalar",
        T: 1
        /* ScalarType.DOUBLE */
      },
      {
        no: 11,
        name: "tokens",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 12,
        name: "colorize",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 13,
        name: "out",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _TranscriptionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _TranscriptionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _TranscriptionRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_TranscriptionRequest, a3, b4);
    }
  };
  var RegisterFlags = class _RegisterFlags extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.RegisterFlags";
    static fields = proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
      return new _RegisterFlags().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _RegisterFlags().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _RegisterFlags().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_RegisterFlags, a3, b4);
    }
  };
  var OCRText = class _OCRText extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.OCRText";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _OCRText().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _OCRText().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _OCRText().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_OCRText, a3, b4);
    }
  };
  var Image = class _Image extends Message {
    /**
     * @generated from field: bytes image = 1;
     */
    image = new Uint8Array(0);
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Image";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "image",
        kind: "scalar",
        T: 12
        /* ScalarType.BYTES */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Image().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Image().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Image().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_Image, a3, b4);
    }
  };
  var ConvertFileRequest = class _ConvertFileRequest extends Message {
    /**
     * @generated from field: string from = 1;
     */
    from = "";
    /**
     * @generated from field: string to = 2;
     */
    to = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.ConvertFileRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "from",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "to",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _ConvertFileRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ConvertFileRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ConvertFileRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_ConvertFileRequest, a3, b4);
    }
  };
  var ChatRequest = class _ChatRequest extends Message {
    /**
     * @generated from field: int32 capture_device = 1;
     */
    captureDevice = 0;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.ChatRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "capture_device",
        kind: "scalar",
        T: 5
        /* ScalarType.INT32 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _ChatRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ChatRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ChatRequest().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_ChatRequest, a3, b4);
    }
  };
  var ChatResponse = class _ChatResponse extends Message {
    /**
     * @generated from field: protoflow.Segment segment = 1;
     */
    segment;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.ChatResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "segment", kind: "message", T: Segment2 }
    ]);
    static fromBinary(bytes, options) {
      return new _ChatResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ChatResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ChatResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_ChatResponse, a3, b4);
    }
  };
  var YouTubeVideo = class _YouTubeVideo extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string file = 2;
     */
    file = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.YouTubeVideo";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "file",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _YouTubeVideo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _YouTubeVideo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _YouTubeVideo().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_YouTubeVideo, a3, b4);
    }
  };
  var FilePath = class _FilePath extends Message {
    /**
     * @generated from field: string file = 1;
     */
    file = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.FilePath";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "file",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _FilePath().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _FilePath().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _FilePath().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_FilePath, a3, b4);
    }
  };
  var YouTubeVideoResponse = class _YouTubeVideoResponse extends Message {
    /**
     * @generated from field: string title = 1;
     */
    title = "";
    /**
     * @generated from field: protoflow.FilePath file_path = 2;
     */
    filePath;
    /**
     * @generated from field: repeated protoflow.Segment transcript = 3;
     */
    transcript = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.YouTubeVideoResponse";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "title",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 2, name: "file_path", kind: "message", T: FilePath },
      { no: 3, name: "transcript", kind: "message", T: Segment2, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _YouTubeVideoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _YouTubeVideoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _YouTubeVideoResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_YouTubeVideoResponse, a3, b4);
    }
  };

  // src/rpc/ai_pb.ts
  var AnalyzeConversationResponse = class _AnalyzeConversationResponse extends Message {
    /**
     * Phone numbers of the participants
     *
     * @generated from field: repeated string phone_numbers = 1;
     */
    phoneNumbers = [];
    /**
     * The summary of the conversation
     *
     * @generated from field: string summary = 2;
     */
    summary = "";
    /**
     * Based on the content of the conversation, the system will generate a list of questions
     *
     * @generated from field: repeated string questions = 3;
     */
    questions = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "ai.AnalyzeConversationResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "phone_numbers", kind: "scalar", T: 9, repeated: true },
      {
        no: 2,
        name: "summary",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "questions", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _AnalyzeConversationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeConversationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeConversationResponse().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_AnalyzeConversationResponse, a3, b4);
    }
  };
  var AnalyzeContent = class _AnalyzeContent extends Message {
    /**
     * Potential categories for the content in the form: category/subcategory/other-category. The category is all lowercase and spaces are replaced with dashes.
     *
     * @generated from field: repeated string categories = 1;
     */
    categories = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "ai.AnalyzeContent";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "categories", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _AnalyzeContent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeContent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeContent().fromJsonString(jsonString, options);
    }
    static equals(a3, b4) {
      return proto3.util.equals(_AnalyzeContent, a3, b4);
    }
  };

  // src/rpc/protoflow_connect.ts
  var ProtoflowService = {
    typeName: "protoflow.ProtoflowService",
    methods: {
      /**
       * @generated from rpc protoflow.ProtoflowService.DownloadYouTubeVideo
       */
      downloadYouTubeVideo: {
        name: "DownloadYouTubeVideo",
        I: YouTubeVideo,
        O: YouTubeVideoResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GetSessions
       */
      getSessions: {
        name: "GetSessions",
        I: GetSessionsRequest,
        O: GetSessionsResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GetSession
       */
      getSession: {
        name: "GetSession",
        I: GetSessionRequest,
        O: GetSessionResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.DeleteSession
       */
      deleteSession: {
        name: "DeleteSession",
        I: DeleteSessionRequest,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GetPrompts
       */
      getPrompts: {
        name: "GetPrompts",
        I: GetPromptsRequest,
        O: GetPromptsResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.NewPrompt
       */
      newPrompt: {
        name: "NewPrompt",
        I: Prompt,
        O: Prompt,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.UploadContent
       */
      uploadContent: {
        name: "UploadContent",
        I: UploadContentRequest,
        O: ChatResponse,
        kind: MethodKind.ServerStreaming
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.Infer
       */
      infer: {
        name: "Infer",
        I: InferRequest,
        O: InferResponse,
        kind: MethodKind.ServerStreaming
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.Chat
       */
      chat: {
        name: "Chat",
        I: ChatRequest,
        O: ChatResponse,
        kind: MethodKind.ServerStreaming
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.ConvertFile
       */
      convertFile: {
        name: "ConvertFile",
        I: ConvertFileRequest,
        O: FilePath,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GenerateImages
       */
      generateImages: {
        name: "GenerateImages",
        I: GenerateImagesRequest,
        O: GenerateImagesResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.AnalyzeConversation
       */
      analyzeConversation: {
        name: "AnalyzeConversation",
        I: AnalyzeConversationRequest2,
        O: AnalyzeConversationResponse,
        kind: MethodKind.Unary
      }
    }
  };

  // src/rpc/content/content_connect.ts
  var ContentService = {
    typeName: "content.ContentService",
    methods: {
      /**
       * @generated from rpc content.ContentService.Save
       */
      save: {
        name: "Save",
        I: Contents,
        O: ContentIDs,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.Search
       */
      search: {
        name: "Search",
        I: Query,
        O: Results,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.Analyze
       */
      analyze: {
        name: "Analyze",
        I: Content,
        O: Contents,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.Delete
       */
      delete: {
        name: "Delete",
        I: ContentIDs,
        O: ContentIDs,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.GetTags
       */
      getTags: {
        name: "GetTags",
        I: TagRequest,
        O: Tags,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.SetTags
       */
      setTags: {
        name: "SetTags",
        I: SetTagsRequest,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.Vote
       */
      vote: {
        name: "Vote",
        I: VoteRequest,
        O: VoteResponse,
        kind: MethodKind.Unary
      }
    }
  };

  // src/rpc/user/user_connect.ts
  var UserService = {
    typeName: "user.UserService",
    methods: {
      /**
       * @generated from rpc user.UserService.Register
       */
      register: {
        name: "Register",
        I: User,
        O: User,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.Login
       */
      login: {
        name: "Login",
        I: User,
        O: User,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.Logout
       */
      logout: {
        name: "Logout",
        I: Empty,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.UpdateConfig
       */
      updateConfig: {
        name: "UpdateConfig",
        I: Config,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.CreateGroupInvite
       */
      createGroupInvite: {
        name: "CreateGroupInvite",
        I: GroupID,
        O: GroupInvite,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.JoinGroup
       */
      joinGroup: {
        name: "JoinGroup",
        I: GroupInvite,
        O: Group,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.GroupInfo
       */
      groupInfo: {
        name: "GroupInfo",
        I: GroupInfoRequest,
        O: Group,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.CreateGroup
       */
      createGroup: {
        name: "CreateGroup",
        I: Group,
        O: Group,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.GetGroups
       */
      getGroups: {
        name: "GetGroups",
        I: Empty,
        O: Groups,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.DeleteGroup
       */
      deleteGroup: {
        name: "DeleteGroup",
        I: Group,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.Share
       */
      share: {
        name: "Share",
        I: ShareRequest,
        O: Empty,
        kind: MethodKind.Unary
      }
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/subscribable.mjs
  var Subscribable2 = class {
    constructor() {
      this.listeners = /* @__PURE__ */ new Set();
      this.subscribe = this.subscribe.bind(this);
    }
    subscribe(listener) {
      const identity = {
        listener
      };
      this.listeners.add(identity);
      this.onSubscribe();
      return () => {
        this.listeners.delete(identity);
        this.onUnsubscribe();
      };
    }
    hasListeners() {
      return this.listeners.size > 0;
    }
    onSubscribe() {
    }
    onUnsubscribe() {
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/utils.mjs
  var isServer = typeof window === "undefined" || "Deno" in window;
  function noop4() {
    return void 0;
  }
  function functionalUpdate(updater, input) {
    return typeof updater === "function" ? updater(input) : updater;
  }
  function isValidTimeout(value) {
    return typeof value === "number" && value >= 0 && value !== Infinity;
  }
  function timeUntilStale(updatedAt, staleTime) {
    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
  }
  function parseQueryArgs(arg1, arg2, arg3) {
    if (!isQueryKey(arg1)) {
      return arg1;
    }
    if (typeof arg2 === "function") {
      return {
        ...arg3,
        queryKey: arg1,
        queryFn: arg2
      };
    }
    return {
      ...arg2,
      queryKey: arg1
    };
  }
  function parseFilterArgs(arg1, arg2, arg3) {
    return isQueryKey(arg1) ? [{
      ...arg2,
      queryKey: arg1
    }, arg3] : [arg1 || {}, arg2];
  }
  function matchQuery(filters, query) {
    const {
      type = "all",
      exact,
      fetchStatus,
      predicate,
      queryKey,
      stale
    } = filters;
    if (isQueryKey(queryKey)) {
      if (exact) {
        if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
          return false;
        }
      } else if (!partialMatchKey(query.queryKey, queryKey)) {
        return false;
      }
    }
    if (type !== "all") {
      const isActive = query.isActive();
      if (type === "active" && !isActive) {
        return false;
      }
      if (type === "inactive" && isActive) {
        return false;
      }
    }
    if (typeof stale === "boolean" && query.isStale() !== stale) {
      return false;
    }
    if (typeof fetchStatus !== "undefined" && fetchStatus !== query.state.fetchStatus) {
      return false;
    }
    if (predicate && !predicate(query)) {
      return false;
    }
    return true;
  }
  function matchMutation(filters, mutation) {
    const {
      exact,
      fetching,
      predicate,
      mutationKey
    } = filters;
    if (isQueryKey(mutationKey)) {
      if (!mutation.options.mutationKey) {
        return false;
      }
      if (exact) {
        if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
          return false;
        }
      } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
        return false;
      }
    }
    if (typeof fetching === "boolean" && mutation.state.status === "loading" !== fetching) {
      return false;
    }
    if (predicate && !predicate(mutation)) {
      return false;
    }
    return true;
  }
  function hashQueryKeyByOptions(queryKey, options) {
    const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
    return hashFn(queryKey);
  }
  function hashQueryKey(queryKey) {
    return JSON.stringify(queryKey, (_3, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {
      result[key] = val[key];
      return result;
    }, {}) : val);
  }
  function partialMatchKey(a3, b4) {
    return partialDeepEqual(a3, b4);
  }
  function partialDeepEqual(a3, b4) {
    if (a3 === b4) {
      return true;
    }
    if (typeof a3 !== typeof b4) {
      return false;
    }
    if (a3 && b4 && typeof a3 === "object" && typeof b4 === "object") {
      return !Object.keys(b4).some((key) => !partialDeepEqual(a3[key], b4[key]));
    }
    return false;
  }
  function replaceEqualDeep(a3, b4) {
    if (a3 === b4) {
      return a3;
    }
    const array = isPlainArray(a3) && isPlainArray(b4);
    if (array || isPlainObject(a3) && isPlainObject(b4)) {
      const aSize = array ? a3.length : Object.keys(a3).length;
      const bItems = array ? b4 : Object.keys(b4);
      const bSize = bItems.length;
      const copy2 = array ? [] : {};
      let equalItems = 0;
      for (let i4 = 0; i4 < bSize; i4++) {
        const key = array ? i4 : bItems[i4];
        copy2[key] = replaceEqualDeep(a3[key], b4[key]);
        if (copy2[key] === a3[key]) {
          equalItems++;
        }
      }
      return aSize === bSize && equalItems === aSize ? a3 : copy2;
    }
    return b4;
  }
  function isPlainArray(value) {
    return Array.isArray(value) && value.length === Object.keys(value).length;
  }
  function isPlainObject(o3) {
    if (!hasObjectPrototype(o3)) {
      return false;
    }
    const ctor = o3.constructor;
    if (typeof ctor === "undefined") {
      return true;
    }
    const prot = ctor.prototype;
    if (!hasObjectPrototype(prot)) {
      return false;
    }
    if (!prot.hasOwnProperty("isPrototypeOf")) {
      return false;
    }
    return true;
  }
  function hasObjectPrototype(o3) {
    return Object.prototype.toString.call(o3) === "[object Object]";
  }
  function isQueryKey(value) {
    return Array.isArray(value);
  }
  function sleep(timeout) {
    return new Promise((resolve2) => {
      setTimeout(resolve2, timeout);
    });
  }
  function scheduleMicrotask(callback) {
    sleep(0).then(callback);
  }
  function getAbortController() {
    if (typeof AbortController === "function") {
      return new AbortController();
    }
    return;
  }
  function replaceData(prevData, data, options) {
    if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {
      return prevData;
    } else if (typeof options.structuralSharing === "function") {
      return options.structuralSharing(prevData, data);
    } else if (options.structuralSharing !== false) {
      return replaceEqualDeep(prevData, data);
    }
    return data;
  }

  // ../node_modules/@tanstack/query-core/build/lib/focusManager.mjs
  var FocusManager = class extends Subscribable2 {
    constructor() {
      super();
      this.setup = (onFocus) => {
        if (!isServer && window.addEventListener) {
          const listener = () => onFocus();
          window.addEventListener("visibilitychange", listener, false);
          window.addEventListener("focus", listener, false);
          return () => {
            window.removeEventListener("visibilitychange", listener);
            window.removeEventListener("focus", listener);
          };
        }
        return;
      };
    }
    onSubscribe() {
      if (!this.cleanup) {
        this.setEventListener(this.setup);
      }
    }
    onUnsubscribe() {
      if (!this.hasListeners()) {
        var _this$cleanup;
        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
        this.cleanup = void 0;
      }
    }
    setEventListener(setup) {
      var _this$cleanup2;
      this.setup = setup;
      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
      this.cleanup = setup((focused) => {
        if (typeof focused === "boolean") {
          this.setFocused(focused);
        } else {
          this.onFocus();
        }
      });
    }
    setFocused(focused) {
      const changed = this.focused !== focused;
      if (changed) {
        this.focused = focused;
        this.onFocus();
      }
    }
    onFocus() {
      this.listeners.forEach(({
        listener
      }) => {
        listener();
      });
    }
    isFocused() {
      if (typeof this.focused === "boolean") {
        return this.focused;
      }
      if (typeof document === "undefined") {
        return true;
      }
      return [void 0, "visible", "prerender"].includes(document.visibilityState);
    }
  };
  var focusManager = new FocusManager();

  // ../node_modules/@tanstack/query-core/build/lib/onlineManager.mjs
  var onlineEvents = ["online", "offline"];
  var OnlineManager = class extends Subscribable2 {
    constructor() {
      super();
      this.setup = (onOnline) => {
        if (!isServer && window.addEventListener) {
          const listener = () => onOnline();
          onlineEvents.forEach((event) => {
            window.addEventListener(event, listener, false);
          });
          return () => {
            onlineEvents.forEach((event) => {
              window.removeEventListener(event, listener);
            });
          };
        }
        return;
      };
    }
    onSubscribe() {
      if (!this.cleanup) {
        this.setEventListener(this.setup);
      }
    }
    onUnsubscribe() {
      if (!this.hasListeners()) {
        var _this$cleanup;
        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
        this.cleanup = void 0;
      }
    }
    setEventListener(setup) {
      var _this$cleanup2;
      this.setup = setup;
      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
      this.cleanup = setup((online) => {
        if (typeof online === "boolean") {
          this.setOnline(online);
        } else {
          this.onOnline();
        }
      });
    }
    setOnline(online) {
      const changed = this.online !== online;
      if (changed) {
        this.online = online;
        this.onOnline();
      }
    }
    onOnline() {
      this.listeners.forEach(({
        listener
      }) => {
        listener();
      });
    }
    isOnline() {
      if (typeof this.online === "boolean") {
        return this.online;
      }
      if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
        return true;
      }
      return navigator.onLine;
    }
  };
  var onlineManager = new OnlineManager();

  // ../node_modules/@tanstack/query-core/build/lib/retryer.mjs
  function defaultRetryDelay(failureCount) {
    return Math.min(1e3 * 2 ** failureCount, 3e4);
  }
  function canFetch(networkMode) {
    return (networkMode != null ? networkMode : "online") === "online" ? onlineManager.isOnline() : true;
  }
  var CancelledError = class {
    constructor(options) {
      this.revert = options == null ? void 0 : options.revert;
      this.silent = options == null ? void 0 : options.silent;
    }
  };
  function isCancelledError(value) {
    return value instanceof CancelledError;
  }
  function createRetryer(config) {
    let isRetryCancelled = false;
    let failureCount = 0;
    let isResolved = false;
    let continueFn;
    let promiseResolve;
    let promiseReject;
    const promise = new Promise((outerResolve, outerReject) => {
      promiseResolve = outerResolve;
      promiseReject = outerReject;
    });
    const cancel = (cancelOptions) => {
      if (!isResolved) {
        reject(new CancelledError(cancelOptions));
        config.abort == null ? void 0 : config.abort();
      }
    };
    const cancelRetry = () => {
      isRetryCancelled = true;
    };
    const continueRetry = () => {
      isRetryCancelled = false;
    };
    const shouldPause = () => !focusManager.isFocused() || config.networkMode !== "always" && !onlineManager.isOnline();
    const resolve2 = (value) => {
      if (!isResolved) {
        isResolved = true;
        config.onSuccess == null ? void 0 : config.onSuccess(value);
        continueFn == null ? void 0 : continueFn();
        promiseResolve(value);
      }
    };
    const reject = (value) => {
      if (!isResolved) {
        isResolved = true;
        config.onError == null ? void 0 : config.onError(value);
        continueFn == null ? void 0 : continueFn();
        promiseReject(value);
      }
    };
    const pause = () => {
      return new Promise((continueResolve) => {
        continueFn = (value) => {
          const canContinue = isResolved || !shouldPause();
          if (canContinue) {
            continueResolve(value);
          }
          return canContinue;
        };
        config.onPause == null ? void 0 : config.onPause();
      }).then(() => {
        continueFn = void 0;
        if (!isResolved) {
          config.onContinue == null ? void 0 : config.onContinue();
        }
      });
    };
    const run = () => {
      if (isResolved) {
        return;
      }
      let promiseOrValue;
      try {
        promiseOrValue = config.fn();
      } catch (error) {
        promiseOrValue = Promise.reject(error);
      }
      Promise.resolve(promiseOrValue).then(resolve2).catch((error) => {
        var _config$retry, _config$retryDelay;
        if (isResolved) {
          return;
        }
        const retry = (_config$retry = config.retry) != null ? _config$retry : 3;
        const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
        const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
        const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
        if (isRetryCancelled || !shouldRetry) {
          reject(error);
          return;
        }
        failureCount++;
        config.onFail == null ? void 0 : config.onFail(failureCount, error);
        sleep(delay).then(() => {
          if (shouldPause()) {
            return pause();
          }
          return;
        }).then(() => {
          if (isRetryCancelled) {
            reject(error);
          } else {
            run();
          }
        });
      });
    };
    if (canFetch(config.networkMode)) {
      run();
    } else {
      pause().then(run);
    }
    return {
      promise,
      cancel,
      continue: () => {
        const didContinue = continueFn == null ? void 0 : continueFn();
        return didContinue ? promise : Promise.resolve();
      },
      cancelRetry,
      continueRetry
    };
  }

  // ../node_modules/@tanstack/query-core/build/lib/logger.mjs
  var defaultLogger = console;

  // ../node_modules/@tanstack/query-core/build/lib/notifyManager.mjs
  function createNotifyManager() {
    let queue = [];
    let transactions = 0;
    let notifyFn = (callback) => {
      callback();
    };
    let batchNotifyFn = (callback) => {
      callback();
    };
    const batch = (callback) => {
      let result;
      transactions++;
      try {
        result = callback();
      } finally {
        transactions--;
        if (!transactions) {
          flush();
        }
      }
      return result;
    };
    const schedule = (callback) => {
      if (transactions) {
        queue.push(callback);
      } else {
        scheduleMicrotask(() => {
          notifyFn(callback);
        });
      }
    };
    const batchCalls = (callback) => {
      return (...args) => {
        schedule(() => {
          callback(...args);
        });
      };
    };
    const flush = () => {
      const originalQueue = queue;
      queue = [];
      if (originalQueue.length) {
        scheduleMicrotask(() => {
          batchNotifyFn(() => {
            originalQueue.forEach((callback) => {
              notifyFn(callback);
            });
          });
        });
      }
    };
    const setNotifyFunction = (fn2) => {
      notifyFn = fn2;
    };
    const setBatchNotifyFunction = (fn2) => {
      batchNotifyFn = fn2;
    };
    return {
      batch,
      batchCalls,
      schedule,
      setNotifyFunction,
      setBatchNotifyFunction
    };
  }
  var notifyManager = createNotifyManager();

  // ../node_modules/@tanstack/query-core/build/lib/removable.mjs
  var Removable = class {
    destroy() {
      this.clearGcTimeout();
    }
    scheduleGc() {
      this.clearGcTimeout();
      if (isValidTimeout(this.cacheTime)) {
        this.gcTimeout = setTimeout(() => {
          this.optionalRemove();
        }, this.cacheTime);
      }
    }
    updateCacheTime(newCacheTime) {
      this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1e3);
    }
    clearGcTimeout() {
      if (this.gcTimeout) {
        clearTimeout(this.gcTimeout);
        this.gcTimeout = void 0;
      }
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/query.mjs
  var Query2 = class extends Removable {
    constructor(config) {
      super();
      this.abortSignalConsumed = false;
      this.defaultOptions = config.defaultOptions;
      this.setOptions(config.options);
      this.observers = [];
      this.cache = config.cache;
      this.logger = config.logger || defaultLogger;
      this.queryKey = config.queryKey;
      this.queryHash = config.queryHash;
      this.initialState = config.state || getDefaultState(this.options);
      this.state = this.initialState;
      this.scheduleGc();
    }
    get meta() {
      return this.options.meta;
    }
    setOptions(options) {
      this.options = {
        ...this.defaultOptions,
        ...options
      };
      this.updateCacheTime(this.options.cacheTime);
    }
    optionalRemove() {
      if (!this.observers.length && this.state.fetchStatus === "idle") {
        this.cache.remove(this);
      }
    }
    setData(newData, options) {
      const data = replaceData(this.state.data, newData, this.options);
      this.dispatch({
        data,
        type: "success",
        dataUpdatedAt: options == null ? void 0 : options.updatedAt,
        manual: options == null ? void 0 : options.manual
      });
      return data;
    }
    setState(state, setStateOptions) {
      this.dispatch({
        type: "setState",
        state,
        setStateOptions
      });
    }
    cancel(options) {
      var _this$retryer;
      const promise = this.promise;
      (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
      return promise ? promise.then(noop4).catch(noop4) : Promise.resolve();
    }
    destroy() {
      super.destroy();
      this.cancel({
        silent: true
      });
    }
    reset() {
      this.destroy();
      this.setState(this.initialState);
    }
    isActive() {
      return this.observers.some((observer) => observer.options.enabled !== false);
    }
    isDisabled() {
      return this.getObserversCount() > 0 && !this.isActive();
    }
    isStale() {
      return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some((observer) => observer.getCurrentResult().isStale);
    }
    isStaleByTime(staleTime = 0) {
      return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
    }
    onFocus() {
      var _this$retryer2;
      const observer = this.observers.find((x2) => x2.shouldFetchOnWindowFocus());
      if (observer) {
        observer.refetch({
          cancelRefetch: false
        });
      }
      (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
    }
    onOnline() {
      var _this$retryer3;
      const observer = this.observers.find((x2) => x2.shouldFetchOnReconnect());
      if (observer) {
        observer.refetch({
          cancelRefetch: false
        });
      }
      (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
    }
    addObserver(observer) {
      if (!this.observers.includes(observer)) {
        this.observers.push(observer);
        this.clearGcTimeout();
        this.cache.notify({
          type: "observerAdded",
          query: this,
          observer
        });
      }
    }
    removeObserver(observer) {
      if (this.observers.includes(observer)) {
        this.observers = this.observers.filter((x2) => x2 !== observer);
        if (!this.observers.length) {
          if (this.retryer) {
            if (this.abortSignalConsumed) {
              this.retryer.cancel({
                revert: true
              });
            } else {
              this.retryer.cancelRetry();
            }
          }
          this.scheduleGc();
        }
        this.cache.notify({
          type: "observerRemoved",
          query: this,
          observer
        });
      }
    }
    getObserversCount() {
      return this.observers.length;
    }
    invalidate() {
      if (!this.state.isInvalidated) {
        this.dispatch({
          type: "invalidate"
        });
      }
    }
    fetch(options, fetchOptions) {
      var _this$options$behavio, _context$fetchOptions;
      if (this.state.fetchStatus !== "idle") {
        if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {
          this.cancel({
            silent: true
          });
        } else if (this.promise) {
          var _this$retryer4;
          (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry();
          return this.promise;
        }
      }
      if (options) {
        this.setOptions(options);
      }
      if (!this.options.queryFn) {
        const observer = this.observers.find((x2) => x2.options.queryFn);
        if (observer) {
          this.setOptions(observer.options);
        }
      }
      if (true) {
        if (!Array.isArray(this.options.queryKey)) {
          this.logger.error("As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']");
        }
      }
      const abortController = getAbortController();
      const queryFnContext = {
        queryKey: this.queryKey,
        pageParam: void 0,
        meta: this.meta
      };
      const addSignalProperty = (object) => {
        Object.defineProperty(object, "signal", {
          enumerable: true,
          get: () => {
            if (abortController) {
              this.abortSignalConsumed = true;
              return abortController.signal;
            }
            return void 0;
          }
        });
      };
      addSignalProperty(queryFnContext);
      const fetchFn = () => {
        if (!this.options.queryFn) {
          return Promise.reject("Missing queryFn for queryKey '" + this.options.queryHash + "'");
        }
        this.abortSignalConsumed = false;
        return this.options.queryFn(queryFnContext);
      };
      const context = {
        fetchOptions,
        options: this.options,
        queryKey: this.queryKey,
        state: this.state,
        fetchFn
      };
      addSignalProperty(context);
      (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context);
      this.revertState = this.state;
      if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
        var _context$fetchOptions2;
        this.dispatch({
          type: "fetch",
          meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
        });
      }
      const onError = (error) => {
        if (!(isCancelledError(error) && error.silent)) {
          this.dispatch({
            type: "error",
            error
          });
        }
        if (!isCancelledError(error)) {
          var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;
          (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);
          (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);
          if (true) {
            this.logger.error(error);
          }
        }
        if (!this.isFetchingOptimistic) {
          this.scheduleGc();
        }
        this.isFetchingOptimistic = false;
      };
      this.retryer = createRetryer({
        fn: context.fetchFn,
        abort: abortController == null ? void 0 : abortController.abort.bind(abortController),
        onSuccess: (data) => {
          var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;
          if (typeof data === "undefined") {
            if (true) {
              this.logger.error("Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: " + this.queryHash);
            }
            onError(new Error(this.queryHash + " data is undefined"));
            return;
          }
          this.setData(data);
          (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, this);
          (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, this.state.error, this);
          if (!this.isFetchingOptimistic) {
            this.scheduleGc();
          }
          this.isFetchingOptimistic = false;
        },
        onError,
        onFail: (failureCount, error) => {
          this.dispatch({
            type: "failed",
            failureCount,
            error
          });
        },
        onPause: () => {
          this.dispatch({
            type: "pause"
          });
        },
        onContinue: () => {
          this.dispatch({
            type: "continue"
          });
        },
        retry: context.options.retry,
        retryDelay: context.options.retryDelay,
        networkMode: context.options.networkMode
      });
      this.promise = this.retryer.promise;
      return this.promise;
    }
    dispatch(action) {
      const reducer = (state) => {
        var _action$meta, _action$dataUpdatedAt;
        switch (action.type) {
          case "failed":
            return {
              ...state,
              fetchFailureCount: action.failureCount,
              fetchFailureReason: action.error
            };
          case "pause":
            return {
              ...state,
              fetchStatus: "paused"
            };
          case "continue":
            return {
              ...state,
              fetchStatus: "fetching"
            };
          case "fetch":
            return {
              ...state,
              fetchFailureCount: 0,
              fetchFailureReason: null,
              fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
              fetchStatus: canFetch(this.options.networkMode) ? "fetching" : "paused",
              ...!state.dataUpdatedAt && {
                error: null,
                status: "loading"
              }
            };
          case "success":
            return {
              ...state,
              data: action.data,
              dataUpdateCount: state.dataUpdateCount + 1,
              dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
              error: null,
              isInvalidated: false,
              status: "success",
              ...!action.manual && {
                fetchStatus: "idle",
                fetchFailureCount: 0,
                fetchFailureReason: null
              }
            };
          case "error":
            const error = action.error;
            if (isCancelledError(error) && error.revert && this.revertState) {
              return {
                ...this.revertState,
                fetchStatus: "idle"
              };
            }
            return {
              ...state,
              error,
              errorUpdateCount: state.errorUpdateCount + 1,
              errorUpdatedAt: Date.now(),
              fetchFailureCount: state.fetchFailureCount + 1,
              fetchFailureReason: error,
              fetchStatus: "idle",
              status: "error"
            };
          case "invalidate":
            return {
              ...state,
              isInvalidated: true
            };
          case "setState":
            return {
              ...state,
              ...action.state
            };
        }
      };
      this.state = reducer(this.state);
      notifyManager.batch(() => {
        this.observers.forEach((observer) => {
          observer.onQueryUpdate(action);
        });
        this.cache.notify({
          query: this,
          type: "updated",
          action
        });
      });
    }
  };
  function getDefaultState(options) {
    const data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
    const hasData = typeof data !== "undefined";
    const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
    return {
      data,
      dataUpdateCount: 0,
      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
      error: null,
      errorUpdateCount: 0,
      errorUpdatedAt: 0,
      fetchFailureCount: 0,
      fetchFailureReason: null,
      fetchMeta: null,
      isInvalidated: false,
      status: hasData ? "success" : "loading",
      fetchStatus: "idle"
    };
  }

  // ../node_modules/@tanstack/query-core/build/lib/queryCache.mjs
  var QueryCache = class extends Subscribable2 {
    constructor(config) {
      super();
      this.config = config || {};
      this.queries = [];
      this.queriesMap = {};
    }
    build(client, options, state) {
      var _options$queryHash;
      const queryKey = options.queryKey;
      const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
      let query = this.get(queryHash);
      if (!query) {
        query = new Query2({
          cache: this,
          logger: client.getLogger(),
          queryKey,
          queryHash,
          options: client.defaultQueryOptions(options),
          state,
          defaultOptions: client.getQueryDefaults(queryKey)
        });
        this.add(query);
      }
      return query;
    }
    add(query) {
      if (!this.queriesMap[query.queryHash]) {
        this.queriesMap[query.queryHash] = query;
        this.queries.push(query);
        this.notify({
          type: "added",
          query
        });
      }
    }
    remove(query) {
      const queryInMap = this.queriesMap[query.queryHash];
      if (queryInMap) {
        query.destroy();
        this.queries = this.queries.filter((x2) => x2 !== query);
        if (queryInMap === query) {
          delete this.queriesMap[query.queryHash];
        }
        this.notify({
          type: "removed",
          query
        });
      }
    }
    clear() {
      notifyManager.batch(() => {
        this.queries.forEach((query) => {
          this.remove(query);
        });
      });
    }
    get(queryHash) {
      return this.queriesMap[queryHash];
    }
    getAll() {
      return this.queries;
    }
    find(arg1, arg2) {
      const [filters] = parseFilterArgs(arg1, arg2);
      if (typeof filters.exact === "undefined") {
        filters.exact = true;
      }
      return this.queries.find((query) => matchQuery(filters, query));
    }
    findAll(arg1, arg2) {
      const [filters] = parseFilterArgs(arg1, arg2);
      return Object.keys(filters).length > 0 ? this.queries.filter((query) => matchQuery(filters, query)) : this.queries;
    }
    notify(event) {
      notifyManager.batch(() => {
        this.listeners.forEach(({
          listener
        }) => {
          listener(event);
        });
      });
    }
    onFocus() {
      notifyManager.batch(() => {
        this.queries.forEach((query) => {
          query.onFocus();
        });
      });
    }
    onOnline() {
      notifyManager.batch(() => {
        this.queries.forEach((query) => {
          query.onOnline();
        });
      });
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/mutation.mjs
  var Mutation = class extends Removable {
    constructor(config) {
      super();
      this.defaultOptions = config.defaultOptions;
      this.mutationId = config.mutationId;
      this.mutationCache = config.mutationCache;
      this.logger = config.logger || defaultLogger;
      this.observers = [];
      this.state = config.state || getDefaultState2();
      this.setOptions(config.options);
      this.scheduleGc();
    }
    setOptions(options) {
      this.options = {
        ...this.defaultOptions,
        ...options
      };
      this.updateCacheTime(this.options.cacheTime);
    }
    get meta() {
      return this.options.meta;
    }
    setState(state) {
      this.dispatch({
        type: "setState",
        state
      });
    }
    addObserver(observer) {
      if (!this.observers.includes(observer)) {
        this.observers.push(observer);
        this.clearGcTimeout();
        this.mutationCache.notify({
          type: "observerAdded",
          mutation: this,
          observer
        });
      }
    }
    removeObserver(observer) {
      this.observers = this.observers.filter((x2) => x2 !== observer);
      this.scheduleGc();
      this.mutationCache.notify({
        type: "observerRemoved",
        mutation: this,
        observer
      });
    }
    optionalRemove() {
      if (!this.observers.length) {
        if (this.state.status === "loading") {
          this.scheduleGc();
        } else {
          this.mutationCache.remove(this);
        }
      }
    }
    continue() {
      var _this$retryer$continu, _this$retryer;
      return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();
    }
    async execute() {
      const executeMutation = () => {
        var _this$options$retry;
        this.retryer = createRetryer({
          fn: () => {
            if (!this.options.mutationFn) {
              return Promise.reject("No mutationFn found");
            }
            return this.options.mutationFn(this.state.variables);
          },
          onFail: (failureCount, error) => {
            this.dispatch({
              type: "failed",
              failureCount,
              error
            });
          },
          onPause: () => {
            this.dispatch({
              type: "pause"
            });
          },
          onContinue: () => {
            this.dispatch({
              type: "continue"
            });
          },
          retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
          retryDelay: this.options.retryDelay,
          networkMode: this.options.networkMode
        });
        return this.retryer.promise;
      };
      const restored = this.state.status === "loading";
      try {
        var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;
        if (!restored) {
          var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;
          this.dispatch({
            type: "loading",
            variables: this.options.variables
          });
          await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));
          const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));
          if (context !== this.state.context) {
            this.dispatch({
              type: "loading",
              context,
              variables: this.state.variables
            });
          }
        }
        const data = await executeMutation();
        await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));
        await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));
        await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));
        await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));
        this.dispatch({
          type: "success",
          data
        });
        return data;
      } catch (error) {
        try {
          var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;
          await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));
          if (true) {
            this.logger.error(error);
          }
          await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));
          await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, void 0, error, this.state.variables, this.state.context, this));
          await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, error, this.state.variables, this.state.context));
          throw error;
        } finally {
          this.dispatch({
            type: "error",
            error
          });
        }
      }
    }
    dispatch(action) {
      const reducer = (state) => {
        switch (action.type) {
          case "failed":
            return {
              ...state,
              failureCount: action.failureCount,
              failureReason: action.error
            };
          case "pause":
            return {
              ...state,
              isPaused: true
            };
          case "continue":
            return {
              ...state,
              isPaused: false
            };
          case "loading":
            return {
              ...state,
              context: action.context,
              data: void 0,
              failureCount: 0,
              failureReason: null,
              error: null,
              isPaused: !canFetch(this.options.networkMode),
              status: "loading",
              variables: action.variables
            };
          case "success":
            return {
              ...state,
              data: action.data,
              failureCount: 0,
              failureReason: null,
              error: null,
              status: "success",
              isPaused: false
            };
          case "error":
            return {
              ...state,
              data: void 0,
              error: action.error,
              failureCount: state.failureCount + 1,
              failureReason: action.error,
              isPaused: false,
              status: "error"
            };
          case "setState":
            return {
              ...state,
              ...action.state
            };
        }
      };
      this.state = reducer(this.state);
      notifyManager.batch(() => {
        this.observers.forEach((observer) => {
          observer.onMutationUpdate(action);
        });
        this.mutationCache.notify({
          mutation: this,
          type: "updated",
          action
        });
      });
    }
  };
  function getDefaultState2() {
    return {
      context: void 0,
      data: void 0,
      error: null,
      failureCount: 0,
      failureReason: null,
      isPaused: false,
      status: "idle",
      variables: void 0
    };
  }

  // ../node_modules/@tanstack/query-core/build/lib/mutationCache.mjs
  var MutationCache = class extends Subscribable2 {
    constructor(config) {
      super();
      this.config = config || {};
      this.mutations = [];
      this.mutationId = 0;
    }
    build(client, options, state) {
      const mutation = new Mutation({
        mutationCache: this,
        logger: client.getLogger(),
        mutationId: ++this.mutationId,
        options: client.defaultMutationOptions(options),
        state,
        defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : void 0
      });
      this.add(mutation);
      return mutation;
    }
    add(mutation) {
      this.mutations.push(mutation);
      this.notify({
        type: "added",
        mutation
      });
    }
    remove(mutation) {
      this.mutations = this.mutations.filter((x2) => x2 !== mutation);
      this.notify({
        type: "removed",
        mutation
      });
    }
    clear() {
      notifyManager.batch(() => {
        this.mutations.forEach((mutation) => {
          this.remove(mutation);
        });
      });
    }
    getAll() {
      return this.mutations;
    }
    find(filters) {
      if (typeof filters.exact === "undefined") {
        filters.exact = true;
      }
      return this.mutations.find((mutation) => matchMutation(filters, mutation));
    }
    findAll(filters) {
      return this.mutations.filter((mutation) => matchMutation(filters, mutation));
    }
    notify(event) {
      notifyManager.batch(() => {
        this.listeners.forEach(({
          listener
        }) => {
          listener(event);
        });
      });
    }
    resumePausedMutations() {
      var _this$resuming;
      this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {
        const pausedMutations = this.mutations.filter((x2) => x2.state.isPaused);
        return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop4)), Promise.resolve()));
      }).then(() => {
        this.resuming = void 0;
      });
      return this.resuming;
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs
  function infiniteQueryBehavior() {
    return {
      onFetch: (context) => {
        context.fetchFn = () => {
          var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;
          const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
          const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
          const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
          const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
          const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
          const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
          const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
          let newPageParams = oldPageParams;
          let cancelled = false;
          const addSignalProperty = (object) => {
            Object.defineProperty(object, "signal", {
              enumerable: true,
              get: () => {
                var _context$signal;
                if ((_context$signal = context.signal) != null && _context$signal.aborted) {
                  cancelled = true;
                } else {
                  var _context$signal2;
                  (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener("abort", () => {
                    cancelled = true;
                  });
                }
                return context.signal;
              }
            });
          };
          const queryFn = context.options.queryFn || (() => Promise.reject("Missing queryFn for queryKey '" + context.options.queryHash + "'"));
          const buildNewPages = (pages, param, page, previous4) => {
            newPageParams = previous4 ? [param, ...newPageParams] : [...newPageParams, param];
            return previous4 ? [page, ...pages] : [...pages, page];
          };
          const fetchPage = (pages, manual, param, previous4) => {
            if (cancelled) {
              return Promise.reject("Cancelled");
            }
            if (typeof param === "undefined" && !manual && pages.length) {
              return Promise.resolve(pages);
            }
            const queryFnContext = {
              queryKey: context.queryKey,
              pageParam: param,
              meta: context.options.meta
            };
            addSignalProperty(queryFnContext);
            const queryFnResult = queryFn(queryFnContext);
            const promise2 = Promise.resolve(queryFnResult).then((page) => buildNewPages(pages, param, page, previous4));
            return promise2;
          };
          let promise;
          if (!oldPages.length) {
            promise = fetchPage([]);
          } else if (isFetchingNextPage) {
            const manual = typeof pageParam !== "undefined";
            const param = manual ? pageParam : getNextPageParam(context.options, oldPages);
            promise = fetchPage(oldPages, manual, param);
          } else if (isFetchingPreviousPage) {
            const manual = typeof pageParam !== "undefined";
            const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);
            promise = fetchPage(oldPages, manual, param, true);
          } else {
            newPageParams = [];
            const manual = typeof context.options.getNextPageParam === "undefined";
            const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true;
            promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]));
            for (let i4 = 1; i4 < oldPages.length; i4++) {
              promise = promise.then((pages) => {
                const shouldFetchNextPage = refetchPage && oldPages[i4] ? refetchPage(oldPages[i4], i4, oldPages) : true;
                if (shouldFetchNextPage) {
                  const param = manual ? oldPageParams[i4] : getNextPageParam(context.options, pages);
                  return fetchPage(pages, manual, param);
                }
                return Promise.resolve(buildNewPages(pages, oldPageParams[i4], oldPages[i4]));
              });
            }
          }
          const finalPromise = promise.then((pages) => ({
            pages,
            pageParams: newPageParams
          }));
          return finalPromise;
        };
      }
    };
  }
  function getNextPageParam(options, pages) {
    return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
  }
  function getPreviousPageParam(options, pages) {
    return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
  }

  // ../node_modules/@tanstack/query-core/build/lib/queryClient.mjs
  var QueryClient = class {
    constructor(config = {}) {
      this.queryCache = config.queryCache || new QueryCache();
      this.mutationCache = config.mutationCache || new MutationCache();
      this.logger = config.logger || defaultLogger;
      this.defaultOptions = config.defaultOptions || {};
      this.queryDefaults = [];
      this.mutationDefaults = [];
      this.mountCount = 0;
      if (config.logger) {
        this.logger.error("Passing a custom logger has been deprecated and will be removed in the next major version.");
      }
    }
    mount() {
      this.mountCount++;
      if (this.mountCount !== 1)
        return;
      this.unsubscribeFocus = focusManager.subscribe(() => {
        if (focusManager.isFocused()) {
          this.resumePausedMutations();
          this.queryCache.onFocus();
        }
      });
      this.unsubscribeOnline = onlineManager.subscribe(() => {
        if (onlineManager.isOnline()) {
          this.resumePausedMutations();
          this.queryCache.onOnline();
        }
      });
    }
    unmount() {
      var _this$unsubscribeFocu, _this$unsubscribeOnli;
      this.mountCount--;
      if (this.mountCount !== 0)
        return;
      (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
      this.unsubscribeFocus = void 0;
      (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
      this.unsubscribeOnline = void 0;
    }
    isFetching(arg1, arg2) {
      const [filters] = parseFilterArgs(arg1, arg2);
      filters.fetchStatus = "fetching";
      return this.queryCache.findAll(filters).length;
    }
    isMutating(filters) {
      return this.mutationCache.findAll({
        ...filters,
        fetching: true
      }).length;
    }
    getQueryData(queryKey, filters) {
      var _this$queryCache$find;
      return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
    }
    ensureQueryData(arg1, arg2, arg3) {
      const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
      const cachedData = this.getQueryData(parsedOptions.queryKey);
      return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);
    }
    getQueriesData(queryKeyOrFilters) {
      return this.getQueryCache().findAll(queryKeyOrFilters).map(({
        queryKey,
        state
      }) => {
        const data = state.data;
        return [queryKey, data];
      });
    }
    setQueryData(queryKey, updater, options) {
      const query = this.queryCache.find(queryKey);
      const prevData = query == null ? void 0 : query.state.data;
      const data = functionalUpdate(updater, prevData);
      if (typeof data === "undefined") {
        return void 0;
      }
      const parsedOptions = parseQueryArgs(queryKey);
      const defaultedOptions = this.defaultQueryOptions(parsedOptions);
      return this.queryCache.build(this, defaultedOptions).setData(data, {
        ...options,
        manual: true
      });
    }
    setQueriesData(queryKeyOrFilters, updater, options) {
      return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({
        queryKey
      }) => [queryKey, this.setQueryData(queryKey, updater, options)]));
    }
    getQueryState(queryKey, filters) {
      var _this$queryCache$find2;
      return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
    }
    removeQueries(arg1, arg2) {
      const [filters] = parseFilterArgs(arg1, arg2);
      const queryCache = this.queryCache;
      notifyManager.batch(() => {
        queryCache.findAll(filters).forEach((query) => {
          queryCache.remove(query);
        });
      });
    }
    resetQueries(arg1, arg2, arg3) {
      const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
      const queryCache = this.queryCache;
      const refetchFilters = {
        type: "active",
        ...filters
      };
      return notifyManager.batch(() => {
        queryCache.findAll(filters).forEach((query) => {
          query.reset();
        });
        return this.refetchQueries(refetchFilters, options);
      });
    }
    cancelQueries(arg1, arg2, arg3) {
      const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);
      if (typeof cancelOptions.revert === "undefined") {
        cancelOptions.revert = true;
      }
      const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map((query) => query.cancel(cancelOptions)));
      return Promise.all(promises).then(noop4).catch(noop4);
    }
    invalidateQueries(arg1, arg2, arg3) {
      const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
      return notifyManager.batch(() => {
        var _ref, _filters$refetchType;
        this.queryCache.findAll(filters).forEach((query) => {
          query.invalidate();
        });
        if (filters.refetchType === "none") {
          return Promise.resolve();
        }
        const refetchFilters = {
          ...filters,
          type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : "active"
        };
        return this.refetchQueries(refetchFilters, options);
      });
    }
    refetchQueries(arg1, arg2, arg3) {
      const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
      const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
        var _options$cancelRefetc;
        return query.fetch(void 0, {
          ...options,
          cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,
          meta: {
            refetchPage: filters.refetchPage
          }
        });
      }));
      let promise = Promise.all(promises).then(noop4);
      if (!(options != null && options.throwOnError)) {
        promise = promise.catch(noop4);
      }
      return promise;
    }
    fetchQuery(arg1, arg2, arg3) {
      const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
      const defaultedOptions = this.defaultQueryOptions(parsedOptions);
      if (typeof defaultedOptions.retry === "undefined") {
        defaultedOptions.retry = false;
      }
      const query = this.queryCache.build(this, defaultedOptions);
      return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
    }
    prefetchQuery(arg1, arg2, arg3) {
      return this.fetchQuery(arg1, arg2, arg3).then(noop4).catch(noop4);
    }
    fetchInfiniteQuery(arg1, arg2, arg3) {
      const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
      parsedOptions.behavior = infiniteQueryBehavior();
      return this.fetchQuery(parsedOptions);
    }
    prefetchInfiniteQuery(arg1, arg2, arg3) {
      return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop4).catch(noop4);
    }
    resumePausedMutations() {
      return this.mutationCache.resumePausedMutations();
    }
    getQueryCache() {
      return this.queryCache;
    }
    getMutationCache() {
      return this.mutationCache;
    }
    getLogger() {
      return this.logger;
    }
    getDefaultOptions() {
      return this.defaultOptions;
    }
    setDefaultOptions(options) {
      this.defaultOptions = options;
    }
    setQueryDefaults(queryKey, options) {
      const result = this.queryDefaults.find((x2) => hashQueryKey(queryKey) === hashQueryKey(x2.queryKey));
      if (result) {
        result.defaultOptions = options;
      } else {
        this.queryDefaults.push({
          queryKey,
          defaultOptions: options
        });
      }
    }
    getQueryDefaults(queryKey) {
      if (!queryKey) {
        return void 0;
      }
      const firstMatchingDefaults = this.queryDefaults.find((x2) => partialMatchKey(queryKey, x2.queryKey));
      if (true) {
        const matchingDefaults = this.queryDefaults.filter((x2) => partialMatchKey(queryKey, x2.queryKey));
        if (matchingDefaults.length > 1) {
          this.logger.error("[QueryClient] Several query defaults match with key '" + JSON.stringify(queryKey) + "'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.");
        }
      }
      return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
    }
    setMutationDefaults(mutationKey, options) {
      const result = this.mutationDefaults.find((x2) => hashQueryKey(mutationKey) === hashQueryKey(x2.mutationKey));
      if (result) {
        result.defaultOptions = options;
      } else {
        this.mutationDefaults.push({
          mutationKey,
          defaultOptions: options
        });
      }
    }
    getMutationDefaults(mutationKey) {
      if (!mutationKey) {
        return void 0;
      }
      const firstMatchingDefaults = this.mutationDefaults.find((x2) => partialMatchKey(mutationKey, x2.mutationKey));
      if (true) {
        const matchingDefaults = this.mutationDefaults.filter((x2) => partialMatchKey(mutationKey, x2.mutationKey));
        if (matchingDefaults.length > 1) {
          this.logger.error("[QueryClient] Several mutation defaults match with key '" + JSON.stringify(mutationKey) + "'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.");
        }
      }
      return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
    }
    defaultQueryOptions(options) {
      if (options != null && options._defaulted) {
        return options;
      }
      const defaultedOptions = {
        ...this.defaultOptions.queries,
        ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),
        ...options,
        _defaulted: true
      };
      if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
        defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
      }
      if (typeof defaultedOptions.refetchOnReconnect === "undefined") {
        defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
      }
      if (typeof defaultedOptions.useErrorBoundary === "undefined") {
        defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;
      }
      return defaultedOptions;
    }
    defaultMutationOptions(options) {
      if (options != null && options._defaulted) {
        return options;
      }
      return {
        ...this.defaultOptions.mutations,
        ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),
        ...options,
        _defaulted: true
      };
    }
    clear() {
      this.queryCache.clear();
      this.mutationCache.clear();
    }
  };

  // ../node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs
  var React172 = __toESM(require_react(), 1);
  var defaultContext = /* @__PURE__ */ React172.createContext(void 0);
  var QueryClientSharingContext = /* @__PURE__ */ React172.createContext(false);
  function getQueryClientContext(context, contextSharing) {
    if (context) {
      return context;
    }
    if (contextSharing && typeof window !== "undefined") {
      if (!window.ReactQueryClientContext) {
        window.ReactQueryClientContext = defaultContext;
      }
      return window.ReactQueryClientContext;
    }
    return defaultContext;
  }
  var QueryClientProvider = ({
    client,
    children,
    context,
    contextSharing = false
  }) => {
    React172.useEffect(() => {
      client.mount();
      return () => {
        client.unmount();
      };
    }, [client]);
    if (contextSharing) {
      client.getLogger().error("The contextSharing option has been deprecated and will be removed in the next major version");
    }
    const Context = getQueryClientContext(context, contextSharing);
    return /* @__PURE__ */ React172.createElement(QueryClientSharingContext.Provider, {
      value: !context && contextSharing
    }, /* @__PURE__ */ React172.createElement(Context.Provider, {
      value: client
    }, children));
  };

  // src/service.ts
  var baseURL = "https://demo.lunabrain.com";
  var queryClient = new QueryClient();
  var transport = createConnectTransport({
    baseUrl: `${baseURL}/api` || "error"
    // credentials: "include",
  });
  var projectService = createPromiseClient(ProtoflowService, transport);
  var contentService = createPromiseClient(ContentService, transport);
  var userService = createPromiseClient(UserService, transport);

  // ../node_modules/react-hot-toast/dist/index.mjs
  var import_react55 = __toESM(require_react(), 1);
  var import_react56 = __toESM(require_react(), 1);
  var l2 = __toESM(require_react(), 1);

  // ../node_modules/goober/dist/goober.modern.js
  var e = { data: "" };
  var t = (t4) => "object" == typeof window ? ((t4 ? t4.querySelector("#_goober") : window._goober) || Object.assign((t4 || document.head).appendChild(document.createElement("style")), { innerHTML: " ", id: "_goober" })).firstChild : t4 || e;
  var l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g;
  var a = /\/\*[^]*?\*\/|  +/g;
  var n = /\n+/g;
  var o = (e3, t4) => {
    let r3 = "", l4 = "", a3 = "";
    for (let n6 in e3) {
      let c3 = e3[n6];
      "@" == n6[0] ? "i" == n6[1] ? r3 = n6 + " " + c3 + ";" : l4 += "f" == n6[1] ? o(c3, n6) : n6 + "{" + o(c3, "k" == n6[1] ? "" : t4) + "}" : "object" == typeof c3 ? l4 += o(c3, t4 ? t4.replace(/([^,])+/g, (e4) => n6.replace(/(^:.*)|([^,])+/g, (t5) => /&/.test(t5) ? t5.replace(/&/g, e4) : e4 ? e4 + " " + t5 : t5)) : n6) : null != c3 && (n6 = /^--/.test(n6) ? n6 : n6.replace(/[A-Z]/g, "-$&").toLowerCase(), a3 += o.p ? o.p(n6, c3) : n6 + ":" + c3 + ";");
    }
    return r3 + (t4 && a3 ? t4 + "{" + a3 + "}" : a3) + l4;
  };
  var c = {};
  var s = (e3) => {
    if ("object" == typeof e3) {
      let t4 = "";
      for (let r3 in e3)
        t4 += r3 + s(e3[r3]);
      return t4;
    }
    return e3;
  };
  var i = (e3, t4, r3, i4, p3) => {
    let u4 = s(e3), d3 = c[u4] || (c[u4] = ((e4) => {
      let t5 = 0, r4 = 11;
      for (; t5 < e4.length; )
        r4 = 101 * r4 + e4.charCodeAt(t5++) >>> 0;
      return "go" + r4;
    })(u4));
    if (!c[d3]) {
      let t5 = u4 !== e3 ? e3 : ((e4) => {
        let t6, r4, o3 = [{}];
        for (; t6 = l.exec(e4.replace(a, "")); )
          t6[4] ? o3.shift() : t6[3] ? (r4 = t6[3].replace(n, " ").trim(), o3.unshift(o3[0][r4] = o3[0][r4] || {})) : o3[0][t6[1]] = t6[2].replace(n, " ").trim();
        return o3[0];
      })(e3);
      c[d3] = o(p3 ? { ["@keyframes " + d3]: t5 } : t5, r3 ? "" : "." + d3);
    }
    let f4 = r3 && c.g ? c.g : null;
    return r3 && (c.g = c[d3]), ((e4, t5, r4, l4) => {
      l4 ? t5.data = t5.data.replace(l4, e4) : -1 === t5.data.indexOf(e4) && (t5.data = r4 ? e4 + t5.data : t5.data + e4);
    })(c[d3], t4, i4, f4), d3;
  };
  var p = (e3, t4, r3) => e3.reduce((e4, l4, a3) => {
    let n6 = t4[a3];
    if (n6 && n6.call) {
      let e5 = n6(r3), t5 = e5 && e5.props && e5.props.className || /^go/.test(e5) && e5;
      n6 = t5 ? "." + t5 : e5 && "object" == typeof e5 ? e5.props ? "" : o(e5, "") : false === e5 ? "" : e5;
    }
    return e4 + l4 + (null == n6 ? "" : n6);
  }, "");
  function u(e3) {
    let r3 = this || {}, l4 = e3.call ? e3(r3.p) : e3;
    return i(l4.unshift ? l4.raw ? p(l4, [].slice.call(arguments, 1), r3.p) : l4.reduce((e4, t4) => Object.assign(e4, t4 && t4.call ? t4(r3.p) : t4), {}) : l4, t(r3.target), r3.g, r3.o, r3.k);
  }
  var d;
  var f;
  var g;
  var b = u.bind({ g: 1 });
  var h = u.bind({ k: 1 });
  function m(e3, t4, r3, l4) {
    o.p = t4, d = e3, f = r3, g = l4;
  }
  function j(e3, t4) {
    let r3 = this || {};
    return function() {
      let l4 = arguments;
      function a3(n6, o3) {
        let c3 = Object.assign({}, n6), s3 = c3.className || a3.className;
        r3.p = Object.assign({ theme: f && f() }, c3), r3.o = / *go\d+/.test(s3), c3.className = u.apply(r3, l4) + (s3 ? " " + s3 : ""), t4 && (c3.ref = o3);
        let i4 = e3;
        return e3[0] && (i4 = c3.as || e3, delete c3.as), g && i4[0] && g(c3), d(i4, c3);
      }
      return t4 ? t4(a3) : a3;
    };
  }

  // ../node_modules/react-hot-toast/dist/index.mjs
  var y = __toESM(require_react(), 1);
  var f2 = __toESM(require_react(), 1);
  var W = (e3) => typeof e3 == "function";
  var T = (e3, t4) => W(e3) ? e3(t4) : e3;
  var U = (() => {
    let e3 = 0;
    return () => (++e3).toString();
  })();
  var b2 = (() => {
    let e3;
    return () => {
      if (e3 === void 0 && typeof window < "u") {
        let t4 = matchMedia("(prefers-reduced-motion: reduce)");
        e3 = !t4 || t4.matches;
      }
      return e3;
    };
  })();
  var Q = 20;
  var S = /* @__PURE__ */ new Map();
  var X = 1e3;
  var $ = (e3) => {
    if (S.has(e3))
      return;
    let t4 = setTimeout(() => {
      S.delete(e3), u2({ type: 4, toastId: e3 });
    }, X);
    S.set(e3, t4);
  };
  var J = (e3) => {
    let t4 = S.get(e3);
    t4 && clearTimeout(t4);
  };
  var v = (e3, t4) => {
    switch (t4.type) {
      case 0:
        return { ...e3, toasts: [t4.toast, ...e3.toasts].slice(0, Q) };
      case 1:
        return t4.toast.id && J(t4.toast.id), { ...e3, toasts: e3.toasts.map((r3) => r3.id === t4.toast.id ? { ...r3, ...t4.toast } : r3) };
      case 2:
        let { toast: o3 } = t4;
        return e3.toasts.find((r3) => r3.id === o3.id) ? v(e3, { type: 1, toast: o3 }) : v(e3, { type: 0, toast: o3 });
      case 3:
        let { toastId: s3 } = t4;
        return s3 ? $(s3) : e3.toasts.forEach((r3) => {
          $(r3.id);
        }), { ...e3, toasts: e3.toasts.map((r3) => r3.id === s3 || s3 === void 0 ? { ...r3, visible: false } : r3) };
      case 4:
        return t4.toastId === void 0 ? { ...e3, toasts: [] } : { ...e3, toasts: e3.toasts.filter((r3) => r3.id !== t4.toastId) };
      case 5:
        return { ...e3, pausedAt: t4.time };
      case 6:
        let a3 = t4.time - (e3.pausedAt || 0);
        return { ...e3, pausedAt: void 0, toasts: e3.toasts.map((r3) => ({ ...r3, pauseDuration: r3.pauseDuration + a3 })) };
    }
  };
  var A = [];
  var P = { toasts: [], pausedAt: void 0 };
  var u2 = (e3) => {
    P = v(P, e3), A.forEach((t4) => {
      t4(P);
    });
  };
  var Y = { blank: 4e3, error: 4e3, success: 2e3, loading: 1 / 0, custom: 4e3 };
  var I = (e3 = {}) => {
    let [t4, o3] = (0, import_react55.useState)(P);
    (0, import_react55.useEffect)(() => (A.push(o3), () => {
      let a3 = A.indexOf(o3);
      a3 > -1 && A.splice(a3, 1);
    }), [t4]);
    let s3 = t4.toasts.map((a3) => {
      var r3, c3;
      return { ...e3, ...e3[a3.type], ...a3, duration: a3.duration || ((r3 = e3[a3.type]) == null ? void 0 : r3.duration) || (e3 == null ? void 0 : e3.duration) || Y[a3.type], style: { ...e3.style, ...(c3 = e3[a3.type]) == null ? void 0 : c3.style, ...a3.style } };
    });
    return { ...t4, toasts: s3 };
  };
  var G = (e3, t4 = "blank", o3) => ({ createdAt: Date.now(), visible: true, type: t4, ariaProps: { role: "status", "aria-live": "polite" }, message: e3, pauseDuration: 0, ...o3, id: (o3 == null ? void 0 : o3.id) || U() });
  var h2 = (e3) => (t4, o3) => {
    let s3 = G(t4, e3, o3);
    return u2({ type: 2, toast: s3 }), s3.id;
  };
  var n2 = (e3, t4) => h2("blank")(e3, t4);
  n2.error = h2("error");
  n2.success = h2("success");
  n2.loading = h2("loading");
  n2.custom = h2("custom");
  n2.dismiss = (e3) => {
    u2({ type: 3, toastId: e3 });
  };
  n2.remove = (e3) => u2({ type: 4, toastId: e3 });
  n2.promise = (e3, t4, o3) => {
    let s3 = n2.loading(t4.loading, { ...o3, ...o3 == null ? void 0 : o3.loading });
    return e3.then((a3) => (n2.success(T(t4.success, a3), { id: s3, ...o3, ...o3 == null ? void 0 : o3.success }), a3)).catch((a3) => {
      n2.error(T(t4.error, a3), { id: s3, ...o3, ...o3 == null ? void 0 : o3.error });
    }), e3;
  };
  var Z = (e3, t4) => {
    u2({ type: 1, toast: { id: e3, height: t4 } });
  };
  var ee = () => {
    u2({ type: 5, time: Date.now() });
  };
  var D = (e3) => {
    let { toasts: t4, pausedAt: o3 } = I(e3);
    (0, import_react56.useEffect)(() => {
      if (o3)
        return;
      let r3 = Date.now(), c3 = t4.map((i4) => {
        if (i4.duration === 1 / 0)
          return;
        let d3 = (i4.duration || 0) + i4.pauseDuration - (r3 - i4.createdAt);
        if (d3 < 0) {
          i4.visible && n2.dismiss(i4.id);
          return;
        }
        return setTimeout(() => n2.dismiss(i4.id), d3);
      });
      return () => {
        c3.forEach((i4) => i4 && clearTimeout(i4));
      };
    }, [t4, o3]);
    let s3 = (0, import_react56.useCallback)(() => {
      o3 && u2({ type: 6, time: Date.now() });
    }, [o3]), a3 = (0, import_react56.useCallback)((r3, c3) => {
      let { reverseOrder: i4 = false, gutter: d3 = 8, defaultPosition: p3 } = c3 || {}, g3 = t4.filter((m2) => (m2.position || p3) === (r3.position || p3) && m2.height), E2 = g3.findIndex((m2) => m2.id === r3.id), x2 = g3.filter((m2, R2) => R2 < E2 && m2.visible).length;
      return g3.filter((m2) => m2.visible).slice(...i4 ? [x2 + 1] : [0, x2]).reduce((m2, R2) => m2 + (R2.height || 0) + d3, 0);
    }, [t4]);
    return { toasts: t4, handlers: { updateHeight: Z, startPause: ee, endPause: s3, calculateOffset: a3 } };
  };
  var oe = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`;
  var re = h`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var se = h`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`;
  var _ = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e3) => e3.primary || "#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${oe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${re} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${(e3) => e3.secondary || "#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${se} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`;
  var ne = h`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;
  var V = j("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${(e3) => e3.secondary || "#e0e0e0"};
  border-right-color: ${(e3) => e3.primary || "#616161"};
  animation: ${ne} 1s linear infinite;
`;
  var pe = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`;
  var de = h`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`;
  var w = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e3) => e3.primary || "#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${pe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${de} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${(e3) => e3.secondary || "#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`;
  var ue = j("div")`
  position: absolute;
`;
  var le = j("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`;
  var Te = h`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var fe = j("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${Te} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`;
  var M = ({ toast: e3 }) => {
    let { icon: t4, type: o3, iconTheme: s3 } = e3;
    return t4 !== void 0 ? typeof t4 == "string" ? y.createElement(fe, null, t4) : t4 : o3 === "blank" ? null : y.createElement(le, null, y.createElement(V, { ...s3 }), o3 !== "loading" && y.createElement(ue, null, o3 === "error" ? y.createElement(_, { ...s3 }) : y.createElement(w, { ...s3 })));
  };
  var ye = (e3) => `
0% {transform: translate3d(0,${e3 * -200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`;
  var ge = (e3) => `
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${e3 * -150}%,-1px) scale(.6); opacity:0;}
`;
  var he = "0%{opacity:0;} 100%{opacity:1;}";
  var xe = "0%{opacity:1;} 100%{opacity:0;}";
  var be = j("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`;
  var Se = j("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`;
  var Ae = (e3, t4) => {
    let s3 = e3.includes("top") ? 1 : -1, [a3, r3] = b2() ? [he, xe] : [ye(s3), ge(s3)];
    return { animation: t4 ? `${h(a3)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards` : `${h(r3)} 0.4s forwards cubic-bezier(.06,.71,.55,1)` };
  };
  var F = l2.memo(({ toast: e3, position: t4, style: o3, children: s3 }) => {
    let a3 = e3.height ? Ae(e3.position || t4 || "top-center", e3.visible) : { opacity: 0 }, r3 = l2.createElement(M, { toast: e3 }), c3 = l2.createElement(Se, { ...e3.ariaProps }, T(e3.message, e3));
    return l2.createElement(be, { className: e3.className, style: { ...a3, ...o3, ...e3.style } }, typeof s3 == "function" ? s3({ icon: r3, message: c3 }) : l2.createElement(l2.Fragment, null, r3, c3));
  });
  m(f2.createElement);
  var Ee = ({ id: e3, className: t4, style: o3, onHeightUpdate: s3, children: a3 }) => {
    let r3 = f2.useCallback((c3) => {
      if (c3) {
        let i4 = () => {
          let d3 = c3.getBoundingClientRect().height;
          s3(e3, d3);
        };
        i4(), new MutationObserver(i4).observe(c3, { subtree: true, childList: true, characterData: true });
      }
    }, [e3, s3]);
    return f2.createElement("div", { ref: r3, className: t4, style: o3 }, a3);
  };
  var Re = (e3, t4) => {
    let o3 = e3.includes("top"), s3 = o3 ? { top: 0 } : { bottom: 0 }, a3 = e3.includes("center") ? { justifyContent: "center" } : e3.includes("right") ? { justifyContent: "flex-end" } : {};
    return { left: 0, right: 0, display: "flex", position: "absolute", transition: b2() ? void 0 : "all 230ms cubic-bezier(.21,1.02,.73,1)", transform: `translateY(${t4 * (o3 ? 1 : -1)}px)`, ...s3, ...a3 };
  };
  var ve = u`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`;
  var O = 16;
  var Ie = ({ reverseOrder: e3, position: t4 = "top-center", toastOptions: o3, gutter: s3, children: a3, containerStyle: r3, containerClassName: c3 }) => {
    let { toasts: i4, handlers: d3 } = D(o3);
    return f2.createElement("div", { style: { position: "fixed", zIndex: 9999, top: O, left: O, right: O, bottom: O, pointerEvents: "none", ...r3 }, className: c3, onMouseEnter: d3.startPause, onMouseLeave: d3.endPause }, i4.map((p3) => {
      let g3 = p3.position || t4, E2 = d3.calculateOffset(p3, { reverseOrder: e3, gutter: s3, defaultPosition: t4 }), x2 = Re(g3, E2);
      return f2.createElement(Ee, { id: p3.id, key: p3.id, onHeightUpdate: d3.updateHeight, className: p3.visible ? ve : "", style: x2 }, p3.type === "custom" ? T(p3.message, p3) : a3 ? a3(p3) : f2.createElement(F, { toast: p3, position: g3 }));
    }));
  };
  var _t = n2;

  // src/providers/ProjectProvider.tsx
  var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
  var ProjectContext = (0, import_react57.createContext)({});
  var useProjectContext = () => (0, import_react57.useContext)(ProjectContext);
  function groupURL(groupID) {
    return `/app/group/${groupID}`;
  }
  function ProjectProvider({ children }) {
    const [messages, setMessages] = (0, import_react57.useState)([]);
    const [content3, setContent] = (0, import_react57.useState)([]);
    const [isRecording, setIsRecording] = (0, import_react57.useState)(false);
    const [selectedValue, setSelectedValue] = (0, import_react57.useState)("");
    const [session, setSession] = (0, import_react57.useState)(void 0);
    const [inference, setInference] = (0, import_react57.useState)("");
    const [user, setUser] = (0, import_react57.useState)(void 0);
    const [loading, setLoading] = (0, import_react57.useState)(false);
    const [media, setMedia] = (0, import_react57.useState)(void 0);
    const [groups, setGroups] = (0, import_react57.useState)([]);
    const [currentGroup, setCurrentGroup] = (0, import_react57.useState)("home");
    const [tags, setTags] = (0, import_react57.useState)([]);
    const [filteredTags, setFilteredTags] = (0, import_react57.useState)([]);
    const [showTagTree, setShowTagTree] = (0, import_react57.useState)(true);
    const [userSettings, setUserSettings] = (0, import_react57.useState)({
      showPreviews: false,
      showQRCodes: false,
      showRelatedContent: false
    });
    const addFilteredTag = (tag) => {
      setFilteredTags((prev2) => [...prev2, tag]);
    };
    const removeFilteredTag = (tag) => {
      setFilteredTags((prev2) => prev2.filter((t4) => t4 !== tag));
    };
    const loadContent = async () => {
      const res = await contentService.search({
        tags: filteredTags,
        // TODO breadchris home is just the user's content
        groupID: currentGroup === "home" ? void 0 : currentGroup
      });
      setContent(res.storedContent);
    };
    const loadTags = async () => {
      const res = await contentService.getTags({
        groupId: currentGroup === "home" ? void 0 : currentGroup
      });
      setTags(res.tags);
    };
    (0, import_react57.useEffect)(() => {
      void loadContent();
      void loadTags();
      if (user) {
        window.history.pushState({}, "", groupURL(currentGroup));
      }
    }, [user, filteredTags, currentGroup]);
    const loadGroups = async () => {
      const res = await userService.getGroups({});
      setGroups(res.groups);
    };
    (0, import_react57.useEffect)(() => {
      if (!user) {
        (async () => {
          try {
            const res = await userService.login({});
            if (!res.email) {
              console.warn("no user logged in");
              return;
            }
            setUser(res);
          } catch (e3) {
            console.error(e3);
          }
        })();
      }
      void loadGroups();
    }, [user]);
    const deleteContent = async (ids) => {
      const res = await contentService.delete({
        contentIds: ids
      });
      console.log(res);
      void loadContent();
    };
    (0, import_react57.useEffect)(() => {
      if (selectedValue !== "") {
        (async () => {
          const res = await projectService.getSession({
            id: selectedValue
          });
          setSession(res.session);
          setMessages(res.session?.segments.map((m2) => ({ text: m2.text || "", sender: "bot", segment: m2 })) || []);
        })();
      }
    }, [selectedValue]);
    async function streamMessages(res) {
      setMessages([]);
      for await (const exec of res) {
        setMessages((prev2) => {
          if (!exec.segment) {
            return prev2;
          }
          const newMsg = { text: exec.segment?.text || "", sender: "bot", segment: exec.segment };
          const i4 = prev2.findIndex((m2) => m2.segment.num === exec.segment?.num);
          if (i4 !== -1) {
            let newPrev = [...prev2];
            newPrev[i4] = newMsg;
            return newPrev;
          }
          return [...prev2, newMsg];
        });
      }
      setLoading(false);
    }
    (0, import_react57.useEffect)(() => {
      if (!isRecording) {
        return;
      }
      (async () => {
        try {
          const res = projectService.chat({}, {
            timeoutMs: void 0
          });
          await streamMessages(res);
        } catch (e3) {
          if (e3 instanceof ConnectError && e3.code != Code.Canceled) {
            _t.error(e3.message);
            console.log(e3);
          }
        }
      })();
    }, [isRecording]);
    const inferFromMessages = (0, import_react57.useCallback)(async (prompt) => {
      const mIdx = messages.length + 1;
      const m2 = { text: prompt, sender: "user", segment: new Segment2() };
      setMessages((prev2) => [...prev2, m2]);
      let i4 = "";
      try {
        const res = projectService.infer({
          text: messages.map((m3) => m3.text),
          prompt
        });
        for await (const exec of res) {
          setInference((prev2) => exec.text || "");
          i4 = exec.text || "";
        }
      } catch (e3) {
        _t.error(e3.message);
        console.log(e3);
      }
      setInference("");
      setMessages((prev2) => [...prev2, m2, { ...m2, text: i4 }]);
    }, [messages, setMessages]);
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
      ProjectContext.Provider,
      {
        value: {
          messages,
          setMessages,
          content: content3,
          setContent,
          deleteContent,
          isRecording,
          setIsRecording,
          selectedValue,
          setSelectedValue,
          streamMessages,
          session,
          inferFromMessages,
          inference,
          user,
          setUser,
          loading,
          setLoading,
          media,
          setMedia,
          groups,
          setCurrentGroup,
          currentGroup,
          tags,
          loadGroups,
          loadContent,
          loadTags,
          filteredTags,
          addFilteredTag,
          removeFilteredTag,
          showTagTree,
          setShowTagTree,
          userSettings,
          setUserSettings
        },
        children
      }
    );
  }

  // ../node_modules/react-router-dom/dist/index.js
  var React175 = __toESM(require_react());

  // ../node_modules/react-router/dist/index.js
  var React174 = __toESM(require_react());

  // ../node_modules/@remix-run/router/dist/router.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var source = arguments[i4];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var Action;
  (function(Action2) {
    Action2["Pop"] = "POP";
    Action2["Push"] = "PUSH";
    Action2["Replace"] = "REPLACE";
  })(Action || (Action = {}));
  var PopStateEventType = "popstate";
  function createBrowserHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createBrowserLocation(window2, globalHistory) {
      let {
        pathname,
        search: search2,
        hash: hash2
      } = window2.location;
      return createLocation(
        "",
        {
          pathname,
          search: search2,
          hash: hash2
        },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message);
      try {
        throw new Error(message);
      } catch (e3) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function getHistoryState(location2, index2) {
    return {
      usr: location2.state,
      key: location2.key,
      idx: index2
    };
  }
  function createLocation(current, to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location2 = _extends({
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    });
    return location2;
  }
  function createPath(_ref) {
    let {
      pathname = "/",
      search: search2 = "",
      hash: hash2 = ""
    } = _ref;
    if (search2 && search2 !== "?")
      pathname += search2.charAt(0) === "?" ? search2 : "?" + search2;
    if (hash2 && hash2 !== "#")
      pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
    return pathname;
  }
  function parsePath(path4) {
    let parsedPath = {};
    if (path4) {
      let hashIndex = path4.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path4.substr(hashIndex);
        path4 = path4.substr(0, hashIndex);
      }
      let searchIndex = path4.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path4.substr(searchIndex);
        path4 = path4.substr(0, searchIndex);
      }
      if (path4) {
        parsedPath.pathname = path4;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) {
      options = {};
    }
    let {
      window: window2 = document.defaultView,
      v5Compat = false
    } = options;
    let globalHistory = window2.history;
    let action = Action.Pop;
    let listener = null;
    let index2 = getIndex();
    if (index2 == null) {
      index2 = 0;
      globalHistory.replaceState(_extends({}, globalHistory.state, {
        idx: index2
      }), "");
    }
    function getIndex() {
      let state = globalHistory.state || {
        idx: null
      };
      return state.idx;
    }
    function handlePop() {
      action = Action.Pop;
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index2;
      index2 = nextIndex;
      if (listener) {
        listener({
          action,
          location: history.location,
          delta
        });
      }
    }
    function push2(to, state) {
      action = Action.Push;
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index2 = getIndex() + 1;
      let historyState = getHistoryState(location2, index2);
      let url = history.createHref(location2);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        if (error instanceof DOMException && error.name === "DataCloneError") {
          throw error;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 1
        });
      }
    }
    function replace2(to, state) {
      action = Action.Replace;
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index2 = getIndex();
      let historyState = getHistoryState(location2, index2);
      let url = history.createHref(location2);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 0
        });
      }
    }
    function createURL(to) {
      let base2 = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href = typeof to === "string" ? to : createPath(to);
      invariant(base2, "No window.location.(origin|href) available to create URL for href: " + href);
      return new URL(href, base2);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn2) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn2;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push: push2,
      replace: replace2,
      go(n6) {
        return globalHistory.go(n6);
      }
    };
    return history;
  }
  var ResultType;
  (function(ResultType2) {
    ResultType2["data"] = "data";
    ResultType2["deferred"] = "deferred";
    ResultType2["redirect"] = "redirect";
    ResultType2["error"] = "error";
  })(ResultType || (ResultType = {}));
  function matchRoutes(routes, locationArg, basename3) {
    if (basename3 === void 0) {
      basename3 = "/";
    }
    let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location2.pathname || "/", basename3);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i4 = 0; matches == null && i4 < branches.length; ++i4) {
      matches = matchRouteBranch(
        branches[i4],
        // Incoming pathnames are generally encoded from either window.location
        // or from router.navigate, but we want to match against the unencoded
        // paths in the route definitions.  Memory router locations won't be
        // encoded here but there also shouldn't be anything to decode so this
        // should be a safe operation.  This avoids needing matchRoutes to be
        // history-aware.
        safelyDecodeURI(pathname)
      );
    }
    return matches;
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    let flattenRoute = (route, index2, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index2,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path4 = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path4 + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path4);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path: path4,
        score: computeScore(path4, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index2) => {
      var _route$path;
      if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
        flattenRoute(route, index2);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index2, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path4) {
    let segments = path4.split("/");
    if (segments.length === 0)
      return [];
    let [first2, ...rest] = segments;
    let isOptional = first2.endsWith("?");
    let required = first2.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map((exploded) => path4.startsWith("/") && exploded === "" ? "/" : exploded);
  }
  function rankRouteBranches(branches) {
    branches.sort((a3, b4) => a3.score !== b4.score ? b4.score - a3.score : compareIndexes(a3.routesMeta.map((meta) => meta.childrenIndex), b4.routesMeta.map((meta) => meta.childrenIndex)));
  }
  var paramRe = /^:\w+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s3) => s3 === "*";
  function computeScore(path4, index2) {
    let segments = path4.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index2) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s3) => !isSplat(s3)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a3, b4) {
    let siblings = a3.length === b4.length && a3.slice(0, -1).every((n6, i4) => n6 === b4[i4]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a3[a3.length - 1] - b4[b4.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname) {
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i4 = 0; i4 < routesMeta.length; ++i4) {
      let meta = routesMeta[i4];
      let end2 = i4 === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match2 = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end: end2
      }, remainingPathname);
      if (!match2)
        return null;
      Object.assign(matchedParams, match2.params);
      let route = meta.route;
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match2.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
        route
      });
      if (match2.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match2 = pathname.match(matcher);
    if (!match2)
      return null;
    let matchedPathname = match2[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match2.slice(1);
    let params = paramNames.reduce((memo8, paramName, index2) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index2] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      memo8[paramName] = safelyDecodeURIComponent(captureGroups[index2] || "", paramName);
      return memo8;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path4, caseSensitive, end2) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end2 === void 0) {
      end2 = true;
    }
    warning(path4 === "*" || !path4.endsWith("*") || path4.endsWith("/*"), 'Route path "' + path4 + '" will be treated as if it were ' + ('"' + path4.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path4.replace(/\*$/, "/*") + '".'));
    let paramNames = [];
    let regexpSource = "^" + path4.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_3, paramName) => {
      paramNames.push(paramName);
      return "/([^\\/]+)";
    });
    if (path4.endsWith("*")) {
      paramNames.push("*");
      regexpSource += path4 === "*" || path4 === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end2) {
      regexpSource += "\\/*$";
    } else if (path4 !== "" && path4 !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else
      ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, paramNames];
  }
  function safelyDecodeURI(value) {
    try {
      return decodeURI(value);
    } catch (error) {
      warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
      return value;
    }
  }
  function safelyDecodeURIComponent(value, paramName) {
    try {
      return decodeURIComponent(value);
    } catch (error) {
      warning(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename3) {
    if (basename3 === "/")
      return pathname;
    if (!pathname.toLowerCase().startsWith(basename3.toLowerCase())) {
      return null;
    }
    let startIndex = basename3.endsWith("/") ? basename3.length - 1 : basename3.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search: search2 = "",
      hash: hash2 = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search2),
      hash: normalizeHash(hash2)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1)
          segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char2, field, dest, path4) {
    return "Cannot include a '" + char2 + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path4) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches) {
    return matches.filter((match2, index2) => index2 === 0 || match2.route.path && match2.route.path.length > 0);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = _extends({}, toArg);
      invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from2;
    if (isPathRelative || toPathname == null) {
      from2 = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path4 = resolvePath(to, from2);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path4.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path4.pathname += "/";
    }
    return path4;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search2) => !search2 || search2 === "?" ? "" : search2.startsWith("?") ? search2 : "?" + search2;
  var normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var validMutationMethodsArr = ["post", "put", "patch", "delete"];
  var validMutationMethods = new Set(validMutationMethodsArr);
  var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");

  // ../node_modules/react-router/dist/index.js
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var source = arguments[i4];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var DataRouterContext = /* @__PURE__ */ React174.createContext(null);
  if (true) {
    DataRouterContext.displayName = "DataRouter";
  }
  var DataRouterStateContext = /* @__PURE__ */ React174.createContext(null);
  if (true) {
    DataRouterStateContext.displayName = "DataRouterState";
  }
  var AwaitContext = /* @__PURE__ */ React174.createContext(null);
  if (true) {
    AwaitContext.displayName = "Await";
  }
  var NavigationContext = /* @__PURE__ */ React174.createContext(null);
  if (true) {
    NavigationContext.displayName = "Navigation";
  }
  var LocationContext = /* @__PURE__ */ React174.createContext(null);
  if (true) {
    LocationContext.displayName = "Location";
  }
  var RouteContext = /* @__PURE__ */ React174.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  if (true) {
    RouteContext.displayName = "Route";
  }
  var RouteErrorContext = /* @__PURE__ */ React174.createContext(null);
  if (true) {
    RouteErrorContext.displayName = "RouteError";
  }
  function useHref(to, _temp) {
    let {
      relative: relative2
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      basename: basename3,
      navigator: navigator2
    } = React174.useContext(NavigationContext);
    let {
      hash: hash2,
      pathname,
      search: search2
    } = useResolvedPath(to, {
      relative: relative2
    });
    let joinedPathname = pathname;
    if (basename3 !== "/") {
      joinedPathname = pathname === "/" ? basename3 : joinPaths([basename3, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search: search2,
      hash: hash2
    });
  }
  function useInRouterContext() {
    return React174.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    return React174.useContext(LocationContext).location;
  }
  var navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
  function useIsomorphicLayoutEffect2(cb) {
    let isStatic = React174.useContext(NavigationContext).static;
    if (!isStatic) {
      React174.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let {
      isDataRoute
    } = React174.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let dataRouterContext = React174.useContext(DataRouterContext);
    let {
      basename: basename3,
      navigator: navigator2
    } = React174.useContext(NavigationContext);
    let {
      matches
    } = React174.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
    let activeRef = React174.useRef(false);
    useIsomorphicLayoutEffect2(() => {
      activeRef.current = true;
    });
    let navigate = React174.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path4 = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (dataRouterContext == null && basename3 !== "/") {
        path4.pathname = path4.pathname === "/" ? basename3 : joinPaths([basename3, path4.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path4, options.state, options);
    }, [basename3, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
    return navigate;
  }
  function useParams() {
    let {
      matches
    } = React174.useContext(RouteContext);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative: relative2
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      matches
    } = React174.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
    return React174.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative2 === "path"), [to, routePathnamesJson, locationPathname, relative2]);
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState) {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      navigator: navigator2
    } = React174.useContext(NavigationContext);
    let {
      matches: parentMatches
    } = React174.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (true) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location2;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
      location2 = parsedLocationArg;
    } else {
      location2 = locationFromContext;
    }
    let pathname = location2.pathname || "/";
    let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
    let matches = matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (true) {
      true ? warning(parentRoute || matches != null, 'No routes matched location "' + location2.pathname + location2.search + location2.hash + '" ') : void 0;
      true ? warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0, 'Matched leaf route at location "' + location2.pathname + location2.search + location2.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
      params: Object.assign({}, parentParams, match2.params),
      pathname: joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
      ]),
      pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
      ])
    })), parentMatches, dataRouterState);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React174.createElement(LocationContext.Provider, {
        value: {
          location: _extends2({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location2),
          navigationType: Action.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    let devInfo = null;
    if (true) {
      console.error("Error handled by React Router default ErrorBoundary:", error);
      devInfo = /* @__PURE__ */ React174.createElement(React174.Fragment, null, /* @__PURE__ */ React174.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React174.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React174.createElement("code", {
        style: codeStyles
      }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React174.createElement("code", {
        style: codeStyles
      }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React174.createElement(React174.Fragment, null, /* @__PURE__ */ React174.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React174.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message), stack ? /* @__PURE__ */ React174.createElement("pre", {
      style: preStyles
    }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React174.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React174.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error) {
      return {
        error
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error || state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error, errorInfo) {
      console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
      return this.state.error ? /* @__PURE__ */ React174.createElement(RouteContext.Provider, {
        value: this.props.routeContext
      }, /* @__PURE__ */ React174.createElement(RouteErrorContext.Provider, {
        value: this.state.error,
        children: this.props.component
      })) : this.props.children;
    }
  };
  function RenderedRoute(_ref) {
    let {
      routeContext,
      match: match2,
      children
    } = _ref;
    let dataRouterContext = React174.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
    }
    return /* @__PURE__ */ React174.createElement(RouteContext.Provider, {
      value: routeContext
    }, children);
  }
  function _renderMatches(matches, parentMatches, dataRouterState) {
    var _dataRouterState2;
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (dataRouterState === void 0) {
      dataRouterState = null;
    }
    if (matches == null) {
      var _dataRouterState;
      if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]));
      !(errorIndex >= 0) ? true ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    return renderedMatches.reduceRight((outlet, match2, index2) => {
      let error = match2.route.id ? errors == null ? void 0 : errors[match2.route.id] : null;
      let errorElement = null;
      if (dataRouterState) {
        errorElement = match2.route.errorElement || defaultErrorElement;
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
      let getChildren2 = () => {
        let children;
        if (error) {
          children = errorElement;
        } else if (match2.route.Component) {
          children = /* @__PURE__ */ React174.createElement(match2.route.Component, null);
        } else if (match2.route.element) {
          children = match2.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React174.createElement(RenderedRoute, {
          match: match2,
          routeContext: {
            outlet,
            matches: matches2,
            isDataRoute: dataRouterState != null
          },
          children
        });
      };
      return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index2 === 0) ? /* @__PURE__ */ React174.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error,
        children: getChildren2(),
        routeContext: {
          outlet: null,
          matches: matches2,
          isDataRoute: true
        }
      }) : getChildren2();
    }, null);
  }
  var DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
    DataRouterHook3["UseBlocker"] = "useBlocker";
    DataRouterHook3["UseRevalidator"] = "useRevalidator";
    DataRouterHook3["UseNavigateStable"] = "useNavigate";
    return DataRouterHook3;
  }(DataRouterHook || {});
  var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
    DataRouterStateHook3["UseBlocker"] = "useBlocker";
    DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook3["UseActionData"] = "useActionData";
    DataRouterStateHook3["UseRouteError"] = "useRouteError";
    DataRouterStateHook3["UseNavigation"] = "useNavigation";
    DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook3["UseMatches"] = "useMatches";
    DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook3["UseRouteId"] = "useRouteId";
    return DataRouterStateHook3;
  }(DataRouterStateHook || {});
  function getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext(hookName) {
    let ctx = React174.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React174.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useRouteContext(hookName) {
    let route = React174.useContext(RouteContext);
    !route ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id ? true ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(DataRouterStateHook.UseRouteId);
  }
  function useNavigation() {
    let state = useDataRouterState(DataRouterStateHook.UseNavigation);
    return state.navigation;
  }
  function useMatches() {
    let {
      matches,
      loaderData
    } = useDataRouterState(DataRouterStateHook.UseMatches);
    return React174.useMemo(() => matches.map((match2) => {
      let {
        pathname,
        params
      } = match2;
      return {
        id: match2.route.id,
        pathname,
        params,
        data: loaderData[match2.route.id],
        handle: match2.route.handle
      };
    }), [matches, loaderData]);
  }
  function useRouteError() {
    var _state$errors;
    let error = React174.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
    if (error) {
      return error;
    }
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
  }
  function useNavigateStable() {
    let {
      router
    } = useDataRouterContext(DataRouterHook.UseNavigateStable);
    let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
    let activeRef = React174.useRef(false);
    useIsomorphicLayoutEffect2(() => {
      activeRef.current = true;
    });
    let navigate = React174.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        router.navigate(to, _extends2({
          fromRouteId: id
        }, options));
      }
    }, [router, id]);
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      true ? warning(false, message) : void 0;
    }
  }
  var START_TRANSITION = "startTransition";
  var startTransitionImpl = React174[START_TRANSITION];
  function Router(_ref5) {
    let {
      basename: basenameProp = "/",
      children = null,
      location: locationProp,
      navigationType = Action.Pop,
      navigator: navigator2,
      static: staticProp = false
    } = _ref5;
    !!useInRouterContext() ? true ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
    let basename3 = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React174.useMemo(() => ({
      basename: basename3,
      navigator: navigator2,
      static: staticProp
    }), [basename3, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search: search2 = "",
      hash: hash2 = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React174.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename3);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search: search2,
          hash: hash2,
          state,
          key
        },
        navigationType
      };
    }, [basename3, pathname, search2, hash2, state, key, navigationType]);
    true ? warning(locationContext != null, '<Router basename="' + basename3 + '"> is not able to match the URL ' + ('"' + pathname + search2 + hash2 + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React174.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React174.createElement(LocationContext.Provider, {
      children,
      value: locationContext
    }));
  }
  var neverSettledPromise = new Promise(() => {
  });

  // ../node_modules/react-router-dom/dist/index.js
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var source = arguments[i4];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i4;
    for (i4 = 0; i4 < sourceKeys.length; i4++) {
      key = sourceKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
  }
  function isButtonElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
  }
  function isFormElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
  }
  function isInputElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e3) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      true ? warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename3) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename3) : null;
      method = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename3) : null;
      method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let {
          name,
          type,
          value
        } = target;
        if (type === "image") {
          let prefix2 = name ? name + "." : "";
          formData.append(prefix2 + "x", "0");
          formData.append(prefix2 + "y", "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    } else {
      method = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return {
      action,
      method: method.toLowerCase(),
      encType,
      formData,
      body
    };
  }
  var _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"];
  var _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"];
  var _excluded3 = ["reloadDocument", "replace", "state", "method", "action", "onSubmit", "submit", "relative", "preventScrollReset"];
  var START_TRANSITION2 = "startTransition";
  var startTransitionImpl2 = React175[START_TRANSITION2];
  function BrowserRouter(_ref) {
    let {
      basename: basename3,
      children,
      future,
      window: window2
    } = _ref;
    let historyRef = React175.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({
        window: window2,
        v5Compat: true
      });
    }
    let history = historyRef.current;
    let [state, setStateImpl] = React175.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React175.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React175.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React175.createElement(Router, {
      basename: basename3,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    });
  }
  function HistoryRouter(_ref3) {
    let {
      basename: basename3,
      children,
      future,
      history
    } = _ref3;
    let [state, setStateImpl] = React175.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React175.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React175.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React175.createElement(Router, {
      basename: basename3,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    });
  }
  if (true) {
    HistoryRouter.displayName = "unstable_HistoryRouter";
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link2 = /* @__PURE__ */ React175.forwardRef(function LinkWithRef(_ref4, ref) {
    let {
      onClick,
      relative: relative2,
      reloadDocument,
      replace: replace2,
      state,
      target,
      to,
      preventScrollReset
    } = _ref4, rest = _objectWithoutPropertiesLoose(_ref4, _excluded);
    let {
      basename: basename3
    } = React175.useContext(NavigationContext);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
      absoluteHref = to;
      if (isBrowser) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path4 = stripBasename(targetUrl.pathname, basename3);
          if (targetUrl.origin === currentUrl.origin && path4 != null) {
            to = path4 + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e3) {
          true ? warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
        }
      }
    }
    let href = useHref(to, {
      relative: relative2
    });
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target,
      preventScrollReset,
      relative: relative2
    });
    function handleClick(event) {
      if (onClick)
        onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    return (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React175.createElement("a", _extends3({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref,
        target
      }))
    );
  });
  if (true) {
    Link2.displayName = "Link";
  }
  var NavLink = /* @__PURE__ */ React175.forwardRef(function NavLinkWithRef(_ref5, ref) {
    let {
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end: end2 = false,
      style: styleProp,
      to,
      children
    } = _ref5, rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);
    let path4 = useResolvedPath(to, {
      relative: rest.relative
    });
    let location2 = useLocation();
    let routerState = React175.useContext(DataRouterStateContext);
    let {
      navigator: navigator2
    } = React175.useContext(NavigationContext);
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path4).pathname : path4.pathname;
    let locationPathname = location2.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    let isActive = locationPathname === toPathname || !end2 && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end2 && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let ariaCurrent = isActive ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp({
        isActive,
        isPending
      });
    } else {
      className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
    }
    let style = typeof styleProp === "function" ? styleProp({
      isActive,
      isPending
    }) : styleProp;
    return /* @__PURE__ */ React175.createElement(Link2, _extends3({}, rest, {
      "aria-current": ariaCurrent,
      className,
      ref,
      style,
      to
    }), typeof children === "function" ? children({
      isActive,
      isPending
    }) : children);
  });
  if (true) {
    NavLink.displayName = "NavLink";
  }
  var Form = /* @__PURE__ */ React175.forwardRef((props, ref) => {
    let submit = useSubmit();
    return /* @__PURE__ */ React175.createElement(FormImpl, _extends3({}, props, {
      submit,
      ref
    }));
  });
  if (true) {
    Form.displayName = "Form";
  }
  var FormImpl = /* @__PURE__ */ React175.forwardRef((_ref6, forwardedRef) => {
    let {
      reloadDocument,
      replace: replace2,
      state,
      method = defaultMethod,
      action,
      onSubmit,
      submit,
      relative: relative2,
      preventScrollReset
    } = _ref6, props = _objectWithoutPropertiesLoose(_ref6, _excluded3);
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let formAction = useFormAction(action, {
      relative: relative2
    });
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
      submit(submitter || event.currentTarget, {
        method: submitMethod,
        replace: replace2,
        state,
        relative: relative2,
        preventScrollReset
      });
    };
    return /* @__PURE__ */ React175.createElement("form", _extends3({
      ref: forwardedRef,
      method: formMethod,
      action: formAction,
      onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
  });
  if (true) {
    FormImpl.displayName = "FormImpl";
  }
  function ScrollRestoration(_ref7) {
    let {
      getKey,
      storageKey
    } = _ref7;
    useScrollRestoration({
      getKey,
      storageKey
    });
    return null;
  }
  if (true) {
    ScrollRestoration.displayName = "ScrollRestoration";
  }
  var DataRouterHook2;
  (function(DataRouterHook3) {
    DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook3["UseSubmit"] = "useSubmit";
    DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook3["UseFetcher"] = "useFetcher";
  })(DataRouterHook2 || (DataRouterHook2 = {}));
  var DataRouterStateHook2;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseFetchers"] = "useFetchers";
    DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
  })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
  function getDataRouterConsoleError2(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext2(hookName) {
    let ctx = React175.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React175.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative: relative2
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location2 = useLocation();
    let path4 = useResolvedPath(to, {
      relative: relative2
    });
    return React175.useCallback((event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path4);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative: relative2
        });
      }
    }, [location2, navigate, path4, replaceProp, state, target, to, preventScrollReset, relative2]);
  }
  function validateClientSideSubmission() {
    if (typeof document === "undefined") {
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    }
  }
  function useSubmit() {
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseSubmit);
    let {
      basename: basename3
    } = React175.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React175.useCallback(function(target, options) {
      if (options === void 0) {
        options = {};
      }
      validateClientSideSubmission();
      let {
        action,
        method,
        encType,
        formData,
        body
      } = getFormSubmissionInfo(target, basename3);
      router.navigate(options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        replace: options.replace,
        state: options.state,
        fromRouteId: currentRouteId
      });
    }, [router, basename3, currentRouteId]);
  }
  function useFormAction(action, _temp2) {
    let {
      relative: relative2
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      basename: basename3
    } = React175.useContext(NavigationContext);
    let routeContext = React175.useContext(RouteContext);
    !routeContext ? true ? invariant(false, "useFormAction must be used inside a RouteContext") : invariant(false) : void 0;
    let [match2] = routeContext.matches.slice(-1);
    let path4 = _extends3({}, useResolvedPath(action ? action : ".", {
      relative: relative2
    }));
    let location2 = useLocation();
    if (action == null) {
      path4.search = location2.search;
      if (match2.route.index) {
        let params = new URLSearchParams(path4.search);
        params.delete("index");
        path4.search = params.toString() ? "?" + params.toString() : "";
      }
    }
    if ((!action || action === ".") && match2.route.index) {
      path4.search = path4.search ? path4.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename3 !== "/") {
      path4.pathname = path4.pathname === "/" ? basename3 : joinPaths([basename3, path4.pathname]);
    }
    return createPath(path4);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function useScrollRestoration(_temp3) {
    let {
      getKey,
      storageKey
    } = _temp3 === void 0 ? {} : _temp3;
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
    let {
      restoreScrollPosition,
      preventScrollReset
    } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
    let {
      basename: basename3
    } = React175.useContext(NavigationContext);
    let location2 = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React175.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(React175.useCallback(() => {
      if (navigation.state === "idle") {
        let key = (getKey ? getKey(location2, matches) : null) || location2.key;
        savedScrollPositions[key] = window.scrollY;
      }
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
      window.history.scrollRestoration = "auto";
    }, [storageKey, getKey, navigation.state, location2, matches]));
    if (typeof document !== "undefined") {
      React175.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e3) {
        }
      }, [storageKey]);
      React175.useLayoutEffect(() => {
        let getKeyWithoutBasename = getKey && basename3 !== "/" ? (location3, matches2) => getKey(
          // Strip the basename to match useLocation()
          _extends3({}, location3, {
            pathname: stripBasename(location3.pathname, basename3) || location3.pathname
          }),
          matches2
        ) : getKey;
        let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename3, getKey]);
      React175.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location2.hash) {
          let el = document.getElementById(decodeURIComponent(location2.hash.slice(1)));
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location2, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let {
      capture
    } = options || {};
    React175.useEffect(() => {
      let opts = capture != null ? {
        capture
      } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }

  // ../node_modules/react-error-boundary/dist/react-error-boundary.esm.js
  var import_react58 = __toESM(require_react());
  var ErrorBoundaryContext = (0, import_react58.createContext)(null);
  var initialState = {
    didCatch: false,
    error: null
  };
  var ErrorBoundary = class extends import_react58.Component {
    constructor(props) {
      super(props);
      this.resetErrorBoundary = this.resetErrorBoundary.bind(this);
      this.state = initialState;
    }
    static getDerivedStateFromError(error) {
      return {
        didCatch: true,
        error
      };
    }
    resetErrorBoundary() {
      const {
        error
      } = this.state;
      if (error !== null) {
        var _this$props$onReset, _this$props;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {
          args,
          reason: "imperative-api"
        });
        this.setState(initialState);
      }
    }
    componentDidCatch(error, info) {
      var _this$props$onError, _this$props2;
      (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);
    }
    componentDidUpdate(prevProps, prevState) {
      const {
        didCatch
      } = this.state;
      const {
        resetKeys
      } = this.props;
      if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {
        var _this$props$onReset2, _this$props3;
        (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {
          next: resetKeys,
          prev: prevProps.resetKeys,
          reason: "keys"
        });
        this.setState(initialState);
      }
    }
    render() {
      const {
        children,
        fallbackRender,
        FallbackComponent,
        fallback: fallback2
      } = this.props;
      const {
        didCatch,
        error
      } = this.state;
      let childToRender = children;
      if (didCatch) {
        const props = {
          error,
          resetErrorBoundary: this.resetErrorBoundary
        };
        if ((0, import_react58.isValidElement)(fallback2)) {
          childToRender = fallback2;
        } else if (typeof fallbackRender === "function") {
          childToRender = fallbackRender(props);
        } else if (FallbackComponent) {
          childToRender = (0, import_react58.createElement)(FallbackComponent, props);
        } else {
          throw error;
        }
      }
      return (0, import_react58.createElement)(ErrorBoundaryContext.Provider, {
        value: {
          didCatch,
          error,
          resetErrorBoundary: this.resetErrorBoundary
        }
      }, childToRender);
    }
  };
  function hasArrayChanged() {
    let a3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    let b4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    return a3.length !== b4.length || a3.some((item, index2) => !Object.is(item, b4[index2]));
  }

  // src/components/FallbackError.tsx
  var import_react59 = __toESM(require_react(), 1);
  var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
  var FallbackError = ({ error, resetErrorBoundary }) => {
    const [open, setOpen] = (0, import_react59.useState)(true);
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Dialog, { open, children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(DialogSurface, { children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(DialogBody, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(DialogTitle, { children: "Unhandled Error" }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(DialogContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h4", { children: error.message.toString() }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("pre", { children: error.stack })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(DialogActions, { children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(DialogTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Button, { appearance: "secondary", onClick: () => resetErrorBoundary(), children: "Close" }) }) })
    ] }) }) });
  };

  // ../node_modules/tslib/tslib.es6.mjs
  var extendStatics = function(d3, b4) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b5) {
      d4.__proto__ = b5;
    } || function(d4, b5) {
      for (var p3 in b5)
        if (Object.prototype.hasOwnProperty.call(b5, p3))
          d4[p3] = b5[p3];
    };
    return extendStatics(d3, b4);
  };
  function __extends(d3, b4) {
    if (typeof b4 !== "function" && b4 !== null)
      throw new TypeError("Class extends value " + String(b4) + " is not a constructor or null");
    extendStatics(d3, b4);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
  }
  var __assign = function() {
    __assign = Object.assign || function __assign3(t4) {
      for (var s3, i4 = 1, n6 = arguments.length; i4 < n6; i4++) {
        s3 = arguments[i4];
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3))
            t4[p3] = s3[p3];
      }
      return t4;
    };
    return __assign.apply(this, arguments);
  };
  function __rest(s3, e3) {
    var t4 = {};
    for (var p3 in s3)
      if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
        t4[p3] = s3[p3];
    if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i4 = 0, p3 = Object.getOwnPropertySymbols(s3); i4 < p3.length; i4++) {
        if (e3.indexOf(p3[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i4]))
          t4[p3[i4]] = s3[p3[i4]];
      }
    return t4;
  }
  function __decorate(decorators, target, key, desc) {
    var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r3 = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i4 = decorators.length - 1; i4 >= 0; i4--)
        if (d3 = decorators[i4])
          r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
    return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
  }
  function __spreadArray(to, from2, pack) {
    if (pack || arguments.length === 2)
      for (var i4 = 0, l4 = from2.length, ar; i4 < l4; i4++) {
        if (ar || !(i4 in from2)) {
          if (!ar)
            ar = Array.prototype.slice.call(from2, 0, i4);
          ar[i4] = from2[i4];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from2));
  }

  // ../node_modules/@fluentui/merge-styles/lib/Stylesheet.js
  var InjectionMode = {
    /**
     * Avoids style injection, use getRules() to read the styles.
     */
    none: 0,
    /**
     * Inserts rules using the insertRule api.
     */
    insertNode: 1,
    /**
     * Appends rules using appendChild.
     */
    appendChild: 2
  };
  var STYLESHEET_SETTING = "__stylesheet__";
  var REUSE_STYLE_NODE = typeof navigator !== "undefined" && /rv:11.0/.test(navigator.userAgent);
  var _global = {};
  try {
    _global = window || {};
  } catch (_a5) {
  }
  var _stylesheet;
  var Stylesheet = (
    /** @class */
    function() {
      function Stylesheet2(config, serializedStylesheet) {
        var _a5, _b, _c, _d, _e, _f;
        this._rules = [];
        this._preservedRules = [];
        this._counter = 0;
        this._keyToClassName = {};
        this._onInsertRuleCallbacks = [];
        this._onResetCallbacks = [];
        this._classNameToArgs = {};
        this._config = __assign({
          // If there is no document we won't have an element to inject into.
          injectionMode: typeof document === "undefined" ? InjectionMode.none : InjectionMode.insertNode,
          defaultPrefix: "css",
          namespace: void 0,
          cspSettings: void 0
        }, config);
        this._classNameToArgs = (_a5 = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.classNameToArgs) !== null && _a5 !== void 0 ? _a5 : this._classNameToArgs;
        this._counter = (_b = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.counter) !== null && _b !== void 0 ? _b : this._counter;
        this._keyToClassName = (_d = (_c = this._config.classNameCache) !== null && _c !== void 0 ? _c : serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.keyToClassName) !== null && _d !== void 0 ? _d : this._keyToClassName;
        this._preservedRules = (_e = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.preservedRules) !== null && _e !== void 0 ? _e : this._preservedRules;
        this._rules = (_f = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.rules) !== null && _f !== void 0 ? _f : this._rules;
      }
      Stylesheet2.getInstance = function() {
        _stylesheet = _global[STYLESHEET_SETTING];
        if (!_stylesheet || _stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document) {
          var fabricConfig = (_global === null || _global === void 0 ? void 0 : _global.FabricConfig) || {};
          var stylesheet3 = new Stylesheet2(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);
          _stylesheet = stylesheet3;
          _global[STYLESHEET_SETTING] = stylesheet3;
        }
        return _stylesheet;
      };
      Stylesheet2.prototype.serialize = function() {
        return JSON.stringify({
          classNameToArgs: this._classNameToArgs,
          counter: this._counter,
          keyToClassName: this._keyToClassName,
          preservedRules: this._preservedRules,
          rules: this._rules
        });
      };
      Stylesheet2.prototype.setConfig = function(config) {
        this._config = __assign(__assign({}, this._config), config);
      };
      Stylesheet2.prototype.onReset = function(callback) {
        var _this = this;
        this._onResetCallbacks.push(callback);
        return function() {
          _this._onResetCallbacks = _this._onResetCallbacks.filter(function(cb) {
            return cb !== callback;
          });
        };
      };
      Stylesheet2.prototype.onInsertRule = function(callback) {
        var _this = this;
        this._onInsertRuleCallbacks.push(callback);
        return function() {
          _this._onInsertRuleCallbacks = _this._onInsertRuleCallbacks.filter(function(cb) {
            return cb !== callback;
          });
        };
      };
      Stylesheet2.prototype.getClassName = function(displayName) {
        var namespace = this._config.namespace;
        var prefix2 = displayName || this._config.defaultPrefix;
        return "".concat(namespace ? namespace + "-" : "").concat(prefix2, "-").concat(this._counter++);
      };
      Stylesheet2.prototype.cacheClassName = function(className, key, args, rules2) {
        this._keyToClassName[key] = className;
        this._classNameToArgs[className] = {
          args,
          rules: rules2
        };
      };
      Stylesheet2.prototype.classNameFromKey = function(key) {
        return this._keyToClassName[key];
      };
      Stylesheet2.prototype.getClassNameCache = function() {
        return this._keyToClassName;
      };
      Stylesheet2.prototype.argsFromClassName = function(className) {
        var entry = this._classNameToArgs[className];
        return entry && entry.args;
      };
      Stylesheet2.prototype.insertedRulesFromClassName = function(className) {
        var entry = this._classNameToArgs[className];
        return entry && entry.rules;
      };
      Stylesheet2.prototype.insertRule = function(rule, preserve) {
        var injectionMode = this._config.injectionMode;
        var element2 = injectionMode !== InjectionMode.none ? this._getStyleElement() : void 0;
        if (preserve) {
          this._preservedRules.push(rule);
        }
        if (element2) {
          switch (injectionMode) {
            case InjectionMode.insertNode:
              var sheet = element2.sheet;
              try {
                sheet.insertRule(rule, sheet.cssRules.length);
              } catch (e3) {
              }
              break;
            case InjectionMode.appendChild:
              element2.appendChild(document.createTextNode(rule));
              break;
          }
        } else {
          this._rules.push(rule);
        }
        if (this._config.onInsertRule) {
          this._config.onInsertRule(rule);
        }
        this._onInsertRuleCallbacks.forEach(function(callback) {
          return callback();
        });
      };
      Stylesheet2.prototype.getRules = function(includePreservedRules) {
        return (includePreservedRules ? this._preservedRules.join("") : "") + this._rules.join("");
      };
      Stylesheet2.prototype.reset = function() {
        this._rules = [];
        this._counter = 0;
        this._classNameToArgs = {};
        this._keyToClassName = {};
        this._onResetCallbacks.forEach(function(callback) {
          return callback();
        });
      };
      Stylesheet2.prototype.resetKeys = function() {
        this._keyToClassName = {};
      };
      Stylesheet2.prototype._getStyleElement = function() {
        var _this = this;
        if (!this._styleElement && typeof document !== "undefined") {
          this._styleElement = this._createStyleElement();
          if (!REUSE_STYLE_NODE) {
            window.requestAnimationFrame(function() {
              _this._styleElement = void 0;
            });
          }
        }
        return this._styleElement;
      };
      Stylesheet2.prototype._createStyleElement = function() {
        var head = document.head;
        var styleElement = document.createElement("style");
        var nodeToInsertBefore = null;
        styleElement.setAttribute("data-merge-styles", "true");
        var cspSettings = this._config.cspSettings;
        if (cspSettings) {
          if (cspSettings.nonce) {
            styleElement.setAttribute("nonce", cspSettings.nonce);
          }
        }
        if (this._lastStyleElement) {
          nodeToInsertBefore = this._lastStyleElement.nextElementSibling;
        } else {
          var placeholderStyleTag = this._findPlaceholderStyleTag();
          if (placeholderStyleTag) {
            nodeToInsertBefore = placeholderStyleTag.nextElementSibling;
          } else {
            nodeToInsertBefore = head.childNodes[0];
          }
        }
        head.insertBefore(styleElement, head.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);
        this._lastStyleElement = styleElement;
        return styleElement;
      };
      Stylesheet2.prototype._findPlaceholderStyleTag = function() {
        var head = document.head;
        if (head) {
          return head.querySelector("style[data-merge-styles]");
        }
        return null;
      };
      return Stylesheet2;
    }()
  );

  // ../node_modules/@fluentui/merge-styles/lib/extractStyleParts.js
  function extractStyleParts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var classes = [];
    var objects = [];
    var stylesheet3 = Stylesheet.getInstance();
    function _processArgs(argsList) {
      for (var _i2 = 0, argsList_1 = argsList; _i2 < argsList_1.length; _i2++) {
        var arg = argsList_1[_i2];
        if (arg) {
          if (typeof arg === "string") {
            if (arg.indexOf(" ") >= 0) {
              _processArgs(arg.split(" "));
            } else {
              var translatedArgs = stylesheet3.argsFromClassName(arg);
              if (translatedArgs) {
                _processArgs(translatedArgs);
              } else {
                if (classes.indexOf(arg) === -1) {
                  classes.push(arg);
                }
              }
            }
          } else if (Array.isArray(arg)) {
            _processArgs(arg);
          } else if (typeof arg === "object") {
            objects.push(arg);
          }
        }
      }
    }
    _processArgs(args);
    return {
      classes,
      objects
    };
  }

  // ../node_modules/@fluentui/merge-styles/lib/StyleOptionsState.js
  function setRTL(isRTL2) {
    if (_rtl !== isRTL2) {
      _rtl = isRTL2;
    }
  }
  function getRTL() {
    if (_rtl === void 0) {
      _rtl = typeof document !== "undefined" && !!document.documentElement && document.documentElement.getAttribute("dir") === "rtl";
    }
    return _rtl;
  }
  var _rtl;
  _rtl = getRTL();
  function getStyleOptions() {
    return {
      rtl: getRTL()
    };
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/kebabRules.js
  var rules = {};
  function kebabRules(rulePairs, index2) {
    var rule = rulePairs[index2];
    if (rule.charAt(0) !== "-") {
      rulePairs[index2] = rules[rule] = rules[rule] || rule.replace(/([A-Z])/g, "-$1").toLowerCase();
    }
  }

  // ../node_modules/@fluentui/merge-styles/lib/getVendorSettings.js
  var _vendorSettings;
  function getVendorSettings() {
    var _a5;
    if (!_vendorSettings) {
      var doc = typeof document !== "undefined" ? document : void 0;
      var nav = typeof navigator !== "undefined" ? navigator : void 0;
      var userAgent = (_a5 = nav === null || nav === void 0 ? void 0 : nav.userAgent) === null || _a5 === void 0 ? void 0 : _a5.toLowerCase();
      if (!doc) {
        _vendorSettings = {
          isWebkit: true,
          isMoz: true,
          isOpera: true,
          isMs: true
        };
      } else {
        _vendorSettings = {
          isWebkit: !!(doc && "WebkitAppearance" in doc.documentElement.style),
          isMoz: !!(userAgent && userAgent.indexOf("firefox") > -1),
          isOpera: !!(userAgent && userAgent.indexOf("opera") > -1),
          isMs: !!(nav && (/rv:11.0/i.test(nav.userAgent) || /Edge\/\d./i.test(navigator.userAgent)))
        };
      }
    }
    return _vendorSettings;
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/prefixRules.js
  var autoPrefixNames = {
    "user-select": 1
  };
  function prefixRules(rulePairs, index2) {
    var vendorSettings = getVendorSettings();
    var name = rulePairs[index2];
    if (autoPrefixNames[name]) {
      var value = rulePairs[index2 + 1];
      if (autoPrefixNames[name]) {
        if (vendorSettings.isWebkit) {
          rulePairs.push("-webkit-" + name, value);
        }
        if (vendorSettings.isMoz) {
          rulePairs.push("-moz-" + name, value);
        }
        if (vendorSettings.isMs) {
          rulePairs.push("-ms-" + name, value);
        }
        if (vendorSettings.isOpera) {
          rulePairs.push("-o-" + name, value);
        }
      }
    }
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/provideUnits.js
  var NON_PIXEL_NUMBER_PROPS = [
    "column-count",
    "font-weight",
    "flex",
    "flex-grow",
    "flex-shrink",
    "fill-opacity",
    "opacity",
    "order",
    "z-index",
    "zoom"
  ];
  function provideUnits(rulePairs, index2) {
    var name = rulePairs[index2];
    var value = rulePairs[index2 + 1];
    if (typeof value === "number") {
      var isNonPixelProp = NON_PIXEL_NUMBER_PROPS.indexOf(name) > -1;
      var isVariableOrPrefixed = name.indexOf("--") > -1;
      var unit = isNonPixelProp || isVariableOrPrefixed ? "" : "px";
      rulePairs[index2 + 1] = "".concat(value).concat(unit);
    }
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/rtlifyRules.js
  var _a;
  var LEFT = "left";
  var RIGHT = "right";
  var NO_FLIP = "@noflip";
  var NAME_REPLACEMENTS = (_a = {}, _a[LEFT] = RIGHT, _a[RIGHT] = LEFT, _a);
  var VALUE_REPLACEMENTS = {
    "w-resize": "e-resize",
    "sw-resize": "se-resize",
    "nw-resize": "ne-resize"
  };
  function rtlifyRules(options, rulePairs, index2) {
    if (options.rtl) {
      var name_1 = rulePairs[index2];
      if (!name_1) {
        return;
      }
      var value = rulePairs[index2 + 1];
      if (typeof value === "string" && value.indexOf(NO_FLIP) >= 0) {
        rulePairs[index2 + 1] = value.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g, "");
      } else if (name_1.indexOf(LEFT) >= 0) {
        rulePairs[index2] = name_1.replace(LEFT, RIGHT);
      } else if (name_1.indexOf(RIGHT) >= 0) {
        rulePairs[index2] = name_1.replace(RIGHT, LEFT);
      } else if (String(value).indexOf(LEFT) >= 0) {
        rulePairs[index2 + 1] = value.replace(LEFT, RIGHT);
      } else if (String(value).indexOf(RIGHT) >= 0) {
        rulePairs[index2 + 1] = value.replace(RIGHT, LEFT);
      } else if (NAME_REPLACEMENTS[name_1]) {
        rulePairs[index2] = NAME_REPLACEMENTS[name_1];
      } else if (VALUE_REPLACEMENTS[value]) {
        rulePairs[index2 + 1] = VALUE_REPLACEMENTS[value];
      } else {
        switch (name_1) {
          case "margin":
          case "padding":
            rulePairs[index2 + 1] = flipQuad(value);
            break;
          case "box-shadow":
            rulePairs[index2 + 1] = negateNum(value, 0);
            break;
        }
      }
    }
  }
  function negateNum(value, partIndex) {
    var parts = value.split(" ");
    var numberVal = parseInt(parts[partIndex], 10);
    parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));
    return parts.join(" ");
  }
  function flipQuad(value) {
    if (typeof value === "string") {
      var parts = value.split(" ");
      if (parts.length === 4) {
        return "".concat(parts[0], " ").concat(parts[3], " ").concat(parts[2], " ").concat(parts[1]);
      }
    }
    return value;
  }

  // ../node_modules/@fluentui/merge-styles/lib/tokenizeWithParentheses.js
  function tokenizeWithParentheses(value) {
    var parts = [];
    var partStart = 0;
    var parens = 0;
    for (var i4 = 0; i4 < value.length; i4++) {
      switch (value[i4]) {
        case "(":
          parens++;
          break;
        case ")":
          if (parens) {
            parens--;
          }
          break;
        case "	":
        case " ":
          if (!parens) {
            if (i4 > partStart) {
              parts.push(value.substring(partStart, i4));
            }
            partStart = i4 + 1;
          }
          break;
      }
    }
    if (partStart < value.length) {
      parts.push(value.substring(partStart));
    }
    return parts;
  }

  // ../node_modules/@fluentui/merge-styles/lib/styleToClassName.js
  var DISPLAY_NAME = "displayName";
  function getDisplayName(rules2) {
    var rootStyle = rules2 && rules2["&"];
    return rootStyle ? rootStyle.displayName : void 0;
  }
  var globalSelectorRegExp = /\:global\((.+?)\)/g;
  function expandCommaSeparatedGlobals(selectorWithGlobals) {
    if (!globalSelectorRegExp.test(selectorWithGlobals)) {
      return selectorWithGlobals;
    }
    var replacementInfo = [];
    var findGlobal = /\:global\((.+?)\)/g;
    var match2 = null;
    while (match2 = findGlobal.exec(selectorWithGlobals)) {
      if (match2[1].indexOf(",") > -1) {
        replacementInfo.push([
          match2.index,
          match2.index + match2[0].length,
          // Wrap each of the found selectors in :global()
          match2[1].split(",").map(function(v3) {
            return ":global(".concat(v3.trim(), ")");
          }).join(", ")
        ]);
      }
    }
    return replacementInfo.reverse().reduce(function(selector, _a5) {
      var matchIndex = _a5[0], matchEndIndex = _a5[1], replacement = _a5[2];
      var prefix2 = selector.slice(0, matchIndex);
      var suffix = selector.slice(matchEndIndex);
      return prefix2 + replacement + suffix;
    }, selectorWithGlobals);
  }
  function expandSelector(newSelector, currentSelector) {
    if (newSelector.indexOf(":global(") >= 0) {
      return newSelector.replace(globalSelectorRegExp, "$1");
    } else if (newSelector.indexOf(":") === 0) {
      return currentSelector + newSelector;
    } else if (newSelector.indexOf("&") < 0) {
      return currentSelector + " " + newSelector;
    }
    return newSelector;
  }
  function extractSelector(currentSelector, rules2, selector, value) {
    if (rules2 === void 0) {
      rules2 = { __order: [] };
    }
    if (selector.indexOf("@") === 0) {
      selector = selector + "{" + currentSelector;
      extractRules([value], rules2, selector);
    } else if (selector.indexOf(",") > -1) {
      expandCommaSeparatedGlobals(selector).split(",").map(function(s3) {
        return s3.trim();
      }).forEach(function(separatedSelector) {
        return extractRules([value], rules2, expandSelector(separatedSelector, currentSelector));
      });
    } else {
      extractRules([value], rules2, expandSelector(selector, currentSelector));
    }
  }
  function extractRules(args, rules2, currentSelector) {
    if (rules2 === void 0) {
      rules2 = { __order: [] };
    }
    if (currentSelector === void 0) {
      currentSelector = "&";
    }
    var stylesheet3 = Stylesheet.getInstance();
    var currentRules = rules2[currentSelector];
    if (!currentRules) {
      currentRules = {};
      rules2[currentSelector] = currentRules;
      rules2.__order.push(currentSelector);
    }
    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
      var arg = args_1[_i];
      if (typeof arg === "string") {
        var expandedRules = stylesheet3.argsFromClassName(arg);
        if (expandedRules) {
          extractRules(expandedRules, rules2, currentSelector);
        }
      } else if (Array.isArray(arg)) {
        extractRules(arg, rules2, currentSelector);
      } else {
        for (var prop in arg) {
          if (arg.hasOwnProperty(prop)) {
            var propValue = arg[prop];
            if (prop === "selectors") {
              var selectors = arg.selectors;
              for (var newSelector in selectors) {
                if (selectors.hasOwnProperty(newSelector)) {
                  extractSelector(currentSelector, rules2, newSelector, selectors[newSelector]);
                }
              }
            } else if (typeof propValue === "object") {
              if (propValue !== null) {
                extractSelector(currentSelector, rules2, prop, propValue);
              }
            } else {
              if (propValue !== void 0) {
                if (prop === "margin" || prop === "padding") {
                  expandQuads(currentRules, prop, propValue);
                } else {
                  currentRules[prop] = propValue;
                }
              }
            }
          }
        }
      }
    }
    return rules2;
  }
  function expandQuads(currentRules, name, value) {
    var parts = typeof value === "string" ? tokenizeWithParentheses(value) : [value];
    if (parts.length === 0) {
      parts.push(value);
    }
    if (parts[parts.length - 1] === "!important") {
      parts = parts.slice(0, -1).map(function(p3) {
        return p3 + " !important";
      });
    }
    currentRules[name + "Top"] = parts[0];
    currentRules[name + "Right"] = parts[1] || parts[0];
    currentRules[name + "Bottom"] = parts[2] || parts[0];
    currentRules[name + "Left"] = parts[3] || parts[1] || parts[0];
  }
  function getKeyForRules(options, rules2) {
    var serialized = [options.rtl ? "rtl" : "ltr"];
    var hasProps = false;
    for (var _i = 0, _a5 = rules2.__order; _i < _a5.length; _i++) {
      var selector = _a5[_i];
      serialized.push(selector);
      var rulesForSelector = rules2[selector];
      for (var propName in rulesForSelector) {
        if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== void 0) {
          hasProps = true;
          serialized.push(propName, rulesForSelector[propName]);
        }
      }
    }
    return hasProps ? serialized.join("") : void 0;
  }
  function repeatString(target, count) {
    if (count <= 0) {
      return "";
    }
    if (count === 1) {
      return target;
    }
    return target + repeatString(target, count - 1);
  }
  function serializeRuleEntries(options, ruleEntries) {
    if (!ruleEntries) {
      return "";
    }
    var allEntries = [];
    for (var entry in ruleEntries) {
      if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== void 0) {
        allEntries.push(entry, ruleEntries[entry]);
      }
    }
    for (var i4 = 0; i4 < allEntries.length; i4 += 2) {
      kebabRules(allEntries, i4);
      provideUnits(allEntries, i4);
      rtlifyRules(options, allEntries, i4);
      prefixRules(allEntries, i4);
    }
    for (var i4 = 1; i4 < allEntries.length; i4 += 4) {
      allEntries.splice(i4, 1, ":", allEntries[i4], ";");
    }
    return allEntries.join("");
  }
  function styleToRegistration(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var rules2 = extractRules(args);
    var key = getKeyForRules(options, rules2);
    if (key) {
      var stylesheet3 = Stylesheet.getInstance();
      var registration = {
        className: stylesheet3.classNameFromKey(key),
        key,
        args
      };
      if (!registration.className) {
        registration.className = stylesheet3.getClassName(getDisplayName(rules2));
        var rulesToInsert = [];
        for (var _a5 = 0, _b = rules2.__order; _a5 < _b.length; _a5++) {
          var selector = _b[_a5];
          rulesToInsert.push(selector, serializeRuleEntries(options, rules2[selector]));
        }
        registration.rulesToInsert = rulesToInsert;
      }
      return registration;
    }
    return void 0;
  }
  function applyRegistration(registration, specificityMultiplier) {
    if (specificityMultiplier === void 0) {
      specificityMultiplier = 1;
    }
    var stylesheet3 = Stylesheet.getInstance();
    var className = registration.className, key = registration.key, args = registration.args, rulesToInsert = registration.rulesToInsert;
    if (rulesToInsert) {
      for (var i4 = 0; i4 < rulesToInsert.length; i4 += 2) {
        var rules2 = rulesToInsert[i4 + 1];
        if (rules2) {
          var selector = rulesToInsert[i4];
          selector = selector.replace(/&/g, repeatString(".".concat(registration.className), specificityMultiplier));
          var processedRule = "".concat(selector, "{").concat(rules2, "}").concat(selector.indexOf("@") === 0 ? "}" : "");
          stylesheet3.insertRule(processedRule);
        }
      }
      stylesheet3.cacheClassName(className, key, args, rulesToInsert);
    }
  }
  function styleToClassName(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var registration = styleToRegistration.apply(void 0, __spreadArray([options], args, false));
    if (registration) {
      applyRegistration(registration, options.specificityMultiplier);
      return registration.className;
    }
    return "";
  }

  // ../node_modules/@fluentui/merge-styles/lib/mergeStyles.js
  function mergeStyles() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return mergeCss(args, getStyleOptions());
  }
  function mergeCss(args, options) {
    var styleArgs = args instanceof Array ? args : [args];
    var _a5 = extractStyleParts(styleArgs), classes = _a5.classes, objects = _a5.objects;
    if (objects.length) {
      classes.push(styleToClassName(options || {}, objects));
    }
    return classes.join(" ");
  }

  // ../node_modules/@fluentui/merge-styles/lib/concatStyleSets.js
  function concatStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styleSets[_i] = arguments[_i];
    }
    if (styleSets && styleSets.length === 1 && styleSets[0] && !styleSets[0].subComponentStyles) {
      return styleSets[0];
    }
    var mergedSet = {};
    var workingSubcomponentStyles = {};
    for (var _a5 = 0, styleSets_1 = styleSets; _a5 < styleSets_1.length; _a5++) {
      var currentSet = styleSets_1[_a5];
      if (currentSet) {
        for (var prop in currentSet) {
          if (currentSet.hasOwnProperty(prop)) {
            if (prop === "subComponentStyles" && currentSet.subComponentStyles !== void 0) {
              var currentComponentStyles = currentSet.subComponentStyles;
              for (var subCompProp in currentComponentStyles) {
                if (currentComponentStyles.hasOwnProperty(subCompProp)) {
                  if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {
                    workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);
                  } else {
                    workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];
                  }
                }
              }
              continue;
            }
            var mergedValue = mergedSet[prop];
            var currentValue = currentSet[prop];
            if (mergedValue === void 0) {
              mergedSet[prop] = currentValue;
            } else {
              mergedSet[prop] = __spreadArray(__spreadArray([], Array.isArray(mergedValue) ? mergedValue : [mergedValue], true), Array.isArray(currentValue) ? currentValue : [currentValue], true);
            }
          }
        }
      }
    }
    if (Object.keys(workingSubcomponentStyles).length > 0) {
      mergedSet.subComponentStyles = {};
      var mergedSubStyles = mergedSet.subComponentStyles;
      var _loop_1 = function(subCompProp2) {
        if (workingSubcomponentStyles.hasOwnProperty(subCompProp2)) {
          var workingSet_1 = workingSubcomponentStyles[subCompProp2];
          mergedSubStyles[subCompProp2] = function(styleProps) {
            return concatStyleSets.apply(void 0, workingSet_1.map(function(styleFunctionOrObject) {
              return typeof styleFunctionOrObject === "function" ? styleFunctionOrObject(styleProps) : styleFunctionOrObject;
            }));
          };
        }
      };
      for (var subCompProp in workingSubcomponentStyles) {
        _loop_1(subCompProp);
      }
    }
    return mergedSet;
  }

  // ../node_modules/@fluentui/merge-styles/lib/mergeStyleSets.js
  function mergeStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styleSets[_i] = arguments[_i];
    }
    return mergeCssSets(styleSets, getStyleOptions());
  }
  function mergeCssSets(styleSets, options) {
    var classNameSet = { subComponentStyles: {} };
    var styleSet = styleSets[0];
    if (!styleSet && styleSets.length <= 1) {
      return { subComponentStyles: {} };
    }
    var concatenatedStyleSet = concatStyleSets.apply(void 0, styleSets);
    var registrations = [];
    for (var styleSetArea in concatenatedStyleSet) {
      if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {
        if (styleSetArea === "subComponentStyles") {
          classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};
          continue;
        }
        var styles4 = concatenatedStyleSet[styleSetArea];
        var _a5 = extractStyleParts(styles4), classes = _a5.classes, objects = _a5.objects;
        if (objects === null || objects === void 0 ? void 0 : objects.length) {
          var registration = styleToRegistration(options || {}, { displayName: styleSetArea }, objects);
          if (registration) {
            registrations.push(registration);
            classNameSet[styleSetArea] = classes.concat([registration.className]).join(" ");
          }
        } else {
          classNameSet[styleSetArea] = classes.join(" ");
        }
      }
    }
    for (var _i = 0, registrations_1 = registrations; _i < registrations_1.length; _i++) {
      var registration = registrations_1[_i];
      if (registration) {
        applyRegistration(registration, options === null || options === void 0 ? void 0 : options.specificityMultiplier);
      }
    }
    return classNameSet;
  }

  // ../node_modules/@fluentui/merge-styles/lib/concatStyleSetsWithProps.js
  function concatStyleSetsWithProps(styleProps) {
    var allStyles = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      allStyles[_i - 1] = arguments[_i];
    }
    var result = [];
    for (var _a5 = 0, allStyles_1 = allStyles; _a5 < allStyles_1.length; _a5++) {
      var styles4 = allStyles_1[_a5];
      if (styles4) {
        result.push(typeof styles4 === "function" ? styles4(styleProps) : styles4);
      }
    }
    if (result.length === 1) {
      return result[0];
    } else if (result.length) {
      return concatStyleSets.apply(void 0, result);
    }
    return {};
  }

  // ../node_modules/@fluentui/merge-styles/lib/fontFace.js
  function fontFace(font) {
    var stylesheet3 = Stylesheet.getInstance();
    var rule = serializeRuleEntries(getStyleOptions(), font);
    var className = stylesheet3.classNameFromKey(rule);
    if (className) {
      return;
    }
    var name = stylesheet3.getClassName();
    stylesheet3.insertRule("@font-face{".concat(rule, "}"), true);
    stylesheet3.cacheClassName(name, rule, [], ["font-face", rule]);
  }

  // ../node_modules/@fluentui/merge-styles/lib/keyframes.js
  function keyframes(timeline) {
    var stylesheet3 = Stylesheet.getInstance();
    var rulesArray = [];
    for (var prop in timeline) {
      if (timeline.hasOwnProperty(prop)) {
        rulesArray.push(prop, "{", serializeRuleEntries(getStyleOptions(), timeline[prop]), "}");
      }
    }
    var rules2 = rulesArray.join("");
    var className = stylesheet3.classNameFromKey(rules2);
    if (className) {
      return className;
    }
    var name = stylesheet3.getClassName();
    stylesheet3.insertRule("@keyframes ".concat(name, "{").concat(rules2, "}"), true);
    stylesheet3.cacheClassName(name, rules2, [], ["keyframes", rules2]);
    return name;
  }

  // ../node_modules/@fluentui/set-version/lib/setVersion.js
  var packagesCache = {};
  var _win = void 0;
  try {
    _win = window;
  } catch (e3) {
  }
  function setVersion(packageName, packageVersion) {
    if (typeof _win !== "undefined") {
      var packages = _win.__packages__ = _win.__packages__ || {};
      if (!packages[packageName] || !packagesCache[packageName]) {
        packagesCache[packageName] = packageVersion;
        var versions = packages[packageName] = packages[packageName] || [];
        versions.push(packageVersion);
      }
    }
  }

  // ../node_modules/@fluentui/set-version/lib/index.js
  setVersion("@fluentui/set-version", "6.0.0");

  // ../node_modules/@fluentui/merge-styles/lib/version.js
  setVersion("@fluentui/merge-styles", "8.5.12");

  // ../node_modules/@fluentui/style-utilities/lib/utilities/buildClassMap.js
  function buildClassMap(styles4) {
    var classes = {};
    var _loop_1 = function(styleName2) {
      if (styles4.hasOwnProperty(styleName2)) {
        var className_1;
        Object.defineProperty(classes, styleName2, {
          get: function() {
            if (className_1 === void 0) {
              className_1 = mergeStyles(styles4[styleName2]).toString();
            }
            return className_1;
          },
          enumerable: true,
          configurable: true
        });
      }
    };
    for (var styleName in styles4) {
      _loop_1(styleName);
    }
    return classes;
  }

  // ../node_modules/@fluentui/utilities/lib/dom/canUseDOM.js
  function canUseDOM3() {
    return typeof window !== "undefined" && !!(window.document && // eslint-disable-next-line deprecation/deprecation
    window.document.createElement);
  }

  // ../node_modules/@fluentui/utilities/lib/dom/getWindow.js
  var _window = void 0;
  try {
    _window = window;
  } catch (e3) {
  }
  function getWindow2(rootElement) {
    if (!canUseDOM3() || typeof _window === "undefined") {
      return void 0;
    } else {
      var el = rootElement;
      return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;
    }
  }

  // ../node_modules/@fluentui/utilities/lib/Async.js
  var Async = (
    /** @class */
    function() {
      function Async2(parent3, onError) {
        this._timeoutIds = null;
        this._immediateIds = null;
        this._intervalIds = null;
        this._animationFrameIds = null;
        this._isDisposed = false;
        this._parent = parent3 || null;
        this._onErrorHandler = onError;
        this._noop = function() {
        };
      }
      Async2.prototype.dispose = function() {
        var id;
        this._isDisposed = true;
        this._parent = null;
        if (this._timeoutIds) {
          for (id in this._timeoutIds) {
            if (this._timeoutIds.hasOwnProperty(id)) {
              this.clearTimeout(parseInt(id, 10));
            }
          }
          this._timeoutIds = null;
        }
        if (this._immediateIds) {
          for (id in this._immediateIds) {
            if (this._immediateIds.hasOwnProperty(id)) {
              this.clearImmediate(parseInt(id, 10));
            }
          }
          this._immediateIds = null;
        }
        if (this._intervalIds) {
          for (id in this._intervalIds) {
            if (this._intervalIds.hasOwnProperty(id)) {
              this.clearInterval(parseInt(id, 10));
            }
          }
          this._intervalIds = null;
        }
        if (this._animationFrameIds) {
          for (id in this._animationFrameIds) {
            if (this._animationFrameIds.hasOwnProperty(id)) {
              this.cancelAnimationFrame(parseInt(id, 10));
            }
          }
          this._animationFrameIds = null;
        }
      };
      Async2.prototype.setTimeout = function(callback, duration) {
        var _this = this;
        var timeoutId = 0;
        if (!this._isDisposed) {
          if (!this._timeoutIds) {
            this._timeoutIds = {};
          }
          timeoutId = setTimeout(function() {
            try {
              if (_this._timeoutIds) {
                delete _this._timeoutIds[timeoutId];
              }
              callback.apply(_this._parent);
            } catch (e3) {
              _this._logError(e3);
            }
          }, duration);
          this._timeoutIds[timeoutId] = true;
        }
        return timeoutId;
      };
      Async2.prototype.clearTimeout = function(id) {
        if (this._timeoutIds && this._timeoutIds[id]) {
          clearTimeout(id);
          delete this._timeoutIds[id];
        }
      };
      Async2.prototype.setImmediate = function(callback, targetElement) {
        var _this = this;
        var immediateId = 0;
        var win2 = getWindow2(targetElement);
        if (!this._isDisposed) {
          if (!this._immediateIds) {
            this._immediateIds = {};
          }
          var setImmediateCallback = function() {
            try {
              if (_this._immediateIds) {
                delete _this._immediateIds[immediateId];
              }
              callback.apply(_this._parent);
            } catch (e3) {
              _this._logError(e3);
            }
          };
          immediateId = win2.setTimeout(setImmediateCallback, 0);
          this._immediateIds[immediateId] = true;
        }
        return immediateId;
      };
      Async2.prototype.clearImmediate = function(id, targetElement) {
        var win2 = getWindow2(targetElement);
        if (this._immediateIds && this._immediateIds[id]) {
          win2.clearTimeout(id);
          delete this._immediateIds[id];
        }
      };
      Async2.prototype.setInterval = function(callback, duration) {
        var _this = this;
        var intervalId = 0;
        if (!this._isDisposed) {
          if (!this._intervalIds) {
            this._intervalIds = {};
          }
          intervalId = setInterval(function() {
            try {
              callback.apply(_this._parent);
            } catch (e3) {
              _this._logError(e3);
            }
          }, duration);
          this._intervalIds[intervalId] = true;
        }
        return intervalId;
      };
      Async2.prototype.clearInterval = function(id) {
        if (this._intervalIds && this._intervalIds[id]) {
          clearInterval(id);
          delete this._intervalIds[id];
        }
      };
      Async2.prototype.throttle = function(func, wait, options) {
        var _this = this;
        if (this._isDisposed) {
          return this._noop;
        }
        var waitMS = wait || 0;
        var leading = true;
        var trailing = true;
        var lastExecuteTime = 0;
        var lastResult;
        var lastArgs;
        var timeoutId = null;
        if (options && typeof options.leading === "boolean") {
          leading = options.leading;
        }
        if (options && typeof options.trailing === "boolean") {
          trailing = options.trailing;
        }
        var callback = function(userCall) {
          var now = Date.now();
          var delta = now - lastExecuteTime;
          var waitLength = leading ? waitMS - delta : waitMS;
          if (delta >= waitMS && (!userCall || leading)) {
            lastExecuteTime = now;
            if (timeoutId) {
              _this.clearTimeout(timeoutId);
              timeoutId = null;
            }
            lastResult = func.apply(_this._parent, lastArgs);
          } else if (timeoutId === null && trailing) {
            timeoutId = _this.setTimeout(callback, waitLength);
          }
          return lastResult;
        };
        var resultFunction = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          lastArgs = args;
          return callback(true);
        };
        return resultFunction;
      };
      Async2.prototype.debounce = function(func, wait, options) {
        var _this = this;
        if (this._isDisposed) {
          var noOpFunction = function() {
          };
          noOpFunction.cancel = function() {
            return;
          };
          noOpFunction.flush = function() {
            return null;
          };
          noOpFunction.pending = function() {
            return false;
          };
          return noOpFunction;
        }
        var waitMS = wait || 0;
        var leading = false;
        var trailing = true;
        var maxWait = null;
        var lastCallTime = 0;
        var lastExecuteTime = Date.now();
        var lastResult;
        var lastArgs;
        var timeoutId = null;
        if (options && typeof options.leading === "boolean") {
          leading = options.leading;
        }
        if (options && typeof options.trailing === "boolean") {
          trailing = options.trailing;
        }
        if (options && typeof options.maxWait === "number" && !isNaN(options.maxWait)) {
          maxWait = options.maxWait;
        }
        var markExecuted = function(time2) {
          if (timeoutId) {
            _this.clearTimeout(timeoutId);
            timeoutId = null;
          }
          lastExecuteTime = time2;
        };
        var invokeFunction = function(time2) {
          markExecuted(time2);
          lastResult = func.apply(_this._parent, lastArgs);
        };
        var callback = function(userCall) {
          var now = Date.now();
          var executeImmediately = false;
          if (userCall) {
            if (leading && now - lastCallTime >= waitMS) {
              executeImmediately = true;
            }
            lastCallTime = now;
          }
          var delta = now - lastCallTime;
          var waitLength = waitMS - delta;
          var maxWaitDelta = now - lastExecuteTime;
          var maxWaitExpired = false;
          if (maxWait !== null) {
            if (maxWaitDelta >= maxWait && timeoutId) {
              maxWaitExpired = true;
            } else {
              waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
            }
          }
          if (delta >= waitMS || maxWaitExpired || executeImmediately) {
            invokeFunction(now);
          } else if ((timeoutId === null || !userCall) && trailing) {
            timeoutId = _this.setTimeout(callback, waitLength);
          }
          return lastResult;
        };
        var pending = function() {
          return !!timeoutId;
        };
        var cancel = function() {
          if (pending()) {
            markExecuted(Date.now());
          }
        };
        var flush = function() {
          if (pending()) {
            invokeFunction(Date.now());
          }
          return lastResult;
        };
        var resultFunction = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          lastArgs = args;
          return callback(true);
        };
        resultFunction.cancel = cancel;
        resultFunction.flush = flush;
        resultFunction.pending = pending;
        return resultFunction;
      };
      Async2.prototype.requestAnimationFrame = function(callback, targetElement) {
        var _this = this;
        var animationFrameId = 0;
        var win2 = getWindow2(targetElement);
        if (!this._isDisposed) {
          if (!this._animationFrameIds) {
            this._animationFrameIds = {};
          }
          var animationFrameCallback = function() {
            try {
              if (_this._animationFrameIds) {
                delete _this._animationFrameIds[animationFrameId];
              }
              callback.apply(_this._parent);
            } catch (e3) {
              _this._logError(e3);
            }
          };
          animationFrameId = win2.requestAnimationFrame ? win2.requestAnimationFrame(animationFrameCallback) : win2.setTimeout(animationFrameCallback, 0);
          this._animationFrameIds[animationFrameId] = true;
        }
        return animationFrameId;
      };
      Async2.prototype.cancelAnimationFrame = function(id, targetElement) {
        var win2 = getWindow2(targetElement);
        if (this._animationFrameIds && this._animationFrameIds[id]) {
          win2.cancelAnimationFrame ? win2.cancelAnimationFrame(id) : win2.clearTimeout(id);
          delete this._animationFrameIds[id];
        }
      };
      Async2.prototype._logError = function(e3) {
        if (this._onErrorHandler) {
          this._onErrorHandler(e3);
        }
      };
      return Async2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/object.js
  function shallowCompare(a3, b4) {
    if (!a3 || !b4) {
      return !a3 && !b4;
    }
    for (var propName in a3) {
      if (a3.hasOwnProperty(propName)) {
        if (!b4.hasOwnProperty(propName) || b4[propName] !== a3[propName]) {
          return false;
        }
      }
    }
    for (var propName in b4) {
      if (b4.hasOwnProperty(propName)) {
        if (!a3.hasOwnProperty(propName)) {
          return false;
        }
      }
    }
    return true;
  }
  function assign2(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    return filteredAssign.apply(this, [null, target].concat(args));
  }
  function filteredAssign(isAllowed, target) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    target = target || {};
    for (var _a5 = 0, args_1 = args; _a5 < args_1.length; _a5++) {
      var sourceObject = args_1[_a5];
      if (sourceObject) {
        for (var propName in sourceObject) {
          if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {
            target[propName] = sourceObject[propName];
          }
        }
      }
    }
    return target;
  }

  // ../node_modules/@fluentui/utilities/lib/EventGroup.js
  var EventGroup = (
    /** @class */
    function() {
      function EventGroup2(parent3) {
        this._id = EventGroup2._uniqueId++;
        this._parent = parent3;
        this._eventRecords = [];
      }
      EventGroup2.raise = function(target, eventName, eventArgs, bubbleEvent) {
        var retVal2;
        if (EventGroup2._isElement(target)) {
          if (typeof document !== "undefined" && document.createEvent) {
            var ev = document.createEvent("HTMLEvents");
            ev.initEvent(eventName, bubbleEvent || false, true);
            assign2(ev, eventArgs);
            retVal2 = target.dispatchEvent(ev);
          } else if (typeof document !== "undefined" && document.createEventObject) {
            var evObj = document.createEventObject(eventArgs);
            target.fireEvent("on" + eventName, evObj);
          }
        } else {
          while (target && retVal2 !== false) {
            var events2 = target.__events__;
            var eventRecords = events2 ? events2[eventName] : null;
            if (eventRecords) {
              for (var id in eventRecords) {
                if (eventRecords.hasOwnProperty(id)) {
                  var eventRecordList = eventRecords[id];
                  for (var listIndex = 0; retVal2 !== false && listIndex < eventRecordList.length; listIndex++) {
                    var record = eventRecordList[listIndex];
                    if (record.objectCallback) {
                      retVal2 = record.objectCallback.call(record.parent, eventArgs);
                    }
                  }
                }
              }
            }
            target = bubbleEvent ? target.parent : null;
          }
        }
        return retVal2;
      };
      EventGroup2.isObserved = function(target, eventName) {
        var events2 = target && target.__events__;
        return !!events2 && !!events2[eventName];
      };
      EventGroup2.isDeclared = function(target, eventName) {
        var declaredEvents = target && target.__declaredEvents;
        return !!declaredEvents && !!declaredEvents[eventName];
      };
      EventGroup2.stopPropagation = function(event) {
        if (event.stopPropagation) {
          event.stopPropagation();
        } else {
          event.cancelBubble = true;
        }
      };
      EventGroup2._isElement = function(target) {
        return !!target && (!!target.addEventListener || typeof HTMLElement !== "undefined" && target instanceof HTMLElement);
      };
      EventGroup2.prototype.dispose = function() {
        if (!this._isDisposed) {
          this._isDisposed = true;
          this.off();
          this._parent = null;
        }
      };
      EventGroup2.prototype.onAll = function(target, events2, useCapture) {
        for (var eventName in events2) {
          if (events2.hasOwnProperty(eventName)) {
            this.on(target, eventName, events2[eventName], useCapture);
          }
        }
      };
      EventGroup2.prototype.on = function(target, eventName, callback, options) {
        var _this = this;
        if (eventName.indexOf(",") > -1) {
          var events2 = eventName.split(/[ ,]+/);
          for (var i4 = 0; i4 < events2.length; i4++) {
            this.on(target, events2[i4], callback, options);
          }
        } else {
          var parent_1 = this._parent;
          var eventRecord = {
            target,
            eventName,
            parent: parent_1,
            callback,
            options
          };
          var events2 = target.__events__ = target.__events__ || {};
          events2[eventName] = events2[eventName] || {
            count: 0
          };
          events2[eventName][this._id] = events2[eventName][this._id] || [];
          events2[eventName][this._id].push(eventRecord);
          events2[eventName].count++;
          if (EventGroup2._isElement(target)) {
            var processElementEvent = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              if (_this._isDisposed) {
                return;
              }
              var result;
              try {
                result = callback.apply(parent_1, args);
                if (result === false && args[0]) {
                  var e3 = args[0];
                  if (e3.preventDefault) {
                    e3.preventDefault();
                  }
                  if (e3.stopPropagation) {
                    e3.stopPropagation();
                  }
                  e3.cancelBubble = true;
                }
              } catch (e4) {
              }
              return result;
            };
            eventRecord.elementCallback = processElementEvent;
            if (target.addEventListener) {
              target.addEventListener(eventName, processElementEvent, options);
            } else if (target.attachEvent) {
              target.attachEvent("on" + eventName, processElementEvent);
            }
          } else {
            var processObjectEvent = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              if (_this._isDisposed) {
                return;
              }
              return callback.apply(parent_1, args);
            };
            eventRecord.objectCallback = processObjectEvent;
          }
          this._eventRecords.push(eventRecord);
        }
      };
      EventGroup2.prototype.off = function(target, eventName, callback, options) {
        for (var i4 = 0; i4 < this._eventRecords.length; i4++) {
          var eventRecord = this._eventRecords[i4];
          if ((!target || target === eventRecord.target) && (!eventName || eventName === eventRecord.eventName) && (!callback || callback === eventRecord.callback) && (typeof options !== "boolean" || options === eventRecord.options)) {
            var events2 = eventRecord.target.__events__;
            var targetArrayLookup = events2[eventRecord.eventName];
            var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
            if (targetArray) {
              if (targetArray.length === 1 || !callback) {
                targetArrayLookup.count -= targetArray.length;
                delete events2[eventRecord.eventName][this._id];
              } else {
                targetArrayLookup.count--;
                targetArray.splice(targetArray.indexOf(eventRecord), 1);
              }
              if (!targetArrayLookup.count) {
                delete events2[eventRecord.eventName];
              }
            }
            if (eventRecord.elementCallback) {
              if (eventRecord.target.removeEventListener) {
                eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.options);
              } else if (eventRecord.target.detachEvent) {
                eventRecord.target.detachEvent("on" + eventRecord.eventName, eventRecord.elementCallback);
              }
            }
            this._eventRecords.splice(i4--, 1);
          }
        }
      };
      EventGroup2.prototype.raise = function(eventName, eventArgs, bubbleEvent) {
        return EventGroup2.raise(this._parent, eventName, eventArgs, bubbleEvent);
      };
      EventGroup2.prototype.declare = function(event) {
        var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};
        if (typeof event === "string") {
          declaredEvents[event] = true;
        } else {
          for (var i4 = 0; i4 < event.length; i4++) {
            declaredEvents[event[i4]] = true;
          }
        }
      };
      EventGroup2._uniqueId = 0;
      return EventGroup2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/dom/getDocument.js
  function getDocument(rootElement) {
    if (!canUseDOM3() || typeof document === "undefined") {
      return void 0;
    } else {
      var el = rootElement;
      return el && el.ownerDocument ? el.ownerDocument : document;
    }
  }

  // ../node_modules/@fluentui/utilities/lib/scroll.js
  var _scrollbarWidth;
  var DisabledScrollClassName = mergeStyles({
    overflow: "hidden !important"
  });
  var DATA_IS_SCROLLABLE_ATTRIBUTE = "data-is-scrollable";
  function getScrollbarWidth() {
    if (_scrollbarWidth === void 0) {
      var scrollDiv = document.createElement("div");
      scrollDiv.style.setProperty("width", "100px");
      scrollDiv.style.setProperty("height", "100px");
      scrollDiv.style.setProperty("overflow", "scroll");
      scrollDiv.style.setProperty("position", "absolute");
      scrollDiv.style.setProperty("top", "-9999px");
      document.body.appendChild(scrollDiv);
      _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
    return _scrollbarWidth;
  }
  function findScrollableParent(startingElement) {
    var el = startingElement;
    var doc = getDocument(startingElement);
    while (el && el !== doc.body) {
      if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === "true") {
        return el;
      }
      el = el.parentElement;
    }
    el = startingElement;
    while (el && el !== doc.body) {
      if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== "false") {
        var computedStyles = getComputedStyle(el);
        var overflowY = computedStyles ? computedStyles.getPropertyValue("overflow-y") : "";
        if (overflowY && (overflowY === "scroll" || overflowY === "auto")) {
          return el;
        }
      }
      el = el.parentElement;
    }
    if (!el || el === doc.body) {
      el = getWindow2(startingElement);
    }
    return el;
  }

  // ../node_modules/@fluentui/utilities/lib/BaseComponent.js
  var React176 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/warn/warn.js
  var _warningCallback = void 0;
  function warn(message) {
    if (_warningCallback && true) {
      _warningCallback(message);
    } else if (console && console.warn) {
      console.warn(message);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnConditionallyRequiredProps.js
  function warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition) {
    if (condition === true && true) {
      for (var _i = 0, requiredProps_1 = requiredProps; _i < requiredProps_1.length; _i++) {
        var requiredPropName = requiredProps_1[_i];
        if (!(requiredPropName in props)) {
          warn("".concat(componentName, " property '").concat(requiredPropName, "' is required when '").concat(conditionalPropName, "' is used.'"));
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnMutuallyExclusive.js
  function warnMutuallyExclusive(componentName, props, exclusiveMap) {
    if (true) {
      for (var propName in exclusiveMap) {
        if (props && props[propName] !== void 0) {
          var propInExclusiveMapValue = exclusiveMap[propName];
          if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== void 0) {
            warn("".concat(componentName, " property '").concat(propName, "' is mutually exclusive with '").concat(exclusiveMap[propName], "'. ") + "Use one or the other.");
          }
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnDeprecations.js
  function warnDeprecations(componentName, props, deprecationMap) {
    if (true) {
      for (var propName in deprecationMap) {
        if (props && propName in props) {
          var deprecationMessage = "".concat(componentName, " property '").concat(propName, "' was used but has been deprecated.");
          var replacementPropName = deprecationMap[propName];
          if (replacementPropName) {
            deprecationMessage += " Use '".concat(replacementPropName, "' instead.");
          }
          warn(deprecationMessage);
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/BaseComponent.js
  var BaseComponent = (
    /** @class */
    function(_super) {
      __extends(BaseComponent2, _super);
      function BaseComponent2(props, context) {
        var _this = _super.call(this, props, context) || this;
        _makeAllSafe(_this, BaseComponent2.prototype, [
          "componentDidMount",
          "shouldComponentUpdate",
          "getSnapshotBeforeUpdate",
          "render",
          "componentDidUpdate",
          "componentWillUnmount"
        ]);
        return _this;
      }
      BaseComponent2.prototype.componentDidUpdate = function(prevProps, prevState) {
        this._updateComponentRef(prevProps, this.props);
      };
      BaseComponent2.prototype.componentDidMount = function() {
        this._setComponentRef(this.props.componentRef, this);
      };
      BaseComponent2.prototype.componentWillUnmount = function() {
        this._setComponentRef(this.props.componentRef, null);
        if (this.__disposables) {
          for (var i4 = 0, len = this._disposables.length; i4 < len; i4++) {
            var disposable = this.__disposables[i4];
            if (disposable.dispose) {
              disposable.dispose();
            }
          }
          this.__disposables = null;
        }
      };
      Object.defineProperty(BaseComponent2.prototype, "className", {
        /**
         * Gets the object's class name.
         */
        get: function() {
          if (!this.__className) {
            var funcNameRegex = /function (.{1,})\(/;
            var results = funcNameRegex.exec(this.constructor.toString());
            this.__className = results && results.length > 1 ? results[1] : "";
          }
          return this.__className;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseComponent2.prototype, "_disposables", {
        /**
         * Allows subclasses to push things to this._disposables to be auto disposed.
         */
        get: function() {
          if (!this.__disposables) {
            this.__disposables = [];
          }
          return this.__disposables;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseComponent2.prototype, "_async", {
        /**
         * Gets the async instance associated with the component, created on demand. The async instance gives
         * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks
         * will be cleared/ignored automatically after unmounting. The helpers within the async object also
         * preserve the this pointer so that you don't need to "bind" the callbacks.
         */
        get: function() {
          if (!this.__async) {
            this.__async = new Async(this);
            this._disposables.push(this.__async);
          }
          return this.__async;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseComponent2.prototype, "_events", {
        /**
         * Gets the event group instance assocaited with the component, created on demand. The event instance
         * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks
         * will be automatically disconnected after unmounting. The helpers within the events object also
         * preserve the this reference so that you don't need to "bind" the callbacks.
         */
        get: function() {
          if (!this.__events) {
            this.__events = new EventGroup(this);
            this._disposables.push(this.__events);
          }
          return this.__events;
        },
        enumerable: false,
        configurable: true
      });
      BaseComponent2.prototype._resolveRef = function(refName) {
        var _this = this;
        if (!this.__resolves) {
          this.__resolves = {};
        }
        if (!this.__resolves[refName]) {
          this.__resolves[refName] = function(ref) {
            return _this[refName] = ref;
          };
        }
        return this.__resolves[refName];
      };
      BaseComponent2.prototype._updateComponentRef = function(currentProps, newProps) {
        if (newProps === void 0) {
          newProps = {};
        }
        if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {
          this._setComponentRef(currentProps.componentRef, null);
          this._setComponentRef(newProps.componentRef, this);
        }
      };
      BaseComponent2.prototype._warnDeprecations = function(deprecationMap) {
        warnDeprecations(this.className, this.props, deprecationMap);
      };
      BaseComponent2.prototype._warnMutuallyExclusive = function(mutuallyExclusiveMap) {
        warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);
      };
      BaseComponent2.prototype._warnConditionallyRequiredProps = function(requiredProps, conditionalPropName, condition) {
        warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);
      };
      BaseComponent2.prototype._setComponentRef = function(ref, value) {
        if (!this._skipComponentRefResolution && ref) {
          if (typeof ref === "function") {
            ref(value);
          }
          if (typeof ref === "object") {
            ref.current = value;
          }
        }
      };
      return BaseComponent2;
    }(React176.Component)
  );
  function _makeAllSafe(obj, prototype, methodNames) {
    for (var i4 = 0, len = methodNames.length; i4 < len; i4++) {
      _makeSafe(obj, prototype, methodNames[i4]);
    }
  }
  function _makeSafe(obj, prototype, methodName) {
    var classMethod = obj[methodName];
    var prototypeMethod = prototype[methodName];
    if (classMethod || prototypeMethod) {
      obj[methodName] = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var retVal2;
        if (prototypeMethod) {
          retVal2 = prototypeMethod.apply(this, args);
        }
        if (classMethod !== prototypeMethod) {
          retVal2 = classMethod.apply(this, args);
        }
        return retVal2;
      };
    }
  }
  function nullRender() {
    return null;
  }

  // ../node_modules/@fluentui/utilities/lib/DelayedRender.js
  var React177 = __toESM(require_react());
  var DelayedRender = (
    /** @class */
    function(_super) {
      __extends(DelayedRender2, _super);
      function DelayedRender2(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
          isRendered: getWindow2() === void 0
        };
        return _this;
      }
      DelayedRender2.prototype.componentDidMount = function() {
        var _this = this;
        var delay = this.props.delay;
        this._timeoutId = window.setTimeout(function() {
          _this.setState({
            isRendered: true
          });
        }, delay);
      };
      DelayedRender2.prototype.componentWillUnmount = function() {
        if (this._timeoutId) {
          clearTimeout(this._timeoutId);
        }
      };
      DelayedRender2.prototype.render = function() {
        return this.state.isRendered ? React177.Children.only(this.props.children) : null;
      };
      DelayedRender2.defaultProps = {
        delay: 0
      };
      return DelayedRender2;
    }(React177.Component)
  );

  // ../node_modules/@fluentui/utilities/lib/GlobalSettings.js
  var GLOBAL_SETTINGS_PROP_NAME = "__globalSettings__";
  var CALLBACK_STATE_PROP_NAME = "__callbacks__";
  var _counter = 0;
  var GlobalSettings = (
    /** @class */
    function() {
      function GlobalSettings2() {
      }
      GlobalSettings2.getValue = function(key, defaultValue) {
        var globalSettings = _getGlobalSettings();
        if (globalSettings[key] === void 0) {
          globalSettings[key] = typeof defaultValue === "function" ? defaultValue() : defaultValue;
        }
        return globalSettings[key];
      };
      GlobalSettings2.setValue = function(key, value) {
        var globalSettings = _getGlobalSettings();
        var callbacks2 = globalSettings[CALLBACK_STATE_PROP_NAME];
        var oldValue = globalSettings[key];
        if (value !== oldValue) {
          globalSettings[key] = value;
          var changeDescription = {
            oldValue,
            value,
            key
          };
          for (var id in callbacks2) {
            if (callbacks2.hasOwnProperty(id)) {
              callbacks2[id](changeDescription);
            }
          }
        }
        return value;
      };
      GlobalSettings2.addChangeListener = function(cb) {
        var id = cb.__id__;
        var callbacks2 = _getCallbacks();
        if (!id) {
          id = cb.__id__ = String(_counter++);
        }
        callbacks2[id] = cb;
      };
      GlobalSettings2.removeChangeListener = function(cb) {
        var callbacks2 = _getCallbacks();
        delete callbacks2[cb.__id__];
      };
      return GlobalSettings2;
    }()
  );
  function _getGlobalSettings() {
    var _a5;
    var win2 = getWindow2();
    var globalObj = win2 || {};
    if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {
      globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a5 = {}, _a5[CALLBACK_STATE_PROP_NAME] = {}, _a5);
    }
    return globalObj[GLOBAL_SETTINGS_PROP_NAME];
  }
  function _getCallbacks() {
    var globalSettings = _getGlobalSettings();
    return globalSettings[CALLBACK_STATE_PROP_NAME];
  }

  // ../node_modules/@fluentui/utilities/lib/KeyCodes.js
  var KeyCodes = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    ctrl: 17,
    alt: 18,
    pauseBreak: 19,
    capslock: 20,
    escape: 27,
    space: 32,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    insert: 45,
    del: 46,
    zero: 48,
    one: 49,
    two: 50,
    three: 51,
    four: 52,
    five: 53,
    six: 54,
    seven: 55,
    eight: 56,
    nine: 57,
    colon: 58,
    a: 65,
    b: 66,
    c: 67,
    d: 68,
    e: 69,
    f: 70,
    g: 71,
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    m: 77,
    n: 78,
    o: 79,
    p: 80,
    q: 81,
    r: 82,
    s: 83,
    t: 84,
    u: 85,
    v: 86,
    w: 87,
    x: 88,
    y: 89,
    z: 90,
    leftWindow: 91,
    rightWindow: 92,
    select: 93,
    /* eslint-disable @typescript-eslint/naming-convention */
    zero_numpad: 96,
    one_numpad: 97,
    two_numpad: 98,
    three_numpad: 99,
    four_numpad: 100,
    five_numpad: 101,
    six_numpad: 102,
    seven_numpad: 103,
    eight_numpad: 104,
    nine_numpad: 105,
    /* eslint-enable @typescript-eslint/naming-convention */
    multiply: 106,
    add: 107,
    subtract: 109,
    decimalPoint: 110,
    divide: 111,
    f1: 112,
    f2: 113,
    f3: 114,
    f4: 115,
    f5: 116,
    f6: 117,
    f7: 118,
    f8: 119,
    f9: 120,
    f10: 121,
    f11: 122,
    f12: 123,
    numlock: 144,
    scrollLock: 145,
    semicolon: 186,
    equalSign: 187,
    comma: 188,
    dash: 189,
    period: 190,
    forwardSlash: 191,
    graveAccent: 192,
    openBracket: 219,
    backSlash: 220,
    closeBracket: 221,
    singleQuote: 222
  };

  // ../node_modules/@fluentui/utilities/lib/Rectangle.js
  var Rectangle = (
    /** @class */
    function() {
      function Rectangle2(left, right, top, bottom) {
        if (left === void 0) {
          left = 0;
        }
        if (right === void 0) {
          right = 0;
        }
        if (top === void 0) {
          top = 0;
        }
        if (bottom === void 0) {
          bottom = 0;
        }
        this.top = top;
        this.bottom = bottom;
        this.left = left;
        this.right = right;
      }
      Object.defineProperty(Rectangle2.prototype, "width", {
        /**
         * Calculated automatically by subtracting the right from left
         */
        get: function() {
          return this.right - this.left;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Rectangle2.prototype, "height", {
        /**
         * Calculated automatically by subtracting the bottom from top.
         */
        get: function() {
          return this.bottom - this.top;
        },
        enumerable: false,
        configurable: true
      });
      Rectangle2.prototype.equals = function(rect) {
        return parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) && parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) && parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) && parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4));
      };
      return Rectangle2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/appendFunction.js
  function appendFunction(parent3) {
    var functions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      functions[_i - 1] = arguments[_i];
    }
    if (functions.length < 2) {
      return functions[0];
    }
    return function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      functions.forEach(function(f4) {
        return f4 && f4.apply(parent3, args);
      });
    };
  }

  // ../node_modules/@fluentui/utilities/lib/aria.js
  function mergeAriaAttributeValues() {
    var ariaAttributes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      ariaAttributes[_i] = arguments[_i];
    }
    var mergedAttribute = ariaAttributes.filter(function(arg) {
      return arg;
    }).join(" ").trim();
    return mergedAttribute === "" ? void 0 : mergedAttribute;
  }

  // ../node_modules/@fluentui/utilities/lib/array.js
  function addElementAtIndex(array, index2, itemToAdd) {
    var copy2 = array.slice();
    copy2.splice(index2, 0, itemToAdd);
    return copy2;
  }
  function arraysEqual(array1, array2) {
    if (array1.length !== array2.length) {
      return false;
    }
    for (var i4 = 0; i4 < array1.length; i4++) {
      if (array1[i4] !== array2[i4]) {
        return false;
      }
    }
    return true;
  }

  // ../node_modules/@fluentui/utilities/lib/sessionStorage.js
  function getItem(key) {
    var result = null;
    try {
      var win2 = getWindow2();
      result = win2 ? win2.sessionStorage.getItem(key) : null;
    } catch (e3) {
    }
    return result;
  }
  function setItem(key, data) {
    var _a5;
    try {
      (_a5 = getWindow2()) === null || _a5 === void 0 ? void 0 : _a5.sessionStorage.setItem(key, data);
    } catch (e3) {
    }
  }

  // ../node_modules/@fluentui/utilities/lib/rtl.js
  var RTL_LOCAL_STORAGE_KEY = "isRTL";
  var _isRTL;
  function getRTL2(theme) {
    if (theme === void 0) {
      theme = {};
    }
    if (theme.rtl !== void 0) {
      return theme.rtl;
    }
    if (_isRTL === void 0) {
      var savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);
      if (savedRTL !== null) {
        _isRTL = savedRTL === "1";
        setRTL2(_isRTL);
      }
      var doc = getDocument();
      if (_isRTL === void 0 && doc) {
        _isRTL = (doc.body && doc.body.getAttribute("dir") || doc.documentElement.getAttribute("dir")) === "rtl";
        setRTL(_isRTL);
      }
    }
    return !!_isRTL;
  }
  function setRTL2(isRTL2, persistSetting) {
    if (persistSetting === void 0) {
      persistSetting = false;
    }
    var doc = getDocument();
    if (doc) {
      doc.documentElement.setAttribute("dir", isRTL2 ? "rtl" : "ltr");
    }
    if (persistSetting) {
      setItem(RTL_LOCAL_STORAGE_KEY, isRTL2 ? "1" : "0");
    }
    _isRTL = isRTL2;
    setRTL(_isRTL);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/isVirtualElement.js
  function isVirtualElement2(element2) {
    return element2 && !!element2._virtual;
  }

  // ../node_modules/@fluentui/dom-utilities/lib/getVirtualParent.js
  function getVirtualParent2(child) {
    var parent3;
    if (child && isVirtualElement2(child)) {
      parent3 = child._virtual.parent;
    }
    return parent3;
  }

  // ../node_modules/@fluentui/dom-utilities/lib/getParent.js
  function getParent2(child, allowVirtualParents) {
    if (allowVirtualParents === void 0) {
      allowVirtualParents = true;
    }
    return child && (allowVirtualParents && getVirtualParent2(child) || child.parentNode && child.parentNode);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/elementContains.js
  function elementContains2(parent3, child, allowVirtualParents) {
    if (allowVirtualParents === void 0) {
      allowVirtualParents = true;
    }
    var isContained = false;
    if (parent3 && child) {
      if (allowVirtualParents) {
        if (parent3 === child) {
          isContained = true;
        } else {
          isContained = false;
          while (child) {
            var nextParent = getParent2(child);
            if (nextParent === parent3) {
              isContained = true;
              break;
            }
            child = nextParent;
          }
        }
      } else if (parent3.contains) {
        isContained = parent3.contains(child);
      }
    }
    return isContained;
  }

  // ../node_modules/@fluentui/dom-utilities/lib/findElementRecursive.js
  function findElementRecursive(element2, matchFunction) {
    if (!element2 || element2 === document.body) {
      return null;
    }
    return matchFunction(element2) ? element2 : findElementRecursive(getParent2(element2), matchFunction);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/elementContainsAttribute.js
  function elementContainsAttribute(element2, attribute) {
    var elementMatch = findElementRecursive(element2, function(testElement) {
      return testElement.hasAttribute(attribute);
    });
    return elementMatch && elementMatch.getAttribute(attribute);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/setPortalAttribute.js
  var DATA_PORTAL_ATTRIBUTE = "data-portal-element";
  function setPortalAttribute(element2) {
    element2.setAttribute(DATA_PORTAL_ATTRIBUTE, "true");
  }

  // ../node_modules/@fluentui/dom-utilities/lib/portalContainsElement.js
  function portalContainsElement(target, parent3) {
    var elementMatch = findElementRecursive(target, function(testElement) {
      return parent3 === testElement || testElement.hasAttribute(DATA_PORTAL_ATTRIBUTE);
    });
    return elementMatch !== null && elementMatch.hasAttribute(DATA_PORTAL_ATTRIBUTE);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/setVirtualParent.js
  function setVirtualParent2(child, parent3) {
    var virtualChild = child;
    var virtualParent = parent3;
    if (!virtualChild._virtual) {
      virtualChild._virtual = {
        children: []
      };
    }
    var oldParent = virtualChild._virtual.parent;
    if (oldParent && oldParent !== parent3) {
      var index2 = oldParent._virtual.children.indexOf(virtualChild);
      if (index2 > -1) {
        oldParent._virtual.children.splice(index2, 1);
      }
    }
    virtualChild._virtual.parent = virtualParent || void 0;
    if (virtualParent) {
      if (!virtualParent._virtual) {
        virtualParent._virtual = {
          children: []
        };
      }
      virtualParent._virtual.children.push(virtualChild);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/focus.js
  var IS_FOCUSABLE_ATTRIBUTE = "data-is-focusable";
  var IS_VISIBLE_ATTRIBUTE = "data-is-visible";
  var FOCUSZONE_ID_ATTRIBUTE = "data-focuszone-id";
  var FOCUSZONE_SUB_ATTRIBUTE = "data-is-sub-focuszone";
  function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getNextElement(rootElement, currentElement, true, false, false, includeElementsInFocusZones);
  }
  function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getPreviousElement(rootElement, currentElement, true, false, true, includeElementsInFocusZones);
  }
  function focusFirstChild(rootElement, bypassHiddenElements) {
    var element2 = getNextElement(rootElement, rootElement, true, false, false, true, void 0, void 0, bypassHiddenElements);
    if (element2) {
      focusAsync(element2);
      return true;
    }
    return false;
  }
  function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {
    if (!currentElement || !allowFocusRoot && currentElement === rootElement) {
      return null;
    }
    var isCurrentElementVisible = isElementVisible(currentElement);
    if (traverseChildren && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
      var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
      if (childMatch) {
        if (tabbable && isElementTabbable(childMatch, true) || !tabbable) {
          return childMatch;
        }
        var childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
        if (childMatchSiblingMatch) {
          return childMatchSiblingMatch;
        }
        var childMatchParent = childMatch.parentElement;
        while (childMatchParent && childMatchParent !== currentElement) {
          var childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
          if (childMatchParentMatch) {
            return childMatchParentMatch;
          }
          childMatchParent = childMatchParent.parentElement;
        }
      }
    }
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
      return currentElement;
    }
    var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
    if (siblingMatch) {
      return siblingMatch;
    }
    if (!suppressParentTraversal) {
      return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
    }
    return null;
  }
  function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements) {
    if (!currentElement || currentElement === rootElement && suppressChildTraversal && !allowFocusRoot) {
      return null;
    }
    var checkElementVisibility = bypassHiddenElements ? isElementVisibleAndNotHidden : isElementVisible;
    var isCurrentElementVisible = checkElementVisibility(currentElement);
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
      return currentElement;
    }
    if (!suppressChildTraversal && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
      var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
      if (childMatch) {
        return childMatch;
      }
    }
    if (currentElement === rootElement) {
      return null;
    }
    var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
    if (siblingMatch) {
      return siblingMatch;
    }
    if (!suppressParentTraversal) {
      return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
    }
    return null;
  }
  function isElementVisible(element2) {
    if (!element2 || !element2.getAttribute) {
      return false;
    }
    var visibilityAttribute = element2.getAttribute(IS_VISIBLE_ATTRIBUTE);
    if (visibilityAttribute !== null && visibilityAttribute !== void 0) {
      return visibilityAttribute === "true";
    }
    return element2.offsetHeight !== 0 || element2.offsetParent !== null || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    element2.isVisible === true;
  }
  function isElementVisibleAndNotHidden(element2) {
    return !!element2 && isElementVisible(element2) && !element2.hidden && window.getComputedStyle(element2).visibility !== "hidden";
  }
  function isElementTabbable(element2, checkTabIndex) {
    if (!element2 || element2.disabled) {
      return false;
    }
    var tabIndex = 0;
    var tabIndexAttributeValue = null;
    if (element2 && element2.getAttribute) {
      tabIndexAttributeValue = element2.getAttribute("tabIndex");
      if (tabIndexAttributeValue) {
        tabIndex = parseInt(tabIndexAttributeValue, 10);
      }
    }
    var isFocusableAttribute = element2.getAttribute ? element2.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;
    var isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;
    var result = !!element2 && isFocusableAttribute !== "false" && (element2.tagName === "A" || element2.tagName === "BUTTON" || element2.tagName === "INPUT" || element2.tagName === "TEXTAREA" || element2.tagName === "SELECT" || isFocusableAttribute === "true" || isTabIndexSet);
    return checkTabIndex ? tabIndex !== -1 && result : result;
  }
  function isElementFocusZone(element2) {
    return !!(element2 && element2.getAttribute && !!element2.getAttribute(FOCUSZONE_ID_ATTRIBUTE));
  }
  function isElementFocusSubZone(element2) {
    return !!(element2 && element2.getAttribute && element2.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === "true");
  }
  function doesElementContainFocus(element2) {
    var document4 = getDocument(element2);
    var currentActiveElement = document4 && document4.activeElement;
    if (currentActiveElement && elementContains2(element2, currentActiveElement)) {
      return true;
    }
    return false;
  }
  function shouldWrapFocus(element2, noWrapDataAttribute) {
    return elementContainsAttribute(element2, noWrapDataAttribute) === "true" ? false : true;
  }
  var targetToFocusOnNextRepaint = void 0;
  function focusAsync(element2) {
    if (element2) {
      if (targetToFocusOnNextRepaint) {
        targetToFocusOnNextRepaint = element2;
        return;
      }
      targetToFocusOnNextRepaint = element2;
      var win2 = getWindow2(element2);
      if (win2) {
        win2.requestAnimationFrame(function() {
          targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();
          targetToFocusOnNextRepaint = void 0;
        });
      }
    }
  }
  function getFocusableByIndexPath(parent3, path4) {
    var element2 = parent3;
    for (var _i = 0, path_1 = path4; _i < path_1.length; _i++) {
      var index2 = path_1[_i];
      var nextChild = element2.children[Math.min(index2, element2.children.length - 1)];
      if (!nextChild) {
        break;
      }
      element2 = nextChild;
    }
    element2 = isElementTabbable(element2) && isElementVisible(element2) ? element2 : getNextElement(parent3, element2, true) || getPreviousElement(parent3, element2);
    return element2;
  }
  function getElementIndexPath(fromElement, toElement) {
    var path4 = [];
    while (toElement && fromElement && toElement !== fromElement) {
      var parent_1 = getParent2(toElement, true);
      if (parent_1 === null) {
        return [];
      }
      path4.unshift(Array.prototype.indexOf.call(parent_1.children, toElement));
      toElement = parent_1;
    }
    return path4;
  }

  // ../node_modules/@fluentui/utilities/lib/dom/on.js
  function on(element2, eventName, callback, options) {
    element2.addEventListener(eventName, callback, options);
    return function() {
      return element2.removeEventListener(eventName, callback, options);
    };
  }

  // ../node_modules/@fluentui/utilities/lib/classNamesFunction.js
  var MAX_CACHE_COUNT = 50;
  var DEFAULT_SPECIFICITY_MULTIPLIER = 5;
  var _memoizedClassNames = 0;
  var stylesheet = Stylesheet.getInstance();
  if (stylesheet && stylesheet.onReset) {
    stylesheet.onReset(function() {
      return _memoizedClassNames++;
    });
  }
  var retVal = "__retval__";
  function classNamesFunction(options) {
    if (options === void 0) {
      options = {};
    }
    var map = /* @__PURE__ */ new Map();
    var styleCalcCount = 0;
    var getClassNamesCount = 0;
    var currentMemoizedClassNames = _memoizedClassNames;
    var getClassNames12 = function(styleFunctionOrObject, styleProps) {
      var _a5;
      if (styleProps === void 0) {
        styleProps = {};
      }
      if (options.useStaticStyles && typeof styleFunctionOrObject === "function" && styleFunctionOrObject.__noStyleOverride__) {
        return styleFunctionOrObject(styleProps);
      }
      getClassNamesCount++;
      var current = map;
      var theme = styleProps.theme;
      var rtl = theme && theme.rtl !== void 0 ? theme.rtl : getRTL2();
      var disableCaching = options.disableCaching;
      if (currentMemoizedClassNames !== _memoizedClassNames) {
        currentMemoizedClassNames = _memoizedClassNames;
        map = /* @__PURE__ */ new Map();
        styleCalcCount = 0;
      }
      if (!options.disableCaching) {
        current = _traverseMap(map, styleFunctionOrObject);
        current = _traverseMap(current, styleProps);
      }
      if (disableCaching || !current[retVal]) {
        if (styleFunctionOrObject === void 0) {
          current[retVal] = {};
        } else {
          current[retVal] = mergeCssSets([
            typeof styleFunctionOrObject === "function" ? styleFunctionOrObject(styleProps) : styleFunctionOrObject
          ], { rtl: !!rtl, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : void 0 });
        }
        if (!disableCaching) {
          styleCalcCount++;
        }
      }
      if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {
        var win2 = getWindow2();
        if ((_a5 = win2 === null || win2 === void 0 ? void 0 : win2.FabricConfig) === null || _a5 === void 0 ? void 0 : _a5.enableClassNameCacheFullWarning) {
          console.warn("Styles are being recalculated too frequently. Cache miss rate is ".concat(styleCalcCount, "/").concat(getClassNamesCount, "."));
          console.trace();
        }
        map.clear();
        styleCalcCount = 0;
        options.disableCaching = true;
      }
      return current[retVal];
    };
    return getClassNames12;
  }
  function _traverseEdge(current, value) {
    value = _normalizeValue(value);
    if (!current.has(value)) {
      current.set(value, /* @__PURE__ */ new Map());
    }
    return current.get(value);
  }
  function _traverseMap(current, inputs) {
    if (typeof inputs === "function") {
      var cachedInputsFromStyled = inputs.__cachedInputs__;
      if (cachedInputsFromStyled) {
        for (var _i = 0, _a5 = inputs.__cachedInputs__; _i < _a5.length; _i++) {
          var input = _a5[_i];
          current = _traverseEdge(current, input);
        }
      } else {
        current = _traverseEdge(current, inputs);
      }
    } else if (typeof inputs === "object") {
      for (var propName in inputs) {
        if (inputs.hasOwnProperty(propName)) {
          current = _traverseEdge(current, inputs[propName]);
        }
      }
    }
    return current;
  }
  function _normalizeValue(value) {
    switch (value) {
      case void 0:
        return "__undefined__";
      case null:
        return "__null__";
      default:
        return value;
    }
  }

  // ../node_modules/@fluentui/utilities/lib/componentAs/composeComponentAs.js
  var React178 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/memoize.js
  var _initializedStylesheetResets = false;
  var _resetCounter = 0;
  var _emptyObject = { empty: true };
  var _dictionary = {};
  var _weakMap = typeof WeakMap === "undefined" ? null : WeakMap;
  function resetMemoizations() {
    _resetCounter++;
  }
  function memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {
    if (maxCacheSize === void 0) {
      maxCacheSize = 100;
    }
    if (ignoreNullOrUndefinedResult === void 0) {
      ignoreNullOrUndefinedResult = false;
    }
    if (!_weakMap) {
      return cb;
    }
    if (!_initializedStylesheetResets) {
      var stylesheet3 = Stylesheet.getInstance();
      if (stylesheet3 && stylesheet3.onReset) {
        Stylesheet.getInstance().onReset(resetMemoizations);
      }
      _initializedStylesheetResets = true;
    }
    var rootNode;
    var cacheSize = 0;
    var localResetCounter = _resetCounter;
    return function memoizedFunction() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var currentNode = rootNode;
      if (rootNode === void 0 || localResetCounter !== _resetCounter || maxCacheSize > 0 && cacheSize > maxCacheSize) {
        rootNode = _createNode();
        cacheSize = 0;
        localResetCounter = _resetCounter;
      }
      currentNode = rootNode;
      for (var i4 = 0; i4 < args.length; i4++) {
        var arg = _normalizeArg(args[i4]);
        if (!currentNode.map.has(arg)) {
          currentNode.map.set(arg, _createNode());
        }
        currentNode = currentNode.map.get(arg);
      }
      if (!currentNode.hasOwnProperty("value")) {
        currentNode.value = cb.apply(void 0, args);
        cacheSize++;
      }
      if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === void 0)) {
        currentNode.value = cb.apply(void 0, args);
      }
      return currentNode.value;
    };
  }
  function createMemoizer(getValue) {
    if (!_weakMap) {
      return getValue;
    }
    var cache3 = new _weakMap();
    function memoizedGetValue(input) {
      if (!input || typeof input !== "function" && typeof input !== "object") {
        return getValue(input);
      }
      if (cache3.has(input)) {
        return cache3.get(input);
      }
      var value = getValue(input);
      cache3.set(input, value);
      return value;
    }
    return memoizedGetValue;
  }
  function _normalizeArg(val) {
    if (!val) {
      return _emptyObject;
    } else if (typeof val === "object" || typeof val === "function") {
      return val;
    } else if (!_dictionary[val]) {
      _dictionary[val] = { val };
    }
    return _dictionary[val];
  }
  function _createNode() {
    return {
      map: _weakMap ? new _weakMap() : null
    };
  }

  // ../node_modules/@fluentui/utilities/lib/componentAs/composeComponentAs.js
  function createComposedComponent(outer) {
    var Outer = outer;
    var outerMemoizer = createMemoizer(function(inner) {
      if (outer === inner) {
        throw new Error("Attempted to compose a component with itself.");
      }
      var Inner = inner;
      var innerMemoizer = createMemoizer(function(defaultRender) {
        var InnerWithDefaultRender = function(innerProps) {
          return React178.createElement(Inner, __assign({}, innerProps, { defaultRender }));
        };
        return InnerWithDefaultRender;
      });
      var OuterWithDefaultRender = function(outerProps) {
        var defaultRender = outerProps.defaultRender;
        return React178.createElement(Outer, __assign({}, outerProps, { defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner }));
      };
      return OuterWithDefaultRender;
    });
    return outerMemoizer;
  }
  var componentAsMemoizer = createMemoizer(createComposedComponent);
  function composeComponentAs(outer, inner) {
    return componentAsMemoizer(outer)(inner);
  }

  // ../node_modules/@fluentui/utilities/lib/controlled.js
  function isControlled(props, valueProp) {
    return props[valueProp] !== void 0 && props[valueProp] !== null;
  }

  // ../node_modules/@fluentui/utilities/lib/css.js
  function css() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var classes = [];
    for (var _a5 = 0, args_1 = args; _a5 < args_1.length; _a5++) {
      var arg = args_1[_a5];
      if (arg) {
        if (typeof arg === "string") {
          classes.push(arg);
        } else if (arg.hasOwnProperty("toString") && typeof arg.toString === "function") {
          classes.push(arg.toString());
        } else {
          for (var key in arg) {
            if (arg[key]) {
              classes.push(key);
            }
          }
        }
      }
    }
    return classes.join(" ");
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/Customizations.js
  var CustomizationsGlobalKey = "customizations";
  var NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };
  var _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {
    settings: {},
    scopedSettings: {},
    inCustomizerContext: false
  });
  var _events = [];
  var Customizations = (
    /** @class */
    function() {
      function Customizations2() {
      }
      Customizations2.reset = function() {
        _allSettings.settings = {};
        _allSettings.scopedSettings = {};
      };
      Customizations2.applySettings = function(settings) {
        _allSettings.settings = __assign(__assign({}, _allSettings.settings), settings);
        Customizations2._raiseChange();
      };
      Customizations2.applyScopedSettings = function(scopeName, settings) {
        _allSettings.scopedSettings[scopeName] = __assign(__assign({}, _allSettings.scopedSettings[scopeName]), settings);
        Customizations2._raiseChange();
      };
      Customizations2.getSettings = function(properties, scopeName, localSettings) {
        if (localSettings === void 0) {
          localSettings = NO_CUSTOMIZATIONS;
        }
        var settings = {};
        var localScopedSettings = scopeName && localSettings.scopedSettings[scopeName] || {};
        var globalScopedSettings = scopeName && _allSettings.scopedSettings[scopeName] || {};
        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
          var property = properties_1[_i];
          settings[property] = localScopedSettings[property] || localSettings.settings[property] || globalScopedSettings[property] || _allSettings.settings[property];
        }
        return settings;
      };
      Customizations2.applyBatchedUpdates = function(code2, suppressUpdate) {
        Customizations2._suppressUpdates = true;
        try {
          code2();
        } catch (_a5) {
        }
        Customizations2._suppressUpdates = false;
        if (!suppressUpdate) {
          Customizations2._raiseChange();
        }
      };
      Customizations2.observe = function(onChange) {
        _events.push(onChange);
      };
      Customizations2.unobserve = function(onChange) {
        _events = _events.filter(function(cb) {
          return cb !== onChange;
        });
      };
      Customizations2._raiseChange = function() {
        if (!Customizations2._suppressUpdates) {
          _events.forEach(function(cb) {
            return cb();
          });
        }
      };
      return Customizations2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/customizations/Customizer.js
  var React180 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/customizations/CustomizerContext.js
  var React179 = __toESM(require_react());
  var CustomizerContext = React179.createContext({
    customizations: {
      inCustomizerContext: false,
      settings: {},
      scopedSettings: {}
    }
  });

  // ../node_modules/@fluentui/utilities/lib/customizations/mergeSettings.js
  function mergeSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) {
      oldSettings = {};
    }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
  }
  function mergeScopedSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) {
      oldSettings = {};
    }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
  }
  function _isSettingsFunction(settings) {
    return typeof settings === "function";
  }
  function _settingsMergeWith(newSettings) {
    return function(settings) {
      return newSettings ? __assign(__assign({}, settings), newSettings) : settings;
    };
  }
  function _scopedSettingsMergeWith(scopedSettingsFromProps) {
    if (scopedSettingsFromProps === void 0) {
      scopedSettingsFromProps = {};
    }
    return function(oldScopedSettings) {
      var newScopedSettings = __assign({}, oldScopedSettings);
      for (var scopeName in scopedSettingsFromProps) {
        if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {
          newScopedSettings[scopeName] = __assign(__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);
        }
      }
      return newScopedSettings;
    };
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/mergeCustomizations.js
  function mergeCustomizations(props, parentContext) {
    var _a5 = (parentContext || {}).customizations, customizations = _a5 === void 0 ? { settings: {}, scopedSettings: {} } : _a5;
    return {
      customizations: {
        settings: mergeSettings(customizations.settings, props.settings),
        scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),
        inCustomizerContext: true
      }
    };
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/Customizer.js
  var Customizer = (
    /** @class */
    function(_super) {
      __extends(Customizer2, _super);
      function Customizer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._onCustomizationChange = function() {
          return _this.forceUpdate();
        };
        return _this;
      }
      Customizer2.prototype.componentDidMount = function() {
        Customizations.observe(this._onCustomizationChange);
      };
      Customizer2.prototype.componentWillUnmount = function() {
        Customizations.unobserve(this._onCustomizationChange);
      };
      Customizer2.prototype.render = function() {
        var _this = this;
        var contextTransform = this.props.contextTransform;
        return React180.createElement(CustomizerContext.Consumer, null, function(parentContext) {
          var newContext = mergeCustomizations(_this.props, parentContext);
          if (contextTransform) {
            newContext = contextTransform(newContext);
          }
          return React180.createElement(CustomizerContext.Provider, { value: newContext }, _this.props.children);
        });
      };
      return Customizer2;
    }(React180.Component)
  );

  // ../node_modules/@fluentui/utilities/lib/customizations/customizable.js
  var React181 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/hoistStatics.js
  function hoistStatics(source, dest) {
    for (var name_1 in source) {
      if (source.hasOwnProperty(name_1)) {
        dest[name_1] = source[name_1];
      }
    }
    return dest;
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/customizable.js
  function customizable(scope, fields, concatStyles) {
    return function customizableFactory(ComposedComponent) {
      var _a5;
      var resultClass = (_a5 = /** @class */
      function(_super) {
        __extends(ComponentWithInjectedProps, _super);
        function ComponentWithInjectedProps(props) {
          var _this = _super.call(this, props) || this;
          _this._styleCache = {};
          _this._onSettingChanged = _this._onSettingChanged.bind(_this);
          return _this;
        }
        ComponentWithInjectedProps.prototype.componentDidMount = function() {
          Customizations.observe(this._onSettingChanged);
        };
        ComponentWithInjectedProps.prototype.componentWillUnmount = function() {
          Customizations.unobserve(this._onSettingChanged);
        };
        ComponentWithInjectedProps.prototype.render = function() {
          var _this = this;
          return React181.createElement(CustomizerContext.Consumer, null, function(context) {
            var defaultProps = Customizations.getSettings(fields, scope, context.customizations);
            var componentProps = _this.props;
            if (defaultProps.styles && typeof defaultProps.styles === "function") {
              defaultProps.styles = defaultProps.styles(__assign(__assign({}, defaultProps), componentProps));
            }
            if (concatStyles && defaultProps.styles) {
              if (_this._styleCache.default !== defaultProps.styles || _this._styleCache.component !== componentProps.styles) {
                var mergedStyles = concatStyleSets(defaultProps.styles, componentProps.styles);
                _this._styleCache.default = defaultProps.styles;
                _this._styleCache.component = componentProps.styles;
                _this._styleCache.merged = mergedStyles;
              }
              return React181.createElement(ComposedComponent, __assign({}, defaultProps, componentProps, { styles: _this._styleCache.merged }));
            }
            return React181.createElement(ComposedComponent, __assign({}, defaultProps, componentProps));
          });
        };
        ComponentWithInjectedProps.prototype._onSettingChanged = function() {
          this.forceUpdate();
        };
        return ComponentWithInjectedProps;
      }(React181.Component), _a5.displayName = "Customized" + scope, _a5);
      return hoistStatics(ComposedComponent, resultClass);
    };
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/useCustomizationSettings.js
  var React182 = __toESM(require_react());
  function useCustomizationSettings(properties, scopeName) {
    var forceUpdate = useForceUpdate2();
    var customizations = React182.useContext(CustomizerContext).customizations;
    var inCustomizerContext = customizations.inCustomizerContext;
    React182.useEffect(function() {
      if (!inCustomizerContext) {
        Customizations.observe(forceUpdate);
      }
      return function() {
        if (!inCustomizerContext) {
          Customizations.unobserve(forceUpdate);
        }
      };
    }, [inCustomizerContext]);
    return Customizations.getSettings(properties, scopeName, customizations);
  }
  function useForceUpdate2() {
    var _a5 = React182.useState(0), setValue = _a5[1];
    return function() {
      return setValue(function(value) {
        return ++value;
      });
    };
  }

  // ../node_modules/@fluentui/utilities/lib/extendComponent.js
  function extendComponent(parent3, methods) {
    for (var name_1 in methods) {
      if (methods.hasOwnProperty(name_1)) {
        parent3[name_1] = appendFunction(parent3, parent3[name_1], methods[name_1]);
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/getId.js
  var CURRENT_ID_PROPERTY = "__currentId__";
  var DEFAULT_ID_STRING = "id__";
  var _global2 = getWindow2() || {};
  if (_global2[CURRENT_ID_PROPERTY] === void 0) {
    _global2[CURRENT_ID_PROPERTY] = 0;
  }
  var _initializedStylesheetResets2 = false;
  function getId(prefix2) {
    if (!_initializedStylesheetResets2) {
      var stylesheet3 = Stylesheet.getInstance();
      if (stylesheet3 && stylesheet3.onReset) {
        stylesheet3.onReset(resetIds);
      }
      _initializedStylesheetResets2 = true;
    }
    var index2 = _global2[CURRENT_ID_PROPERTY]++;
    return (prefix2 === void 0 ? DEFAULT_ID_STRING : prefix2) + index2;
  }
  function resetIds(counter) {
    if (counter === void 0) {
      counter = 0;
    }
    _global2[CURRENT_ID_PROPERTY] = counter;
  }

  // ../node_modules/@fluentui/utilities/lib/properties.js
  var toObjectMap2 = function() {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      items[_i] = arguments[_i];
    }
    var result = {};
    for (var _a5 = 0, items_1 = items; _a5 < items_1.length; _a5++) {
      var item = items_1[_a5];
      var keys2 = Array.isArray(item) ? item : Object.keys(item);
      for (var _b = 0, keys_1 = keys2; _b < keys_1.length; _b++) {
        var key = keys_1[_b];
        result[key] = 1;
      }
    }
    return result;
  };
  var baseElementEvents2 = toObjectMap2([
    "onCopy",
    "onCut",
    "onPaste",
    "onCompositionEnd",
    "onCompositionStart",
    "onCompositionUpdate",
    "onFocus",
    "onFocusCapture",
    "onBlur",
    "onBlurCapture",
    "onChange",
    "onInput",
    "onSubmit",
    "onLoad",
    "onError",
    "onKeyDown",
    "onKeyDownCapture",
    "onKeyPress",
    "onKeyUp",
    "onAbort",
    "onCanPlay",
    "onCanPlayThrough",
    "onDurationChange",
    "onEmptied",
    "onEncrypted",
    "onEnded",
    "onLoadedData",
    "onLoadedMetadata",
    "onLoadStart",
    "onPause",
    "onPlay",
    "onPlaying",
    "onProgress",
    "onRateChange",
    "onSeeked",
    "onSeeking",
    "onStalled",
    "onSuspend",
    "onTimeUpdate",
    "onVolumeChange",
    "onWaiting",
    "onClick",
    "onClickCapture",
    "onContextMenu",
    "onDoubleClick",
    "onDrag",
    "onDragEnd",
    "onDragEnter",
    "onDragExit",
    "onDragLeave",
    "onDragOver",
    "onDragStart",
    "onDrop",
    "onMouseDown",
    "onMouseDownCapture",
    "onMouseEnter",
    "onMouseLeave",
    "onMouseMove",
    "onMouseOut",
    "onMouseOver",
    "onMouseUp",
    "onMouseUpCapture",
    "onSelect",
    "onTouchCancel",
    "onTouchEnd",
    "onTouchMove",
    "onTouchStart",
    "onScroll",
    "onWheel",
    "onPointerCancel",
    "onPointerDown",
    "onPointerEnter",
    "onPointerLeave",
    "onPointerMove",
    "onPointerOut",
    "onPointerOver",
    "onPointerUp",
    "onGotPointerCapture",
    "onLostPointerCapture"
  ]);
  var baseElementProperties2 = toObjectMap2([
    "accessKey",
    "children",
    "className",
    "contentEditable",
    "dir",
    "draggable",
    "hidden",
    "htmlFor",
    "id",
    "lang",
    "ref",
    "role",
    "style",
    "tabIndex",
    "title",
    "translate",
    "spellCheck",
    "name"
    // global
  ]);
  var htmlElementProperties2 = toObjectMap2(baseElementProperties2, baseElementEvents2);
  var labelProperties2 = toObjectMap2(htmlElementProperties2, [
    "form"
    // button, fieldset, input, label, meter, object, output, select, textarea
  ]);
  var audioProperties2 = toObjectMap2(htmlElementProperties2, [
    "height",
    "loop",
    "muted",
    "preload",
    "src",
    "width"
    // canvas, embed, iframe, img, input, object, video
  ]);
  var videoProperties2 = toObjectMap2(audioProperties2, [
    "poster"
    // video
  ]);
  var olProperties2 = toObjectMap2(htmlElementProperties2, [
    "start"
    // ol
  ]);
  var liProperties2 = toObjectMap2(htmlElementProperties2, [
    "value"
    // button, input, li, option, meter, progress, param
  ]);
  var anchorProperties2 = toObjectMap2(htmlElementProperties2, [
    "download",
    "href",
    "hrefLang",
    "media",
    "rel",
    "target",
    "type"
    // a, button, input, link, menu, object, script, source, style
  ]);
  var buttonProperties2 = toObjectMap2(htmlElementProperties2, [
    "autoFocus",
    "disabled",
    "form",
    "formAction",
    "formEncType",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "type",
    "value"
    // button, input, li, option, meter, progress, param,
  ]);
  var inputProperties2 = toObjectMap2(buttonProperties2, [
    "accept",
    "alt",
    "autoCapitalize",
    "autoComplete",
    "checked",
    "dirname",
    "form",
    "height",
    "inputMode",
    "list",
    "max",
    "maxLength",
    "min",
    "minLength",
    "multiple",
    "pattern",
    "placeholder",
    "readOnly",
    "required",
    "src",
    "step",
    "size",
    "type",
    "value",
    "width"
    // canvas, embed, iframe, img, input, object, video
  ]);
  var textAreaProperties2 = toObjectMap2(buttonProperties2, [
    "autoCapitalize",
    "cols",
    "dirname",
    "form",
    "maxLength",
    "minLength",
    "placeholder",
    "readOnly",
    "required",
    "rows",
    "wrap"
    // textarea
  ]);
  var selectProperties2 = toObjectMap2(buttonProperties2, [
    "form",
    "multiple",
    "required"
    // input, select, textarea
  ]);
  var optionProperties2 = toObjectMap2(htmlElementProperties2, [
    "selected",
    "value"
    // button, input, li, option, meter, progress, param
  ]);
  var tableProperties2 = toObjectMap2(htmlElementProperties2, [
    "cellPadding",
    "cellSpacing"
    // table
  ]);
  var thProperties2 = toObjectMap2(htmlElementProperties2, [
    "rowSpan",
    "scope"
    // th
  ]);
  var tdProperties2 = toObjectMap2(htmlElementProperties2, [
    "colSpan",
    "headers",
    "rowSpan",
    "scope"
    // th
  ]);
  var colGroupProperties2 = toObjectMap2(htmlElementProperties2, [
    "span"
    // col, colgroup
  ]);
  var colProperties2 = toObjectMap2(htmlElementProperties2, [
    "span"
    // col, colgroup
  ]);
  var formProperties2 = toObjectMap2(htmlElementProperties2, [
    "acceptCharset",
    "action",
    "encType",
    "encType",
    "method",
    "noValidate",
    "target"
    // form
  ]);
  var iframeProperties2 = toObjectMap2(htmlElementProperties2, [
    "allow",
    "allowFullScreen",
    "allowPaymentRequest",
    "allowTransparency",
    "csp",
    "height",
    "importance",
    "referrerPolicy",
    "sandbox",
    "src",
    "srcDoc",
    "width"
    // canvas, embed, iframe, img, input, object, video,
  ]);
  var imgProperties2 = toObjectMap2(htmlElementProperties2, [
    "alt",
    "crossOrigin",
    "height",
    "src",
    "srcSet",
    "useMap",
    "width"
    // canvas, embed, iframe, img, input, object, video
  ]);
  var divProperties = htmlElementProperties2;
  function getNativeProps2(props, allowedPropNames, excludedPropNames) {
    var isArray = Array.isArray(allowedPropNames);
    var result = {};
    var keys2 = Object.keys(props);
    for (var _i = 0, keys_2 = keys2; _i < keys_2.length; _i++) {
      var key = keys_2[_i];
      var isNativeProp = !isArray && allowedPropNames[key] || isArray && allowedPropNames.indexOf(key) >= 0 || key.indexOf("data-") === 0 || key.indexOf("aria-") === 0;
      if (isNativeProp && (!excludedPropNames || (excludedPropNames === null || excludedPropNames === void 0 ? void 0 : excludedPropNames.indexOf(key)) === -1)) {
        result[key] = props[key];
      }
    }
    return result;
  }

  // ../node_modules/@fluentui/utilities/lib/initializeComponentRef.js
  function initializeComponentRef(obj) {
    extendComponent(obj, {
      componentDidMount: _onMount,
      componentDidUpdate: _onUpdate,
      componentWillUnmount: _onUnmount
    });
  }
  function _onMount() {
    _setComponentRef(this.props.componentRef, this);
  }
  function _onUpdate(prevProps) {
    if (prevProps.componentRef !== this.props.componentRef) {
      _setComponentRef(prevProps.componentRef, null);
      _setComponentRef(this.props.componentRef, this);
    }
  }
  function _onUnmount() {
    _setComponentRef(this.props.componentRef, null);
  }
  function _setComponentRef(componentRef, value) {
    if (componentRef) {
      if (typeof componentRef === "object") {
        componentRef.current = value;
      } else if (typeof componentRef === "function") {
        componentRef(value);
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/keyboard.js
  var _a2;
  var DirectionalKeyCodes = (_a2 = {}, _a2[KeyCodes.up] = 1, _a2[KeyCodes.down] = 1, _a2[KeyCodes.left] = 1, _a2[KeyCodes.right] = 1, _a2[KeyCodes.home] = 1, _a2[KeyCodes.end] = 1, _a2[KeyCodes.tab] = 1, _a2[KeyCodes.pageUp] = 1, _a2[KeyCodes.pageDown] = 1, _a2);
  function isDirectionalKeyCode(which) {
    return !!DirectionalKeyCodes[which];
  }

  // ../node_modules/@fluentui/utilities/lib/setFocusVisibility.js
  var IsFocusVisibleClassName = "ms-Fabric--isFocusVisible";
  var IsFocusHiddenClassName = "ms-Fabric--isFocusHidden";
  function updateClassList(el, enabled) {
    if (el) {
      el.classList.add(enabled ? IsFocusVisibleClassName : IsFocusHiddenClassName);
      el.classList.remove(enabled ? IsFocusHiddenClassName : IsFocusVisibleClassName);
    }
  }
  function setFocusVisibility(enabled, target, registeredProviders) {
    var _a5;
    if (registeredProviders) {
      registeredProviders.forEach(function(ref) {
        return updateClassList(ref.current, enabled);
      });
    } else {
      updateClassList((_a5 = getWindow2(target)) === null || _a5 === void 0 ? void 0 : _a5.document.body, enabled);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/FocusRectsProvider.js
  var React184 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/useFocusRects.js
  var React183 = __toESM(require_react());
  var mountCounters = /* @__PURE__ */ new WeakMap();
  var callbackMap = /* @__PURE__ */ new WeakMap();
  function setMountCounters(key, delta) {
    var newValue;
    var currValue = mountCounters.get(key);
    if (currValue) {
      newValue = currValue + delta;
    } else {
      newValue = 1;
    }
    mountCounters.set(key, newValue);
    return newValue;
  }
  function setCallbackMap(context) {
    var callbacks2 = callbackMap.get(context);
    if (callbacks2) {
      return callbacks2;
    }
    var onMouseDown = function(ev) {
      return _onMouseDown(ev, context.registeredProviders);
    };
    var onPointerDown = function(ev) {
      return _onPointerDown(ev, context.registeredProviders);
    };
    var onKeyDown = function(ev) {
      return _onKeyDown(ev, context.registeredProviders);
    };
    var onKeyUp = function(ev) {
      return _onKeyUp(ev, context.registeredProviders);
    };
    callbacks2 = { onMouseDown, onPointerDown, onKeyDown, onKeyUp };
    callbackMap.set(context, callbacks2);
    return callbacks2;
  }
  var FocusRectsContext = React183.createContext(void 0);
  function useFocusRects(rootRef) {
    var context = React183.useContext(FocusRectsContext);
    React183.useEffect(function() {
      var _a5, _b, _c, _d;
      var win2 = getWindow2(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);
      if (!win2 || ((_a5 = win2.FabricConfig) === null || _a5 === void 0 ? void 0 : _a5.disableFocusRects) === true) {
        return void 0;
      }
      var el = win2;
      var onMouseDown;
      var onPointerDown;
      var onKeyDown;
      var onKeyUp;
      if (((_b = context === null || context === void 0 ? void 0 : context.providerRef) === null || _b === void 0 ? void 0 : _b.current) && ((_d = (_c = context === null || context === void 0 ? void 0 : context.providerRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.addEventListener)) {
        el = context.providerRef.current;
        var callbacks2 = (
          /*@__NOINLINE__*/
          setCallbackMap(context)
        );
        onMouseDown = callbacks2.onMouseDown;
        onPointerDown = callbacks2.onPointerDown;
        onKeyDown = callbacks2.onKeyDown;
        onKeyUp = callbacks2.onKeyUp;
      } else {
        onMouseDown = _onMouseDown;
        onPointerDown = _onPointerDown;
        onKeyDown = _onKeyDown;
        onKeyUp = _onKeyUp;
      }
      var count = setMountCounters(el, 1);
      if (count <= 1) {
        el.addEventListener("mousedown", onMouseDown, true);
        el.addEventListener("pointerdown", onPointerDown, true);
        el.addEventListener("keydown", onKeyDown, true);
        el.addEventListener("keyup", onKeyUp, true);
      }
      return function() {
        var _a6;
        if (!win2 || ((_a6 = win2.FabricConfig) === null || _a6 === void 0 ? void 0 : _a6.disableFocusRects) === true) {
          return;
        }
        count = setMountCounters(el, -1);
        if (count === 0) {
          el.removeEventListener("mousedown", onMouseDown, true);
          el.removeEventListener("pointerdown", onPointerDown, true);
          el.removeEventListener("keydown", onKeyDown, true);
          el.removeEventListener("keyup", onKeyUp, true);
        }
      };
    }, [context, rootRef]);
  }
  var FocusRects = function(props) {
    useFocusRects(props.rootRef);
    return null;
  };
  function _onMouseDown(ev, registeredProviders) {
    setFocusVisibility(false, ev.target, registeredProviders);
  }
  function _onPointerDown(ev, registeredProviders) {
    if (ev.pointerType !== "mouse") {
      setFocusVisibility(false, ev.target, registeredProviders);
    }
  }
  function _onKeyDown(ev, registeredProviders) {
    if (isDirectionalKeyCode(ev.which)) {
      setFocusVisibility(true, ev.target, registeredProviders);
    }
  }
  function _onKeyUp(ev, registeredProviders) {
    if (isDirectionalKeyCode(ev.which)) {
      setFocusVisibility(true, ev.target, registeredProviders);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/FocusRectsProvider.js
  var FocusRectsProvider = function(props) {
    var providerRef = props.providerRef, layerRoot = props.layerRoot;
    var registeredProviders = React184.useState([])[0];
    var parentContext = React184.useContext(FocusRectsContext);
    var inheritParentContext = parentContext !== void 0 && !layerRoot;
    var context = React184.useMemo(function() {
      return inheritParentContext ? void 0 : {
        providerRef,
        registeredProviders,
        registerProvider: function(ref) {
          registeredProviders.push(ref);
          parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerProvider(ref);
        },
        unregisterProvider: function(ref) {
          parentContext === null || parentContext === void 0 ? void 0 : parentContext.unregisterProvider(ref);
          var i4 = registeredProviders.indexOf(ref);
          if (i4 >= 0) {
            registeredProviders.splice(i4, 1);
          }
        }
      };
    }, [providerRef, registeredProviders, parentContext, inheritParentContext]);
    React184.useEffect(function() {
      if (context) {
        context.registerProvider(context.providerRef);
        return function() {
          return context.unregisterProvider(context.providerRef);
        };
      }
    }, [context]);
    if (context) {
      return React184.createElement(FocusRectsContext.Provider, { value: context }, props.children);
    } else {
      return React184.createElement(React184.Fragment, null, props.children);
    }
  };

  // ../node_modules/@fluentui/utilities/lib/localStorage.js
  function getItem2(key) {
    var result = null;
    try {
      var win2 = getWindow2();
      result = win2 ? win2.localStorage.getItem(key) : null;
    } catch (e3) {
    }
    return result;
  }

  // ../node_modules/@fluentui/utilities/lib/language.js
  var _language;
  var STORAGE_KEY = "language";
  function getLanguage(persistenceType) {
    if (persistenceType === void 0) {
      persistenceType = "sessionStorage";
    }
    if (_language === void 0) {
      var doc = getDocument();
      var savedLanguage = persistenceType === "localStorage" ? getItem2(STORAGE_KEY) : persistenceType === "sessionStorage" ? getItem(STORAGE_KEY) : void 0;
      if (savedLanguage) {
        _language = savedLanguage;
      }
      if (_language === void 0 && doc) {
        _language = doc.documentElement.getAttribute("lang");
      }
      if (_language === void 0) {
        _language = "en";
      }
    }
    return _language;
  }

  // ../node_modules/@fluentui/utilities/lib/merge.js
  function merge(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    for (var _a5 = 0, args_1 = args; _a5 < args_1.length; _a5++) {
      var arg = args_1[_a5];
      _merge(target || {}, arg);
    }
    return target;
  }
  function _merge(target, source, circularReferences) {
    if (circularReferences === void 0) {
      circularReferences = [];
    }
    circularReferences.push(source);
    for (var name_1 in source) {
      if (source.hasOwnProperty(name_1)) {
        if (name_1 !== "__proto__" && name_1 !== "constructor" && name_1 !== "prototype") {
          var value = source[name_1];
          if (typeof value === "object" && value !== null && !Array.isArray(value)) {
            var isCircularReference = circularReferences.indexOf(value) > -1;
            target[name_1] = isCircularReference ? value : _merge(target[name_1] || {}, value, circularReferences);
          } else {
            target[name_1] = value;
          }
        }
      }
    }
    circularReferences.pop();
    return target;
  }

  // ../node_modules/@fluentui/utilities/lib/mobileDetector.js
  var isIOS = function() {
    if (!window || !window.navigator || !window.navigator.userAgent) {
      return false;
    }
    return /iPad|iPhone|iPod/i.test(window.navigator.userAgent);
  };

  // ../node_modules/@fluentui/utilities/lib/modalize.js
  var tagsToIgnore = ["TEMPLATE", "STYLE", "SCRIPT"];
  function modalize(target) {
    var targetDocument = getDocument(target);
    if (!targetDocument) {
      return function() {
        return void 0;
      };
    }
    var affectedNodes = [];
    while (target !== targetDocument.body && target.parentElement) {
      for (var _i = 0, _a5 = target.parentElement.children; _i < _a5.length; _i++) {
        var sibling = _a5[_i];
        var ariaHidden = sibling.getAttribute("aria-hidden");
        if (sibling !== target && (ariaHidden === null || ariaHidden === void 0 ? void 0 : ariaHidden.toLowerCase()) !== "true" && tagsToIgnore.indexOf(sibling.tagName) === -1) {
          affectedNodes.push([sibling, ariaHidden]);
        }
      }
      target = target.parentElement;
    }
    affectedNodes.forEach(function(_a6) {
      var node5 = _a6[0];
      node5.setAttribute("aria-hidden", "true");
    });
    return function() {
      unmodalize(affectedNodes);
      affectedNodes = [];
    };
  }
  function unmodalize(affectedNodes) {
    affectedNodes.forEach(function(_a5) {
      var node5 = _a5[0], originalValue = _a5[1];
      if (originalValue) {
        node5.setAttribute("aria-hidden", originalValue);
      } else {
        node5.removeAttribute("aria-hidden");
      }
    });
  }

  // ../node_modules/@fluentui/utilities/lib/osDetector.js
  var isMacResult;
  function isMac(reset) {
    var _a5;
    if (typeof isMacResult === "undefined" || reset) {
      var win2 = getWindow2();
      var userAgent = (_a5 = win2 === null || win2 === void 0 ? void 0 : win2.navigator) === null || _a5 === void 0 ? void 0 : _a5.userAgent;
      isMacResult = !!userAgent && userAgent.indexOf("Macintosh") !== -1;
    }
    return !!isMacResult;
  }

  // ../node_modules/@fluentui/utilities/lib/renderFunction/composeRenderFunction.js
  function createComposedRenderFunction(outer) {
    var outerMemoizer = createMemoizer(function(inner) {
      var innerMemoizer = createMemoizer(function(defaultRender) {
        return function(innerProps) {
          return inner(innerProps, defaultRender);
        };
      });
      return function(outerProps, defaultRender) {
        return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);
      };
    });
    return outerMemoizer;
  }
  var memoizer = createMemoizer(createComposedRenderFunction);
  function composeRenderFunction(outer, inner) {
    return memoizer(outer)(inner);
  }

  // ../node_modules/@fluentui/utilities/lib/styled.js
  var React185 = __toESM(require_react());
  var DefaultFields = ["theme", "styles"];
  function styled(Component18, baseStyles, getProps, customizable2, pure) {
    customizable2 = customizable2 || { scope: "", fields: void 0 };
    var scope = customizable2.scope, _a5 = customizable2.fields, fields = _a5 === void 0 ? DefaultFields : _a5;
    var Wrapped = React185.forwardRef(function(props, forwardedRef) {
      var styles4 = React185.useRef();
      var settings = useCustomizationSettings(fields, scope);
      var customizedStyles = settings.styles, dir = settings.dir, rest = __rest(settings, ["styles", "dir"]);
      var additionalProps = getProps ? getProps(props) : void 0;
      var cache3 = styles4.current && styles4.current.__cachedInputs__ || [];
      var propStyles = props.styles;
      if (!styles4.current || customizedStyles !== cache3[1] || propStyles !== cache3[2]) {
        var concatenatedStyles = function(styleProps) {
          return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, propStyles);
        };
        concatenatedStyles.__cachedInputs__ = [
          baseStyles,
          customizedStyles,
          propStyles
        ];
        concatenatedStyles.__noStyleOverride__ = !customizedStyles && !propStyles;
        styles4.current = concatenatedStyles;
      }
      return React185.createElement(Component18, __assign({ ref: forwardedRef }, rest, additionalProps, props, { styles: styles4.current }));
    });
    Wrapped.displayName = "Styled".concat(Component18.displayName || Component18.name);
    var pureComponent = pure ? React185.memo(Wrapped) : Wrapped;
    if (Wrapped.displayName) {
      pureComponent.displayName = Wrapped.displayName;
    }
    return pureComponent;
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnControlledUsage.js
  var warningsMap;
  if (true) {
    warningsMap = {
      valueOnChange: {},
      valueDefaultValue: {},
      controlledToUncontrolled: {},
      uncontrolledToControlled: {}
    };
  }
  function warnControlledUsage(params) {
    if (true) {
      var componentId = params.componentId, componentName = params.componentName, defaultValueProp = params.defaultValueProp, props = params.props, oldProps = params.oldProps, onChangeProp = params.onChangeProp, readOnlyProp = params.readOnlyProp, valueProp = params.valueProp;
      var oldIsControlled = oldProps ? isControlled(oldProps, valueProp) : void 0;
      var newIsControlled = isControlled(props, valueProp);
      if (newIsControlled) {
        var hasOnChange = !!props[onChangeProp];
        var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);
        if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {
          warningsMap.valueOnChange[componentId] = true;
          warn("Warning: You provided a '".concat(String(valueProp), "' prop to a ").concat(String(componentName), " without an '").concat(String(onChangeProp), "' handler. ") + "This will render a read-only field. If the field should be mutable use '".concat(String(defaultValueProp), "'. ") + "Otherwise, set '".concat(String(onChangeProp), "'").concat(readOnlyProp ? " or '".concat(String(readOnlyProp), "'") : "", "."));
        }
        var defaultValue = props[defaultValueProp];
        if (defaultValue !== void 0 && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {
          warningsMap.valueDefaultValue[componentId] = true;
          warn("Warning: You provided both '".concat(String(valueProp), "' and '").concat(String(defaultValueProp), "' to a ").concat(componentName, ". ") + "Form fields must be either controlled or uncontrolled (specify either the '".concat(String(valueProp), "' prop, ") + "or the '".concat(String(defaultValueProp), "' prop, but not both). Decide between using a controlled or uncontrolled ") + "".concat(componentName, " and remove one of these props. More info: https://fb.me/react-controlled-components"));
        }
      }
      if (oldProps && newIsControlled !== oldIsControlled) {
        var oldType = oldIsControlled ? "a controlled" : "an uncontrolled";
        var newType = oldIsControlled ? "uncontrolled" : "controlled";
        var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;
        if (!warnMap[componentId]) {
          warnMap[componentId] = true;
          warn("Warning: A component is changing ".concat(oldType, " ").concat(componentName, " to be ").concat(newType, ". ") + "".concat(componentName, "s should not switch from controlled to uncontrolled (or vice versa). ") + "Decide between using controlled or uncontrolled for the lifetime of the component. More info: https://fb.me/react-controlled-components");
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/ie11Detector.js
  var isIE11 = function() {
    var _a5;
    var win2 = getWindow2();
    if (!((_a5 = win2 === null || win2 === void 0 ? void 0 : win2.navigator) === null || _a5 === void 0 ? void 0 : _a5.userAgent)) {
      return false;
    }
    return win2.navigator.userAgent.indexOf("rv:11.0") > -1;
  };

  // ../node_modules/@fluentui/utilities/lib/getPropsWithDefaults.js
  function getPropsWithDefaults(defaultProps, propsWithoutDefaults) {
    var props = __assign({}, propsWithoutDefaults);
    for (var _i = 0, _a5 = Object.keys(defaultProps); _i < _a5.length; _i++) {
      var key = _a5[_i];
      if (props[key] === void 0) {
        props[key] = defaultProps[key];
      }
    }
    return props;
  }

  // ../node_modules/@fluentui/utilities/lib/createMergedRef.js
  var createResolver = function(local) {
    return function(newValue) {
      for (var _i = 0, _a5 = local.refs; _i < _a5.length; _i++) {
        var ref = _a5[_i];
        if (typeof ref === "function") {
          ref(newValue);
        } else if (ref) {
          ref.current = newValue;
        }
      }
    };
  };
  var createMergedRef = function(value) {
    var local = {
      refs: []
    };
    return function() {
      var newRefs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newRefs[_i] = arguments[_i];
      }
      if (!local.resolver || !arraysEqual(local.refs, newRefs)) {
        local.resolver = createResolver(local);
      }
      local.refs = newRefs;
      return local.resolver;
    };
  };

  // ../node_modules/@fluentui/utilities/lib/useIsomorphicLayoutEffect.js
  var React186 = __toESM(require_react());
  var useIsomorphicLayoutEffect3 = canUseDOM3() ? React186.useLayoutEffect : React186.useEffect;

  // ../node_modules/@fluentui/utilities/lib/version.js
  setVersion("@fluentui/utilities", "8.13.18");

  // ../node_modules/@fluentui/style-utilities/lib/utilities/icons.js
  var ICON_SETTING_NAME = "icons";
  var _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {
    __options: {
      disableWarnings: false,
      warnOnMissingIcons: true
    },
    __remapped: {}
  });
  var stylesheet2 = Stylesheet.getInstance();
  if (stylesheet2 && stylesheet2.onReset) {
    stylesheet2.onReset(function() {
      for (var name_1 in _iconSettings) {
        if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {
          _iconSettings[name_1].subset.className = void 0;
        }
      }
    });
  }
  var normalizeIconName = function(name) {
    return name.toLowerCase();
  };
  function registerIcons(iconSubset, options) {
    var subset = __assign(__assign({}, iconSubset), { isRegistered: false, className: void 0 });
    var icons = iconSubset.icons;
    options = options ? __assign(__assign({}, _iconSettings.__options), options) : _iconSettings.__options;
    for (var iconName in icons) {
      if (icons.hasOwnProperty(iconName)) {
        var code2 = icons[iconName];
        var normalizedIconName = normalizeIconName(iconName);
        if (_iconSettings[normalizedIconName]) {
          _warnDuplicateIcon(iconName);
        } else {
          _iconSettings[normalizedIconName] = {
            code: code2,
            subset
          };
        }
      }
    }
  }
  function registerIconAlias(iconName, mappedToName) {
    _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);
  }
  function getIcon(name) {
    var icon = void 0;
    var options = _iconSettings.__options;
    name = name ? normalizeIconName(name) : "";
    name = _iconSettings.__remapped[name] || name;
    if (name) {
      icon = _iconSettings[name];
      if (icon) {
        var subset = icon.subset;
        if (subset && subset.fontFace) {
          if (!subset.isRegistered) {
            fontFace(subset.fontFace);
            subset.isRegistered = true;
          }
          if (!subset.className) {
            subset.className = mergeStyles(subset.style, {
              fontFamily: subset.fontFace.fontFamily,
              fontWeight: subset.fontFace.fontWeight || "normal",
              fontStyle: subset.fontFace.fontStyle || "normal"
            });
          }
        }
      } else {
        if (!options.disableWarnings && options.warnOnMissingIcons) {
          warn('The icon "'.concat(name, '" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.'));
        }
      }
    }
    return icon;
  }
  var _missingIcons = [];
  var _missingIconsTimer = void 0;
  function _warnDuplicateIcon(iconName) {
    var options = _iconSettings.__options;
    var warningDelay = 2e3;
    var maxIconsInMessage = 10;
    if (!options.disableWarnings) {
      _missingIcons.push(iconName);
      if (_missingIconsTimer === void 0) {
        _missingIconsTimer = setTimeout(function() {
          warn("Some icons were re-registered. Applications should only call registerIcons for any given icon once. Redefining what an icon is may have unintended consequences. Duplicates include: \n" + _missingIcons.slice(0, maxIconsInMessage).join(", ") + (_missingIcons.length > maxIconsInMessage ? " (+ ".concat(_missingIcons.length - maxIconsInMessage, " more)") : ""));
          _missingIconsTimer = void 0;
          _missingIcons = [];
        }, warningDelay);
      }
    }
  }

  // ../node_modules/@fluentui/theme/lib/utilities/makeSemanticColors.js
  function makeSemanticColors(p3, e3, s3, isInverted, depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    var semanticColors = __assign({
      primaryButtonBorder: "transparent",
      errorText: !isInverted ? "#a4262c" : "#F1707B",
      messageText: !isInverted ? "#323130" : "#F3F2F1",
      messageLink: !isInverted ? "#005A9E" : "#6CB8F6",
      messageLinkHovered: !isInverted ? "#004578" : "#82C7FF",
      infoIcon: !isInverted ? "#605e5c" : "#C8C6C4",
      errorIcon: !isInverted ? "#A80000" : "#F1707B",
      blockingIcon: !isInverted ? "#FDE7E9" : "#442726",
      warningIcon: !isInverted ? "#797775" : "#C8C6C4",
      severeWarningIcon: !isInverted ? "#D83B01" : "#FCE100",
      successIcon: !isInverted ? "#107C10" : "#92C353",
      infoBackground: !isInverted ? "#f3f2f1" : "#323130",
      errorBackground: !isInverted ? "#FDE7E9" : "#442726",
      blockingBackground: !isInverted ? "#FDE7E9" : "#442726",
      warningBackground: !isInverted ? "#FFF4CE" : "#433519",
      severeWarningBackground: !isInverted ? "#FED9CC" : "#4F2A0F",
      successBackground: !isInverted ? "#DFF6DD" : "#393D1B",
      // deprecated
      warningHighlight: !isInverted ? "#ffb900" : "#fff100",
      successText: !isInverted ? "#107C10" : "#92c353"
    }, s3);
    var fullSemanticColors = getSemanticColors(p3, e3, semanticColors, isInverted);
    return _fixDeprecatedSlots(fullSemanticColors, depComments);
  }
  function getSemanticColors(p3, e3, s3, isInverted, depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    var result = {};
    var _a5 = p3 || {}, white2 = _a5.white, black2 = _a5.black, themePrimary = _a5.themePrimary, themeDark = _a5.themeDark, themeDarker = _a5.themeDarker, themeDarkAlt = _a5.themeDarkAlt, themeLighter = _a5.themeLighter, neutralLight = _a5.neutralLight, neutralLighter = _a5.neutralLighter, neutralDark = _a5.neutralDark, neutralQuaternary = _a5.neutralQuaternary, neutralQuaternaryAlt = _a5.neutralQuaternaryAlt, neutralPrimary = _a5.neutralPrimary, neutralSecondary = _a5.neutralSecondary, neutralSecondaryAlt = _a5.neutralSecondaryAlt, neutralTertiary = _a5.neutralTertiary, neutralTertiaryAlt = _a5.neutralTertiaryAlt, neutralLighterAlt = _a5.neutralLighterAlt, accent = _a5.accent;
    if (white2) {
      result.bodyBackground = white2;
      result.bodyFrameBackground = white2;
      result.accentButtonText = white2;
      result.buttonBackground = white2;
      result.primaryButtonText = white2;
      result.primaryButtonTextHovered = white2;
      result.primaryButtonTextPressed = white2;
      result.inputBackground = white2;
      result.inputForegroundChecked = white2;
      result.listBackground = white2;
      result.menuBackground = white2;
      result.cardStandoutBackground = white2;
    }
    if (black2) {
      result.bodyTextChecked = black2;
      result.buttonTextCheckedHovered = black2;
    }
    if (themePrimary) {
      result.link = themePrimary;
      result.primaryButtonBackground = themePrimary;
      result.inputBackgroundChecked = themePrimary;
      result.inputIcon = themePrimary;
      result.inputFocusBorderAlt = themePrimary;
      result.menuIcon = themePrimary;
      result.menuHeader = themePrimary;
      result.accentButtonBackground = themePrimary;
    }
    if (themeDark) {
      result.primaryButtonBackgroundPressed = themeDark;
      result.inputBackgroundCheckedHovered = themeDark;
      result.inputIconHovered = themeDark;
    }
    if (themeDarker) {
      result.linkHovered = themeDarker;
    }
    if (themeDarkAlt) {
      result.primaryButtonBackgroundHovered = themeDarkAlt;
    }
    if (themeLighter) {
      result.inputPlaceholderBackgroundChecked = themeLighter;
    }
    if (neutralLight) {
      result.bodyBackgroundChecked = neutralLight;
      result.bodyFrameDivider = neutralLight;
      result.bodyDivider = neutralLight;
      result.variantBorder = neutralLight;
      result.buttonBackgroundCheckedHovered = neutralLight;
      result.buttonBackgroundPressed = neutralLight;
      result.listItemBackgroundChecked = neutralLight;
      result.listHeaderBackgroundPressed = neutralLight;
      result.menuItemBackgroundPressed = neutralLight;
      result.menuItemBackgroundChecked = neutralLight;
    }
    if (neutralLighter) {
      result.bodyBackgroundHovered = neutralLighter;
      result.buttonBackgroundHovered = neutralLighter;
      result.buttonBackgroundDisabled = neutralLighter;
      result.buttonBorderDisabled = neutralLighter;
      result.primaryButtonBackgroundDisabled = neutralLighter;
      result.disabledBackground = neutralLighter;
      result.listItemBackgroundHovered = neutralLighter;
      result.listHeaderBackgroundHovered = neutralLighter;
      result.menuItemBackgroundHovered = neutralLighter;
    }
    if (neutralQuaternary) {
      result.primaryButtonTextDisabled = neutralQuaternary;
      result.disabledSubtext = neutralQuaternary;
    }
    if (neutralQuaternaryAlt) {
      result.listItemBackgroundCheckedHovered = neutralQuaternaryAlt;
    }
    if (neutralTertiary) {
      result.disabledBodyText = neutralTertiary;
      result.variantBorderHovered = (s3 === null || s3 === void 0 ? void 0 : s3.variantBorderHovered) || neutralTertiary;
      result.buttonTextDisabled = neutralTertiary;
      result.inputIconDisabled = neutralTertiary;
      result.disabledText = neutralTertiary;
    }
    if (neutralPrimary) {
      result.bodyText = neutralPrimary;
      result.actionLink = neutralPrimary;
      result.buttonText = neutralPrimary;
      result.inputBorderHovered = neutralPrimary;
      result.inputText = neutralPrimary;
      result.listText = neutralPrimary;
      result.menuItemText = neutralPrimary;
    }
    if (neutralLighterAlt) {
      result.bodyStandoutBackground = neutralLighterAlt;
      result.defaultStateBackground = neutralLighterAlt;
    }
    if (neutralDark) {
      result.actionLinkHovered = neutralDark;
      result.buttonTextHovered = neutralDark;
      result.buttonTextChecked = neutralDark;
      result.buttonTextPressed = neutralDark;
      result.inputTextHovered = neutralDark;
      result.menuItemTextHovered = neutralDark;
    }
    if (neutralSecondary) {
      result.bodySubtext = neutralSecondary;
      result.focusBorder = neutralSecondary;
      result.inputBorder = neutralSecondary;
      result.smallInputBorder = neutralSecondary;
      result.inputPlaceholderText = neutralSecondary;
    }
    if (neutralSecondaryAlt) {
      result.buttonBorder = neutralSecondaryAlt;
    }
    if (neutralTertiaryAlt) {
      result.disabledBodySubtext = neutralTertiaryAlt;
      result.disabledBorder = neutralTertiaryAlt;
      result.buttonBackgroundChecked = neutralTertiaryAlt;
      result.menuDivider = neutralTertiaryAlt;
    }
    if (accent) {
      result.accentButtonBackground = accent;
    }
    if (e3 === null || e3 === void 0 ? void 0 : e3.elevation4) {
      result.cardShadow = e3.elevation4;
    }
    if (!isInverted && (e3 === null || e3 === void 0 ? void 0 : e3.elevation8)) {
      result.cardShadowHovered = e3.elevation8;
    } else if (result.variantBorderHovered) {
      result.cardShadowHovered = "0 0 1px " + result.variantBorderHovered;
    }
    result = __assign(__assign({}, result), s3);
    return result;
  }
  function _fixDeprecatedSlots(s3, depComments) {
    var dep = "";
    if (depComments === true) {
      dep = " /* @deprecated */";
    }
    s3.listTextColor = s3.listText + dep;
    s3.menuItemBackgroundChecked += dep;
    s3.warningHighlight += dep;
    s3.warningText = s3.messageText + dep;
    s3.successText += dep;
    return s3;
  }

  // ../node_modules/@fluentui/theme/lib/mergeThemes.js
  function mergeThemes(theme, partialTheme) {
    var _a5, _b, _c;
    if (partialTheme === void 0) {
      partialTheme = {};
    }
    var mergedTheme = merge({}, theme, partialTheme, {
      semanticColors: getSemanticColors(partialTheme.palette, partialTheme.effects, partialTheme.semanticColors, partialTheme.isInverted === void 0 ? theme.isInverted : partialTheme.isInverted)
    });
    if (((_a5 = partialTheme.palette) === null || _a5 === void 0 ? void 0 : _a5.themePrimary) && !((_b = partialTheme.palette) === null || _b === void 0 ? void 0 : _b.accent)) {
      mergedTheme.palette.accent = partialTheme.palette.themePrimary;
    }
    if (partialTheme.defaultFontStyle) {
      for (var _i = 0, _d = Object.keys(mergedTheme.fonts); _i < _d.length; _i++) {
        var fontStyle = _d[_i];
        mergedTheme.fonts[fontStyle] = merge(mergedTheme.fonts[fontStyle], partialTheme.defaultFontStyle, (_c = partialTheme === null || partialTheme === void 0 ? void 0 : partialTheme.fonts) === null || _c === void 0 ? void 0 : _c[fontStyle]);
      }
    }
    return mergedTheme;
  }

  // ../node_modules/@fluentui/theme/lib/colors/DefaultPalette.js
  var DefaultPalette = {
    themeDarker: "#004578",
    themeDark: "#005a9e",
    themeDarkAlt: "#106ebe",
    themePrimary: "#0078d4",
    themeSecondary: "#2b88d8",
    themeTertiary: "#71afe5",
    themeLight: "#c7e0f4",
    themeLighter: "#deecf9",
    themeLighterAlt: "#eff6fc",
    black: "#000000",
    blackTranslucent40: "rgba(0,0,0,.4)",
    neutralDark: "#201f1e",
    neutralPrimary: "#323130",
    neutralPrimaryAlt: "#3b3a39",
    neutralSecondary: "#605e5c",
    neutralSecondaryAlt: "#8a8886",
    neutralTertiary: "#a19f9d",
    neutralTertiaryAlt: "#c8c6c4",
    neutralQuaternary: "#d2d0ce",
    neutralQuaternaryAlt: "#e1dfdd",
    neutralLight: "#edebe9",
    neutralLighter: "#f3f2f1",
    neutralLighterAlt: "#faf9f8",
    accent: "#0078d4",
    white: "#ffffff",
    whiteTranslucent40: "rgba(255,255,255,.4)",
    yellowDark: "#d29200",
    yellow: "#ffb900",
    yellowLight: "#fff100",
    orange: "#d83b01",
    orangeLight: "#ea4300",
    orangeLighter: "#ff8c00",
    redDark: "#a4262c",
    red: "#e81123",
    magentaDark: "#5c005c",
    magenta: "#b4009e",
    magentaLight: "#e3008c",
    purpleDark: "#32145a",
    purple: "#5c2d91",
    purpleLight: "#b4a0ff",
    blueDark: "#002050",
    blueMid: "#00188f",
    blue: "#0078d4",
    blueLight: "#00bcf2",
    tealDark: "#004b50",
    teal: "#008272",
    tealLight: "#00b294",
    greenDark: "#004b1c",
    green: "#107c10",
    greenLight: "#bad80a"
  };

  // ../node_modules/@fluentui/theme/lib/effects/FluentDepths.js
  var Depths;
  (function(Depths2) {
    Depths2.depth0 = "0 0 0 0 transparent";
    Depths2.depth4 = "0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth8 = "0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth16 = "0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth64 = "0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)";
  })(Depths || (Depths = {}));

  // ../node_modules/@fluentui/theme/lib/effects/DefaultEffects.js
  var DefaultEffects = {
    elevation4: Depths.depth4,
    elevation8: Depths.depth8,
    elevation16: Depths.depth16,
    elevation64: Depths.depth64,
    roundedCorner2: "2px",
    roundedCorner4: "4px",
    roundedCorner6: "6px"
  };

  // ../node_modules/@fluentui/theme/lib/spacing/DefaultSpacing.js
  var DefaultSpacing = {
    s2: "4px",
    s1: "8px",
    m: "16px",
    l1: "20px",
    l2: "32px"
  };

  // ../node_modules/@fluentui/theme/lib/motion/AnimationStyles.js
  var EASING_FUNCTION_1 = "cubic-bezier(.1,.9,.2,1)";
  var EASING_FUNCTION_2 = "cubic-bezier(.1,.25,.75,.9)";
  var DURATION_1 = "0.167s";
  var DURATION_2 = "0.267s";
  var DURATION_3 = "0.367s";
  var DURATION_4 = "0.467s";
  var FADE_IN = keyframes({
    from: { opacity: 0 },
    to: { opacity: 1 }
  });
  var FADE_OUT = keyframes({
    from: { opacity: 1 },
    to: { opacity: 0, visibility: "hidden" }
  });
  var SLIDE_RIGHT_IN10 = _createSlideInX(-10);
  var SLIDE_RIGHT_IN20 = _createSlideInX(-20);
  var SLIDE_RIGHT_IN40 = _createSlideInX(-40);
  var SLIDE_RIGHT_IN400 = _createSlideInX(-400);
  var SLIDE_LEFT_IN10 = _createSlideInX(10);
  var SLIDE_LEFT_IN20 = _createSlideInX(20);
  var SLIDE_LEFT_IN40 = _createSlideInX(40);
  var SLIDE_LEFT_IN400 = _createSlideInX(400);
  var SLIDE_UP_IN10 = _createSlideInY(10);
  var SLIDE_UP_IN20 = _createSlideInY(20);
  var SLIDE_DOWN_IN10 = _createSlideInY(-10);
  var SLIDE_DOWN_IN20 = _createSlideInY(-20);
  var SLIDE_RIGHT_OUT10 = _createSlideOutX(10);
  var SLIDE_RIGHT_OUT20 = _createSlideOutX(20);
  var SLIDE_RIGHT_OUT40 = _createSlideOutX(40);
  var SLIDE_RIGHT_OUT400 = _createSlideOutX(400);
  var SLIDE_LEFT_OUT10 = _createSlideOutX(-10);
  var SLIDE_LEFT_OUT20 = _createSlideOutX(-20);
  var SLIDE_LEFT_OUT40 = _createSlideOutX(-40);
  var SLIDE_LEFT_OUT400 = _createSlideOutX(-400);
  var SLIDE_UP_OUT10 = _createSlideOutY(-10);
  var SLIDE_UP_OUT20 = _createSlideOutY(-20);
  var SLIDE_DOWN_OUT10 = _createSlideOutY(10);
  var SLIDE_DOWN_OUT20 = _createSlideOutY(20);
  var SCALE_UP100 = keyframes({
    from: { transform: "scale3d(.98,.98,1)" },
    to: { transform: "scale3d(1,1,1)" }
  });
  var SCALE_DOWN98 = keyframes({
    from: { transform: "scale3d(1,1,1)" },
    to: { transform: "scale3d(.98,.98,1)" }
  });
  var SCALE_DOWN100 = keyframes({
    from: { transform: "scale3d(1.03,1.03,1)" },
    to: { transform: "scale3d(1,1,1)" }
  });
  var SCALE_UP103 = keyframes({
    from: { transform: "scale3d(1,1,1)" },
    to: { transform: "scale3d(1.03,1.03,1)" }
  });
  var ROTATE90 = keyframes({
    from: { transform: "rotateZ(0deg)" },
    to: { transform: "rotateZ(90deg)" }
  });
  var ROTATE_N90 = keyframes({
    from: { transform: "rotateZ(0deg)" },
    to: { transform: "rotateZ(-90deg)" }
  });
  var AnimationStyles = {
    slideRightIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN10), DURATION_3, EASING_FUNCTION_1),
    slideRightIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN20), DURATION_3, EASING_FUNCTION_1),
    slideRightIn40: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN40), DURATION_3, EASING_FUNCTION_1),
    slideRightIn400: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN400), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN10), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN20), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn40: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN40), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn400: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN400), DURATION_3, EASING_FUNCTION_1),
    slideUpIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_UP_IN10), DURATION_3, EASING_FUNCTION_1),
    slideUpIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_UP_IN20), DURATION_3, EASING_FUNCTION_1),
    slideDownIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_DOWN_IN10), DURATION_3, EASING_FUNCTION_1),
    slideDownIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_DOWN_IN20), DURATION_3, EASING_FUNCTION_1),
    slideRightOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideRightOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT20), DURATION_3, EASING_FUNCTION_1),
    slideRightOut40: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT40), DURATION_3, EASING_FUNCTION_1),
    slideRightOut400: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT400), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT20), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut40: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT40), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut400: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT400), DURATION_3, EASING_FUNCTION_1),
    slideUpOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_UP_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideUpOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_UP_OUT20), DURATION_3, EASING_FUNCTION_1),
    slideDownOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_DOWN_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideDownOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_DOWN_OUT20), DURATION_3, EASING_FUNCTION_1),
    scaleUpIn100: _createAnimation("".concat(FADE_IN, ",").concat(SCALE_UP100), DURATION_3, EASING_FUNCTION_1),
    scaleDownIn100: _createAnimation("".concat(FADE_IN, ",").concat(SCALE_DOWN100), DURATION_3, EASING_FUNCTION_1),
    scaleUpOut103: _createAnimation("".concat(FADE_OUT, ",").concat(SCALE_UP103), DURATION_1, EASING_FUNCTION_2),
    scaleDownOut98: _createAnimation("".concat(FADE_OUT, ",").concat(SCALE_DOWN98), DURATION_1, EASING_FUNCTION_2),
    fadeIn100: _createAnimation(FADE_IN, DURATION_1, EASING_FUNCTION_2),
    fadeIn200: _createAnimation(FADE_IN, DURATION_2, EASING_FUNCTION_2),
    fadeIn400: _createAnimation(FADE_IN, DURATION_3, EASING_FUNCTION_2),
    fadeIn500: _createAnimation(FADE_IN, DURATION_4, EASING_FUNCTION_2),
    fadeOut100: _createAnimation(FADE_OUT, DURATION_1, EASING_FUNCTION_2),
    fadeOut200: _createAnimation(FADE_OUT, DURATION_2, EASING_FUNCTION_2),
    fadeOut400: _createAnimation(FADE_OUT, DURATION_3, EASING_FUNCTION_2),
    fadeOut500: _createAnimation(FADE_OUT, DURATION_4, EASING_FUNCTION_2),
    rotate90deg: _createAnimation(ROTATE90, "0.1s", EASING_FUNCTION_2),
    rotateN90deg: _createAnimation(ROTATE_N90, "0.1s", EASING_FUNCTION_2)
    // expandCollapse 100/200/400, delay 100/200
  };
  function _createAnimation(animationName, animationDuration, animationTimingFunction) {
    return {
      animationName,
      animationDuration,
      animationTimingFunction,
      animationFillMode: "both"
    };
  }
  function _createSlideInX(fromX) {
    return keyframes({
      from: { transform: "translate3d(".concat(fromX, "px,0,0)"), pointerEvents: "none" },
      to: { transform: "translate3d(0,0,0)", pointerEvents: "auto" }
    });
  }
  function _createSlideInY(fromY) {
    return keyframes({
      from: { transform: "translate3d(0,".concat(fromY, "px,0)"), pointerEvents: "none" },
      to: { transform: "translate3d(0,0,0)", pointerEvents: "auto" }
    });
  }
  function _createSlideOutX(toX) {
    return keyframes({
      from: { transform: "translate3d(0,0,0)" },
      to: { transform: "translate3d(".concat(toX, "px,0,0)") }
    });
  }
  function _createSlideOutY(toY) {
    return keyframes({
      from: { transform: "translate3d(0,0,0)" },
      to: { transform: "translate3d(0,".concat(toY, "px,0)") }
    });
  }

  // ../node_modules/@fluentui/theme/lib/fonts/FluentFonts.js
  var LocalizedFontNames;
  (function(LocalizedFontNames2) {
    LocalizedFontNames2.Arabic = "Segoe UI Web (Arabic)";
    LocalizedFontNames2.Cyrillic = "Segoe UI Web (Cyrillic)";
    LocalizedFontNames2.EastEuropean = "Segoe UI Web (East European)";
    LocalizedFontNames2.Greek = "Segoe UI Web (Greek)";
    LocalizedFontNames2.Hebrew = "Segoe UI Web (Hebrew)";
    LocalizedFontNames2.Thai = "Leelawadee UI Web";
    LocalizedFontNames2.Vietnamese = "Segoe UI Web (Vietnamese)";
    LocalizedFontNames2.WestEuropean = "Segoe UI Web (West European)";
    LocalizedFontNames2.Selawik = "Selawik Web";
    LocalizedFontNames2.Armenian = "Segoe UI Web (Armenian)";
    LocalizedFontNames2.Georgian = "Segoe UI Web (Georgian)";
  })(LocalizedFontNames || (LocalizedFontNames = {}));
  var LocalizedFontFamilies;
  (function(LocalizedFontFamilies2) {
    LocalizedFontFamilies2.Arabic = "'".concat(LocalizedFontNames.Arabic, "'");
    LocalizedFontFamilies2.ChineseSimplified = "'Microsoft Yahei UI', Verdana, Simsun";
    LocalizedFontFamilies2.ChineseTraditional = "'Microsoft Jhenghei UI', Pmingliu";
    LocalizedFontFamilies2.Cyrillic = "'".concat(LocalizedFontNames.Cyrillic, "'");
    LocalizedFontFamilies2.EastEuropean = "'".concat(LocalizedFontNames.EastEuropean, "'");
    LocalizedFontFamilies2.Greek = "'".concat(LocalizedFontNames.Greek, "'");
    LocalizedFontFamilies2.Hebrew = "'".concat(LocalizedFontNames.Hebrew, "'");
    LocalizedFontFamilies2.Hindi = "'Nirmala UI'";
    LocalizedFontFamilies2.Japanese = "'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka";
    LocalizedFontFamilies2.Korean = "'Malgun Gothic', Gulim";
    LocalizedFontFamilies2.Selawik = "'".concat(LocalizedFontNames.Selawik, "'");
    LocalizedFontFamilies2.Thai = "'Leelawadee UI Web', 'Kmer UI'";
    LocalizedFontFamilies2.Vietnamese = "'".concat(LocalizedFontNames.Vietnamese, "'");
    LocalizedFontFamilies2.WestEuropean = "'".concat(LocalizedFontNames.WestEuropean, "'");
    LocalizedFontFamilies2.Armenian = "'".concat(LocalizedFontNames.Armenian, "'");
    LocalizedFontFamilies2.Georgian = "'".concat(LocalizedFontNames.Georgian, "'");
  })(LocalizedFontFamilies || (LocalizedFontFamilies = {}));
  var FontSizes;
  (function(FontSizes2) {
    FontSizes2.size10 = "10px";
    FontSizes2.size12 = "12px";
    FontSizes2.size14 = "14px";
    FontSizes2.size16 = "16px";
    FontSizes2.size18 = "18px";
    FontSizes2.size20 = "20px";
    FontSizes2.size24 = "24px";
    FontSizes2.size28 = "28px";
    FontSizes2.size32 = "32px";
    FontSizes2.size42 = "42px";
    FontSizes2.size68 = "68px";
    FontSizes2.mini = "10px";
    FontSizes2.xSmall = "10px";
    FontSizes2.small = "12px";
    FontSizes2.smallPlus = "12px";
    FontSizes2.medium = "14px";
    FontSizes2.mediumPlus = "16px";
    FontSizes2.icon = "16px";
    FontSizes2.large = "18px";
    FontSizes2.xLarge = "20px";
    FontSizes2.xLargePlus = "24px";
    FontSizes2.xxLarge = "28px";
    FontSizes2.xxLargePlus = "32px";
    FontSizes2.superLarge = "42px";
    FontSizes2.mega = "68px";
  })(FontSizes || (FontSizes = {}));
  var FontWeights;
  (function(FontWeights2) {
    FontWeights2.light = 100;
    FontWeights2.semilight = 300;
    FontWeights2.regular = 400;
    FontWeights2.semibold = 600;
    FontWeights2.bold = 700;
  })(FontWeights || (FontWeights = {}));
  var IconFontSizes;
  (function(IconFontSizes2) {
    IconFontSizes2.xSmall = "10px";
    IconFontSizes2.small = "12px";
    IconFontSizes2.medium = "16px";
    IconFontSizes2.large = "20px";
  })(IconFontSizes || (IconFontSizes = {}));

  // ../node_modules/@fluentui/theme/lib/fonts/createFontStyles.js
  var FontFamilyFallbacks = "'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";
  var defaultFontFamily = "'Segoe UI', '".concat(LocalizedFontNames.WestEuropean, "'");
  var LanguageToFontMap = {
    ar: LocalizedFontFamilies.Arabic,
    bg: LocalizedFontFamilies.Cyrillic,
    cs: LocalizedFontFamilies.EastEuropean,
    el: LocalizedFontFamilies.Greek,
    et: LocalizedFontFamilies.EastEuropean,
    he: LocalizedFontFamilies.Hebrew,
    hi: LocalizedFontFamilies.Hindi,
    hr: LocalizedFontFamilies.EastEuropean,
    hu: LocalizedFontFamilies.EastEuropean,
    ja: LocalizedFontFamilies.Japanese,
    kk: LocalizedFontFamilies.EastEuropean,
    ko: LocalizedFontFamilies.Korean,
    lt: LocalizedFontFamilies.EastEuropean,
    lv: LocalizedFontFamilies.EastEuropean,
    pl: LocalizedFontFamilies.EastEuropean,
    ru: LocalizedFontFamilies.Cyrillic,
    sk: LocalizedFontFamilies.EastEuropean,
    "sr-latn": LocalizedFontFamilies.EastEuropean,
    th: LocalizedFontFamilies.Thai,
    tr: LocalizedFontFamilies.EastEuropean,
    uk: LocalizedFontFamilies.Cyrillic,
    vi: LocalizedFontFamilies.Vietnamese,
    "zh-hans": LocalizedFontFamilies.ChineseSimplified,
    "zh-hant": LocalizedFontFamilies.ChineseTraditional,
    hy: LocalizedFontFamilies.Armenian,
    ka: LocalizedFontFamilies.Georgian
  };
  function _fontFamilyWithFallbacks(fontFamily) {
    return "".concat(fontFamily, ", ").concat(FontFamilyFallbacks);
  }
  function _getLocalizedFontFamily(language) {
    for (var lang in LanguageToFontMap) {
      if (LanguageToFontMap.hasOwnProperty(lang) && language && lang.indexOf(language) === 0) {
        return LanguageToFontMap[lang];
      }
    }
    return defaultFontFamily;
  }
  function _createFont(size3, weight, fontFamily) {
    return {
      fontFamily,
      MozOsxFontSmoothing: "grayscale",
      WebkitFontSmoothing: "antialiased",
      fontSize: size3,
      fontWeight: weight
    };
  }
  function createFontStyles(localeCode) {
    var localizedFont = _getLocalizedFontFamily(localeCode);
    var fontFamilyWithFallback = _fontFamilyWithFallbacks(localizedFont);
    var fontStyles = {
      tiny: _createFont(FontSizes.mini, FontWeights.regular, fontFamilyWithFallback),
      xSmall: _createFont(FontSizes.xSmall, FontWeights.regular, fontFamilyWithFallback),
      small: _createFont(FontSizes.small, FontWeights.regular, fontFamilyWithFallback),
      smallPlus: _createFont(FontSizes.smallPlus, FontWeights.regular, fontFamilyWithFallback),
      medium: _createFont(FontSizes.medium, FontWeights.regular, fontFamilyWithFallback),
      mediumPlus: _createFont(FontSizes.mediumPlus, FontWeights.regular, fontFamilyWithFallback),
      large: _createFont(FontSizes.large, FontWeights.regular, fontFamilyWithFallback),
      xLarge: _createFont(FontSizes.xLarge, FontWeights.semibold, fontFamilyWithFallback),
      xLargePlus: _createFont(FontSizes.xLargePlus, FontWeights.semibold, fontFamilyWithFallback),
      xxLarge: _createFont(FontSizes.xxLarge, FontWeights.semibold, fontFamilyWithFallback),
      xxLargePlus: _createFont(FontSizes.xxLargePlus, FontWeights.semibold, fontFamilyWithFallback),
      superLarge: _createFont(FontSizes.superLarge, FontWeights.semibold, fontFamilyWithFallback),
      mega: _createFont(FontSizes.mega, FontWeights.semibold, fontFamilyWithFallback)
    };
    return fontStyles;
  }

  // ../node_modules/@fluentui/theme/lib/fonts/DefaultFontStyles.js
  var DefaultBaseUrl = "https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/assets";
  var DefaultFontStyles = createFontStyles(getLanguage());
  function _registerFontFace(fontFamily, url, fontWeight, localFontName) {
    fontFamily = "'".concat(fontFamily, "'");
    var localFontSrc = localFontName !== void 0 ? "local('".concat(localFontName, "'),") : "";
    fontFace({
      fontFamily,
      src: localFontSrc + "url('".concat(url, ".woff2') format('woff2'),") + "url('".concat(url, ".woff') format('woff')"),
      fontWeight,
      fontStyle: "normal",
      fontDisplay: "swap"
    });
  }
  function _registerFontFaceSet(baseUrl, fontFamily, cdnFolder, cdnFontName, localFontName) {
    if (cdnFontName === void 0) {
      cdnFontName = "segoeui";
    }
    var urlBase = "".concat(baseUrl, "/").concat(cdnFolder, "/").concat(cdnFontName);
    _registerFontFace(fontFamily, urlBase + "-light", FontWeights.light, localFontName && localFontName + " Light");
    _registerFontFace(fontFamily, urlBase + "-semilight", FontWeights.semilight, localFontName && localFontName + " SemiLight");
    _registerFontFace(fontFamily, urlBase + "-regular", FontWeights.regular, localFontName);
    _registerFontFace(fontFamily, urlBase + "-semibold", FontWeights.semibold, localFontName && localFontName + " SemiBold");
    _registerFontFace(fontFamily, urlBase + "-bold", FontWeights.bold, localFontName && localFontName + " Bold");
  }
  function registerDefaultFontFaces(baseUrl) {
    if (baseUrl) {
      var fontUrl = "".concat(baseUrl, "/fonts");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Thai, "leelawadeeui-thai", "leelawadeeui");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Arabic, "segoeui-arabic");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Cyrillic, "segoeui-cyrillic");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.EastEuropean, "segoeui-easteuropean");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Greek, "segoeui-greek");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Hebrew, "segoeui-hebrew");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Vietnamese, "segoeui-vietnamese");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.WestEuropean, "segoeui-westeuropean", "segoeui", "Segoe UI");
      _registerFontFaceSet(fontUrl, LocalizedFontFamilies.Selawik, "selawik", "selawik");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Armenian, "segoeui-armenian");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Georgian, "segoeui-georgian");
      _registerFontFace("Leelawadee UI Web", "".concat(fontUrl, "/leelawadeeui-thai/leelawadeeui-semilight"), FontWeights.light);
      _registerFontFace("Leelawadee UI Web", "".concat(fontUrl, "/leelawadeeui-thai/leelawadeeui-bold"), FontWeights.semibold);
    }
  }
  function _getFontBaseUrl() {
    var _a5, _b;
    var fabricConfig = (_a5 = getWindow2()) === null || _a5 === void 0 ? void 0 : _a5.FabricConfig;
    return (_b = fabricConfig === null || fabricConfig === void 0 ? void 0 : fabricConfig.fontBaseUrl) !== null && _b !== void 0 ? _b : DefaultBaseUrl;
  }
  registerDefaultFontFaces(_getFontBaseUrl());

  // ../node_modules/@fluentui/theme/lib/createTheme.js
  function createTheme(theme, depComments) {
    if (theme === void 0) {
      theme = {};
    }
    if (depComments === void 0) {
      depComments = false;
    }
    var isInverted = !!theme.isInverted;
    var baseTheme = {
      palette: DefaultPalette,
      effects: DefaultEffects,
      fonts: DefaultFontStyles,
      spacing: DefaultSpacing,
      isInverted,
      disableGlobalClassNames: false,
      semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, void 0, isInverted, depComments),
      rtl: void 0
    };
    return mergeThemes(baseTheme, theme);
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/CommonStyles.js
  var HighContrastSelector = "@media screen and (-ms-high-contrast: active), screen and (forced-colors: active)";
  var ScreenWidthMinMedium = 480;
  var ScreenWidthMinLarge = 640;
  var ScreenWidthMinXLarge = 1024;
  var ScreenWidthMinXXLarge = 1366;
  var ScreenWidthMinXXXLarge = 1920;
  var ScreenWidthMaxSmall = ScreenWidthMinMedium - 1;
  var ScreenWidthMaxMedium = ScreenWidthMinLarge - 1;
  var ScreenWidthMaxLarge = ScreenWidthMinXLarge - 1;
  var ScreenWidthMaxXLarge = ScreenWidthMinXXLarge - 1;
  var ScreenWidthMaxXXLarge = ScreenWidthMinXXXLarge - 1;
  function getScreenSelector(min2, max2) {
    var minSelector = typeof min2 === "number" ? " and (min-width: ".concat(min2, "px)") : "";
    var maxSelector = typeof max2 === "number" ? " and (max-width: ".concat(max2, "px)") : "";
    return "@media only screen".concat(minSelector).concat(maxSelector);
  }
  function getHighContrastNoAdjustStyle() {
    return {
      forcedColorAdjust: "none",
      MsHighContrastAdjust: "none"
    };
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/zIndexes.js
  var ZIndexes;
  (function(ZIndexes2) {
    ZIndexes2.Nav = 1;
    ZIndexes2.ScrollablePane = 1;
    ZIndexes2.FocusStyle = 1;
    ZIndexes2.Coachmark = 1e3;
    ZIndexes2.Layer = 1e6;
    ZIndexes2.KeytipLayer = 1000001;
  })(ZIndexes || (ZIndexes = {}));

  // ../node_modules/@fluentui/style-utilities/lib/styles/getFocusStyle.js
  function getFocusStyle(theme, insetOrOptions, position4, highContrastStyle, borderColor3, outlineColor, isFocusedOnly, borderRadius4) {
    if (typeof insetOrOptions === "number" || !insetOrOptions) {
      return _getFocusStyleInternal(theme, {
        inset: insetOrOptions,
        position: position4,
        highContrastStyle,
        borderColor: borderColor3,
        outlineColor,
        isFocusedOnly,
        borderRadius: borderRadius4
      });
    } else {
      return _getFocusStyleInternal(theme, insetOrOptions);
    }
  }
  function _getFocusStyleInternal(theme, options) {
    var _a5, _b;
    if (options === void 0) {
      options = {};
    }
    var borderRadius4 = options.borderRadius, _c = options.inset, inset2 = _c === void 0 ? 0 : _c, _d = options.width, width = _d === void 0 ? 1 : _d, _e = options.position, position4 = _e === void 0 ? "relative" : _e, highContrastStyle = options.highContrastStyle, _f = options.borderColor, borderColor3 = _f === void 0 ? theme.palette.white : _f, _g = options.outlineColor, outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g, _h = options.isFocusedOnly, isFocusedOnly = _h === void 0 ? true : _h, pointerEvents = options.pointerEvents;
    return {
      // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.
      outline: "transparent",
      // Requirement because pseudo-element is absolutely positioned.
      position: position4,
      selectors: (_a5 = {
        // Clear the focus border in Firefox.
        // Reference: http://stackoverflow.com/a/199319/1436671
        "::-moz-focus-inner": {
          border: "0"
        }
      }, // When the element that uses this mixin is in a :focus state, add a pseudo-element to
      // create a border.
      _a5[".".concat(IsFocusVisibleClassName, " &").concat(isFocusedOnly ? ":focus" : "", ":after")] = {
        content: '""',
        position: "absolute",
        pointerEvents,
        left: inset2 + 1,
        top: inset2 + 1,
        bottom: inset2 + 1,
        right: inset2 + 1,
        border: "".concat(width, "px solid ").concat(borderColor3),
        outline: "".concat(width, "px solid ").concat(outlineColor),
        zIndex: ZIndexes.FocusStyle,
        borderRadius: borderRadius4,
        selectors: (_b = {}, _b[HighContrastSelector] = highContrastStyle, _b)
      }, _a5)
    };
  }
  function focusClear() {
    return {
      selectors: {
        "&::-moz-focus-inner": {
          // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671
          border: 0
        },
        "&": {
          // Clear browser specific focus styles and use transparent as placeholder for focus style
          outline: "transparent"
        }
      }
    };
  }
  var getInputFocusStyle = function(borderColor3, borderRadius4, borderType, borderPosition) {
    var _a5, _b, _c;
    if (borderType === void 0) {
      borderType = "border";
    }
    if (borderPosition === void 0) {
      borderPosition = -1;
    }
    var isBorderBottom = borderType === "borderBottom";
    return {
      borderColor: borderColor3,
      selectors: {
        ":after": (_a5 = {
          pointerEvents: "none",
          content: "''",
          position: "absolute",
          left: isBorderBottom ? 0 : borderPosition,
          top: borderPosition,
          bottom: borderPosition,
          right: isBorderBottom ? 0 : borderPosition
        }, _a5[borderType] = "2px solid ".concat(borderColor3), _a5.borderRadius = borderRadius4, _a5.width = borderType === "borderBottom" ? "100%" : void 0, _a5.selectors = (_b = {}, _b[HighContrastSelector] = (_c = {}, _c[borderType === "border" ? "borderColor" : "borderBottomColor"] = "Highlight", _c), _b), _a5)
      }
    };
  };

  // ../node_modules/@fluentui/style-utilities/lib/styles/hiddenContentStyle.js
  var hiddenContentStyle = {
    position: "absolute",
    width: 1,
    height: 1,
    margin: -1,
    padding: 0,
    border: 0,
    overflow: "hidden",
    whiteSpace: "nowrap"
  };

  // ../node_modules/@fluentui/style-utilities/lib/styles/getGlobalClassNames.js
  var _getGlobalClassNames = memoizeFunction(function(classNames2, disableGlobalClassNames) {
    var styleSheet = Stylesheet.getInstance();
    if (disableGlobalClassNames) {
      return Object.keys(classNames2).reduce(function(acc, className) {
        acc[className] = styleSheet.getClassName(classNames2[className]);
        return acc;
      }, {});
    }
    return classNames2;
  });
  function getGlobalClassNames(classNames2, theme, disableGlobalClassNames) {
    return _getGlobalClassNames(classNames2, disableGlobalClassNames !== void 0 ? disableGlobalClassNames : theme.disableGlobalClassNames);
  }

  // ../node_modules/@microsoft/load-themed-styles/lib-es6/index.js
  var __assign2 = function() {
    __assign2 = Object.assign || function(t4) {
      for (var s3, i4 = 1, n6 = arguments.length; i4 < n6; i4++) {
        s3 = arguments[i4];
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3))
            t4[p3] = s3[p3];
      }
      return t4;
    };
    return __assign2.apply(this, arguments);
  };
  var _root = typeof window === "undefined" ? window : window;
  var _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;
  var _themeState = initializeThemeState();
  function initializeThemeState() {
    var state = _root.__themeState__ || {
      theme: void 0,
      lastStyleElement: void 0,
      registeredStyles: []
    };
    if (!state.runState) {
      state = __assign2(__assign2({}, state), { perf: {
        count: 0,
        duration: 0
      }, runState: {
        flushTimer: 0,
        mode: 0,
        buffer: []
      } });
    }
    if (!state.registeredThemableStyles) {
      state = __assign2(__assign2({}, state), { registeredThemableStyles: [] });
    }
    _root.__themeState__ = state;
    return state;
  }
  function applyThemableStyles(stylesArray, styleRecord) {
    if (_themeState.loadStyles) {
      _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);
    } else {
      registerStyles(stylesArray);
    }
  }
  function loadTheme(theme) {
    _themeState.theme = theme;
    reloadStyles();
  }
  function clearStyles(option) {
    if (option === void 0) {
      option = 3;
    }
    if (option === 3 || option === 2) {
      clearStylesInternal(_themeState.registeredStyles);
      _themeState.registeredStyles = [];
    }
    if (option === 3 || option === 1) {
      clearStylesInternal(_themeState.registeredThemableStyles);
      _themeState.registeredThemableStyles = [];
    }
  }
  function clearStylesInternal(records) {
    records.forEach(function(styleRecord) {
      var styleElement = styleRecord && styleRecord.styleElement;
      if (styleElement && styleElement.parentElement) {
        styleElement.parentElement.removeChild(styleElement);
      }
    });
  }
  function reloadStyles() {
    if (_themeState.theme) {
      var themableStyles = [];
      for (var _i = 0, _a5 = _themeState.registeredThemableStyles; _i < _a5.length; _i++) {
        var styleRecord = _a5[_i];
        themableStyles.push(styleRecord.themableStyle);
      }
      if (themableStyles.length > 0) {
        clearStyles(
          1
          /* ClearStyleOptions.onlyThemable */
        );
        applyThemableStyles([].concat.apply([], themableStyles));
      }
    }
  }
  function resolveThemableArray(splitStyleArray) {
    var theme = _themeState.theme;
    var themable = false;
    var resolvedArray = (splitStyleArray || []).map(function(currentValue) {
      var themeSlot = currentValue.theme;
      if (themeSlot) {
        themable = true;
        var themedValue = theme ? theme[themeSlot] : void 0;
        var defaultValue = currentValue.defaultValue || "inherit";
        if (theme && !themedValue && console && !(themeSlot in theme) && typeof DEBUG !== "undefined" && DEBUG) {
          console.warn('Theming value not provided for "'.concat(themeSlot, '". Falling back to "').concat(defaultValue, '".'));
        }
        return themedValue || defaultValue;
      } else {
        return currentValue.rawString;
      }
    });
    return {
      styleString: resolvedArray.join(""),
      themable
    };
  }
  function registerStyles(styleArray) {
    if (typeof document === "undefined") {
      return;
    }
    var head = document.getElementsByTagName("head")[0];
    var styleElement = document.createElement("style");
    var _a5 = resolveThemableArray(styleArray), styleString = _a5.styleString, themable = _a5.themable;
    styleElement.setAttribute("data-load-themed-styles", "true");
    if (_styleNonce) {
      styleElement.setAttribute("nonce", _styleNonce);
    }
    styleElement.appendChild(document.createTextNode(styleString));
    _themeState.perf.count++;
    head.appendChild(styleElement);
    var ev = document.createEvent("HTMLEvents");
    ev.initEvent(
      "styleinsert",
      true,
      false
      /* cancelable */
    );
    ev.args = {
      newStyle: styleElement
    };
    document.dispatchEvent(ev);
    var record = {
      styleElement,
      themableStyle: styleArray
    };
    if (themable) {
      _themeState.registeredThemableStyles.push(record);
    } else {
      _themeState.registeredStyles.push(record);
    }
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/theme.js
  var _theme = createTheme({});
  var _onThemeChangeCallbacks = [];
  var ThemeSettingName = "theme";
  function initializeThemeInCustomizations() {
    var _a5;
    var _b, _c;
    var win2 = getWindow2();
    if ((_b = win2 === null || win2 === void 0 ? void 0 : win2.FabricConfig) === null || _b === void 0 ? void 0 : _b.legacyTheme) {
      loadTheme2(win2.FabricConfig.legacyTheme);
    } else if (!Customizations.getSettings([ThemeSettingName]).theme) {
      if ((_c = win2 === null || win2 === void 0 ? void 0 : win2.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {
        _theme = createTheme(win2.FabricConfig.theme);
      }
      Customizations.applySettings((_a5 = {}, _a5[ThemeSettingName] = _theme, _a5));
    }
  }
  initializeThemeInCustomizations();
  function getTheme(depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    if (depComments === true) {
      _theme = createTheme({}, depComments);
    }
    return _theme;
  }
  function loadTheme2(theme, depComments) {
    var _a5;
    if (depComments === void 0) {
      depComments = false;
    }
    _theme = createTheme(theme, depComments);
    loadTheme(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));
    Customizations.applySettings((_a5 = {}, _a5[ThemeSettingName] = _theme, _a5));
    _onThemeChangeCallbacks.forEach(function(callback) {
      try {
        callback(_theme);
      } catch (e3) {
      }
    });
    return _theme;
  }
  function _loadFonts(theme) {
    var lines = {};
    for (var _i = 0, _a5 = Object.keys(theme.fonts); _i < _a5.length; _i++) {
      var fontName = _a5[_i];
      var font = theme.fonts[fontName];
      for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {
        var propName = _c[_b];
        var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);
        var value = font[propName];
        if (propName === "fontSize" && typeof value === "number") {
          value = value + "px";
        }
        lines[name_1] = value;
      }
    }
    return lines;
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/GeneralStyles.js
  var normalize2 = {
    boxShadow: "none",
    margin: 0,
    padding: 0,
    boxSizing: "border-box"
  };

  // ../node_modules/@fluentui/style-utilities/lib/styles/getPlaceholderStyles.js
  function getPlaceholderStyles(styles4) {
    return {
      selectors: {
        "::placeholder": styles4,
        ":-ms-input-placeholder": styles4,
        "::-ms-input-placeholder": styles4
        // Edge
      }
    };
  }

  // ../node_modules/@fluentui/style-utilities/lib/classNames/AnimationClassNames.js
  var AnimationClassNames = buildClassMap(AnimationStyles);

  // ../node_modules/@fluentui/style-utilities/lib/cdn.js
  var FLUENT_CDN_BASE_URL = "https://res.cdn.office.net/files/fabric-cdn-prod_20230815.002";

  // ../node_modules/@fluentui/style-utilities/lib/version.js
  setVersion("@fluentui/style-utilities", "8.9.17");

  // ../node_modules/@fluentui/style-utilities/lib/index.js
  initializeThemeInCustomizations();

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons.js
  function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons"',
        src: "url('".concat(baseUrl, "fabric-icons-a13498cf.woff') format('woff')")
      },
      icons: {
        GlobalNavButton: "\uE700",
        ChevronDown: "\uE70D",
        ChevronUp: "\uE70E",
        Edit: "\uE70F",
        Add: "\uE710",
        Cancel: "\uE711",
        More: "\uE712",
        Settings: "\uE713",
        Mail: "\uE715",
        Filter: "\uE71C",
        Search: "\uE721",
        Share: "\uE72D",
        BlockedSite: "\uE72F",
        FavoriteStar: "\uE734",
        FavoriteStarFill: "\uE735",
        CheckMark: "\uE73E",
        Delete: "\uE74D",
        ChevronLeft: "\uE76B",
        ChevronRight: "\uE76C",
        Calendar: "\uE787",
        Megaphone: "\uE789",
        Undo: "\uE7A7",
        Flag: "\uE7C1",
        Page: "\uE7C3",
        Pinned: "\uE840",
        View: "\uE890",
        Clear: "\uE894",
        Download: "\uE896",
        Upload: "\uE898",
        Folder: "\uE8B7",
        Sort: "\uE8CB",
        AlignRight: "\uE8E2",
        AlignLeft: "\uE8E4",
        Tag: "\uE8EC",
        AddFriend: "\uE8FA",
        Info: "\uE946",
        SortLines: "\uE9D0",
        List: "\uEA37",
        CircleRing: "\uEA3A",
        Heart: "\uEB51",
        HeartFill: "\uEB52",
        Tiles: "\uECA5",
        Embed: "\uECCE",
        Glimmer: "\uECF4",
        Ascending: "\uEDC0",
        Descending: "\uEDC1",
        SortUp: "\uEE68",
        SortDown: "\uEE69",
        SyncToPC: "\uEE6E",
        LargeGrid: "\uEECB",
        SkypeCheck: "\uEF80",
        SkypeClock: "\uEF81",
        SkypeMinus: "\uEF82",
        ClearFilter: "\uEF8F",
        Flow: "\uEF90",
        StatusCircleCheckmark: "\uF13E",
        MoreVertical: "\uF2BC"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-0.js
  function initializeIcons2(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-0"',
        src: "url('".concat(baseUrl, "fabric-icons-0-467ee27f.woff') format('woff')")
      },
      icons: {
        "PageLink": "\uE302",
        "CommentSolid": "\uE30E",
        "ChangeEntitlements": "\uE310",
        "Installation": "\uE311",
        "WebAppBuilderModule": "\uE313",
        "WebAppBuilderFragment": "\uE314",
        "WebAppBuilderSlot": "\uE315",
        "BullseyeTargetEdit": "\uE319",
        "WebAppBuilderFragmentCreate": "\uE31B",
        "PageData": "\uE31C",
        "PageHeaderEdit": "\uE31D",
        "ProductList": "\uE31E",
        "UnpublishContent": "\uE31F",
        "DependencyAdd": "\uE344",
        "DependencyRemove": "\uE345",
        "EntitlementPolicy": "\uE346",
        "EntitlementRedemption": "\uE347",
        "SchoolDataSyncLogo": "\uE34C",
        "PinSolid12": "\uE352",
        "PinSolidOff12": "\uE353",
        "AddLink": "\uE35E",
        "SharepointAppIcon16": "\uE365",
        "DataflowsLink": "\uE366",
        "TimePicker": "\uE367",
        "UserWarning": "\uE368",
        "ComplianceAudit": "\uE369",
        "InternetSharing": "\uE704",
        "Brightness": "\uE706",
        "MapPin": "\uE707",
        "Airplane": "\uE709",
        "Tablet": "\uE70A",
        "QuickNote": "\uE70B",
        "Video": "\uE714",
        "People": "\uE716",
        "Phone": "\uE717",
        "Pin": "\uE718",
        "Shop": "\uE719",
        "Stop": "\uE71A",
        "Link": "\uE71B",
        "AllApps": "\uE71D",
        "Zoom": "\uE71E",
        "ZoomOut": "\uE71F",
        "Microphone": "\uE720",
        "Camera": "\uE722",
        "Attach": "\uE723",
        "Send": "\uE724",
        "FavoriteList": "\uE728",
        "PageSolid": "\uE729",
        "Forward": "\uE72A",
        "Back": "\uE72B",
        "Refresh": "\uE72C",
        "Lock": "\uE72E",
        "ReportHacked": "\uE730",
        "EMI": "\uE731",
        "MiniLink": "\uE732",
        "Blocked": "\uE733",
        "ReadingMode": "\uE736",
        "Favicon": "\uE737",
        "Remove": "\uE738",
        "Checkbox": "\uE739",
        "CheckboxComposite": "\uE73A",
        "CheckboxFill": "\uE73B",
        "CheckboxIndeterminate": "\uE73C",
        "CheckboxCompositeReversed": "\uE73D",
        "BackToWindow": "\uE73F",
        "FullScreen": "\uE740",
        "Print": "\uE749",
        "Up": "\uE74A",
        "Down": "\uE74B",
        "OEM": "\uE74C",
        "Save": "\uE74E",
        "ReturnKey": "\uE751",
        "Cloud": "\uE753",
        "Flashlight": "\uE754",
        "CommandPrompt": "\uE756",
        "Sad": "\uE757",
        "RealEstate": "\uE758",
        "SIPMove": "\uE759",
        "EraseTool": "\uE75C",
        "GripperTool": "\uE75E",
        "Dialpad": "\uE75F",
        "PageLeft": "\uE760",
        "PageRight": "\uE761",
        "MultiSelect": "\uE762",
        "KeyboardClassic": "\uE765",
        "Play": "\uE768",
        "Pause": "\uE769",
        "InkingTool": "\uE76D",
        "Emoji2": "\uE76E",
        "GripperBarHorizontal": "\uE76F",
        "System": "\uE770",
        "Personalize": "\uE771",
        "SearchAndApps": "\uE773",
        "Globe": "\uE774",
        "EaseOfAccess": "\uE776",
        "ContactInfo": "\uE779",
        "Unpin": "\uE77A",
        "Contact": "\uE77B",
        "Memo": "\uE77C",
        "IncomingCall": "\uE77E"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-1.js
  function initializeIcons3(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-1"',
        src: "url('".concat(baseUrl, "fabric-icons-1-4d521695.woff') format('woff')")
      },
      icons: {
        "Paste": "\uE77F",
        "WindowsLogo": "\uE782",
        "Error": "\uE783",
        "GripperBarVertical": "\uE784",
        "Unlock": "\uE785",
        "Slideshow": "\uE786",
        "Trim": "\uE78A",
        "AutoEnhanceOn": "\uE78D",
        "AutoEnhanceOff": "\uE78E",
        "Color": "\uE790",
        "SaveAs": "\uE792",
        "Light": "\uE793",
        "Filters": "\uE795",
        "AspectRatio": "\uE799",
        "Contrast": "\uE7A1",
        "Redo": "\uE7A6",
        "Crop": "\uE7A8",
        "PhotoCollection": "\uE7AA",
        "Album": "\uE7AB",
        "Rotate": "\uE7AD",
        "PanoIndicator": "\uE7B0",
        "Translate": "\uE7B2",
        "RedEye": "\uE7B3",
        "ViewOriginal": "\uE7B4",
        "ThumbnailView": "\uE7B6",
        "Package": "\uE7B8",
        "Telemarketer": "\uE7B9",
        "Warning": "\uE7BA",
        "Financial": "\uE7BB",
        "Education": "\uE7BE",
        "ShoppingCart": "\uE7BF",
        "Train": "\uE7C0",
        "Move": "\uE7C2",
        "TouchPointer": "\uE7C9",
        "Merge": "\uE7D5",
        "TurnRight": "\uE7DB",
        "Ferry": "\uE7E3",
        "Highlight": "\uE7E6",
        "PowerButton": "\uE7E8",
        "Tab": "\uE7E9",
        "Admin": "\uE7EF",
        "TVMonitor": "\uE7F4",
        "Speakers": "\uE7F5",
        "Game": "\uE7FC",
        "HorizontalTabKey": "\uE7FD",
        "UnstackSelected": "\uE7FE",
        "StackIndicator": "\uE7FF",
        "Nav2DMapView": "\uE800",
        "StreetsideSplitMinimize": "\uE802",
        "Car": "\uE804",
        "Bus": "\uE806",
        "EatDrink": "\uE807",
        "SeeDo": "\uE808",
        "LocationCircle": "\uE80E",
        "Home": "\uE80F",
        "SwitcherStartEnd": "\uE810",
        "ParkingLocation": "\uE811",
        "IncidentTriangle": "\uE814",
        "Touch": "\uE815",
        "MapDirections": "\uE816",
        "CaretHollow": "\uE817",
        "CaretSolid": "\uE818",
        "History": "\uE81C",
        "Location": "\uE81D",
        "MapLayers": "\uE81E",
        "SearchNearby": "\uE820",
        "Work": "\uE821",
        "Recent": "\uE823",
        "Hotel": "\uE824",
        "Bank": "\uE825",
        "LocationDot": "\uE827",
        "Dictionary": "\uE82D",
        "ChromeBack": "\uE830",
        "FolderOpen": "\uE838",
        "PinnedFill": "\uE842",
        "RevToggleKey": "\uE845",
        "USB": "\uE88E",
        "Previous": "\uE892",
        "Next": "\uE893",
        "Sync": "\uE895",
        "Help": "\uE897",
        "Emoji": "\uE899",
        "MailForward": "\uE89C",
        "ClosePane": "\uE89F",
        "OpenPane": "\uE8A0",
        "PreviewLink": "\uE8A1",
        "ZoomIn": "\uE8A3",
        "Bookmarks": "\uE8A4",
        "Document": "\uE8A5",
        "ProtectedDocument": "\uE8A6",
        "OpenInNewWindow": "\uE8A7",
        "MailFill": "\uE8A8",
        "ViewAll": "\uE8A9",
        "Switch": "\uE8AB",
        "Rename": "\uE8AC",
        "Go": "\uE8AD",
        "Remote": "\uE8AF",
        "SelectAll": "\uE8B3",
        "Orientation": "\uE8B4",
        "Import": "\uE8B5"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-2.js
  function initializeIcons4(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-2"',
        src: "url('".concat(baseUrl, "fabric-icons-2-63c99abf.woff') format('woff')")
      },
      icons: {
        "Picture": "\uE8B9",
        "ChromeClose": "\uE8BB",
        "ShowResults": "\uE8BC",
        "Message": "\uE8BD",
        "CalendarDay": "\uE8BF",
        "CalendarWeek": "\uE8C0",
        "MailReplyAll": "\uE8C2",
        "Read": "\uE8C3",
        "Cut": "\uE8C6",
        "PaymentCard": "\uE8C7",
        "Copy": "\uE8C8",
        "Important": "\uE8C9",
        "MailReply": "\uE8CA",
        "GotoToday": "\uE8D1",
        "Font": "\uE8D2",
        "FontColor": "\uE8D3",
        "FolderFill": "\uE8D5",
        "Permissions": "\uE8D7",
        "DisableUpdates": "\uE8D8",
        "Unfavorite": "\uE8D9",
        "Italic": "\uE8DB",
        "Underline": "\uE8DC",
        "Bold": "\uE8DD",
        "MoveToFolder": "\uE8DE",
        "Dislike": "\uE8E0",
        "Like": "\uE8E1",
        "AlignCenter": "\uE8E3",
        "OpenFile": "\uE8E5",
        "ClearSelection": "\uE8E6",
        "FontDecrease": "\uE8E7",
        "FontIncrease": "\uE8E8",
        "FontSize": "\uE8E9",
        "CellPhone": "\uE8EA",
        "RepeatOne": "\uE8ED",
        "RepeatAll": "\uE8EE",
        "Calculator": "\uE8EF",
        "Library": "\uE8F1",
        "PostUpdate": "\uE8F3",
        "NewFolder": "\uE8F4",
        "CalendarReply": "\uE8F5",
        "UnsyncFolder": "\uE8F6",
        "SyncFolder": "\uE8F7",
        "BlockContact": "\uE8F8",
        "Accept": "\uE8FB",
        "BulletedList": "\uE8FD",
        "Preview": "\uE8FF",
        "News": "\uE900",
        "Chat": "\uE901",
        "Group": "\uE902",
        "World": "\uE909",
        "Comment": "\uE90A",
        "DockLeft": "\uE90C",
        "DockRight": "\uE90D",
        "Repair": "\uE90F",
        "Accounts": "\uE910",
        "Street": "\uE913",
        "RadioBullet": "\uE915",
        "Stopwatch": "\uE916",
        "Clock": "\uE917",
        "WorldClock": "\uE918",
        "AlarmClock": "\uE919",
        "Photo": "\uE91B",
        "ActionCenter": "\uE91C",
        "Hospital": "\uE91D",
        "Timer": "\uE91E",
        "FullCircleMask": "\uE91F",
        "LocationFill": "\uE920",
        "ChromeMinimize": "\uE921",
        "ChromeRestore": "\uE923",
        "Annotation": "\uE924",
        "Fingerprint": "\uE928",
        "Handwriting": "\uE929",
        "ChromeFullScreen": "\uE92D",
        "Completed": "\uE930",
        "Label": "\uE932",
        "FlickDown": "\uE935",
        "FlickUp": "\uE936",
        "FlickLeft": "\uE937",
        "FlickRight": "\uE938",
        "MiniExpand": "\uE93A",
        "MiniContract": "\uE93B",
        "Streaming": "\uE93E",
        "MusicInCollection": "\uE940",
        "OneDriveLogo": "\uE941",
        "CompassNW": "\uE942",
        "Code": "\uE943",
        "LightningBolt": "\uE945",
        "CalculatorMultiply": "\uE947",
        "CalculatorAddition": "\uE948",
        "CalculatorSubtract": "\uE949",
        "CalculatorPercentage": "\uE94C",
        "CalculatorEqualTo": "\uE94E",
        "PrintfaxPrinterFile": "\uE956",
        "StorageOptical": "\uE958",
        "Communications": "\uE95A",
        "Headset": "\uE95B",
        "Health": "\uE95E",
        "Webcam2": "\uE960",
        "FrontCamera": "\uE96B",
        "ChevronUpSmall": "\uE96D"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-3.js
  function initializeIcons5(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-3"',
        src: "url('".concat(baseUrl, "fabric-icons-3-089e217a.woff') format('woff')")
      },
      icons: {
        "ChevronDownSmall": "\uE96E",
        "ChevronLeftSmall": "\uE96F",
        "ChevronRightSmall": "\uE970",
        "ChevronUpMed": "\uE971",
        "ChevronDownMed": "\uE972",
        "ChevronLeftMed": "\uE973",
        "ChevronRightMed": "\uE974",
        "Devices2": "\uE975",
        "PC1": "\uE977",
        "PresenceChickletVideo": "\uE979",
        "Reply": "\uE97A",
        "HalfAlpha": "\uE97E",
        "ConstructionCone": "\uE98F",
        "DoubleChevronLeftMed": "\uE991",
        "Volume0": "\uE992",
        "Volume1": "\uE993",
        "Volume2": "\uE994",
        "Volume3": "\uE995",
        "Chart": "\uE999",
        "Robot": "\uE99A",
        "Manufacturing": "\uE99C",
        "LockSolid": "\uE9A2",
        "FitPage": "\uE9A6",
        "FitWidth": "\uE9A7",
        "BidiLtr": "\uE9AA",
        "BidiRtl": "\uE9AB",
        "RightDoubleQuote": "\uE9B1",
        "Sunny": "\uE9BD",
        "CloudWeather": "\uE9BE",
        "Cloudy": "\uE9BF",
        "PartlyCloudyDay": "\uE9C0",
        "PartlyCloudyNight": "\uE9C1",
        "ClearNight": "\uE9C2",
        "RainShowersDay": "\uE9C3",
        "Rain": "\uE9C4",
        "Thunderstorms": "\uE9C6",
        "RainSnow": "\uE9C7",
        "Snow": "\uE9C8",
        "BlowingSnow": "\uE9C9",
        "Frigid": "\uE9CA",
        "Fog": "\uE9CB",
        "Squalls": "\uE9CC",
        "Duststorm": "\uE9CD",
        "Unknown": "\uE9CE",
        "Precipitation": "\uE9CF",
        "Ribbon": "\uE9D1",
        "AreaChart": "\uE9D2",
        "Assign": "\uE9D3",
        "FlowChart": "\uE9D4",
        "CheckList": "\uE9D5",
        "Diagnostic": "\uE9D9",
        "Generate": "\uE9DA",
        "LineChart": "\uE9E6",
        "Equalizer": "\uE9E9",
        "BarChartHorizontal": "\uE9EB",
        "BarChartVertical": "\uE9EC",
        "Freezing": "\uE9EF",
        "FunnelChart": "\uE9F1",
        "Processing": "\uE9F5",
        "Quantity": "\uE9F8",
        "ReportDocument": "\uE9F9",
        "StackColumnChart": "\uE9FC",
        "SnowShowerDay": "\uE9FD",
        "HailDay": "\uEA00",
        "WorkFlow": "\uEA01",
        "HourGlass": "\uEA03",
        "StoreLogoMed20": "\uEA04",
        "TimeSheet": "\uEA05",
        "TriangleSolid": "\uEA08",
        "UpgradeAnalysis": "\uEA0B",
        "VideoSolid": "\uEA0C",
        "RainShowersNight": "\uEA0F",
        "SnowShowerNight": "\uEA11",
        "Teamwork": "\uEA12",
        "HailNight": "\uEA13",
        "PeopleAdd": "\uEA15",
        "Glasses": "\uEA16",
        "DateTime2": "\uEA17",
        "Shield": "\uEA18",
        "Header1": "\uEA19",
        "PageAdd": "\uEA1A",
        "NumberedList": "\uEA1C",
        "PowerBILogo": "\uEA1E",
        "Info2": "\uEA1F",
        "MusicInCollectionFill": "\uEA36",
        "Asterisk": "\uEA38",
        "ErrorBadge": "\uEA39",
        "CircleFill": "\uEA3B",
        "Record2": "\uEA3F",
        "AllAppsMirrored": "\uEA40",
        "BookmarksMirrored": "\uEA41",
        "BulletedListMirrored": "\uEA42",
        "CaretHollowMirrored": "\uEA45",
        "CaretSolidMirrored": "\uEA46",
        "ChromeBackMirrored": "\uEA47",
        "ClearSelectionMirrored": "\uEA48",
        "ClosePaneMirrored": "\uEA49",
        "DockLeftMirrored": "\uEA4C",
        "DoubleChevronLeftMedMirrored": "\uEA4D",
        "GoMirrored": "\uEA4F"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-4.js
  function initializeIcons6(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-4"',
        src: "url('".concat(baseUrl, "fabric-icons-4-a656cc0a.woff') format('woff')")
      },
      icons: {
        "HelpMirrored": "\uEA51",
        "ImportMirrored": "\uEA52",
        "ImportAllMirrored": "\uEA53",
        "ListMirrored": "\uEA55",
        "MailForwardMirrored": "\uEA56",
        "MailReplyMirrored": "\uEA57",
        "MailReplyAllMirrored": "\uEA58",
        "MiniContractMirrored": "\uEA59",
        "MiniExpandMirrored": "\uEA5A",
        "OpenPaneMirrored": "\uEA5B",
        "ParkingLocationMirrored": "\uEA5E",
        "SendMirrored": "\uEA63",
        "ShowResultsMirrored": "\uEA65",
        "ThumbnailViewMirrored": "\uEA67",
        "Media": "\uEA69",
        "Devices3": "\uEA6C",
        "Focus": "\uEA6F",
        "VideoLightOff": "\uEA74",
        "Lightbulb": "\uEA80",
        "StatusTriangle": "\uEA82",
        "VolumeDisabled": "\uEA85",
        "Puzzle": "\uEA86",
        "EmojiNeutral": "\uEA87",
        "EmojiDisappointed": "\uEA88",
        "HomeSolid": "\uEA8A",
        "Ringer": "\uEA8F",
        "PDF": "\uEA90",
        "HeartBroken": "\uEA92",
        "StoreLogo16": "\uEA96",
        "MultiSelectMirrored": "\uEA98",
        "Broom": "\uEA99",
        "AddToShoppingList": "\uEA9A",
        "Cocktails": "\uEA9D",
        "Wines": "\uEABF",
        "Articles": "\uEAC1",
        "Cycling": "\uEAC7",
        "DietPlanNotebook": "\uEAC8",
        "Pill": "\uEACB",
        "ExerciseTracker": "\uEACC",
        "HandsFree": "\uEAD0",
        "Medical": "\uEAD4",
        "Running": "\uEADA",
        "Weights": "\uEADB",
        "Trackers": "\uEADF",
        "AddNotes": "\uEAE3",
        "AllCurrency": "\uEAE4",
        "BarChart4": "\uEAE7",
        "CirclePlus": "\uEAEE",
        "Coffee": "\uEAEF",
        "Cotton": "\uEAF3",
        "Market": "\uEAFC",
        "Money": "\uEAFD",
        "PieDouble": "\uEB04",
        "PieSingle": "\uEB05",
        "RemoveFilter": "\uEB08",
        "Savings": "\uEB0B",
        "Sell": "\uEB0C",
        "StockDown": "\uEB0F",
        "StockUp": "\uEB11",
        "Lamp": "\uEB19",
        "Source": "\uEB1B",
        "MSNVideos": "\uEB1C",
        "Cricket": "\uEB1E",
        "Golf": "\uEB1F",
        "Baseball": "\uEB20",
        "Soccer": "\uEB21",
        "MoreSports": "\uEB22",
        "AutoRacing": "\uEB24",
        "CollegeHoops": "\uEB25",
        "CollegeFootball": "\uEB26",
        "ProFootball": "\uEB27",
        "ProHockey": "\uEB28",
        "Rugby": "\uEB2D",
        "SubstitutionsIn": "\uEB31",
        "Tennis": "\uEB33",
        "Arrivals": "\uEB34",
        "Design": "\uEB3C",
        "Website": "\uEB41",
        "Drop": "\uEB42",
        "HistoricalWeather": "\uEB43",
        "SkiResorts": "\uEB45",
        "Snowflake": "\uEB46",
        "BusSolid": "\uEB47",
        "FerrySolid": "\uEB48",
        "AirplaneSolid": "\uEB4C",
        "TrainSolid": "\uEB4D",
        "Ticket": "\uEB54",
        "WifiWarning4": "\uEB63",
        "Devices4": "\uEB66",
        "AzureLogo": "\uEB6A",
        "BingLogo": "\uEB6B",
        "MSNLogo": "\uEB6C",
        "OutlookLogoInverse": "\uEB6D",
        "OfficeLogo": "\uEB6E",
        "SkypeLogo": "\uEB6F",
        "Door": "\uEB75",
        "EditMirrored": "\uEB7E",
        "GiftCard": "\uEB8E",
        "DoubleBookmark": "\uEB8F",
        "StatusErrorFull": "\uEB90"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-5.js
  function initializeIcons7(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-5"',
        src: "url('".concat(baseUrl, "fabric-icons-5-f95ba260.woff') format('woff')")
      },
      icons: {
        "Certificate": "\uEB95",
        "FastForward": "\uEB9D",
        "Rewind": "\uEB9E",
        "Photo2": "\uEB9F",
        "OpenSource": "\uEBC2",
        "Movers": "\uEBCD",
        "CloudDownload": "\uEBD3",
        "Family": "\uEBDA",
        "WindDirection": "\uEBE6",
        "Bug": "\uEBE8",
        "SiteScan": "\uEBEC",
        "BrowserScreenShot": "\uEBED",
        "F12DevTools": "\uEBEE",
        "CSS": "\uEBEF",
        "JS": "\uEBF0",
        "DeliveryTruck": "\uEBF4",
        "ReminderPerson": "\uEBF7",
        "ReminderGroup": "\uEBF8",
        "ReminderTime": "\uEBF9",
        "TabletMode": "\uEBFC",
        "Umbrella": "\uEC04",
        "NetworkTower": "\uEC05",
        "CityNext": "\uEC06",
        "CityNext2": "\uEC07",
        "Section": "\uEC0C",
        "OneNoteLogoInverse": "\uEC0D",
        "ToggleFilled": "\uEC11",
        "ToggleBorder": "\uEC12",
        "SliderThumb": "\uEC13",
        "ToggleThumb": "\uEC14",
        "Documentation": "\uEC17",
        "Badge": "\uEC1B",
        "Giftbox": "\uEC1F",
        "VisualStudioLogo": "\uEC22",
        "HomeGroup": "\uEC26",
        "ExcelLogoInverse": "\uEC28",
        "WordLogoInverse": "\uEC29",
        "PowerPointLogoInverse": "\uEC2A",
        "Cafe": "\uEC32",
        "SpeedHigh": "\uEC4A",
        "Commitments": "\uEC4D",
        "ThisPC": "\uEC4E",
        "MusicNote": "\uEC4F",
        "MicOff": "\uEC54",
        "PlaybackRate1x": "\uEC57",
        "EdgeLogo": "\uEC60",
        "CompletedSolid": "\uEC61",
        "AlbumRemove": "\uEC62",
        "MessageFill": "\uEC70",
        "TabletSelected": "\uEC74",
        "MobileSelected": "\uEC75",
        "LaptopSelected": "\uEC76",
        "TVMonitorSelected": "\uEC77",
        "DeveloperTools": "\uEC7A",
        "Shapes": "\uEC7C",
        "InsertTextBox": "\uEC7D",
        "LowerBrightness": "\uEC8A",
        "WebComponents": "\uEC8B",
        "OfflineStorage": "\uEC8C",
        "DOM": "\uEC8D",
        "CloudUpload": "\uEC8E",
        "ScrollUpDown": "\uEC8F",
        "DateTime": "\uEC92",
        "Event": "\uECA3",
        "Cake": "\uECA4",
        "Org": "\uECA6",
        "PartyLeader": "\uECA7",
        "DRM": "\uECA8",
        "CloudAdd": "\uECA9",
        "AppIconDefault": "\uECAA",
        "Photo2Add": "\uECAB",
        "Photo2Remove": "\uECAC",
        "Calories": "\uECAD",
        "POI": "\uECAF",
        "AddTo": "\uECC8",
        "RadioBtnOff": "\uECCA",
        "RadioBtnOn": "\uECCB",
        "ExploreContent": "\uECCD",
        "Product": "\uECDC",
        "ProgressLoopInner": "\uECDE",
        "ProgressLoopOuter": "\uECDF",
        "Blocked2": "\uECE4",
        "FangBody": "\uECEB",
        "Toolbox": "\uECED",
        "PageHeader": "\uECEE",
        "ChatInviteFriend": "\uECFE",
        "Brush": "\uECFF",
        "Shirt": "\uED00",
        "Crown": "\uED01",
        "Diamond": "\uED02",
        "ScaleUp": "\uED09",
        "QRCode": "\uED14",
        "Feedback": "\uED15",
        "SharepointLogoInverse": "\uED18",
        "YammerLogo": "\uED19",
        "Hide": "\uED1A",
        "Uneditable": "\uED1D",
        "ReturnToSession": "\uED24",
        "OpenFolderHorizontal": "\uED25",
        "CalendarMirrored": "\uED28"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-6.js
  function initializeIcons8(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-6"',
        src: "url('".concat(baseUrl, "fabric-icons-6-ef6fd590.woff') format('woff')")
      },
      icons: {
        "SwayLogoInverse": "\uED29",
        "OutOfOffice": "\uED34",
        "Trophy": "\uED3F",
        "ReopenPages": "\uED50",
        "EmojiTabSymbols": "\uED58",
        "AADLogo": "\uED68",
        "AccessLogo": "\uED69",
        "AdminALogoInverse32": "\uED6A",
        "AdminCLogoInverse32": "\uED6B",
        "AdminDLogoInverse32": "\uED6C",
        "AdminELogoInverse32": "\uED6D",
        "AdminLLogoInverse32": "\uED6E",
        "AdminMLogoInverse32": "\uED6F",
        "AdminOLogoInverse32": "\uED70",
        "AdminPLogoInverse32": "\uED71",
        "AdminSLogoInverse32": "\uED72",
        "AdminYLogoInverse32": "\uED73",
        "DelveLogoInverse": "\uED76",
        "ExchangeLogoInverse": "\uED78",
        "LyncLogo": "\uED79",
        "OfficeVideoLogoInverse": "\uED7A",
        "SocialListeningLogo": "\uED7C",
        "VisioLogoInverse": "\uED7D",
        "Balloons": "\uED7E",
        "Cat": "\uED7F",
        "MailAlert": "\uED80",
        "MailCheck": "\uED81",
        "MailLowImportance": "\uED82",
        "MailPause": "\uED83",
        "MailRepeat": "\uED84",
        "SecurityGroup": "\uED85",
        "Table": "\uED86",
        "VoicemailForward": "\uED87",
        "VoicemailReply": "\uED88",
        "Waffle": "\uED89",
        "RemoveEvent": "\uED8A",
        "EventInfo": "\uED8B",
        "ForwardEvent": "\uED8C",
        "WipePhone": "\uED8D",
        "AddOnlineMeeting": "\uED8E",
        "JoinOnlineMeeting": "\uED8F",
        "RemoveLink": "\uED90",
        "PeopleBlock": "\uED91",
        "PeopleRepeat": "\uED92",
        "PeopleAlert": "\uED93",
        "PeoplePause": "\uED94",
        "TransferCall": "\uED95",
        "AddPhone": "\uED96",
        "UnknownCall": "\uED97",
        "NoteReply": "\uED98",
        "NoteForward": "\uED99",
        "NotePinned": "\uED9A",
        "RemoveOccurrence": "\uED9B",
        "Timeline": "\uED9C",
        "EditNote": "\uED9D",
        "CircleHalfFull": "\uED9E",
        "Room": "\uED9F",
        "Unsubscribe": "\uEDA0",
        "Subscribe": "\uEDA1",
        "HardDrive": "\uEDA2",
        "RecurringTask": "\uEDB2",
        "TaskManager": "\uEDB7",
        "TaskManagerMirrored": "\uEDB8",
        "Combine": "\uEDBB",
        "Split": "\uEDBC",
        "DoubleChevronUp": "\uEDBD",
        "DoubleChevronLeft": "\uEDBE",
        "DoubleChevronRight": "\uEDBF",
        "TextBox": "\uEDC2",
        "TextField": "\uEDC3",
        "NumberField": "\uEDC4",
        "Dropdown": "\uEDC5",
        "PenWorkspace": "\uEDC6",
        "BookingsLogo": "\uEDC7",
        "ClassNotebookLogoInverse": "\uEDC8",
        "DelveAnalyticsLogo": "\uEDCA",
        "DocsLogoInverse": "\uEDCB",
        "Dynamics365Logo": "\uEDCC",
        "DynamicSMBLogo": "\uEDCD",
        "OfficeAssistantLogo": "\uEDCE",
        "OfficeStoreLogo": "\uEDCF",
        "OneNoteEduLogoInverse": "\uEDD0",
        "PlannerLogo": "\uEDD1",
        "PowerApps": "\uEDD2",
        "Suitcase": "\uEDD3",
        "ProjectLogoInverse": "\uEDD4",
        "CaretLeft8": "\uEDD5",
        "CaretRight8": "\uEDD6",
        "CaretUp8": "\uEDD7",
        "CaretDown8": "\uEDD8",
        "CaretLeftSolid8": "\uEDD9",
        "CaretRightSolid8": "\uEDDA",
        "CaretUpSolid8": "\uEDDB",
        "CaretDownSolid8": "\uEDDC",
        "ClearFormatting": "\uEDDD",
        "Superscript": "\uEDDE",
        "Subscript": "\uEDDF",
        "Strikethrough": "\uEDE0",
        "Export": "\uEDE1",
        "ExportMirrored": "\uEDE2"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-7.js
  function initializeIcons9(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-7"',
        src: "url('".concat(baseUrl, "fabric-icons-7-2b97bb99.woff') format('woff')")
      },
      icons: {
        "SingleBookmark": "\uEDFF",
        "SingleBookmarkSolid": "\uEE00",
        "DoubleChevronDown": "\uEE04",
        "FollowUser": "\uEE05",
        "ReplyAll": "\uEE0A",
        "WorkforceManagement": "\uEE0F",
        "RecruitmentManagement": "\uEE12",
        "Questionnaire": "\uEE19",
        "ManagerSelfService": "\uEE23",
        "ProductionFloorManagement": "\uEE29",
        "ProductRelease": "\uEE2E",
        "ProductVariant": "\uEE30",
        "ReplyMirrored": "\uEE35",
        "ReplyAllMirrored": "\uEE36",
        "Medal": "\uEE38",
        "AddGroup": "\uEE3D",
        "QuestionnaireMirrored": "\uEE4B",
        "CloudImportExport": "\uEE55",
        "TemporaryUser": "\uEE58",
        "CaretSolid16": "\uEE62",
        "GroupedDescending": "\uEE66",
        "GroupedAscending": "\uEE67",
        "AwayStatus": "\uEE6A",
        "MyMoviesTV": "\uEE6C",
        "GenericScan": "\uEE6F",
        "AustralianRules": "\uEE70",
        "WifiEthernet": "\uEE77",
        "TrackersMirrored": "\uEE92",
        "DateTimeMirrored": "\uEE93",
        "StopSolid": "\uEE95",
        "DoubleChevronUp12": "\uEE96",
        "DoubleChevronDown12": "\uEE97",
        "DoubleChevronLeft12": "\uEE98",
        "DoubleChevronRight12": "\uEE99",
        "CalendarAgenda": "\uEE9A",
        "ConnectVirtualMachine": "\uEE9D",
        "AddEvent": "\uEEB5",
        "AssetLibrary": "\uEEB6",
        "DataConnectionLibrary": "\uEEB7",
        "DocLibrary": "\uEEB8",
        "FormLibrary": "\uEEB9",
        "FormLibraryMirrored": "\uEEBA",
        "ReportLibrary": "\uEEBB",
        "ReportLibraryMirrored": "\uEEBC",
        "ContactCard": "\uEEBD",
        "CustomList": "\uEEBE",
        "CustomListMirrored": "\uEEBF",
        "IssueTracking": "\uEEC0",
        "IssueTrackingMirrored": "\uEEC1",
        "PictureLibrary": "\uEEC2",
        "OfficeAddinsLogo": "\uEEC7",
        "OfflineOneDriveParachute": "\uEEC8",
        "OfflineOneDriveParachuteDisabled": "\uEEC9",
        "TriangleSolidUp12": "\uEECC",
        "TriangleSolidDown12": "\uEECD",
        "TriangleSolidLeft12": "\uEECE",
        "TriangleSolidRight12": "\uEECF",
        "TriangleUp12": "\uEED0",
        "TriangleDown12": "\uEED1",
        "TriangleLeft12": "\uEED2",
        "TriangleRight12": "\uEED3",
        "ArrowUpRight8": "\uEED4",
        "ArrowDownRight8": "\uEED5",
        "DocumentSet": "\uEED6",
        "GoToDashboard": "\uEEED",
        "DelveAnalytics": "\uEEEE",
        "ArrowUpRightMirrored8": "\uEEEF",
        "ArrowDownRightMirrored8": "\uEEF0",
        "CompanyDirectory": "\uEF0D",
        "OpenEnrollment": "\uEF1C",
        "CompanyDirectoryMirrored": "\uEF2B",
        "OneDriveAdd": "\uEF32",
        "ProfileSearch": "\uEF35",
        "Header2": "\uEF36",
        "Header3": "\uEF37",
        "Header4": "\uEF38",
        "RingerSolid": "\uEF3A",
        "Eyedropper": "\uEF3C",
        "MarketDown": "\uEF42",
        "CalendarWorkWeek": "\uEF51",
        "SidePanel": "\uEF52",
        "GlobeFavorite": "\uEF53",
        "CaretTopLeftSolid8": "\uEF54",
        "CaretTopRightSolid8": "\uEF55",
        "ViewAll2": "\uEF56",
        "DocumentReply": "\uEF57",
        "PlayerSettings": "\uEF58",
        "ReceiptForward": "\uEF59",
        "ReceiptReply": "\uEF5A",
        "ReceiptCheck": "\uEF5B",
        "Fax": "\uEF5C",
        "RecurringEvent": "\uEF5D",
        "ReplyAlt": "\uEF5E",
        "ReplyAllAlt": "\uEF5F",
        "EditStyle": "\uEF60",
        "EditMail": "\uEF61",
        "Lifesaver": "\uEF62",
        "LifesaverLock": "\uEF63",
        "InboxCheck": "\uEF64",
        "FolderSearch": "\uEF65"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-8.js
  function initializeIcons10(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-8"',
        src: "url('".concat(baseUrl, "fabric-icons-8-6fdf1528.woff') format('woff')")
      },
      icons: {
        "CollapseMenu": "\uEF66",
        "ExpandMenu": "\uEF67",
        "Boards": "\uEF68",
        "SunAdd": "\uEF69",
        "SunQuestionMark": "\uEF6A",
        "LandscapeOrientation": "\uEF6B",
        "DocumentSearch": "\uEF6C",
        "PublicCalendar": "\uEF6D",
        "PublicContactCard": "\uEF6E",
        "PublicEmail": "\uEF6F",
        "PublicFolder": "\uEF70",
        "WordDocument": "\uEF71",
        "PowerPointDocument": "\uEF72",
        "ExcelDocument": "\uEF73",
        "GroupedList": "\uEF74",
        "ClassroomLogo": "\uEF75",
        "Sections": "\uEF76",
        "EditPhoto": "\uEF77",
        "Starburst": "\uEF78",
        "ShareiOS": "\uEF79",
        "AirTickets": "\uEF7A",
        "PencilReply": "\uEF7B",
        "Tiles2": "\uEF7C",
        "SkypeCircleCheck": "\uEF7D",
        "SkypeCircleClock": "\uEF7E",
        "SkypeCircleMinus": "\uEF7F",
        "SkypeMessage": "\uEF83",
        "ClosedCaption": "\uEF84",
        "ATPLogo": "\uEF85",
        "OfficeFormsLogoInverse": "\uEF86",
        "RecycleBin": "\uEF87",
        "EmptyRecycleBin": "\uEF88",
        "Hide2": "\uEF89",
        "Breadcrumb": "\uEF8C",
        "BirthdayCake": "\uEF8D",
        "TimeEntry": "\uEF95",
        "CRMProcesses": "\uEFB1",
        "PageEdit": "\uEFB6",
        "PageArrowRight": "\uEFB8",
        "PageRemove": "\uEFBA",
        "Database": "\uEFC7",
        "DataManagementSettings": "\uEFC8",
        "CRMServices": "\uEFD2",
        "EditContact": "\uEFD3",
        "ConnectContacts": "\uEFD4",
        "AppIconDefaultAdd": "\uEFDA",
        "AppIconDefaultList": "\uEFDE",
        "ActivateOrders": "\uEFE0",
        "DeactivateOrders": "\uEFE1",
        "ProductCatalog": "\uEFE8",
        "ScatterChart": "\uEFEB",
        "AccountActivity": "\uEFF4",
        "DocumentManagement": "\uEFFC",
        "CRMReport": "\uEFFE",
        "KnowledgeArticle": "\uF000",
        "Relationship": "\uF003",
        "HomeVerify": "\uF00E",
        "ZipFolder": "\uF012",
        "SurveyQuestions": "\uF01B",
        "TextDocument": "\uF029",
        "TextDocumentShared": "\uF02B",
        "PageCheckedOut": "\uF02C",
        "PageShared": "\uF02D",
        "SaveAndClose": "\uF038",
        "Script": "\uF03A",
        "Archive": "\uF03F",
        "ActivityFeed": "\uF056",
        "Compare": "\uF057",
        "EventDate": "\uF059",
        "ArrowUpRight": "\uF069",
        "CaretRight": "\uF06B",
        "SetAction": "\uF071",
        "ChatBot": "\uF08B",
        "CaretSolidLeft": "\uF08D",
        "CaretSolidDown": "\uF08E",
        "CaretSolidRight": "\uF08F",
        "CaretSolidUp": "\uF090",
        "PowerAppsLogo": "\uF091",
        "PowerApps2Logo": "\uF092",
        "SearchIssue": "\uF09A",
        "SearchIssueMirrored": "\uF09B",
        "FabricAssetLibrary": "\uF09C",
        "FabricDataConnectionLibrary": "\uF09D",
        "FabricDocLibrary": "\uF09E",
        "FabricFormLibrary": "\uF09F",
        "FabricFormLibraryMirrored": "\uF0A0",
        "FabricReportLibrary": "\uF0A1",
        "FabricReportLibraryMirrored": "\uF0A2",
        "FabricPublicFolder": "\uF0A3",
        "FabricFolderSearch": "\uF0A4",
        "FabricMovetoFolder": "\uF0A5",
        "FabricUnsyncFolder": "\uF0A6",
        "FabricSyncFolder": "\uF0A7",
        "FabricOpenFolderHorizontal": "\uF0A8",
        "FabricFolder": "\uF0A9",
        "FabricFolderFill": "\uF0AA",
        "FabricNewFolder": "\uF0AB",
        "FabricPictureLibrary": "\uF0AC",
        "PhotoVideoMedia": "\uF0B1",
        "AddFavorite": "\uF0C8"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-9.js
  function initializeIcons11(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-9"',
        src: "url('".concat(baseUrl, "fabric-icons-9-c6162b42.woff') format('woff')")
      },
      icons: {
        "AddFavoriteFill": "\uF0C9",
        "BufferTimeBefore": "\uF0CF",
        "BufferTimeAfter": "\uF0D0",
        "BufferTimeBoth": "\uF0D1",
        "PublishContent": "\uF0D4",
        "ClipboardList": "\uF0E3",
        "ClipboardListMirrored": "\uF0E4",
        "CannedChat": "\uF0F2",
        "SkypeForBusinessLogo": "\uF0FC",
        "TabCenter": "\uF100",
        "PageCheckedin": "\uF104",
        "PageList": "\uF106",
        "ReadOutLoud": "\uF112",
        "CaretBottomLeftSolid8": "\uF121",
        "CaretBottomRightSolid8": "\uF122",
        "FolderHorizontal": "\uF12B",
        "MicrosoftStaffhubLogo": "\uF130",
        "GiftboxOpen": "\uF133",
        "StatusCircleOuter": "\uF136",
        "StatusCircleInner": "\uF137",
        "StatusCircleRing": "\uF138",
        "StatusTriangleOuter": "\uF139",
        "StatusTriangleInner": "\uF13A",
        "StatusTriangleExclamation": "\uF13B",
        "StatusCircleExclamation": "\uF13C",
        "StatusCircleErrorX": "\uF13D",
        "StatusCircleInfo": "\uF13F",
        "StatusCircleBlock": "\uF140",
        "StatusCircleBlock2": "\uF141",
        "StatusCircleQuestionMark": "\uF142",
        "StatusCircleSync": "\uF143",
        "Toll": "\uF160",
        "ExploreContentSingle": "\uF164",
        "CollapseContent": "\uF165",
        "CollapseContentSingle": "\uF166",
        "InfoSolid": "\uF167",
        "GroupList": "\uF168",
        "ProgressRingDots": "\uF16A",
        "CaloriesAdd": "\uF172",
        "BranchFork": "\uF173",
        "MuteChat": "\uF17A",
        "AddHome": "\uF17B",
        "AddWork": "\uF17C",
        "MobileReport": "\uF18A",
        "ScaleVolume": "\uF18C",
        "HardDriveGroup": "\uF18F",
        "FastMode": "\uF19A",
        "ToggleLeft": "\uF19E",
        "ToggleRight": "\uF19F",
        "TriangleShape": "\uF1A7",
        "RectangleShape": "\uF1A9",
        "CubeShape": "\uF1AA",
        "Trophy2": "\uF1AE",
        "BucketColor": "\uF1B6",
        "BucketColorFill": "\uF1B7",
        "Taskboard": "\uF1C2",
        "SingleColumn": "\uF1D3",
        "DoubleColumn": "\uF1D4",
        "TripleColumn": "\uF1D5",
        "ColumnLeftTwoThirds": "\uF1D6",
        "ColumnRightTwoThirds": "\uF1D7",
        "AccessLogoFill": "\uF1DB",
        "AnalyticsLogo": "\uF1DE",
        "AnalyticsQuery": "\uF1DF",
        "NewAnalyticsQuery": "\uF1E0",
        "AnalyticsReport": "\uF1E1",
        "WordLogo": "\uF1E3",
        "WordLogoFill": "\uF1E4",
        "ExcelLogo": "\uF1E5",
        "ExcelLogoFill": "\uF1E6",
        "OneNoteLogo": "\uF1E7",
        "OneNoteLogoFill": "\uF1E8",
        "OutlookLogo": "\uF1E9",
        "OutlookLogoFill": "\uF1EA",
        "PowerPointLogo": "\uF1EB",
        "PowerPointLogoFill": "\uF1EC",
        "PublisherLogo": "\uF1ED",
        "PublisherLogoFill": "\uF1EE",
        "ScheduleEventAction": "\uF1EF",
        "FlameSolid": "\uF1F3",
        "ServerProcesses": "\uF1FE",
        "Server": "\uF201",
        "SaveAll": "\uF203",
        "LinkedInLogo": "\uF20A",
        "Decimals": "\uF218",
        "SidePanelMirrored": "\uF221",
        "ProtectRestrict": "\uF22A",
        "Blog": "\uF22B",
        "UnknownMirrored": "\uF22E",
        "PublicContactCardMirrored": "\uF230",
        "GridViewSmall": "\uF232",
        "GridViewMedium": "\uF233",
        "GridViewLarge": "\uF234",
        "Step": "\uF241",
        "StepInsert": "\uF242",
        "StepShared": "\uF243",
        "StepSharedAdd": "\uF244",
        "StepSharedInsert": "\uF245",
        "ViewDashboard": "\uF246",
        "ViewList": "\uF247"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-10.js
  function initializeIcons12(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-10"',
        src: "url('".concat(baseUrl, "fabric-icons-10-c4ded8e4.woff') format('woff')")
      },
      icons: {
        "ViewListGroup": "\uF248",
        "ViewListTree": "\uF249",
        "TriggerAuto": "\uF24A",
        "TriggerUser": "\uF24B",
        "PivotChart": "\uF24C",
        "StackedBarChart": "\uF24D",
        "StackedLineChart": "\uF24E",
        "BuildQueue": "\uF24F",
        "BuildQueueNew": "\uF250",
        "UserFollowed": "\uF25C",
        "ContactLink": "\uF25F",
        "Stack": "\uF26F",
        "Bullseye": "\uF272",
        "VennDiagram": "\uF273",
        "FiveTileGrid": "\uF274",
        "FocalPoint": "\uF277",
        "Insert": "\uF278",
        "RingerRemove": "\uF279",
        "TeamsLogoInverse": "\uF27A",
        "TeamsLogo": "\uF27B",
        "TeamsLogoFill": "\uF27C",
        "SkypeForBusinessLogoFill": "\uF27D",
        "SharepointLogo": "\uF27E",
        "SharepointLogoFill": "\uF27F",
        "DelveLogo": "\uF280",
        "DelveLogoFill": "\uF281",
        "OfficeVideoLogo": "\uF282",
        "OfficeVideoLogoFill": "\uF283",
        "ExchangeLogo": "\uF284",
        "ExchangeLogoFill": "\uF285",
        "Signin": "\uF286",
        "DocumentApproval": "\uF28B",
        "CloneToDesktop": "\uF28C",
        "InstallToDrive": "\uF28D",
        "Blur": "\uF28E",
        "Build": "\uF28F",
        "ProcessMetaTask": "\uF290",
        "BranchFork2": "\uF291",
        "BranchLocked": "\uF292",
        "BranchCommit": "\uF293",
        "BranchCompare": "\uF294",
        "BranchMerge": "\uF295",
        "BranchPullRequest": "\uF296",
        "BranchSearch": "\uF297",
        "BranchShelveset": "\uF298",
        "RawSource": "\uF299",
        "MergeDuplicate": "\uF29A",
        "RowsGroup": "\uF29B",
        "RowsChild": "\uF29C",
        "Deploy": "\uF29D",
        "Redeploy": "\uF29E",
        "ServerEnviroment": "\uF29F",
        "VisioDiagram": "\uF2A0",
        "HighlightMappedShapes": "\uF2A1",
        "TextCallout": "\uF2A2",
        "IconSetsFlag": "\uF2A4",
        "VisioLogo": "\uF2A7",
        "VisioLogoFill": "\uF2A8",
        "VisioDocument": "\uF2A9",
        "TimelineProgress": "\uF2AA",
        "TimelineDelivery": "\uF2AB",
        "Backlog": "\uF2AC",
        "TeamFavorite": "\uF2AD",
        "TaskGroup": "\uF2AE",
        "TaskGroupMirrored": "\uF2AF",
        "ScopeTemplate": "\uF2B0",
        "AssessmentGroupTemplate": "\uF2B1",
        "NewTeamProject": "\uF2B2",
        "CommentAdd": "\uF2B3",
        "CommentNext": "\uF2B4",
        "CommentPrevious": "\uF2B5",
        "ShopServer": "\uF2B6",
        "LocaleLanguage": "\uF2B7",
        "QueryList": "\uF2B8",
        "UserSync": "\uF2B9",
        "UserPause": "\uF2BA",
        "StreamingOff": "\uF2BB",
        "ArrowTallUpLeft": "\uF2BD",
        "ArrowTallUpRight": "\uF2BE",
        "ArrowTallDownLeft": "\uF2BF",
        "ArrowTallDownRight": "\uF2C0",
        "FieldEmpty": "\uF2C1",
        "FieldFilled": "\uF2C2",
        "FieldChanged": "\uF2C3",
        "FieldNotChanged": "\uF2C4",
        "RingerOff": "\uF2C5",
        "PlayResume": "\uF2C6",
        "BulletedList2": "\uF2C7",
        "BulletedList2Mirrored": "\uF2C8",
        "ImageCrosshair": "\uF2C9",
        "GitGraph": "\uF2CA",
        "Repo": "\uF2CB",
        "RepoSolid": "\uF2CC",
        "FolderQuery": "\uF2CD",
        "FolderList": "\uF2CE",
        "FolderListMirrored": "\uF2CF",
        "LocationOutline": "\uF2D0",
        "POISolid": "\uF2D1",
        "CalculatorNotEqualTo": "\uF2D2",
        "BoxSubtractSolid": "\uF2D3"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-11.js
  function initializeIcons13(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-11"',
        src: "url('".concat(baseUrl, "fabric-icons-11-2a8393d6.woff') format('woff')")
      },
      icons: {
        "BoxAdditionSolid": "\uF2D4",
        "BoxMultiplySolid": "\uF2D5",
        "BoxPlaySolid": "\uF2D6",
        "BoxCheckmarkSolid": "\uF2D7",
        "CirclePauseSolid": "\uF2D8",
        "CirclePause": "\uF2D9",
        "MSNVideosSolid": "\uF2DA",
        "CircleStopSolid": "\uF2DB",
        "CircleStop": "\uF2DC",
        "NavigateBack": "\uF2DD",
        "NavigateBackMirrored": "\uF2DE",
        "NavigateForward": "\uF2DF",
        "NavigateForwardMirrored": "\uF2E0",
        "UnknownSolid": "\uF2E1",
        "UnknownMirroredSolid": "\uF2E2",
        "CircleAddition": "\uF2E3",
        "CircleAdditionSolid": "\uF2E4",
        "FilePDB": "\uF2E5",
        "FileTemplate": "\uF2E6",
        "FileSQL": "\uF2E7",
        "FileJAVA": "\uF2E8",
        "FileASPX": "\uF2E9",
        "FileCSS": "\uF2EA",
        "FileSass": "\uF2EB",
        "FileLess": "\uF2EC",
        "FileHTML": "\uF2ED",
        "JavaScriptLanguage": "\uF2EE",
        "CSharpLanguage": "\uF2EF",
        "CSharp": "\uF2F0",
        "VisualBasicLanguage": "\uF2F1",
        "VB": "\uF2F2",
        "CPlusPlusLanguage": "\uF2F3",
        "CPlusPlus": "\uF2F4",
        "FSharpLanguage": "\uF2F5",
        "FSharp": "\uF2F6",
        "TypeScriptLanguage": "\uF2F7",
        "PythonLanguage": "\uF2F8",
        "PY": "\uF2F9",
        "CoffeeScript": "\uF2FA",
        "MarkDownLanguage": "\uF2FB",
        "FullWidth": "\uF2FE",
        "FullWidthEdit": "\uF2FF",
        "Plug": "\uF300",
        "PlugSolid": "\uF301",
        "PlugConnected": "\uF302",
        "PlugDisconnected": "\uF303",
        "UnlockSolid": "\uF304",
        "Variable": "\uF305",
        "Parameter": "\uF306",
        "CommentUrgent": "\uF307",
        "Storyboard": "\uF308",
        "DiffInline": "\uF309",
        "DiffSideBySide": "\uF30A",
        "ImageDiff": "\uF30B",
        "ImagePixel": "\uF30C",
        "FileBug": "\uF30D",
        "FileCode": "\uF30E",
        "FileComment": "\uF30F",
        "BusinessHoursSign": "\uF310",
        "FileImage": "\uF311",
        "FileSymlink": "\uF312",
        "AutoFillTemplate": "\uF313",
        "WorkItem": "\uF314",
        "WorkItemBug": "\uF315",
        "LogRemove": "\uF316",
        "ColumnOptions": "\uF317",
        "Packages": "\uF318",
        "BuildIssue": "\uF319",
        "AssessmentGroup": "\uF31A",
        "VariableGroup": "\uF31B",
        "FullHistory": "\uF31C",
        "Wheelchair": "\uF31F",
        "SingleColumnEdit": "\uF321",
        "DoubleColumnEdit": "\uF322",
        "TripleColumnEdit": "\uF323",
        "ColumnLeftTwoThirdsEdit": "\uF324",
        "ColumnRightTwoThirdsEdit": "\uF325",
        "StreamLogo": "\uF329",
        "PassiveAuthentication": "\uF32A",
        "AlertSolid": "\uF331",
        "MegaphoneSolid": "\uF332",
        "TaskSolid": "\uF333",
        "ConfigurationSolid": "\uF334",
        "BugSolid": "\uF335",
        "CrownSolid": "\uF336",
        "Trophy2Solid": "\uF337",
        "QuickNoteSolid": "\uF338",
        "ConstructionConeSolid": "\uF339",
        "PageListSolid": "\uF33A",
        "PageListMirroredSolid": "\uF33B",
        "StarburstSolid": "\uF33C",
        "ReadingModeSolid": "\uF33D",
        "SadSolid": "\uF33E",
        "HealthSolid": "\uF33F",
        "ShieldSolid": "\uF340",
        "GiftBoxSolid": "\uF341",
        "ShoppingCartSolid": "\uF342",
        "MailSolid": "\uF343",
        "ChatSolid": "\uF344",
        "RibbonSolid": "\uF345"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-12.js
  function initializeIcons14(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-12"',
        src: "url('".concat(baseUrl, "fabric-icons-12-7e945a1e.woff') format('woff')")
      },
      icons: {
        "FinancialSolid": "\uF346",
        "FinancialMirroredSolid": "\uF347",
        "HeadsetSolid": "\uF348",
        "PermissionsSolid": "\uF349",
        "ParkingSolid": "\uF34A",
        "ParkingMirroredSolid": "\uF34B",
        "DiamondSolid": "\uF34C",
        "AsteriskSolid": "\uF34D",
        "OfflineStorageSolid": "\uF34E",
        "BankSolid": "\uF34F",
        "DecisionSolid": "\uF350",
        "Parachute": "\uF351",
        "ParachuteSolid": "\uF352",
        "FiltersSolid": "\uF353",
        "ColorSolid": "\uF354",
        "ReviewSolid": "\uF355",
        "ReviewRequestSolid": "\uF356",
        "ReviewRequestMirroredSolid": "\uF357",
        "ReviewResponseSolid": "\uF358",
        "FeedbackRequestSolid": "\uF359",
        "FeedbackRequestMirroredSolid": "\uF35A",
        "FeedbackResponseSolid": "\uF35B",
        "WorkItemBar": "\uF35C",
        "WorkItemBarSolid": "\uF35D",
        "Separator": "\uF35E",
        "NavigateExternalInline": "\uF35F",
        "PlanView": "\uF360",
        "TimelineMatrixView": "\uF361",
        "EngineeringGroup": "\uF362",
        "ProjectCollection": "\uF363",
        "CaretBottomRightCenter8": "\uF364",
        "CaretBottomLeftCenter8": "\uF365",
        "CaretTopRightCenter8": "\uF366",
        "CaretTopLeftCenter8": "\uF367",
        "DonutChart": "\uF368",
        "ChevronUnfold10": "\uF369",
        "ChevronFold10": "\uF36A",
        "DoubleChevronDown8": "\uF36B",
        "DoubleChevronUp8": "\uF36C",
        "DoubleChevronLeft8": "\uF36D",
        "DoubleChevronRight8": "\uF36E",
        "ChevronDownEnd6": "\uF36F",
        "ChevronUpEnd6": "\uF370",
        "ChevronLeftEnd6": "\uF371",
        "ChevronRightEnd6": "\uF372",
        "ContextMenu": "\uF37C",
        "AzureAPIManagement": "\uF37F",
        "AzureServiceEndpoint": "\uF380",
        "VSTSLogo": "\uF381",
        "VSTSAltLogo1": "\uF382",
        "VSTSAltLogo2": "\uF383",
        "FileTypeSolution": "\uF387",
        "WordLogoInverse16": "\uF390",
        "WordLogo16": "\uF391",
        "WordLogoFill16": "\uF392",
        "PowerPointLogoInverse16": "\uF393",
        "PowerPointLogo16": "\uF394",
        "PowerPointLogoFill16": "\uF395",
        "ExcelLogoInverse16": "\uF396",
        "ExcelLogo16": "\uF397",
        "ExcelLogoFill16": "\uF398",
        "OneNoteLogoInverse16": "\uF399",
        "OneNoteLogo16": "\uF39A",
        "OneNoteLogoFill16": "\uF39B",
        "OutlookLogoInverse16": "\uF39C",
        "OutlookLogo16": "\uF39D",
        "OutlookLogoFill16": "\uF39E",
        "PublisherLogoInverse16": "\uF39F",
        "PublisherLogo16": "\uF3A0",
        "PublisherLogoFill16": "\uF3A1",
        "VisioLogoInverse16": "\uF3A2",
        "VisioLogo16": "\uF3A3",
        "VisioLogoFill16": "\uF3A4",
        "TestBeaker": "\uF3A5",
        "TestBeakerSolid": "\uF3A6",
        "TestExploreSolid": "\uF3A7",
        "TestAutoSolid": "\uF3A8",
        "TestUserSolid": "\uF3A9",
        "TestImpactSolid": "\uF3AA",
        "TestPlan": "\uF3AB",
        "TestStep": "\uF3AC",
        "TestParameter": "\uF3AD",
        "TestSuite": "\uF3AE",
        "TestCase": "\uF3AF",
        "Sprint": "\uF3B0",
        "SignOut": "\uF3B1",
        "TriggerApproval": "\uF3B2",
        "Rocket": "\uF3B3",
        "AzureKeyVault": "\uF3B4",
        "Onboarding": "\uF3BA",
        "Transition": "\uF3BC",
        "LikeSolid": "\uF3BF",
        "DislikeSolid": "\uF3C0",
        "CRMCustomerInsightsApp": "\uF3C8",
        "EditCreate": "\uF3C9",
        "PlayReverseResume": "\uF3E4",
        "PlayReverse": "\uF3E5",
        "SearchData": "\uF3F1",
        "UnSetColor": "\uF3F9",
        "DeclineCall": "\uF405"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-13.js
  function initializeIcons15(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-13"',
        src: "url('".concat(baseUrl, "fabric-icons-13-c3989a02.woff') format('woff')")
      },
      icons: {
        "RectangularClipping": "\uF407",
        "TeamsLogo16": "\uF40A",
        "TeamsLogoFill16": "\uF40B",
        "Spacer": "\uF40D",
        "SkypeLogo16": "\uF40E",
        "SkypeForBusinessLogo16": "\uF40F",
        "SkypeForBusinessLogoFill16": "\uF410",
        "FilterSolid": "\uF412",
        "MailUndelivered": "\uF415",
        "MailTentative": "\uF416",
        "MailTentativeMirrored": "\uF417",
        "MailReminder": "\uF418",
        "ReceiptUndelivered": "\uF419",
        "ReceiptTentative": "\uF41A",
        "ReceiptTentativeMirrored": "\uF41B",
        "Inbox": "\uF41C",
        "IRMReply": "\uF41D",
        "IRMReplyMirrored": "\uF41E",
        "IRMForward": "\uF41F",
        "IRMForwardMirrored": "\uF420",
        "VoicemailIRM": "\uF421",
        "EventAccepted": "\uF422",
        "EventTentative": "\uF423",
        "EventTentativeMirrored": "\uF424",
        "EventDeclined": "\uF425",
        "IDBadge": "\uF427",
        "BackgroundColor": "\uF42B",
        "OfficeFormsLogoInverse16": "\uF433",
        "OfficeFormsLogo": "\uF434",
        "OfficeFormsLogoFill": "\uF435",
        "OfficeFormsLogo16": "\uF436",
        "OfficeFormsLogoFill16": "\uF437",
        "OfficeFormsLogoInverse24": "\uF43A",
        "OfficeFormsLogo24": "\uF43B",
        "OfficeFormsLogoFill24": "\uF43C",
        "PageLock": "\uF43F",
        "NotExecuted": "\uF440",
        "NotImpactedSolid": "\uF441",
        "FieldReadOnly": "\uF442",
        "FieldRequired": "\uF443",
        "BacklogBoard": "\uF444",
        "ExternalBuild": "\uF445",
        "ExternalTFVC": "\uF446",
        "ExternalXAML": "\uF447",
        "IssueSolid": "\uF448",
        "DefectSolid": "\uF449",
        "LadybugSolid": "\uF44A",
        "NugetLogo": "\uF44C",
        "TFVCLogo": "\uF44D",
        "ProjectLogo32": "\uF47E",
        "ProjectLogoFill32": "\uF47F",
        "ProjectLogo16": "\uF480",
        "ProjectLogoFill16": "\uF481",
        "SwayLogo32": "\uF482",
        "SwayLogoFill32": "\uF483",
        "SwayLogo16": "\uF484",
        "SwayLogoFill16": "\uF485",
        "ClassNotebookLogo32": "\uF486",
        "ClassNotebookLogoFill32": "\uF487",
        "ClassNotebookLogo16": "\uF488",
        "ClassNotebookLogoFill16": "\uF489",
        "ClassNotebookLogoInverse32": "\uF48A",
        "ClassNotebookLogoInverse16": "\uF48B",
        "StaffNotebookLogo32": "\uF48C",
        "StaffNotebookLogoFill32": "\uF48D",
        "StaffNotebookLogo16": "\uF48E",
        "StaffNotebookLogoFill16": "\uF48F",
        "StaffNotebookLogoInverted32": "\uF490",
        "StaffNotebookLogoInverted16": "\uF491",
        "KaizalaLogo": "\uF492",
        "TaskLogo": "\uF493",
        "ProtectionCenterLogo32": "\uF494",
        "GallatinLogo": "\uF496",
        "Globe2": "\uF49A",
        "Guitar": "\uF49B",
        "Breakfast": "\uF49C",
        "Brunch": "\uF49D",
        "BeerMug": "\uF49E",
        "Vacation": "\uF49F",
        "Teeth": "\uF4A0",
        "Taxi": "\uF4A1",
        "Chopsticks": "\uF4A2",
        "SyncOccurence": "\uF4A3",
        "UnsyncOccurence": "\uF4A4",
        "GIF": "\uF4A9",
        "PrimaryCalendar": "\uF4AE",
        "SearchCalendar": "\uF4AF",
        "VideoOff": "\uF4B0",
        "MicrosoftFlowLogo": "\uF4B1",
        "BusinessCenterLogo": "\uF4B2",
        "ToDoLogoBottom": "\uF4B3",
        "ToDoLogoTop": "\uF4B4",
        "EditSolid12": "\uF4B5",
        "EditSolidMirrored12": "\uF4B6",
        "UneditableSolid12": "\uF4B7",
        "UneditableSolidMirrored12": "\uF4B8",
        "UneditableMirrored": "\uF4B9",
        "AdminALogo32": "\uF4BA",
        "AdminALogoFill32": "\uF4BB",
        "ToDoLogoInverse": "\uF4BC"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-14.js
  function initializeIcons16(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-14"',
        src: "url('".concat(baseUrl, "fabric-icons-14-5cf58db8.woff') format('woff')")
      },
      icons: {
        "Snooze": "\uF4BD",
        "WaffleOffice365": "\uF4E0",
        "ImageSearch": "\uF4E8",
        "NewsSearch": "\uF4E9",
        "VideoSearch": "\uF4EA",
        "R": "\uF4EB",
        "FontColorA": "\uF4EC",
        "FontColorSwatch": "\uF4ED",
        "LightWeight": "\uF4EE",
        "NormalWeight": "\uF4EF",
        "SemiboldWeight": "\uF4F0",
        "GroupObject": "\uF4F1",
        "UngroupObject": "\uF4F2",
        "AlignHorizontalLeft": "\uF4F3",
        "AlignHorizontalCenter": "\uF4F4",
        "AlignHorizontalRight": "\uF4F5",
        "AlignVerticalTop": "\uF4F6",
        "AlignVerticalCenter": "\uF4F7",
        "AlignVerticalBottom": "\uF4F8",
        "HorizontalDistributeCenter": "\uF4F9",
        "VerticalDistributeCenter": "\uF4FA",
        "Ellipse": "\uF4FB",
        "Line": "\uF4FC",
        "Octagon": "\uF4FD",
        "Hexagon": "\uF4FE",
        "Pentagon": "\uF4FF",
        "RightTriangle": "\uF500",
        "HalfCircle": "\uF501",
        "QuarterCircle": "\uF502",
        "ThreeQuarterCircle": "\uF503",
        "6PointStar": "\uF504",
        "12PointStar": "\uF505",
        "ArrangeBringToFront": "\uF506",
        "ArrangeSendToBack": "\uF507",
        "ArrangeSendBackward": "\uF508",
        "ArrangeBringForward": "\uF509",
        "BorderDash": "\uF50A",
        "BorderDot": "\uF50B",
        "LineStyle": "\uF50C",
        "LineThickness": "\uF50D",
        "WindowEdit": "\uF50E",
        "HintText": "\uF50F",
        "MediaAdd": "\uF510",
        "AnchorLock": "\uF511",
        "AutoHeight": "\uF512",
        "ChartSeries": "\uF513",
        "ChartXAngle": "\uF514",
        "ChartYAngle": "\uF515",
        "Combobox": "\uF516",
        "LineSpacing": "\uF517",
        "Padding": "\uF518",
        "PaddingTop": "\uF519",
        "PaddingBottom": "\uF51A",
        "PaddingLeft": "\uF51B",
        "PaddingRight": "\uF51C",
        "NavigationFlipper": "\uF51D",
        "AlignJustify": "\uF51E",
        "TextOverflow": "\uF51F",
        "VisualsFolder": "\uF520",
        "VisualsStore": "\uF521",
        "PictureCenter": "\uF522",
        "PictureFill": "\uF523",
        "PicturePosition": "\uF524",
        "PictureStretch": "\uF525",
        "PictureTile": "\uF526",
        "Slider": "\uF527",
        "SliderHandleSize": "\uF528",
        "DefaultRatio": "\uF529",
        "NumberSequence": "\uF52A",
        "GUID": "\uF52B",
        "ReportAdd": "\uF52C",
        "DashboardAdd": "\uF52D",
        "MapPinSolid": "\uF52E",
        "WebPublish": "\uF52F",
        "PieSingleSolid": "\uF530",
        "BlockedSolid": "\uF531",
        "DrillDown": "\uF532",
        "DrillDownSolid": "\uF533",
        "DrillExpand": "\uF534",
        "DrillShow": "\uF535",
        "SpecialEvent": "\uF536",
        "OneDriveFolder16": "\uF53B",
        "FunctionalManagerDashboard": "\uF542",
        "BIDashboard": "\uF543",
        "CodeEdit": "\uF544",
        "RenewalCurrent": "\uF545",
        "RenewalFuture": "\uF546",
        "SplitObject": "\uF547",
        "BulkUpload": "\uF548",
        "DownloadDocument": "\uF549",
        "GreetingCard": "\uF54B",
        "Flower": "\uF54E",
        "WaitlistConfirm": "\uF550",
        "WaitlistConfirmMirrored": "\uF551",
        "LaptopSecure": "\uF552",
        "DragObject": "\uF553",
        "EntryView": "\uF554",
        "EntryDecline": "\uF555",
        "ContactCardSettings": "\uF556",
        "ContactCardSettingsMirrored": "\uF557"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-15.js
  function initializeIcons17(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-15"',
        src: "url('".concat(baseUrl, "fabric-icons-15-3807251b.woff') format('woff')")
      },
      icons: {
        "CalendarSettings": "\uF558",
        "CalendarSettingsMirrored": "\uF559",
        "HardDriveLock": "\uF55A",
        "HardDriveUnlock": "\uF55B",
        "AccountManagement": "\uF55C",
        "ReportWarning": "\uF569",
        "TransitionPop": "\uF5B2",
        "TransitionPush": "\uF5B3",
        "TransitionEffect": "\uF5B4",
        "LookupEntities": "\uF5B5",
        "ExploreData": "\uF5B6",
        "AddBookmark": "\uF5B7",
        "SearchBookmark": "\uF5B8",
        "DrillThrough": "\uF5B9",
        "MasterDatabase": "\uF5BA",
        "CertifiedDatabase": "\uF5BB",
        "MaximumValue": "\uF5BC",
        "MinimumValue": "\uF5BD",
        "VisualStudioIDELogo32": "\uF5D0",
        "PasteAsText": "\uF5D5",
        "PasteAsCode": "\uF5D6",
        "BrowserTab": "\uF5D7",
        "BrowserTabScreenshot": "\uF5D8",
        "DesktopScreenshot": "\uF5D9",
        "FileYML": "\uF5DA",
        "ClipboardSolid": "\uF5DC",
        "FabricUserFolder": "\uF5E5",
        "FabricNetworkFolder": "\uF5E6",
        "BullseyeTarget": "\uF5F0",
        "AnalyticsView": "\uF5F1",
        "Video360Generic": "\uF609",
        "Untag": "\uF60B",
        "Leave": "\uF627",
        "Trending12": "\uF62D",
        "Blocked12": "\uF62E",
        "Warning12": "\uF62F",
        "CheckedOutByOther12": "\uF630",
        "CheckedOutByYou12": "\uF631",
        "CircleShapeSolid": "\uF63C",
        "SquareShapeSolid": "\uF63D",
        "TriangleShapeSolid": "\uF63E",
        "DropShapeSolid": "\uF63F",
        "RectangleShapeSolid": "\uF640",
        "ZoomToFit": "\uF649",
        "InsertColumnsLeft": "\uF64A",
        "InsertColumnsRight": "\uF64B",
        "InsertRowsAbove": "\uF64C",
        "InsertRowsBelow": "\uF64D",
        "DeleteColumns": "\uF64E",
        "DeleteRows": "\uF64F",
        "DeleteRowsMirrored": "\uF650",
        "DeleteTable": "\uF651",
        "AccountBrowser": "\uF652",
        "VersionControlPush": "\uF664",
        "StackedColumnChart2": "\uF666",
        "TripleColumnWide": "\uF66E",
        "QuadColumn": "\uF66F",
        "WhiteBoardApp16": "\uF673",
        "WhiteBoardApp32": "\uF674",
        "PinnedSolid": "\uF676",
        "InsertSignatureLine": "\uF677",
        "ArrangeByFrom": "\uF678",
        "Phishing": "\uF679",
        "CreateMailRule": "\uF67A",
        "PublishCourse": "\uF699",
        "DictionaryRemove": "\uF69A",
        "UserRemove": "\uF69B",
        "UserEvent": "\uF69C",
        "Encryption": "\uF69D",
        "PasswordField": "\uF6AA",
        "OpenInNewTab": "\uF6AB",
        "Hide3": "\uF6AC",
        "VerifiedBrandSolid": "\uF6AD",
        "MarkAsProtected": "\uF6AE",
        "AuthenticatorApp": "\uF6B1",
        "WebTemplate": "\uF6B2",
        "DefenderTVM": "\uF6B3",
        "MedalSolid": "\uF6B9",
        "D365TalentLearn": "\uF6BB",
        "D365TalentInsight": "\uF6BC",
        "D365TalentHRCore": "\uF6BD",
        "BacklogList": "\uF6BF",
        "ButtonControl": "\uF6C0",
        "TableGroup": "\uF6D9",
        "MountainClimbing": "\uF6DB",
        "TagUnknown": "\uF6DF",
        "TagUnknownMirror": "\uF6E0",
        "TagUnknown12": "\uF6E1",
        "TagUnknown12Mirror": "\uF6E2",
        "Link12": "\uF6E3",
        "Presentation": "\uF6E4",
        "Presentation12": "\uF6E5",
        "Lock12": "\uF6E6",
        "BuildDefinition": "\uF6E9",
        "ReleaseDefinition": "\uF6EA",
        "SaveTemplate": "\uF6EC",
        "UserGauge": "\uF6ED",
        "BlockedSiteSolid12": "\uF70A",
        "TagSolid": "\uF70E",
        "OfficeChat": "\uF70F"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-16.js
  function initializeIcons18(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-16"',
        src: "url('".concat(baseUrl, "fabric-icons-16-9cf93f3b.woff') format('woff')")
      },
      icons: {
        "OfficeChatSolid": "\uF710",
        "MailSchedule": "\uF72E",
        "WarningSolid": "\uF736",
        "Blocked2Solid": "\uF737",
        "SkypeCircleArrow": "\uF747",
        "SkypeArrow": "\uF748",
        "SyncStatus": "\uF751",
        "SyncStatusSolid": "\uF752",
        "ProjectDocument": "\uF759",
        "ToDoLogoOutline": "\uF75B",
        "VisioOnlineLogoFill32": "\uF75F",
        "VisioOnlineLogo32": "\uF760",
        "VisioOnlineLogoCloud32": "\uF761",
        "VisioDiagramSync": "\uF762",
        "Event12": "\uF763",
        "EventDateMissed12": "\uF764",
        "UserOptional": "\uF767",
        "ResponsesMenu": "\uF768",
        "DoubleDownArrow": "\uF769",
        "DistributeDown": "\uF76A",
        "BookmarkReport": "\uF76B",
        "FilterSettings": "\uF76C",
        "GripperDotsVertical": "\uF772",
        "MailAttached": "\uF774",
        "AddIn": "\uF775",
        "LinkedDatabase": "\uF779",
        "TableLink": "\uF77A",
        "PromotedDatabase": "\uF77D",
        "BarChartVerticalFilter": "\uF77E",
        "BarChartVerticalFilterSolid": "\uF77F",
        "MicOff2": "\uF781",
        "MicrosoftTranslatorLogo": "\uF782",
        "ShowTimeAs": "\uF787",
        "FileRequest": "\uF789",
        "WorkItemAlert": "\uF78F",
        "PowerBILogo16": "\uF790",
        "PowerBILogoBackplate16": "\uF791",
        "BulletedListText": "\uF792",
        "BulletedListBullet": "\uF793",
        "BulletedListTextMirrored": "\uF794",
        "BulletedListBulletMirrored": "\uF795",
        "NumberedListText": "\uF796",
        "NumberedListNumber": "\uF797",
        "NumberedListTextMirrored": "\uF798",
        "NumberedListNumberMirrored": "\uF799",
        "RemoveLinkChain": "\uF79A",
        "RemoveLinkX": "\uF79B",
        "FabricTextHighlight": "\uF79C",
        "ClearFormattingA": "\uF79D",
        "ClearFormattingEraser": "\uF79E",
        "Photo2Fill": "\uF79F",
        "IncreaseIndentText": "\uF7A0",
        "IncreaseIndentArrow": "\uF7A1",
        "DecreaseIndentText": "\uF7A2",
        "DecreaseIndentArrow": "\uF7A3",
        "IncreaseIndentTextMirrored": "\uF7A4",
        "IncreaseIndentArrowMirrored": "\uF7A5",
        "DecreaseIndentTextMirrored": "\uF7A6",
        "DecreaseIndentArrowMirrored": "\uF7A7",
        "CheckListText": "\uF7A8",
        "CheckListCheck": "\uF7A9",
        "CheckListTextMirrored": "\uF7AA",
        "CheckListCheckMirrored": "\uF7AB",
        "NumberSymbol": "\uF7AC",
        "Coupon": "\uF7BC",
        "VerifiedBrand": "\uF7BD",
        "ReleaseGate": "\uF7BE",
        "ReleaseGateCheck": "\uF7BF",
        "ReleaseGateError": "\uF7C0",
        "M365InvoicingLogo": "\uF7C1",
        "RemoveFromShoppingList": "\uF7D5",
        "ShieldAlert": "\uF7D7",
        "FabricTextHighlightComposite": "\uF7DA",
        "Dataflows": "\uF7DD",
        "GenericScanFilled": "\uF7DE",
        "DiagnosticDataBarTooltip": "\uF7DF",
        "SaveToMobile": "\uF7E0",
        "Orientation2": "\uF7E1",
        "ScreenCast": "\uF7E2",
        "ShowGrid": "\uF7E3",
        "SnapToGrid": "\uF7E4",
        "ContactList": "\uF7E5",
        "NewMail": "\uF7EA",
        "EyeShadow": "\uF7EB",
        "FabricFolderConfirm": "\uF7FF",
        "InformationBarriers": "\uF803",
        "CommentActive": "\uF804",
        "ColumnVerticalSectionEdit": "\uF806",
        "WavingHand": "\uF807",
        "ShakeDevice": "\uF80A",
        "SmartGlassRemote": "\uF80B",
        "Rotate90Clockwise": "\uF80D",
        "Rotate90CounterClockwise": "\uF80E",
        "CampaignTemplate": "\uF811",
        "ChartTemplate": "\uF812",
        "PageListFilter": "\uF813",
        "SecondaryNav": "\uF814",
        "ColumnVerticalSection": "\uF81E",
        "SkypeCircleSlash": "\uF825",
        "SkypeSlash": "\uF826"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-17.js
  function initializeIcons19(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-17"',
        src: "url('".concat(baseUrl, "fabric-icons-17-0c4ed701.woff') format('woff')")
      },
      icons: {
        "CustomizeToolbar": "\uF828",
        "DuplicateRow": "\uF82A",
        "RemoveFromTrash": "\uF82B",
        "MailOptions": "\uF82C",
        "Childof": "\uF82D",
        "Footer": "\uF82E",
        "Header": "\uF82F",
        "BarChartVerticalFill": "\uF830",
        "StackedColumnChart2Fill": "\uF831",
        "PlainText": "\uF834",
        "AccessibiltyChecker": "\uF835",
        "DatabaseSync": "\uF842",
        "ReservationOrders": "\uF845",
        "TabOneColumn": "\uF849",
        "TabTwoColumn": "\uF84A",
        "TabThreeColumn": "\uF84B",
        "BulletedTreeList": "\uF84C",
        "MicrosoftTranslatorLogoGreen": "\uF852",
        "MicrosoftTranslatorLogoBlue": "\uF853",
        "InternalInvestigation": "\uF854",
        "AddReaction": "\uF85D",
        "ContactHeart": "\uF862",
        "VisuallyImpaired": "\uF866",
        "EventToDoLogo": "\uF869",
        "Variable2": "\uF86D",
        "ModelingView": "\uF871",
        "DisconnectVirtualMachine": "\uF873",
        "ReportLock": "\uF875",
        "Uneditable2": "\uF876",
        "Uneditable2Mirrored": "\uF877",
        "BarChartVerticalEdit": "\uF89D",
        "GlobalNavButtonActive": "\uF89F",
        "PollResults": "\uF8A0",
        "Rerun": "\uF8A1",
        "QandA": "\uF8A2",
        "QandAMirror": "\uF8A3",
        "BookAnswers": "\uF8A4",
        "AlertSettings": "\uF8B6",
        "TrimStart": "\uF8BB",
        "TrimEnd": "\uF8BC",
        "TableComputed": "\uF8F5",
        "DecreaseIndentLegacy": "\uE290",
        "IncreaseIndentLegacy": "\uE291",
        "SizeLegacy": "\uE2B2"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/iconAliases.js
  var registerIconAliases = function() {
    registerIconAlias("trash", "delete");
    registerIconAlias("onedrive", "onedrivelogo");
    registerIconAlias("alertsolid12", "eventdatemissed12");
    registerIconAlias("sixpointstar", "6pointstar");
    registerIconAlias("twelvepointstar", "12pointstar");
    registerIconAlias("toggleon", "toggleleft");
    registerIconAlias("toggleoff", "toggleright");
  };

  // ../node_modules/@fluentui/font-icons-mdl2/lib/version.js
  setVersion("@fluentui/font-icons-mdl2", "8.5.24");

  // ../node_modules/@fluentui/font-icons-mdl2/lib/index.js
  var DEFAULT_BASE_URL = "".concat(FLUENT_CDN_BASE_URL, "/assets/icons/");
  var win = getWindow2();
  function initializeIcons20(baseUrl, options) {
    var _a5, _b;
    if (baseUrl === void 0) {
      baseUrl = ((_a5 = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _a5 === void 0 ? void 0 : _a5.iconBaseUrl) || ((_b = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b === void 0 ? void 0 : _b.fontBaseUrl) || DEFAULT_BASE_URL;
    }
    [initializeIcons, initializeIcons2, initializeIcons3, initializeIcons4, initializeIcons5, initializeIcons6, initializeIcons7, initializeIcons8, initializeIcons9, initializeIcons10, initializeIcons11, initializeIcons12, initializeIcons13, initializeIcons14, initializeIcons15, initializeIcons16, initializeIcons17, initializeIcons18, initializeIcons19].forEach(function(initialize) {
      return initialize(baseUrl, options);
    });
    registerIconAliases();
  }

  // ../node_modules/@fluentui/react/lib/version.js
  setVersion("@fluentui/react", "8.111.1");

  // ../node_modules/@fluentui/react/lib/components/Callout/Callout.js
  var React201 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.base.js
  var React197 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/common/DirectionalHint.js
  var DirectionalHint = {
    /**
     * Appear above the target element, with the left edges of the callout and target aligning.
     */
    topLeftEdge: 0,
    /**
     * Appear above the target element, with the centers of the callout and target aligning.
     */
    topCenter: 1,
    /**
     * Appear above the target element, with the right edges of the callout and target aligning.
     */
    topRightEdge: 2,
    /**
     * Appear above the target element, aligning with the target element such that the callout tends toward
     * the center of the screen.
     */
    topAutoEdge: 3,
    /**
     * Appear below the target element, with the left edges of the callout and target aligning.
     */
    bottomLeftEdge: 4,
    /**
     * Appear below the target element, with the centers of the callout and target aligning.
     */
    bottomCenter: 5,
    /**
     * Appear below the target element, with the right edges of the callout and target aligning.
     */
    bottomRightEdge: 6,
    /**
     * Appear below the target element, aligning with the target element such that the callout tends toward
     * the center of the screen.
     */
    bottomAutoEdge: 7,
    /**
     * Appear to the left of the target element, with the top edges of the callout and target aligning.
     */
    leftTopEdge: 8,
    /**
     * Appear to the left of the target element, with the centers of the callout and target aligning.
     */
    leftCenter: 9,
    /**
     * Appear to the left of the target element, with the bottom edges of the callout and target aligning.
     */
    leftBottomEdge: 10,
    /**
     * Appear to the right of the target element, with the top edges of the callout and target aligning.
     */
    rightTopEdge: 11,
    /**
     * Appear to the right of the target element, with the centers of the callout and target aligning.
     */
    rightCenter: 12,
    /**
     * Appear to the right of the target element, with the bottom edges of the callout and target aligning.
     */
    rightBottomEdge: 13
  };

  // ../node_modules/@fluentui/react/lib/utilities/positioning/positioning.types.js
  var RectangleEdge;
  (function(RectangleEdge2) {
    RectangleEdge2[RectangleEdge2["top"] = 1] = "top";
    RectangleEdge2[RectangleEdge2["bottom"] = -1] = "bottom";
    RectangleEdge2[RectangleEdge2["left"] = 2] = "left";
    RectangleEdge2[RectangleEdge2["right"] = -2] = "right";
  })(RectangleEdge || (RectangleEdge = {}));
  var Position;
  (function(Position2) {
    Position2[Position2["top"] = 0] = "top";
    Position2[Position2["bottom"] = 1] = "bottom";
    Position2[Position2["start"] = 2] = "start";
    Position2[Position2["end"] = 3] = "end";
  })(Position || (Position = {}));

  // ../node_modules/@fluentui/react/lib/utilities/positioning/positioning.js
  var _a3;
  function _createPositionData(targetEdge, alignmentEdge, isAuto2) {
    return {
      targetEdge,
      alignmentEdge,
      isAuto: isAuto2
    };
  }
  var DirectionalDictionary = (_a3 = {}, _a3[DirectionalHint.topLeftEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.left), _a3[DirectionalHint.topCenter] = _createPositionData(RectangleEdge.top), _a3[DirectionalHint.topRightEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.right), _a3[DirectionalHint.topAutoEdge] = _createPositionData(RectangleEdge.top, void 0, true), _a3[DirectionalHint.bottomLeftEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.left), _a3[DirectionalHint.bottomCenter] = _createPositionData(RectangleEdge.bottom), _a3[DirectionalHint.bottomRightEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.right), _a3[DirectionalHint.bottomAutoEdge] = _createPositionData(RectangleEdge.bottom, void 0, true), _a3[DirectionalHint.leftTopEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.top), _a3[DirectionalHint.leftCenter] = _createPositionData(RectangleEdge.left), _a3[DirectionalHint.leftBottomEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.bottom), _a3[DirectionalHint.rightTopEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.top), _a3[DirectionalHint.rightCenter] = _createPositionData(RectangleEdge.right), _a3[DirectionalHint.rightBottomEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.bottom), _a3);
  function _isRectangleWithinBounds(rect, boundingRect) {
    if (rect.top < boundingRect.top) {
      return false;
    }
    if (rect.bottom > boundingRect.bottom) {
      return false;
    }
    if (rect.left < boundingRect.left) {
      return false;
    }
    if (rect.right > boundingRect.right) {
      return false;
    }
    return true;
  }
  function _getOutOfBoundsEdges(rect, boundingRect) {
    var outOfBounds = [];
    if (rect.top < boundingRect.top) {
      outOfBounds.push(RectangleEdge.top);
    }
    if (rect.bottom > boundingRect.bottom) {
      outOfBounds.push(RectangleEdge.bottom);
    }
    if (rect.left < boundingRect.left) {
      outOfBounds.push(RectangleEdge.left);
    }
    if (rect.right > boundingRect.right) {
      outOfBounds.push(RectangleEdge.right);
    }
    return outOfBounds;
  }
  function _getEdgeValue(rect, edge) {
    return rect[RectangleEdge[edge]];
  }
  function _setEdgeValue(rect, edge, value) {
    rect[RectangleEdge[edge]] = value;
    return rect;
  }
  function _getCenterValue(rect, edge) {
    var edges2 = _getFlankingEdges(edge);
    return (_getEdgeValue(rect, edges2.positiveEdge) + _getEdgeValue(rect, edges2.negativeEdge)) / 2;
  }
  function _getRelativeEdgeValue(edge, value) {
    if (edge > 0) {
      return value;
    } else {
      return value * -1;
    }
  }
  function _getRelativeRectEdgeValue(edge, rect) {
    return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));
  }
  function _getRelativeEdgeDifference(rect, hostRect, edge) {
    var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);
    return _getRelativeEdgeValue(edge, edgeDifference);
  }
  function _moveEdge(rect, edge, newValue, maintainSize) {
    if (maintainSize === void 0) {
      maintainSize = true;
    }
    var difference = _getEdgeValue(rect, edge) - newValue;
    var returnRect = _setEdgeValue(rect, edge, newValue);
    if (maintainSize) {
      returnRect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);
    }
    return returnRect;
  }
  function _alignEdges(rect, target, edge, gap2) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap2));
  }
  function _alignOppositeEdges(rect, target, targetEdge, gap2) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    var oppositeEdge = targetEdge * -1;
    var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap2);
    return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);
  }
  function _isEdgeInBounds(rect, bounds, edge) {
    var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);
    return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);
  }
  function _getOutOfBoundsDegree(rect, bounds) {
    var breakingEdges = _getOutOfBoundsEdges(rect, bounds);
    var total = 0;
    for (var _i = 0, breakingEdges_1 = breakingEdges; _i < breakingEdges_1.length; _i++) {
      var edge = breakingEdges_1[_i];
      total += Math.pow(_getRelativeEdgeDifference(rect, bounds, edge), 2);
    }
    return total;
  }
  function _flipToFit(rect, target, bounding, positionData, gap2) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    var directions = [
      RectangleEdge.left,
      RectangleEdge.right,
      RectangleEdge.bottom,
      RectangleEdge.top
    ];
    if (getRTL2()) {
      directions[0] *= -1;
      directions[1] *= -1;
    }
    var currentEstimate = rect;
    var currentEdge = positionData.targetEdge;
    var currentAlignment = positionData.alignmentEdge;
    var oobDegree;
    var bestEdge = currentEdge;
    var bestAlignment = currentAlignment;
    for (var i4 = 0; i4 < 4; i4++) {
      if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {
        var currentOOBDegree = _getOutOfBoundsDegree(currentEstimate, bounding);
        if (!oobDegree || currentOOBDegree < oobDegree) {
          oobDegree = currentOOBDegree;
          bestEdge = currentEdge;
          bestAlignment = currentAlignment;
        }
        directions.splice(directions.indexOf(currentEdge), 1);
        if (directions.length > 0) {
          if (directions.indexOf(currentEdge * -1) > -1) {
            currentEdge = currentEdge * -1;
          } else {
            currentAlignment = currentEdge;
            currentEdge = directions.slice(-1)[0];
          }
          currentEstimate = _estimatePosition(rect, target, { targetEdge: currentEdge, alignmentEdge: currentAlignment }, gap2);
        }
      } else {
        return {
          elementRectangle: currentEstimate,
          targetEdge: currentEdge,
          alignmentEdge: currentAlignment
        };
      }
    }
    currentEstimate = _estimatePosition(rect, target, { targetEdge: bestEdge, alignmentEdge: bestAlignment }, gap2);
    return {
      elementRectangle: currentEstimate,
      targetEdge: bestEdge,
      alignmentEdge: bestAlignment
    };
  }
  function _flipAlignmentEdge(elementEstimate, target, gap2, coverTarget2) {
    var alignmentEdge = elementEstimate.alignmentEdge, targetEdge = elementEstimate.targetEdge, elementRectangle = elementEstimate.elementRectangle;
    var oppositeEdge = alignmentEdge * -1;
    var newEstimate = _estimatePosition(elementRectangle, target, { targetEdge, alignmentEdge: oppositeEdge }, gap2, coverTarget2);
    return {
      elementRectangle: newEstimate,
      targetEdge,
      alignmentEdge: oppositeEdge
    };
  }
  function _adjustFitWithinBounds(element2, target, bounding, positionData, gap2, directionalHintFixed, coverTarget2) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    var alignmentEdge = positionData.alignmentEdge, alignTargetEdge = positionData.alignTargetEdge;
    var elementEstimate = {
      elementRectangle: element2,
      targetEdge: positionData.targetEdge,
      alignmentEdge
    };
    if (!directionalHintFixed && !coverTarget2) {
      elementEstimate = _flipToFit(element2, target, bounding, positionData, gap2);
    }
    var outOfBounds = _getOutOfBoundsEdges(elementEstimate.elementRectangle, bounding);
    var fixedEdge = directionalHintFixed ? -elementEstimate.targetEdge : void 0;
    if (outOfBounds.length > 0) {
      if (alignTargetEdge) {
        if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {
          var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap2, coverTarget2);
          if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {
            return flippedElementEstimate;
          } else {
            elementEstimate = _alignOutOfBoundsEdges(_getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding), elementEstimate, bounding, fixedEdge);
          }
        } else {
          elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
        }
      } else {
        elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
      }
    }
    return elementEstimate;
  }
  function _alignOutOfBoundsEdges(outOfBoundsEdges, elementEstimate, bounding, preserveEdge) {
    for (var _i = 0, outOfBoundsEdges_1 = outOfBoundsEdges; _i < outOfBoundsEdges_1.length; _i++) {
      var direction = outOfBoundsEdges_1[_i];
      var edgeAttempt = void 0;
      if (preserveEdge && preserveEdge === direction * -1) {
        edgeAttempt = _moveEdge(elementEstimate.elementRectangle, direction, _getEdgeValue(bounding, direction), false);
        elementEstimate.forcedInBounds = true;
      } else {
        edgeAttempt = _alignEdges(elementEstimate.elementRectangle, bounding, direction);
        var inBounds = _isEdgeInBounds(edgeAttempt, bounding, direction * -1);
        if (!inBounds) {
          edgeAttempt = _moveEdge(edgeAttempt, direction * -1, _getEdgeValue(bounding, direction * -1), false);
          elementEstimate.forcedInBounds = true;
        }
      }
      elementEstimate.elementRectangle = edgeAttempt;
    }
    return elementEstimate;
  }
  function _centerEdgeToPoint(rect, edge, point6) {
    var positiveEdge = _getFlankingEdges(edge).positiveEdge;
    var elementMiddle = _getCenterValue(rect, edge);
    var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);
    return _moveEdge(rect, positiveEdge, point6 - distanceToMiddle);
  }
  function _estimatePosition(elementToPosition, target, positionData, gap2, coverTarget2) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    var estimatedElementPosition = new Rectangle(elementToPosition.left, elementToPosition.right, elementToPosition.top, elementToPosition.bottom);
    var alignmentEdge = positionData.alignmentEdge, targetEdge = positionData.targetEdge;
    var elementEdge = coverTarget2 ? targetEdge : targetEdge * -1;
    estimatedElementPosition = coverTarget2 ? _alignEdges(estimatedElementPosition, target, targetEdge, gap2) : _alignOppositeEdges(estimatedElementPosition, target, targetEdge, gap2);
    if (!alignmentEdge) {
      var targetMiddlePoint = _getCenterValue(target, targetEdge);
      estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);
    } else {
      estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);
    }
    return estimatedElementPosition;
  }
  function _getFlankingEdges(edge) {
    if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {
      return {
        positiveEdge: RectangleEdge.left,
        negativeEdge: RectangleEdge.right
      };
    } else {
      return {
        positiveEdge: RectangleEdge.top,
        negativeEdge: RectangleEdge.bottom
      };
    }
  }
  function _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {
    if (bounds && Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) > Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {
      return returnEdge * -1;
    }
    return returnEdge;
  }
  function _isEdgeOnBounds(elementRectangle, edge, bounds) {
    return bounds !== void 0 && _getEdgeValue(elementRectangle, edge) === _getEdgeValue(bounds, edge);
  }
  function _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget2, doNotFinalizeReturnEdge, forceWithinBounds) {
    var returnValue = {};
    var hostRect = _getRectangleFromElement(hostElement);
    var elementEdge = coverTarget2 ? targetEdge : targetEdge * -1;
    var returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;
    if (!doNotFinalizeReturnEdge || _isEdgeOnBounds(elementRectangle, getOppositeEdge(returnEdge), bounds)) {
      returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);
    }
    returnValue[RectangleEdge[elementEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);
    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);
    if (forceWithinBounds) {
      returnValue[RectangleEdge[elementEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge * -1);
      returnValue[RectangleEdge[returnEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge * -1);
    }
    return returnValue;
  }
  function _calculateActualBeakWidthInPixels(beakWidth) {
    return Math.sqrt(beakWidth * beakWidth * 2);
  }
  function _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {
    if (directionalHint === void 0) {
      directionalHint = DirectionalHint.bottomAutoEdge;
    }
    if (previousPositions) {
      return {
        alignmentEdge: previousPositions.alignmentEdge,
        isAuto: previousPositions.isAuto,
        targetEdge: previousPositions.targetEdge
      };
    }
    var positionInformation = __assign({}, DirectionalDictionary[directionalHint]);
    if (getRTL2()) {
      if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {
        positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;
      }
      return directionalHintForRTL !== void 0 ? DirectionalDictionary[directionalHintForRTL] : positionInformation;
    }
    return positionInformation;
  }
  function _getAlignmentData(positionData, target, boundingRect, coverTarget2, alignTargetEdge) {
    if (positionData.isAuto) {
      positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);
    }
    positionData.alignTargetEdge = alignTargetEdge;
    return positionData;
  }
  function getClosestEdge(targetEdge, target, boundingRect) {
    var targetCenter = _getCenterValue(target, targetEdge);
    var boundingCenter = _getCenterValue(boundingRect, targetEdge);
    var _a5 = _getFlankingEdges(targetEdge), positiveEdge = _a5.positiveEdge, negativeEdge = _a5.negativeEdge;
    if (targetCenter <= boundingCenter) {
      return positiveEdge;
    } else {
      return negativeEdge;
    }
  }
  function _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap2, directionalHintFixed, coverTarget2) {
    var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap2, coverTarget2);
    if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {
      return {
        elementRectangle: estimatedElementPosition,
        targetEdge: positionData.targetEdge,
        alignmentEdge: positionData.alignmentEdge
      };
    } else {
      return _adjustFitWithinBounds(estimatedElementPosition, target, bounding, positionData, gap2, directionalHintFixed, coverTarget2);
    }
  }
  function _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {
    var targetEdge = elementPosition.targetEdge * -1;
    var actualElement = new Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);
    var returnValue = {};
    var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);
    var beakEdgeDifference = _getRelativeEdgeDifference(elementPosition.elementRectangle, elementPosition.targetRectangle, targetEdge);
    var showBeak = beakEdgeDifference > Math.abs(_getEdgeValue(positionedBeak, targetEdge));
    returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);
    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);
    return {
      elementPosition: __assign({}, returnValue),
      closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),
      targetEdge,
      hideBeak: !showBeak
    };
  }
  function _positionBeak(beakWidth, elementPosition) {
    var target = elementPosition.targetRectangle;
    var _a5 = _getFlankingEdges(elementPosition.targetEdge), positiveEdge = _a5.positiveEdge, negativeEdge = _a5.negativeEdge;
    var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);
    var elementBounds = new Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);
    var beakPosition = new Rectangle(0, beakWidth, 0, beakWidth);
    beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);
    beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));
    if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {
      beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);
    } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {
      beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);
    }
    return beakPosition;
  }
  function _getRectangleFromElement(element2) {
    var clientRect = element2.getBoundingClientRect();
    return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);
  }
  function _getRectangleFromIRect(rect) {
    return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);
  }
  function _getTargetRect(bounds, target) {
    var targetRectangle;
    if (target) {
      if (!!target.preventDefault) {
        var ev = target;
        targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);
      } else if (!!target.getBoundingClientRect) {
        targetRectangle = _getRectangleFromElement(target);
      } else {
        var rectOrPoint = target;
        var left = rectOrPoint.left || rectOrPoint.x;
        var top_1 = rectOrPoint.top || rectOrPoint.y;
        var right = rectOrPoint.right || left;
        var bottom = rectOrPoint.bottom || top_1;
        targetRectangle = new Rectangle(left, right, top_1, bottom);
      }
      if (!_isRectangleWithinBounds(targetRectangle, bounds)) {
        var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);
        for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {
          var direction = outOfBounds_1[_i];
          targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];
        }
      }
    } else {
      targetRectangle = new Rectangle(0, 0, 0, 0);
    }
    return targetRectangle;
  }
  function _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {
    var gap2 = props.gapSpace ? props.gapSpace : 0;
    var targetRect = _getTargetRect(boundingRect, props.target);
    var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);
    var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap2, props.directionalHintFixed, props.coverTarget);
    return __assign(__assign({}, positionedElement), { targetRectangle: targetRect });
  }
  function _finalizePositionData(positionedElement, hostElement, bounds, coverTarget2, doNotFinalizeReturnEdge) {
    var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget2, doNotFinalizeReturnEdge, positionedElement.forcedInBounds);
    return {
      elementPosition: finalizedElement,
      targetEdge: positionedElement.targetEdge,
      alignmentEdge: positionedElement.alignmentEdge
    };
  }
  function _positionCallout(props, hostElement, callout, previousPositions, doNotFinalizeReturnEdge) {
    var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;
    var gap2 = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);
    var positionProps = props;
    positionProps.gapSpace = gap2;
    var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);
    var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);
    var beakPositioned = _positionBeak(beakWidth, positionedElement);
    var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);
    return __assign(__assign({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge)), { beakPosition: finalizedBeakPosition });
  }
  function _positionCard(props, hostElement, callout, previousPositions) {
    return _positionCallout(props, hostElement, callout, previousPositions, true);
  }
  function positionCallout(props, hostElement, elementToPosition, previousPositions) {
    return _positionCallout(props, hostElement, elementToPosition, previousPositions);
  }
  function positionCard(props, hostElement, elementToPosition, previousPositions) {
    return _positionCard(props, hostElement, elementToPosition, previousPositions);
  }
  function getOppositeEdge(edge) {
    return edge * -1;
  }
  function _getBoundsFromTargetWindow(target, targetWindow) {
    var segments = void 0;
    if (targetWindow.getWindowSegments) {
      segments = targetWindow.getWindowSegments();
    }
    if (segments === void 0 || segments.length <= 1) {
      return {
        top: 0,
        left: 0,
        right: targetWindow.innerWidth,
        bottom: targetWindow.innerHeight,
        width: targetWindow.innerWidth,
        height: targetWindow.innerHeight
      };
    }
    var x2 = 0;
    var y3 = 0;
    if (target !== null && !!target.getBoundingClientRect) {
      var clientRect = target.getBoundingClientRect();
      x2 = (clientRect.left + clientRect.right) / 2;
      y3 = (clientRect.top + clientRect.bottom) / 2;
    } else if (target !== null) {
      x2 = target.left || target.x;
      y3 = target.top || target.y;
    }
    var bounds = { top: 0, left: 0, right: 0, bottom: 0, width: 0, height: 0 };
    for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
      var segment = segments_1[_i];
      if (x2 && segment.left <= x2 && segment.right >= x2 && y3 && segment.top <= y3 && segment.bottom >= y3) {
        bounds = {
          top: segment.top,
          left: segment.left,
          right: segment.right,
          bottom: segment.bottom,
          width: segment.width,
          height: segment.height
        };
      }
    }
    return bounds;
  }
  function getBoundsFromTargetWindow(target, targetWindow) {
    return _getBoundsFromTargetWindow(target, targetWindow);
  }

  // ../node_modules/@fluentui/react/lib/components/Popup/Popup.js
  var React196 = __toESM(require_react());

  // ../node_modules/@fluentui/react-hooks/lib/version.js
  setVersion("@fluentui/react-hooks", "8.6.29");

  // ../node_modules/@fluentui/react-hooks/lib/useAsync.js
  var React187 = __toESM(require_react());
  function useAsync() {
    var asyncRef = React187.useRef();
    if (!asyncRef.current) {
      asyncRef.current = new Async();
    }
    React187.useEffect(function() {
      return function() {
        var _a5;
        (_a5 = asyncRef.current) === null || _a5 === void 0 ? void 0 : _a5.dispose();
        asyncRef.current = void 0;
      };
    }, []);
    return asyncRef.current;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useConst.js
  var React188 = __toESM(require_react());
  function useConst(initialValue) {
    var ref = React188.useRef();
    if (ref.current === void 0) {
      ref.current = {
        value: typeof initialValue === "function" ? initialValue() : initialValue
      };
    }
    return ref.current.value;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useControllableValue.js
  var React189 = __toESM(require_react());
  function useControllableValue(controlledValue, defaultUncontrolledValue, onChange) {
    var _a5 = React189.useState(defaultUncontrolledValue), value = _a5[0], setValue = _a5[1];
    var isControlled2 = useConst(controlledValue !== void 0);
    var currentValue = isControlled2 ? controlledValue : value;
    var valueRef = React189.useRef(currentValue);
    var onChangeRef = React189.useRef(onChange);
    React189.useEffect(function() {
      valueRef.current = currentValue;
      onChangeRef.current = onChange;
    });
    var setValueOrCallOnChange = useConst(function() {
      return function(update, ev) {
        var newValue = typeof update === "function" ? update(valueRef.current) : update;
        if (onChangeRef.current) {
          onChangeRef.current(ev, newValue);
        }
        if (!isControlled2) {
          setValue(newValue);
        }
      };
    });
    return [currentValue, setValueOrCallOnChange];
  }

  // ../node_modules/@fluentui/react-hooks/lib/useId.js
  var React190 = __toESM(require_react());
  function useId3(prefix2, providedId) {
    var ref = React190.useRef(providedId);
    if (!ref.current) {
      ref.current = getId(prefix2);
    }
    return ref.current;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useMergedRefs.js
  var React191 = __toESM(require_react());
  function useMergedRefs2() {
    var refs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      refs[_i] = arguments[_i];
    }
    var mergedCallback = React191.useCallback(function(value) {
      mergedCallback.current = value;
      for (var _i2 = 0, refs_1 = refs; _i2 < refs_1.length; _i2++) {
        var ref = refs_1[_i2];
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
      }
    }, __spreadArray([], refs, true));
    return mergedCallback;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useOnEvent.js
  var React192 = __toESM(require_react());
  function useOnEvent(element2, eventName, callback, useCapture) {
    var callbackRef = React192.useRef(callback);
    callbackRef.current = callback;
    React192.useEffect(function() {
      var actualElement = element2 && "current" in element2 ? element2.current : element2;
      if (!actualElement) {
        return;
      }
      var dispose = on(actualElement, eventName, function(ev) {
        return callbackRef.current(ev);
      }, useCapture);
      return dispose;
    }, [element2, eventName, useCapture]);
  }

  // ../node_modules/@fluentui/react-hooks/lib/usePrevious.js
  var import_react60 = __toESM(require_react());
  function usePrevious2(value) {
    var ref = (0, import_react60.useRef)();
    (0, import_react60.useEffect)(function() {
      ref.current = value;
    });
    return ref.current;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useTarget.js
  var React194 = __toESM(require_react());

  // ../node_modules/@fluentui/react-window-provider/lib/WindowProvider.js
  var React193 = __toESM(require_react());
  var WindowContext = React193.createContext({
    window: typeof window === "object" ? window : void 0
  });
  var useWindow = function() {
    return React193.useContext(WindowContext).window;
  };

  // ../node_modules/@fluentui/react-hooks/lib/useTarget.js
  function useTarget(target, hostElement) {
    var previousTargetProp = React194.useRef();
    var targetRef = React194.useRef(null);
    var targetWindow = useWindow();
    if (!target || target !== previousTargetProp.current || typeof target === "string") {
      var currentElement = hostElement === null || hostElement === void 0 ? void 0 : hostElement.current;
      if (target) {
        if (typeof target === "string") {
          var currentDoc = getDocument(currentElement);
          targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;
        } else if ("stopPropagation" in target) {
          targetRef.current = target;
        } else if ("getBoundingClientRect" in target) {
          targetRef.current = target;
        } else if ("current" in target) {
          targetRef.current = target.current;
        } else {
          targetRef.current = target;
        }
      }
      previousTargetProp.current = target;
    }
    return [targetRef, targetWindow];
  }

  // ../node_modules/@fluentui/react-hooks/lib/useWarnings.js
  var React195 = __toESM(require_react());
  var warningId = 0;
  function useWarnings(options) {
    if (true) {
      var name_1 = options.name, props = options.props, _a5 = options.other, other = _a5 === void 0 ? [] : _a5, conditionallyRequired = options.conditionallyRequired, deprecations = options.deprecations, mutuallyExclusive = options.mutuallyExclusive, controlledUsage = options.controlledUsage;
      var hasWarnedRef = React195.useRef(false);
      var componentId = useConst(function() {
        return "useWarnings_".concat(warningId++);
      });
      var oldProps = usePrevious2(props);
      if (!hasWarnedRef.current) {
        hasWarnedRef.current = true;
        for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {
          var warning2 = other_1[_i];
          warn(warning2);
        }
        if (conditionallyRequired) {
          for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {
            var req = conditionallyRequired_1[_b];
            warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);
          }
        }
        deprecations && warnDeprecations(name_1, props, deprecations);
        mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);
      }
      controlledUsage && warnControlledUsage(__assign(__assign({}, controlledUsage), { componentId, props, componentName: name_1, oldProps }));
    }
  }

  // ../node_modules/@fluentui/react/lib/components/Popup/Popup.js
  function useScrollbarAsync(props, root3) {
    var async = useAsync();
    var _a5 = React196.useState(false), needsVerticalScrollBarState = _a5[0], setNeedsVerticalScrollBar = _a5[1];
    React196.useEffect(function() {
      async.requestAnimationFrame(function() {
        var _a6;
        if (props.style && props.style.overflowY) {
          return;
        }
        var needsVerticalScrollBar = false;
        if (root3 && root3.current && ((_a6 = root3.current) === null || _a6 === void 0 ? void 0 : _a6.firstElementChild)) {
          var rootHeight = root3.current.clientHeight;
          var firstChildHeight = root3.current.firstElementChild.clientHeight;
          if (rootHeight > 0 && firstChildHeight > rootHeight) {
            needsVerticalScrollBar = firstChildHeight - rootHeight > 1;
          }
        }
        if (needsVerticalScrollBarState !== needsVerticalScrollBar) {
          setNeedsVerticalScrollBar(needsVerticalScrollBar);
        }
      });
      return function() {
        return async.dispose();
      };
    });
    return needsVerticalScrollBarState;
  }
  function defaultFocusRestorer(options) {
    var originalElement = options.originalElement, containsFocus = options.containsFocus;
    if (originalElement && containsFocus && originalElement !== getWindow2()) {
      setTimeout(function() {
        var _a5;
        (_a5 = originalElement.focus) === null || _a5 === void 0 ? void 0 : _a5.call(originalElement);
      }, 0);
    }
  }
  function useRestoreFocus(props, root3) {
    var _a5 = props.onRestoreFocus, onRestoreFocus = _a5 === void 0 ? defaultFocusRestorer : _a5;
    var originalFocusedElement = React196.useRef();
    var containsFocus = React196.useRef(false);
    React196.useEffect(function() {
      originalFocusedElement.current = getDocument().activeElement;
      if (doesElementContainFocus(root3.current)) {
        containsFocus.current = true;
      }
      return function() {
        var _a6;
        onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({
          originalElement: originalFocusedElement.current,
          containsFocus: containsFocus.current,
          documentContainsFocus: ((_a6 = getDocument()) === null || _a6 === void 0 ? void 0 : _a6.hasFocus()) || false
        });
        originalFocusedElement.current = void 0;
      };
    }, []);
    useOnEvent(root3, "focus", React196.useCallback(function() {
      containsFocus.current = true;
    }, []), true);
    useOnEvent(root3, "blur", React196.useCallback(function(ev) {
      if (root3.current && ev.relatedTarget && !root3.current.contains(ev.relatedTarget)) {
        containsFocus.current = false;
      }
    }, []), true);
  }
  function useHideSiblingNodes(props, root3) {
    var shouldHideSiblings = String(props["aria-modal"]).toLowerCase() === "true" && props.enableAriaHiddenSiblings;
    React196.useEffect(function() {
      if (!(shouldHideSiblings && root3.current)) {
        return;
      }
      var unmodalize2 = modalize(root3.current);
      return unmodalize2;
    }, [root3, shouldHideSiblings]);
  }
  var Popup = React196.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var props = getPropsWithDefaults({ shouldRestoreFocus: true, enableAriaHiddenSiblings: true }, propsWithoutDefaults);
    var root3 = React196.useRef();
    var mergedRootRef = useMergedRefs2(root3, forwardedRef);
    useHideSiblingNodes(props, root3);
    useRestoreFocus(props, root3);
    var role = props.role, className = props.className, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaDescribedBy = props.ariaDescribedBy, style = props.style, children = props.children, onDismiss = props.onDismiss;
    var needsVerticalScrollBar = useScrollbarAsync(props, root3);
    var onKeyDown = React196.useCallback(function(ev) {
      switch (ev.which) {
        case KeyCodes.escape:
          if (onDismiss) {
            onDismiss(ev);
            ev.preventDefault();
            ev.stopPropagation();
          }
          break;
      }
    }, [onDismiss]);
    var win2 = useWindow();
    useOnEvent(win2, "keydown", onKeyDown);
    return React196.createElement("div", __assign({ ref: mergedRootRef }, getNativeProps2(props, divProperties), { className, role, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, onKeyDown, style: __assign({ overflowY: needsVerticalScrollBar ? "scroll" : void 0, outline: "none" }, style) }), children);
  });
  Popup.displayName = "Popup";

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.base.js
  var _a4;
  var COMPONENT_NAME = "CalloutContentBase";
  var ANIMATIONS = (_a4 = {}, _a4[RectangleEdge.top] = AnimationClassNames.slideUpIn10, _a4[RectangleEdge.bottom] = AnimationClassNames.slideDownIn10, _a4[RectangleEdge.left] = AnimationClassNames.slideLeftIn10, _a4[RectangleEdge.right] = AnimationClassNames.slideRightIn10, _a4);
  var BEAK_ORIGIN_POSITION = { top: 0, left: 0 };
  var OFF_SCREEN_STYLE = {
    opacity: 0,
    filter: "opacity(0)",
    pointerEvents: "none"
  };
  var ARIA_ROLE_ATTRIBUTES = ["role", "aria-roledescription"];
  var DEFAULT_PROPS = {
    preventDismissOnLostFocus: false,
    preventDismissOnScroll: false,
    preventDismissOnResize: false,
    isBeakVisible: true,
    beakWidth: 16,
    gapSpace: 0,
    minPagePadding: 8,
    directionalHint: DirectionalHint.bottomAutoEdge
  };
  var getClassNames = classNamesFunction({
    disableCaching: true
    // disabling caching because stylesProp.position mutates often
  });
  function useBounds(_a5, targetRef, targetWindow) {
    var bounds = _a5.bounds, _b = _a5.minPagePadding, minPagePadding = _b === void 0 ? DEFAULT_PROPS.minPagePadding : _b, target = _a5.target;
    var _c = React197.useState(false), targetWindowResized = _c[0], setTargetWindowResized = _c[1];
    var cachedBounds = React197.useRef();
    var getBounds = React197.useCallback(function() {
      if (!cachedBounds.current || targetWindowResized) {
        var currentBounds = typeof bounds === "function" ? targetWindow ? bounds(target, targetWindow) : void 0 : bounds;
        if (!currentBounds && targetWindow) {
          currentBounds = getBoundsFromTargetWindow(targetRef.current, targetWindow);
          currentBounds = {
            top: currentBounds.top + minPagePadding,
            left: currentBounds.left + minPagePadding,
            right: currentBounds.right - minPagePadding,
            bottom: currentBounds.bottom - minPagePadding,
            width: currentBounds.width - minPagePadding * 2,
            height: currentBounds.height - minPagePadding * 2
          };
        }
        cachedBounds.current = currentBounds;
        targetWindowResized && setTargetWindowResized(false);
      }
      return cachedBounds.current;
    }, [bounds, minPagePadding, target, targetRef, targetWindow, targetWindowResized]);
    var async = useAsync();
    useOnEvent(targetWindow, "resize", async.debounce(function() {
      setTargetWindowResized(true);
    }, 500, { leading: true }));
    return getBounds;
  }
  function useMaxHeight(_a5, getBounds, positions2) {
    var _b;
    var calloutMaxHeight = _a5.calloutMaxHeight, finalHeight = _a5.finalHeight, directionalHint = _a5.directionalHint, directionalHintFixed = _a5.directionalHintFixed, hidden = _a5.hidden;
    var _c = React197.useState(), maxHeight = _c[0], setMaxHeight = _c[1];
    var _d = (_b = positions2 === null || positions2 === void 0 ? void 0 : positions2.elementPosition) !== null && _b !== void 0 ? _b : {}, top = _d.top, bottom = _d.bottom;
    React197.useEffect(function() {
      var _a6;
      var _b2 = (_a6 = getBounds()) !== null && _a6 !== void 0 ? _a6 : {}, topBounds = _b2.top, bottomBounds = _b2.bottom;
      var calculatedHeight;
      if (typeof top === "number" && bottomBounds) {
        calculatedHeight = bottomBounds - top;
      } else if (typeof bottom === "number" && typeof topBounds === "number" && bottomBounds) {
        calculatedHeight = bottomBounds - topBounds - bottom;
      }
      if (!calloutMaxHeight && !hidden || calloutMaxHeight && calculatedHeight && calloutMaxHeight > calculatedHeight) {
        setMaxHeight(calculatedHeight);
      } else if (calloutMaxHeight) {
        setMaxHeight(calloutMaxHeight);
      } else {
        setMaxHeight(void 0);
      }
    }, [bottom, calloutMaxHeight, finalHeight, directionalHint, directionalHintFixed, getBounds, hidden, positions2, top]);
    return maxHeight;
  }
  function usePositions(props, hostElement, calloutElement, targetRef, getBounds) {
    var _a5 = React197.useState(), positions2 = _a5[0], setPositions = _a5[1];
    var positionAttempts = React197.useRef(0);
    var previousTarget = React197.useRef();
    var async = useAsync();
    var hidden = props.hidden, target = props.target, finalHeight = props.finalHeight, calloutMaxHeight = props.calloutMaxHeight, onPositioned = props.onPositioned, directionalHint = props.directionalHint;
    React197.useEffect(function() {
      if (!hidden) {
        var timerId_1 = async.requestAnimationFrame(function() {
          var _a6, _b;
          if (hostElement.current && calloutElement) {
            var currentProps = __assign(__assign({}, props), { target: targetRef.current, bounds: getBounds() });
            var dupeCalloutElement = calloutElement.cloneNode(true);
            dupeCalloutElement.style.maxHeight = calloutMaxHeight ? "".concat(calloutMaxHeight) : "";
            dupeCalloutElement.style.visibility = "hidden";
            (_a6 = calloutElement.parentElement) === null || _a6 === void 0 ? void 0 : _a6.appendChild(dupeCalloutElement);
            var previousPositions = previousTarget.current === target ? positions2 : void 0;
            var newPositions = finalHeight ? positionCard(currentProps, hostElement.current, dupeCalloutElement, previousPositions) : positionCallout(currentProps, hostElement.current, dupeCalloutElement, previousPositions);
            (_b = calloutElement.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(dupeCalloutElement);
            if (!positions2 && newPositions || positions2 && newPositions && !arePositionsEqual(positions2, newPositions) && positionAttempts.current < 5) {
              positionAttempts.current++;
              setPositions(newPositions);
            } else if (positionAttempts.current > 0) {
              positionAttempts.current = 0;
              onPositioned === null || onPositioned === void 0 ? void 0 : onPositioned(positions2);
            }
          }
        }, calloutElement);
        previousTarget.current = target;
        return function() {
          async.cancelAnimationFrame(timerId_1);
          previousTarget.current = void 0;
        };
      } else {
        setPositions(void 0);
        positionAttempts.current = 0;
      }
    }, [
      hidden,
      directionalHint,
      async,
      calloutElement,
      calloutMaxHeight,
      hostElement,
      targetRef,
      finalHeight,
      getBounds,
      onPositioned,
      positions2,
      props,
      target
    ]);
    return positions2;
  }
  function useAutoFocus(_a5, positions2, calloutElement) {
    var hidden = _a5.hidden, setInitialFocus = _a5.setInitialFocus;
    var async = useAsync();
    var hasPositions = !!positions2;
    React197.useEffect(function() {
      if (!hidden && setInitialFocus && hasPositions && calloutElement) {
        var timerId_2 = async.requestAnimationFrame(function() {
          return focusFirstChild(calloutElement);
        }, calloutElement);
        return function() {
          return async.cancelAnimationFrame(timerId_2);
        };
      }
    }, [hidden, hasPositions, async, calloutElement, setInitialFocus]);
  }
  function useDismissHandlers(_a5, positions2, hostElement, targetRef, targetWindow) {
    var hidden = _a5.hidden, onDismiss = _a5.onDismiss, preventDismissOnScroll = _a5.preventDismissOnScroll, preventDismissOnResize = _a5.preventDismissOnResize, preventDismissOnLostFocus = _a5.preventDismissOnLostFocus, dismissOnTargetClick = _a5.dismissOnTargetClick, shouldDismissOnWindowFocus = _a5.shouldDismissOnWindowFocus, preventDismissOnEvent = _a5.preventDismissOnEvent;
    var isMouseDownOnPopup = React197.useRef(false);
    var async = useAsync();
    var mouseDownHandlers = useConst([
      function() {
        isMouseDownOnPopup.current = true;
      },
      function() {
        isMouseDownOnPopup.current = false;
      }
    ]);
    var positionsExists = !!positions2;
    React197.useEffect(function() {
      var dismissOnScroll = function(ev) {
        if (positionsExists && !preventDismissOnScroll) {
          dismissOnClickOrScroll(ev);
        }
      };
      var dismissOnResize = function(ev) {
        if (!preventDismissOnResize && !(preventDismissOnEvent && preventDismissOnEvent(ev))) {
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var dismissOnLostFocus = function(ev) {
        if (!preventDismissOnLostFocus) {
          dismissOnClickOrScroll(ev);
        }
      };
      var dismissOnClickOrScroll = function(ev) {
        var eventPaths = ev.composedPath ? ev.composedPath() : [];
        var target = eventPaths.length > 0 ? eventPaths[0] : ev.target;
        var isEventTargetOutsideCallout = hostElement.current && !elementContains2(hostElement.current, target);
        if (isEventTargetOutsideCallout && isMouseDownOnPopup.current) {
          isMouseDownOnPopup.current = false;
          return;
        }
        if (!targetRef.current && isEventTargetOutsideCallout || ev.target !== targetWindow && isEventTargetOutsideCallout && (!targetRef.current || "stopPropagation" in targetRef.current || dismissOnTargetClick || target !== targetRef.current && !elementContains2(targetRef.current, target))) {
          if (preventDismissOnEvent && preventDismissOnEvent(ev)) {
            return;
          }
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var dismissOnTargetWindowBlur = function(ev) {
        if (!shouldDismissOnWindowFocus) {
          return;
        }
        if ((preventDismissOnEvent && !preventDismissOnEvent(ev) || !preventDismissOnEvent && !preventDismissOnLostFocus) && !(targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.hasFocus()) && ev.relatedTarget === null) {
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var disposablesPromise = new Promise(function(resolve2) {
        async.setTimeout(function() {
          if (!hidden && targetWindow) {
            var disposables_1 = [
              on(targetWindow, "scroll", dismissOnScroll, true),
              on(targetWindow, "resize", dismissOnResize, true),
              on(targetWindow.document.documentElement, "focus", dismissOnLostFocus, true),
              on(targetWindow.document.documentElement, "click", dismissOnLostFocus, true),
              on(targetWindow, "blur", dismissOnTargetWindowBlur, true)
            ];
            resolve2(function() {
              disposables_1.forEach(function(dispose) {
                return dispose();
              });
            });
          }
        }, 0);
      });
      return function() {
        disposablesPromise.then(function(dispose) {
          return dispose();
        });
      };
    }, [
      hidden,
      async,
      hostElement,
      targetRef,
      targetWindow,
      onDismiss,
      shouldDismissOnWindowFocus,
      dismissOnTargetClick,
      preventDismissOnLostFocus,
      preventDismissOnResize,
      preventDismissOnScroll,
      positionsExists,
      preventDismissOnEvent
    ]);
    return mouseDownHandlers;
  }
  var CalloutContentBase = React197.memo(React197.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);
    var styles4 = props.styles, style = props.style, ariaLabel = props.ariaLabel, ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, className = props.className, isBeakVisible = props.isBeakVisible, children = props.children, beakWidth = props.beakWidth, calloutWidth = props.calloutWidth, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer, finalHeight = props.finalHeight, _a5 = props.hideOverflow, hideOverflow = _a5 === void 0 ? !!finalHeight : _a5, backgroundColor = props.backgroundColor, calloutMaxHeight = props.calloutMaxHeight, onScroll = props.onScroll, _b = props.shouldRestoreFocus, shouldRestoreFocus = _b === void 0 ? true : _b, target = props.target, hidden = props.hidden, onLayerMounted = props.onLayerMounted, popupProps = props.popupProps;
    var hostElement = React197.useRef(null);
    var _c = React197.useState(null), calloutElement = _c[0], setCalloutElement = _c[1];
    var calloutCallback = React197.useCallback(function(calloutEl) {
      setCalloutElement(calloutEl);
    }, []);
    var rootRef = useMergedRefs2(hostElement, forwardedRef);
    var _d = useTarget(props.target, {
      current: calloutElement
    }), targetRef = _d[0], targetWindow = _d[1];
    var getBounds = useBounds(props, targetRef, targetWindow);
    var positions2 = usePositions(props, hostElement, calloutElement, targetRef, getBounds);
    var maxHeight = useMaxHeight(props, getBounds, positions2);
    var _e = useDismissHandlers(props, positions2, hostElement, targetRef, targetWindow), mouseDownOnPopup = _e[0], mouseUpOnPopup = _e[1];
    var isForcedInBounds = (positions2 === null || positions2 === void 0 ? void 0 : positions2.elementPosition.top) && (positions2 === null || positions2 === void 0 ? void 0 : positions2.elementPosition.bottom);
    var cssPositions = __assign(__assign({}, positions2 === null || positions2 === void 0 ? void 0 : positions2.elementPosition), { maxHeight });
    if (isForcedInBounds) {
      cssPositions.bottom = void 0;
    }
    useAutoFocus(props, positions2, calloutElement);
    React197.useEffect(function() {
      if (!hidden) {
        onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
      }
    }, [hidden]);
    if (!targetWindow) {
      return null;
    }
    var overflowYHidden = hideOverflow;
    var beakVisible = isBeakVisible && !!target;
    var classNames2 = getClassNames(styles4, {
      theme: props.theme,
      className,
      overflowYHidden,
      calloutWidth,
      positions: positions2,
      beakWidth,
      backgroundColor,
      calloutMaxWidth,
      calloutMinWidth,
      doNotLayer
    });
    var overflowStyle = __assign(__assign({ maxHeight: calloutMaxHeight ? calloutMaxHeight : "100%" }, style), overflowYHidden && { overflowY: "hidden" });
    var visibilityStyle = props.hidden ? { visibility: "hidden" } : void 0;
    return React197.createElement(
      "div",
      { ref: rootRef, className: classNames2.container, style: visibilityStyle },
      React197.createElement(
        "div",
        __assign({}, getNativeProps2(props, divProperties, ARIA_ROLE_ATTRIBUTES), {
          className: css(classNames2.root, positions2 && positions2.targetEdge && ANIMATIONS[positions2.targetEdge]),
          style: positions2 ? __assign({}, cssPositions) : OFF_SCREEN_STYLE,
          // Safari and Firefox on Mac OS requires this to back-stop click events so focus remains in the Callout.
          // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus
          tabIndex: -1,
          ref: calloutCallback
        }),
        beakVisible && React197.createElement("div", { className: classNames2.beak, style: getBeakPosition(positions2) }),
        beakVisible && React197.createElement("div", { className: classNames2.beakCurtain }),
        React197.createElement(
          Popup,
          __assign({
            // don't use getNativeElementProps for role and roledescription because it will also
            // pass through data-* props (resulting in them being used in two places)
            role: props.role,
            "aria-roledescription": props["aria-roledescription"],
            ariaDescribedBy,
            ariaLabel,
            ariaLabelledBy,
            className: classNames2.calloutMain,
            onDismiss: props.onDismiss,
            onMouseDown: mouseDownOnPopup,
            onMouseUp: mouseUpOnPopup,
            onRestoreFocus: props.onRestoreFocus,
            onScroll,
            shouldRestoreFocus,
            style: overflowStyle
          }, popupProps),
          children
        )
      )
    );
  }), function(previousProps, nextProps) {
    if (!nextProps.shouldUpdateWhenHidden && previousProps.hidden && nextProps.hidden) {
      return true;
    }
    return shallowCompare(previousProps, nextProps);
  });
  function getBeakPosition(positions2) {
    var _a5, _b;
    var beakPositionStyle = __assign(__assign({}, (_a5 = positions2 === null || positions2 === void 0 ? void 0 : positions2.beakPosition) === null || _a5 === void 0 ? void 0 : _a5.elementPosition), { display: ((_b = positions2 === null || positions2 === void 0 ? void 0 : positions2.beakPosition) === null || _b === void 0 ? void 0 : _b.hideBeak) ? "none" : void 0 });
    if (!beakPositionStyle.top && !beakPositionStyle.bottom && !beakPositionStyle.left && !beakPositionStyle.right) {
      beakPositionStyle.left = BEAK_ORIGIN_POSITION.left;
      beakPositionStyle.top = BEAK_ORIGIN_POSITION.top;
    }
    return beakPositionStyle;
  }
  function arePositionsEqual(prevElementPositions, newElementPosition) {
    return comparePositions(prevElementPositions.elementPosition, newElementPosition.elementPosition) && comparePositions(prevElementPositions.beakPosition.elementPosition, newElementPosition.beakPosition.elementPosition);
  }
  function comparePositions(prevElementPositions, newElementPositions) {
    for (var key in newElementPositions) {
      if (newElementPositions.hasOwnProperty(key)) {
        var oldPositionEdge = prevElementPositions[key];
        var newPositionEdge = newElementPositions[key];
        if (oldPositionEdge !== void 0 && newPositionEdge !== void 0) {
          if (oldPositionEdge.toFixed(2) !== newPositionEdge.toFixed(2)) {
            return false;
          }
        } else {
          return false;
        }
      }
    }
    return true;
  }
  CalloutContentBase.displayName = COMPONENT_NAME;

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.styles.js
  function getBeakStyle(beakWidth) {
    return {
      height: beakWidth,
      width: beakWidth
    };
  }
  var GlobalClassNames = {
    container: "ms-Callout-container",
    root: "ms-Callout",
    beak: "ms-Callout-beak",
    beakCurtain: "ms-Callout-beakCurtain",
    calloutMain: "ms-Callout-main"
  };
  var getStyles = function(props) {
    var _a5;
    var theme = props.theme, className = props.className, overflowYHidden = props.overflowYHidden, calloutWidth = props.calloutWidth, beakWidth = props.beakWidth, backgroundColor = props.backgroundColor, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer;
    var classNames2 = getGlobalClassNames(GlobalClassNames, theme);
    var semanticColors = theme.semanticColors, effects = theme.effects;
    return {
      container: [
        classNames2.container,
        {
          position: "relative"
        }
      ],
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          position: "absolute",
          display: "flex",
          zIndex: doNotLayer ? ZIndexes.Layer : void 0,
          boxSizing: "border-box",
          borderRadius: effects.roundedCorner2,
          boxShadow: effects.elevation16,
          selectors: (_a5 = {}, _a5[HighContrastSelector] = {
            borderWidth: 1,
            borderStyle: "solid",
            borderColor: "WindowText"
          }, _a5)
        },
        focusClear(),
        className,
        !!calloutWidth && { width: calloutWidth },
        !!calloutMaxWidth && { maxWidth: calloutMaxWidth },
        !!calloutMinWidth && { minWidth: calloutMinWidth }
      ],
      beak: [
        classNames2.beak,
        {
          position: "absolute",
          backgroundColor: semanticColors.menuBackground,
          boxShadow: "inherit",
          border: "inherit",
          boxSizing: "border-box",
          transform: "rotate(45deg)"
        },
        getBeakStyle(beakWidth),
        backgroundColor && {
          backgroundColor
        }
      ],
      beakCurtain: [
        classNames2.beakCurtain,
        {
          position: "absolute",
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          backgroundColor: semanticColors.menuBackground,
          borderRadius: effects.roundedCorner2
        }
      ],
      calloutMain: [
        classNames2.calloutMain,
        {
          backgroundColor: semanticColors.menuBackground,
          overflowX: "hidden",
          overflowY: "auto",
          position: "relative",
          width: "100%",
          borderRadius: effects.roundedCorner2
        },
        overflowYHidden && {
          overflowY: "hidden"
        },
        backgroundColor && {
          backgroundColor
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.js
  var CalloutContent = styled(CalloutContentBase, getStyles, void 0, {
    scope: "CalloutContent"
  });

  // ../node_modules/@fluentui/react-portal-compat-context/lib/PortalCompatContext.js
  var React198 = __toESM(require_react());
  var PortalCompatContext = /* @__PURE__ */ React198.createContext(void 0);
  var portalCompatContextDefaultValue = () => () => void 0;
  var PortalCompatContextProvider = PortalCompatContext.Provider;
  function usePortalCompat() {
    var _React_useContext5;
    return (_React_useContext5 = React198.useContext(PortalCompatContext)) !== null && _React_useContext5 !== void 0 ? _React_useContext5 : portalCompatContextDefaultValue;
  }

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.base.js
  var React200 = __toESM(require_react());
  var ReactDOM4 = __toESM(require_react_dom());

  // ../node_modules/@fluentui/react/lib/components/Fabric/Fabric.base.js
  var React199 = __toESM(require_react());
  var getClassNames2 = classNamesFunction();
  var getFabricTheme = memoizeFunction(function(theme, isRTL2) {
    return createTheme(__assign(__assign({}, theme), { rtl: isRTL2 }));
  });
  var getDir = function(_a5) {
    var theme = _a5.theme, dir = _a5.dir;
    var contextDir = getRTL2(theme) ? "rtl" : "ltr";
    var pageDir = getRTL2() ? "rtl" : "ltr";
    var componentDir = dir ? dir : contextDir;
    return {
      // If Fabric dir !== contextDir
      // Or If contextDir !== pageDir
      // Then we need to set dir of the Fabric root
      rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,
      // If dir !== contextDir || pageDir
      // then set contextual theme around content
      needsTheme: componentDir !== contextDir
    };
  };
  var FabricBase = React199.forwardRef(function(props, ref) {
    var className = props.className, theme = props.theme, applyTheme = props.applyTheme, applyThemeToBody = props.applyThemeToBody, styles4 = props.styles;
    var classNames2 = getClassNames2(styles4, {
      theme,
      applyTheme,
      className
    });
    var rootElement = React199.useRef(null);
    useApplyThemeToBody(applyThemeToBody, classNames2, rootElement);
    return React199.createElement(React199.Fragment, null, useRenderedContent(props, classNames2, rootElement, ref));
  });
  FabricBase.displayName = "FabricBase";
  function useRenderedContent(props, _a5, rootElement, ref) {
    var root3 = _a5.root;
    var _b = props.as, Root2 = _b === void 0 ? "div" : _b, dir = props.dir, theme = props.theme;
    var divProps = getNativeProps2(props, divProperties, ["dir"]);
    var _c = getDir(props), rootDir = _c.rootDir, needsTheme = _c.needsTheme;
    var renderedContent = React199.createElement(
      FocusRectsProvider,
      { providerRef: rootElement },
      React199.createElement(Root2, __assign({ dir: rootDir }, divProps, { className: root3, ref: useMergedRefs2(rootElement, ref) }))
    );
    if (needsTheme) {
      renderedContent = // eslint-disable-next-line deprecation/deprecation
      React199.createElement(Customizer, { settings: { theme: getFabricTheme(theme, dir === "rtl") } }, renderedContent);
    }
    return renderedContent;
  }
  function useApplyThemeToBody(applyThemeToBody, _a5, rootElement) {
    var bodyThemed = _a5.bodyThemed;
    React199.useEffect(function() {
      if (applyThemeToBody) {
        var currentDoc_1 = getDocument(rootElement.current);
        if (currentDoc_1) {
          currentDoc_1.body.classList.add(bodyThemed);
          return function() {
            currentDoc_1.body.classList.remove(bodyThemed);
          };
        }
      }
    }, [bodyThemed, applyThemeToBody, rootElement]);
    return rootElement;
  }

  // ../node_modules/@fluentui/react/lib/components/Fabric/Fabric.styles.js
  var inheritFont = { fontFamily: "inherit" };
  var GlobalClassNames2 = {
    root: "ms-Fabric",
    bodyThemed: "ms-Fabric-bodyThemed"
  };
  var getStyles2 = function(props) {
    var applyTheme = props.applyTheme, className = props.className, preventBlanketFontInheritance = props.preventBlanketFontInheritance, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames2, theme);
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          color: theme.palette.neutralPrimary
        },
        !preventBlanketFontInheritance && {
          "& button": inheritFont,
          "& input": inheritFont,
          "& textarea": inheritFont
        },
        // apply theme to only if applyTheme is true
        applyTheme && {
          color: theme.semanticColors.bodyText,
          backgroundColor: theme.semanticColors.bodyBackground
        },
        className
      ],
      bodyThemed: [
        {
          backgroundColor: theme.semanticColors.bodyBackground
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Fabric/Fabric.js
  var Fabric = styled(FabricBase, getStyles2, void 0, {
    scope: "Fabric"
  });

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.notification.js
  var _layersByHostId = {};
  var _layerHostsById = {};
  var defaultHostId = "fluent-default-layer-host";
  var _defaultHostSelector = "#".concat(defaultHostId);
  function registerLayer(hostId, callback) {
    if (!_layersByHostId[hostId]) {
      _layersByHostId[hostId] = [];
    }
    _layersByHostId[hostId].push(callback);
    var layerHosts = _layerHostsById[hostId];
    if (layerHosts) {
      for (var _i = 0, layerHosts_1 = layerHosts; _i < layerHosts_1.length; _i++) {
        var layerHost = layerHosts_1[_i];
        layerHost.notifyLayersChanged();
      }
    }
  }
  function unregisterLayer(hostId, callback) {
    var layers = _layersByHostId[hostId];
    if (layers) {
      var idx = layers.indexOf(callback);
      if (idx >= 0) {
        layers.splice(idx, 1);
        if (layers.length === 0) {
          delete _layersByHostId[hostId];
        }
      }
    }
    var layerHosts = _layerHostsById[hostId];
    if (layerHosts) {
      for (var _i = 0, layerHosts_2 = layerHosts; _i < layerHosts_2.length; _i++) {
        var layerHost = layerHosts_2[_i];
        layerHost.notifyLayersChanged();
      }
    }
  }
  function getLayerHost(hostId) {
    var layerHosts = _layerHostsById[hostId];
    return layerHosts && layerHosts[0] || void 0;
  }
  function createDefaultLayerHost(doc) {
    var host = doc.createElement("div");
    host.setAttribute("id", defaultHostId);
    host.style.cssText = "position:fixed;z-index:1000000";
    doc === null || doc === void 0 ? void 0 : doc.body.appendChild(host);
    return host;
  }
  function getDefaultTarget() {
    return _defaultHostSelector;
  }

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.base.js
  var getClassNames3 = classNamesFunction();
  var getFocusVisibility = function(providerRef) {
    if (providerRef === null || providerRef === void 0 ? void 0 : providerRef.current) {
      return providerRef.current.classList.contains(IsFocusVisibleClassName);
    }
    return false;
  };
  var LayerBase = React200.forwardRef(function(props, ref) {
    var registerPortalEl = usePortalCompat();
    var rootRef = React200.useRef(null);
    var mergedRef = useMergedRefs2(rootRef, ref);
    var layerRef = React200.useRef();
    var fabricElementRef = React200.useRef(null);
    var focusContext = React200.useContext(FocusRectsContext);
    var _a5 = React200.useState(false), needRaiseLayerMount = _a5[0], setNeedRaiseLayerMount = _a5[1];
    var focusRectsRef = React200.useCallback(function(el) {
      var isFocusVisible = getFocusVisibility(focusContext === null || focusContext === void 0 ? void 0 : focusContext.providerRef);
      if (el && isFocusVisible) {
        el.classList.add(IsFocusVisibleClassName);
      }
    }, [focusContext]);
    var children = props.children, className = props.className, eventBubblingEnabled = props.eventBubblingEnabled, fabricProps = props.fabricProps, hostId = props.hostId, insertFirst = props.insertFirst, _b = props.onLayerDidMount, onLayerDidMount = _b === void 0 ? function() {
      return void 0;
    } : _b, _c = props.onLayerMounted, onLayerMounted = _c === void 0 ? function() {
      return void 0;
    } : _c, onLayerWillUnmount = props.onLayerWillUnmount, styles4 = props.styles, theme = props.theme;
    var fabricRef = useMergedRefs2(fabricElementRef, fabricProps === null || fabricProps === void 0 ? void 0 : fabricProps.ref, focusRectsRef);
    var classNames2 = getClassNames3(styles4, {
      theme,
      className,
      isNotHost: !hostId
    });
    var getHost = function(doc) {
      var _a6, _b2;
      if (hostId) {
        var layerHost = getLayerHost(hostId);
        if (layerHost) {
          return (_a6 = layerHost.rootRef.current) !== null && _a6 !== void 0 ? _a6 : null;
        }
        return (_b2 = doc.getElementById(hostId)) !== null && _b2 !== void 0 ? _b2 : null;
      } else {
        var defaultHostSelector = getDefaultTarget();
        var host = defaultHostSelector ? doc.querySelector(defaultHostSelector) : null;
        if (!host) {
          host = createDefaultLayerHost(doc);
        }
        return host;
      }
    };
    var removeLayerElement = function() {
      onLayerWillUnmount === null || onLayerWillUnmount === void 0 ? void 0 : onLayerWillUnmount();
      var elem = layerRef.current;
      layerRef.current = void 0;
      if (elem && elem.parentNode) {
        elem.parentNode.removeChild(elem);
      }
    };
    var createLayerElement = function() {
      var _a6;
      var doc = getDocument(rootRef.current);
      if (!doc) {
        return;
      }
      var host = getHost(doc);
      if (!host) {
        return;
      }
      removeLayerElement();
      var el = ((_a6 = host.ownerDocument) !== null && _a6 !== void 0 ? _a6 : doc).createElement("div");
      el.className = classNames2.root;
      setPortalAttribute(el);
      setVirtualParent2(el, rootRef.current);
      insertFirst ? host.insertBefore(el, host.firstChild) : host.appendChild(el);
      layerRef.current = el;
      setNeedRaiseLayerMount(true);
    };
    useIsomorphicLayoutEffect3(function() {
      createLayerElement();
      if (hostId) {
        registerLayer(hostId, createLayerElement);
      }
      var unregisterPortalEl = layerRef.current ? registerPortalEl(layerRef.current) : void 0;
      return function() {
        if (unregisterPortalEl) {
          unregisterPortalEl();
        }
        removeLayerElement();
        if (hostId) {
          unregisterLayer(hostId, createLayerElement);
        }
      };
    }, [hostId]);
    React200.useEffect(function() {
      if (layerRef.current && needRaiseLayerMount) {
        onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
        onLayerDidMount === null || onLayerDidMount === void 0 ? void 0 : onLayerDidMount();
        setNeedRaiseLayerMount(false);
      }
    }, [needRaiseLayerMount, onLayerMounted, onLayerDidMount]);
    useDebugWarnings(props);
    return React200.createElement("span", { className: "ms-layer", ref: mergedRef }, layerRef.current && ReactDOM4.createPortal(React200.createElement(
      FocusRectsProvider,
      { layerRoot: true, providerRef: fabricRef },
      React200.createElement(Fabric, __assign({}, !eventBubblingEnabled && getFilteredEvents(), fabricProps, { className: css(classNames2.content, fabricProps === null || fabricProps === void 0 ? void 0 : fabricProps.className), ref: fabricRef }), children)
    ), layerRef.current));
  });
  LayerBase.displayName = "LayerBase";
  var filteredEventProps;
  var onFilterEvent = function(ev) {
    if (ev.eventPhase === Event.BUBBLING_PHASE && ev.type !== "mouseenter" && ev.type !== "mouseleave" && ev.type !== "touchstart" && ev.type !== "touchend") {
      ev.stopPropagation();
    }
  };
  function getFilteredEvents() {
    if (!filteredEventProps) {
      filteredEventProps = {};
      [
        "onClick",
        "onContextMenu",
        "onDoubleClick",
        "onDrag",
        "onDragEnd",
        "onDragEnter",
        "onDragExit",
        "onDragLeave",
        "onDragOver",
        "onDragStart",
        "onDrop",
        "onMouseDown",
        "onMouseEnter",
        "onMouseLeave",
        "onMouseMove",
        "onMouseOver",
        "onMouseOut",
        "onMouseUp",
        "onTouchMove",
        "onTouchStart",
        "onTouchCancel",
        "onTouchEnd",
        "onKeyDown",
        "onKeyPress",
        "onKeyUp",
        "onFocus",
        "onBlur",
        "onChange",
        "onInput",
        "onInvalid",
        "onSubmit"
      ].forEach(function(name) {
        return filteredEventProps[name] = onFilterEvent;
      });
    }
    return filteredEventProps;
  }
  function useDebugWarnings(props) {
    if (true) {
      useWarnings({
        name: "Layer",
        props,
        deprecations: { onLayerMounted: "onLayerDidMount" }
      });
    }
  }

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.styles.js
  var GlobalClassNames3 = {
    root: "ms-Layer",
    rootNoHost: "ms-Layer--fixed",
    content: "ms-Layer-content"
  };
  var getStyles3 = function(props) {
    var className = props.className, isNotHost = props.isNotHost, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames3, theme);
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        isNotHost && [
          classNames2.rootNoHost,
          {
            position: "fixed",
            zIndex: ZIndexes.Layer,
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            visibility: "hidden"
          }
        ],
        className
      ],
      content: [
        classNames2.content,
        {
          visibility: "visible"
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.js
  var Layer = styled(LayerBase, getStyles3, void 0, {
    scope: "Layer",
    fields: ["hostId", "theme", "styles"]
  });

  // ../node_modules/@fluentui/react/lib/components/Callout/Callout.js
  var Callout = React201.forwardRef(function(_a5, forwardedRef) {
    var layerProps = _a5.layerProps, doNotLayer = _a5.doNotLayer, rest = __rest(_a5, ["layerProps", "doNotLayer"]);
    var content3 = React201.createElement(CalloutContent, __assign({}, rest, { doNotLayer, ref: forwardedRef }));
    return doNotLayer ? content3 : React201.createElement(Layer, __assign({}, layerProps), content3);
  });
  Callout.displayName = "Callout";

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.base.js
  var React204 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.types.js
  var IconType;
  (function(IconType2) {
    IconType2[IconType2["default"] = 0] = "default";
    IconType2[IconType2["image"] = 1] = "image";
    IconType2[IconType2["Default"] = 1e5] = "Default";
    IconType2[IconType2["Image"] = 100001] = "Image";
  })(IconType || (IconType = {}));

  // ../node_modules/@fluentui/react/lib/components/Image/Image.base.js
  var React202 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Image/Image.types.js
  var ImageFit;
  (function(ImageFit2) {
    ImageFit2[ImageFit2["center"] = 0] = "center";
    ImageFit2[ImageFit2["contain"] = 1] = "contain";
    ImageFit2[ImageFit2["cover"] = 2] = "cover";
    ImageFit2[ImageFit2["none"] = 3] = "none";
    ImageFit2[ImageFit2["centerCover"] = 4] = "centerCover";
    ImageFit2[ImageFit2["centerContain"] = 5] = "centerContain";
  })(ImageFit || (ImageFit = {}));
  var ImageCoverStyle;
  (function(ImageCoverStyle2) {
    ImageCoverStyle2[ImageCoverStyle2["landscape"] = 0] = "landscape";
    ImageCoverStyle2[ImageCoverStyle2["portrait"] = 1] = "portrait";
  })(ImageCoverStyle || (ImageCoverStyle = {}));
  var ImageLoadState;
  (function(ImageLoadState2) {
    ImageLoadState2[ImageLoadState2["notLoaded"] = 0] = "notLoaded";
    ImageLoadState2[ImageLoadState2["loaded"] = 1] = "loaded";
    ImageLoadState2[ImageLoadState2["error"] = 2] = "error";
    ImageLoadState2[ImageLoadState2["errorLoaded"] = 3] = "errorLoaded";
  })(ImageLoadState || (ImageLoadState = {}));

  // ../node_modules/@fluentui/react/lib/components/Image/Image.base.js
  var getClassNames4 = classNamesFunction();
  var SVG_REGEX = /\.svg$/i;
  var KEY_PREFIX = "fabricImage";
  function useLoadState(props, imageElement) {
    var onLoadingStateChange = props.onLoadingStateChange, onLoad = props.onLoad, onError = props.onError, src = props.src;
    var _a5 = React202.useState(ImageLoadState.notLoaded), loadState = _a5[0], setLoadState = _a5[1];
    useIsomorphicLayoutEffect3(function() {
      setLoadState(ImageLoadState.notLoaded);
    }, [src]);
    React202.useEffect(function() {
      if (loadState === ImageLoadState.notLoaded) {
        var isLoaded = imageElement.current ? src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0 || imageElement.current.complete && SVG_REGEX.test(src) : false;
        if (isLoaded) {
          setLoadState(ImageLoadState.loaded);
        }
      }
    });
    React202.useEffect(function() {
      onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState);
    }, [loadState]);
    var onImageLoaded = React202.useCallback(function(ev) {
      onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);
      if (src) {
        setLoadState(ImageLoadState.loaded);
      }
    }, [src, onLoad]);
    var onImageError = React202.useCallback(function(ev) {
      onError === null || onError === void 0 ? void 0 : onError(ev);
      setLoadState(ImageLoadState.error);
    }, [onError]);
    return [loadState, onImageLoaded, onImageError];
  }
  var ImageBase = React202.forwardRef(function(props, forwardedRef) {
    var frameElement = React202.useRef();
    var imageElement = React202.useRef();
    var _a5 = useLoadState(props, imageElement), loadState = _a5[0], onImageLoaded = _a5[1], onImageError = _a5[2];
    var imageProps = getNativeProps2(props, imgProperties2, [
      "width",
      "height"
    ]);
    var src = props.src, alt = props.alt, width = props.width, height = props.height, _b = props.shouldFadeIn, shouldFadeIn = _b === void 0 ? true : _b, shouldStartVisible = props.shouldStartVisible, className = props.className, imageFit = props.imageFit, role = props.role, maximizeFrame = props.maximizeFrame, styles4 = props.styles, theme = props.theme, loading = props.loading;
    var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);
    var classNames2 = getClassNames4(styles4, {
      theme,
      className,
      width,
      height,
      maximizeFrame,
      shouldFadeIn,
      shouldStartVisible,
      isLoaded: loadState === ImageLoadState.loaded || loadState === ImageLoadState.notLoaded && props.shouldStartVisible,
      isLandscape: coverStyle === ImageCoverStyle.landscape,
      isCenter: imageFit === ImageFit.center,
      isCenterContain: imageFit === ImageFit.centerContain,
      isCenterCover: imageFit === ImageFit.centerCover,
      isContain: imageFit === ImageFit.contain,
      isCover: imageFit === ImageFit.cover,
      isNone: imageFit === ImageFit.none,
      isError: loadState === ImageLoadState.error,
      isNotImageFit: imageFit === void 0
    });
    return React202.createElement(
      "div",
      { className: classNames2.root, style: { width, height }, ref: frameElement },
      React202.createElement("img", __assign({}, imageProps, { onLoad: onImageLoaded, onError: onImageError, key: KEY_PREFIX + props.src || "", className: classNames2.image, ref: useMergedRefs2(imageElement, forwardedRef), src, alt, role, loading }))
    );
  });
  ImageBase.displayName = "ImageBase";
  function useCoverStyle(props, loadState, imageElement, frameElement) {
    var previousLoadState = React202.useRef(loadState);
    var coverStyle = React202.useRef();
    if (coverStyle === void 0 || previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded) {
      coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);
    }
    previousLoadState.current = loadState;
    return coverStyle.current;
  }
  function computeCoverStyle(props, loadState, imageElement, frameElement) {
    var imageFit = props.imageFit, width = props.width, height = props.height;
    if (props.coverStyle !== void 0) {
      return props.coverStyle;
    } else if (loadState === ImageLoadState.loaded && (imageFit === ImageFit.cover || imageFit === ImageFit.contain || imageFit === ImageFit.centerContain || imageFit === ImageFit.centerCover) && imageElement.current && frameElement.current) {
      var desiredRatio = void 0;
      if (typeof width === "number" && typeof height === "number" && imageFit !== ImageFit.centerContain && imageFit !== ImageFit.centerCover) {
        desiredRatio = width / height;
      } else {
        desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;
      }
      var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;
      if (naturalRatio > desiredRatio) {
        return ImageCoverStyle.landscape;
      }
    }
    return ImageCoverStyle.portrait;
  }

  // ../node_modules/@fluentui/react/lib/components/Image/Image.styles.js
  var GlobalClassNames4 = {
    root: "ms-Image",
    rootMaximizeFrame: "ms-Image--maximizeFrame",
    image: "ms-Image-image",
    imageCenter: "ms-Image-image--center",
    imageContain: "ms-Image-image--contain",
    imageCover: "ms-Image-image--cover",
    imageCenterContain: "ms-Image-image--centerContain",
    imageCenterCover: "ms-Image-image--centerCover",
    imageNone: "ms-Image-image--none",
    imageLandscape: "ms-Image-image--landscape",
    imagePortrait: "ms-Image-image--portrait"
  };
  var getStyles4 = function(props) {
    var className = props.className, width = props.width, height = props.height, maximizeFrame = props.maximizeFrame, isLoaded = props.isLoaded, shouldFadeIn = props.shouldFadeIn, shouldStartVisible = props.shouldStartVisible, isLandscape = props.isLandscape, isCenter = props.isCenter, isContain = props.isContain, isCover = props.isCover, isCenterContain = props.isCenterContain, isCenterCover = props.isCenterCover, isNone2 = props.isNone, isError = props.isError, isNotImageFit = props.isNotImageFit, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames4, theme);
    var ImageFitStyles = {
      position: "absolute",
      left: "50% /* @noflip */",
      top: "50%",
      transform: "translate(-50%,-50%)"
      // @todo test RTL renders transform: translate(50%,-50%);
    };
    var window2 = getWindow2();
    var supportsObjectFit = window2 !== void 0 && // eslint-disable-next-line @fluentui/max-len
    // cast needed as vendor prefixed `msMaxTouchPoints` api is no longer part of TS lib declaration - introduced with TS 4.4
    window2.navigator.msMaxTouchPoints === void 0;
    var fallbackObjectFitStyles = isContain && isLandscape || isCover && !isLandscape ? { width: "100%", height: "auto" } : { width: "auto", height: "100%" };
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          overflow: "hidden"
        },
        maximizeFrame && [
          classNames2.rootMaximizeFrame,
          {
            height: "100%",
            width: "100%"
          }
        ],
        isLoaded && shouldFadeIn && !shouldStartVisible && AnimationClassNames.fadeIn400,
        (isCenter || isContain || isCover || isCenterContain || isCenterCover) && {
          position: "relative"
        },
        className
      ],
      image: [
        classNames2.image,
        {
          display: "block",
          opacity: 0
        },
        isLoaded && [
          "is-loaded",
          {
            opacity: 1
          }
        ],
        isCenter && [classNames2.imageCenter, ImageFitStyles],
        isContain && [
          classNames2.imageContain,
          supportsObjectFit && {
            width: "100%",
            height: "100%",
            objectFit: "contain"
          },
          !supportsObjectFit && fallbackObjectFitStyles,
          !supportsObjectFit && ImageFitStyles
        ],
        isCover && [
          classNames2.imageCover,
          supportsObjectFit && {
            width: "100%",
            height: "100%",
            objectFit: "cover"
          },
          !supportsObjectFit && fallbackObjectFitStyles,
          !supportsObjectFit && ImageFitStyles
        ],
        isCenterContain && [
          classNames2.imageCenterContain,
          isLandscape && {
            maxWidth: "100%"
          },
          !isLandscape && {
            maxHeight: "100%"
          },
          ImageFitStyles
        ],
        isCenterCover && [
          classNames2.imageCenterCover,
          isLandscape && {
            maxHeight: "100%"
          },
          !isLandscape && {
            maxWidth: "100%"
          },
          ImageFitStyles
        ],
        isNone2 && [
          classNames2.imageNone,
          {
            width: "auto",
            height: "auto"
          }
        ],
        isNotImageFit && [
          !!width && !height && {
            height: "auto",
            width: "100%"
          },
          !width && !!height && {
            height: "100%",
            width: "auto"
          },
          !!width && !!height && {
            height: "100%",
            width: "100%"
          }
        ],
        isLandscape && classNames2.imageLandscape,
        !isLandscape && classNames2.imagePortrait,
        !isLoaded && "is-notLoaded",
        shouldFadeIn && "is-fadeIn",
        isError && "is-error"
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Image/Image.js
  var Image2 = styled(ImageBase, getStyles4, void 0, {
    scope: "Image"
  }, true);
  Image2.displayName = "Image";

  // ../node_modules/@fluentui/react/lib/components/Icon/FontIcon.js
  var React203 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.styles.js
  var classNames = mergeStyleSets({
    root: {
      display: "inline-block"
    },
    placeholder: [
      "ms-Icon-placeHolder",
      {
        width: "1em"
      }
    ],
    image: [
      "ms-Icon-imageContainer",
      {
        overflow: "hidden"
      }
    ]
  });
  var MS_ICON = "ms-Icon";
  var getStyles5 = function(props) {
    var className = props.className, iconClassName = props.iconClassName, isPlaceholder = props.isPlaceholder, isImage = props.isImage, styles4 = props.styles;
    return {
      root: [
        isPlaceholder && classNames.placeholder,
        classNames.root,
        isImage && classNames.image,
        iconClassName,
        className,
        styles4 && styles4.root,
        // eslint-disable-next-line deprecation/deprecation
        styles4 && styles4.imageContainer
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Icon/FontIcon.js
  var getIconContent = memoizeFunction(
    function(iconName) {
      var _a5 = getIcon(iconName) || {
        subset: {},
        code: void 0
      }, code2 = _a5.code, subset = _a5.subset;
      if (!code2) {
        return null;
      }
      return {
        children: code2,
        iconClassName: subset.className,
        fontFamily: subset.fontFace && subset.fontFace.fontFamily,
        mergeImageProps: subset.mergeImageProps
      };
    },
    void 0,
    true
    /*ignoreNullOrUndefinedResult */
  );
  var FontIcon = function(props) {
    var iconName = props.iconName, className = props.className, _a5 = props.style, style = _a5 === void 0 ? {} : _a5;
    var iconContent = getIconContent(iconName) || {};
    var iconClassName = iconContent.iconClassName, children = iconContent.children, fontFamily = iconContent.fontFamily, mergeImageProps = iconContent.mergeImageProps;
    var nativeProps = getNativeProps2(props, htmlElementProperties2);
    var accessibleName = props["aria-label"] || props.title;
    var containerProps = props["aria-label"] || props["aria-labelledby"] || props.title ? {
      role: mergeImageProps ? void 0 : "img"
    } : {
      "aria-hidden": true
    };
    var finalChildren = children;
    if (mergeImageProps) {
      if (typeof children === "object" && typeof children.props === "object" && accessibleName) {
        finalChildren = React203.cloneElement(children, { alt: accessibleName });
      }
    }
    return React203.createElement("i", __assign({ "data-icon-name": iconName }, containerProps, nativeProps, mergeImageProps ? {
      title: void 0,
      "aria-label": void 0
    } : {}, {
      className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className),
      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles
      // https://github.com/microsoft/fluentui/issues/10449
      style: __assign({ fontFamily }, style)
    }), finalChildren);
  };
  var getFontIcon = memoizeFunction(function(iconName, className, ariaLabel) {
    return FontIcon({ iconName, className, "aria-label": ariaLabel });
  });

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.base.js
  var getClassNames5 = classNamesFunction({
    // Icon is used a lot by other components.
    // It's likely to see expected cases which pass different className to the Icon.
    // Therefore setting a larger cache size.
    cacheSize: 100
  });
  var IconBase = (
    /** @class */
    function(_super) {
      __extends(IconBase2, _super);
      function IconBase2(props) {
        var _this = _super.call(this, props) || this;
        _this._onImageLoadingStateChange = function(state) {
          if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {
            _this.props.imageProps.onLoadingStateChange(state);
          }
          if (state === ImageLoadState.error) {
            _this.setState({ imageLoadError: true });
          }
        };
        _this.state = {
          imageLoadError: false
        };
        return _this;
      }
      IconBase2.prototype.render = function() {
        var _a5 = this.props, children = _a5.children, className = _a5.className, styles4 = _a5.styles, iconName = _a5.iconName, imageErrorAs = _a5.imageErrorAs, theme = _a5.theme;
        var isPlaceholder = typeof iconName === "string" && iconName.length === 0;
        var isImage = (
          // eslint-disable-next-line deprecation/deprecation
          !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image
        );
        var iconContent = getIconContent(iconName) || {};
        var iconClassName = iconContent.iconClassName, iconContentChildren = iconContent.children, mergeImageProps = iconContent.mergeImageProps;
        var classNames2 = getClassNames5(styles4, {
          theme,
          className,
          iconClassName,
          isImage,
          isPlaceholder
        });
        var RootType = isImage ? "span" : "i";
        var nativeProps = getNativeProps2(this.props, htmlElementProperties2, [
          "aria-label"
        ]);
        var imageLoadError = this.state.imageLoadError;
        var imageProps = __assign(__assign({}, this.props.imageProps), { onLoadingStateChange: this._onImageLoadingStateChange });
        var ImageType = imageLoadError && imageErrorAs || Image2;
        var ariaLabel = this.props["aria-label"] || this.props.ariaLabel;
        var accessibleName = imageProps.alt || ariaLabel || this.props.title;
        var hasName = !!(accessibleName || this.props["aria-labelledby"] || imageProps["aria-label"] || imageProps["aria-labelledby"]);
        var containerProps = hasName ? {
          role: isImage || mergeImageProps ? void 0 : "img",
          "aria-label": isImage || mergeImageProps ? void 0 : accessibleName
        } : {
          "aria-hidden": true
        };
        var finalIconContentChildren = iconContentChildren;
        if (mergeImageProps && iconContentChildren && typeof iconContentChildren === "object" && accessibleName) {
          finalIconContentChildren = React204.cloneElement(iconContentChildren, {
            alt: accessibleName
          });
        }
        return React204.createElement(RootType, __assign({ "data-icon-name": iconName }, containerProps, nativeProps, mergeImageProps ? {
          title: void 0,
          "aria-label": void 0
        } : {}, { className: classNames2.root }), isImage ? React204.createElement(ImageType, __assign({}, imageProps)) : children || finalIconContentChildren);
      };
      return IconBase2;
    }(React204.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.js
  var Icon = styled(IconBase, getStyles5, void 0, {
    scope: "Icon"
  }, true);
  Icon.displayName = "Icon";

  // ../node_modules/@fluentui/react/lib/components/Icon/ImageIcon.js
  var React205 = __toESM(require_react());
  var ImageIcon = function(props) {
    var className = props.className, imageProps = props.imageProps;
    var nativeProps = getNativeProps2(props, htmlElementProperties2, [
      "aria-label",
      "aria-labelledby",
      "title",
      "aria-describedby"
    ]);
    var altText = imageProps.alt || props["aria-label"];
    var hasName = altText || props["aria-labelledby"] || props.title || imageProps["aria-label"] || imageProps["aria-labelledby"] || imageProps.title;
    var imageNameProps = {
      "aria-labelledby": props["aria-labelledby"],
      "aria-describedby": props["aria-describedby"],
      title: props.title
    };
    var containerProps = hasName ? {} : {
      "aria-hidden": true
    };
    return React205.createElement(
      "div",
      __assign({}, containerProps, nativeProps, { className: css(MS_ICON, classNames.root, classNames.image, className) }),
      React205.createElement(Image2, __assign({}, imageNameProps, imageProps, { alt: hasName ? altText : "" }))
    );
  };

  // ../node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js
  var React206 = __toESM(require_react());

  // ../node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.types.js
  var FocusZoneTabbableElements = {
    /** Tabbing is not allowed */
    none: 0,
    /** All tabbing action is allowed */
    all: 1,
    /** Tabbing is allowed only on input elements */
    inputOnly: 2
  };
  var FocusZoneDirection;
  (function(FocusZoneDirection2) {
    FocusZoneDirection2[FocusZoneDirection2["vertical"] = 0] = "vertical";
    FocusZoneDirection2[FocusZoneDirection2["horizontal"] = 1] = "horizontal";
    FocusZoneDirection2[FocusZoneDirection2["bidirectional"] = 2] = "bidirectional";
    FocusZoneDirection2[FocusZoneDirection2["domOrder"] = 3] = "domOrder";
  })(FocusZoneDirection || (FocusZoneDirection = {}));

  // ../node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js
  var IS_FOCUSABLE_ATTRIBUTE2 = "data-is-focusable";
  var IS_ENTER_DISABLED_ATTRIBUTE = "data-disable-click-on-enter";
  var FOCUSZONE_ID_ATTRIBUTE2 = "data-focuszone-id";
  var TABINDEX = "tabindex";
  var NO_VERTICAL_WRAP = "data-no-vertical-wrap";
  var NO_HORIZONTAL_WRAP = "data-no-horizontal-wrap";
  var LARGE_DISTANCE_FROM_CENTER = 999999999;
  var LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;
  var focusZoneStyles;
  var focusZoneClass = "ms-FocusZone";
  function raiseClickFromKeyboardEvent(target, ev) {
    var event;
    if (typeof MouseEvent === "function") {
      event = new MouseEvent("click", {
        ctrlKey: ev === null || ev === void 0 ? void 0 : ev.ctrlKey,
        metaKey: ev === null || ev === void 0 ? void 0 : ev.metaKey,
        shiftKey: ev === null || ev === void 0 ? void 0 : ev.shiftKey,
        altKey: ev === null || ev === void 0 ? void 0 : ev.altKey,
        bubbles: ev === null || ev === void 0 ? void 0 : ev.bubbles,
        cancelable: ev === null || ev === void 0 ? void 0 : ev.cancelable
      });
    } else {
      event = document.createEvent("MouseEvents");
      event.initMouseEvent(
        "click",
        ev ? ev.bubbles : false,
        ev ? ev.cancelable : false,
        window,
        // not using getWindow() since this can only be run client side
        0,
        // detail
        0,
        // screen x
        0,
        // screen y
        0,
        // client x
        0,
        // client y
        ev ? ev.ctrlKey : false,
        ev ? ev.altKey : false,
        ev ? ev.shiftKey : false,
        ev ? ev.metaKey : false,
        0,
        // button
        null
      );
    }
    target.dispatchEvent(event);
  }
  function getRootClass() {
    if (!focusZoneStyles) {
      focusZoneStyles = mergeStyles({
        selectors: {
          ":focus": {
            outline: "none"
          }
        }
      }, focusZoneClass);
    }
    return focusZoneStyles;
  }
  var _allInstances = {};
  var _outerZones = /* @__PURE__ */ new Set();
  var ALLOWED_INPUT_TYPES = ["text", "number", "password", "email", "tel", "url", "search", "textarea"];
  var ALLOW_VIRTUAL_ELEMENTS = false;
  var FocusZone = (
    /** @class */
    function(_super) {
      __extends(FocusZone2, _super);
      function FocusZone2(props) {
        var _this = this;
        var _a5, _b, _c, _d;
        _this = _super.call(this, props) || this;
        _this._root = React206.createRef();
        _this._mergedRef = createMergedRef();
        _this._onFocus = function(ev) {
          if (_this._portalContainsElement(ev.target)) {
            return;
          }
          var _a6 = _this.props, onActiveElementChanged = _a6.onActiveElementChanged, doNotAllowFocusEventToPropagate = _a6.doNotAllowFocusEventToPropagate, stopFocusPropagation = _a6.stopFocusPropagation, onFocusNotification = _a6.onFocusNotification, onFocus = _a6.onFocus, shouldFocusInnerElementWhenReceivedFocus = _a6.shouldFocusInnerElementWhenReceivedFocus, defaultTabbableElement = _a6.defaultTabbableElement;
          var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);
          var newActiveElement;
          if (isImmediateDescendant) {
            newActiveElement = ev.target;
          } else {
            var parentElement = ev.target;
            while (parentElement && parentElement !== _this._root.current) {
              if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {
                newActiveElement = parentElement;
                break;
              }
              parentElement = getParent2(parentElement, ALLOW_VIRTUAL_ELEMENTS);
            }
          }
          if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {
            var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === "function" && _this._root.current && defaultTabbableElement(_this._root.current);
            if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {
              newActiveElement = maybeElementToFocus;
              maybeElementToFocus.focus();
            } else {
              _this.focus(true);
              if (_this._activeElement) {
                newActiveElement = null;
              }
            }
          }
          var initialElementFocused = !_this._activeElement;
          if (newActiveElement && newActiveElement !== _this._activeElement) {
            if (isImmediateDescendant || initialElementFocused) {
              _this._setFocusAlignment(newActiveElement, true, true);
            }
            _this._activeElement = newActiveElement;
            if (initialElementFocused) {
              _this._updateTabIndexes();
            }
          }
          if (onActiveElementChanged) {
            onActiveElementChanged(_this._activeElement, ev);
          }
          if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {
            ev.stopPropagation();
          }
          if (onFocus) {
            onFocus(ev);
          } else if (onFocusNotification) {
            onFocusNotification();
          }
        };
        _this._onBlur = function() {
          _this._setParkedFocus(false);
        };
        _this._onMouseDown = function(ev) {
          if (_this._portalContainsElement(ev.target)) {
            return;
          }
          var disabled = _this.props.disabled;
          if (disabled) {
            return;
          }
          var target = ev.target;
          var path4 = [];
          while (target && target !== _this._root.current) {
            path4.push(target);
            target = getParent2(target, ALLOW_VIRTUAL_ELEMENTS);
          }
          while (path4.length) {
            target = path4.pop();
            if (target && isElementTabbable(target)) {
              _this._setActiveElement(target, true);
            }
            if (isElementFocusZone(target)) {
              break;
            }
          }
        };
        _this._onKeyDown = function(ev, theme) {
          if (_this._portalContainsElement(ev.target)) {
            return;
          }
          var _a6 = _this.props, direction = _a6.direction, disabled = _a6.disabled, isInnerZoneKeystroke = _a6.isInnerZoneKeystroke, pagingSupportDisabled = _a6.pagingSupportDisabled, shouldEnterInnerZone = _a6.shouldEnterInnerZone;
          if (disabled) {
            return;
          }
          if (_this.props.onKeyDown) {
            _this.props.onKeyDown(ev);
          }
          if (ev.isDefaultPrevented()) {
            return;
          }
          if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {
            return;
          }
          if ((shouldEnterInnerZone && shouldEnterInnerZone(ev) || isInnerZoneKeystroke && isInnerZoneKeystroke(ev)) && _this._isImmediateDescendantOfZone(ev.target)) {
            var innerZone = _this._getFirstInnerZone();
            if (innerZone) {
              if (!innerZone.focus(true)) {
                return;
              }
            } else if (isElementFocusSubZone(ev.target)) {
              if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {
                return;
              }
            } else {
              return;
            }
          } else if (ev.altKey) {
            return;
          } else {
            switch (ev.which) {
              case KeyCodes.space:
                if (_this._shouldRaiseClicksOnSpace && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                  break;
                }
                return;
              case KeyCodes.left:
                if (direction !== FocusZoneDirection.vertical) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusLeft(theme)) {
                    break;
                  }
                }
                return;
              case KeyCodes.right:
                if (direction !== FocusZoneDirection.vertical) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusRight(theme)) {
                    break;
                  }
                }
                return;
              case KeyCodes.up:
                if (direction !== FocusZoneDirection.horizontal) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusUp()) {
                    break;
                  }
                }
                return;
              case KeyCodes.down:
                if (direction !== FocusZoneDirection.horizontal) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusDown()) {
                    break;
                  }
                }
                return;
              case KeyCodes.pageDown:
                if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {
                  break;
                }
                return;
              case KeyCodes.pageUp:
                if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {
                  break;
                }
                return;
              case KeyCodes.tab:
                if (
                  // eslint-disable-next-line deprecation/deprecation
                  _this.props.allowTabKey || _this.props.handleTabKey === FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZoneTabbableElements.inputOnly && _this._isElementInput(ev.target)
                ) {
                  var focusChanged = false;
                  _this._processingTabKey = true;
                  if (direction === FocusZoneDirection.vertical || !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {
                    focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();
                  } else {
                    var tabWithDirection = getRTL2(theme) ? !ev.shiftKey : ev.shiftKey;
                    focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);
                  }
                  _this._processingTabKey = false;
                  if (focusChanged) {
                    break;
                  } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {
                    _this._activeElement = null;
                  }
                }
                return;
              case KeyCodes.home:
                if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, false)) {
                  return false;
                }
                var firstChild = _this._root.current && _this._root.current.firstChild;
                if (_this._root.current && firstChild && _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {
                  break;
                }
                return;
              case KeyCodes.end:
                if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, true)) {
                  return false;
                }
                var lastChild = _this._root.current && _this._root.current.lastChild;
                if (_this._root.current && _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {
                  break;
                }
                return;
              case KeyCodes.enter:
                if (_this._shouldRaiseClicksOnEnter && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                  break;
                }
                return;
              default:
                return;
            }
          }
          ev.preventDefault();
          ev.stopPropagation();
        };
        _this._getHorizontalDistanceFromCenter = function(isForward, activeRect, targetRect) {
          var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0;
          var targetRectTop = Math.floor(targetRect.top);
          var activeRectBottom = Math.floor(activeRect.bottom);
          var targetRectBottom = Math.floor(targetRect.bottom);
          var activeRectTop = Math.floor(activeRect.top);
          var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;
          var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;
          if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {
            if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
              return 0;
            }
            return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
          }
          if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
          }
          return LARGE_DISTANCE_FROM_CENTER;
        };
        initializeComponentRef(_this);
        if (true) {
          warnDeprecations("FocusZone", props, {
            rootProps: void 0,
            allowTabKey: "handleTabKey",
            elementType: "as",
            ariaDescribedBy: "aria-describedby",
            ariaLabelledBy: "aria-labelledby"
          });
        }
        _this._id = getId("FocusZone");
        _this._focusAlignment = {
          left: 0,
          top: 0
        };
        _this._processingTabKey = false;
        var shouldRaiseClicksFallback = (_b = (_a5 = props.shouldRaiseClicks) !== null && _a5 !== void 0 ? _a5 : FocusZone2.defaultProps.shouldRaiseClicks) !== null && _b !== void 0 ? _b : true;
        _this._shouldRaiseClicksOnEnter = (_c = props.shouldRaiseClicksOnEnter) !== null && _c !== void 0 ? _c : shouldRaiseClicksFallback;
        _this._shouldRaiseClicksOnSpace = (_d = props.shouldRaiseClicksOnSpace) !== null && _d !== void 0 ? _d : shouldRaiseClicksFallback;
        return _this;
      }
      FocusZone2.getOuterZones = function() {
        return _outerZones.size;
      };
      FocusZone2._onKeyDownCapture = function(ev) {
        if (ev.which === KeyCodes.tab) {
          _outerZones.forEach(function(zone) {
            return zone._updateTabIndexes();
          });
        }
      };
      FocusZone2.prototype.componentDidMount = function() {
        var root3 = this._root.current;
        _allInstances[this._id] = this;
        if (root3) {
          var parentElement = getParent2(root3, ALLOW_VIRTUAL_ELEMENTS);
          while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {
            if (isElementFocusZone(parentElement)) {
              this._isInnerZone = true;
              break;
            }
            parentElement = getParent2(parentElement, ALLOW_VIRTUAL_ELEMENTS);
          }
          if (!this._isInnerZone) {
            _outerZones.add(this);
            this._root.current && this._root.current.addEventListener("keydown", FocusZone2._onKeyDownCapture, true);
          }
          this._root.current && this._root.current.addEventListener("blur", this._onBlur, true);
          this._updateTabIndexes();
          if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === "string") {
            this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement);
          } else if (this.props.defaultActiveElement) {
            this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);
          }
          if (this.props.shouldFocusOnMount) {
            this.focus();
          }
        }
      };
      FocusZone2.prototype.componentDidUpdate = function() {
        var root3 = this._root.current;
        var doc = this._getDocument();
        if (this._activeElement && !elementContains2(this._root.current, this._activeElement, ALLOW_VIRTUAL_ELEMENTS) || this._defaultFocusElement && !elementContains2(this._root.current, this._defaultFocusElement, ALLOW_VIRTUAL_ELEMENTS)) {
          this._activeElement = null;
          this._defaultFocusElement = null;
          this._updateTabIndexes();
        }
        if (!this.props.preventFocusRestoration && doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || doc.activeElement === root3)) {
          var elementToFocus = getFocusableByIndexPath(root3, this._lastIndexPath);
          if (elementToFocus) {
            this._setActiveElement(elementToFocus, true);
            elementToFocus.focus();
            this._setParkedFocus(false);
          } else {
            this._setParkedFocus(true);
          }
        }
      };
      FocusZone2.prototype.componentWillUnmount = function() {
        delete _allInstances[this._id];
        if (!this._isInnerZone) {
          _outerZones.delete(this);
          this._root.current && this._root.current.removeEventListener("keydown", FocusZone2._onKeyDownCapture, true);
        }
        if (this._root.current) {
          this._root.current.removeEventListener("blur", this._onBlur, true);
        }
        this._activeElement = null;
        this._defaultFocusElement = null;
      };
      FocusZone2.prototype.render = function() {
        var _this = this;
        var _a5 = this.props, tag = _a5.as, elementType = _a5.elementType, rootProps = _a5.rootProps, ariaDescribedBy = _a5.ariaDescribedBy, ariaLabelledBy = _a5.ariaLabelledBy, className = _a5.className;
        var divProps = getNativeProps2(this.props, htmlElementProperties2);
        var Tag2 = tag || elementType || "div";
        this._evaluateFocusBeforeRender();
        var theme = getTheme();
        return React206.createElement(Tag2, __assign({ "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy }, divProps, rootProps, {
          // Once the getClassName correctly memoizes inputs this should
          // be replaced so that className is passed to getRootClass and is included there so
          // the class names will always be in the same order.
          className: css(getRootClass(), className),
          // eslint-disable-next-line deprecation/deprecation
          ref: this._mergedRef(this.props.elementRef, this._root),
          "data-focuszone-id": this._id,
          // eslint-disable-next-line react/jsx-no-bind
          onKeyDown: function(ev) {
            return _this._onKeyDown(ev, theme);
          },
          onFocus: this._onFocus,
          onMouseDownCapture: this._onMouseDown
        }), this.props.children);
      };
      FocusZone2.prototype.focus = function(forceIntoFirstElement, bypassHiddenElements) {
        if (forceIntoFirstElement === void 0) {
          forceIntoFirstElement = false;
        }
        if (bypassHiddenElements === void 0) {
          bypassHiddenElements = false;
        }
        if (this._root.current) {
          if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true" && this._isInnerZone) {
            var ownerZoneElement = this._getOwnerZone(this._root.current);
            if (ownerZoneElement !== this._root.current) {
              var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
              return !!ownerZone && ownerZone.focusElement(this._root.current);
            }
            return false;
          } else if (!forceIntoFirstElement && this._activeElement && elementContains2(this._root.current, this._activeElement) && isElementTabbable(this._activeElement) && (!bypassHiddenElements || isElementVisibleAndNotHidden(this._activeElement))) {
            this._activeElement.focus();
            return true;
          } else {
            var firstChild = this._root.current.firstChild;
            return this.focusElement(getNextElement(this._root.current, firstChild, true, void 0, void 0, void 0, void 0, void 0, bypassHiddenElements));
          }
        }
        return false;
      };
      FocusZone2.prototype.focusLast = function() {
        if (this._root.current) {
          var lastChild = this._root.current && this._root.current.lastChild;
          return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));
        }
        return false;
      };
      FocusZone2.prototype.focusElement = function(element2, forceAlignment) {
        var _a5 = this.props, onBeforeFocus = _a5.onBeforeFocus, shouldReceiveFocus = _a5.shouldReceiveFocus;
        if (shouldReceiveFocus && !shouldReceiveFocus(element2) || onBeforeFocus && !onBeforeFocus(element2)) {
          return false;
        }
        if (element2) {
          this._setActiveElement(element2, forceAlignment);
          if (this._activeElement) {
            this._activeElement.focus();
          }
          return true;
        }
        return false;
      };
      FocusZone2.prototype.setFocusAlignment = function(point6) {
        this._focusAlignment = point6;
      };
      Object.defineProperty(FocusZone2.prototype, "defaultFocusElement", {
        get: function() {
          return this._defaultFocusElement;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FocusZone2.prototype, "activeElement", {
        get: function() {
          return this._activeElement;
        },
        enumerable: false,
        configurable: true
      });
      FocusZone2.prototype._evaluateFocusBeforeRender = function() {
        var root3 = this._root.current;
        var doc = this._getDocument();
        if (doc) {
          var focusedElement = doc.activeElement;
          if (focusedElement !== root3) {
            var shouldRestoreFocus = elementContains2(root3, focusedElement, false);
            this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root3, focusedElement) : void 0;
          }
        }
      };
      FocusZone2.prototype._setParkedFocus = function(isParked) {
        var root3 = this._root.current;
        if (root3 && this._isParked !== isParked) {
          this._isParked = isParked;
          if (isParked) {
            if (!this.props.allowFocusRoot) {
              this._parkedTabIndex = root3.getAttribute("tabindex");
              root3.setAttribute("tabindex", "-1");
            }
            root3.focus();
          } else if (!this.props.allowFocusRoot) {
            if (this._parkedTabIndex) {
              root3.setAttribute("tabindex", this._parkedTabIndex);
              this._parkedTabIndex = void 0;
            } else {
              root3.removeAttribute("tabindex");
            }
          }
        }
      };
      FocusZone2.prototype._setActiveElement = function(element2, forceAlignment) {
        var previousActiveElement = this._activeElement;
        this._activeElement = element2;
        if (previousActiveElement) {
          if (isElementFocusZone(previousActiveElement)) {
            this._updateTabIndexes(previousActiveElement);
          }
          previousActiveElement.tabIndex = -1;
        }
        if (this._activeElement) {
          if (!this._focusAlignment || forceAlignment) {
            this._setFocusAlignment(element2, true, true);
          }
          this._activeElement.tabIndex = 0;
        }
      };
      FocusZone2.prototype._preventDefaultWhenHandled = function(ev) {
        this.props.preventDefaultWhenHandled && ev.preventDefault();
      };
      FocusZone2.prototype._tryInvokeClickForFocusable = function(targetElement, ev) {
        var target = targetElement;
        if (target === this._root.current) {
          return false;
        }
        do {
          if (target.tagName === "BUTTON" || target.tagName === "A" || target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.tagName === "SUMMARY") {
            return false;
          }
          if (this._isImmediateDescendantOfZone(target) && target.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true" && target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== "true") {
            raiseClickFromKeyboardEvent(target, ev);
            return true;
          }
          target = getParent2(target, ALLOW_VIRTUAL_ELEMENTS);
        } while (target !== this._root.current);
        return false;
      };
      FocusZone2.prototype._getFirstInnerZone = function(rootElement) {
        rootElement = rootElement || this._activeElement || this._root.current;
        if (!rootElement) {
          return null;
        }
        if (isElementFocusZone(rootElement)) {
          return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
        }
        var child = rootElement.firstElementChild;
        while (child) {
          if (isElementFocusZone(child)) {
            return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
          }
          var match2 = this._getFirstInnerZone(child);
          if (match2) {
            return match2;
          }
          child = child.nextElementSibling;
        }
        return null;
      };
      FocusZone2.prototype._moveFocus = function(isForward, getDistanceFromCenter, ev, useDefaultWrap) {
        if (useDefaultWrap === void 0) {
          useDefaultWrap = true;
        }
        var element2 = this._activeElement;
        var candidateDistance = -1;
        var candidateElement = void 0;
        var changedFocus = false;
        var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;
        if (!element2 || !this._root.current) {
          return false;
        }
        if (this._isElementInput(element2)) {
          if (!this._shouldInputLoseFocus(element2, isForward)) {
            return false;
          }
        }
        var activeRect = isBidirectional ? element2.getBoundingClientRect() : null;
        do {
          element2 = isForward ? getNextElement(this._root.current, element2) : getPreviousElement(this._root.current, element2);
          if (isBidirectional) {
            if (element2) {
              var targetRect = element2.getBoundingClientRect();
              var elementDistance = getDistanceFromCenter(activeRect, targetRect);
              if (elementDistance === -1 && candidateDistance === -1) {
                candidateElement = element2;
                break;
              }
              if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {
                candidateDistance = elementDistance;
                candidateElement = element2;
              }
              if (candidateDistance >= 0 && elementDistance < 0) {
                break;
              }
            }
          } else {
            candidateElement = element2;
            break;
          }
        } while (element2);
        if (candidateElement && candidateElement !== this._activeElement) {
          changedFocus = true;
          this.focusElement(candidateElement);
        } else if (this.props.isCircularNavigation && useDefaultWrap) {
          if (isForward) {
            return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
          } else {
            return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
          }
        }
        return changedFocus;
      };
      FocusZone2.prototype._moveFocusDown = function() {
        var _this = this;
        var targetTop = -1;
        var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
        if (
          // eslint-disable-next-line deprecation/deprecation
          this._moveFocus(true, function(activeRect, targetRect) {
            var distance = -1;
            var targetRectTop = Math.floor(targetRect.top);
            var activeRectBottom = Math.floor(activeRect.bottom);
            if (targetRectTop < activeRectBottom) {
              if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
                return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
              }
              return LARGE_DISTANCE_FROM_CENTER;
            }
            if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {
              targetTop = targetRectTop;
              if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
                distance = 0;
              } else {
                distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
              }
            }
            return distance;
          })
        ) {
          this._setFocusAlignment(this._activeElement, false, true);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusUp = function() {
        var _this = this;
        var targetTop = -1;
        var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
        if (
          // eslint-disable-next-line deprecation/deprecation
          this._moveFocus(false, function(activeRect, targetRect) {
            var distance = -1;
            var targetRectBottom = Math.floor(targetRect.bottom);
            var targetRectTop = Math.floor(targetRect.top);
            var activeRectTop = Math.floor(activeRect.top);
            if (targetRectBottom > activeRectTop) {
              if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
                return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
              }
              return LARGE_DISTANCE_FROM_CENTER;
            }
            if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {
              targetTop = targetRectTop;
              if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
                distance = 0;
              } else {
                distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
              }
            }
            return distance;
          })
        ) {
          this._setFocusAlignment(this._activeElement, false, true);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusLeft = function(theme) {
        var _this = this;
        var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
        if (this._moveFocus(
          getRTL2(theme),
          // eslint-disable-next-line deprecation/deprecation
          function(activeRect, targetRect) {
            var distance = -1;
            var topBottomComparison;
            if (getRTL2(theme)) {
              topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
            } else {
              topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
            }
            if (topBottomComparison && targetRect.right <= activeRect.right && _this.props.direction !== FocusZoneDirection.vertical) {
              distance = activeRect.right - targetRect.right;
            } else if (!shouldWrap) {
              distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
            }
            return distance;
          },
          void 0,
          shouldWrap
        )) {
          this._setFocusAlignment(this._activeElement, true, false);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusRight = function(theme) {
        var _this = this;
        var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
        if (this._moveFocus(
          !getRTL2(theme),
          // eslint-disable-next-line deprecation/deprecation
          function(activeRect, targetRect) {
            var distance = -1;
            var topBottomComparison;
            if (getRTL2(theme)) {
              topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
            } else {
              topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
            }
            if (topBottomComparison && targetRect.left >= activeRect.left && _this.props.direction !== FocusZoneDirection.vertical) {
              distance = targetRect.left - activeRect.left;
            } else if (!shouldWrap) {
              distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
            }
            return distance;
          },
          void 0,
          shouldWrap
        )) {
          this._setFocusAlignment(this._activeElement, true, false);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusPaging = function(isForward, useDefaultWrap) {
        if (useDefaultWrap === void 0) {
          useDefaultWrap = true;
        }
        var element2 = this._activeElement;
        if (!element2 || !this._root.current) {
          return false;
        }
        if (this._isElementInput(element2)) {
          if (!this._shouldInputLoseFocus(element2, isForward)) {
            return false;
          }
        }
        var scrollableParent = findScrollableParent(element2);
        if (!scrollableParent) {
          return false;
        }
        var candidateDistance = -1;
        var candidateElement = void 0;
        var targetTop = -1;
        var targetBottom = -1;
        var pagesize = scrollableParent.clientHeight;
        var activeRect = element2.getBoundingClientRect();
        do {
          element2 = isForward ? getNextElement(this._root.current, element2) : getPreviousElement(this._root.current, element2);
          if (element2) {
            var targetRect = element2.getBoundingClientRect();
            var targetRectTop = Math.floor(targetRect.top);
            var activeRectBottom = Math.floor(activeRect.bottom);
            var targetRectBottom = Math.floor(targetRect.bottom);
            var activeRectTop = Math.floor(activeRect.top);
            var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);
            var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;
            var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;
            if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {
              break;
            }
            if (elementDistance > -1) {
              if (isForward && targetRectTop > targetTop) {
                targetTop = targetRectTop;
                candidateDistance = elementDistance;
                candidateElement = element2;
              } else if (!isForward && targetRectBottom < targetBottom) {
                targetBottom = targetRectBottom;
                candidateDistance = elementDistance;
                candidateElement = element2;
              } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {
                candidateDistance = elementDistance;
                candidateElement = element2;
              }
            }
          }
        } while (element2);
        var changedFocus = false;
        if (candidateElement && candidateElement !== this._activeElement) {
          changedFocus = true;
          this.focusElement(candidateElement);
          this._setFocusAlignment(candidateElement, false, true);
        } else if (this.props.isCircularNavigation && useDefaultWrap) {
          if (isForward) {
            return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
          }
          return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
        }
        return changedFocus;
      };
      FocusZone2.prototype._setFocusAlignment = function(element2, isHorizontal, isVertical) {
        if (this.props.direction === FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {
          var rect = element2.getBoundingClientRect();
          var left = rect.left + rect.width / 2;
          var top_1 = rect.top + rect.height / 2;
          if (!this._focusAlignment) {
            this._focusAlignment = { left, top: top_1 };
          }
          if (isHorizontal) {
            this._focusAlignment.left = left;
          }
          if (isVertical) {
            this._focusAlignment.top = top_1;
          }
        }
      };
      FocusZone2.prototype._isImmediateDescendantOfZone = function(element2) {
        return this._getOwnerZone(element2) === this._root.current;
      };
      FocusZone2.prototype._getOwnerZone = function(element2) {
        var parentElement = getParent2(element2, ALLOW_VIRTUAL_ELEMENTS);
        while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {
          if (isElementFocusZone(parentElement)) {
            return parentElement;
          }
          parentElement = getParent2(parentElement, ALLOW_VIRTUAL_ELEMENTS);
        }
        return parentElement;
      };
      FocusZone2.prototype._updateTabIndexes = function(element2) {
        if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === "function") {
          this._activeElement = this.props.defaultTabbableElement(this._root.current);
        }
        if (!element2 && this._root.current) {
          this._defaultFocusElement = null;
          element2 = this._root.current;
          if (this._activeElement && !elementContains2(element2, this._activeElement)) {
            this._activeElement = null;
          }
        }
        if (this._activeElement && !isElementTabbable(this._activeElement)) {
          this._activeElement = null;
        }
        var childNodes = element2 && element2.children;
        for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {
          var child = childNodes[childIndex];
          if (!isElementFocusZone(child)) {
            if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "false") {
              child.setAttribute(TABINDEX, "-1");
            }
            if (isElementTabbable(child)) {
              if (this.props.disabled) {
                child.setAttribute(TABINDEX, "-1");
              } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
                this._defaultFocusElement = child;
                if (child.getAttribute(TABINDEX) !== "0") {
                  child.setAttribute(TABINDEX, "0");
                }
              } else if (child.getAttribute(TABINDEX) !== "-1") {
                child.setAttribute(TABINDEX, "-1");
              }
            } else if (child.tagName === "svg" && child.getAttribute("focusable") !== "false") {
              child.setAttribute("focusable", "false");
            }
          } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true") {
            if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
              this._defaultFocusElement = child;
              if (child.getAttribute(TABINDEX) !== "0") {
                child.setAttribute(TABINDEX, "0");
              }
            } else if (child.getAttribute(TABINDEX) !== "-1") {
              child.setAttribute(TABINDEX, "-1");
            }
          }
          this._updateTabIndexes(child);
        }
      };
      FocusZone2.prototype._isContentEditableElement = function(element2) {
        return element2 && element2.getAttribute("contenteditable") === "true";
      };
      FocusZone2.prototype._isElementInput = function(element2) {
        if (element2 && element2.tagName && (element2.tagName.toLowerCase() === "input" || element2.tagName.toLowerCase() === "textarea")) {
          return true;
        }
        return false;
      };
      FocusZone2.prototype._shouldInputLoseFocus = function(element2, isForward) {
        if (!this._processingTabKey && element2 && element2.type && ALLOWED_INPUT_TYPES.indexOf(element2.type.toLowerCase()) > -1) {
          var selectionStart = element2.selectionStart;
          var selectionEnd = element2.selectionEnd;
          var isRangeSelected = selectionStart !== selectionEnd;
          var inputValue = element2.value;
          var isReadonly = element2.readOnly;
          if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element2))) {
            return false;
          }
        }
        return true;
      };
      FocusZone2.prototype._shouldWrapFocus = function(element2, noWrapDataAttribute) {
        return this.props.checkForNoWrap ? shouldWrapFocus(element2, noWrapDataAttribute) : true;
      };
      FocusZone2.prototype._portalContainsElement = function(element2) {
        return element2 && !!this._root.current && portalContainsElement(element2, this._root.current);
      };
      FocusZone2.prototype._getDocument = function() {
        return getDocument(this._root.current);
      };
      FocusZone2.defaultProps = {
        isCircularNavigation: false,
        direction: FocusZoneDirection.bidirectional,
        shouldRaiseClicks: true
      };
      return FocusZone2;
    }(React206.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.js
  var React220 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.js
  var React219 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.base.js
  var React218 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.types.js
  var ContextualMenuItemType;
  (function(ContextualMenuItemType2) {
    ContextualMenuItemType2[ContextualMenuItemType2["Normal"] = 0] = "Normal";
    ContextualMenuItemType2[ContextualMenuItemType2["Divider"] = 1] = "Divider";
    ContextualMenuItemType2[ContextualMenuItemType2["Header"] = 2] = "Header";
    ContextualMenuItemType2[ContextualMenuItemType2["Section"] = 3] = "Section";
  })(ContextualMenuItemType || (ContextualMenuItemType = {}));

  // ../node_modules/@fluentui/react/lib/utilities/contextualMenu/contextualMenuUtility.js
  function getIsChecked(item) {
    if (item.canCheck) {
      return !!(item.isChecked || item.checked);
    }
    if (typeof item.isChecked === "boolean") {
      return item.isChecked;
    }
    if (typeof item.checked === "boolean") {
      return item.checked;
    }
    return null;
  }
  function hasSubmenu(item) {
    return !!(item.subMenuProps || item.items);
  }
  function isItemDisabled(item) {
    return !!(item.isDisabled || item.disabled);
  }
  function getMenuItemAriaRole(item) {
    var isChecked = getIsChecked(item);
    var canCheck = isChecked !== null;
    return canCheck ? "menuitemcheckbox" : "menuitem";
  }

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItem.base.js
  var React207 = __toESM(require_react());
  var defaultIconRenderer = function(props) {
    var item = props.item, classNames2 = props.classNames;
    var iconProps = item.iconProps;
    return React207.createElement(Icon, __assign({}, iconProps, { className: classNames2.icon }));
  };
  var renderItemIcon = function(props) {
    var item = props.item, hasIcons = props.hasIcons;
    if (!hasIcons) {
      return null;
    }
    if (item.onRenderIcon) {
      return item.onRenderIcon(props, defaultIconRenderer);
    }
    return defaultIconRenderer(props);
  };
  var renderCheckMarkIcon = function(_a5) {
    var onCheckmarkClick = _a5.onCheckmarkClick, item = _a5.item, classNames2 = _a5.classNames;
    var isItemChecked = getIsChecked(item);
    if (onCheckmarkClick) {
      var onClick = function(e3) {
        return onCheckmarkClick(item, e3);
      };
      return React207.createElement(Icon, {
        iconName: item.canCheck !== false && isItemChecked ? "CheckMark" : "",
        className: classNames2.checkmarkIcon,
        // eslint-disable-next-line react/jsx-no-bind
        onClick
      });
    }
    return null;
  };
  var renderItemName = function(_a5) {
    var item = _a5.item, classNames2 = _a5.classNames;
    if (item.text || item.name) {
      return React207.createElement("span", { className: classNames2.label }, item.text || item.name);
    }
    return null;
  };
  var renderSecondaryText = function(_a5) {
    var item = _a5.item, classNames2 = _a5.classNames;
    if (item.secondaryText) {
      return React207.createElement("span", { className: classNames2.secondaryText }, item.secondaryText);
    }
    return null;
  };
  var renderSubMenuIcon = function(_a5) {
    var item = _a5.item, classNames2 = _a5.classNames, theme = _a5.theme;
    if (hasSubmenu(item)) {
      return React207.createElement(Icon, __assign({ iconName: getRTL2(theme) ? "ChevronLeft" : "ChevronRight" }, item.submenuIconProps, { className: classNames2.subMenuIcon }));
    }
    return null;
  };
  var ContextualMenuItemBase = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuItemBase2, _super);
      function ContextualMenuItemBase2(props) {
        var _this = _super.call(this, props) || this;
        _this.openSubMenu = function() {
          var _a5 = _this.props, item = _a5.item, openSubMenu = _a5.openSubMenu, getSubmenuTarget = _a5.getSubmenuTarget;
          if (getSubmenuTarget) {
            var submenuTarget = getSubmenuTarget();
            if (hasSubmenu(item) && openSubMenu && submenuTarget) {
              openSubMenu(item, submenuTarget);
            }
          }
        };
        _this.dismissSubMenu = function() {
          var _a5 = _this.props, item = _a5.item, dismissSubMenu = _a5.dismissSubMenu;
          if (hasSubmenu(item) && dismissSubMenu) {
            dismissSubMenu();
          }
        };
        _this.dismissMenu = function(dismissAll) {
          var dismissMenu = _this.props.dismissMenu;
          if (dismissMenu) {
            dismissMenu(void 0, dismissAll);
          }
        };
        initializeComponentRef(_this);
        return _this;
      }
      ContextualMenuItemBase2.prototype.render = function() {
        var _a5 = this.props, item = _a5.item, classNames2 = _a5.classNames;
        var renderContent = item.onRenderContent || this._renderLayout;
        return React207.createElement("div", { className: item.split ? classNames2.linkContentMenu : classNames2.linkContent }, renderContent(this.props, {
          renderCheckMarkIcon,
          renderItemIcon,
          renderItemName,
          renderSecondaryText,
          renderSubMenuIcon
        }));
      };
      ContextualMenuItemBase2.prototype._renderLayout = function(props, defaultRenders) {
        return React207.createElement(
          React207.Fragment,
          null,
          defaultRenders.renderCheckMarkIcon(props),
          defaultRenders.renderItemIcon(props),
          defaultRenders.renderItemName(props),
          defaultRenders.renderSecondaryText(props),
          defaultRenders.renderSubMenuIcon(props)
        );
      };
      return ContextualMenuItemBase2;
    }(React207.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.classNames.js
  var getDividerClassNames = memoizeFunction(
    // eslint-disable-next-line deprecation/deprecation
    function(theme) {
      return mergeStyleSets({
        wrapper: {
          display: "inline-flex",
          height: "100%",
          alignItems: "center"
        },
        divider: {
          width: 1,
          height: "100%",
          backgroundColor: theme.palette.neutralTertiaryAlt
        }
      });
    }
  );

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.cnstyles.js
  var CONTEXTUAL_MENU_ITEM_HEIGHT = 36;
  var MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);
  var getMenuItemStyles = memoizeFunction(function(theme) {
    var _a5, _b, _c, _d, _e;
    var semanticColors = theme.semanticColors, fonts = theme.fonts, palette = theme.palette;
    var ContextualMenuItemBackgroundHoverColor = semanticColors.menuItemBackgroundHovered;
    var ContextualMenuItemTextHoverColor = semanticColors.menuItemTextHovered;
    var ContextualMenuItemBackgroundSelectedColor = semanticColors.menuItemBackgroundPressed;
    var ContextualMenuItemDividerColor = semanticColors.bodyDivider;
    var menuItemStyles = {
      item: [
        fonts.medium,
        {
          color: semanticColors.bodyText,
          position: "relative",
          boxSizing: "border-box"
        }
      ],
      divider: {
        display: "block",
        height: "1px",
        backgroundColor: ContextualMenuItemDividerColor,
        position: "relative"
      },
      root: [
        getFocusStyle(theme),
        fonts.medium,
        {
          color: semanticColors.bodyText,
          backgroundColor: "transparent",
          border: "none",
          width: "100%",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
          display: "block",
          cursor: "pointer",
          padding: "0px 8px 0 4px",
          textAlign: "left"
        }
      ],
      rootDisabled: {
        color: semanticColors.disabledBodyText,
        cursor: "default",
        pointerEvents: "none",
        selectors: (_a5 = {}, _a5[HighContrastSelector] = {
          // ensure disabled text looks different than enabled
          color: "GrayText",
          opacity: 1
        }, _a5)
      },
      rootHovered: {
        backgroundColor: ContextualMenuItemBackgroundHoverColor,
        color: ContextualMenuItemTextHoverColor,
        selectors: {
          ".ms-ContextualMenu-icon": {
            color: palette.themeDarkAlt
          },
          ".ms-ContextualMenu-submenuIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootFocused: {
        backgroundColor: palette.white
      },
      rootChecked: {
        selectors: {
          ".ms-ContextualMenu-checkmarkIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootPressed: {
        backgroundColor: ContextualMenuItemBackgroundSelectedColor,
        selectors: {
          ".ms-ContextualMenu-icon": {
            color: palette.themeDark
          },
          ".ms-ContextualMenu-submenuIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootExpanded: {
        backgroundColor: ContextualMenuItemBackgroundSelectedColor,
        color: semanticColors.bodyTextChecked,
        selectors: (_b = {
          ".ms-ContextualMenu-submenuIcon": (_c = {}, _c[HighContrastSelector] = {
            // icons inside of anchor tags are not properly inheriting color in high contrast
            color: "inherit"
          }, _c)
        }, _b[HighContrastSelector] = __assign({}, getHighContrastNoAdjustStyle()), _b)
      },
      linkContent: {
        whiteSpace: "nowrap",
        height: "inherit",
        display: "flex",
        alignItems: "center",
        maxWidth: "100%"
      },
      anchorLink: {
        padding: "0px 8px 0 4px",
        textRendering: "auto",
        color: "inherit",
        letterSpacing: "normal",
        wordSpacing: "normal",
        textTransform: "none",
        textIndent: "0px",
        textShadow: "none",
        textDecoration: "none",
        boxSizing: "border-box"
      },
      label: {
        margin: "0 4px",
        verticalAlign: "middle",
        display: "inline-block",
        flexGrow: "1",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
      },
      secondaryText: {
        color: theme.palette.neutralSecondary,
        paddingLeft: "20px",
        textAlign: "right"
      },
      icon: {
        display: "inline-block",
        minHeight: "1px",
        maxHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
        fontSize: IconFontSizes.medium,
        width: IconFontSizes.medium,
        margin: "0 4px",
        verticalAlign: "middle",
        flexShrink: "0",
        selectors: (_d = {}, _d[MediumScreenSelector] = {
          fontSize: IconFontSizes.large,
          width: IconFontSizes.large
        }, _d)
      },
      iconColor: {
        color: semanticColors.menuIcon
      },
      iconDisabled: {
        color: semanticColors.disabledBodyText
      },
      checkmarkIcon: {
        color: semanticColors.bodySubtext
      },
      subMenuIcon: {
        height: CONTEXTUAL_MENU_ITEM_HEIGHT,
        lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
        color: palette.neutralSecondary,
        textAlign: "center",
        display: "inline-block",
        verticalAlign: "middle",
        flexShrink: "0",
        fontSize: IconFontSizes.small,
        selectors: (_e = {
          ":hover": {
            color: palette.neutralPrimary
          },
          ":active": {
            color: palette.neutralPrimary
          }
        }, _e[MediumScreenSelector] = {
          fontSize: IconFontSizes.medium
          // 16px
        }, _e)
      },
      splitButtonFlexContainer: [
        getFocusStyle(theme),
        {
          display: "flex",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          flexWrap: "nowrap",
          justifyContent: "center",
          alignItems: "flex-start"
        }
      ]
    };
    return concatStyleSets(menuItemStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.classNames.js
  var CONTEXTUAL_SPLIT_MENU_MINWIDTH = "28px";
  var MediumScreenSelector2 = getScreenSelector(0, ScreenWidthMaxMedium);
  var getSplitButtonVerticalDividerClassNames = memoizeFunction(
    /* eslint-disable deprecation/deprecation */
    function(theme) {
      var _a5;
      return mergeStyleSets(getDividerClassNames(theme), {
        /* eslint-enable deprecation/deprecation */
        wrapper: {
          position: "absolute",
          right: 28,
          selectors: (_a5 = {}, _a5[MediumScreenSelector2] = {
            right: 32
            // fontSize of the icon increased from 12px to 16px
          }, _a5)
        },
        divider: {
          height: 16,
          width: 1
        }
      });
    }
  );
  var GlobalClassNames5 = {
    item: "ms-ContextualMenu-item",
    divider: "ms-ContextualMenu-divider",
    root: "ms-ContextualMenu-link",
    isChecked: "is-checked",
    isExpanded: "is-expanded",
    isDisabled: "is-disabled",
    linkContent: "ms-ContextualMenu-linkContent",
    linkContentMenu: "ms-ContextualMenu-linkContent",
    icon: "ms-ContextualMenu-icon",
    iconColor: "ms-ContextualMenu-iconColor",
    checkmarkIcon: "ms-ContextualMenu-checkmarkIcon",
    subMenuIcon: "ms-ContextualMenu-submenuIcon",
    label: "ms-ContextualMenu-itemText",
    secondaryText: "ms-ContextualMenu-secondaryText",
    splitMenu: "ms-ContextualMenu-splitMenu",
    screenReaderText: "ms-ContextualMenu-screenReaderText"
  };
  var getItemClassNames = memoizeFunction(function(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className) {
    var _a5, _b, _c, _d;
    var styles4 = getMenuItemStyles(theme);
    var classNames2 = getGlobalClassNames(GlobalClassNames5, theme);
    return mergeStyleSets({
      item: [classNames2.item, styles4.item, itemClassName],
      divider: [classNames2.divider, styles4.divider, dividerClassName],
      root: [
        classNames2.root,
        styles4.root,
        checked && [classNames2.isChecked, styles4.rootChecked],
        isAnchorLink && styles4.anchorLink,
        expanded && [classNames2.isExpanded, styles4.rootExpanded],
        disabled && [classNames2.isDisabled, styles4.rootDisabled],
        !disabled && !expanded && [
          {
            selectors: (_a5 = {
              ":hover": styles4.rootHovered,
              ":active": styles4.rootPressed
            }, _a5[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles4.rootFocused, _a5[".".concat(IsFocusVisibleClassName, " &:hover")] = { background: "inherit;" }, _a5)
          }
        ],
        className
      ],
      splitPrimary: [
        styles4.root,
        {
          width: "calc(100% - ".concat(CONTEXTUAL_SPLIT_MENU_MINWIDTH, ")")
        },
        checked && ["is-checked", styles4.rootChecked],
        (disabled || primaryDisabled) && ["is-disabled", styles4.rootDisabled],
        !(disabled || primaryDisabled) && !checked && [
          {
            selectors: (_b = {
              ":hover": styles4.rootHovered
            }, // when hovering over the splitPrimary also affect the splitMenu
            _b[":hover ~ .".concat(classNames2.splitMenu)] = styles4.rootHovered, _b[":active"] = styles4.rootPressed, _b[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles4.rootFocused, _b[".".concat(IsFocusVisibleClassName, " &:hover")] = { background: "inherit;" }, _b)
          }
        ]
      ],
      splitMenu: [
        classNames2.splitMenu,
        styles4.root,
        {
          flexBasis: "0",
          padding: "0 8px",
          minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH
        },
        expanded && ["is-expanded", styles4.rootExpanded],
        disabled && ["is-disabled", styles4.rootDisabled],
        !disabled && !expanded && [
          {
            selectors: (_c = {
              ":hover": styles4.rootHovered,
              ":active": styles4.rootPressed
            }, _c[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles4.rootFocused, _c[".".concat(IsFocusVisibleClassName, " &:hover")] = { background: "inherit;" }, _c)
          }
        ]
      ],
      anchorLink: styles4.anchorLink,
      linkContent: [classNames2.linkContent, styles4.linkContent],
      linkContentMenu: [
        classNames2.linkContentMenu,
        styles4.linkContent,
        {
          justifyContent: "center"
        }
      ],
      icon: [
        classNames2.icon,
        knownIcon && styles4.iconColor,
        styles4.icon,
        iconClassName,
        disabled && [classNames2.isDisabled, styles4.iconDisabled]
      ],
      iconColor: styles4.iconColor,
      checkmarkIcon: [classNames2.checkmarkIcon, knownIcon && styles4.checkmarkIcon, styles4.icon, iconClassName],
      subMenuIcon: [
        classNames2.subMenuIcon,
        styles4.subMenuIcon,
        subMenuClassName,
        expanded && { color: theme.palette.neutralPrimary },
        disabled && [styles4.iconDisabled]
      ],
      label: [classNames2.label, styles4.label],
      secondaryText: [classNames2.secondaryText, styles4.secondaryText],
      splitContainer: [
        styles4.splitButtonFlexContainer,
        !disabled && !checked && [
          {
            selectors: (_d = {}, _d[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles4.rootFocused, _d)
          }
        ]
      ],
      screenReaderText: [
        classNames2.screenReaderText,
        styles4.screenReaderText,
        hiddenContentStyle,
        { visibility: "hidden" }
      ]
    });
  });
  var getItemStyles = function(props) {
    var theme = props.theme, disabled = props.disabled, expanded = props.expanded, checked = props.checked, isAnchorLink = props.isAnchorLink, knownIcon = props.knownIcon, itemClassName = props.itemClassName, dividerClassName = props.dividerClassName, iconClassName = props.iconClassName, subMenuClassName = props.subMenuClassName, primaryDisabled = props.primaryDisabled, className = props.className;
    return getItemClassNames(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className);
  };

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItem.js
  var ContextualMenuItem = styled(ContextualMenuItemBase, getItemStyles, void 0, { scope: "ContextualMenuItem" });

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.js
  var React211 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuItemWrapper.js
  var React208 = __toESM(require_react());
  var ContextualMenuItemWrapper = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuItemWrapper2, _super);
      function ContextualMenuItemWrapper2(props) {
        var _this = _super.call(this, props) || this;
        _this._onItemMouseEnter = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseEnter = _a5.onItemMouseEnter;
          if (onItemMouseEnter) {
            onItemMouseEnter(item, ev, ev.currentTarget);
          }
        };
        _this._onItemClick = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemClickBase = _a5.onItemClickBase;
          if (onItemClickBase) {
            onItemClickBase(item, ev, ev.currentTarget);
          }
        };
        _this._onItemMouseLeave = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseLeave = _a5.onItemMouseLeave;
          if (onItemMouseLeave) {
            onItemMouseLeave(item, ev);
          }
        };
        _this._onItemKeyDown = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemKeyDown = _a5.onItemKeyDown;
          if (onItemKeyDown) {
            onItemKeyDown(item, ev);
          }
        };
        _this._onItemMouseMove = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseMove = _a5.onItemMouseMove;
          if (onItemMouseMove) {
            onItemMouseMove(item, ev, ev.currentTarget);
          }
        };
        _this._getSubmenuTarget = function() {
          return void 0;
        };
        initializeComponentRef(_this);
        return _this;
      }
      ContextualMenuItemWrapper2.prototype.shouldComponentUpdate = function(newProps) {
        return !shallowCompare(newProps, this.props);
      };
      return ContextualMenuItemWrapper2;
    }(React208.Component)
  );

  // ../node_modules/@fluentui/react/lib/utilities/keytips/KeytipConstants.js
  var KTP_PREFIX = "ktp";
  var KTP_SEPARATOR = "-";
  var KTP_FULL_PREFIX = KTP_PREFIX + KTP_SEPARATOR;
  var DATAKTP_TARGET = "data-ktp-target";
  var DATAKTP_EXECUTE_TARGET = "data-ktp-execute-target";
  var KTP_LAYER_ID = "ktp-layer-id";
  var KeytipEvents;
  (function(KeytipEvents2) {
    KeytipEvents2.KEYTIP_ADDED = "keytipAdded";
    KeytipEvents2.KEYTIP_REMOVED = "keytipRemoved";
    KeytipEvents2.KEYTIP_UPDATED = "keytipUpdated";
    KeytipEvents2.PERSISTED_KEYTIP_ADDED = "persistedKeytipAdded";
    KeytipEvents2.PERSISTED_KEYTIP_REMOVED = "persistedKeytipRemoved";
    KeytipEvents2.PERSISTED_KEYTIP_EXECUTE = "persistedKeytipExecute";
    KeytipEvents2.ENTER_KEYTIP_MODE = "enterKeytipMode";
    KeytipEvents2.EXIT_KEYTIP_MODE = "exitKeytipMode";
  })(KeytipEvents || (KeytipEvents = {}));

  // ../node_modules/@fluentui/react/lib/utilities/keytips/KeytipManager.js
  var KeytipManager = (
    /** @class */
    function() {
      function KeytipManager2() {
        this.keytips = {};
        this.persistedKeytips = {};
        this.sequenceMapping = {};
        this.inKeytipMode = false;
        this.shouldEnterKeytipMode = true;
        this.delayUpdatingKeytipChange = false;
      }
      KeytipManager2.getInstance = function() {
        return this._instance;
      };
      KeytipManager2.prototype.init = function(delayUpdatingKeytipChange) {
        this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;
      };
      KeytipManager2.prototype.register = function(keytipProps, persisted) {
        if (persisted === void 0) {
          persisted = false;
        }
        var props = keytipProps;
        if (!persisted) {
          props = this.addParentOverflow(keytipProps);
          this.sequenceMapping[props.keySequences.toString()] = props;
        }
        var uniqueKeytip = this._getUniqueKtp(props);
        persisted ? this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip : this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip;
        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
          var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;
          EventGroup.raise(this, event_1, {
            keytip: props,
            uniqueID: uniqueKeytip.uniqueID
          });
        }
        return uniqueKeytip.uniqueID;
      };
      KeytipManager2.prototype.update = function(keytipProps, uniqueID) {
        var newKeytipProps = this.addParentOverflow(keytipProps);
        var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);
        var oldKeyTip = this.keytips[uniqueID];
        if (oldKeyTip) {
          uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;
          this.keytips[uniqueID] = uniqueKeytip;
          delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];
          this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;
          if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
            EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {
              keytip: uniqueKeytip.keytip,
              uniqueID: uniqueKeytip.uniqueID
            });
          }
        }
      };
      KeytipManager2.prototype.unregister = function(keytipToRemove, uniqueID, persisted) {
        if (persisted === void 0) {
          persisted = false;
        }
        persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];
        !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];
        var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;
        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
          EventGroup.raise(this, event, {
            keytip: keytipToRemove,
            uniqueID
          });
        }
      };
      KeytipManager2.prototype.enterKeytipMode = function() {
        EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);
      };
      KeytipManager2.prototype.exitKeytipMode = function() {
        EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);
      };
      KeytipManager2.prototype.getKeytips = function() {
        var _this = this;
        return Object.keys(this.keytips).map(function(key) {
          return _this.keytips[key].keytip;
        });
      };
      KeytipManager2.prototype.addParentOverflow = function(keytipProps) {
        var fullSequence = __spreadArray([], keytipProps.keySequences, true);
        fullSequence.pop();
        if (fullSequence.length !== 0) {
          var parentKeytip = this.sequenceMapping[fullSequence.toString()];
          if (parentKeytip && parentKeytip.overflowSetSequence) {
            return __assign(__assign({}, keytipProps), { overflowSetSequence: parentKeytip.overflowSetSequence });
          }
        }
        return keytipProps;
      };
      KeytipManager2.prototype.menuExecute = function(overflowButtonSequences, keytipSequences) {
        EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {
          overflowButtonSequences,
          keytipSequences
        });
      };
      KeytipManager2.prototype._getUniqueKtp = function(keytipProps, uniqueID) {
        if (uniqueID === void 0) {
          uniqueID = getId();
        }
        return { keytip: __assign({}, keytipProps), uniqueID };
      };
      KeytipManager2._instance = new KeytipManager2();
      return KeytipManager2;
    }()
  );

  // ../node_modules/@fluentui/react/lib/utilities/keytips/KeytipUtils.js
  function sequencesToID(keySequences) {
    return keySequences.reduce(function(prevValue, keySequence) {
      return prevValue + KTP_SEPARATOR + keySequence.split("").join(KTP_SEPARATOR);
    }, KTP_PREFIX);
  }
  function mergeOverflows(keySequences, overflowKeySequences) {
    var overflowSequenceLen = overflowKeySequences.length;
    var overflowSequence = __spreadArray([], overflowKeySequences, true).pop();
    var newKeySequences = __spreadArray([], keySequences, true);
    return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);
  }
  function getAriaDescribedBy(keySequences) {
    var describedby = " " + KTP_LAYER_ID;
    if (!keySequences.length) {
      return describedby;
    }
    return describedby + " " + sequencesToID(keySequences);
  }

  // ../node_modules/@fluentui/react/lib/components/KeytipData/useKeytipData.js
  var React209 = __toESM(require_react());
  function useKeytipData(options) {
    var uniqueId = React209.useRef();
    var keytipProps = options.keytipProps ? __assign({ disabled: options.disabled }, options.keytipProps) : void 0;
    var keytipManager = useConst(KeytipManager.getInstance());
    var prevOptions = usePrevious2(options);
    useIsomorphicLayoutEffect3(function() {
      if (uniqueId.current && keytipProps && ((prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.keytipProps) !== options.keytipProps || (prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.disabled) !== options.disabled)) {
        keytipManager.update(keytipProps, uniqueId.current);
      }
    });
    useIsomorphicLayoutEffect3(function() {
      if (keytipProps) {
        uniqueId.current = keytipManager.register(keytipProps);
      }
      return function() {
        keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);
      };
    }, []);
    var nativeKeytipProps = {
      ariaDescribedBy: void 0,
      keytipId: void 0
    };
    if (keytipProps) {
      nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);
    }
    return nativeKeytipProps;
  }
  function getKeytipData(keytipManager, keytipProps, describedByPrepend) {
    var newKeytipProps = keytipManager.addParentOverflow(keytipProps);
    var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));
    var keySequences = __spreadArray([], newKeytipProps.keySequences, true);
    if (newKeytipProps.overflowSetSequence) {
      keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);
    }
    var keytipId = sequencesToID(keySequences);
    return {
      ariaDescribedBy,
      keytipId
    };
  }

  // ../node_modules/@fluentui/react/lib/components/KeytipData/KeytipData.js
  var KeytipData = function(props) {
    var _a5;
    var children = props.children, keytipDataProps = __rest(props, ["children"]);
    var _b = useKeytipData(keytipDataProps), keytipId = _b.keytipId, ariaDescribedBy = _b.ariaDescribedBy;
    return children((_a5 = {}, _a5[DATAKTP_TARGET] = keytipId, _a5[DATAKTP_EXECUTE_TARGET] = keytipId, _a5["aria-describedby"] = ariaDescribedBy, _a5));
  };

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.js
  var ContextualMenuAnchor = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuAnchor2, _super);
      function ContextualMenuAnchor2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._anchor = React211.createRef();
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._getSubmenuTarget = function() {
          return _this._anchor.current ? _this._anchor.current : void 0;
        };
        _this._onItemClick = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemClick = _a5.onItemClick;
          if (onItemClick) {
            onItemClick(item, ev);
          }
        };
        _this._renderAriaDescription = function(ariaDescription, className) {
          return ariaDescription ? React211.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
        };
        return _this;
      }
      ContextualMenuAnchor2.prototype.render = function() {
        var _this = this;
        var _a5 = this.props, item = _a5.item, classNames2 = _a5.classNames, index2 = _a5.index, focusableElementIndex = _a5.focusableElementIndex, totalItemCount = _a5.totalItemCount, hasCheckmarks = _a5.hasCheckmarks, hasIcons = _a5.hasIcons, _b = _a5.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a5.expandedMenuItemKey, onItemClick = _a5.onItemClick, openSubMenu = _a5.openSubMenu, dismissSubMenu = _a5.dismissSubMenu, dismissMenu = _a5.dismissMenu;
        var anchorRel = item.rel;
        if (item.target && item.target.toLowerCase() === "_blank") {
          anchorRel = anchorRel ? anchorRel : "nofollow noopener noreferrer";
        }
        var itemHasSubmenu = hasSubmenu(item);
        var nativeProps = getNativeProps2(item, anchorProperties2);
        var disabled = isItemDisabled(item);
        var itemProps = item.itemProps, ariaDescription = item.ariaDescription;
        var keytipProps = item.keytipProps;
        if (keytipProps && itemHasSubmenu) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        if (ariaDescription) {
          this._ariaDescriptionId = getId();
        }
        var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : void 0, nativeProps["aria-describedby"]);
        var additionalItemProperties = {
          "aria-describedby": ariaDescribedByIds
        };
        return React211.createElement(
          "div",
          null,
          React211.createElement(KeytipData, { keytipProps: item.keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled }, function(keytipAttributes) {
            return React211.createElement(
              "a",
              __assign({}, additionalItemProperties, nativeProps, keytipAttributes, {
                ref: _this._anchor,
                href: item.href,
                target: item.target,
                rel: anchorRel,
                className: classNames2.root,
                role: "menuitem",
                "aria-haspopup": itemHasSubmenu || void 0,
                "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0,
                "aria-posinset": focusableElementIndex + 1,
                "aria-setsize": totalItemCount,
                "aria-disabled": isItemDisabled(item),
                // eslint-disable-next-line deprecation/deprecation
                style: item.style,
                onClick: _this._onItemClick,
                onMouseEnter: _this._onItemMouseEnter,
                onMouseLeave: _this._onItemMouseLeave,
                onMouseMove: _this._onItemMouseMove,
                onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : void 0
              }),
              React211.createElement(ChildrenRenderer, __assign({ componentRef: item.componentRef, item, classNames: classNames2, index: index2, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
              _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
            );
          })
        );
      };
      return ContextualMenuAnchor2;
    }(ContextualMenuItemWrapper)
  );

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.js
  var React212 = __toESM(require_react());
  var ContextualMenuButton = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuButton2, _super);
      function ContextualMenuButton2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._btn = React212.createRef();
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._renderAriaDescription = function(ariaDescription, className) {
          return ariaDescription ? React212.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
        };
        _this._getSubmenuTarget = function() {
          return _this._btn.current ? _this._btn.current : void 0;
        };
        return _this;
      }
      ContextualMenuButton2.prototype.render = function() {
        var _this = this;
        var _a5 = this.props, item = _a5.item, classNames2 = _a5.classNames, index2 = _a5.index, focusableElementIndex = _a5.focusableElementIndex, totalItemCount = _a5.totalItemCount, hasCheckmarks = _a5.hasCheckmarks, hasIcons = _a5.hasIcons, _b = _a5.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a5.expandedMenuItemKey, onItemMouseDown2 = _a5.onItemMouseDown, onItemClick = _a5.onItemClick, openSubMenu = _a5.openSubMenu, dismissSubMenu = _a5.dismissSubMenu, dismissMenu = _a5.dismissMenu;
        var isChecked = getIsChecked(item);
        var canCheck = isChecked !== null;
        var defaultRole = getMenuItemAriaRole(item);
        var itemHasSubmenu = hasSubmenu(item);
        var itemProps = item.itemProps, ariaLabel = item.ariaLabel, ariaDescription = item.ariaDescription;
        var buttonNativeProperties = getNativeProps2(item, buttonProperties2);
        delete buttonNativeProperties.disabled;
        var itemRole = item.role || defaultRole;
        if (ariaDescription) {
          this._ariaDescriptionId = getId();
        }
        var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : void 0, buttonNativeProperties["aria-describedby"]);
        var itemButtonProperties = {
          className: classNames2.root,
          onClick: this._onItemClick,
          onKeyDown: itemHasSubmenu ? this._onItemKeyDown : void 0,
          onMouseEnter: this._onItemMouseEnter,
          onMouseLeave: this._onItemMouseLeave,
          onMouseDown: function(ev) {
            return onItemMouseDown2 ? onItemMouseDown2(item, ev) : void 0;
          },
          onMouseMove: this._onItemMouseMove,
          href: item.href,
          title: item.title,
          "aria-label": ariaLabel,
          "aria-describedby": ariaDescribedByIds,
          "aria-haspopup": itemHasSubmenu || void 0,
          "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0,
          "aria-posinset": focusableElementIndex + 1,
          "aria-setsize": totalItemCount,
          "aria-disabled": isItemDisabled(item),
          "aria-checked": (itemRole === "menuitemcheckbox" || itemRole === "menuitemradio") && canCheck ? !!isChecked : void 0,
          "aria-selected": itemRole === "menuitem" && canCheck ? !!isChecked : void 0,
          role: itemRole,
          // eslint-disable-next-line deprecation/deprecation
          style: item.style
        };
        var keytipProps = item.keytipProps;
        if (keytipProps && itemHasSubmenu) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        return React212.createElement(KeytipData, { keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled: isItemDisabled(item) }, function(keytipAttributes) {
          return React212.createElement(
            "button",
            __assign({ ref: _this._btn }, buttonNativeProperties, itemButtonProperties, keytipAttributes),
            React212.createElement(ChildrenRenderer, __assign({ componentRef: item.componentRef, item, classNames: classNames2, index: index2, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
            _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
          );
        });
      };
      return ContextualMenuButton2;
    }(ContextualMenuItemWrapper)
  );

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.js
  var React214 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.styles.js
  var getStyles6 = function(props) {
    var theme = props.theme, getClassNames12 = props.getClassNames, className = props.className;
    if (!theme) {
      throw new Error("Theme is undefined or null.");
    }
    if (getClassNames12) {
      var names = getClassNames12(theme);
      return {
        wrapper: [names.wrapper],
        divider: [names.divider]
      };
    }
    return {
      wrapper: [
        {
          display: "inline-flex",
          height: "100%",
          alignItems: "center"
        },
        className
      ],
      divider: [
        {
          width: 1,
          height: "100%",
          backgroundColor: theme.palette.neutralTertiaryAlt
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.base.js
  var React213 = __toESM(require_react());
  var getClassNames6 = classNamesFunction();
  var VerticalDividerBase = React213.forwardRef(function(props, ref) {
    var styles4 = props.styles, theme = props.theme, deprecatedGetClassNames = props.getClassNames, className = props.className;
    var classNames2 = getClassNames6(styles4, { theme, getClassNames: deprecatedGetClassNames, className });
    return React213.createElement(
      "span",
      { className: classNames2.wrapper, ref },
      React213.createElement("span", { className: classNames2.divider })
    );
  });
  VerticalDividerBase.displayName = "VerticalDividerBase";

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.js
  var VerticalDivider = styled(VerticalDividerBase, getStyles6, void 0, {
    scope: "VerticalDivider"
  });

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.js
  var TouchIdleDelay = 500;
  var ContextualMenuSplitButton = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuSplitButton2, _super);
      function ContextualMenuSplitButton2(props) {
        var _this = _super.call(this, props) || this;
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._onItemKeyDown = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemKeyDown = _a5.onItemKeyDown;
          if (ev.which === KeyCodes.enter) {
            _this._executeItemClick(ev);
            ev.preventDefault();
            ev.stopPropagation();
          } else if (onItemKeyDown) {
            onItemKeyDown(item, ev);
          }
        };
        _this._getSubmenuTarget = function() {
          return _this._splitButton;
        };
        _this._renderAriaDescription = function(ariaDescription, className) {
          return ariaDescription ? React214.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
        };
        _this._onItemMouseEnterPrimary = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseEnter = _a5.onItemMouseEnter;
          if (onItemMouseEnter) {
            onItemMouseEnter(__assign(__assign({}, item), { subMenuProps: void 0, items: void 0 }), ev, _this._splitButton);
          }
        };
        _this._onItemMouseEnterIcon = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseEnter = _a5.onItemMouseEnter;
          if (onItemMouseEnter) {
            onItemMouseEnter(item, ev, _this._splitButton);
          }
        };
        _this._onItemMouseMovePrimary = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseMove = _a5.onItemMouseMove;
          if (onItemMouseMove) {
            onItemMouseMove(__assign(__assign({}, item), { subMenuProps: void 0, items: void 0 }), ev, _this._splitButton);
          }
        };
        _this._onItemMouseMoveIcon = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseMove = _a5.onItemMouseMove;
          if (onItemMouseMove) {
            onItemMouseMove(item, ev, _this._splitButton);
          }
        };
        _this._onIconItemClick = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemClickBase = _a5.onItemClickBase;
          if (onItemClickBase) {
            onItemClickBase(item, ev, _this._splitButton ? _this._splitButton : ev.currentTarget);
          }
        };
        _this._executeItemClick = function(ev) {
          var _a5 = _this.props, item = _a5.item, executeItemClick = _a5.executeItemClick, onItemClick = _a5.onItemClick;
          if (item.disabled || item.isDisabled) {
            return;
          }
          if (_this._processingTouch && !item.canCheck && onItemClick) {
            return onItemClick(item, ev);
          }
          if (executeItemClick) {
            executeItemClick(item, ev);
          }
        };
        _this._onTouchStart = function(ev) {
          if (_this._splitButton && !("onpointerdown" in _this._splitButton)) {
            _this._handleTouchAndPointerEvent(ev);
          }
        };
        _this._onPointerDown = function(ev) {
          if (ev.pointerType === "touch") {
            _this._handleTouchAndPointerEvent(ev);
            ev.preventDefault();
            ev.stopImmediatePropagation();
          }
        };
        _this._async = new Async(_this);
        _this._events = new EventGroup(_this);
        _this._dismissLabelId = getId();
        return _this;
      }
      ContextualMenuSplitButton2.prototype.componentDidMount = function() {
        if (this._splitButton && "onpointerdown" in this._splitButton) {
          this._events.on(this._splitButton, "pointerdown", this._onPointerDown, true);
        }
      };
      ContextualMenuSplitButton2.prototype.componentWillUnmount = function() {
        this._async.dispose();
        this._events.dispose();
      };
      ContextualMenuSplitButton2.prototype.render = function() {
        var _this = this;
        var _a5;
        var _b = this.props, item = _b.item, classNames2 = _b.classNames, index2 = _b.index, focusableElementIndex = _b.focusableElementIndex, totalItemCount = _b.totalItemCount, hasCheckmarks = _b.hasCheckmarks, hasIcons = _b.hasIcons, onItemMouseLeave = _b.onItemMouseLeave, expandedMenuItemKey = _b.expandedMenuItemKey;
        var itemHasSubmenu = hasSubmenu(item);
        var keytipProps = item.keytipProps;
        if (keytipProps) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        var ariaDescription = item.ariaDescription;
        if (ariaDescription) {
          this._ariaDescriptionId = getId();
        }
        var ariaChecked = (_a5 = getIsChecked(item)) !== null && _a5 !== void 0 ? _a5 : void 0;
        return React214.createElement(KeytipData, { keytipProps, disabled: isItemDisabled(item) }, function(keytipAttributes) {
          return React214.createElement(
            "div",
            { "data-ktp-target": keytipAttributes["data-ktp-target"], ref: function(splitButton) {
              return _this._splitButton = splitButton;
            }, role: getMenuItemAriaRole(item), "aria-label": item.ariaLabel, className: classNames2.splitContainer, "aria-disabled": isItemDisabled(item), "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0, "aria-haspopup": true, "aria-describedby": mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? _this._ariaDescriptionId : void 0, keytipAttributes["aria-describedby"]), "aria-checked": ariaChecked, "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount, onMouseEnter: _this._onItemMouseEnterPrimary, onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, __assign(__assign({}, item), { subMenuProps: null, items: null })) : void 0, onMouseMove: _this._onItemMouseMovePrimary, onKeyDown: _this._onItemKeyDown, onClick: _this._executeItemClick, onTouchStart: _this._onTouchStart, tabIndex: 0, "data-is-focusable": true, "aria-roledescription": item["aria-roledescription"] },
            _this._renderSplitPrimaryButton(item, classNames2, index2, hasCheckmarks, hasIcons),
            _this._renderSplitDivider(item),
            _this._renderSplitIconButton(item, classNames2, index2, keytipAttributes),
            _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
          );
        });
      };
      ContextualMenuSplitButton2.prototype._renderSplitPrimaryButton = function(item, classNames2, index2, hasCheckmarks, hasIcons) {
        var _a5 = this.props, _b = _a5.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemClick = _a5.onItemClick;
        var itemProps = {
          key: item.key,
          disabled: isItemDisabled(item) || item.primaryDisabled,
          /* eslint-disable deprecation/deprecation */
          name: item.name,
          text: item.text || item.name,
          secondaryText: item.secondaryText,
          /* eslint-enable deprecation/deprecation */
          className: classNames2.splitPrimary,
          canCheck: item.canCheck,
          isChecked: item.isChecked,
          checked: item.checked,
          iconProps: item.iconProps,
          id: this._dismissLabelId,
          onRenderIcon: item.onRenderIcon,
          data: item.data,
          "data-is-focusable": false
        };
        var itemComponentProps = item.itemProps;
        return React214.createElement(
          "button",
          __assign({}, getNativeProps2(itemProps, buttonProperties2)),
          React214.createElement(ChildrenRenderer, __assign({ "data-is-focusable": false, item: itemProps, classNames: classNames2, index: index2, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons }, itemComponentProps))
        );
      };
      ContextualMenuSplitButton2.prototype._renderSplitDivider = function(item) {
        var getDividerClassNames2 = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;
        return React214.createElement(VerticalDivider, { getClassNames: getDividerClassNames2 });
      };
      ContextualMenuSplitButton2.prototype._renderSplitIconButton = function(item, classNames2, index2, keytipAttributes) {
        var _a5 = this.props, _b = _a5.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemMouseLeave = _a5.onItemMouseLeave, onItemMouseDown2 = _a5.onItemMouseDown, openSubMenu = _a5.openSubMenu, dismissSubMenu = _a5.dismissSubMenu, dismissMenu = _a5.dismissMenu;
        var itemProps = {
          onClick: this._onIconItemClick,
          disabled: isItemDisabled(item),
          className: classNames2.splitMenu,
          subMenuProps: item.subMenuProps,
          submenuIconProps: item.submenuIconProps,
          split: true,
          key: item.key,
          "aria-labelledby": this._dismissLabelId
        };
        var buttonProps = __assign(__assign({}, getNativeProps2(itemProps, buttonProperties2)), {
          onMouseEnter: this._onItemMouseEnterIcon,
          onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : void 0,
          onMouseDown: function(ev) {
            return onItemMouseDown2 ? onItemMouseDown2(item, ev) : void 0;
          },
          onMouseMove: this._onItemMouseMoveIcon,
          "data-is-focusable": false,
          "data-ktp-execute-target": keytipAttributes["data-ktp-execute-target"],
          "aria-haspopup": true
        });
        var itemComponentProps = item.itemProps;
        return React214.createElement(
          "button",
          __assign({}, buttonProps),
          React214.createElement(ChildrenRenderer, __assign({ componentRef: item.componentRef, item: itemProps, classNames: classNames2, index: index2, hasIcons: false, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: this._getSubmenuTarget }, itemComponentProps))
        );
      };
      ContextualMenuSplitButton2.prototype._handleTouchAndPointerEvent = function(ev) {
        var _this = this;
        var onTap = this.props.onTap;
        if (onTap) {
          onTap(ev);
        }
        if (this._lastTouchTimeoutId) {
          this._async.clearTimeout(this._lastTouchTimeoutId);
          this._lastTouchTimeoutId = void 0;
        }
        this._processingTouch = true;
        this._lastTouchTimeoutId = this._async.setTimeout(function() {
          _this._processingTouch = false;
          _this._lastTouchTimeoutId = void 0;
        }, TouchIdleDelay);
      };
      return ContextualMenuSplitButton2;
    }(ContextualMenuItemWrapper)
  );

  // ../node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js
  var React216 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/utilities/decorators/withResponsiveMode.js
  var React215 = __toESM(require_react());
  var ResponsiveMode;
  (function(ResponsiveMode2) {
    ResponsiveMode2[ResponsiveMode2["small"] = 0] = "small";
    ResponsiveMode2[ResponsiveMode2["medium"] = 1] = "medium";
    ResponsiveMode2[ResponsiveMode2["large"] = 2] = "large";
    ResponsiveMode2[ResponsiveMode2["xLarge"] = 3] = "xLarge";
    ResponsiveMode2[ResponsiveMode2["xxLarge"] = 4] = "xxLarge";
    ResponsiveMode2[ResponsiveMode2["xxxLarge"] = 5] = "xxxLarge";
    ResponsiveMode2[ResponsiveMode2["unknown"] = 999] = "unknown";
  })(ResponsiveMode || (ResponsiveMode = {}));
  var RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];
  var _defaultMode;
  var _lastMode;
  function getInitialResponsiveMode() {
    var _a5;
    return (_a5 = _defaultMode !== null && _defaultMode !== void 0 ? _defaultMode : _lastMode) !== null && _a5 !== void 0 ? _a5 : ResponsiveMode.large;
  }
  function getWidthOfCurrentWindow(currentWindow) {
    try {
      return currentWindow.document.documentElement.clientWidth;
    } catch (e3) {
      return currentWindow.innerWidth;
    }
  }
  function getResponsiveMode(currentWindow) {
    var responsiveMode = ResponsiveMode.small;
    if (currentWindow) {
      try {
        while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {
          responsiveMode++;
        }
      } catch (e3) {
        responsiveMode = getInitialResponsiveMode();
      }
      _lastMode = responsiveMode;
    } else {
      if (_defaultMode !== void 0) {
        responsiveMode = _defaultMode;
      } else {
        throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");
      }
    }
    return responsiveMode;
  }

  // ../node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js
  var useResponsiveMode = function(elementRef, overrideResponsiveMode) {
    var _a5 = React216.useState(getInitialResponsiveMode()), lastResponsiveMode = _a5[0], setLastResponsiveMode = _a5[1];
    var onResize = React216.useCallback(function() {
      var newResponsiveMode = getResponsiveMode(getWindow2(elementRef.current));
      if (lastResponsiveMode !== newResponsiveMode) {
        setLastResponsiveMode(newResponsiveMode);
      }
    }, [elementRef, lastResponsiveMode]);
    var win2 = useWindow();
    useOnEvent(win2, "resize", onResize);
    React216.useEffect(function() {
      if (overrideResponsiveMode === void 0) {
        onResize();
      }
    }, [overrideResponsiveMode]);
    return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;
  };

  // ../node_modules/@fluentui/react/lib/utilities/MenuContext/MenuContext.js
  var React217 = __toESM(require_react());
  var MenuContext2 = React217.createContext({});

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.base.js
  var getClassNames7 = classNamesFunction();
  var getContextualMenuItemClassNames = classNamesFunction();
  var DEFAULT_PROPS2 = {
    items: [],
    shouldFocusOnMount: true,
    gapSpace: 0,
    directionalHint: DirectionalHint.bottomAutoEdge,
    beakWidth: 16
  };
  function getItemCount(items) {
    var totalItemCount = 0;
    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
      var item = items_1[_i];
      if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {
        var itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
        totalItemCount += itemCount;
      }
    }
    return totalItemCount;
  }
  function getSubmenuItems(item, options) {
    var target = options === null || options === void 0 ? void 0 : options.target;
    var items = item.subMenuProps ? item.subMenuProps.items : item.items;
    if (items) {
      var overrideItems = [];
      for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
        var subItem = items_2[_i];
        if (subItem.preferMenuTargetAsEventTarget) {
          var onClick = subItem.onClick, contextItem = __rest(subItem, ["onClick"]);
          overrideItems.push(__assign(__assign({}, contextItem), { onClick: getOnClickWithOverrideTarget(onClick, target) }));
        } else {
          overrideItems.push(subItem);
        }
      }
      return overrideItems;
    }
  }
  function canAnyMenuItemsCheck(items) {
    return items.some(function(item) {
      if (item.canCheck) {
        return true;
      }
      if (item.sectionProps && item.sectionProps.items.some(function(submenuItem) {
        return submenuItem.canCheck === true;
      })) {
        return true;
      }
      return false;
    });
  }
  var NavigationIdleDelay = 250;
  var COMPONENT_NAME2 = "ContextualMenu";
  var _getMenuItemStylesFunction = memoizeFunction(function() {
    var styles4 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styles4[_i] = arguments[_i];
    }
    return function(styleProps) {
      return concatStyleSetsWithProps.apply(void 0, __spreadArray([styleProps, getItemStyles], styles4, false));
    };
  });
  function useVisibility(props, targetWindow) {
    var _a5 = props.hidden, hidden = _a5 === void 0 ? false : _a5, onMenuDismissed = props.onMenuDismissed, onMenuOpened = props.onMenuOpened;
    var previousHidden = usePrevious2(hidden);
    var onMenuOpenedRef = React218.useRef(onMenuOpened);
    var onMenuClosedRef = React218.useRef(onMenuDismissed);
    var propsRef = React218.useRef(props);
    onMenuOpenedRef.current = onMenuOpened;
    onMenuClosedRef.current = onMenuDismissed;
    propsRef.current = props;
    React218.useEffect(function() {
      var _a6, _b;
      if (hidden && previousHidden === false) {
        (_a6 = onMenuClosedRef.current) === null || _a6 === void 0 ? void 0 : _a6.call(onMenuClosedRef, propsRef.current);
      } else if (!hidden && previousHidden !== false) {
        (_b = onMenuOpenedRef.current) === null || _b === void 0 ? void 0 : _b.call(onMenuOpenedRef, propsRef.current);
      }
    }, [hidden, previousHidden]);
    React218.useEffect(function() {
      return function() {
        var _a6;
        return (_a6 = onMenuClosedRef.current) === null || _a6 === void 0 ? void 0 : _a6.call(onMenuClosedRef, propsRef.current);
      };
    }, []);
  }
  function useSubMenuState(_a5, dismiss) {
    var hidden = _a5.hidden, items = _a5.items, theme = _a5.theme, className = _a5.className, id = _a5.id, menuTarget = _a5.target;
    var _b = React218.useState(), expandedMenuItemKey = _b[0], setExpandedMenuItemKey = _b[1];
    var _c = React218.useState(), submenuTarget = _c[0], setSubmenuTarget = _c[1];
    var _d = React218.useState(), shouldFocusOnContainer = _d[0], setShouldFocusOnContainer = _d[1];
    var subMenuId = useId3(COMPONENT_NAME2, id);
    var closeSubMenu = React218.useCallback(function() {
      setShouldFocusOnContainer(void 0);
      setExpandedMenuItemKey(void 0);
      setSubmenuTarget(void 0);
    }, []);
    var openSubMenu = React218.useCallback(function(_a6, target, focusContainer) {
      var submenuItemKey = _a6.key;
      if (expandedMenuItemKey === submenuItemKey) {
        return;
      }
      target.focus();
      setShouldFocusOnContainer(focusContainer);
      setExpandedMenuItemKey(submenuItemKey);
      setSubmenuTarget(target);
    }, [expandedMenuItemKey]);
    React218.useEffect(function() {
      if (hidden) {
        closeSubMenu();
      }
    }, [hidden, closeSubMenu]);
    var onSubMenuDismiss = useOnSubmenuDismiss(dismiss, closeSubMenu);
    var getSubmenuProps = function() {
      var item = findItemByKeyFromItems(expandedMenuItemKey, items);
      var submenuProps = null;
      if (item) {
        submenuProps = {
          items: getSubmenuItems(item, { target: menuTarget }),
          target: submenuTarget,
          onDismiss: onSubMenuDismiss,
          isSubMenu: true,
          id: subMenuId,
          shouldFocusOnMount: true,
          shouldFocusOnContainer,
          directionalHint: getRTL2(theme) ? DirectionalHint.leftTopEdge : DirectionalHint.rightTopEdge,
          className,
          gapSpace: 0,
          isBeakVisible: false
        };
        if (item.subMenuProps) {
          assign2(submenuProps, item.subMenuProps);
        }
        if (item.preferMenuTargetAsEventTarget) {
          var onItemClick = item.onItemClick;
          submenuProps.onItemClick = getOnClickWithOverrideTarget(onItemClick, menuTarget);
        }
      }
      return submenuProps;
    };
    return [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss];
  }
  function useShouldUpdateFocusOnMouseMove(_a5) {
    var delayUpdateFocusOnHover = _a5.delayUpdateFocusOnHover, hidden = _a5.hidden;
    var shouldUpdateFocusOnMouseEvent = React218.useRef(!delayUpdateFocusOnHover);
    var gotMouseMove = React218.useRef(false);
    React218.useEffect(function() {
      shouldUpdateFocusOnMouseEvent.current = !delayUpdateFocusOnHover;
      gotMouseMove.current = hidden ? false : !delayUpdateFocusOnHover && gotMouseMove.current;
    }, [delayUpdateFocusOnHover, hidden]);
    var onMenuFocusCapture = React218.useCallback(function() {
      if (delayUpdateFocusOnHover) {
        shouldUpdateFocusOnMouseEvent.current = false;
      }
    }, [delayUpdateFocusOnHover]);
    return [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture];
  }
  function usePreviousActiveElement(_a5, targetWindow, hostElement) {
    var hidden = _a5.hidden, onRestoreFocus = _a5.onRestoreFocus;
    var previousActiveElement = React218.useRef();
    var tryFocusPreviousActiveElement = React218.useCallback(function(options) {
      var _a6, _b;
      if (onRestoreFocus) {
        onRestoreFocus(options);
      } else if (options === null || options === void 0 ? void 0 : options.documentContainsFocus) {
        (_b = (_a6 = previousActiveElement.current) === null || _a6 === void 0 ? void 0 : _a6.focus) === null || _b === void 0 ? void 0 : _b.call(_a6);
      }
    }, [onRestoreFocus]);
    useIsomorphicLayoutEffect3(function() {
      var _a6, _b;
      if (!hidden) {
        var newElement = targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement;
        if (!((_a6 = hostElement.current) === null || _a6 === void 0 ? void 0 : _a6.contains(newElement)) && newElement.tagName !== "BODY") {
          previousActiveElement.current = newElement;
        }
      } else if (previousActiveElement.current) {
        tryFocusPreviousActiveElement({
          originalElement: previousActiveElement.current,
          containsFocus: true,
          documentContainsFocus: ((_b = getDocument()) === null || _b === void 0 ? void 0 : _b.hasFocus()) || false
        });
        previousActiveElement.current = void 0;
      }
    }, [hidden, targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement, tryFocusPreviousActiveElement, hostElement]);
    return [tryFocusPreviousActiveElement];
  }
  function useKeyHandlers(_a5, dismiss, hostElement, openSubMenu) {
    var theme = _a5.theme, isSubMenu = _a5.isSubMenu, _b = _a5.focusZoneProps, _c = _b === void 0 ? {} : _b, checkForNoWrap = _c.checkForNoWrap, _d = _c.direction, focusZoneDirection = _d === void 0 ? FocusZoneDirection.vertical : _d;
    var lastKeyDownWasAltOrMeta = React218.useRef();
    var keyHandler = function(ev, shouldHandleKey, dismissAllMenus) {
      var handled = false;
      if (shouldHandleKey(ev)) {
        dismiss(ev, dismissAllMenus);
        ev.preventDefault();
        ev.stopPropagation();
        handled = true;
      }
      return handled;
    };
    var shouldCloseSubMenu = function(ev) {
      var submenuCloseKey = getRTL2(theme) ? KeyCodes.right : KeyCodes.left;
      if (ev.which !== submenuCloseKey || !isSubMenu) {
        return false;
      }
      return !!(focusZoneDirection === FocusZoneDirection.vertical || checkForNoWrap && !shouldWrapFocus(ev.target, "data-no-horizontal-wrap"));
    };
    var shouldHandleKeyDown = function(ev) {
      return (
        // eslint-disable-next-line deprecation/deprecation
        ev.which === KeyCodes.escape || shouldCloseSubMenu(ev) || // eslint-disable-next-line deprecation/deprecation
        ev.which === KeyCodes.up && (ev.altKey || ev.metaKey)
      );
    };
    var onKeyDown = function(ev) {
      lastKeyDownWasAltOrMeta.current = isAltOrMeta(ev);
      var dismissAllMenus = ev.which === KeyCodes.escape && (isMac() || isIOS());
      return keyHandler(ev, shouldHandleKeyDown, dismissAllMenus);
    };
    var shouldHandleKeyUp = function(ev) {
      var keyPressIsAltOrMetaAlone = lastKeyDownWasAltOrMeta.current && isAltOrMeta(ev);
      lastKeyDownWasAltOrMeta.current = false;
      return !!keyPressIsAltOrMetaAlone && !(isIOS() || isMac());
    };
    var onKeyUp = function(ev) {
      return keyHandler(
        ev,
        shouldHandleKeyUp,
        true
        /* dismissAllMenus */
      );
    };
    var onMenuKeyDown = function(ev) {
      var handled = onKeyDown(ev);
      if (handled || !hostElement.current) {
        return;
      }
      var hasModifier = !!(ev.altKey || ev.metaKey);
      var isUp = ev.which === KeyCodes.up;
      var isDown = ev.which === KeyCodes.down;
      if (!hasModifier && (isUp || isDown)) {
        var elementToFocus = isUp ? getLastFocusable(hostElement.current, hostElement.current.lastChild, true) : getFirstFocusable(hostElement.current, hostElement.current.firstChild, true);
        if (elementToFocus) {
          elementToFocus.focus();
          ev.preventDefault();
          ev.stopPropagation();
        }
      }
    };
    var onItemKeyDown = function(item, ev) {
      var openKey = getRTL2(theme) ? KeyCodes.left : KeyCodes.right;
      if (!item.disabled && // eslint-disable-next-line deprecation/deprecation
      (ev.which === openKey || ev.which === KeyCodes.enter || ev.which === KeyCodes.down && (ev.altKey || ev.metaKey))) {
        openSubMenu(item, ev.currentTarget);
        ev.preventDefault();
      }
    };
    return [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown];
  }
  function useScrollHandler(asyncTracker) {
    var isScrollIdle = React218.useRef(true);
    var scrollIdleTimeoutId = React218.useRef();
    var onScroll = function() {
      if (!isScrollIdle.current && scrollIdleTimeoutId.current !== void 0) {
        asyncTracker.clearTimeout(scrollIdleTimeoutId.current);
        scrollIdleTimeoutId.current = void 0;
      } else {
        isScrollIdle.current = false;
      }
      scrollIdleTimeoutId.current = asyncTracker.setTimeout(function() {
        isScrollIdle.current = true;
      }, NavigationIdleDelay);
    };
    return [onScroll, isScrollIdle];
  }
  function useOnSubmenuDismiss(dismiss, closeSubMenu) {
    var isMountedRef = React218.useRef(false);
    React218.useEffect(function() {
      isMountedRef.current = true;
      return function() {
        isMountedRef.current = false;
      };
    }, []);
    var onSubMenuDismiss = function(ev, dismissAll) {
      if (dismissAll) {
        dismiss(ev, dismissAll);
      } else if (isMountedRef.current) {
        closeSubMenu();
      }
    };
    return onSubMenuDismiss;
  }
  function useSubmenuEnterTimer(_a5, asyncTracker) {
    var _b = _a5.subMenuHoverDelay, subMenuHoverDelay = _b === void 0 ? NavigationIdleDelay : _b;
    var enterTimerRef = React218.useRef(void 0);
    var cancelSubMenuTimer = function() {
      if (enterTimerRef.current !== void 0) {
        asyncTracker.clearTimeout(enterTimerRef.current);
        enterTimerRef.current = void 0;
      }
    };
    var startSubmenuTimer = function(onTimerExpired) {
      enterTimerRef.current = asyncTracker.setTimeout(function() {
        onTimerExpired();
        cancelSubMenuTimer();
      }, subMenuHoverDelay);
    };
    return [cancelSubMenuTimer, startSubmenuTimer, enterTimerRef];
  }
  function useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss) {
    var menuTarget = props.target;
    var onItemMouseEnterBase = function(item, ev, target) {
      if (shouldUpdateFocusOnMouseEvent.current) {
        gotMouseMove.current = true;
      }
      if (shouldIgnoreMouseEvent()) {
        return;
      }
      updateFocusOnMouseEvent(item, ev, target);
    };
    var onItemMouseMoveBase = function(item, ev, target) {
      var targetElement = ev.currentTarget;
      if (shouldUpdateFocusOnMouseEvent.current) {
        gotMouseMove.current = true;
      } else {
        return;
      }
      if (!isScrollIdle.current || subMenuEntryTimer.current !== void 0 || targetElement === (targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement)) {
        return;
      }
      updateFocusOnMouseEvent(item, ev, target);
    };
    var shouldIgnoreMouseEvent = function() {
      return !isScrollIdle.current || !gotMouseMove.current;
    };
    var onMouseItemLeave = function(item, ev) {
      var _a5;
      if (shouldIgnoreMouseEvent()) {
        return;
      }
      cancelSubMenuTimer();
      if (expandedMenuItemKey !== void 0) {
        return;
      }
      if (hostElement.current.setActive) {
        try {
          hostElement.current.setActive();
        } catch (e3) {
        }
      } else {
        (_a5 = hostElement.current) === null || _a5 === void 0 ? void 0 : _a5.focus();
      }
    };
    var updateFocusOnMouseEvent = function(item, ev, target) {
      var targetElement = target ? target : ev.currentTarget;
      if (item.key === expandedMenuItemKey) {
        return;
      }
      cancelSubMenuTimer();
      if (expandedMenuItemKey === void 0) {
        targetElement.focus();
      }
      if (hasSubmenu(item)) {
        ev.stopPropagation();
        startSubmenuTimer(function() {
          targetElement.focus();
          openSubMenu(item, targetElement, true);
        });
      } else {
        startSubmenuTimer(function() {
          onSubMenuDismiss(ev);
          targetElement.focus();
        });
      }
    };
    var onItemClick = function(item, ev) {
      onItemClickBase(item, ev, ev.currentTarget);
    };
    var onItemClickBase = function(item, ev, target) {
      var items = getSubmenuItems(item, { target: menuTarget });
      cancelSubMenuTimer();
      if (!hasSubmenu(item) && (!items || !items.length)) {
        executeItemClick(item, ev);
      } else {
        if (item.key !== expandedMenuItemKey) {
          var shouldFocusOnContainer = typeof props.shouldFocusOnContainer === "boolean" ? props.shouldFocusOnContainer : ev.nativeEvent.pointerType === "mouse";
          openSubMenu(item, target, shouldFocusOnContainer);
        }
      }
      ev.stopPropagation();
      ev.preventDefault();
    };
    var onAnchorClick = function(item, ev) {
      executeItemClick(item, ev);
      ev.stopPropagation();
    };
    var executeItemClick = function(item, ev) {
      if (item.disabled || item.isDisabled) {
        return;
      }
      if (item.preferMenuTargetAsEventTarget) {
        overrideTarget(ev, menuTarget);
      }
      var shouldDismiss = false;
      if (item.onClick) {
        shouldDismiss = !!item.onClick(ev, item);
      } else if (props.onItemClick) {
        shouldDismiss = !!props.onItemClick(ev, item);
      }
      if (shouldDismiss || !ev.defaultPrevented) {
        dismiss(ev, true);
      }
    };
    return [
      onItemMouseEnterBase,
      onItemMouseMoveBase,
      onMouseItemLeave,
      onItemClick,
      onAnchorClick,
      executeItemClick,
      onItemClickBase
    ];
  }
  var ContextualMenuBase = React218.memo(React218.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var _a5;
    var _b = getPropsWithDefaults(DEFAULT_PROPS2, propsWithoutDefaults), ref = _b.ref, props = __rest(_b, ["ref"]);
    var hostElement = React218.useRef(null);
    var asyncTracker = useAsync();
    var menuId = useId3(COMPONENT_NAME2, props.id);
    useWarnings({
      name: COMPONENT_NAME2,
      props,
      deprecations: {
        getMenuClassNames: "styles"
      }
    });
    var dismiss = function(ev, dismissAll) {
      var _a6;
      return (_a6 = props.onDismiss) === null || _a6 === void 0 ? void 0 : _a6.call(props, ev, dismissAll);
    };
    var _c = useTarget(props.target, hostElement), targetRef = _c[0], targetWindow = _c[1];
    var tryFocusPreviousActiveElement = usePreviousActiveElement(props, targetWindow, hostElement)[0];
    var _d = useSubMenuState(props, dismiss), expandedMenuItemKey = _d[0], openSubMenu = _d[1], getSubmenuProps = _d[2], onSubMenuDismiss = _d[3];
    var _e = useShouldUpdateFocusOnMouseMove(props), shouldUpdateFocusOnMouseEvent = _e[0], gotMouseMove = _e[1], onMenuFocusCapture = _e[2];
    var _f = useScrollHandler(asyncTracker), onScroll = _f[0], isScrollIdle = _f[1];
    var _g = useSubmenuEnterTimer(props, asyncTracker), cancelSubMenuTimer = _g[0], startSubmenuTimer = _g[1], subMenuEntryTimer = _g[2];
    var responsiveMode = useResponsiveMode(hostElement, props.responsiveMode);
    useVisibility(props, targetWindow);
    var _h = useKeyHandlers(props, dismiss, hostElement, openSubMenu), onKeyDown = _h[0], onKeyUp = _h[1], onMenuKeyDown = _h[2], onItemKeyDown = _h[3];
    var _j = useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss), onItemMouseEnterBase = _j[0], onItemMouseMoveBase = _j[1], onMouseItemLeave = _j[2], onItemClick = _j[3], onAnchorClick = _j[4], executeItemClick = _j[5], onItemClickBase = _j[6];
    var onDefaultRenderMenuList = function(menuListProps, menuClassNames, defaultRender) {
      var indexCorrection = 0;
      var items2 = menuListProps.items, totalItemCount = menuListProps.totalItemCount, hasCheckmarks2 = menuListProps.hasCheckmarks, hasIcons2 = menuListProps.hasIcons;
      return React218.createElement("ul", { className: menuClassNames.list, onKeyDown, onKeyUp, role: "presentation" }, items2.map(function(item, index2) {
        var menuItem = renderMenuItem(item, index2, indexCorrection, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames);
        if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {
          var indexIncrease = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
          indexCorrection += indexIncrease;
        }
        return menuItem;
      }));
    };
    var renderFocusZone = function(children, adjustedFocusZoneProps2) {
      var _a6 = props.focusZoneAs, ChildrenRenderer = _a6 === void 0 ? FocusZone : _a6;
      return React218.createElement(ChildrenRenderer, __assign({}, adjustedFocusZoneProps2), children);
    };
    var renderMenuItem = function(item, index2, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames) {
      var _a6;
      var renderedItems = [];
      var iconProps = item.iconProps || { iconName: "None" };
      var getItemClassNames2 = item.getItemClassNames, itemProps = item.itemProps;
      var styles5 = itemProps ? itemProps.styles : void 0;
      var dividerClassName = item.itemType === ContextualMenuItemType.Divider ? item.className : void 0;
      var subMenuIconClassName = item.submenuIconProps ? item.submenuIconProps.className : "";
      var itemClassNames;
      if (getItemClassNames2) {
        itemClassNames = getItemClassNames2(props.theme, isItemDisabled(item), expandedMenuItemKey === item.key, !!getIsChecked(item), !!item.href, iconProps.iconName !== "None", item.className, dividerClassName, iconProps.className, subMenuIconClassName, item.primaryDisabled);
      } else {
        var itemStyleProps = {
          theme: props.theme,
          disabled: isItemDisabled(item),
          expanded: expandedMenuItemKey === item.key,
          checked: !!getIsChecked(item),
          isAnchorLink: !!item.href,
          knownIcon: iconProps.iconName !== "None",
          itemClassName: item.className,
          dividerClassName,
          iconClassName: iconProps.className,
          subMenuClassName: subMenuIconClassName,
          primaryDisabled: item.primaryDisabled
        };
        itemClassNames = getContextualMenuItemClassNames(_getMenuItemStylesFunction((_a6 = menuClassNames.subComponentStyles) === null || _a6 === void 0 ? void 0 : _a6.menuItem, styles5), itemStyleProps);
      }
      if (item.text === "-" || item.name === "-") {
        item.itemType = ContextualMenuItemType.Divider;
      }
      switch (item.itemType) {
        case ContextualMenuItemType.Divider:
          renderedItems.push(renderSeparator(index2, itemClassNames));
          break;
        case ContextualMenuItemType.Header:
          renderedItems.push(renderSeparator(index2, itemClassNames));
          var headerItem = renderHeaderMenuItem(item, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2);
          renderedItems.push(renderListItem(headerItem, item.key || index2, itemClassNames, item.title));
          break;
        case ContextualMenuItemType.Section:
          renderedItems.push(renderSectionItem(item, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2));
          break;
        default:
          var defaultRenderNormalItem = function() {
            return renderNormalItem(item, itemClassNames, index2, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2);
          };
          var menuItem = props.onRenderContextualMenuItem ? props.onRenderContextualMenuItem(item, defaultRenderNormalItem) : defaultRenderNormalItem();
          renderedItems.push(renderListItem(menuItem, item.key || index2, itemClassNames, item.title));
          break;
      }
      return React218.createElement(React218.Fragment, { key: item.key }, renderedItems);
    };
    var defaultMenuItemRenderer = function(item, menuClassNames) {
      var index2 = item.index, focusableElementIndex = item.focusableElementIndex, totalItemCount = item.totalItemCount, hasCheckmarks2 = item.hasCheckmarks, hasIcons2 = item.hasIcons;
      return renderMenuItem(item, index2, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames);
    };
    var renderSectionItem = function(sectionItem, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2) {
      var sectionProps = sectionItem.sectionProps;
      if (!sectionProps) {
        return;
      }
      var headerItem;
      var groupProps;
      if (sectionProps.title) {
        var headerContextualMenuItem = void 0;
        var ariaLabelledby = "";
        if (typeof sectionProps.title === "string") {
          var id_1 = menuId + sectionProps.title.replace(/\s/g, "");
          headerContextualMenuItem = {
            key: "section-".concat(sectionProps.title, "-title"),
            itemType: ContextualMenuItemType.Header,
            text: sectionProps.title,
            id: id_1
          };
          ariaLabelledby = id_1;
        } else {
          var id_2 = sectionProps.title.id || menuId + sectionProps.title.key.replace(/\s/g, "");
          headerContextualMenuItem = __assign(__assign({}, sectionProps.title), { id: id_2 });
          ariaLabelledby = id_2;
        }
        if (headerContextualMenuItem) {
          groupProps = {
            role: "group",
            "aria-labelledby": ariaLabelledby
          };
          headerItem = renderHeaderMenuItem(headerContextualMenuItem, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2);
        }
      }
      if (sectionProps.items && sectionProps.items.length > 0) {
        var correctedIndex_1 = 0;
        return React218.createElement(
          "li",
          { role: "presentation", key: sectionProps.key || sectionItem.key || "section-".concat(index2) },
          React218.createElement(
            "div",
            __assign({}, groupProps),
            React218.createElement(
              "ul",
              { className: menuClassNames.list, role: "presentation" },
              sectionProps.topDivider && renderSeparator(index2, itemClassNames, true, true),
              headerItem && renderListItem(headerItem, sectionItem.key || index2, itemClassNames, sectionItem.title),
              sectionProps.items.map(function(contextualMenuItem, itemsIndex) {
                var menuItem = renderMenuItem(contextualMenuItem, itemsIndex, correctedIndex_1, getItemCount(sectionProps.items), hasCheckmarks2, hasIcons2, menuClassNames);
                if (contextualMenuItem.itemType !== ContextualMenuItemType.Divider && contextualMenuItem.itemType !== ContextualMenuItemType.Header) {
                  var indexIncrease = contextualMenuItem.customOnRenderListLength ? contextualMenuItem.customOnRenderListLength : 1;
                  correctedIndex_1 += indexIncrease;
                }
                return menuItem;
              }),
              sectionProps.bottomDivider && renderSeparator(index2, itemClassNames, false, true)
            )
          )
        );
      }
    };
    var renderListItem = function(content3, key, classNames3, title2) {
      return React218.createElement("li", { role: "presentation", title: title2, key, className: classNames3.item }, content3);
    };
    var renderSeparator = function(index2, classNames3, top, fromSection) {
      if (fromSection || index2 > 0) {
        return React218.createElement("li", { role: "separator", key: "separator-" + index2 + (top === void 0 ? "" : top ? "-top" : "-bottom"), className: classNames3.divider, "aria-hidden": "true" });
      }
      return null;
    };
    var renderNormalItem = function(item, classNames3, index2, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2) {
      if (item.onRender) {
        return item.onRender(__assign({ "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount }, item), dismiss);
      }
      var contextualMenuItemAs = props.contextualMenuItemAs;
      var commonProps = {
        item,
        classNames: classNames3,
        index: index2,
        focusableElementIndex,
        totalItemCount,
        hasCheckmarks: hasCheckmarks2,
        hasIcons: hasIcons2,
        contextualMenuItemAs,
        onItemMouseEnter: onItemMouseEnterBase,
        onItemMouseLeave: onMouseItemLeave,
        onItemMouseMove: onItemMouseMoveBase,
        onItemMouseDown,
        executeItemClick,
        onItemKeyDown,
        expandedMenuItemKey,
        openSubMenu,
        dismissSubMenu: onSubMenuDismiss,
        dismissMenu: dismiss
      };
      if (item.href) {
        return React218.createElement(ContextualMenuAnchor, __assign({}, commonProps, { onItemClick: onAnchorClick }));
      }
      if (item.split && hasSubmenu(item)) {
        return React218.createElement(ContextualMenuSplitButton, __assign({}, commonProps, { onItemClick, onItemClickBase, onTap: cancelSubMenuTimer }));
      }
      return React218.createElement(ContextualMenuButton, __assign({}, commonProps, { onItemClick, onItemClickBase }));
    };
    var renderHeaderMenuItem = function(item, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2) {
      var _a6 = props.contextualMenuItemAs, ChildrenRenderer = _a6 === void 0 ? ContextualMenuItem : _a6;
      var itemProps = item.itemProps, id2 = item.id;
      var divHtmlProperties = itemProps && getNativeProps2(itemProps, divProperties);
      return (
        // eslint-disable-next-line deprecation/deprecation
        React218.createElement(
          "div",
          __assign({ id: id2, className: menuClassNames.header }, divHtmlProperties, { style: item.style }),
          React218.createElement(ChildrenRenderer, __assign({ item, classNames: itemClassNames, index: index2, onCheckmarkClick: hasCheckmarks2 ? onItemClick : void 0, hasIcons: hasIcons2 }, itemProps))
        )
      );
    };
    var isBeakVisible = props.isBeakVisible;
    var items = props.items, labelElementId = props.labelElementId, id = props.id, className = props.className, beakWidth = props.beakWidth, directionalHint = props.directionalHint, directionalHintForRTL = props.directionalHintForRTL, alignTargetEdge = props.alignTargetEdge, gapSpace = props.gapSpace, coverTarget2 = props.coverTarget, ariaLabel = props.ariaLabel, doNotLayer = props.doNotLayer, target = props.target, bounds = props.bounds, useTargetWidth = props.useTargetWidth, useTargetAsMinWidth = props.useTargetAsMinWidth, directionalHintFixed = props.directionalHintFixed, shouldFocusOnMount = props.shouldFocusOnMount, shouldFocusOnContainer = props.shouldFocusOnContainer, title = props.title, styles4 = props.styles, theme = props.theme, calloutProps = props.calloutProps, _k = props.onRenderSubMenu, onRenderSubMenu2 = _k === void 0 ? onDefaultRenderSubMenu : _k, _l = props.onRenderMenuList, onRenderMenuList = _l === void 0 ? function(menuListProps, defaultRender) {
      return onDefaultRenderMenuList(menuListProps, classNames2, defaultRender);
    } : _l, focusZoneProps = props.focusZoneProps, getMenuClassNames = props.getMenuClassNames;
    var classNames2 = getMenuClassNames ? getMenuClassNames(theme, className) : getClassNames7(styles4, {
      theme,
      className
    });
    var hasIcons = itemsHaveIcons(items);
    function itemsHaveIcons(contextualMenuItems) {
      for (var _i = 0, contextualMenuItems_1 = contextualMenuItems; _i < contextualMenuItems_1.length; _i++) {
        var item = contextualMenuItems_1[_i];
        if (item.iconProps) {
          return true;
        }
        if (item.itemType === ContextualMenuItemType.Section && item.sectionProps && itemsHaveIcons(item.sectionProps.items)) {
          return true;
        }
      }
      return false;
    }
    var adjustedFocusZoneProps = __assign(__assign({ direction: FocusZoneDirection.vertical, handleTabKey: FocusZoneTabbableElements.all, isCircularNavigation: true }, focusZoneProps), { className: css(classNames2.root, (_a5 = props.focusZoneProps) === null || _a5 === void 0 ? void 0 : _a5.className) });
    var hasCheckmarks = canAnyMenuItemsCheck(items);
    var submenuProps = expandedMenuItemKey && props.hidden !== true ? getSubmenuProps() : null;
    isBeakVisible = isBeakVisible === void 0 ? responsiveMode <= ResponsiveMode.medium : isBeakVisible;
    var contextMenuStyle;
    var targetAsHtmlElement = targetRef.current;
    if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {
      var targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();
      var targetWidth = targetBoundingRect.width - 2;
      if (useTargetWidth) {
        contextMenuStyle = {
          width: targetWidth
        };
      } else if (useTargetAsMinWidth) {
        contextMenuStyle = {
          minWidth: targetWidth
        };
      }
    }
    if (items && items.length > 0) {
      var totalItemCount_1 = getItemCount(items);
      var calloutStyles_1 = classNames2.subComponentStyles ? classNames2.subComponentStyles.callout : void 0;
      return React218.createElement(MenuContext2.Consumer, null, function(menuContext) {
        return React218.createElement(
          Callout,
          __assign({ styles: calloutStyles_1, onRestoreFocus: tryFocusPreviousActiveElement }, calloutProps, { target: target || menuContext.target, isBeakVisible, beakWidth, directionalHint, directionalHintForRTL, gapSpace, coverTarget: coverTarget2, doNotLayer, className: css("ms-ContextualMenu-Callout", calloutProps && calloutProps.className), setInitialFocus: shouldFocusOnMount, onDismiss: props.onDismiss || menuContext.onDismiss, onScroll, bounds, directionalHintFixed, alignTargetEdge, hidden: props.hidden || menuContext.hidden, ref: forwardedRef }),
          React218.createElement(
            "div",
            { style: contextMenuStyle, ref: hostElement, id, className: classNames2.container, tabIndex: shouldFocusOnContainer ? 0 : -1, onKeyDown: onMenuKeyDown, onKeyUp, onFocusCapture: onMenuFocusCapture, "aria-label": ariaLabel, "aria-labelledby": labelElementId, role: "menu" },
            title && React218.createElement(
              "div",
              { className: classNames2.title },
              " ",
              title,
              " "
            ),
            items && items.length ? renderFocusZone(onRenderMenuList({
              ariaLabel,
              items,
              totalItemCount: totalItemCount_1,
              hasCheckmarks,
              hasIcons,
              defaultMenuItemRenderer: function(item) {
                return defaultMenuItemRenderer(item, classNames2);
              },
              labelElementId
            }, function(menuListProps, defaultRender) {
              return onDefaultRenderMenuList(menuListProps, classNames2, defaultRender);
            }), adjustedFocusZoneProps) : null,
            submenuProps && onRenderSubMenu2(submenuProps, onDefaultRenderSubMenu)
          ),
          React218.createElement(FocusRects, null)
        );
      });
    } else {
      return null;
    }
  }), function(prevProps, newProps) {
    if (!newProps.shouldUpdateWhenHidden && prevProps.hidden && newProps.hidden) {
      return true;
    }
    return shallowCompare(prevProps, newProps);
  });
  ContextualMenuBase.displayName = "ContextualMenuBase";
  function isAltOrMeta(ev) {
    return ev.which === KeyCodes.alt || ev.key === "Meta";
  }
  function onItemMouseDown(item, ev) {
    var _a5;
    (_a5 = item.onMouseDown) === null || _a5 === void 0 ? void 0 : _a5.call(item, item, ev);
  }
  function onDefaultRenderSubMenu(subMenuProps, defaultRender) {
    throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.");
  }
  function findItemByKeyFromItems(key, items) {
    for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
      var item = items_3[_i];
      if (item.itemType === ContextualMenuItemType.Section && item.sectionProps) {
        var match2 = findItemByKeyFromItems(key, item.sectionProps.items);
        if (match2) {
          return match2;
        }
      } else if (item.key && item.key === key) {
        return item;
      }
    }
  }
  function getOnClickWithOverrideTarget(onClick, target) {
    return onClick ? function(ev, item) {
      overrideTarget(ev, target);
      return onClick(ev, item);
    } : onClick;
  }
  function overrideTarget(ev, target) {
    if (ev && target) {
      ev.persist();
      if (target instanceof Event) {
        ev.target = target.target;
      } else if (target instanceof Element) {
        ev.target = target;
      }
    }
  }

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.styles.js
  var GlobalClassNames6 = {
    root: "ms-ContextualMenu",
    container: "ms-ContextualMenu-container",
    list: "ms-ContextualMenu-list",
    header: "ms-ContextualMenu-header",
    title: "ms-ContextualMenu-title",
    isopen: "is-open"
  };
  var getStyles7 = function(props) {
    var className = props.className, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames6, theme);
    var fonts = theme.fonts, semanticColors = theme.semanticColors, effects = theme.effects;
    return {
      root: [
        theme.fonts.medium,
        classNames2.root,
        classNames2.isopen,
        {
          backgroundColor: semanticColors.menuBackground,
          minWidth: "180px"
        },
        className
      ],
      container: [
        classNames2.container,
        {
          selectors: {
            ":focus": { outline: 0 }
          }
        }
      ],
      list: [
        classNames2.list,
        classNames2.isopen,
        {
          listStyleType: "none",
          margin: "0",
          padding: "0"
        }
      ],
      header: [
        classNames2.header,
        fonts.small,
        {
          fontWeight: FontWeights.semibold,
          color: semanticColors.menuHeader,
          background: "none",
          backgroundColor: "transparent",
          border: "none",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
          cursor: "default",
          padding: "0px 6px",
          userSelect: "none",
          textAlign: "left"
        }
      ],
      title: [
        classNames2.title,
        {
          fontSize: fonts.mediumPlus.fontSize,
          paddingRight: "14px",
          paddingLeft: "14px",
          paddingBottom: "5px",
          paddingTop: "5px",
          backgroundColor: semanticColors.menuItemBackgroundPressed
        }
      ],
      subComponentStyles: {
        callout: {
          root: {
            boxShadow: effects.elevation8
          }
        },
        menuItem: {}
      }
    };
  };

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.js
  function onRenderSubMenu(subMenuProps) {
    return React219.createElement(LocalContextualMenu, __assign({}, subMenuProps));
  }
  var LocalContextualMenu = styled(ContextualMenuBase, getStyles7, function(props) {
    return {
      onRenderSubMenu: props.onRenderSubMenu ? composeRenderFunction(props.onRenderSubMenu, onRenderSubMenu) : onRenderSubMenu
    };
  }, { scope: "ContextualMenu" });
  var ContextualMenu = LocalContextualMenu;
  ContextualMenu.displayName = "ContextualMenu";

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.classNames.js
  var ButtonGlobalClassNames = {
    msButton: "ms-Button",
    msButtonHasMenu: "ms-Button--hasMenu",
    msButtonIcon: "ms-Button-icon",
    msButtonMenuIcon: "ms-Button-menuIcon",
    msButtonLabel: "ms-Button-label",
    msButtonDescription: "ms-Button-description",
    msButtonScreenReaderText: "ms-Button-screenReaderText",
    msButtonFlexContainer: "ms-Button-flexContainer",
    msButtonTextContainer: "ms-Button-textContainer"
  };
  var getBaseButtonClassNames = memoizeFunction(function(theme, styles4, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {
    var _a5, _b;
    var classNames2 = getGlobalClassNames(ButtonGlobalClassNames, theme || {});
    var isExpanded = expanded && !isSplit;
    return mergeStyleSets({
      root: [
        classNames2.msButton,
        styles4.root,
        variantClassName,
        checked && ["is-checked", styles4.rootChecked],
        isExpanded && [
          "is-expanded",
          styles4.rootExpanded,
          {
            selectors: (_a5 = {}, _a5[":hover .".concat(classNames2.msButtonIcon)] = styles4.iconExpandedHovered, // menuIcon falls back to rootExpandedHovered to support original behavior
            _a5[":hover .".concat(classNames2.msButtonMenuIcon)] = styles4.menuIconExpandedHovered || styles4.rootExpandedHovered, _a5[":hover"] = styles4.rootExpandedHovered, _a5)
          }
        ],
        hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles4.rootHasMenu],
        disabled && ["is-disabled", styles4.rootDisabled],
        !disabled && !isExpanded && !checked && {
          selectors: (_b = {
            ":hover": styles4.rootHovered
          }, _b[":hover .".concat(classNames2.msButtonLabel)] = styles4.labelHovered, _b[":hover .".concat(classNames2.msButtonIcon)] = styles4.iconHovered, _b[":hover .".concat(classNames2.msButtonDescription)] = styles4.descriptionHovered, _b[":hover .".concat(classNames2.msButtonMenuIcon)] = styles4.menuIconHovered, _b[":focus"] = styles4.rootFocused, _b[":active"] = styles4.rootPressed, _b[":active .".concat(classNames2.msButtonIcon)] = styles4.iconPressed, _b[":active .".concat(classNames2.msButtonDescription)] = styles4.descriptionPressed, _b[":active .".concat(classNames2.msButtonMenuIcon)] = styles4.menuIconPressed, _b)
        },
        disabled && checked && [styles4.rootCheckedDisabled],
        !disabled && checked && {
          selectors: {
            ":hover": styles4.rootCheckedHovered,
            ":active": styles4.rootCheckedPressed
          }
        },
        className
      ],
      flexContainer: [classNames2.msButtonFlexContainer, styles4.flexContainer],
      textContainer: [classNames2.msButtonTextContainer, styles4.textContainer],
      icon: [
        classNames2.msButtonIcon,
        iconClassName,
        styles4.icon,
        isExpanded && styles4.iconExpanded,
        checked && styles4.iconChecked,
        disabled && styles4.iconDisabled
      ],
      label: [classNames2.msButtonLabel, styles4.label, checked && styles4.labelChecked, disabled && styles4.labelDisabled],
      menuIcon: [
        classNames2.msButtonMenuIcon,
        menuIconClassName,
        styles4.menuIcon,
        checked && styles4.menuIconChecked,
        disabled && !isSplit && styles4.menuIconDisabled,
        !disabled && !isExpanded && !checked && {
          selectors: {
            ":hover": styles4.menuIconHovered,
            ":active": styles4.menuIconPressed
          }
        },
        isExpanded && ["is-expanded", styles4.menuIconExpanded]
      ],
      description: [
        classNames2.msButtonDescription,
        styles4.description,
        checked && styles4.descriptionChecked,
        disabled && styles4.descriptionDisabled
      ],
      screenReaderText: [classNames2.msButtonScreenReaderText, styles4.screenReaderText]
    });
  });

  // ../node_modules/@fluentui/react/lib/components/Button/SplitButton/SplitButton.classNames.js
  var getSplitButtonClassNames = memoizeFunction(function(styles4, disabled, expanded, checked, primaryDisabled) {
    return {
      root: mergeStyles(styles4.splitButtonMenuButton, expanded && [styles4.splitButtonMenuButtonExpanded], disabled && [styles4.splitButtonMenuButtonDisabled], checked && !disabled && [styles4.splitButtonMenuButtonChecked], primaryDisabled && !disabled && [
        {
          selectors: {
            ":focus": styles4.splitButtonMenuFocused
          }
        }
      ]),
      splitButtonContainer: mergeStyles(styles4.splitButtonContainer, !disabled && checked && [
        styles4.splitButtonContainerChecked,
        {
          selectors: {
            ":hover": styles4.splitButtonContainerCheckedHovered
          }
        }
      ], !disabled && !checked && [
        {
          selectors: {
            ":hover": styles4.splitButtonContainerHovered,
            ":focus": styles4.splitButtonContainerFocused
          }
        }
      ], disabled && styles4.splitButtonContainerDisabled),
      icon: mergeStyles(styles4.splitButtonMenuIcon, disabled && styles4.splitButtonMenuIconDisabled, !disabled && primaryDisabled && styles4.splitButtonMenuIcon),
      flexContainer: mergeStyles(styles4.splitButtonFlexContainer),
      divider: mergeStyles(styles4.splitButtonDivider, (primaryDisabled || disabled) && styles4.splitButtonDividerDisabled)
    };
  });

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.js
  var TouchIdleDelay2 = 500;
  var COMPONENT_NAME3 = "BaseButton";
  var BaseButton = (
    /** @class */
    function(_super) {
      __extends(BaseButton2, _super);
      function BaseButton2(props) {
        var _this = _super.call(this, props) || this;
        _this._buttonElement = React220.createRef();
        _this._splitButtonContainer = React220.createRef();
        _this._mergedRef = createMergedRef();
        _this._renderedVisibleMenu = false;
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._onRenderIcon = function(buttonProps, defaultRender) {
          var iconProps = _this.props.iconProps;
          if (iconProps && (iconProps.iconName !== void 0 || iconProps.imageProps)) {
            var className = iconProps.className, imageProps = iconProps.imageProps, rest = __rest(iconProps, ["className", "imageProps"]);
            if (iconProps.styles) {
              return React220.createElement(Icon, __assign({ className: css(_this._classNames.icon, className), imageProps }, rest));
            }
            if (iconProps.iconName) {
              return React220.createElement(FontIcon, __assign({ className: css(_this._classNames.icon, className) }, rest));
            }
            if (imageProps) {
              return React220.createElement(ImageIcon, __assign({ className: css(_this._classNames.icon, className), imageProps }, rest));
            }
          }
          return null;
        };
        _this._onRenderTextContents = function() {
          var _a5 = _this.props, text4 = _a5.text, children = _a5.children, _b = _a5.secondaryText, secondaryText = _b === void 0 ? _this.props.description : _b, _c = _a5.onRenderText, onRenderText = _c === void 0 ? _this._onRenderText : _c, _d = _a5.onRenderDescription, onRenderDescription = _d === void 0 ? _this._onRenderDescription : _d;
          if (text4 || typeof children === "string" || secondaryText) {
            return React220.createElement(
              "span",
              { className: _this._classNames.textContainer },
              onRenderText(_this.props, _this._onRenderText),
              onRenderDescription(_this.props, _this._onRenderDescription)
            );
          }
          return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];
        };
        _this._onRenderText = function() {
          var text4 = _this.props.text;
          var children = _this.props.children;
          if (text4 === void 0 && typeof children === "string") {
            text4 = children;
          }
          if (_this._hasText()) {
            return React220.createElement("span", { key: _this._labelId, className: _this._classNames.label, id: _this._labelId }, text4);
          }
          return null;
        };
        _this._onRenderChildren = function() {
          var children = _this.props.children;
          if (typeof children === "string") {
            return null;
          }
          return children;
        };
        _this._onRenderDescription = function(props2) {
          var _a5 = props2.secondaryText, secondaryText = _a5 === void 0 ? _this.props.description : _a5;
          return secondaryText ? React220.createElement("span", { key: _this._descriptionId, className: _this._classNames.description, id: _this._descriptionId }, secondaryText) : null;
        };
        _this._onRenderAriaDescription = function() {
          var ariaDescription = _this.props.ariaDescription;
          return ariaDescription ? React220.createElement("span", { className: _this._classNames.screenReaderText, id: _this._ariaDescriptionId }, ariaDescription) : null;
        };
        _this._onRenderMenuIcon = function(props2) {
          var menuIconProps = _this.props.menuIconProps;
          return React220.createElement(FontIcon, __assign({ iconName: "ChevronDown" }, menuIconProps, { className: _this._classNames.menuIcon }));
        };
        _this._onRenderMenu = function(menuProps) {
          var MenuType = _this.props.menuAs ? composeComponentAs(_this.props.menuAs, ContextualMenu) : ContextualMenu;
          return React220.createElement(MenuType, __assign({}, menuProps));
        };
        _this._onDismissMenu = function(ev) {
          var menuProps = _this.props.menuProps;
          if (menuProps && menuProps.onDismiss) {
            menuProps.onDismiss(ev);
          }
          if (!ev || !ev.defaultPrevented) {
            _this._dismissMenu();
          }
        };
        _this._dismissMenu = function() {
          _this._menuShouldFocusOnMount = void 0;
          _this._menuShouldFocusOnContainer = void 0;
          _this.setState({ menuHidden: true });
        };
        _this._openMenu = function(shouldFocusOnContainer, shouldFocusOnMount) {
          if (shouldFocusOnMount === void 0) {
            shouldFocusOnMount = true;
          }
          if (_this.props.menuProps) {
            _this._menuShouldFocusOnContainer = shouldFocusOnContainer;
            _this._menuShouldFocusOnMount = shouldFocusOnMount;
            _this._renderedVisibleMenu = true;
            _this.setState({ menuHidden: false });
          }
        };
        _this._onToggleMenu = function(shouldFocusOnContainer) {
          var shouldFocusOnMount = true;
          if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {
            shouldFocusOnMount = false;
          }
          _this.state.menuHidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();
        };
        _this._onSplitContainerFocusCapture = function(ev) {
          var container = _this._splitButtonContainer.current;
          if (!container || ev.target && portalContainsElement(ev.target, container)) {
            return;
          }
          container.focus();
        };
        _this._onSplitButtonPrimaryClick = function(ev) {
          if (!_this.state.menuHidden) {
            _this._dismissMenu();
          }
          var singleTouchTarget = _this._processingTouch && !_this.props.toggle;
          if (!singleTouchTarget && _this.props.onClick) {
            _this.props.onClick(ev);
          } else if (singleTouchTarget) {
            _this._onMenuClick(ev);
          }
        };
        _this._onKeyDown = function(ev) {
          if (_this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {
            ev.preventDefault();
            ev.stopPropagation();
          } else if (!_this.props.disabled) {
            if (_this.props.menuProps) {
              _this._onMenuKeyDown(ev);
            } else if (_this.props.onKeyDown !== void 0) {
              _this.props.onKeyDown(ev);
            }
          }
        };
        _this._onKeyUp = function(ev) {
          if (!_this.props.disabled && _this.props.onKeyUp !== void 0) {
            _this.props.onKeyUp(ev);
          }
        };
        _this._onKeyPress = function(ev) {
          if (!_this.props.disabled && _this.props.onKeyPress !== void 0) {
            _this.props.onKeyPress(ev);
          }
        };
        _this._onMouseUp = function(ev) {
          if (!_this.props.disabled && _this.props.onMouseUp !== void 0) {
            _this.props.onMouseUp(ev);
          }
        };
        _this._onMouseDown = function(ev) {
          if (!_this.props.disabled && _this.props.onMouseDown !== void 0) {
            _this.props.onMouseDown(ev);
          }
        };
        _this._onClick = function(ev) {
          if (!_this.props.disabled) {
            if (_this.props.menuProps) {
              _this._onMenuClick(ev);
            } else if (_this.props.onClick !== void 0) {
              _this.props.onClick(ev);
            }
          }
        };
        _this._onSplitButtonContainerKeyDown = function(ev) {
          if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
            if (_this._buttonElement.current) {
              _this._buttonElement.current.click();
              ev.preventDefault();
              ev.stopPropagation();
            }
          } else {
            _this._onMenuKeyDown(ev);
          }
        };
        _this._onMenuKeyDown = function(ev) {
          var _a5;
          if (_this.props.disabled) {
            return;
          }
          if (_this.props.onKeyDown) {
            _this.props.onKeyDown(ev);
          }
          var isUp = ev.which === KeyCodes.up;
          var isDown = ev.which === KeyCodes.down;
          if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {
            var onMenuClick = _this.props.onMenuClick;
            if (onMenuClick) {
              onMenuClick(ev, _this.props);
            }
            _this._onToggleMenu(false);
            ev.preventDefault();
            ev.stopPropagation();
          }
          if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
            setFocusVisibility(true, ev.target, (_a5 = _this.context) === null || _a5 === void 0 ? void 0 : _a5.registeredProviders);
          }
          if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {
            if (!_this.state.menuHidden && _this.props.menuProps) {
              var currentShouldFocusOnMount = _this._menuShouldFocusOnMount !== void 0 ? _this._menuShouldFocusOnMount : _this.props.menuProps.shouldFocusOnMount;
              if (!currentShouldFocusOnMount) {
                ev.preventDefault();
                ev.stopPropagation();
                _this._menuShouldFocusOnMount = true;
                _this.forceUpdate();
              }
            }
          }
        };
        _this._onTouchStart = function() {
          if (_this._isSplitButton && _this._splitButtonContainer.current && !("onpointerdown" in _this._splitButtonContainer.current)) {
            _this._handleTouchAndPointerEvent();
          }
        };
        _this._onMenuClick = function(ev) {
          var _a5 = _this.props, onMenuClick = _a5.onMenuClick, menuProps = _a5.menuProps;
          if (onMenuClick) {
            onMenuClick(ev, _this.props);
          }
          var shouldFocusOnContainer = typeof (menuProps === null || menuProps === void 0 ? void 0 : menuProps.shouldFocusOnContainer) === "boolean" ? menuProps.shouldFocusOnContainer : ev.nativeEvent.pointerType === "mouse";
          if (!ev.defaultPrevented) {
            _this._onToggleMenu(shouldFocusOnContainer);
            ev.preventDefault();
            ev.stopPropagation();
          }
        };
        initializeComponentRef(_this);
        _this._async = new Async(_this);
        _this._events = new EventGroup(_this);
        warnConditionallyRequiredProps(COMPONENT_NAME3, props, ["menuProps", "onClick"], "split", _this.props.split);
        warnDeprecations(COMPONENT_NAME3, props, {
          rootProps: void 0,
          description: "secondaryText",
          toggled: "checked"
        });
        _this._labelId = getId();
        _this._descriptionId = getId();
        _this._ariaDescriptionId = getId();
        _this.state = {
          menuHidden: true
        };
        return _this;
      }
      Object.defineProperty(BaseButton2.prototype, "_isSplitButton", {
        get: function() {
          return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;
        },
        enumerable: false,
        configurable: true
      });
      BaseButton2.prototype.render = function() {
        var _a5;
        var _b = this.props, ariaDescription = _b.ariaDescription, ariaLabel = _b.ariaLabel, ariaHidden = _b.ariaHidden, className = _b.className, disabled = _b.disabled, allowDisabledFocus = _b.allowDisabledFocus, primaryDisabled = _b.primaryDisabled, _c = _b.secondaryText, secondaryText = _c === void 0 ? this.props.description : _c, href = _b.href, iconProps = _b.iconProps, menuIconProps = _b.menuIconProps, styles4 = _b.styles, checked = _b.checked, variantClassName = _b.variantClassName, theme = _b.theme, toggle = _b.toggle, getClassNames12 = _b.getClassNames, role = _b.role;
        var menuHidden = this.state.menuHidden;
        var isPrimaryButtonDisabled = disabled || primaryDisabled;
        this._classNames = getClassNames12 ? getClassNames12(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !menuHidden, !!this.props.menuProps, this.props.split, !!allowDisabledFocus) : getBaseButtonClassNames(theme, styles4, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, !!this.props.menuProps, checked, !menuHidden, this.props.split);
        var _d = this, _ariaDescriptionId = _d._ariaDescriptionId, _labelId = _d._labelId, _descriptionId = _d._descriptionId;
        var renderAsAnchor = !isPrimaryButtonDisabled && !!href;
        var tag = renderAsAnchor ? "a" : "button";
        var nativeProps = getNativeProps2(
          // eslint-disable-next-line deprecation/deprecation
          assign2(renderAsAnchor ? {} : { type: "button" }, this.props.rootProps, this.props),
          renderAsAnchor ? anchorProperties2 : buttonProperties2,
          [
            "disabled"
            // let disabled buttons be focused and styled as disabled.
          ]
        );
        var resolvedAriaLabel = ariaLabel || nativeProps["aria-label"];
        var ariaDescribedBy = void 0;
        if (ariaDescription) {
          ariaDescribedBy = _ariaDescriptionId;
        } else if (secondaryText && this.props.onRenderDescription !== nullRender) {
          ariaDescribedBy = _descriptionId;
        } else if (nativeProps["aria-describedby"]) {
          ariaDescribedBy = nativeProps["aria-describedby"];
        }
        var ariaLabelledBy = void 0;
        if (nativeProps["aria-labelledby"]) {
          ariaLabelledBy = nativeProps["aria-labelledby"];
        } else if (ariaDescribedBy && !resolvedAriaLabel) {
          ariaLabelledBy = this._hasText() ? _labelId : void 0;
        }
        var dataIsFocusable = this.props["data-is-focusable"] === false || disabled && !allowDisabledFocus || this._isSplitButton ? false : true;
        var isCheckboxTypeRole = role === "menuitemcheckbox" || role === "checkbox";
        var checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : void 0;
        var buttonProps = assign2(nativeProps, (_a5 = {
          className: this._classNames.root,
          // eslint-disable-next-line deprecation/deprecation
          ref: this._mergedRef(this.props.elementRef, this._buttonElement),
          disabled: isPrimaryButtonDisabled && !allowDisabledFocus,
          onKeyDown: this._onKeyDown,
          onKeyPress: this._onKeyPress,
          onKeyUp: this._onKeyUp,
          onMouseDown: this._onMouseDown,
          onMouseUp: this._onMouseUp,
          onClick: this._onClick,
          "aria-label": resolvedAriaLabel,
          "aria-labelledby": ariaLabelledBy,
          "aria-describedby": ariaDescribedBy,
          "aria-disabled": isPrimaryButtonDisabled,
          "data-is-focusable": dataIsFocusable
        }, // aria-pressed attribute should only be present for toggle buttons
        // aria-checked attribute should only be present for toggle buttons with checkbox type role
        _a5[isCheckboxTypeRole ? "aria-checked" : "aria-pressed"] = checkedOrPressedValue, _a5));
        if (ariaHidden) {
          buttonProps["aria-hidden"] = true;
        }
        if (this._isSplitButton) {
          return this._onRenderSplitButtonContent(tag, buttonProps);
        } else if (this.props.menuProps) {
          var _e = this.props.menuProps.id, id = _e === void 0 ? "".concat(this._labelId, "-menu") : _e;
          assign2(buttonProps, {
            "aria-expanded": !menuHidden,
            "aria-controls": !menuHidden ? id : null,
            "aria-haspopup": true
          });
        }
        return this._onRenderContent(tag, buttonProps);
      };
      BaseButton2.prototype.componentDidMount = function() {
        if (this._isSplitButton && this._splitButtonContainer.current) {
          if ("onpointerdown" in this._splitButtonContainer.current) {
            this._events.on(this._splitButtonContainer.current, "pointerdown", this._onPointerDown, true);
          }
          if ("onpointerup" in this._splitButtonContainer.current && this.props.onPointerUp) {
            this._events.on(this._splitButtonContainer.current, "pointerup", this.props.onPointerUp, true);
          }
        }
      };
      BaseButton2.prototype.componentDidUpdate = function(prevProps, prevState) {
        if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {
          this.props.onAfterMenuDismiss();
        }
      };
      BaseButton2.prototype.componentWillUnmount = function() {
        this._async.dispose();
        this._events.dispose();
      };
      BaseButton2.prototype.focus = function() {
        var _a5, _b;
        if (this._isSplitButton && this._splitButtonContainer.current) {
          setFocusVisibility(true, void 0, (_a5 = this.context) === null || _a5 === void 0 ? void 0 : _a5.registeredProviders);
          this._splitButtonContainer.current.focus();
        } else if (this._buttonElement.current) {
          setFocusVisibility(true, void 0, (_b = this.context) === null || _b === void 0 ? void 0 : _b.registeredProviders);
          this._buttonElement.current.focus();
        }
      };
      BaseButton2.prototype.dismissMenu = function() {
        this._dismissMenu();
      };
      BaseButton2.prototype.openMenu = function(shouldFocusOnContainer, shouldFocusOnMount) {
        this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);
      };
      BaseButton2.prototype._onRenderContent = function(tag, buttonProps) {
        var _this = this;
        var props = this.props;
        var Tag2 = tag;
        var menuIconProps = props.menuIconProps, menuProps = props.menuProps, _a5 = props.onRenderIcon, onRenderIcon = _a5 === void 0 ? this._onRenderIcon : _a5, _b = props.onRenderAriaDescription, onRenderAriaDescription = _b === void 0 ? this._onRenderAriaDescription : _b, _c = props.onRenderChildren, onRenderChildren = _c === void 0 ? this._onRenderChildren : _c, _d = props.onRenderMenu, onRenderMenu = _d === void 0 ? this._onRenderMenu : _d, _e = props.onRenderMenuIcon, onRenderMenuIcon = _e === void 0 ? this._onRenderMenuIcon : _e, disabled = props.disabled;
        var keytipProps = props.keytipProps;
        if (keytipProps && menuProps) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        var Button6 = function(keytipAttributes) {
          return React220.createElement(
            Tag2,
            __assign({}, buttonProps, keytipAttributes),
            React220.createElement(
              "span",
              { className: _this._classNames.flexContainer, "data-automationid": "splitbuttonprimary" },
              onRenderIcon(props, _this._onRenderIcon),
              _this._onRenderTextContents(),
              onRenderAriaDescription(props, _this._onRenderAriaDescription),
              onRenderChildren(props, _this._onRenderChildren),
              !_this._isSplitButton && (menuProps || menuIconProps || _this.props.onRenderMenuIcon) && onRenderMenuIcon(_this.props, _this._onRenderMenuIcon),
              menuProps && !menuProps.doNotLayer && _this._shouldRenderMenu() && onRenderMenu(_this._getMenuProps(menuProps), _this._onRenderMenu)
            )
          );
        };
        var Content2 = keytipProps ? (
          // If we're making a split button, we won't put the keytip here
          React220.createElement(KeytipData, { keytipProps: !this._isSplitButton ? keytipProps : void 0, ariaDescribedBy: buttonProps["aria-describedby"], disabled }, function(keytipAttributes) {
            return Button6(keytipAttributes);
          })
        ) : Button6();
        if (menuProps && menuProps.doNotLayer) {
          return React220.createElement(
            React220.Fragment,
            null,
            Content2,
            this._shouldRenderMenu() && onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu)
          );
        }
        return React220.createElement(
          React220.Fragment,
          null,
          Content2,
          React220.createElement(FocusRects, null)
        );
      };
      BaseButton2.prototype._shouldRenderMenu = function() {
        var menuHidden = this.state.menuHidden;
        var _a5 = this.props, persistMenu = _a5.persistMenu, renderPersistedMenuHiddenOnMount = _a5.renderPersistedMenuHiddenOnMount;
        if (!menuHidden) {
          return true;
        } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {
          return true;
        }
        return false;
      };
      BaseButton2.prototype._hasText = function() {
        return this.props.text !== null && (this.props.text !== void 0 || typeof this.props.children === "string");
      };
      BaseButton2.prototype._getMenuProps = function(menuProps) {
        var persistMenu = this.props.persistMenu;
        var menuHidden = this.state.menuHidden;
        if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {
          menuProps = __assign(__assign({}, menuProps), { labelElementId: this._labelId });
        }
        return __assign(__assign({ id: this._labelId + "-menu", directionalHint: DirectionalHint.bottomLeftEdge }, menuProps), { shouldFocusOnContainer: this._menuShouldFocusOnContainer, shouldFocusOnMount: this._menuShouldFocusOnMount, hidden: persistMenu ? menuHidden : void 0, className: css("ms-BaseButton-menuhost", menuProps.className), target: this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current, onDismiss: this._onDismissMenu });
      };
      BaseButton2.prototype._onRenderSplitButtonContent = function(tag, buttonProps) {
        var _this = this;
        var _a5 = this.props, _b = _a5.styles, styles4 = _b === void 0 ? {} : _b, disabled = _a5.disabled, allowDisabledFocus = _a5.allowDisabledFocus, checked = _a5.checked, getSplitButtonClassNames2 = _a5.getSplitButtonClassNames, primaryDisabled = _a5.primaryDisabled, menuProps = _a5.menuProps, toggle = _a5.toggle, role = _a5.role, primaryActionButtonProps = _a5.primaryActionButtonProps;
        var keytipProps = this.props.keytipProps;
        var menuHidden = this.state.menuHidden;
        var classNames2 = getSplitButtonClassNames2 ? getSplitButtonClassNames2(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus) : styles4 && getSplitButtonClassNames(styles4, !!disabled, !menuHidden, !!checked, !!primaryDisabled);
        assign2(buttonProps, {
          onClick: void 0,
          onPointerDown: void 0,
          onPointerUp: void 0,
          tabIndex: -1,
          "data-is-focusable": false
        });
        if (keytipProps && menuProps) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        var containerProps = getNativeProps2(buttonProps, [], ["disabled"]);
        if (primaryActionButtonProps) {
          assign2(buttonProps, primaryActionButtonProps);
        }
        var SplitButton2 = function(keytipAttributes) {
          return React220.createElement(
            "div",
            __assign({}, containerProps, { "data-ktp-target": keytipAttributes ? keytipAttributes["data-ktp-target"] : void 0, role: role ? role : "button", "aria-disabled": disabled, "aria-haspopup": true, "aria-expanded": !menuHidden, "aria-pressed": toggle ? !!checked : void 0, "aria-describedby": mergeAriaAttributeValues(buttonProps["aria-describedby"], keytipAttributes ? keytipAttributes["aria-describedby"] : void 0), className: classNames2 && classNames2.splitButtonContainer, onKeyDown: _this._onSplitButtonContainerKeyDown, onTouchStart: _this._onTouchStart, ref: _this._splitButtonContainer, "data-is-focusable": true, onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : void 0, tabIndex: !disabled && !primaryDisabled || allowDisabledFocus ? 0 : void 0, "aria-roledescription": buttonProps["aria-roledescription"], onFocusCapture: _this._onSplitContainerFocusCapture }),
            React220.createElement(
              "span",
              { style: { display: "flex", width: "100%" } },
              _this._onRenderContent(tag, buttonProps),
              _this._onRenderSplitButtonMenuButton(classNames2, keytipAttributes),
              _this._onRenderSplitButtonDivider(classNames2)
            )
          );
        };
        return keytipProps ? React220.createElement(KeytipData, { keytipProps, disabled }, function(keytipAttributes) {
          return SplitButton2(keytipAttributes);
        }) : SplitButton2();
      };
      BaseButton2.prototype._onRenderSplitButtonDivider = function(classNames2) {
        if (classNames2 && classNames2.divider) {
          var onClick = function(ev) {
            ev.stopPropagation();
          };
          return React220.createElement("span", { className: classNames2.divider, "aria-hidden": true, onClick });
        }
        return null;
      };
      BaseButton2.prototype._onRenderSplitButtonMenuButton = function(classNames2, keytipAttributes) {
        var _a5 = this.props, allowDisabledFocus = _a5.allowDisabledFocus, checked = _a5.checked, disabled = _a5.disabled, splitButtonMenuProps = _a5.splitButtonMenuProps, splitButtonAriaLabel = _a5.splitButtonAriaLabel, primaryDisabled = _a5.primaryDisabled;
        var menuHidden = this.state.menuHidden;
        var menuIconProps = this.props.menuIconProps;
        if (menuIconProps === void 0) {
          menuIconProps = {
            iconName: "ChevronDown"
          };
        }
        var splitButtonProps = __assign(__assign({}, splitButtonMenuProps), { styles: classNames2, checked, disabled, allowDisabledFocus, onClick: this._onMenuClick, menuProps: void 0, iconProps: __assign(__assign({}, menuIconProps), { className: this._classNames.menuIcon }), ariaLabel: splitButtonAriaLabel, "aria-haspopup": true, "aria-expanded": !menuHidden, "data-is-focusable": false });
        return React220.createElement(BaseButton2, __assign({}, splitButtonProps, { "data-ktp-execute-target": keytipAttributes ? keytipAttributes["data-ktp-execute-target"] : keytipAttributes, onMouseDown: this._onMouseDown, tabIndex: primaryDisabled && !allowDisabledFocus ? 0 : -1 }));
      };
      BaseButton2.prototype._onPointerDown = function(ev) {
        var onPointerDown = this.props.onPointerDown;
        if (onPointerDown) {
          onPointerDown(ev);
        }
        if (ev.pointerType === "touch") {
          this._handleTouchAndPointerEvent();
          ev.preventDefault();
          ev.stopImmediatePropagation();
        }
      };
      BaseButton2.prototype._handleTouchAndPointerEvent = function() {
        var _this = this;
        if (this._lastTouchTimeoutId !== void 0) {
          this._async.clearTimeout(this._lastTouchTimeoutId);
          this._lastTouchTimeoutId = void 0;
        }
        this._processingTouch = true;
        this._lastTouchTimeoutId = this._async.setTimeout(function() {
          _this._processingTouch = false;
          _this._lastTouchTimeoutId = void 0;
          if (_this.state.menuHidden) {
            _this.focus();
          }
        }, TouchIdleDelay2);
      };
      BaseButton2.prototype._isValidMenuOpenKey = function(ev) {
        if (this.props.menuTriggerKeyCode) {
          return ev.which === this.props.menuTriggerKeyCode;
        } else if (this.props.menuProps) {
          return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);
        }
        return false;
      };
      BaseButton2.defaultProps = {
        baseClassName: "ms-Button",
        styles: {},
        split: false
      };
      BaseButton2.contextType = FocusRectsContext;
      return BaseButton2;
    }(React220.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.js
  var React221 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.styles.js
  var noOutline = {
    outline: 0
  };
  var iconStyle = function(fontSize) {
    return {
      fontSize,
      margin: "0 4px",
      height: "16px",
      lineHeight: "16px",
      textAlign: "center",
      flexShrink: 0
    };
  };
  var getStyles8 = memoizeFunction(function(theme) {
    var _a5, _b;
    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
    var border2 = semanticColors.buttonBorder;
    var disabledBackground = semanticColors.disabledBackground;
    var disabledText = semanticColors.disabledText;
    var buttonHighContrastFocus = {
      left: -2,
      top: -2,
      bottom: -2,
      right: -2,
      outlineColor: "ButtonText"
    };
    return {
      root: [
        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: "transparent" }),
        theme.fonts.medium,
        {
          border: "1px solid " + border2,
          borderRadius: effects.roundedCorner2,
          boxSizing: "border-box",
          cursor: "pointer",
          display: "inline-block",
          padding: "0 16px",
          textDecoration: "none",
          textAlign: "center",
          userSelect: "none",
          selectors: {
            // IE11 workaround for preventing shift of child elements of a button when active.
            ":active > span": {
              position: "relative",
              left: 0,
              top: 0
            }
          }
        }
      ],
      rootDisabled: [
        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: "transparent" }),
        {
          backgroundColor: disabledBackground,
          borderColor: disabledBackground,
          color: disabledText,
          cursor: "default",
          selectors: {
            ":hover": noOutline,
            ":focus": noOutline
          }
        }
      ],
      iconDisabled: {
        color: disabledText,
        selectors: (_a5 = {}, _a5[HighContrastSelector] = {
          color: "GrayText"
        }, _a5)
      },
      menuIconDisabled: {
        color: disabledText,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "GrayText"
        }, _b)
      },
      flexContainer: {
        display: "flex",
        height: "100%",
        flexWrap: "nowrap",
        justifyContent: "center",
        alignItems: "center"
      },
      description: {
        display: "block"
      },
      textContainer: {
        flexGrow: 1,
        display: "block"
      },
      icon: iconStyle(fonts.mediumPlus.fontSize),
      menuIcon: iconStyle(fonts.small.fontSize),
      label: {
        margin: "0 4px",
        lineHeight: "100%",
        display: "block"
      },
      screenReaderText: hiddenContentStyle
    };
  });

  // ../node_modules/@fluentui/react/lib/components/Button/SplitButton/SplitButton.styles.js
  var getStyles9 = memoizeFunction(function(theme, customStyles) {
    var _a5, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;
    var buttonHighContrastFocus = {
      left: -2,
      top: -2,
      bottom: -2,
      right: -2,
      border: "none"
    };
    var splitButtonDividerBaseStyles2 = {
      position: "absolute",
      width: 1,
      right: 31,
      top: 8,
      bottom: 8
    };
    var splitButtonStyles = {
      splitButtonContainer: [
        getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2, pointerEvents: "none" }),
        {
          display: "inline-flex",
          selectors: {
            ".ms-Button--default": {
              borderTopRightRadius: "0",
              borderBottomRightRadius: "0",
              borderRight: "none",
              flexGrow: "1"
            },
            ".ms-Button--primary": {
              borderTopRightRadius: "0",
              borderBottomRightRadius: "0",
              border: "none",
              flexGrow: "1",
              selectors: (_a5 = {}, _a5[HighContrastSelector] = __assign({ color: "WindowText", backgroundColor: "Window", border: "1px solid WindowText", borderRightWidth: "0" }, getHighContrastNoAdjustStyle()), _a5[":hover"] = {
                border: "none"
              }, _a5[":active"] = {
                border: "none"
              }, _a5)
            },
            ".ms-Button--primary + .ms-Button": {
              border: "none",
              selectors: (_b = {}, _b[HighContrastSelector] = {
                border: "1px solid WindowText",
                borderLeftWidth: "0"
              }, _b)
            }
          }
        }
      ],
      splitButtonContainerHovered: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_c = {}, _c[HighContrastSelector] = {
              color: "Window",
              backgroundColor: "Highlight"
            }, _c)
          },
          ".ms-Button.is-disabled": {
            color: semanticColors.buttonTextDisabled,
            selectors: (_d = {}, _d[HighContrastSelector] = {
              color: "GrayText",
              borderColor: "GrayText",
              backgroundColor: "Window"
            }, _d)
          }
        }
      },
      splitButtonContainerChecked: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_e = {}, _e[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText" }, getHighContrastNoAdjustStyle()), _e)
          }
        }
      },
      splitButtonContainerCheckedHovered: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_f = {}, _f[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText" }, getHighContrastNoAdjustStyle()), _f)
          }
        }
      },
      splitButtonContainerFocused: {
        outline: "none!important"
      },
      splitButtonMenuButton: (_g = {
        padding: 6,
        height: "auto",
        boxSizing: "border-box",
        borderRadius: 0,
        borderTopRightRadius: effects.roundedCorner2,
        borderBottomRightRadius: effects.roundedCorner2,
        border: "1px solid ".concat(palette.neutralSecondaryAlt),
        borderLeft: "none",
        outline: "transparent",
        userSelect: "none",
        display: "inline-block",
        textDecoration: "none",
        textAlign: "center",
        cursor: "pointer",
        verticalAlign: "top",
        width: 32,
        marginLeft: -1,
        marginTop: 0,
        marginRight: 0,
        marginBottom: 0
      }, _g[HighContrastSelector] = {
        ".ms-Button-menuIcon": {
          color: "WindowText"
        }
      }, _g),
      splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles2), { selectors: (_h = {}, _h[HighContrastSelector] = {
        backgroundColor: "WindowText"
      }, _h) }),
      splitButtonDividerDisabled: __assign(__assign({}, splitButtonDividerBaseStyles2), { selectors: (_j = {}, _j[HighContrastSelector] = {
        backgroundColor: "GrayText"
      }, _j) }),
      splitButtonMenuButtonDisabled: {
        pointerEvents: "none",
        border: "none",
        selectors: (_k = {
          ":hover": {
            cursor: "default"
          },
          ".ms-Button--primary": {
            selectors: (_l = {}, _l[HighContrastSelector] = {
              color: "GrayText",
              borderColor: "GrayText",
              backgroundColor: "Window"
            }, _l)
          },
          ".ms-Button-menuIcon": {
            selectors: (_m = {}, _m[HighContrastSelector] = {
              color: "GrayText"
            }, _m)
          }
        }, _k[HighContrastSelector] = {
          color: "GrayText",
          border: "1px solid GrayText",
          backgroundColor: "Window"
        }, _k)
      },
      splitButtonFlexContainer: {
        display: "flex",
        height: "100%",
        flexWrap: "nowrap",
        justifyContent: "center",
        alignItems: "center"
      },
      splitButtonContainerDisabled: {
        outline: "none",
        border: "none",
        selectors: (_o = {}, _o[HighContrastSelector] = __assign({ color: "GrayText", borderColor: "GrayText", backgroundColor: "Window" }, getHighContrastNoAdjustStyle()), _o)
      },
      splitButtonMenuFocused: __assign({}, getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2 }))
    };
    return concatStyleSets(splitButtonStyles, customStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/Button/ButtonThemes.js
  var splitButtonDividerBaseStyles = function() {
    return {
      position: "absolute",
      width: 1,
      right: 31,
      top: 8,
      bottom: 8
    };
  };
  function standardStyles(theme) {
    var _a5, _b, _c, _d, _e;
    var s3 = theme.semanticColors, p3 = theme.palette;
    var buttonBackground = s3.buttonBackground;
    var buttonBackgroundPressed = s3.buttonBackgroundPressed;
    var buttonBackgroundHovered = s3.buttonBackgroundHovered;
    var buttonBackgroundDisabled = s3.buttonBackgroundDisabled;
    var buttonText = s3.buttonText;
    var buttonTextHovered = s3.buttonTextHovered;
    var buttonTextDisabled = s3.buttonTextDisabled;
    var buttonTextChecked = s3.buttonTextChecked;
    var buttonTextCheckedHovered = s3.buttonTextCheckedHovered;
    return {
      root: {
        backgroundColor: buttonBackground,
        color: buttonText
      },
      rootHovered: {
        backgroundColor: buttonBackgroundHovered,
        color: buttonTextHovered,
        selectors: (_a5 = {}, _a5[HighContrastSelector] = {
          borderColor: "Highlight",
          color: "Highlight"
        }, _a5)
      },
      rootPressed: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootExpanded: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootChecked: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootCheckedHovered: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextCheckedHovered
      },
      rootDisabled: {
        color: buttonTextDisabled,
        backgroundColor: buttonBackgroundDisabled,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "GrayText",
          borderColor: "GrayText",
          backgroundColor: "Window"
        }, _b)
      },
      // Split button styles
      splitButtonContainer: {
        selectors: (_c = {}, _c[HighContrastSelector] = {
          border: "none"
        }, _c)
      },
      splitButtonMenuButton: {
        color: p3.white,
        backgroundColor: "transparent",
        selectors: {
          ":hover": {
            backgroundColor: p3.neutralLight,
            selectors: (_d = {}, _d[HighContrastSelector] = {
              color: "Highlight"
            }, _d)
          }
        }
      },
      splitButtonMenuButtonDisabled: {
        backgroundColor: s3.buttonBackgroundDisabled,
        selectors: {
          ":hover": {
            backgroundColor: s3.buttonBackgroundDisabled
          }
        }
      },
      splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles()), { backgroundColor: p3.neutralTertiaryAlt, selectors: (_e = {}, _e[HighContrastSelector] = {
        backgroundColor: "WindowText"
      }, _e) }),
      splitButtonDividerDisabled: {
        backgroundColor: theme.palette.neutralTertiaryAlt
      },
      splitButtonMenuButtonChecked: {
        backgroundColor: p3.neutralQuaternaryAlt,
        selectors: {
          ":hover": {
            backgroundColor: p3.neutralQuaternaryAlt
          }
        }
      },
      splitButtonMenuButtonExpanded: {
        backgroundColor: p3.neutralQuaternaryAlt,
        selectors: {
          ":hover": {
            backgroundColor: p3.neutralQuaternaryAlt
          }
        }
      },
      splitButtonMenuIcon: {
        color: s3.buttonText
      },
      splitButtonMenuIconDisabled: {
        color: s3.buttonTextDisabled
      }
    };
  }
  function primaryStyles(theme) {
    var _a5, _b, _c, _d, _e, _f, _g, _h, _j;
    var p3 = theme.palette, s3 = theme.semanticColors;
    return {
      root: {
        backgroundColor: s3.primaryButtonBackground,
        border: "1px solid ".concat(s3.primaryButtonBackground),
        color: s3.primaryButtonText,
        selectors: (_a5 = {}, _a5[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _a5[".".concat(IsFocusVisibleClassName, " &:focus")] = {
          selectors: {
            ":after": {
              border: "none",
              outlineColor: p3.white
            }
          }
        }, _a5)
      },
      rootHovered: {
        backgroundColor: s3.primaryButtonBackgroundHovered,
        border: "1px solid ".concat(s3.primaryButtonBackgroundHovered),
        color: s3.primaryButtonTextHovered,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "Window",
          backgroundColor: "Highlight",
          borderColor: "Highlight"
        }, _b)
      },
      rootPressed: {
        backgroundColor: s3.primaryButtonBackgroundPressed,
        border: "1px solid ".concat(s3.primaryButtonBackgroundPressed),
        color: s3.primaryButtonTextPressed,
        selectors: (_c = {}, _c[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _c)
      },
      rootExpanded: {
        backgroundColor: s3.primaryButtonBackgroundPressed,
        color: s3.primaryButtonTextPressed
      },
      rootChecked: {
        backgroundColor: s3.primaryButtonBackgroundPressed,
        color: s3.primaryButtonTextPressed
      },
      rootCheckedHovered: {
        backgroundColor: s3.primaryButtonBackgroundPressed,
        color: s3.primaryButtonTextPressed
      },
      rootDisabled: {
        color: s3.primaryButtonTextDisabled,
        backgroundColor: s3.primaryButtonBackgroundDisabled,
        selectors: (_d = {}, _d[HighContrastSelector] = {
          color: "GrayText",
          borderColor: "GrayText",
          backgroundColor: "Window"
        }, _d)
      },
      // Split button styles
      splitButtonContainer: {
        selectors: (_e = {}, _e[HighContrastSelector] = {
          border: "none"
        }, _e)
      },
      splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles()), { backgroundColor: p3.white, selectors: (_f = {}, _f[HighContrastSelector] = {
        backgroundColor: "Window"
      }, _f) }),
      splitButtonMenuButton: {
        backgroundColor: s3.primaryButtonBackground,
        color: s3.primaryButtonText,
        selectors: (_g = {}, _g[HighContrastSelector] = {
          backgroundColor: "Canvas"
        }, _g[":hover"] = {
          backgroundColor: s3.primaryButtonBackgroundHovered,
          selectors: (_h = {}, _h[HighContrastSelector] = {
            color: "Highlight"
          }, _h)
        }, _g)
      },
      splitButtonMenuButtonDisabled: {
        backgroundColor: s3.primaryButtonBackgroundDisabled,
        selectors: {
          ":hover": {
            backgroundColor: s3.primaryButtonBackgroundDisabled
          }
        }
      },
      splitButtonMenuButtonChecked: {
        backgroundColor: s3.primaryButtonBackgroundPressed,
        selectors: {
          ":hover": {
            backgroundColor: s3.primaryButtonBackgroundPressed
          }
        }
      },
      splitButtonMenuButtonExpanded: {
        backgroundColor: s3.primaryButtonBackgroundPressed,
        selectors: {
          ":hover": {
            backgroundColor: s3.primaryButtonBackgroundPressed
          }
        }
      },
      splitButtonMenuIcon: {
        color: s3.primaryButtonText
      },
      splitButtonMenuIconDisabled: {
        color: p3.neutralTertiary,
        selectors: (_j = {}, _j[HighContrastSelector] = {
          color: "GrayText"
        }, _j)
      }
    };
  }

  // ../node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.styles.js
  var DEFAULT_BUTTON_HEIGHT = "32px";
  var DEFAULT_BUTTON_MIN_WIDTH = "80px";
  var getStyles10 = memoizeFunction(function(theme, customStyles, primary) {
    var baseButtonStyles = getStyles8(theme);
    var splitButtonStyles = getStyles9(theme);
    var defaultButtonStyles = {
      root: {
        minWidth: DEFAULT_BUTTON_MIN_WIDTH,
        height: DEFAULT_BUTTON_HEIGHT
      },
      label: {
        fontWeight: FontWeights.semibold
      }
    };
    return concatStyleSets(baseButtonStyles, defaultButtonStyles, primary ? primaryStyles(theme) : standardStyles(theme), splitButtonStyles, customStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.js
  var DefaultButton = (
    /** @class */
    function(_super) {
      __extends(DefaultButton2, _super);
      function DefaultButton2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      DefaultButton2.prototype.render = function() {
        var _a5 = this.props, _b = _a5.primary, primary = _b === void 0 ? false : _b, styles4 = _a5.styles, theme = _a5.theme;
        return React221.createElement(BaseButton, __assign({}, this.props, { variantClassName: primary ? "ms-Button--primary" : "ms-Button--default", styles: getStyles10(theme, styles4, primary), onRenderDescription: nullRender }));
      };
      DefaultButton2 = __decorate([
        customizable("DefaultButton", ["theme", "styles"], true)
      ], DefaultButton2);
      return DefaultButton2;
    }(React221.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/PrimaryButton/PrimaryButton.js
  var React222 = __toESM(require_react());
  var PrimaryButton = (
    /** @class */
    function(_super) {
      __extends(PrimaryButton3, _super);
      function PrimaryButton3() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PrimaryButton3.prototype.render = function() {
        return React222.createElement(DefaultButton, __assign({}, this.props, { primary: true, onRenderDescription: nullRender }));
      };
      PrimaryButton3 = __decorate([
        customizable("PrimaryButton", ["theme", "styles"], true)
      ], PrimaryButton3);
      return PrimaryButton3;
    }(React222.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Checkbox/Checkbox.base.js
  var React223 = __toESM(require_react());
  var getClassNames8 = classNamesFunction();
  var CheckboxBase = React223.forwardRef(function(props, forwardedRef) {
    var disabled = props.disabled, required = props.required, inputProps = props.inputProps, name = props.name, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaDescribedBy = props.ariaDescribedBy, ariaPositionInSet = props.ariaPositionInSet, ariaSetSize = props.ariaSetSize, title = props.title, checkmarkIconProps = props.checkmarkIconProps, styles4 = props.styles, theme = props.theme, className = props.className, _a5 = props.boxSide, boxSide = _a5 === void 0 ? "start" : _a5;
    var id = useId3("checkbox-", props.id);
    var rootRef = React223.useRef(null);
    var mergedRootRefs = useMergedRefs2(rootRef, forwardedRef);
    var inputRef = React223.useRef(null);
    var _b = useControllableValue(props.checked, props.defaultChecked, props.onChange), isChecked = _b[0], setIsChecked = _b[1];
    var _c = useControllableValue(props.indeterminate, props.defaultIndeterminate), isIndeterminate = _c[0], setIsIndeterminate = _c[1];
    useFocusRects(rootRef);
    useDebugWarning(props);
    var classNames2 = getClassNames8(styles4, {
      theme,
      className,
      disabled,
      indeterminate: isIndeterminate,
      checked: isChecked,
      reversed: boxSide !== "start",
      isUsingCustomLabelRender: !!props.onRenderLabel
    });
    var onChange = React223.useCallback(function(event) {
      if (isIndeterminate) {
        setIsChecked(!!isChecked, event);
        setIsIndeterminate(false);
      } else {
        setIsChecked(!isChecked, event);
      }
    }, [setIsChecked, setIsIndeterminate, isIndeterminate, isChecked]);
    var defaultLabelRenderer = React223.useCallback(function(checkboxProps) {
      if (!checkboxProps) {
        return null;
      }
      return checkboxProps.label ? React223.createElement("span", { className: classNames2.text, title: checkboxProps.title }, checkboxProps.label) : null;
    }, [classNames2.text]);
    var setNativeIndeterminate = React223.useCallback(function(indeterminate) {
      if (!inputRef.current) {
        return;
      }
      var value = !!indeterminate;
      inputRef.current.indeterminate = value;
      setIsIndeterminate(value);
    }, [setIsIndeterminate]);
    useComponentRef(props, isChecked, isIndeterminate, setNativeIndeterminate, inputRef);
    React223.useEffect(function() {
      return setNativeIndeterminate(isIndeterminate);
    }, [setNativeIndeterminate, isIndeterminate]);
    var onRenderLabel = props.onRenderLabel || defaultLabelRenderer;
    var ariaChecked = isIndeterminate ? "mixed" : void 0;
    var mergedInputProps = __assign(__assign({ className: classNames2.input, type: "checkbox" }, inputProps), { checked: !!isChecked, disabled, required, name, id, title, onChange, "aria-disabled": disabled, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, "aria-posinset": ariaPositionInSet, "aria-setsize": ariaSetSize, "aria-checked": ariaChecked });
    return React223.createElement(
      "div",
      { className: classNames2.root, title, ref: mergedRootRefs },
      React223.createElement("input", __assign({}, mergedInputProps, { ref: inputRef, title, "data-ktp-execute-target": true })),
      React223.createElement(
        "label",
        { className: classNames2.label, htmlFor: id },
        React223.createElement(
          "div",
          { className: classNames2.checkbox, "data-ktp-target": true },
          React223.createElement(Icon, __assign({ iconName: "CheckMark" }, checkmarkIconProps, { className: classNames2.checkmark }))
        ),
        onRenderLabel(props, defaultLabelRenderer)
      )
    );
  });
  CheckboxBase.displayName = "CheckboxBase";
  function useDebugWarning(props) {
    if (true) {
      useWarnings({
        name: "Checkbox",
        props,
        mutuallyExclusive: {
          checked: "defaultChecked",
          indeterminate: "defaultIndeterminate"
        }
      });
    }
  }
  function useComponentRef(props, isChecked, isIndeterminate, setIndeterminate, checkBoxRef) {
    React223.useImperativeHandle(props.componentRef, function() {
      return {
        get checked() {
          return !!isChecked;
        },
        get indeterminate() {
          return !!isIndeterminate;
        },
        set indeterminate(indeterminate) {
          setIndeterminate(indeterminate);
        },
        focus: function() {
          if (checkBoxRef.current) {
            checkBoxRef.current.focus();
          }
        }
      };
    }, [checkBoxRef, isChecked, isIndeterminate, setIndeterminate]);
  }

  // ../node_modules/@fluentui/react/lib/components/Checkbox/Checkbox.styles.js
  var GlobalClassNames7 = {
    root: "ms-Checkbox",
    label: "ms-Checkbox-label",
    checkbox: "ms-Checkbox-checkbox",
    checkmark: "ms-Checkbox-checkmark",
    text: "ms-Checkbox-text"
  };
  var MS_CHECKBOX_LABEL_SIZE = "20px";
  var MS_CHECKBOX_TRANSITION_DURATION = "200ms";
  var MS_CHECKBOX_TRANSITION_TIMING = "cubic-bezier(.4, 0, .23, 1)";
  var getStyles11 = function(props) {
    var _a5, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t2;
    var className = props.className, theme = props.theme, reversed = props.reversed, checked = props.checked, disabled = props.disabled, isUsingCustomLabelRender = props.isUsingCustomLabelRender, indeterminate = props.indeterminate;
    var semanticColors = theme.semanticColors, effects = theme.effects, palette = theme.palette, fonts = theme.fonts;
    var classNames2 = getGlobalClassNames(GlobalClassNames7, theme);
    var checkmarkFontColor = semanticColors.inputForegroundChecked;
    var checkmarkFontColorHovered = palette.neutralSecondary;
    var checkboxBorderColor = palette.neutralPrimary;
    var checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;
    var checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;
    var checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;
    var checkboxBorderHoveredColor = semanticColors.inputBorderHovered;
    var checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;
    var checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;
    var checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;
    var checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;
    var checkboxHoveredTextColor = semanticColors.inputTextHovered;
    var checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;
    var checkboxTextColor = semanticColors.bodyText;
    var checkboxTextColorDisabled = semanticColors.disabledText;
    var indeterminateDotStyles = [
      (_a5 = {
        content: '""',
        borderRadius: effects.roundedCorner2,
        position: "absolute",
        width: 10,
        height: 10,
        top: 4,
        left: 4,
        boxSizing: "border-box",
        borderWidth: 5,
        borderStyle: "solid",
        borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,
        transitionProperty: "border-width, border, border-color",
        transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,
        transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING
      }, _a5[HighContrastSelector] = {
        borderColor: "WindowText"
      }, _a5)
    ];
    return {
      root: [
        classNames2.root,
        {
          position: "relative",
          display: "flex"
        },
        reversed && "reversed",
        checked && "is-checked",
        !disabled && "is-enabled",
        disabled && "is-disabled",
        !disabled && [
          !checked && (_b = {}, _b[":hover .".concat(classNames2.checkbox)] = (_c = {
            borderColor: checkboxBorderHoveredColor
          }, _c[HighContrastSelector] = {
            borderColor: "Highlight"
          }, _c), _b[":focus .".concat(classNames2.checkbox)] = { borderColor: checkboxBorderHoveredColor }, _b[":hover .".concat(classNames2.checkmark)] = (_d = {
            color: checkmarkFontColorHovered,
            opacity: "1"
          }, _d[HighContrastSelector] = {
            color: "Highlight"
          }, _d), _b),
          checked && !indeterminate && (_e = {}, _e[":hover .".concat(classNames2.checkbox)] = {
            background: checkboxBackgroundCheckedHovered,
            borderColor: checkboxBorderColorCheckedHovered
          }, _e[":focus .".concat(classNames2.checkbox)] = {
            background: checkboxBackgroundCheckedHovered,
            borderColor: checkboxBorderColorCheckedHovered
          }, _e[HighContrastSelector] = (_f = {}, _f[":hover .".concat(classNames2.checkbox)] = {
            background: "Highlight",
            borderColor: "Highlight"
          }, _f[":focus .".concat(classNames2.checkbox)] = {
            background: "Highlight"
          }, _f[":focus:hover .".concat(classNames2.checkbox)] = {
            background: "Highlight"
          }, _f[":focus:hover .".concat(classNames2.checkmark)] = {
            color: "Window"
          }, _f[":hover .".concat(classNames2.checkmark)] = {
            color: "Window"
          }, _f), _e),
          indeterminate && (_g = {}, _g[":hover .".concat(classNames2.checkbox, ", :hover .").concat(classNames2.checkbox, ":after")] = (_h = {
            borderColor: checkboxBorderIndeterminateHoveredColor
          }, _h[HighContrastSelector] = {
            borderColor: "WindowText"
          }, _h), _g[":focus .".concat(classNames2.checkbox)] = {
            borderColor: checkboxBorderIndeterminateHoveredColor
          }, _g[":hover .".concat(classNames2.checkmark)] = {
            opacity: "0"
          }, _g),
          (_j = {}, _j[":hover .".concat(classNames2.text, ", :focus .").concat(classNames2.text)] = (_k = {
            color: checkboxHoveredTextColor
          }, _k[HighContrastSelector] = {
            color: disabled ? "GrayText" : "WindowText"
          }, _k), _j)
        ],
        className
      ],
      input: (_l = {
        position: "absolute",
        background: "none",
        opacity: 0
      }, _l[".".concat(IsFocusVisibleClassName, " &:focus + label::before")] = (_m = {
        outline: "1px solid " + theme.palette.neutralSecondary,
        outlineOffset: "2px"
      }, _m[HighContrastSelector] = {
        outline: "1px solid WindowText"
      }, _m), _l),
      label: [
        classNames2.label,
        theme.fonts.medium,
        {
          display: "flex",
          alignItems: isUsingCustomLabelRender ? "center" : "flex-start",
          cursor: disabled ? "default" : "pointer",
          position: "relative",
          userSelect: "none"
        },
        reversed && {
          flexDirection: "row-reverse",
          justifyContent: "flex-end"
        },
        {
          "&::before": {
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            content: '""',
            pointerEvents: "none"
          }
        }
      ],
      checkbox: [
        classNames2.checkbox,
        (_o = {
          position: "relative",
          display: "flex",
          flexShrink: 0,
          alignItems: "center",
          justifyContent: "center",
          height: MS_CHECKBOX_LABEL_SIZE,
          width: MS_CHECKBOX_LABEL_SIZE,
          border: "1px solid ".concat(checkboxBorderColor),
          borderRadius: effects.roundedCorner2,
          boxSizing: "border-box",
          transitionProperty: "background, border, border-color",
          transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,
          transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,
          /* in case the icon is bigger than the box */
          overflow: "hidden",
          ":after": indeterminate ? indeterminateDotStyles : null
        }, _o[HighContrastSelector] = __assign({ borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _o),
        indeterminate && {
          borderColor: checkboxBorderIndeterminateColor
        },
        !reversed ? (
          // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender
          // is used, there will be only a 4px margin from checkbox to label. The label by default would have
          // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two
          // (and move it into the text) to not incur a breaking change for everyone using custom render atm.
          {
            marginRight: 4
          }
        ) : {
          marginLeft: 4
        },
        !disabled && !indeterminate && checked && (_p = {
          background: checkboxBackgroundChecked,
          borderColor: checkboxBorderColorChecked
        }, _p[HighContrastSelector] = {
          background: "Highlight",
          borderColor: "Highlight"
        }, _p),
        disabled && (_q = {
          borderColor: checkboxBorderColorDisabled
        }, _q[HighContrastSelector] = {
          borderColor: "GrayText"
        }, _q),
        checked && disabled && (_r = {
          background: checkboxBackgroundDisabledChecked,
          borderColor: checkboxBorderColorDisabled
        }, _r[HighContrastSelector] = {
          background: "Window"
        }, _r)
      ],
      checkmark: [
        classNames2.checkmark,
        (_s = {
          opacity: checked && !indeterminate ? "1" : "0",
          color: checkmarkFontColor
        }, _s[HighContrastSelector] = __assign({ color: disabled ? "GrayText" : "Window" }, getHighContrastNoAdjustStyle()), _s)
      ],
      text: [
        classNames2.text,
        (_t2 = {
          color: disabled ? checkboxTextColorDisabled : checkboxTextColor,
          fontSize: fonts.medium.fontSize,
          lineHeight: "20px"
        }, _t2[HighContrastSelector] = __assign({ color: disabled ? "GrayText" : "WindowText" }, getHighContrastNoAdjustStyle()), _t2),
        !reversed ? {
          marginLeft: 4
        } : {
          marginRight: 4
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Checkbox/Checkbox.js
  var Checkbox2 = styled(CheckboxBase, getStyles11, void 0, { scope: "Checkbox" });

  // ../node_modules/@fluentui/react/lib/components/Label/Label.base.js
  var React224 = __toESM(require_react());
  var getClassNames9 = classNamesFunction({
    // Label is used a lot by other components.
    // It's likely to see expected cases which pass different className to the Label.
    // Therefore setting a larger cache size.
    cacheSize: 100
  });
  var LabelBase = (
    /** @class */
    function(_super) {
      __extends(LabelBase2, _super);
      function LabelBase2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      LabelBase2.prototype.render = function() {
        var _a5 = this.props, _b = _a5.as, RootType = _b === void 0 ? "label" : _b, children = _a5.children, className = _a5.className, disabled = _a5.disabled, styles4 = _a5.styles, required = _a5.required, theme = _a5.theme;
        var classNames2 = getClassNames9(styles4, {
          className,
          disabled,
          required,
          theme
        });
        return React224.createElement(RootType, __assign({}, getNativeProps2(this.props, divProperties), { className: classNames2.root }), children);
      };
      return LabelBase2;
    }(React224.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Label/Label.styles.js
  var getStyles12 = function(props) {
    var _a5;
    var theme = props.theme, className = props.className, disabled = props.disabled, required = props.required;
    var semanticColors = theme.semanticColors;
    var labelFontWeight = FontWeights.semibold;
    var labelColor = semanticColors.bodyText;
    var labelDisabledColor = semanticColors.disabledBodyText;
    var labelRequiredStarColor = semanticColors.errorText;
    return {
      root: [
        "ms-Label",
        theme.fonts.medium,
        {
          fontWeight: labelFontWeight,
          color: labelColor,
          boxSizing: "border-box",
          boxShadow: "none",
          margin: 0,
          display: "block",
          padding: "5px 0",
          wordWrap: "break-word",
          overflowWrap: "break-word"
        },
        disabled && {
          color: labelDisabledColor,
          selectors: (_a5 = {}, _a5[HighContrastSelector] = __assign({ color: "GrayText" }, getHighContrastNoAdjustStyle()), _a5)
        },
        required && {
          selectors: {
            "::after": {
              content: "' *'",
              color: labelRequiredStarColor,
              paddingRight: 12
            }
          }
        },
        className
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Label/Label.js
  var Label2 = styled(LabelBase, getStyles12, void 0, {
    scope: "Label"
  });

  // ../node_modules/@fluentui/react/lib/components/TextField/TextField.base.js
  var React225 = __toESM(require_react());
  var getClassNames10 = classNamesFunction();
  var DEFAULT_STATE_VALUE = "";
  var COMPONENT_NAME4 = "TextField";
  var REVEAL_ICON_NAME = "RedEye";
  var HIDE_ICON_NAME = "Hide";
  var TextFieldBase = (
    /** @class */
    function(_super) {
      __extends(TextFieldBase2, _super);
      function TextFieldBase2(props) {
        var _this = _super.call(this, props) || this;
        _this._textElement = React225.createRef();
        _this._onFocus = function(ev) {
          if (_this.props.onFocus) {
            _this.props.onFocus(ev);
          }
          _this.setState({ isFocused: true }, function() {
            if (_this.props.validateOnFocusIn) {
              _this._validate(_this.value);
            }
          });
        };
        _this._onBlur = function(ev) {
          if (_this.props.onBlur) {
            _this.props.onBlur(ev);
          }
          _this.setState({ isFocused: false }, function() {
            if (_this.props.validateOnFocusOut) {
              _this._validate(_this.value);
            }
          });
        };
        _this._onRenderLabel = function(props2) {
          var label = props2.label, required = props2.required;
          var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : void 0;
          if (label) {
            return React225.createElement(Label2, { required, htmlFor: _this._id, styles: labelStyles, disabled: props2.disabled, id: _this._labelId }, props2.label);
          }
          return null;
        };
        _this._onRenderDescription = function(props2) {
          if (props2.description) {
            return React225.createElement("span", { className: _this._classNames.description }, props2.description);
          }
          return null;
        };
        _this._onRevealButtonClick = function(event) {
          _this.setState(function(prevState) {
            return { isRevealingPassword: !prevState.isRevealingPassword };
          });
        };
        _this._onInputChange = function(event) {
          var _a6, _b;
          var element2 = event.target;
          var value = element2.value;
          var previousValue = _getValue(_this.props, _this.state) || "";
          if (value === void 0 || value === _this._lastChangeValue || value === previousValue) {
            _this._lastChangeValue = void 0;
            return;
          }
          _this._lastChangeValue = value;
          (_b = (_a6 = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a6, event, value);
          if (!_this._isControlled) {
            _this.setState({ uncontrolledValue: value });
          }
        };
        initializeComponentRef(_this);
        _this._async = new Async(_this);
        if (true) {
          warnMutuallyExclusive(COMPONENT_NAME4, props, {
            errorMessage: "onGetErrorMessage"
          });
        }
        _this._fallbackId = getId(COMPONENT_NAME4);
        _this._descriptionId = getId(COMPONENT_NAME4 + "Description");
        _this._labelId = getId(COMPONENT_NAME4 + "Label");
        _this._prefixId = getId(COMPONENT_NAME4 + "Prefix");
        _this._suffixId = getId(COMPONENT_NAME4 + "Suffix");
        _this._warnControlledUsage();
        var _a5 = props.defaultValue, defaultValue = _a5 === void 0 ? DEFAULT_STATE_VALUE : _a5;
        if (typeof defaultValue === "number") {
          defaultValue = String(defaultValue);
        }
        _this.state = {
          uncontrolledValue: _this._isControlled ? void 0 : defaultValue,
          isFocused: false,
          errorMessage: ""
        };
        _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);
        _this._lastValidation = 0;
        return _this;
      }
      Object.defineProperty(TextFieldBase2.prototype, "value", {
        /**
         * Gets the current value of the text field.
         */
        get: function() {
          return _getValue(this.props, this.state);
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype.componentDidMount = function() {
        this._adjustInputHeight();
        if (this.props.validateOnLoad) {
          this._validate(this.value);
        }
      };
      TextFieldBase2.prototype.componentWillUnmount = function() {
        this._async.dispose();
      };
      TextFieldBase2.prototype.getSnapshotBeforeUpdate = function(prevProps, prevState) {
        return {
          selection: [this.selectionStart, this.selectionEnd]
        };
      };
      TextFieldBase2.prototype.componentDidUpdate = function(prevProps, prevState, snapshot) {
        var props = this.props;
        var _a5 = (snapshot || {}).selection, selection = _a5 === void 0 ? [null, null] : _a5;
        var start2 = selection[0], end2 = selection[1];
        if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {
          this.focus();
          if (start2 !== null && end2 !== null && start2 >= 0 && end2 >= 0) {
            this.setSelectionRange(start2, end2);
          }
        }
        if (prevProps.value !== props.value) {
          this._lastChangeValue = void 0;
        }
        var prevValue = _getValue(prevProps, prevState);
        var value = this.value;
        if (prevValue !== value) {
          this._warnControlledUsage(prevProps);
          if (this.state.errorMessage && !props.errorMessage) {
            this.setState({ errorMessage: "" });
          }
          this._adjustInputHeight();
          if (_shouldValidateAllChanges(props)) {
            this._delayedValidate(value);
          }
        }
      };
      TextFieldBase2.prototype.render = function() {
        var _a5 = this.props, borderless = _a5.borderless, className = _a5.className, disabled = _a5.disabled, invalid = _a5.invalid, iconProps = _a5.iconProps, inputClassName = _a5.inputClassName, label = _a5.label, multiline = _a5.multiline, required = _a5.required, underlined = _a5.underlined, prefix2 = _a5.prefix, resizable = _a5.resizable, suffix = _a5.suffix, theme = _a5.theme, styles4 = _a5.styles, autoAdjustHeight = _a5.autoAdjustHeight, canRevealPassword = _a5.canRevealPassword, revealPasswordAriaLabel = _a5.revealPasswordAriaLabel, type = _a5.type, _b = _a5.onRenderPrefix, onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b, _c = _a5.onRenderSuffix, onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c, _d = _a5.onRenderLabel, onRenderLabel = _d === void 0 ? this._onRenderLabel : _d, _e = _a5.onRenderDescription, onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;
        var _f = this.state, isFocused = _f.isFocused, isRevealingPassword = _f.isRevealingPassword;
        var errorMessage = this._errorMessage;
        var isInvalid = typeof invalid === "boolean" ? invalid : !!errorMessage;
        var hasRevealButton = !!canRevealPassword && type === "password" && _browserNeedsRevealButton();
        var classNames2 = this._classNames = getClassNames10(styles4, {
          theme,
          className,
          disabled,
          focused: isFocused,
          required,
          multiline,
          hasLabel: !!label,
          hasErrorMessage: isInvalid,
          borderless,
          resizable,
          hasIcon: !!iconProps,
          underlined,
          inputClassName,
          autoAdjustHeight,
          hasRevealButton
        });
        return (
          // eslint-disable-next-line deprecation/deprecation
          React225.createElement(
            "div",
            { ref: this.props.elementRef, className: classNames2.root },
            React225.createElement(
              "div",
              { className: classNames2.wrapper },
              onRenderLabel(this.props, this._onRenderLabel),
              React225.createElement(
                "div",
                { className: classNames2.fieldGroup },
                (prefix2 !== void 0 || this.props.onRenderPrefix) && React225.createElement("div", { className: classNames2.prefix, id: this._prefixId }, onRenderPrefix(this.props, this._onRenderPrefix)),
                multiline ? this._renderTextArea() : this._renderInput(),
                iconProps && React225.createElement(Icon, __assign({ className: classNames2.icon }, iconProps)),
                hasRevealButton && // Explicitly set type="button" since the default button type within a form is "submit"
                React225.createElement(
                  "button",
                  { "aria-label": revealPasswordAriaLabel, className: classNames2.revealButton, onClick: this._onRevealButtonClick, "aria-pressed": !!isRevealingPassword, type: "button" },
                  React225.createElement(
                    "span",
                    { className: classNames2.revealSpan },
                    React225.createElement(Icon, { className: classNames2.revealIcon, iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME })
                  )
                ),
                (suffix !== void 0 || this.props.onRenderSuffix) && React225.createElement("div", { className: classNames2.suffix, id: this._suffixId }, onRenderSuffix(this.props, this._onRenderSuffix))
              )
            ),
            this._isDescriptionAvailable && React225.createElement(
              "span",
              { id: this._descriptionId },
              onRenderDescription(this.props, this._onRenderDescription),
              errorMessage && React225.createElement(
                "div",
                { role: "alert" },
                React225.createElement(DelayedRender, null, this._renderErrorMessage())
              )
            )
          )
        );
      };
      TextFieldBase2.prototype.focus = function() {
        if (this._textElement.current) {
          this._textElement.current.focus();
        }
      };
      TextFieldBase2.prototype.blur = function() {
        if (this._textElement.current) {
          this._textElement.current.blur();
        }
      };
      TextFieldBase2.prototype.select = function() {
        if (this._textElement.current) {
          this._textElement.current.select();
        }
      };
      TextFieldBase2.prototype.setSelectionStart = function(value) {
        if (this._textElement.current) {
          this._textElement.current.selectionStart = value;
        }
      };
      TextFieldBase2.prototype.setSelectionEnd = function(value) {
        if (this._textElement.current) {
          this._textElement.current.selectionEnd = value;
        }
      };
      Object.defineProperty(TextFieldBase2.prototype, "selectionStart", {
        /**
         * Gets the selection start of the text field
         */
        get: function() {
          return this._textElement.current ? this._textElement.current.selectionStart : -1;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextFieldBase2.prototype, "selectionEnd", {
        /**
         * Gets the selection end of the text field
         */
        get: function() {
          return this._textElement.current ? this._textElement.current.selectionEnd : -1;
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype.setSelectionRange = function(start2, end2) {
        if (this._textElement.current) {
          this._textElement.current.setSelectionRange(start2, end2);
        }
      };
      TextFieldBase2.prototype._warnControlledUsage = function(prevProps) {
        warnControlledUsage({
          componentId: this._id,
          componentName: COMPONENT_NAME4,
          props: this.props,
          oldProps: prevProps,
          valueProp: "value",
          defaultValueProp: "defaultValue",
          onChangeProp: "onChange",
          readOnlyProp: "readOnly"
        });
        if (this.props.value === null && !this._hasWarnedNullValue) {
          this._hasWarnedNullValue = true;
          warn("Warning: 'value' prop on '".concat(COMPONENT_NAME4, "' should not be null. Consider using an ") + "empty string to clear the component or undefined to indicate an uncontrolled component.");
        }
      };
      Object.defineProperty(TextFieldBase2.prototype, "_id", {
        /** Returns `props.id` if available, or a fallback if not. */
        get: function() {
          return this.props.id || this._fallbackId;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextFieldBase2.prototype, "_isControlled", {
        get: function() {
          return isControlled(this.props, "value");
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype._onRenderPrefix = function(props) {
        var prefix2 = props.prefix;
        return React225.createElement("span", { style: { paddingBottom: "1px" } }, prefix2);
      };
      TextFieldBase2.prototype._onRenderSuffix = function(props) {
        var suffix = props.suffix;
        return React225.createElement("span", { style: { paddingBottom: "1px" } }, suffix);
      };
      Object.defineProperty(TextFieldBase2.prototype, "_errorMessage", {
        /**
         * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.
         *
         * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.
         * - If we have done the validation and there is validation error, errorMessage is the validation error message.
         */
        get: function() {
          var _a5 = this.props.errorMessage, errorMessage = _a5 === void 0 ? this.state.errorMessage : _a5;
          return errorMessage || "";
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype._renderErrorMessage = function() {
        var errorMessage = this._errorMessage;
        return errorMessage ? typeof errorMessage === "string" ? React225.createElement(
          "p",
          { className: this._classNames.errorMessage },
          React225.createElement("span", { "data-automation-id": "error-message" }, errorMessage)
        ) : React225.createElement("div", { className: this._classNames.errorMessage, "data-automation-id": "error-message" }, errorMessage) : null;
      };
      Object.defineProperty(TextFieldBase2.prototype, "_isDescriptionAvailable", {
        /**
         * If a custom description render function is supplied then treat description as always available.
         * Otherwise defer to the presence of description or error message text.
         */
        get: function() {
          var props = this.props;
          return !!(props.onRenderDescription || props.description || this._errorMessage);
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype._renderTextArea = function() {
        var _a5 = this.props.invalid, invalid = _a5 === void 0 ? !!this._errorMessage : _a5;
        var textAreaProps = getNativeProps2(this.props, textAreaProperties2, ["defaultValue"]);
        var ariaLabelledBy = this.props["aria-labelledby"] || (this.props.label ? this._labelId : void 0);
        return React225.createElement("textarea", __assign({ id: this._id }, textAreaProps, { ref: this._textElement, value: this.value || "", onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, "aria-labelledby": ariaLabelledBy, "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : this.props["aria-describedby"], "aria-invalid": invalid, "aria-label": this.props.ariaLabel, readOnly: this.props.readOnly, onFocus: this._onFocus, onBlur: this._onBlur }));
      };
      TextFieldBase2.prototype._renderInput = function() {
        var _a5 = this.props, ariaLabel = _a5.ariaLabel, _b = _a5.invalid, invalid = _b === void 0 ? !!this._errorMessage : _b, onRenderPrefix = _a5.onRenderPrefix, onRenderSuffix = _a5.onRenderSuffix, prefix2 = _a5.prefix, suffix = _a5.suffix, _c = _a5.type, type = _c === void 0 ? "text" : _c, label = _a5.label;
        var labelIds = [];
        label && labelIds.push(this._labelId);
        (prefix2 !== void 0 || onRenderPrefix) && labelIds.push(this._prefixId);
        (suffix !== void 0 || onRenderSuffix) && labelIds.push(this._suffixId);
        var inputProps = __assign(__assign({ type: this.state.isRevealingPassword ? "text" : type, id: this._id }, getNativeProps2(this.props, inputProperties2, ["defaultValue", "type"])), { "aria-labelledby": this.props["aria-labelledby"] || (labelIds.length > 0 ? labelIds.join(" ") : void 0), ref: this._textElement, value: this.value || "", onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, "aria-label": ariaLabel, "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : this.props["aria-describedby"], "aria-invalid": invalid, onFocus: this._onFocus, onBlur: this._onBlur });
        var defaultRender = function(updatedInputProps) {
          return React225.createElement("input", __assign({}, updatedInputProps));
        };
        var onRenderInput = this.props.onRenderInput || defaultRender;
        return onRenderInput(inputProps, defaultRender);
      };
      TextFieldBase2.prototype._validate = function(value) {
        var _this = this;
        if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {
          return;
        }
        this._latestValidateValue = value;
        var onGetErrorMessage = this.props.onGetErrorMessage;
        var result = onGetErrorMessage && onGetErrorMessage(value || "");
        if (result !== void 0) {
          if (typeof result === "string" || !("then" in result)) {
            this.setState({ errorMessage: result });
            this._notifyAfterValidate(value, result);
          } else {
            var currentValidation_1 = ++this._lastValidation;
            result.then(function(errorMessage) {
              if (currentValidation_1 === _this._lastValidation) {
                _this.setState({ errorMessage });
              }
              _this._notifyAfterValidate(value, errorMessage);
            });
          }
        } else {
          this._notifyAfterValidate(value, "");
        }
      };
      TextFieldBase2.prototype._notifyAfterValidate = function(value, errorMessage) {
        if (value === this.value && this.props.onNotifyValidationResult) {
          this.props.onNotifyValidationResult(errorMessage, value);
        }
      };
      TextFieldBase2.prototype._adjustInputHeight = function() {
        if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {
          var textField = this._textElement.current;
          textField.style.height = "";
          textField.style.height = textField.scrollHeight + "px";
        }
      };
      TextFieldBase2.defaultProps = {
        resizable: true,
        deferredValidationTime: 200,
        validateOnLoad: true
      };
      return TextFieldBase2;
    }(React225.Component)
  );
  function _getValue(props, state) {
    var _a5 = props.value, value = _a5 === void 0 ? state.uncontrolledValue : _a5;
    if (typeof value === "number") {
      return String(value);
    }
    return value;
  }
  function _shouldValidateAllChanges(props) {
    return !(props.validateOnFocusIn || props.validateOnFocusOut);
  }
  var __browserNeedsRevealButton;
  function _browserNeedsRevealButton() {
    if (typeof __browserNeedsRevealButton !== "boolean") {
      var win2 = getWindow2();
      if (win2 === null || win2 === void 0 ? void 0 : win2.navigator) {
        var isEdge2 = /Edg/.test(win2.navigator.userAgent || "");
        __browserNeedsRevealButton = !(isIE11() || isEdge2);
      } else {
        __browserNeedsRevealButton = true;
      }
    }
    return __browserNeedsRevealButton;
  }

  // ../node_modules/@fluentui/react/lib/components/TextField/TextField.styles.js
  var globalClassNames = {
    root: "ms-TextField",
    description: "ms-TextField-description",
    errorMessage: "ms-TextField-errorMessage",
    field: "ms-TextField-field",
    fieldGroup: "ms-TextField-fieldGroup",
    prefix: "ms-TextField-prefix",
    suffix: "ms-TextField-suffix",
    wrapper: "ms-TextField-wrapper",
    revealButton: "ms-TextField-reveal",
    multiline: "ms-TextField--multiline",
    borderless: "ms-TextField--borderless",
    underlined: "ms-TextField--underlined",
    unresizable: "ms-TextField--unresizable",
    required: "is-required",
    disabled: "is-disabled",
    active: "is-active"
  };
  function getLabelStyles(props) {
    var underlined = props.underlined, disabled = props.disabled, focused = props.focused, theme = props.theme;
    var palette = theme.palette, fonts = theme.fonts;
    return function() {
      var _a5;
      return {
        root: [
          underlined && disabled && {
            color: palette.neutralTertiary
          },
          underlined && {
            fontSize: fonts.medium.fontSize,
            marginRight: 8,
            paddingLeft: 12,
            paddingRight: 0,
            lineHeight: "22px",
            height: 32
          },
          underlined && focused && {
            selectors: (_a5 = {}, _a5[HighContrastSelector] = {
              height: 31
              // -1px to prevent jumpiness in HC with the increased border-width to 2px
            }, _a5)
          }
        ]
      };
    };
  }
  function getStyles13(props) {
    var _a5, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    var theme = props.theme, className = props.className, disabled = props.disabled, focused = props.focused, required = props.required, multiline = props.multiline, hasLabel = props.hasLabel, borderless = props.borderless, underlined = props.underlined, hasIcon = props.hasIcon, resizable = props.resizable, hasErrorMessage = props.hasErrorMessage, inputClassName = props.inputClassName, autoAdjustHeight = props.autoAdjustHeight, hasRevealButton = props.hasRevealButton;
    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
    var classNames2 = getGlobalClassNames(globalClassNames, theme);
    var fieldPrefixSuffix = {
      // Suffix/Prefix are not editable so the disabled slot perfectly fits.
      background: semanticColors.disabledBackground,
      color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,
      display: "flex",
      alignItems: "center",
      padding: "0 10px",
      lineHeight: 1,
      whiteSpace: "nowrap",
      flexShrink: 0,
      selectors: (_a5 = {}, _a5[HighContrastSelector] = {
        background: "Window",
        color: disabled ? "GrayText" : "WindowText"
      }, _a5)
    };
    var placeholderStyles = [
      {
        color: semanticColors.inputPlaceholderText,
        opacity: 1,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "GrayText"
        }, _b)
      }
    ];
    var disabledPlaceholderStyles = {
      color: semanticColors.disabledText,
      selectors: (_c = {}, _c[HighContrastSelector] = {
        color: "GrayText"
      }, _c)
    };
    return {
      root: [
        classNames2.root,
        fonts.medium,
        required && classNames2.required,
        disabled && classNames2.disabled,
        focused && classNames2.active,
        multiline && classNames2.multiline,
        borderless && classNames2.borderless,
        underlined && classNames2.underlined,
        normalize2,
        {
          position: "relative"
        },
        className
      ],
      wrapper: [
        classNames2.wrapper,
        underlined && [
          {
            display: "flex",
            borderBottom: "1px solid ".concat(!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText),
            width: "100%"
          },
          disabled && {
            borderBottomColor: semanticColors.disabledBackground,
            selectors: (_d = {}, _d[HighContrastSelector] = __assign({ borderColor: "GrayText" }, getHighContrastNoAdjustStyle()), _d)
          },
          !disabled && {
            selectors: {
              ":hover": {
                borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,
                selectors: (_e = {}, _e[HighContrastSelector] = __assign({ borderBottomColor: "Highlight" }, getHighContrastNoAdjustStyle()), _e)
              }
            }
          },
          focused && [
            {
              position: "relative"
            },
            getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, 0, "borderBottom")
          ]
        ]
      ],
      fieldGroup: [
        classNames2.fieldGroup,
        normalize2,
        {
          border: "1px solid ".concat(semanticColors.inputBorder),
          borderRadius: effects.roundedCorner2,
          background: semanticColors.inputBackground,
          cursor: "text",
          height: 32,
          display: "flex",
          flexDirection: "row",
          alignItems: "stretch",
          position: "relative"
        },
        multiline && {
          minHeight: "60px",
          height: "auto",
          display: "flex"
        },
        !focused && !disabled && {
          selectors: {
            ":hover": {
              borderColor: semanticColors.inputBorderHovered,
              selectors: (_f = {}, _f[HighContrastSelector] = __assign({ borderColor: "Highlight" }, getHighContrastNoAdjustStyle()), _f)
            }
          }
        },
        focused && !underlined && getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, effects.roundedCorner2),
        disabled && {
          borderColor: semanticColors.disabledBackground,
          selectors: (_g = {}, _g[HighContrastSelector] = __assign({ borderColor: "GrayText" }, getHighContrastNoAdjustStyle()), _g),
          cursor: "default"
        },
        borderless && {
          border: "none"
        },
        borderless && focused && {
          border: "none",
          selectors: {
            ":after": {
              border: "none"
            }
          }
        },
        underlined && {
          flex: "1 1 0px",
          border: "none",
          textAlign: "left"
        },
        underlined && disabled && {
          backgroundColor: "transparent"
        },
        hasErrorMessage && !underlined && {
          borderColor: semanticColors.errorText,
          selectors: {
            "&:hover": {
              borderColor: semanticColors.errorText
            }
          }
        },
        !hasLabel && required && {
          selectors: (_h = {
            ":before": {
              content: "'*'",
              color: semanticColors.errorText,
              position: "absolute",
              top: -5,
              right: -10
            }
          }, _h[HighContrastSelector] = {
            selectors: {
              ":before": {
                color: "WindowText",
                right: -14
                // moving the * 4 pixel to right to alleviate border clipping in HC mode.
              }
            }
          }, _h)
        }
      ],
      field: [
        fonts.medium,
        classNames2.field,
        normalize2,
        {
          borderRadius: 0,
          border: "none",
          background: "none",
          backgroundColor: "transparent",
          color: semanticColors.inputText,
          padding: "0 8px",
          width: "100%",
          minWidth: 0,
          textOverflow: "ellipsis",
          outline: 0,
          selectors: (_j = {
            "&:active, &:focus, &:hover": { outline: 0 },
            "::-ms-clear": {
              display: "none"
            }
          }, _j[HighContrastSelector] = {
            background: "Window",
            color: disabled ? "GrayText" : "WindowText"
          }, _j)
        },
        getPlaceholderStyles(placeholderStyles),
        multiline && !resizable && [
          classNames2.unresizable,
          {
            resize: "none"
          }
        ],
        multiline && {
          minHeight: "inherit",
          lineHeight: 17,
          flexGrow: 1,
          paddingTop: 6,
          paddingBottom: 6,
          overflow: "auto",
          width: "100%"
        },
        multiline && autoAdjustHeight && {
          overflow: "hidden"
        },
        hasIcon && !hasRevealButton && {
          paddingRight: 24
        },
        multiline && hasIcon && {
          paddingRight: 40
        },
        disabled && [
          {
            backgroundColor: semanticColors.disabledBackground,
            color: semanticColors.disabledText,
            borderColor: semanticColors.disabledBackground
          },
          getPlaceholderStyles(disabledPlaceholderStyles)
        ],
        underlined && {
          textAlign: "left"
        },
        focused && !borderless && {
          selectors: (_k = {}, _k[HighContrastSelector] = {
            paddingLeft: 11,
            paddingRight: 11
          }, _k)
        },
        focused && multiline && !borderless && {
          selectors: (_l = {}, _l[HighContrastSelector] = {
            paddingTop: 4
            // take into consideration the 2px increased border-width (not when borderless).
          }, _l)
        },
        inputClassName
      ],
      icon: [
        multiline && {
          paddingRight: 24,
          alignItems: "flex-end"
        },
        {
          pointerEvents: "none",
          position: "absolute",
          bottom: 6,
          right: 8,
          top: "auto",
          fontSize: IconFontSizes.medium,
          lineHeight: 18
        },
        disabled && {
          color: semanticColors.disabledText
        }
      ],
      description: [
        classNames2.description,
        {
          color: semanticColors.bodySubtext,
          fontSize: fonts.xSmall.fontSize
        }
      ],
      errorMessage: [
        classNames2.errorMessage,
        AnimationClassNames.slideDownIn20,
        fonts.small,
        {
          color: semanticColors.errorText,
          margin: 0,
          paddingTop: 5,
          display: "flex",
          alignItems: "center"
        }
      ],
      prefix: [classNames2.prefix, fieldPrefixSuffix],
      suffix: [classNames2.suffix, fieldPrefixSuffix],
      revealButton: [
        classNames2.revealButton,
        "ms-Button",
        "ms-Button--icon",
        getFocusStyle(theme, { inset: 1 }),
        {
          height: 30,
          width: 32,
          border: "none",
          padding: "0px 4px",
          backgroundColor: "transparent",
          color: semanticColors.link,
          selectors: {
            ":hover": {
              outline: 0,
              color: semanticColors.primaryButtonBackgroundHovered,
              backgroundColor: semanticColors.buttonBackgroundHovered,
              selectors: (_m = {}, _m[HighContrastSelector] = {
                borderColor: "Highlight",
                color: "Highlight"
              }, _m)
            },
            ":focus": { outline: 0 }
          }
        },
        hasIcon && {
          marginRight: 28
        }
      ],
      revealSpan: {
        display: "flex",
        height: "100%",
        alignItems: "center"
      },
      revealIcon: {
        margin: "0px 4px",
        pointerEvents: "none",
        bottom: 6,
        right: 8,
        top: "auto",
        fontSize: IconFontSizes.medium,
        lineHeight: 18
      },
      subComponentStyles: {
        label: getLabelStyles(props)
      }
    };
  }

  // ../node_modules/@fluentui/react/lib/components/TextField/TextField.js
  var TextField = styled(TextFieldBase, getStyles13, void 0, {
    scope: "TextField"
  });

  // ../node_modules/@fluentui/react/lib/components/Spinner/Spinner.base.js
  var React226 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Spinner/Spinner.types.js
  var SpinnerSize;
  (function(SpinnerSize3) {
    SpinnerSize3[SpinnerSize3["xSmall"] = 0] = "xSmall";
    SpinnerSize3[SpinnerSize3["small"] = 1] = "small";
    SpinnerSize3[SpinnerSize3["medium"] = 2] = "medium";
    SpinnerSize3[SpinnerSize3["large"] = 3] = "large";
  })(SpinnerSize || (SpinnerSize = {}));
  var SpinnerType;
  (function(SpinnerType2) {
    SpinnerType2[SpinnerType2["normal"] = 0] = "normal";
    SpinnerType2[SpinnerType2["large"] = 1] = "large";
  })(SpinnerType || (SpinnerType = {}));

  // ../node_modules/@fluentui/react/lib/components/Spinner/Spinner.base.js
  var getClassNames11 = classNamesFunction();
  var SpinnerBase = (
    /** @class */
    function(_super) {
      __extends(SpinnerBase2, _super);
      function SpinnerBase2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SpinnerBase2.prototype.render = function() {
        var _a5 = this.props, type = _a5.type, size3 = _a5.size, ariaLabel = _a5.ariaLabel, ariaLive = _a5.ariaLive, styles4 = _a5.styles, label = _a5.label, theme = _a5.theme, className = _a5.className, labelPosition = _a5.labelPosition;
        var statusMessage = ariaLabel;
        var nativeProps = getNativeProps2(this.props, divProperties, ["size"]);
        var styleSize = size3;
        if (styleSize === void 0 && type !== void 0) {
          styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;
        }
        var classNames2 = getClassNames11(styles4, {
          theme,
          size: styleSize,
          className,
          labelPosition
        });
        return React226.createElement(
          "div",
          __assign({}, nativeProps, { className: classNames2.root }),
          React226.createElement("div", { className: classNames2.circle }),
          label && React226.createElement("div", { className: classNames2.label }, label),
          statusMessage && React226.createElement(
            "div",
            { role: "status", "aria-live": ariaLive },
            React226.createElement(
              DelayedRender,
              null,
              React226.createElement("div", { className: classNames2.screenReaderText }, statusMessage)
            )
          )
        );
      };
      SpinnerBase2.defaultProps = {
        size: SpinnerSize.medium,
        ariaLive: "polite",
        labelPosition: "bottom"
      };
      return SpinnerBase2;
    }(React226.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Spinner/Spinner.styles.js
  var GlobalClassNames8 = {
    root: "ms-Spinner",
    circle: "ms-Spinner-circle",
    label: "ms-Spinner-label"
  };
  var spinAnimation = memoizeFunction(function() {
    return keyframes({
      "0%": {
        transform: "rotate(0deg)"
      },
      "100%": {
        transform: "rotate(360deg)"
      }
    });
  });
  var getStyles14 = function(props) {
    var _a5;
    var theme = props.theme, size3 = props.size, className = props.className, labelPosition = props.labelPosition;
    var palette = theme.palette;
    var classNames2 = getGlobalClassNames(GlobalClassNames8, theme);
    return {
      root: [
        classNames2.root,
        {
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center"
        },
        labelPosition === "top" && {
          flexDirection: "column-reverse"
        },
        labelPosition === "right" && {
          flexDirection: "row"
        },
        labelPosition === "left" && {
          flexDirection: "row-reverse"
        },
        className
      ],
      circle: [
        classNames2.circle,
        {
          boxSizing: "border-box",
          borderRadius: "50%",
          border: "1.5px solid " + palette.themeLight,
          borderTopColor: palette.themePrimary,
          animationName: spinAnimation(),
          animationDuration: "1.3s",
          animationIterationCount: "infinite",
          animationTimingFunction: "cubic-bezier(.53,.21,.29,.67)",
          selectors: (_a5 = {}, _a5[HighContrastSelector] = __assign({ borderTopColor: "Highlight" }, getHighContrastNoAdjustStyle()), _a5)
        },
        size3 === SpinnerSize.xSmall && [
          "ms-Spinner--xSmall",
          {
            width: 12,
            height: 12
          }
        ],
        size3 === SpinnerSize.small && [
          "ms-Spinner--small",
          {
            width: 16,
            height: 16
          }
        ],
        size3 === SpinnerSize.medium && [
          "ms-Spinner--medium",
          {
            width: 20,
            height: 20
          }
        ],
        size3 === SpinnerSize.large && [
          "ms-Spinner--large",
          {
            width: 28,
            height: 28
          }
        ]
      ],
      label: [
        classNames2.label,
        theme.fonts.small,
        {
          color: palette.themePrimary,
          margin: "8px 0 0",
          textAlign: "center"
        },
        labelPosition === "top" && {
          margin: "0 0 8px"
        },
        labelPosition === "right" && {
          margin: "0 0 0 8px"
        },
        labelPosition === "left" && {
          margin: "0 8px 0 0"
        }
      ],
      screenReaderText: hiddenContentStyle
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Spinner/Spinner.js
  var Spinner = styled(SpinnerBase, getStyles14, void 0, { scope: "Spinner" });

  // ../node_modules/@fluentui/foundation-legacy/lib/createComponent.js
  var React228 = __toESM(require_react());

  // ../node_modules/@fluentui/foundation-legacy/lib/slots.js
  var React227 = __toESM(require_react());

  // ../node_modules/@fluentui/foundation-legacy/lib/utilities.js
  var assign3 = __assign;

  // ../node_modules/@fluentui/foundation-legacy/lib/slots.js
  function withSlots(type, props) {
    var children = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      children[_i - 2] = arguments[_i];
    }
    var slotType = type;
    if (slotType.isSlot) {
      children = React227.Children.toArray(children);
      if (children.length === 0) {
        return slotType(props);
      }
      return slotType(__assign(__assign({}, props), { children }));
    } else {
      return React227.createElement.apply(React227, __spreadArray([type, props], children, false));
    }
  }
  function createFactory(DefaultComponent, options) {
    if (options === void 0) {
      options = {};
    }
    var _a5 = options.defaultProp, defaultProp = _a5 === void 0 ? "children" : _a5;
    var result = function(componentProps, userProps, userSlotOptions, defaultStyles, theme) {
      if (React227.isValidElement(userProps)) {
        return userProps;
      }
      var flattenedUserProps = _translateShorthand(defaultProp, userProps);
      var finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);
      if (userSlotOptions) {
        if (userSlotOptions.component) {
          var UserComponent = userSlotOptions.component;
          return React227.createElement(UserComponent, __assign({}, finalProps));
        }
        if (userSlotOptions.render) {
          return userSlotOptions.render(finalProps, DefaultComponent);
        }
      }
      return React227.createElement(DefaultComponent, __assign({}, finalProps));
    };
    return result;
  }
  var defaultFactory = memoizeFunction(function(type) {
    return createFactory(type);
  });
  function getSlots2(userProps, slots) {
    var result = {};
    var mixedProps = userProps;
    var _loop_1 = function(name_12) {
      if (slots.hasOwnProperty(name_12)) {
        var slot = function(componentProps) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          if (args.length > 0) {
            throw new Error("Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.");
          }
          return _renderSlot(
            slots[name_12],
            // TODO: this cast to any is hiding a relationship issue between the first two args
            componentProps,
            mixedProps[name_12],
            mixedProps.slots && mixedProps.slots[name_12],
            // _defaultStyles should always be present, but a check for existence is added to make view tests
            // easier to use.
            mixedProps._defaultStyles && mixedProps._defaultStyles[name_12],
            mixedProps.theme
          );
        };
        slot.isSlot = true;
        result[name_12] = slot;
      }
    };
    for (var name_1 in slots) {
      _loop_1(name_1);
    }
    return result;
  }
  function _translateShorthand(defaultProp, slotProps) {
    var _a5;
    var transformedProps;
    if (typeof slotProps === "string" || typeof slotProps === "number" || typeof slotProps === "boolean") {
      transformedProps = (_a5 = {}, _a5[defaultProp] = slotProps, _a5);
    } else {
      transformedProps = slotProps;
    }
    return transformedProps;
  }
  function _constructFinalProps(defaultStyles, theme) {
    var allProps = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      allProps[_i - 2] = arguments[_i];
    }
    var finalProps = {};
    var classNames2 = [];
    for (var _a5 = 0, allProps_1 = allProps; _a5 < allProps_1.length; _a5++) {
      var props = allProps_1[_a5];
      classNames2.push(props && props.className);
      assign3(finalProps, props);
    }
    finalProps.className = mergeCss([defaultStyles, classNames2], { rtl: getRTL2(theme) });
    return finalProps;
  }
  function _renderSlot(ComponentType, componentProps, userProps, slotOptions, defaultStyles, theme) {
    if (ComponentType.create !== void 0) {
      return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);
    } else {
      return defaultFactory(ComponentType)(componentProps, userProps, slotOptions, defaultStyles, theme);
    }
  }

  // ../node_modules/@fluentui/foundation-legacy/lib/createComponent.js
  function createComponent(view, options) {
    if (options === void 0) {
      options = {};
    }
    var _a5 = options.factoryOptions, factoryOptions = _a5 === void 0 ? {} : _a5;
    var defaultProp = factoryOptions.defaultProp;
    var ResultComponent = function(componentProps) {
      var settings = _getCustomizations(options.displayName, React228.useContext(CustomizerContext), options.fields);
      var stateReducer = options.state;
      if (stateReducer) {
        componentProps = __assign(__assign({}, componentProps), stateReducer(componentProps));
      }
      var theme = componentProps.theme || settings.theme;
      var tokens2 = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);
      var styles4 = _resolveStyles(componentProps, theme, tokens2, options.styles, settings.styles, componentProps.styles);
      var viewProps = __assign(__assign({}, componentProps), { styles: styles4, tokens: tokens2, _defaultStyles: styles4, theme });
      return view(viewProps);
    };
    ResultComponent.displayName = options.displayName || view.name;
    if (defaultProp) {
      ResultComponent.create = createFactory(ResultComponent, { defaultProp });
    }
    assign3(ResultComponent, options.statics);
    return ResultComponent;
  }
  function _resolveStyles(props, theme, tokens2) {
    var allStyles = [];
    for (var _i = 3; _i < arguments.length; _i++) {
      allStyles[_i - 3] = arguments[_i];
    }
    return concatStyleSets.apply(void 0, allStyles.map(function(styles4) {
      return typeof styles4 === "function" ? styles4(props, theme, tokens2) : styles4;
    }));
  }
  function _resolveTokens(props, theme) {
    var allTokens = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      allTokens[_i - 2] = arguments[_i];
    }
    var tokens2 = {};
    for (var _a5 = 0, allTokens_1 = allTokens; _a5 < allTokens_1.length; _a5++) {
      var currentTokens = allTokens_1[_a5];
      if (currentTokens) {
        currentTokens = typeof currentTokens === "function" ? currentTokens(props, theme) : currentTokens;
        if (Array.isArray(currentTokens)) {
          currentTokens = _resolveTokens.apply(void 0, __spreadArray([props, theme], currentTokens, false));
        }
        assign3(tokens2, currentTokens);
      }
    }
    return tokens2;
  }
  function _getCustomizations(displayName, context, fields) {
    var DefaultFields2 = ["theme", "styles", "tokens"];
    return Customizations.getSettings(fields || DefaultFields2, displayName, context.customizations);
  }

  // ../node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.styles.js
  var GlobalClassNames9 = {
    root: "ms-StackItem"
  };
  var alignMap = {
    start: "flex-start",
    end: "flex-end"
  };
  var StackItemStyles = function(props, theme, tokens2) {
    var grow = props.grow, shrink = props.shrink, disableShrink = props.disableShrink, align = props.align, verticalFill = props.verticalFill, order2 = props.order, className = props.className, _a5 = props.basis, basis = _a5 === void 0 ? "auto" : _a5;
    var classNames2 = getGlobalClassNames(GlobalClassNames9, theme);
    return {
      root: [
        theme.fonts.medium,
        classNames2.root,
        {
          flexBasis: basis,
          margin: tokens2.margin,
          padding: tokens2.padding,
          height: verticalFill ? "100%" : "auto",
          width: "auto"
        },
        grow && {
          flexGrow: grow === true ? 1 : grow
        },
        (disableShrink || !grow && !shrink) && {
          flexShrink: 0
        },
        shrink && !disableShrink && {
          flexShrink: 1
        },
        align && {
          alignSelf: alignMap[align] || align
        },
        order2 && {
          order: order2
        },
        className
      ]
      // TODO: this cast may be hiding some potential issues with styling and name
      //        lookups and should be removed
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.js
  var StackItemView = function(props) {
    var children = props.children;
    var nativeProps = getNativeProps2(props, htmlElementProperties2);
    if (children == null) {
      return null;
    }
    var Slots = getSlots2(props, {
      root: "div"
    });
    return withSlots(Slots.root, __assign({}, nativeProps), children);
  };
  var StackItem = createComponent(StackItemView, {
    displayName: "StackItem",
    styles: StackItemStyles
  });

  // ../node_modules/@fluentui/react/lib/components/Stack/Stack.js
  var React229 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Stack/StackUtils.js
  var _getThemedSpacing = function(space2, theme) {
    if (theme.spacing.hasOwnProperty(space2)) {
      return theme.spacing[space2];
    }
    return space2;
  };
  var _getValueUnitGap = function(gap2) {
    var numericalPart = parseFloat(gap2);
    var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;
    var numericalString = isNaN(numericalPart) ? "" : numericalPart.toString();
    var unitPart = gap2.substring(numericalString.toString().length);
    return {
      value: numericalValue,
      unit: unitPart || "px"
    };
  };
  var parseGap = function(gap2, theme) {
    if (gap2 === void 0 || gap2 === "") {
      return {
        rowGap: {
          value: 0,
          unit: "px"
        },
        columnGap: {
          value: 0,
          unit: "px"
        }
      };
    }
    if (typeof gap2 === "number") {
      return {
        rowGap: {
          value: gap2,
          unit: "px"
        },
        columnGap: {
          value: gap2,
          unit: "px"
        }
      };
    }
    var splitGap = gap2.split(" ");
    if (splitGap.length > 2) {
      return {
        rowGap: {
          value: 0,
          unit: "px"
        },
        columnGap: {
          value: 0,
          unit: "px"
        }
      };
    }
    if (splitGap.length === 2) {
      return {
        rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),
        columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))
      };
    }
    var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap2, theme));
    return {
      rowGap: calculatedGap,
      columnGap: calculatedGap
    };
  };
  var parsePadding = function(padding3, theme) {
    if (padding3 === void 0 || typeof padding3 === "number" || padding3 === "") {
      return padding3;
    }
    var paddingValues = padding3.split(" ");
    if (paddingValues.length < 2) {
      return _getThemedSpacing(padding3, theme);
    }
    return paddingValues.reduce(function(padding1, padding22) {
      return _getThemedSpacing(padding1, theme) + " " + _getThemedSpacing(padding22, theme);
    });
  };

  // ../node_modules/@fluentui/react/lib/components/Stack/Stack.styles.js
  var nameMap = {
    start: "flex-start",
    end: "flex-end"
  };
  var GlobalClassNames10 = {
    root: "ms-Stack",
    inner: "ms-Stack-inner",
    child: "ms-Stack-child"
  };
  var styles = function(props, theme, tokens2) {
    var _a5, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    var className = props.className, disableShrink = props.disableShrink, enableScopedSelectors = props.enableScopedSelectors, grow = props.grow, horizontal = props.horizontal, horizontalAlign = props.horizontalAlign, reversed = props.reversed, verticalAlign = props.verticalAlign, verticalFill = props.verticalFill, wrap3 = props.wrap;
    var classNames2 = getGlobalClassNames(GlobalClassNames10, theme);
    var childrenGap = tokens2 && tokens2.childrenGap ? tokens2.childrenGap : props.gap;
    var maxHeight = tokens2 && tokens2.maxHeight ? tokens2.maxHeight : props.maxHeight;
    var maxWidth = tokens2 && tokens2.maxWidth ? tokens2.maxWidth : props.maxWidth;
    var padding3 = tokens2 && tokens2.padding ? tokens2.padding : props.padding;
    var _p = parseGap(childrenGap, theme), rowGap = _p.rowGap, columnGap = _p.columnGap;
    var horizontalMargin = "".concat(-0.5 * columnGap.value).concat(columnGap.unit);
    var verticalMargin = "".concat(-0.5 * rowGap.value).concat(rowGap.unit);
    var childStyles = {
      textOverflow: "ellipsis"
    };
    var childSelector = "> " + (enableScopedSelectors ? "." + GlobalClassNames10.child : "*");
    var disableShrinkStyles = (_a5 = {}, // flexShrink styles are applied by the StackItem
    _a5["".concat(childSelector, ":not(.").concat(GlobalClassNames9.root, ")")] = {
      flexShrink: 0
    }, _a5);
    if (wrap3) {
      return {
        root: [
          classNames2.root,
          {
            flexWrap: "wrap",
            maxWidth,
            maxHeight,
            width: "auto",
            overflow: "visible",
            height: "100%"
          },
          horizontalAlign && (_b = {}, _b[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _b),
          verticalAlign && (_c = {}, _c[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _c),
          className,
          {
            // not allowed to be overridden by className
            // since this is necessary in order to prevent collapsing margins
            display: "flex"
          },
          horizontal && {
            height: verticalFill ? "100%" : "auto"
          }
        ],
        inner: [
          classNames2.inner,
          (_d = {
            display: "flex",
            flexWrap: "wrap",
            marginLeft: horizontalMargin,
            marginRight: horizontalMargin,
            marginTop: verticalMargin,
            marginBottom: verticalMargin,
            overflow: "visible",
            boxSizing: "border-box",
            padding: parsePadding(padding3, theme),
            // avoid unnecessary calc() calls if horizontal gap is 0
            width: columnGap.value === 0 ? "100%" : "calc(100% + ".concat(columnGap.value).concat(columnGap.unit, ")"),
            maxWidth: "100vw"
          }, _d[childSelector] = __assign({ margin: "".concat(0.5 * rowGap.value).concat(rowGap.unit, " ").concat(0.5 * columnGap.value).concat(columnGap.unit) }, childStyles), _d),
          disableShrink && disableShrinkStyles,
          horizontalAlign && (_e = {}, _e[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _e),
          verticalAlign && (_f = {}, _f[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _f),
          horizontal && (_g = {
            flexDirection: reversed ? "row-reverse" : "row",
            // avoid unnecessary calc() calls if vertical gap is 0
            height: rowGap.value === 0 ? "100%" : "calc(100% + ".concat(rowGap.value).concat(rowGap.unit, ")")
          }, _g[childSelector] = {
            maxWidth: columnGap.value === 0 ? "100%" : "calc(100% - ".concat(columnGap.value).concat(columnGap.unit, ")")
          }, _g),
          !horizontal && (_h = {
            flexDirection: reversed ? "column-reverse" : "column",
            height: "calc(100% + ".concat(rowGap.value).concat(rowGap.unit, ")")
          }, _h[childSelector] = {
            maxHeight: rowGap.value === 0 ? "100%" : "calc(100% - ".concat(rowGap.value).concat(rowGap.unit, ")")
          }, _h)
        ]
      };
    }
    return {
      root: [
        classNames2.root,
        (_j = {
          display: "flex",
          flexDirection: horizontal ? reversed ? "row-reverse" : "row" : reversed ? "column-reverse" : "column",
          flexWrap: "nowrap",
          width: "auto",
          height: verticalFill ? "100%" : "auto",
          maxWidth,
          maxHeight,
          padding: parsePadding(padding3, theme),
          boxSizing: "border-box"
        }, _j[childSelector] = childStyles, _j),
        disableShrink && disableShrinkStyles,
        grow && {
          flexGrow: grow === true ? 1 : grow
        },
        horizontalAlign && (_k = {}, _k[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _k),
        verticalAlign && (_l = {}, _l[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _l),
        horizontal && columnGap.value > 0 && (_m = {}, // apply gap margin to every direct child except the first direct child if the direction is not reversed,
        // and the last direct one if it is
        _m[reversed ? "".concat(childSelector, ":not(:last-child)") : "".concat(childSelector, ":not(:first-child)")] = {
          marginLeft: "".concat(columnGap.value).concat(columnGap.unit)
        }, _m),
        !horizontal && rowGap.value > 0 && (_o = {}, // apply gap margin to every direct child except the first direct child if the direction is not reversed,
        // and the last direct one if it is
        _o[reversed ? "".concat(childSelector, ":not(:last-child)") : "".concat(childSelector, ":not(:first-child)")] = {
          marginTop: "".concat(rowGap.value).concat(rowGap.unit)
        }, _o),
        className
      ]
      // TODO: this cast may be hiding some potential issues with styling and name
      //        lookups and should be removed
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Stack/Stack.js
  var StackView = function(props) {
    var _a5 = props.as, RootType = _a5 === void 0 ? "div" : _a5, _b = props.disableShrink, disableShrink = _b === void 0 ? false : _b, _c = props.doNotRenderFalsyValues, doNotRenderFalsyValues = _c === void 0 ? false : _c, _d = props.enableScopedSelectors, enableScopedSelectors = _d === void 0 ? false : _d, wrap3 = props.wrap, rest = __rest(props, ["as", "disableShrink", "doNotRenderFalsyValues", "enableScopedSelectors", "wrap"]);
    warnDeprecations("Stack", props, {
      gap: "tokens.childrenGap",
      maxHeight: "tokens.maxHeight",
      maxWidth: "tokens.maxWidth",
      padding: "tokens.padding"
    });
    var stackChildren = _processStackChildren(props.children, {
      disableShrink,
      enableScopedSelectors,
      doNotRenderFalsyValues
    });
    var nativeProps = getNativeProps2(rest, htmlElementProperties2);
    var Slots = getSlots2(props, {
      root: RootType,
      inner: "div"
    });
    if (wrap3) {
      return withSlots(
        Slots.root,
        __assign({}, nativeProps),
        withSlots(Slots.inner, null, stackChildren)
      );
    }
    return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);
  };
  function _processStackChildren(children, _a5) {
    var disableShrink = _a5.disableShrink, enableScopedSelectors = _a5.enableScopedSelectors, doNotRenderFalsyValues = _a5.doNotRenderFalsyValues;
    var childrenArray = React229.Children.toArray(children);
    childrenArray = React229.Children.map(childrenArray, function(child) {
      if (!child || !React229.isValidElement(child)) {
        return doNotRenderFalsyValues ? null : child;
      }
      if (child.type === React229.Fragment) {
        return child.props.children ? _processStackChildren(child.props.children, { disableShrink, enableScopedSelectors, doNotRenderFalsyValues }) : null;
      }
      var childAsReactElement = child;
      var defaultItemProps = {};
      if (_isStackItem(child)) {
        defaultItemProps = { shrink: !disableShrink };
      }
      var childClassName = childAsReactElement.props.className;
      return React229.cloneElement(childAsReactElement, __assign(__assign(__assign(__assign({}, defaultItemProps), childAsReactElement.props), childClassName && { className: childClassName }), enableScopedSelectors && { className: css(GlobalClassNames10.child, childClassName) }));
    });
    return childrenArray;
  }
  function _isStackItem(item) {
    return !!item && typeof item === "object" && !!item.type && // StackItem is generated by createComponent, so we need to check its displayName instead of name
    item.type.displayName === StackItem.displayName;
  }
  var StackStatics = {
    Item: StackItem
  };
  var Stack = createComponent(StackView, {
    displayName: "Stack",
    styles,
    statics: StackStatics
  });

  // src/components/FileDrop.tsx
  var import_react61 = __toESM(require_react(), 1);
  var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
  var FileDrop = ({ children }) => {
    const [isDragging, setIsDragging] = (0, import_react61.useState)(false);
    const { streamMessages, loading, setLoading } = useProjectContext();
    const onDrop = (0, import_react61.useCallback)(async (event) => {
      event.preventDefault();
      setIsDragging(false);
      const file = event.dataTransfer.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e3) => {
          try {
            const fileAsArrayBuffer = e3.target.result;
            if (fileAsArrayBuffer) {
              const fileBytes = new Uint8Array(fileAsArrayBuffer);
              setLoading(true);
              const res = projectService.uploadContent({
                content: {
                  options: {
                    case: "fileOptions",
                    value: {
                      file: file.name,
                      data: fileBytes
                    }
                  }
                }
              }, {
                timeoutMs: void 0
              });
              void streamMessages(res);
            }
          } catch (e4) {
            console.error(e4);
          }
        };
        reader.readAsArrayBuffer(file);
      }
    }, []);
    const onDragLeave = (event) => {
      event.preventDefault();
      setIsDragging(false);
    };
    const onDragOver = (0, import_react61.useCallback)((event) => {
      event.preventDefault();
      setIsDragging(true);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
      "div",
      {
        onDrop,
        onDragOver,
        onDragLeave,
        style: {
          border: isDragging ? "2px dashed #cccccc" : ""
        },
        children
      }
    );
  };

  // src/components/Content/ContentWindow.tsx
  var import_react75 = __toESM(require_react(), 1);

  // src/components/Editor/MarkdownEditor.tsx
  var import_react63 = __toESM(require_react(), 1);

  // ../node_modules/is-plain-object/dist/is-plain-object.mjs
  function isObject3(o3) {
    return Object.prototype.toString.call(o3) === "[object Object]";
  }
  function isPlainObject2(o3) {
    var ctor, prot;
    if (isObject3(o3) === false)
      return false;
    ctor = o3.constructor;
    if (ctor === void 0)
      return true;
    prot = ctor.prototype;
    if (isObject3(prot) === false)
      return false;
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
      return false;
    }
    return true;
  }

  // ../node_modules/immer/dist/immer.esm.mjs
  function n3(n6) {
    for (var r3 = arguments.length, t4 = Array(r3 > 1 ? r3 - 1 : 0), e3 = 1; e3 < r3; e3++)
      t4[e3 - 1] = arguments[e3];
    if (true) {
      var i4 = Y2[n6], o3 = i4 ? "function" == typeof i4 ? i4.apply(null, t4) : i4 : "unknown error nr: " + n6;
      throw Error("[Immer] " + o3);
    }
    throw Error("[Immer] minified error nr: " + n6 + (t4.length ? " " + t4.map(function(n7) {
      return "'" + n7 + "'";
    }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
  }
  function r(n6) {
    return !!n6 && !!n6[Q2];
  }
  function t2(n6) {
    var r3;
    return !!n6 && (function(n7) {
      if (!n7 || "object" != typeof n7)
        return false;
      var r4 = Object.getPrototypeOf(n7);
      if (null === r4)
        return true;
      var t4 = Object.hasOwnProperty.call(r4, "constructor") && r4.constructor;
      return t4 === Object || "function" == typeof t4 && Function.toString.call(t4) === Z2;
    }(n6) || Array.isArray(n6) || !!n6[L2] || !!(null === (r3 = n6.constructor) || void 0 === r3 ? void 0 : r3[L2]) || s2(n6) || v2(n6));
  }
  function i2(n6, r3, t4) {
    void 0 === t4 && (t4 = false), 0 === o2(n6) ? (t4 ? Object.keys : nn)(n6).forEach(function(e3) {
      t4 && "symbol" == typeof e3 || r3(e3, n6[e3], n6);
    }) : n6.forEach(function(t5, e3) {
      return r3(e3, t5, n6);
    });
  }
  function o2(n6) {
    var r3 = n6[Q2];
    return r3 ? r3.i > 3 ? r3.i - 4 : r3.i : Array.isArray(n6) ? 1 : s2(n6) ? 2 : v2(n6) ? 3 : 0;
  }
  function u3(n6, r3) {
    return 2 === o2(n6) ? n6.has(r3) : Object.prototype.hasOwnProperty.call(n6, r3);
  }
  function a2(n6, r3) {
    return 2 === o2(n6) ? n6.get(r3) : n6[r3];
  }
  function f3(n6, r3, t4) {
    var e3 = o2(n6);
    2 === e3 ? n6.set(r3, t4) : 3 === e3 ? n6.add(t4) : n6[r3] = t4;
  }
  function c2(n6, r3) {
    return n6 === r3 ? 0 !== n6 || 1 / n6 == 1 / r3 : n6 != n6 && r3 != r3;
  }
  function s2(n6) {
    return X2 && n6 instanceof Map;
  }
  function v2(n6) {
    return q && n6 instanceof Set;
  }
  function p2(n6) {
    return n6.o || n6.t;
  }
  function l3(n6) {
    if (Array.isArray(n6))
      return Array.prototype.slice.call(n6);
    var r3 = rn(n6);
    delete r3[Q2];
    for (var t4 = nn(r3), e3 = 0; e3 < t4.length; e3++) {
      var i4 = t4[e3], o3 = r3[i4];
      false === o3.writable && (o3.writable = true, o3.configurable = true), (o3.get || o3.set) && (r3[i4] = { configurable: true, writable: true, enumerable: o3.enumerable, value: n6[i4] });
    }
    return Object.create(Object.getPrototypeOf(n6), r3);
  }
  function d2(n6, e3) {
    return void 0 === e3 && (e3 = false), y2(n6) || r(n6) || !t2(n6) || (o2(n6) > 1 && (n6.set = n6.add = n6.clear = n6.delete = h3), Object.freeze(n6), e3 && i2(n6, function(n7, r3) {
      return d2(r3, true);
    }, true)), n6;
  }
  function h3() {
    n3(2);
  }
  function y2(n6) {
    return null == n6 || "object" != typeof n6 || Object.isFrozen(n6);
  }
  function b3(r3) {
    var t4 = tn[r3];
    return t4 || n3(18, r3), t4;
  }
  function _2() {
    return U2 || n3(0), U2;
  }
  function j3(n6, r3) {
    r3 && (b3("Patches"), n6.u = [], n6.s = [], n6.v = r3);
  }
  function g2(n6) {
    O2(n6), n6.p.forEach(S2), n6.p = null;
  }
  function O2(n6) {
    n6 === U2 && (U2 = n6.l);
  }
  function w2(n6) {
    return U2 = { p: [], l: U2, h: n6, m: true, _: 0 };
  }
  function S2(n6) {
    var r3 = n6[Q2];
    0 === r3.i || 1 === r3.i ? r3.j() : r3.g = true;
  }
  function P2(r3, e3) {
    e3._ = e3.p.length;
    var i4 = e3.p[0], o3 = void 0 !== r3 && r3 !== i4;
    return e3.h.O || b3("ES5").S(e3, r3, o3), o3 ? (i4[Q2].P && (g2(e3), n3(4)), t2(r3) && (r3 = M2(e3, r3), e3.l || x(e3, r3)), e3.u && b3("Patches").M(i4[Q2].t, r3, e3.u, e3.s)) : r3 = M2(e3, i4, []), g2(e3), e3.u && e3.v(e3.u, e3.s), r3 !== H2 ? r3 : void 0;
  }
  function M2(n6, r3, t4) {
    if (y2(r3))
      return r3;
    var e3 = r3[Q2];
    if (!e3)
      return i2(r3, function(i4, o4) {
        return A2(n6, e3, r3, i4, o4, t4);
      }, true), r3;
    if (e3.A !== n6)
      return r3;
    if (!e3.P)
      return x(n6, e3.t, true), e3.t;
    if (!e3.I) {
      e3.I = true, e3.A._--;
      var o3 = 4 === e3.i || 5 === e3.i ? e3.o = l3(e3.k) : e3.o, u4 = o3, a3 = false;
      3 === e3.i && (u4 = new Set(o3), o3.clear(), a3 = true), i2(u4, function(r4, i4) {
        return A2(n6, e3, o3, r4, i4, t4, a3);
      }), x(n6, o3, false), t4 && n6.u && b3("Patches").N(e3, t4, n6.u, n6.s);
    }
    return e3.o;
  }
  function A2(e3, i4, o3, a3, c3, s3, v3) {
    if (c3 === o3 && n3(5), r(c3)) {
      var p3 = M2(e3, c3, s3 && i4 && 3 !== i4.i && !u3(i4.R, a3) ? s3.concat(a3) : void 0);
      if (f3(o3, a3, p3), !r(p3))
        return;
      e3.m = false;
    } else
      v3 && o3.add(c3);
    if (t2(c3) && !y2(c3)) {
      if (!e3.h.D && e3._ < 1)
        return;
      M2(e3, c3), i4 && i4.A.l || x(e3, c3);
    }
  }
  function x(n6, r3, t4) {
    void 0 === t4 && (t4 = false), !n6.l && n6.h.D && n6.m && d2(r3, t4);
  }
  function z(n6, r3) {
    var t4 = n6[Q2];
    return (t4 ? p2(t4) : n6)[r3];
  }
  function I2(n6, r3) {
    if (r3 in n6)
      for (var t4 = Object.getPrototypeOf(n6); t4; ) {
        var e3 = Object.getOwnPropertyDescriptor(t4, r3);
        if (e3)
          return e3;
        t4 = Object.getPrototypeOf(t4);
      }
  }
  function k(n6) {
    n6.P || (n6.P = true, n6.l && k(n6.l));
  }
  function E(n6) {
    n6.o || (n6.o = l3(n6.t));
  }
  function N(n6, r3, t4) {
    var e3 = s2(r3) ? b3("MapSet").F(r3, t4) : v2(r3) ? b3("MapSet").T(r3, t4) : n6.O ? function(n7, r4) {
      var t5 = Array.isArray(n7), e4 = { i: t5 ? 1 : 0, A: r4 ? r4.A : _2(), P: false, I: false, R: {}, l: r4, t: n7, k: null, o: null, j: null, C: false }, i4 = e4, o3 = en;
      t5 && (i4 = [e4], o3 = on2);
      var u4 = Proxy.revocable(i4, o3), a3 = u4.revoke, f4 = u4.proxy;
      return e4.k = f4, e4.j = a3, f4;
    }(r3, t4) : b3("ES5").J(r3, t4);
    return (t4 ? t4.A : _2()).p.push(e3), e3;
  }
  function R(e3) {
    return r(e3) || n3(22, e3), function n6(r3) {
      if (!t2(r3))
        return r3;
      var e4, u4 = r3[Q2], c3 = o2(r3);
      if (u4) {
        if (!u4.P && (u4.i < 4 || !b3("ES5").K(u4)))
          return u4.t;
        u4.I = true, e4 = D2(r3, c3), u4.I = false;
      } else
        e4 = D2(r3, c3);
      return i2(e4, function(r4, t4) {
        u4 && a2(u4.t, r4) === t4 || f3(e4, r4, n6(t4));
      }), 3 === c3 ? new Set(e4) : e4;
    }(e3);
  }
  function D2(n6, r3) {
    switch (r3) {
      case 2:
        return new Map(n6);
      case 3:
        return Array.from(n6);
    }
    return l3(n6);
  }
  var G2;
  var U2;
  var W2 = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x");
  var X2 = "undefined" != typeof Map;
  var q = "undefined" != typeof Set;
  var B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect;
  var H2 = W2 ? Symbol.for("immer-nothing") : ((G2 = {})["immer-nothing"] = true, G2);
  var L2 = W2 ? Symbol.for("immer-draftable") : "__$immer_draftable";
  var Q2 = W2 ? Symbol.for("immer-state") : "__$immer_state";
  var Y2 = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n6) {
    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n6;
  }, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n6) {
    return "Cannot apply patch, path doesn't resolve: " + n6;
  }, 16: 'Sets cannot have "replace" patches.', 17: function(n6) {
    return "Unsupported patch operation: " + n6;
  }, 18: function(n6) {
    return "The plugin for '" + n6 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n6 + "()` when initializing your application.";
  }, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n6) {
    return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n6 + "'";
  }, 22: function(n6) {
    return "'current' expects a draft, got: " + n6;
  }, 23: function(n6) {
    return "'original' expects a draft, got: " + n6;
  }, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
  var Z2 = "" + Object.prototype.constructor;
  var nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n6) {
    return Object.getOwnPropertyNames(n6).concat(Object.getOwnPropertySymbols(n6));
  } : Object.getOwnPropertyNames;
  var rn = Object.getOwnPropertyDescriptors || function(n6) {
    var r3 = {};
    return nn(n6).forEach(function(t4) {
      r3[t4] = Object.getOwnPropertyDescriptor(n6, t4);
    }), r3;
  };
  var tn = {};
  var en = { get: function(n6, r3) {
    if (r3 === Q2)
      return n6;
    var e3 = p2(n6);
    if (!u3(e3, r3))
      return function(n7, r4, t4) {
        var e4, i5 = I2(r4, t4);
        return i5 ? "value" in i5 ? i5.value : null === (e4 = i5.get) || void 0 === e4 ? void 0 : e4.call(n7.k) : void 0;
      }(n6, e3, r3);
    var i4 = e3[r3];
    return n6.I || !t2(i4) ? i4 : i4 === z(n6.t, r3) ? (E(n6), n6.o[r3] = N(n6.A.h, i4, n6)) : i4;
  }, has: function(n6, r3) {
    return r3 in p2(n6);
  }, ownKeys: function(n6) {
    return Reflect.ownKeys(p2(n6));
  }, set: function(n6, r3, t4) {
    var e3 = I2(p2(n6), r3);
    if (null == e3 ? void 0 : e3.set)
      return e3.set.call(n6.k, t4), true;
    if (!n6.P) {
      var i4 = z(p2(n6), r3), o3 = null == i4 ? void 0 : i4[Q2];
      if (o3 && o3.t === t4)
        return n6.o[r3] = t4, n6.R[r3] = false, true;
      if (c2(t4, i4) && (void 0 !== t4 || u3(n6.t, r3)))
        return true;
      E(n6), k(n6);
    }
    return n6.o[r3] === t4 && (void 0 !== t4 || r3 in n6.o) || Number.isNaN(t4) && Number.isNaN(n6.o[r3]) || (n6.o[r3] = t4, n6.R[r3] = true), true;
  }, deleteProperty: function(n6, r3) {
    return void 0 !== z(n6.t, r3) || r3 in n6.t ? (n6.R[r3] = false, E(n6), k(n6)) : delete n6.R[r3], n6.o && delete n6.o[r3], true;
  }, getOwnPropertyDescriptor: function(n6, r3) {
    var t4 = p2(n6), e3 = Reflect.getOwnPropertyDescriptor(t4, r3);
    return e3 ? { writable: true, configurable: 1 !== n6.i || "length" !== r3, enumerable: e3.enumerable, value: t4[r3] } : e3;
  }, defineProperty: function() {
    n3(11);
  }, getPrototypeOf: function(n6) {
    return Object.getPrototypeOf(n6.t);
  }, setPrototypeOf: function() {
    n3(12);
  } };
  var on2 = {};
  i2(en, function(n6, r3) {
    on2[n6] = function() {
      return arguments[0] = arguments[0][0], r3.apply(this, arguments);
    };
  }), on2.deleteProperty = function(r3, t4) {
    return isNaN(parseInt(t4)) && n3(13), on2.set.call(this, r3, t4, void 0);
  }, on2.set = function(r3, t4, e3) {
    return "length" !== t4 && isNaN(parseInt(t4)) && n3(14), en.set.call(this, r3[0], t4, e3, r3[0]);
  };
  var un = function() {
    function e3(r3) {
      var e4 = this;
      this.O = B, this.D = true, this.produce = function(r4, i5, o3) {
        if ("function" == typeof r4 && "function" != typeof i5) {
          var u4 = i5;
          i5 = r4;
          var a3 = e4;
          return function(n6) {
            var r5 = this;
            void 0 === n6 && (n6 = u4);
            for (var t4 = arguments.length, e5 = Array(t4 > 1 ? t4 - 1 : 0), o4 = 1; o4 < t4; o4++)
              e5[o4 - 1] = arguments[o4];
            return a3.produce(n6, function(n7) {
              var t5;
              return (t5 = i5).call.apply(t5, [r5, n7].concat(e5));
            });
          };
        }
        var f4;
        if ("function" != typeof i5 && n3(6), void 0 !== o3 && "function" != typeof o3 && n3(7), t2(r4)) {
          var c3 = w2(e4), s3 = N(e4, r4, void 0), v3 = true;
          try {
            f4 = i5(s3), v3 = false;
          } finally {
            v3 ? g2(c3) : O2(c3);
          }
          return "undefined" != typeof Promise && f4 instanceof Promise ? f4.then(function(n6) {
            return j3(c3, o3), P2(n6, c3);
          }, function(n6) {
            throw g2(c3), n6;
          }) : (j3(c3, o3), P2(f4, c3));
        }
        if (!r4 || "object" != typeof r4) {
          if (void 0 === (f4 = i5(r4)) && (f4 = r4), f4 === H2 && (f4 = void 0), e4.D && d2(f4, true), o3) {
            var p3 = [], l4 = [];
            b3("Patches").M(r4, f4, p3, l4), o3(p3, l4);
          }
          return f4;
        }
        n3(21, r4);
      }, this.produceWithPatches = function(n6, r4) {
        if ("function" == typeof n6)
          return function(r5) {
            for (var t5 = arguments.length, i6 = Array(t5 > 1 ? t5 - 1 : 0), o4 = 1; o4 < t5; o4++)
              i6[o4 - 1] = arguments[o4];
            return e4.produceWithPatches(r5, function(r6) {
              return n6.apply(void 0, [r6].concat(i6));
            });
          };
        var t4, i5, o3 = e4.produce(n6, r4, function(n7, r5) {
          t4 = n7, i5 = r5;
        });
        return "undefined" != typeof Promise && o3 instanceof Promise ? o3.then(function(n7) {
          return [n7, t4, i5];
        }) : [o3, t4, i5];
      }, "boolean" == typeof (null == r3 ? void 0 : r3.useProxies) && this.setUseProxies(r3.useProxies), "boolean" == typeof (null == r3 ? void 0 : r3.autoFreeze) && this.setAutoFreeze(r3.autoFreeze);
    }
    var i4 = e3.prototype;
    return i4.createDraft = function(e4) {
      t2(e4) || n3(8), r(e4) && (e4 = R(e4));
      var i5 = w2(this), o3 = N(this, e4, void 0);
      return o3[Q2].C = true, O2(i5), o3;
    }, i4.finishDraft = function(r3, t4) {
      var e4 = r3 && r3[Q2];
      e4 && e4.C || n3(9), e4.I && n3(10);
      var i5 = e4.A;
      return j3(i5, t4), P2(void 0, i5);
    }, i4.setAutoFreeze = function(n6) {
      this.D = n6;
    }, i4.setUseProxies = function(r3) {
      r3 && !B && n3(20), this.O = r3;
    }, i4.applyPatches = function(n6, t4) {
      var e4;
      for (e4 = t4.length - 1; e4 >= 0; e4--) {
        var i5 = t4[e4];
        if (0 === i5.path.length && "replace" === i5.op) {
          n6 = i5.value;
          break;
        }
      }
      e4 > -1 && (t4 = t4.slice(e4 + 1));
      var o3 = b3("Patches").$;
      return r(n6) ? o3(n6, t4) : this.produce(n6, function(n7) {
        return o3(n7, t4);
      });
    }, e3;
  }();
  var an = new un();
  var fn = an.produce;
  var cn = an.produceWithPatches.bind(an);
  var sn = an.setAutoFreeze.bind(an);
  var vn = an.setUseProxies.bind(an);
  var pn = an.applyPatches.bind(an);
  var ln = an.createDraft.bind(an);
  var dn = an.finishDraft.bind(an);

  // ../node_modules/slate/dist/index.es.js
  var PathRef = {
    transform(ref, op) {
      var {
        current,
        affinity
      } = ref;
      if (current == null) {
        return;
      }
      var path4 = Path.transform(current, op, {
        affinity
      });
      ref.current = path4;
      if (path4 == null) {
        ref.unref();
      }
    }
  };
  var PointRef = {
    transform(ref, op) {
      var {
        current,
        affinity
      } = ref;
      if (current == null) {
        return;
      }
      var point6 = Point.transform(current, op, {
        affinity
      });
      ref.current = point6;
      if (point6 == null) {
        ref.unref();
      }
    }
  };
  var RangeRef = {
    transform(ref, op) {
      var {
        current,
        affinity
      } = ref;
      if (current == null) {
        return;
      }
      var path4 = Range.transform(current, op, {
        affinity
      });
      ref.current = path4;
      if (path4 == null) {
        ref.unref();
      }
    }
  };
  var DIRTY_PATHS = /* @__PURE__ */ new WeakMap();
  var DIRTY_PATH_KEYS = /* @__PURE__ */ new WeakMap();
  var FLUSHING = /* @__PURE__ */ new WeakMap();
  var NORMALIZING = /* @__PURE__ */ new WeakMap();
  var PATH_REFS = /* @__PURE__ */ new WeakMap();
  var POINT_REFS = /* @__PURE__ */ new WeakMap();
  var RANGE_REFS = /* @__PURE__ */ new WeakMap();
  var Path = {
    ancestors(path4) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        reverse = false
      } = options;
      var paths = Path.levels(path4, options);
      if (reverse) {
        paths = paths.slice(1);
      } else {
        paths = paths.slice(0, -1);
      }
      return paths;
    },
    common(path4, another) {
      var common = [];
      for (var i4 = 0; i4 < path4.length && i4 < another.length; i4++) {
        var av = path4[i4];
        var bv = another[i4];
        if (av !== bv) {
          break;
        }
        common.push(av);
      }
      return common;
    },
    compare(path4, another) {
      var min2 = Math.min(path4.length, another.length);
      for (var i4 = 0; i4 < min2; i4++) {
        if (path4[i4] < another[i4])
          return -1;
        if (path4[i4] > another[i4])
          return 1;
      }
      return 0;
    },
    endsAfter(path4, another) {
      var i4 = path4.length - 1;
      var as = path4.slice(0, i4);
      var bs = another.slice(0, i4);
      var av = path4[i4];
      var bv = another[i4];
      return Path.equals(as, bs) && av > bv;
    },
    endsAt(path4, another) {
      var i4 = path4.length;
      var as = path4.slice(0, i4);
      var bs = another.slice(0, i4);
      return Path.equals(as, bs);
    },
    endsBefore(path4, another) {
      var i4 = path4.length - 1;
      var as = path4.slice(0, i4);
      var bs = another.slice(0, i4);
      var av = path4[i4];
      var bv = another[i4];
      return Path.equals(as, bs) && av < bv;
    },
    equals(path4, another) {
      return path4.length === another.length && path4.every((n6, i4) => n6 === another[i4]);
    },
    hasPrevious(path4) {
      return path4[path4.length - 1] > 0;
    },
    isAfter(path4, another) {
      return Path.compare(path4, another) === 1;
    },
    isAncestor(path4, another) {
      return path4.length < another.length && Path.compare(path4, another) === 0;
    },
    isBefore(path4, another) {
      return Path.compare(path4, another) === -1;
    },
    isChild(path4, another) {
      return path4.length === another.length + 1 && Path.compare(path4, another) === 0;
    },
    isCommon(path4, another) {
      return path4.length <= another.length && Path.compare(path4, another) === 0;
    },
    isDescendant(path4, another) {
      return path4.length > another.length && Path.compare(path4, another) === 0;
    },
    isParent(path4, another) {
      return path4.length + 1 === another.length && Path.compare(path4, another) === 0;
    },
    isPath(value) {
      return Array.isArray(value) && (value.length === 0 || typeof value[0] === "number");
    },
    isSibling(path4, another) {
      if (path4.length !== another.length) {
        return false;
      }
      var as = path4.slice(0, -1);
      var bs = another.slice(0, -1);
      var al = path4[path4.length - 1];
      var bl = another[another.length - 1];
      return al !== bl && Path.equals(as, bs);
    },
    levels(path4) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        reverse = false
      } = options;
      var list3 = [];
      for (var i4 = 0; i4 <= path4.length; i4++) {
        list3.push(path4.slice(0, i4));
      }
      if (reverse) {
        list3.reverse();
      }
      return list3;
    },
    next(path4) {
      if (path4.length === 0) {
        throw new Error("Cannot get the next path of a root path [".concat(path4, "], because it has no next index."));
      }
      var last2 = path4[path4.length - 1];
      return path4.slice(0, -1).concat(last2 + 1);
    },
    operationCanTransformPath(operation) {
      switch (operation.type) {
        case "insert_node":
        case "remove_node":
        case "merge_node":
        case "split_node":
        case "move_node":
          return true;
        default:
          return false;
      }
    },
    parent(path4) {
      if (path4.length === 0) {
        throw new Error("Cannot get the parent path of the root path [".concat(path4, "]."));
      }
      return path4.slice(0, -1);
    },
    previous(path4) {
      if (path4.length === 0) {
        throw new Error("Cannot get the previous path of a root path [".concat(path4, "], because it has no previous index."));
      }
      var last2 = path4[path4.length - 1];
      if (last2 <= 0) {
        throw new Error("Cannot get the previous path of a first child path [".concat(path4, "] because it would result in a negative index."));
      }
      return path4.slice(0, -1).concat(last2 - 1);
    },
    relative(path4, ancestor) {
      if (!Path.isAncestor(ancestor, path4) && !Path.equals(path4, ancestor)) {
        throw new Error("Cannot get the relative path of [".concat(path4, "] inside ancestor [").concat(ancestor, "], because it is not above or equal to the path."));
      }
      return path4.slice(ancestor.length);
    },
    transform(path4, operation) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      if (!path4)
        return null;
      var p3 = [...path4];
      var {
        affinity = "forward"
      } = options;
      if (path4.length === 0) {
        return p3;
      }
      switch (operation.type) {
        case "insert_node": {
          var {
            path: op
          } = operation;
          if (Path.equals(op, p3) || Path.endsBefore(op, p3) || Path.isAncestor(op, p3)) {
            p3[op.length - 1] += 1;
          }
          break;
        }
        case "remove_node": {
          var {
            path: _op
          } = operation;
          if (Path.equals(_op, p3) || Path.isAncestor(_op, p3)) {
            return null;
          } else if (Path.endsBefore(_op, p3)) {
            p3[_op.length - 1] -= 1;
          }
          break;
        }
        case "merge_node": {
          var {
            path: _op2,
            position: position4
          } = operation;
          if (Path.equals(_op2, p3) || Path.endsBefore(_op2, p3)) {
            p3[_op2.length - 1] -= 1;
          } else if (Path.isAncestor(_op2, p3)) {
            p3[_op2.length - 1] -= 1;
            p3[_op2.length] += position4;
          }
          break;
        }
        case "split_node": {
          var {
            path: _op3,
            position: _position
          } = operation;
          if (Path.equals(_op3, p3)) {
            if (affinity === "forward") {
              p3[p3.length - 1] += 1;
            } else if (affinity === "backward")
              ;
            else {
              return null;
            }
          } else if (Path.endsBefore(_op3, p3)) {
            p3[_op3.length - 1] += 1;
          } else if (Path.isAncestor(_op3, p3) && path4[_op3.length] >= _position) {
            p3[_op3.length - 1] += 1;
            p3[_op3.length] -= _position;
          }
          break;
        }
        case "move_node": {
          var {
            path: _op4,
            newPath: onp
          } = operation;
          if (Path.equals(_op4, onp)) {
            return p3;
          }
          if (Path.isAncestor(_op4, p3) || Path.equals(_op4, p3)) {
            var copy2 = onp.slice();
            if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {
              copy2[_op4.length - 1] -= 1;
            }
            return copy2.concat(p3.slice(_op4.length));
          } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p3) || Path.equals(onp, p3))) {
            if (Path.endsBefore(_op4, p3)) {
              p3[_op4.length - 1] -= 1;
            } else {
              p3[_op4.length - 1] += 1;
            }
          } else if (Path.endsBefore(onp, p3) || Path.equals(onp, p3) || Path.isAncestor(onp, p3)) {
            if (Path.endsBefore(_op4, p3)) {
              p3[_op4.length - 1] -= 1;
            }
            p3[onp.length - 1] += 1;
          } else if (Path.endsBefore(_op4, p3)) {
            if (Path.equals(onp, p3)) {
              p3[onp.length - 1] += 1;
            }
            p3[_op4.length - 1] -= 1;
          }
          break;
        }
      }
      return p3;
    }
  };
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys$e(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$e(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$e(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$e(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var applyToDraft = (editor, selection, op) => {
    switch (op.type) {
      case "insert_node": {
        var {
          path: path4,
          node: node5
        } = op;
        var parent3 = Node2.parent(editor, path4);
        var index2 = path4[path4.length - 1];
        if (index2 > parent3.children.length) {
          throw new Error('Cannot apply an "insert_node" operation at path ['.concat(path4, "] because the destination is past the end of the node."));
        }
        parent3.children.splice(index2, 0, node5);
        if (selection) {
          for (var [point6, key] of Range.points(selection)) {
            selection[key] = Point.transform(point6, op);
          }
        }
        break;
      }
      case "insert_text": {
        var {
          path: _path,
          offset: offset3,
          text: text4
        } = op;
        if (text4.length === 0)
          break;
        var _node = Node2.leaf(editor, _path);
        var before3 = _node.text.slice(0, offset3);
        var after3 = _node.text.slice(offset3);
        _node.text = before3 + text4 + after3;
        if (selection) {
          for (var [_point, _key] of Range.points(selection)) {
            selection[_key] = Point.transform(_point, op);
          }
        }
        break;
      }
      case "merge_node": {
        var {
          path: _path2
        } = op;
        var _node2 = Node2.get(editor, _path2);
        var prevPath = Path.previous(_path2);
        var prev2 = Node2.get(editor, prevPath);
        var _parent = Node2.parent(editor, _path2);
        var _index = _path2[_path2.length - 1];
        if (Text2.isText(_node2) && Text2.isText(prev2)) {
          prev2.text += _node2.text;
        } else if (!Text2.isText(_node2) && !Text2.isText(prev2)) {
          prev2.children.push(..._node2.children);
        } else {
          throw new Error('Cannot apply a "merge_node" operation at path ['.concat(_path2, "] to nodes of different interfaces: ").concat(Scrubber.stringify(_node2), " ").concat(Scrubber.stringify(prev2)));
        }
        _parent.children.splice(_index, 1);
        if (selection) {
          for (var [_point2, _key2] of Range.points(selection)) {
            selection[_key2] = Point.transform(_point2, op);
          }
        }
        break;
      }
      case "move_node": {
        var {
          path: _path3,
          newPath
        } = op;
        if (Path.isAncestor(_path3, newPath)) {
          throw new Error("Cannot move a path [".concat(_path3, "] to new path [").concat(newPath, "] because the destination is inside itself."));
        }
        var _node3 = Node2.get(editor, _path3);
        var _parent2 = Node2.parent(editor, _path3);
        var _index2 = _path3[_path3.length - 1];
        _parent2.children.splice(_index2, 1);
        var truePath = Path.transform(_path3, op);
        var newParent = Node2.get(editor, Path.parent(truePath));
        var newIndex = truePath[truePath.length - 1];
        newParent.children.splice(newIndex, 0, _node3);
        if (selection) {
          for (var [_point3, _key3] of Range.points(selection)) {
            selection[_key3] = Point.transform(_point3, op);
          }
        }
        break;
      }
      case "remove_node": {
        var {
          path: _path4
        } = op;
        var _index3 = _path4[_path4.length - 1];
        var _parent3 = Node2.parent(editor, _path4);
        _parent3.children.splice(_index3, 1);
        if (selection) {
          for (var [_point4, _key4] of Range.points(selection)) {
            var result = Point.transform(_point4, op);
            if (selection != null && result != null) {
              selection[_key4] = result;
            } else {
              var _prev = void 0;
              var next4 = void 0;
              for (var [n6, p3] of Node2.texts(editor)) {
                if (Path.compare(p3, _path4) === -1) {
                  _prev = [n6, p3];
                } else {
                  next4 = [n6, p3];
                  break;
                }
              }
              var preferNext = false;
              if (_prev && next4) {
                if (Path.equals(next4[1], _path4)) {
                  preferNext = !Path.hasPrevious(next4[1]);
                } else {
                  preferNext = Path.common(_prev[1], _path4).length < Path.common(next4[1], _path4).length;
                }
              }
              if (_prev && !preferNext) {
                _point4.path = _prev[1];
                _point4.offset = _prev[0].text.length;
              } else if (next4) {
                _point4.path = next4[1];
                _point4.offset = 0;
              } else {
                selection = null;
              }
            }
          }
        }
        break;
      }
      case "remove_text": {
        var {
          path: _path5,
          offset: _offset,
          text: _text
        } = op;
        if (_text.length === 0)
          break;
        var _node4 = Node2.leaf(editor, _path5);
        var _before = _node4.text.slice(0, _offset);
        var _after = _node4.text.slice(_offset + _text.length);
        _node4.text = _before + _after;
        if (selection) {
          for (var [_point5, _key5] of Range.points(selection)) {
            selection[_key5] = Point.transform(_point5, op);
          }
        }
        break;
      }
      case "set_node": {
        var {
          path: _path6,
          properties,
          newProperties
        } = op;
        if (_path6.length === 0) {
          throw new Error("Cannot set properties on the root node!");
        }
        var _node5 = Node2.get(editor, _path6);
        for (var _key6 in newProperties) {
          if (_key6 === "children" || _key6 === "text") {
            throw new Error('Cannot set the "'.concat(_key6, '" property of nodes!'));
          }
          var value = newProperties[_key6];
          if (value == null) {
            delete _node5[_key6];
          } else {
            _node5[_key6] = value;
          }
        }
        for (var _key7 in properties) {
          if (!newProperties.hasOwnProperty(_key7)) {
            delete _node5[_key7];
          }
        }
        break;
      }
      case "set_selection": {
        var {
          newProperties: _newProperties
        } = op;
        if (_newProperties == null) {
          selection = _newProperties;
        } else {
          if (selection == null) {
            if (!Range.isRange(_newProperties)) {
              throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(Scrubber.stringify(_newProperties), " when there is no current selection."));
            }
            selection = _objectSpread$e({}, _newProperties);
          }
          for (var _key8 in _newProperties) {
            var _value = _newProperties[_key8];
            if (_value == null) {
              if (_key8 === "anchor" || _key8 === "focus") {
                throw new Error('Cannot remove the "'.concat(_key8, '" selection property'));
              }
              delete selection[_key8];
            } else {
              selection[_key8] = _value;
            }
          }
        }
        break;
      }
      case "split_node": {
        var {
          path: _path7,
          position: position4,
          properties: _properties
        } = op;
        if (_path7.length === 0) {
          throw new Error('Cannot apply a "split_node" operation at path ['.concat(_path7, "] because the root node cannot be split."));
        }
        var _node6 = Node2.get(editor, _path7);
        var _parent4 = Node2.parent(editor, _path7);
        var _index4 = _path7[_path7.length - 1];
        var newNode;
        if (Text2.isText(_node6)) {
          var _before2 = _node6.text.slice(0, position4);
          var _after2 = _node6.text.slice(position4);
          _node6.text = _before2;
          newNode = _objectSpread$e(_objectSpread$e({}, _properties), {}, {
            text: _after2
          });
        } else {
          var _before3 = _node6.children.slice(0, position4);
          var _after3 = _node6.children.slice(position4);
          _node6.children = _before3;
          newNode = _objectSpread$e(_objectSpread$e({}, _properties), {}, {
            children: _after3
          });
        }
        _parent4.children.splice(_index4 + 1, 0, newNode);
        if (selection) {
          for (var [_point6, _key9] of Range.points(selection)) {
            selection[_key9] = Point.transform(_point6, op);
          }
        }
        break;
      }
    }
    return selection;
  };
  var GeneralTransforms = {
    transform(editor, op) {
      editor.children = ln(editor.children);
      var selection = editor.selection && ln(editor.selection);
      try {
        selection = applyToDraft(editor, selection, op);
      } finally {
        editor.children = dn(editor.children);
        if (selection) {
          editor.selection = r(selection) ? dn(selection) : selection;
        } else {
          editor.selection = null;
        }
      }
    }
  };
  var NodeTransforms = {
    insertNodes(editor, nodes2, options) {
      editor.insertNodes(nodes2, options);
    },
    liftNodes(editor, options) {
      editor.liftNodes(options);
    },
    mergeNodes(editor, options) {
      editor.mergeNodes(options);
    },
    moveNodes(editor, options) {
      editor.moveNodes(options);
    },
    removeNodes(editor, options) {
      editor.removeNodes(options);
    },
    setNodes(editor, props, options) {
      editor.setNodes(props, options);
    },
    splitNodes(editor, options) {
      editor.splitNodes(options);
    },
    unsetNodes(editor, props, options) {
      editor.unsetNodes(props, options);
    },
    unwrapNodes(editor, options) {
      editor.unwrapNodes(options);
    },
    wrapNodes(editor, element2, options) {
      editor.wrapNodes(element2, options);
    }
  };
  var SelectionTransforms = {
    collapse(editor, options) {
      editor.collapse(options);
    },
    deselect(editor) {
      editor.deselect();
    },
    move(editor, options) {
      editor.move(options);
    },
    select(editor, target) {
      editor.select(target);
    },
    setPoint(editor, props, options) {
      editor.setPoint(props, options);
    },
    setSelection(editor, props) {
      editor.setSelection(props);
    }
  };
  var isDeepEqual = (node5, another) => {
    for (var key in node5) {
      var a3 = node5[key];
      var b4 = another[key];
      if (isPlainObject2(a3) && isPlainObject2(b4)) {
        if (!isDeepEqual(a3, b4))
          return false;
      } else if (Array.isArray(a3) && Array.isArray(b4)) {
        if (a3.length !== b4.length)
          return false;
        for (var i4 = 0; i4 < a3.length; i4++) {
          if (a3[i4] !== b4[i4])
            return false;
        }
      } else if (a3 !== b4) {
        return false;
      }
    }
    for (var _key in another) {
      if (node5[_key] === void 0 && another[_key] !== void 0) {
        return false;
      }
    }
    return true;
  };
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i4;
    for (i4 = 0; i4 < sourceKeys.length; i4++) {
      key = sourceKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose2(source, excluded);
    var key, i4;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
        key = sourceSymbolKeys[i4];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var _excluded$4 = ["anchor", "focus"];
  function ownKeys$d(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$d(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$d(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$d(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var Range = {
    edges(range2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        reverse = false
      } = options;
      var {
        anchor: anchor2,
        focus
      } = range2;
      return Range.isBackward(range2) === reverse ? [anchor2, focus] : [focus, anchor2];
    },
    end(range2) {
      var [, end2] = Range.edges(range2);
      return end2;
    },
    equals(range2, another) {
      return Point.equals(range2.anchor, another.anchor) && Point.equals(range2.focus, another.focus);
    },
    includes(range2, target) {
      if (Range.isRange(target)) {
        if (Range.includes(range2, target.anchor) || Range.includes(range2, target.focus)) {
          return true;
        }
        var [rs, re2] = Range.edges(range2);
        var [ts, te] = Range.edges(target);
        return Point.isBefore(rs, ts) && Point.isAfter(re2, te);
      }
      var [start2, end2] = Range.edges(range2);
      var isAfterStart = false;
      var isBeforeEnd = false;
      if (Point.isPoint(target)) {
        isAfterStart = Point.compare(target, start2) >= 0;
        isBeforeEnd = Point.compare(target, end2) <= 0;
      } else {
        isAfterStart = Path.compare(target, start2.path) >= 0;
        isBeforeEnd = Path.compare(target, end2.path) <= 0;
      }
      return isAfterStart && isBeforeEnd;
    },
    intersection(range2, another) {
      var rest = _objectWithoutProperties(range2, _excluded$4);
      var [s1, e1] = Range.edges(range2);
      var [s22, e22] = Range.edges(another);
      var start2 = Point.isBefore(s1, s22) ? s22 : s1;
      var end2 = Point.isBefore(e1, e22) ? e1 : e22;
      if (Point.isBefore(end2, start2)) {
        return null;
      } else {
        return _objectSpread$d({
          anchor: start2,
          focus: end2
        }, rest);
      }
    },
    isBackward(range2) {
      var {
        anchor: anchor2,
        focus
      } = range2;
      return Point.isAfter(anchor2, focus);
    },
    isCollapsed(range2) {
      var {
        anchor: anchor2,
        focus
      } = range2;
      return Point.equals(anchor2, focus);
    },
    isExpanded(range2) {
      return !Range.isCollapsed(range2);
    },
    isForward(range2) {
      return !Range.isBackward(range2);
    },
    isRange(value) {
      return isPlainObject2(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);
    },
    *points(range2) {
      yield [range2.anchor, "anchor"];
      yield [range2.focus, "focus"];
    },
    start(range2) {
      var [start2] = Range.edges(range2);
      return start2;
    },
    transform(range2, op) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return fn(range2, (r3) => {
        if (r3 === null) {
          return null;
        }
        var {
          affinity = "inward"
        } = options;
        var affinityAnchor;
        var affinityFocus;
        if (affinity === "inward") {
          var isCollapsed = Range.isCollapsed(r3);
          if (Range.isForward(r3)) {
            affinityAnchor = "forward";
            affinityFocus = isCollapsed ? affinityAnchor : "backward";
          } else {
            affinityAnchor = "backward";
            affinityFocus = isCollapsed ? affinityAnchor : "forward";
          }
        } else if (affinity === "outward") {
          if (Range.isForward(r3)) {
            affinityAnchor = "backward";
            affinityFocus = "forward";
          } else {
            affinityAnchor = "forward";
            affinityFocus = "backward";
          }
        } else {
          affinityAnchor = affinity;
          affinityFocus = affinity;
        }
        var anchor2 = Point.transform(r3.anchor, op, {
          affinity: affinityAnchor
        });
        var focus = Point.transform(r3.focus, op, {
          affinity: affinityFocus
        });
        if (!anchor2 || !focus) {
          return null;
        }
        r3.anchor = anchor2;
        r3.focus = focus;
      });
    }
  };
  var isElement2 = (value) => {
    return isPlainObject2(value) && Node2.isNodeList(value.children) && !Editor.isEditor(value);
  };
  var Element2 = {
    isAncestor(value) {
      return isPlainObject2(value) && Node2.isNodeList(value.children);
    },
    isElement: isElement2,
    isElementList(value) {
      return Array.isArray(value) && value.every((val) => Element2.isElement(val));
    },
    isElementProps(props) {
      return props.children !== void 0;
    },
    isElementType: function isElementType(value, elementVal) {
      var elementKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "type";
      return isElement2(value) && value[elementKey] === elementVal;
    },
    matches(element2, props) {
      for (var key in props) {
        if (key === "children") {
          continue;
        }
        if (element2[key] !== props[key]) {
          return false;
        }
      }
      return true;
    }
  };
  var _excluded$3 = ["children"];
  var _excluded2$3 = ["text"];
  var IS_NODE_LIST_CACHE = /* @__PURE__ */ new WeakMap();
  var Node2 = {
    ancestor(root3, path4) {
      var node5 = Node2.get(root3, path4);
      if (Text2.isText(node5)) {
        throw new Error("Cannot get the ancestor node at path [".concat(path4, "] because it refers to a text node instead: ").concat(Scrubber.stringify(node5)));
      }
      return node5;
    },
    *ancestors(root3, path4) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      for (var p3 of Path.ancestors(path4, options)) {
        var n6 = Node2.ancestor(root3, p3);
        var entry = [n6, p3];
        yield entry;
      }
    },
    child(root3, index2) {
      if (Text2.isText(root3)) {
        throw new Error("Cannot get the child of a text node: ".concat(Scrubber.stringify(root3)));
      }
      var c3 = root3.children[index2];
      if (c3 == null) {
        throw new Error("Cannot get child at index `".concat(index2, "` in node: ").concat(Scrubber.stringify(root3)));
      }
      return c3;
    },
    *children(root3, path4) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var {
        reverse = false
      } = options;
      var ancestor = Node2.ancestor(root3, path4);
      var {
        children
      } = ancestor;
      var index2 = reverse ? children.length - 1 : 0;
      while (reverse ? index2 >= 0 : index2 < children.length) {
        var child = Node2.child(ancestor, index2);
        var childPath = path4.concat(index2);
        yield [child, childPath];
        index2 = reverse ? index2 - 1 : index2 + 1;
      }
    },
    common(root3, path4, another) {
      var p3 = Path.common(path4, another);
      var n6 = Node2.get(root3, p3);
      return [n6, p3];
    },
    descendant(root3, path4) {
      var node5 = Node2.get(root3, path4);
      if (Editor.isEditor(node5)) {
        throw new Error("Cannot get the descendant node at path [".concat(path4, "] because it refers to the root editor node instead: ").concat(Scrubber.stringify(node5)));
      }
      return node5;
    },
    *descendants(root3) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      for (var [node5, path4] of Node2.nodes(root3, options)) {
        if (path4.length !== 0) {
          yield [node5, path4];
        }
      }
    },
    *elements(root3) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      for (var [node5, path4] of Node2.nodes(root3, options)) {
        if (Element2.isElement(node5)) {
          yield [node5, path4];
        }
      }
    },
    extractProps(node5) {
      if (Element2.isAncestor(node5)) {
        var properties = _objectWithoutProperties(node5, _excluded$3);
        return properties;
      } else {
        var properties = _objectWithoutProperties(node5, _excluded2$3);
        return properties;
      }
    },
    first(root3, path4) {
      var p3 = path4.slice();
      var n6 = Node2.get(root3, p3);
      while (n6) {
        if (Text2.isText(n6) || n6.children.length === 0) {
          break;
        } else {
          n6 = n6.children[0];
          p3.push(0);
        }
      }
      return [n6, p3];
    },
    fragment(root3, range2) {
      if (Text2.isText(root3)) {
        throw new Error("Cannot get a fragment starting from a root text node: ".concat(Scrubber.stringify(root3)));
      }
      var newRoot = fn({
        children: root3.children
      }, (r3) => {
        var [start2, end2] = Range.edges(range2);
        var nodeEntries = Node2.nodes(r3, {
          reverse: true,
          pass: (_ref) => {
            var [, path5] = _ref;
            return !Range.includes(range2, path5);
          }
        });
        for (var [, path4] of nodeEntries) {
          if (!Range.includes(range2, path4)) {
            var parent3 = Node2.parent(r3, path4);
            var index2 = path4[path4.length - 1];
            parent3.children.splice(index2, 1);
          }
          if (Path.equals(path4, end2.path)) {
            var leaf3 = Node2.leaf(r3, path4);
            leaf3.text = leaf3.text.slice(0, end2.offset);
          }
          if (Path.equals(path4, start2.path)) {
            var _leaf = Node2.leaf(r3, path4);
            _leaf.text = _leaf.text.slice(start2.offset);
          }
        }
        if (Editor.isEditor(r3)) {
          r3.selection = null;
        }
      });
      return newRoot.children;
    },
    get(root3, path4) {
      var node5 = root3;
      for (var i4 = 0; i4 < path4.length; i4++) {
        var p3 = path4[i4];
        if (Text2.isText(node5) || !node5.children[p3]) {
          throw new Error("Cannot find a descendant at path [".concat(path4, "] in node: ").concat(Scrubber.stringify(root3)));
        }
        node5 = node5.children[p3];
      }
      return node5;
    },
    has(root3, path4) {
      var node5 = root3;
      for (var i4 = 0; i4 < path4.length; i4++) {
        var p3 = path4[i4];
        if (Text2.isText(node5) || !node5.children[p3]) {
          return false;
        }
        node5 = node5.children[p3];
      }
      return true;
    },
    isNode(value) {
      return Text2.isText(value) || Element2.isElement(value) || Editor.isEditor(value);
    },
    isNodeList(value) {
      if (!Array.isArray(value)) {
        return false;
      }
      var cachedResult = IS_NODE_LIST_CACHE.get(value);
      if (cachedResult !== void 0) {
        return cachedResult;
      }
      var isNodeList = value.every((val) => Node2.isNode(val));
      IS_NODE_LIST_CACHE.set(value, isNodeList);
      return isNodeList;
    },
    last(root3, path4) {
      var p3 = path4.slice();
      var n6 = Node2.get(root3, p3);
      while (n6) {
        if (Text2.isText(n6) || n6.children.length === 0) {
          break;
        } else {
          var i4 = n6.children.length - 1;
          n6 = n6.children[i4];
          p3.push(i4);
        }
      }
      return [n6, p3];
    },
    leaf(root3, path4) {
      var node5 = Node2.get(root3, path4);
      if (!Text2.isText(node5)) {
        throw new Error("Cannot get the leaf node at path [".concat(path4, "] because it refers to a non-leaf node: ").concat(Scrubber.stringify(node5)));
      }
      return node5;
    },
    *levels(root3, path4) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      for (var p3 of Path.levels(path4, options)) {
        var n6 = Node2.get(root3, p3);
        yield [n6, p3];
      }
    },
    matches(node5, props) {
      return Element2.isElement(node5) && Element2.isElementProps(props) && Element2.matches(node5, props) || Text2.isText(node5) && Text2.isTextProps(props) && Text2.matches(node5, props);
    },
    *nodes(root3) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        pass,
        reverse = false
      } = options;
      var {
        from: from2 = [],
        to
      } = options;
      var visited = /* @__PURE__ */ new Set();
      var p3 = [];
      var n6 = root3;
      while (true) {
        if (to && (reverse ? Path.isBefore(p3, to) : Path.isAfter(p3, to))) {
          break;
        }
        if (!visited.has(n6)) {
          yield [n6, p3];
        }
        if (!visited.has(n6) && !Text2.isText(n6) && n6.children.length !== 0 && (pass == null || pass([n6, p3]) === false)) {
          visited.add(n6);
          var nextIndex = reverse ? n6.children.length - 1 : 0;
          if (Path.isAncestor(p3, from2)) {
            nextIndex = from2[p3.length];
          }
          p3 = p3.concat(nextIndex);
          n6 = Node2.get(root3, p3);
          continue;
        }
        if (p3.length === 0) {
          break;
        }
        if (!reverse) {
          var newPath = Path.next(p3);
          if (Node2.has(root3, newPath)) {
            p3 = newPath;
            n6 = Node2.get(root3, p3);
            continue;
          }
        }
        if (reverse && p3[p3.length - 1] !== 0) {
          var _newPath = Path.previous(p3);
          p3 = _newPath;
          n6 = Node2.get(root3, p3);
          continue;
        }
        p3 = Path.parent(p3);
        n6 = Node2.get(root3, p3);
        visited.add(n6);
      }
    },
    parent(root3, path4) {
      var parentPath = Path.parent(path4);
      var p3 = Node2.get(root3, parentPath);
      if (Text2.isText(p3)) {
        throw new Error("Cannot get the parent of path [".concat(path4, "] because it does not exist in the root."));
      }
      return p3;
    },
    string(node5) {
      if (Text2.isText(node5)) {
        return node5.text;
      } else {
        return node5.children.map(Node2.string).join("");
      }
    },
    *texts(root3) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      for (var [node5, path4] of Node2.nodes(root3, options)) {
        if (Text2.isText(node5)) {
          yield [node5, path4];
        }
      }
    }
  };
  function ownKeys$c(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$c(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$c(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$c(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var Operation = {
    isNodeOperation(value) {
      return Operation.isOperation(value) && value.type.endsWith("_node");
    },
    isOperation(value) {
      if (!isPlainObject2(value)) {
        return false;
      }
      switch (value.type) {
        case "insert_node":
          return Path.isPath(value.path) && Node2.isNode(value.node);
        case "insert_text":
          return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
        case "merge_node":
          return typeof value.position === "number" && Path.isPath(value.path) && isPlainObject2(value.properties);
        case "move_node":
          return Path.isPath(value.path) && Path.isPath(value.newPath);
        case "remove_node":
          return Path.isPath(value.path) && Node2.isNode(value.node);
        case "remove_text":
          return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
        case "set_node":
          return Path.isPath(value.path) && isPlainObject2(value.properties) && isPlainObject2(value.newProperties);
        case "set_selection":
          return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || isPlainObject2(value.properties) && isPlainObject2(value.newProperties);
        case "split_node":
          return Path.isPath(value.path) && typeof value.position === "number" && isPlainObject2(value.properties);
        default:
          return false;
      }
    },
    isOperationList(value) {
      return Array.isArray(value) && value.every((val) => Operation.isOperation(val));
    },
    isSelectionOperation(value) {
      return Operation.isOperation(value) && value.type.endsWith("_selection");
    },
    isTextOperation(value) {
      return Operation.isOperation(value) && value.type.endsWith("_text");
    },
    inverse(op) {
      switch (op.type) {
        case "insert_node": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "remove_node"
          });
        }
        case "insert_text": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "remove_text"
          });
        }
        case "merge_node": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "split_node",
            path: Path.previous(op.path)
          });
        }
        case "move_node": {
          var {
            newPath,
            path: path4
          } = op;
          if (Path.equals(newPath, path4)) {
            return op;
          }
          if (Path.isSibling(path4, newPath)) {
            return _objectSpread$c(_objectSpread$c({}, op), {}, {
              path: newPath,
              newPath: path4
            });
          }
          var inversePath = Path.transform(path4, op);
          var inverseNewPath = Path.transform(Path.next(path4), op);
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            path: inversePath,
            newPath: inverseNewPath
          });
        }
        case "remove_node": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "insert_node"
          });
        }
        case "remove_text": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "insert_text"
          });
        }
        case "set_node": {
          var {
            properties,
            newProperties
          } = op;
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            properties: newProperties,
            newProperties: properties
          });
        }
        case "set_selection": {
          var {
            properties: _properties,
            newProperties: _newProperties
          } = op;
          if (_properties == null) {
            return _objectSpread$c(_objectSpread$c({}, op), {}, {
              properties: _newProperties,
              newProperties: null
            });
          } else if (_newProperties == null) {
            return _objectSpread$c(_objectSpread$c({}, op), {}, {
              properties: null,
              newProperties: _properties
            });
          } else {
            return _objectSpread$c(_objectSpread$c({}, op), {}, {
              properties: _newProperties,
              newProperties: _properties
            });
          }
        }
        case "split_node": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "merge_node",
            path: Path.next(op.path)
          });
        }
      }
    }
  };
  var IS_EDITOR_CACHE = /* @__PURE__ */ new WeakMap();
  var isEditor = (value) => {
    var cachedIsEditor = IS_EDITOR_CACHE.get(value);
    if (cachedIsEditor !== void 0) {
      return cachedIsEditor;
    }
    if (!isPlainObject2(value)) {
      return false;
    }
    var isEditor2 = typeof value.addMark === "function" && typeof value.apply === "function" && typeof value.deleteFragment === "function" && typeof value.insertBreak === "function" && typeof value.insertSoftBreak === "function" && typeof value.insertFragment === "function" && typeof value.insertNode === "function" && typeof value.insertText === "function" && typeof value.isElementReadOnly === "function" && typeof value.isInline === "function" && typeof value.isSelectable === "function" && typeof value.isVoid === "function" && typeof value.normalizeNode === "function" && typeof value.onChange === "function" && typeof value.removeMark === "function" && typeof value.getDirtyPaths === "function" && (value.marks === null || isPlainObject2(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node2.isNodeList(value.children) && Operation.isOperationList(value.operations);
    IS_EDITOR_CACHE.set(value, isEditor2);
    return isEditor2;
  };
  var Editor = {
    above(editor, options) {
      return editor.above(options);
    },
    addMark(editor, key, value) {
      editor.addMark(key, value);
    },
    after(editor, at, options) {
      return editor.after(at, options);
    },
    before(editor, at, options) {
      return editor.before(at, options);
    },
    deleteBackward(editor) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        unit = "character"
      } = options;
      editor.deleteBackward(unit);
    },
    deleteForward(editor) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        unit = "character"
      } = options;
      editor.deleteForward(unit);
    },
    deleteFragment(editor, options) {
      editor.deleteFragment(options);
    },
    edges(editor, at) {
      return editor.edges(at);
    },
    elementReadOnly(editor) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return editor.elementReadOnly(options);
    },
    end(editor, at) {
      return editor.end(at);
    },
    first(editor, at) {
      return editor.first(at);
    },
    fragment(editor, at) {
      return editor.fragment(at);
    },
    hasBlocks(editor, element2) {
      return editor.hasBlocks(element2);
    },
    hasInlines(editor, element2) {
      return editor.hasInlines(element2);
    },
    hasPath(editor, path4) {
      return editor.hasPath(path4);
    },
    hasTexts(editor, element2) {
      return editor.hasTexts(element2);
    },
    insertBreak(editor) {
      editor.insertBreak();
    },
    insertFragment(editor, fragment2, options) {
      editor.insertFragment(fragment2, options);
    },
    insertNode(editor, node5) {
      editor.insertNode(node5);
    },
    insertSoftBreak(editor) {
      editor.insertSoftBreak();
    },
    insertText(editor, text4) {
      editor.insertText(text4);
    },
    isBlock(editor, value) {
      return editor.isBlock(value);
    },
    isEdge(editor, point6, at) {
      return editor.isEdge(point6, at);
    },
    isEditor(value) {
      return isEditor(value);
    },
    isElementReadOnly(editor, element2) {
      return editor.isElementReadOnly(element2);
    },
    isEmpty(editor, element2) {
      return editor.isEmpty(element2);
    },
    isEnd(editor, point6, at) {
      return editor.isEnd(point6, at);
    },
    isInline(editor, value) {
      return editor.isInline(value);
    },
    isNormalizing(editor) {
      return editor.isNormalizing();
    },
    isSelectable(editor, value) {
      return editor.isSelectable(value);
    },
    isStart(editor, point6, at) {
      return editor.isStart(point6, at);
    },
    isVoid(editor, value) {
      return editor.isVoid(value);
    },
    last(editor, at) {
      return editor.last(at);
    },
    leaf(editor, at, options) {
      return editor.leaf(at, options);
    },
    levels(editor, options) {
      return editor.levels(options);
    },
    marks(editor) {
      return editor.getMarks();
    },
    next(editor, options) {
      return editor.next(options);
    },
    node(editor, at, options) {
      return editor.node(at, options);
    },
    nodes(editor, options) {
      return editor.nodes(options);
    },
    normalize(editor, options) {
      editor.normalize(options);
    },
    parent(editor, at, options) {
      return editor.parent(at, options);
    },
    path(editor, at, options) {
      return editor.path(at, options);
    },
    pathRef(editor, path4, options) {
      return editor.pathRef(path4, options);
    },
    pathRefs(editor) {
      return editor.pathRefs();
    },
    point(editor, at, options) {
      return editor.point(at, options);
    },
    pointRef(editor, point6, options) {
      return editor.pointRef(point6, options);
    },
    pointRefs(editor) {
      return editor.pointRefs();
    },
    positions(editor, options) {
      return editor.positions(options);
    },
    previous(editor, options) {
      return editor.previous(options);
    },
    range(editor, at, to) {
      return editor.range(at, to);
    },
    rangeRef(editor, range2, options) {
      return editor.rangeRef(range2, options);
    },
    rangeRefs(editor) {
      return editor.rangeRefs();
    },
    removeMark(editor, key) {
      editor.removeMark(key);
    },
    setNormalizing(editor, isNormalizing2) {
      editor.setNormalizing(isNormalizing2);
    },
    start(editor, at) {
      return editor.start(at);
    },
    string(editor, at, options) {
      return editor.string(at, options);
    },
    unhangRange(editor, range2, options) {
      return editor.unhangRange(range2, options);
    },
    void(editor, options) {
      return editor.void(options);
    },
    withoutNormalizing(editor, fn2) {
      editor.withoutNormalizing(fn2);
    }
  };
  var Span = {
    isSpan(value) {
      return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);
    }
  };
  function ownKeys$b(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$b(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$b(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$b(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var Point = {
    compare(point6, another) {
      var result = Path.compare(point6.path, another.path);
      if (result === 0) {
        if (point6.offset < another.offset)
          return -1;
        if (point6.offset > another.offset)
          return 1;
        return 0;
      }
      return result;
    },
    isAfter(point6, another) {
      return Point.compare(point6, another) === 1;
    },
    isBefore(point6, another) {
      return Point.compare(point6, another) === -1;
    },
    equals(point6, another) {
      return point6.offset === another.offset && Path.equals(point6.path, another.path);
    },
    isPoint(value) {
      return isPlainObject2(value) && typeof value.offset === "number" && Path.isPath(value.path);
    },
    transform(point6, op) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return fn(point6, (p3) => {
        if (p3 === null) {
          return null;
        }
        var {
          affinity = "forward"
        } = options;
        var {
          path: path4,
          offset: offset3
        } = p3;
        switch (op.type) {
          case "insert_node":
          case "move_node": {
            p3.path = Path.transform(path4, op, options);
            break;
          }
          case "insert_text": {
            if (Path.equals(op.path, path4) && (op.offset < offset3 || op.offset === offset3 && affinity === "forward")) {
              p3.offset += op.text.length;
            }
            break;
          }
          case "merge_node": {
            if (Path.equals(op.path, path4)) {
              p3.offset += op.position;
            }
            p3.path = Path.transform(path4, op, options);
            break;
          }
          case "remove_text": {
            if (Path.equals(op.path, path4) && op.offset <= offset3) {
              p3.offset -= Math.min(offset3 - op.offset, op.text.length);
            }
            break;
          }
          case "remove_node": {
            if (Path.equals(op.path, path4) || Path.isAncestor(op.path, path4)) {
              return null;
            }
            p3.path = Path.transform(path4, op, options);
            break;
          }
          case "split_node": {
            if (Path.equals(op.path, path4)) {
              if (op.position === offset3 && affinity == null) {
                return null;
              } else if (op.position < offset3 || op.position === offset3 && affinity === "forward") {
                p3.offset -= op.position;
                p3.path = Path.transform(path4, op, _objectSpread$b(_objectSpread$b({}, options), {}, {
                  affinity: "forward"
                }));
              }
            } else {
              p3.path = Path.transform(path4, op, options);
            }
            break;
          }
        }
      });
    }
  };
  var _scrubber = void 0;
  var Scrubber = {
    setScrubber(scrubber) {
      _scrubber = scrubber;
    },
    stringify(value) {
      return JSON.stringify(value, _scrubber);
    }
  };
  var _excluded$2 = ["text"];
  var _excluded2$2 = ["anchor", "focus"];
  function ownKeys$a(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$a(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$a(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$a(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var Text2 = {
    equals(text4, another) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var {
        loose = false
      } = options;
      function omitText(obj) {
        var rest = _objectWithoutProperties(obj, _excluded$2);
        return rest;
      }
      return isDeepEqual(loose ? omitText(text4) : text4, loose ? omitText(another) : another);
    },
    isText(value) {
      return isPlainObject2(value) && typeof value.text === "string";
    },
    isTextList(value) {
      return Array.isArray(value) && value.every((val) => Text2.isText(val));
    },
    isTextProps(props) {
      return props.text !== void 0;
    },
    matches(text4, props) {
      for (var key in props) {
        if (key === "text") {
          continue;
        }
        if (!text4.hasOwnProperty(key) || text4[key] !== props[key]) {
          return false;
        }
      }
      return true;
    },
    decorations(node5, decorations) {
      var leaves = [_objectSpread$a({}, node5)];
      for (var dec of decorations) {
        var rest = _objectWithoutProperties(dec, _excluded2$2);
        var [start2, end2] = Range.edges(dec);
        var next4 = [];
        var leafEnd = 0;
        var decorationStart = start2.offset;
        var decorationEnd = end2.offset;
        for (var leaf3 of leaves) {
          var {
            length: length2
          } = leaf3.text;
          var leafStart = leafEnd;
          leafEnd += length2;
          if (decorationStart <= leafStart && leafEnd <= decorationEnd) {
            Object.assign(leaf3, rest);
            next4.push(leaf3);
            continue;
          }
          if (decorationStart !== decorationEnd && (decorationStart === leafEnd || decorationEnd === leafStart) || decorationStart > leafEnd || decorationEnd < leafStart || decorationEnd === leafStart && leafStart !== 0) {
            next4.push(leaf3);
            continue;
          }
          var middle = leaf3;
          var before3 = void 0;
          var after3 = void 0;
          if (decorationEnd < leafEnd) {
            var off = decorationEnd - leafStart;
            after3 = _objectSpread$a(_objectSpread$a({}, middle), {}, {
              text: middle.text.slice(off)
            });
            middle = _objectSpread$a(_objectSpread$a({}, middle), {}, {
              text: middle.text.slice(0, off)
            });
          }
          if (decorationStart > leafStart) {
            var _off = decorationStart - leafStart;
            before3 = _objectSpread$a(_objectSpread$a({}, middle), {}, {
              text: middle.text.slice(0, _off)
            });
            middle = _objectSpread$a(_objectSpread$a({}, middle), {}, {
              text: middle.text.slice(_off)
            });
          }
          Object.assign(middle, rest);
          if (before3) {
            next4.push(before3);
          }
          next4.push(middle);
          if (after3) {
            next4.push(after3);
          }
        }
        leaves = next4;
      }
      return leaves;
    }
  };
  var getDefaultInsertLocation = (editor) => {
    if (editor.selection) {
      return editor.selection;
    } else if (editor.children.length > 0) {
      return Editor.end(editor, []);
    } else {
      return [0];
    }
  };
  var matchPath2 = (editor, path4) => {
    var [node5] = Editor.node(editor, path4);
    return (n6) => n6 === node5;
  };
  var getCharacterDistance = function getCharacterDistance2(str) {
    var isRTL2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var isLTR = !isRTL2;
    var codepoints = isRTL2 ? codepointsIteratorRTL(str) : str;
    var left = CodepointType.None;
    var right = CodepointType.None;
    var distance = 0;
    var gb11 = null;
    var gb12Or13 = null;
    for (var char2 of codepoints) {
      var code2 = char2.codePointAt(0);
      if (!code2)
        break;
      var type = getCodepointType(char2, code2);
      [left, right] = isLTR ? [right, type] : [type, left];
      if (intersects(left, CodepointType.ZWJ) && intersects(right, CodepointType.ExtPict)) {
        if (isLTR) {
          gb11 = endsWithEmojiZWJ(str.substring(0, distance));
        } else {
          gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance));
        }
        if (!gb11)
          break;
      }
      if (intersects(left, CodepointType.RI) && intersects(right, CodepointType.RI)) {
        if (gb12Or13 !== null) {
          gb12Or13 = !gb12Or13;
        } else {
          if (isLTR) {
            gb12Or13 = true;
          } else {
            gb12Or13 = endsWithOddNumberOfRIs(str.substring(0, str.length - distance));
          }
        }
        if (!gb12Or13)
          break;
      }
      if (left !== CodepointType.None && right !== CodepointType.None && isBoundaryPair(left, right)) {
        break;
      }
      distance += char2.length;
    }
    return distance || 1;
  };
  var SPACE = /\s/;
  var PUNCTUATION = /[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
  var CHAMELEON = /['\u2018\u2019]/;
  var getWordDistance = function getWordDistance2(text4) {
    var isRTL2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var dist = 0;
    var started = false;
    while (text4.length > 0) {
      var charDist = getCharacterDistance(text4, isRTL2);
      var [char2, remaining] = splitByCharacterDistance(text4, charDist, isRTL2);
      if (isWordCharacter(char2, remaining, isRTL2)) {
        started = true;
        dist += charDist;
      } else if (!started) {
        dist += charDist;
      } else {
        break;
      }
      text4 = remaining;
    }
    return dist;
  };
  var splitByCharacterDistance = (str, dist, isRTL2) => {
    if (isRTL2) {
      var at = str.length - dist;
      return [str.slice(at, str.length), str.slice(0, at)];
    }
    return [str.slice(0, dist), str.slice(dist)];
  };
  var isWordCharacter = function isWordCharacter2(char2, remaining) {
    var isRTL2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    if (SPACE.test(char2)) {
      return false;
    }
    if (CHAMELEON.test(char2)) {
      var charDist = getCharacterDistance(remaining, isRTL2);
      var [nextChar, nextRemaining] = splitByCharacterDistance(remaining, charDist, isRTL2);
      if (isWordCharacter2(nextChar, nextRemaining, isRTL2)) {
        return true;
      }
    }
    if (PUNCTUATION.test(char2)) {
      return false;
    }
    return true;
  };
  var codepointsIteratorRTL = function* codepointsIteratorRTL2(str) {
    var end2 = str.length - 1;
    for (var i4 = 0; i4 < str.length; i4++) {
      var char1 = str.charAt(end2 - i4);
      if (isLowSurrogate(char1.charCodeAt(0))) {
        var char2 = str.charAt(end2 - i4 - 1);
        if (isHighSurrogate(char2.charCodeAt(0))) {
          yield char2 + char1;
          i4++;
          continue;
        }
      }
      yield char1;
    }
  };
  var isHighSurrogate = (charCode) => {
    return charCode >= 55296 && charCode <= 56319;
  };
  var isLowSurrogate = (charCode) => {
    return charCode >= 56320 && charCode <= 57343;
  };
  var CodepointType;
  (function(CodepointType2) {
    CodepointType2[CodepointType2["None"] = 0] = "None";
    CodepointType2[CodepointType2["Extend"] = 1] = "Extend";
    CodepointType2[CodepointType2["ZWJ"] = 2] = "ZWJ";
    CodepointType2[CodepointType2["RI"] = 4] = "RI";
    CodepointType2[CodepointType2["Prepend"] = 8] = "Prepend";
    CodepointType2[CodepointType2["SpacingMark"] = 16] = "SpacingMark";
    CodepointType2[CodepointType2["L"] = 32] = "L";
    CodepointType2[CodepointType2["V"] = 64] = "V";
    CodepointType2[CodepointType2["T"] = 128] = "T";
    CodepointType2[CodepointType2["LV"] = 256] = "LV";
    CodepointType2[CodepointType2["LVT"] = 512] = "LVT";
    CodepointType2[CodepointType2["ExtPict"] = 1024] = "ExtPict";
    CodepointType2[CodepointType2["Any"] = 2048] = "Any";
  })(CodepointType || (CodepointType = {}));
  var reExtend = /^(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])$/;
  var rePrepend = /^(?:[\u0600-\u0605\u06DD\u070F\u0890\u0891\u08E2\u0D4E]|\uD804[\uDCBD\uDCCD\uDDC2\uDDC3]|\uD806[\uDD3F\uDD41\uDE3A\uDE84-\uDE89]|\uD807\uDD46)$/;
  var reSpacingMark = /^(?:[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0D02\u0D03\u0D3F\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D82\u0D83\u0DD0\u0DD1\u0DD8-\u0DDE\u0DF2\u0DF3\u0E33\u0EB3\u0F3E\u0F3F\u0F7F\u1031\u103B\u103C\u1056\u1057\u1084\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A6D-\u1A72\u1B04\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB1\uDCB2\uDCB9\uDCBB\uDCBC\uDCBE\uDCC1\uDDB0\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD31-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD66\uDD6D])$/;
  var reL = /^[\u1100-\u115F\uA960-\uA97C]$/;
  var reV = /^[\u1160-\u11A7\uD7B0-\uD7C6]$/;
  var reT = /^[\u11A8-\u11FF\uD7CB-\uD7FB]$/;
  var reLV = /^[\uAC00\uAC1C\uAC38\uAC54\uAC70\uAC8C\uACA8\uACC4\uACE0\uACFC\uAD18\uAD34\uAD50\uAD6C\uAD88\uADA4\uADC0\uADDC\uADF8\uAE14\uAE30\uAE4C\uAE68\uAE84\uAEA0\uAEBC\uAED8\uAEF4\uAF10\uAF2C\uAF48\uAF64\uAF80\uAF9C\uAFB8\uAFD4\uAFF0\uB00C\uB028\uB044\uB060\uB07C\uB098\uB0B4\uB0D0\uB0EC\uB108\uB124\uB140\uB15C\uB178\uB194\uB1B0\uB1CC\uB1E8\uB204\uB220\uB23C\uB258\uB274\uB290\uB2AC\uB2C8\uB2E4\uB300\uB31C\uB338\uB354\uB370\uB38C\uB3A8\uB3C4\uB3E0\uB3FC\uB418\uB434\uB450\uB46C\uB488\uB4A4\uB4C0\uB4DC\uB4F8\uB514\uB530\uB54C\uB568\uB584\uB5A0\uB5BC\uB5D8\uB5F4\uB610\uB62C\uB648\uB664\uB680\uB69C\uB6B8\uB6D4\uB6F0\uB70C\uB728\uB744\uB760\uB77C\uB798\uB7B4\uB7D0\uB7EC\uB808\uB824\uB840\uB85C\uB878\uB894\uB8B0\uB8CC\uB8E8\uB904\uB920\uB93C\uB958\uB974\uB990\uB9AC\uB9C8\uB9E4\uBA00\uBA1C\uBA38\uBA54\uBA70\uBA8C\uBAA8\uBAC4\uBAE0\uBAFC\uBB18\uBB34\uBB50\uBB6C\uBB88\uBBA4\uBBC0\uBBDC\uBBF8\uBC14\uBC30\uBC4C\uBC68\uBC84\uBCA0\uBCBC\uBCD8\uBCF4\uBD10\uBD2C\uBD48\uBD64\uBD80\uBD9C\uBDB8\uBDD4\uBDF0\uBE0C\uBE28\uBE44\uBE60\uBE7C\uBE98\uBEB4\uBED0\uBEEC\uBF08\uBF24\uBF40\uBF5C\uBF78\uBF94\uBFB0\uBFCC\uBFE8\uC004\uC020\uC03C\uC058\uC074\uC090\uC0AC\uC0C8\uC0E4\uC100\uC11C\uC138\uC154\uC170\uC18C\uC1A8\uC1C4\uC1E0\uC1FC\uC218\uC234\uC250\uC26C\uC288\uC2A4\uC2C0\uC2DC\uC2F8\uC314\uC330\uC34C\uC368\uC384\uC3A0\uC3BC\uC3D8\uC3F4\uC410\uC42C\uC448\uC464\uC480\uC49C\uC4B8\uC4D4\uC4F0\uC50C\uC528\uC544\uC560\uC57C\uC598\uC5B4\uC5D0\uC5EC\uC608\uC624\uC640\uC65C\uC678\uC694\uC6B0\uC6CC\uC6E8\uC704\uC720\uC73C\uC758\uC774\uC790\uC7AC\uC7C8\uC7E4\uC800\uC81C\uC838\uC854\uC870\uC88C\uC8A8\uC8C4\uC8E0\uC8FC\uC918\uC934\uC950\uC96C\uC988\uC9A4\uC9C0\uC9DC\uC9F8\uCA14\uCA30\uCA4C\uCA68\uCA84\uCAA0\uCABC\uCAD8\uCAF4\uCB10\uCB2C\uCB48\uCB64\uCB80\uCB9C\uCBB8\uCBD4\uCBF0\uCC0C\uCC28\uCC44\uCC60\uCC7C\uCC98\uCCB4\uCCD0\uCCEC\uCD08\uCD24\uCD40\uCD5C\uCD78\uCD94\uCDB0\uCDCC\uCDE8\uCE04\uCE20\uCE3C\uCE58\uCE74\uCE90\uCEAC\uCEC8\uCEE4\uCF00\uCF1C\uCF38\uCF54\uCF70\uCF8C\uCFA8\uCFC4\uCFE0\uCFFC\uD018\uD034\uD050\uD06C\uD088\uD0A4\uD0C0\uD0DC\uD0F8\uD114\uD130\uD14C\uD168\uD184\uD1A0\uD1BC\uD1D8\uD1F4\uD210\uD22C\uD248\uD264\uD280\uD29C\uD2B8\uD2D4\uD2F0\uD30C\uD328\uD344\uD360\uD37C\uD398\uD3B4\uD3D0\uD3EC\uD408\uD424\uD440\uD45C\uD478\uD494\uD4B0\uD4CC\uD4E8\uD504\uD520\uD53C\uD558\uD574\uD590\uD5AC\uD5C8\uD5E4\uD600\uD61C\uD638\uD654\uD670\uD68C\uD6A8\uD6C4\uD6E0\uD6FC\uD718\uD734\uD750\uD76C\uD788]$/;
  var reLVT = /^[\uAC01-\uAC1B\uAC1D-\uAC37\uAC39-\uAC53\uAC55-\uAC6F\uAC71-\uAC8B\uAC8D-\uACA7\uACA9-\uACC3\uACC5-\uACDF\uACE1-\uACFB\uACFD-\uAD17\uAD19-\uAD33\uAD35-\uAD4F\uAD51-\uAD6B\uAD6D-\uAD87\uAD89-\uADA3\uADA5-\uADBF\uADC1-\uADDB\uADDD-\uADF7\uADF9-\uAE13\uAE15-\uAE2F\uAE31-\uAE4B\uAE4D-\uAE67\uAE69-\uAE83\uAE85-\uAE9F\uAEA1-\uAEBB\uAEBD-\uAED7\uAED9-\uAEF3\uAEF5-\uAF0F\uAF11-\uAF2B\uAF2D-\uAF47\uAF49-\uAF63\uAF65-\uAF7F\uAF81-\uAF9B\uAF9D-\uAFB7\uAFB9-\uAFD3\uAFD5-\uAFEF\uAFF1-\uB00B\uB00D-\uB027\uB029-\uB043\uB045-\uB05F\uB061-\uB07B\uB07D-\uB097\uB099-\uB0B3\uB0B5-\uB0CF\uB0D1-\uB0EB\uB0ED-\uB107\uB109-\uB123\uB125-\uB13F\uB141-\uB15B\uB15D-\uB177\uB179-\uB193\uB195-\uB1AF\uB1B1-\uB1CB\uB1CD-\uB1E7\uB1E9-\uB203\uB205-\uB21F\uB221-\uB23B\uB23D-\uB257\uB259-\uB273\uB275-\uB28F\uB291-\uB2AB\uB2AD-\uB2C7\uB2C9-\uB2E3\uB2E5-\uB2FF\uB301-\uB31B\uB31D-\uB337\uB339-\uB353\uB355-\uB36F\uB371-\uB38B\uB38D-\uB3A7\uB3A9-\uB3C3\uB3C5-\uB3DF\uB3E1-\uB3FB\uB3FD-\uB417\uB419-\uB433\uB435-\uB44F\uB451-\uB46B\uB46D-\uB487\uB489-\uB4A3\uB4A5-\uB4BF\uB4C1-\uB4DB\uB4DD-\uB4F7\uB4F9-\uB513\uB515-\uB52F\uB531-\uB54B\uB54D-\uB567\uB569-\uB583\uB585-\uB59F\uB5A1-\uB5BB\uB5BD-\uB5D7\uB5D9-\uB5F3\uB5F5-\uB60F\uB611-\uB62B\uB62D-\uB647\uB649-\uB663\uB665-\uB67F\uB681-\uB69B\uB69D-\uB6B7\uB6B9-\uB6D3\uB6D5-\uB6EF\uB6F1-\uB70B\uB70D-\uB727\uB729-\uB743\uB745-\uB75F\uB761-\uB77B\uB77D-\uB797\uB799-\uB7B3\uB7B5-\uB7CF\uB7D1-\uB7EB\uB7ED-\uB807\uB809-\uB823\uB825-\uB83F\uB841-\uB85B\uB85D-\uB877\uB879-\uB893\uB895-\uB8AF\uB8B1-\uB8CB\uB8CD-\uB8E7\uB8E9-\uB903\uB905-\uB91F\uB921-\uB93B\uB93D-\uB957\uB959-\uB973\uB975-\uB98F\uB991-\uB9AB\uB9AD-\uB9C7\uB9C9-\uB9E3\uB9E5-\uB9FF\uBA01-\uBA1B\uBA1D-\uBA37\uBA39-\uBA53\uBA55-\uBA6F\uBA71-\uBA8B\uBA8D-\uBAA7\uBAA9-\uBAC3\uBAC5-\uBADF\uBAE1-\uBAFB\uBAFD-\uBB17\uBB19-\uBB33\uBB35-\uBB4F\uBB51-\uBB6B\uBB6D-\uBB87\uBB89-\uBBA3\uBBA5-\uBBBF\uBBC1-\uBBDB\uBBDD-\uBBF7\uBBF9-\uBC13\uBC15-\uBC2F\uBC31-\uBC4B\uBC4D-\uBC67\uBC69-\uBC83\uBC85-\uBC9F\uBCA1-\uBCBB\uBCBD-\uBCD7\uBCD9-\uBCF3\uBCF5-\uBD0F\uBD11-\uBD2B\uBD2D-\uBD47\uBD49-\uBD63\uBD65-\uBD7F\uBD81-\uBD9B\uBD9D-\uBDB7\uBDB9-\uBDD3\uBDD5-\uBDEF\uBDF1-\uBE0B\uBE0D-\uBE27\uBE29-\uBE43\uBE45-\uBE5F\uBE61-\uBE7B\uBE7D-\uBE97\uBE99-\uBEB3\uBEB5-\uBECF\uBED1-\uBEEB\uBEED-\uBF07\uBF09-\uBF23\uBF25-\uBF3F\uBF41-\uBF5B\uBF5D-\uBF77\uBF79-\uBF93\uBF95-\uBFAF\uBFB1-\uBFCB\uBFCD-\uBFE7\uBFE9-\uC003\uC005-\uC01F\uC021-\uC03B\uC03D-\uC057\uC059-\uC073\uC075-\uC08F\uC091-\uC0AB\uC0AD-\uC0C7\uC0C9-\uC0E3\uC0E5-\uC0FF\uC101-\uC11B\uC11D-\uC137\uC139-\uC153\uC155-\uC16F\uC171-\uC18B\uC18D-\uC1A7\uC1A9-\uC1C3\uC1C5-\uC1DF\uC1E1-\uC1FB\uC1FD-\uC217\uC219-\uC233\uC235-\uC24F\uC251-\uC26B\uC26D-\uC287\uC289-\uC2A3\uC2A5-\uC2BF\uC2C1-\uC2DB\uC2DD-\uC2F7\uC2F9-\uC313\uC315-\uC32F\uC331-\uC34B\uC34D-\uC367\uC369-\uC383\uC385-\uC39F\uC3A1-\uC3BB\uC3BD-\uC3D7\uC3D9-\uC3F3\uC3F5-\uC40F\uC411-\uC42B\uC42D-\uC447\uC449-\uC463\uC465-\uC47F\uC481-\uC49B\uC49D-\uC4B7\uC4B9-\uC4D3\uC4D5-\uC4EF\uC4F1-\uC50B\uC50D-\uC527\uC529-\uC543\uC545-\uC55F\uC561-\uC57B\uC57D-\uC597\uC599-\uC5B3\uC5B5-\uC5CF\uC5D1-\uC5EB\uC5ED-\uC607\uC609-\uC623\uC625-\uC63F\uC641-\uC65B\uC65D-\uC677\uC679-\uC693\uC695-\uC6AF\uC6B1-\uC6CB\uC6CD-\uC6E7\uC6E9-\uC703\uC705-\uC71F\uC721-\uC73B\uC73D-\uC757\uC759-\uC773\uC775-\uC78F\uC791-\uC7AB\uC7AD-\uC7C7\uC7C9-\uC7E3\uC7E5-\uC7FF\uC801-\uC81B\uC81D-\uC837\uC839-\uC853\uC855-\uC86F\uC871-\uC88B\uC88D-\uC8A7\uC8A9-\uC8C3\uC8C5-\uC8DF\uC8E1-\uC8FB\uC8FD-\uC917\uC919-\uC933\uC935-\uC94F\uC951-\uC96B\uC96D-\uC987\uC989-\uC9A3\uC9A5-\uC9BF\uC9C1-\uC9DB\uC9DD-\uC9F7\uC9F9-\uCA13\uCA15-\uCA2F\uCA31-\uCA4B\uCA4D-\uCA67\uCA69-\uCA83\uCA85-\uCA9F\uCAA1-\uCABB\uCABD-\uCAD7\uCAD9-\uCAF3\uCAF5-\uCB0F\uCB11-\uCB2B\uCB2D-\uCB47\uCB49-\uCB63\uCB65-\uCB7F\uCB81-\uCB9B\uCB9D-\uCBB7\uCBB9-\uCBD3\uCBD5-\uCBEF\uCBF1-\uCC0B\uCC0D-\uCC27\uCC29-\uCC43\uCC45-\uCC5F\uCC61-\uCC7B\uCC7D-\uCC97\uCC99-\uCCB3\uCCB5-\uCCCF\uCCD1-\uCCEB\uCCED-\uCD07\uCD09-\uCD23\uCD25-\uCD3F\uCD41-\uCD5B\uCD5D-\uCD77\uCD79-\uCD93\uCD95-\uCDAF\uCDB1-\uCDCB\uCDCD-\uCDE7\uCDE9-\uCE03\uCE05-\uCE1F\uCE21-\uCE3B\uCE3D-\uCE57\uCE59-\uCE73\uCE75-\uCE8F\uCE91-\uCEAB\uCEAD-\uCEC7\uCEC9-\uCEE3\uCEE5-\uCEFF\uCF01-\uCF1B\uCF1D-\uCF37\uCF39-\uCF53\uCF55-\uCF6F\uCF71-\uCF8B\uCF8D-\uCFA7\uCFA9-\uCFC3\uCFC5-\uCFDF\uCFE1-\uCFFB\uCFFD-\uD017\uD019-\uD033\uD035-\uD04F\uD051-\uD06B\uD06D-\uD087\uD089-\uD0A3\uD0A5-\uD0BF\uD0C1-\uD0DB\uD0DD-\uD0F7\uD0F9-\uD113\uD115-\uD12F\uD131-\uD14B\uD14D-\uD167\uD169-\uD183\uD185-\uD19F\uD1A1-\uD1BB\uD1BD-\uD1D7\uD1D9-\uD1F3\uD1F5-\uD20F\uD211-\uD22B\uD22D-\uD247\uD249-\uD263\uD265-\uD27F\uD281-\uD29B\uD29D-\uD2B7\uD2B9-\uD2D3\uD2D5-\uD2EF\uD2F1-\uD30B\uD30D-\uD327\uD329-\uD343\uD345-\uD35F\uD361-\uD37B\uD37D-\uD397\uD399-\uD3B3\uD3B5-\uD3CF\uD3D1-\uD3EB\uD3ED-\uD407\uD409-\uD423\uD425-\uD43F\uD441-\uD45B\uD45D-\uD477\uD479-\uD493\uD495-\uD4AF\uD4B1-\uD4CB\uD4CD-\uD4E7\uD4E9-\uD503\uD505-\uD51F\uD521-\uD53B\uD53D-\uD557\uD559-\uD573\uD575-\uD58F\uD591-\uD5AB\uD5AD-\uD5C7\uD5C9-\uD5E3\uD5E5-\uD5FF\uD601-\uD61B\uD61D-\uD637\uD639-\uD653\uD655-\uD66F\uD671-\uD68B\uD68D-\uD6A7\uD6A9-\uD6C3\uD6C5-\uD6DF\uD6E1-\uD6FB\uD6FD-\uD717\uD719-\uD733\uD735-\uD74F\uD751-\uD76B\uD76D-\uD787\uD789-\uD7A3]$/;
  var reExtPict = /^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])$/;
  var getCodepointType = (char2, code2) => {
    var type = CodepointType.Any;
    if (char2.search(reExtend) !== -1) {
      type |= CodepointType.Extend;
    }
    if (code2 === 8205) {
      type |= CodepointType.ZWJ;
    }
    if (code2 >= 127462 && code2 <= 127487) {
      type |= CodepointType.RI;
    }
    if (char2.search(rePrepend) !== -1) {
      type |= CodepointType.Prepend;
    }
    if (char2.search(reSpacingMark) !== -1) {
      type |= CodepointType.SpacingMark;
    }
    if (char2.search(reL) !== -1) {
      type |= CodepointType.L;
    }
    if (char2.search(reV) !== -1) {
      type |= CodepointType.V;
    }
    if (char2.search(reT) !== -1) {
      type |= CodepointType.T;
    }
    if (char2.search(reLV) !== -1) {
      type |= CodepointType.LV;
    }
    if (char2.search(reLVT) !== -1) {
      type |= CodepointType.LVT;
    }
    if (char2.search(reExtPict) !== -1) {
      type |= CodepointType.ExtPict;
    }
    return type;
  };
  function intersects(x2, y3) {
    return (x2 & y3) !== 0;
  }
  var NonBoundaryPairs = [
    // GB6
    [CodepointType.L, CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT],
    // GB7
    [CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T],
    // GB8
    [CodepointType.LVT | CodepointType.T, CodepointType.T],
    // GB9
    [CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ],
    // GB9a
    [CodepointType.Any, CodepointType.SpacingMark],
    // GB9b
    [CodepointType.Prepend, CodepointType.Any],
    // GB11
    [CodepointType.ZWJ, CodepointType.ExtPict],
    // GB12 and GB13
    [CodepointType.RI, CodepointType.RI]
  ];
  function isBoundaryPair(left, right) {
    return NonBoundaryPairs.findIndex((r3) => intersects(left, r3[0]) && intersects(right, r3[1])) === -1;
  }
  var endingEmojiZWJ = /(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])*\u200D$/;
  var endsWithEmojiZWJ = (str) => {
    return str.search(endingEmojiZWJ) !== -1;
  };
  var endingRIs = /(?:\uD83C[\uDDE6-\uDDFF])+$/g;
  var endsWithOddNumberOfRIs = (str) => {
    var match2 = str.match(endingRIs);
    if (match2 === null) {
      return false;
    } else {
      var numRIs = match2[0].length / 2;
      return numRIs % 2 === 1;
    }
  };
  var TextTransforms = {
    delete(editor, options) {
      editor.delete(options);
    },
    insertFragment(editor, fragment2, options) {
      editor.insertFragment(fragment2, options);
    },
    insertText(editor, text4) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      Editor.withoutNormalizing(editor, () => {
        var {
          voids = false
        } = options;
        var {
          at = getDefaultInsertLocation(editor)
        } = options;
        if (Path.isPath(at)) {
          at = Editor.range(editor, at);
        }
        if (Range.isRange(at)) {
          if (Range.isCollapsed(at)) {
            at = at.anchor;
          } else {
            var end2 = Range.end(at);
            if (!voids && Editor.void(editor, {
              at: end2
            })) {
              return;
            }
            var start2 = Range.start(at);
            var startRef = Editor.pointRef(editor, start2);
            var endRef = Editor.pointRef(editor, end2);
            Transforms.delete(editor, {
              at,
              voids
            });
            var startPoint = startRef.unref();
            var endPoint = endRef.unref();
            at = startPoint || endPoint;
            Transforms.setSelection(editor, {
              anchor: at,
              focus: at
            });
          }
        }
        if (!voids && Editor.void(editor, {
          at
        }) || Editor.elementReadOnly(editor, {
          at
        })) {
          return;
        }
        var {
          path: path4,
          offset: offset3
        } = at;
        if (text4.length > 0)
          editor.apply({
            type: "insert_text",
            path: path4,
            offset: offset3,
            text: text4
          });
      });
    }
  };
  function ownKeys$9(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$9(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$9(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$9(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var Transforms = _objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9({}, GeneralTransforms), NodeTransforms), SelectionTransforms), TextTransforms);
  var apply = (editor, op) => {
    for (var ref of Editor.pathRefs(editor)) {
      PathRef.transform(ref, op);
    }
    for (var _ref of Editor.pointRefs(editor)) {
      PointRef.transform(_ref, op);
    }
    for (var _ref2 of Editor.rangeRefs(editor)) {
      RangeRef.transform(_ref2, op);
    }
    var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];
    var oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || /* @__PURE__ */ new Set();
    var dirtyPaths;
    var dirtyPathKeys;
    var add = (path5) => {
      if (path5) {
        var key = path5.join(",");
        if (!dirtyPathKeys.has(key)) {
          dirtyPathKeys.add(key);
          dirtyPaths.push(path5);
        }
      }
    };
    if (Path.operationCanTransformPath(op)) {
      dirtyPaths = [];
      dirtyPathKeys = /* @__PURE__ */ new Set();
      for (var path4 of oldDirtyPaths) {
        var newPath = Path.transform(path4, op);
        add(newPath);
      }
    } else {
      dirtyPaths = oldDirtyPaths;
      dirtyPathKeys = oldDirtyPathKeys;
    }
    var newDirtyPaths = editor.getDirtyPaths(op);
    for (var _path of newDirtyPaths) {
      add(_path);
    }
    DIRTY_PATHS.set(editor, dirtyPaths);
    DIRTY_PATH_KEYS.set(editor, dirtyPathKeys);
    Transforms.transform(editor, op);
    editor.operations.push(op);
    Editor.normalize(editor, {
      operation: op
    });
    if (op.type === "set_selection") {
      editor.marks = null;
    }
    if (!FLUSHING.get(editor)) {
      FLUSHING.set(editor, true);
      Promise.resolve().then(() => {
        FLUSHING.set(editor, false);
        editor.onChange({
          operation: op
        });
        editor.operations = [];
      });
    }
  };
  var getDirtyPaths = (editor, op) => {
    switch (op.type) {
      case "insert_text":
      case "remove_text":
      case "set_node": {
        var {
          path: path4
        } = op;
        return Path.levels(path4);
      }
      case "insert_node": {
        var {
          node: node5,
          path: _path
        } = op;
        var levels2 = Path.levels(_path);
        var descendants = Text2.isText(node5) ? [] : Array.from(Node2.nodes(node5), (_ref) => {
          var [, p4] = _ref;
          return _path.concat(p4);
        });
        return [...levels2, ...descendants];
      }
      case "merge_node": {
        var {
          path: _path2
        } = op;
        var ancestors = Path.ancestors(_path2);
        var previousPath = Path.previous(_path2);
        return [...ancestors, previousPath];
      }
      case "move_node": {
        var {
          path: _path3,
          newPath
        } = op;
        if (Path.equals(_path3, newPath)) {
          return [];
        }
        var oldAncestors = [];
        var newAncestors = [];
        for (var ancestor of Path.ancestors(_path3)) {
          var p3 = Path.transform(ancestor, op);
          oldAncestors.push(p3);
        }
        for (var _ancestor of Path.ancestors(newPath)) {
          var _p = Path.transform(_ancestor, op);
          newAncestors.push(_p);
        }
        var newParent = newAncestors[newAncestors.length - 1];
        var newIndex = newPath[newPath.length - 1];
        var resultPath = newParent.concat(newIndex);
        return [...oldAncestors, ...newAncestors, resultPath];
      }
      case "remove_node": {
        var {
          path: _path4
        } = op;
        var _ancestors = Path.ancestors(_path4);
        return [..._ancestors];
      }
      case "split_node": {
        var {
          path: _path5
        } = op;
        var _levels = Path.levels(_path5);
        var nextPath = Path.next(_path5);
        return [..._levels, nextPath];
      }
      default: {
        return [];
      }
    }
  };
  var getFragment = (editor) => {
    var {
      selection
    } = editor;
    if (selection) {
      return Node2.fragment(editor, selection);
    }
    return [];
  };
  var normalizeNode = (editor, entry) => {
    var [node5, path4] = entry;
    if (Text2.isText(node5)) {
      return;
    }
    if (Element2.isElement(node5) && node5.children.length === 0) {
      var child = {
        text: ""
      };
      Transforms.insertNodes(editor, child, {
        at: path4.concat(0),
        voids: true
      });
      return;
    }
    var shouldHaveInlines = Editor.isEditor(node5) ? false : Element2.isElement(node5) && (editor.isInline(node5) || node5.children.length === 0 || Text2.isText(node5.children[0]) || editor.isInline(node5.children[0]));
    var n6 = 0;
    for (var i4 = 0; i4 < node5.children.length; i4++, n6++) {
      var currentNode = Node2.get(editor, path4);
      if (Text2.isText(currentNode))
        continue;
      var _child = currentNode.children[n6];
      var prev2 = currentNode.children[n6 - 1];
      var isLast = i4 === node5.children.length - 1;
      var isInlineOrText = Text2.isText(_child) || Element2.isElement(_child) && editor.isInline(_child);
      if (isInlineOrText !== shouldHaveInlines) {
        Transforms.removeNodes(editor, {
          at: path4.concat(n6),
          voids: true
        });
        n6--;
      } else if (Element2.isElement(_child)) {
        if (editor.isInline(_child)) {
          if (prev2 == null || !Text2.isText(prev2)) {
            var newChild = {
              text: ""
            };
            Transforms.insertNodes(editor, newChild, {
              at: path4.concat(n6),
              voids: true
            });
            n6++;
          } else if (isLast) {
            var _newChild = {
              text: ""
            };
            Transforms.insertNodes(editor, _newChild, {
              at: path4.concat(n6 + 1),
              voids: true
            });
            n6++;
          }
        }
      } else {
        if (prev2 != null && Text2.isText(prev2)) {
          if (Text2.equals(_child, prev2, {
            loose: true
          })) {
            Transforms.mergeNodes(editor, {
              at: path4.concat(n6),
              voids: true
            });
            n6--;
          } else if (prev2.text === "") {
            Transforms.removeNodes(editor, {
              at: path4.concat(n6 - 1),
              voids: true
            });
            n6--;
          } else if (_child.text === "") {
            Transforms.removeNodes(editor, {
              at: path4.concat(n6),
              voids: true
            });
            n6--;
          }
        }
      }
    }
  };
  var shouldNormalize = (editor, _ref) => {
    var {
      iteration,
      initialDirtyPathsLength
    } = _ref;
    var maxIterations = initialDirtyPathsLength * 42;
    if (iteration > maxIterations) {
      throw new Error("Could not completely normalize the editor after ".concat(maxIterations, " iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state."));
    }
    return true;
  };
  var above = function above2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      voids = false,
      mode = "lowest",
      at = editor.selection,
      match: match2
    } = options;
    if (!at) {
      return;
    }
    var path4 = Editor.path(editor, at);
    var reverse = mode === "lowest";
    for (var [n6, p3] of Editor.levels(editor, {
      at: path4,
      voids,
      match: match2,
      reverse
    })) {
      if (Text2.isText(n6))
        continue;
      if (Range.isRange(at)) {
        if (Path.isAncestor(p3, at.anchor.path) && Path.isAncestor(p3, at.focus.path)) {
          return [n6, p3];
        }
      } else {
        if (!Path.equals(path4, p3)) {
          return [n6, p3];
        }
      }
    }
  };
  function ownKeys$8(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$8(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$8(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$8(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var addMark = (editor, key, value) => {
    var {
      selection
    } = editor;
    if (selection) {
      var match2 = (node5, path4) => {
        if (!Text2.isText(node5)) {
          return false;
        }
        var [parentNode2, parentPath] = Editor.parent(editor, path4);
        return !editor.isVoid(parentNode2) || editor.markableVoid(parentNode2);
      };
      var expandedSelection = Range.isExpanded(selection);
      var markAcceptingVoidSelected = false;
      if (!expandedSelection) {
        var [selectedNode, selectedPath] = Editor.node(editor, selection);
        if (selectedNode && match2(selectedNode, selectedPath)) {
          var [parentNode] = Editor.parent(editor, selectedPath);
          markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);
        }
      }
      if (expandedSelection || markAcceptingVoidSelected) {
        Transforms.setNodes(editor, {
          [key]: value
        }, {
          match: match2,
          split: true,
          voids: true
        });
      } else {
        var marks3 = _objectSpread$8(_objectSpread$8({}, Editor.marks(editor) || {}), {}, {
          [key]: value
        });
        editor.marks = marks3;
        if (!FLUSHING.get(editor)) {
          editor.onChange();
        }
      }
    }
  };
  function ownKeys$7(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$7(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$7(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$7(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var after = function after2(editor, at) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var anchor2 = Editor.point(editor, at, {
      edge: "end"
    });
    var focus = Editor.end(editor, []);
    var range2 = {
      anchor: anchor2,
      focus
    };
    var {
      distance = 1
    } = options;
    var d3 = 0;
    var target;
    for (var p3 of Editor.positions(editor, _objectSpread$7(_objectSpread$7({}, options), {}, {
      at: range2
    }))) {
      if (d3 > distance) {
        break;
      }
      if (d3 !== 0) {
        target = p3;
      }
      d3++;
    }
    return target;
  };
  function ownKeys$6(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$6(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$6(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$6(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var before = function before2(editor, at) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var anchor2 = Editor.start(editor, []);
    var focus = Editor.point(editor, at, {
      edge: "start"
    });
    var range2 = {
      anchor: anchor2,
      focus
    };
    var {
      distance = 1
    } = options;
    var d3 = 0;
    var target;
    for (var p3 of Editor.positions(editor, _objectSpread$6(_objectSpread$6({}, options), {}, {
      at: range2,
      reverse: true
    }))) {
      if (d3 > distance) {
        break;
      }
      if (d3 !== 0) {
        target = p3;
      }
      d3++;
    }
    return target;
  };
  var deleteBackward = (editor, unit) => {
    var {
      selection
    } = editor;
    if (selection && Range.isCollapsed(selection)) {
      Transforms.delete(editor, {
        unit,
        reverse: true
      });
    }
  };
  var deleteForward = (editor, unit) => {
    var {
      selection
    } = editor;
    if (selection && Range.isCollapsed(selection)) {
      Transforms.delete(editor, {
        unit
      });
    }
  };
  var deleteFragment = function deleteFragment2(editor) {
    var {
      direction = "forward"
    } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      selection
    } = editor;
    if (selection && Range.isExpanded(selection)) {
      Transforms.delete(editor, {
        reverse: direction === "backward"
      });
    }
  };
  var edges = (editor, at) => {
    return [Editor.start(editor, at), Editor.end(editor, at)];
  };
  function ownKeys$5(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$5(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$5(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$5(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var elementReadOnly = function elementReadOnly2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return Editor.above(editor, _objectSpread$5(_objectSpread$5({}, options), {}, {
      match: (n6) => Element2.isElement(n6) && Editor.isElementReadOnly(editor, n6)
    }));
  };
  var end = (editor, at) => {
    return Editor.point(editor, at, {
      edge: "end"
    });
  };
  var first = (editor, at) => {
    var path4 = Editor.path(editor, at, {
      edge: "start"
    });
    return Editor.node(editor, path4);
  };
  var fragment = (editor, at) => {
    var range2 = Editor.range(editor, at);
    return Node2.fragment(editor, range2);
  };
  function ownKeys$4(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$4(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$4(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$4(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var getVoid = function getVoid2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return Editor.above(editor, _objectSpread$4(_objectSpread$4({}, options), {}, {
      match: (n6) => Element2.isElement(n6) && Editor.isVoid(editor, n6)
    }));
  };
  var hasBlocks = (editor, element2) => {
    return element2.children.some((n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6));
  };
  var hasInlines = (editor, element2) => {
    return element2.children.some((n6) => Text2.isText(n6) || Editor.isInline(editor, n6));
  };
  var hasPath = (editor, path4) => {
    return Node2.has(editor, path4);
  };
  var hasTexts = (editor, element2) => {
    return element2.children.every((n6) => Text2.isText(n6));
  };
  var insertBreak = (editor) => {
    Transforms.splitNodes(editor, {
      always: true
    });
  };
  var insertNode = (editor, node5, options) => {
    Transforms.insertNodes(editor, node5, options);
  };
  var insertSoftBreak = (editor) => {
    Transforms.splitNodes(editor, {
      always: true
    });
  };
  function ownKeys$3(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$3(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$3(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var insertText = function insertText2(editor, text4) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      selection,
      marks: marks3
    } = editor;
    if (selection) {
      if (marks3) {
        var node5 = _objectSpread$3({
          text: text4
        }, marks3);
        Transforms.insertNodes(editor, node5, {
          at: options.at,
          voids: options.voids
        });
      } else {
        Transforms.insertText(editor, text4, options);
      }
      editor.marks = null;
    }
  };
  var isBlock = (editor, value) => {
    return !editor.isInline(value);
  };
  var isEdge = (editor, point6, at) => {
    return Editor.isStart(editor, point6, at) || Editor.isEnd(editor, point6, at);
  };
  var isEmpty = (editor, element2) => {
    var {
      children
    } = element2;
    var [first2] = children;
    return children.length === 0 || children.length === 1 && Text2.isText(first2) && first2.text === "" && !editor.isVoid(element2);
  };
  var isEnd = (editor, point6, at) => {
    var end2 = Editor.end(editor, at);
    return Point.equals(point6, end2);
  };
  var isNormalizing = (editor) => {
    var isNormalizing2 = NORMALIZING.get(editor);
    return isNormalizing2 === void 0 ? true : isNormalizing2;
  };
  var isStart = (editor, point6, at) => {
    if (point6.offset !== 0) {
      return false;
    }
    var start2 = Editor.start(editor, at);
    return Point.equals(point6, start2);
  };
  var last = (editor, at) => {
    var path4 = Editor.path(editor, at, {
      edge: "end"
    });
    return Editor.node(editor, path4);
  };
  var leaf = function leaf2(editor, at) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var path4 = Editor.path(editor, at, options);
    var node5 = Node2.leaf(editor, path4);
    return [node5, path4];
  };
  function* levels(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      at = editor.selection,
      reverse = false,
      voids = false
    } = options;
    var {
      match: match2
    } = options;
    if (match2 == null) {
      match2 = () => true;
    }
    if (!at) {
      return;
    }
    var levels2 = [];
    var path4 = Editor.path(editor, at);
    for (var [n6, p3] of Node2.levels(editor, path4)) {
      if (!match2(n6, p3)) {
        continue;
      }
      levels2.push([n6, p3]);
      if (!voids && Element2.isElement(n6) && Editor.isVoid(editor, n6)) {
        break;
      }
    }
    if (reverse) {
      levels2.reverse();
    }
    yield* levels2;
  }
  var _excluded$1 = ["text"];
  var _excluded2$1 = ["text"];
  var marks = function marks2(editor) {
    var {
      marks: marks3,
      selection
    } = editor;
    if (!selection) {
      return null;
    }
    if (marks3) {
      return marks3;
    }
    if (Range.isExpanded(selection)) {
      var [match2] = Editor.nodes(editor, {
        match: Text2.isText
      });
      if (match2) {
        var [_node] = match2;
        var _rest = _objectWithoutProperties(_node, _excluded$1);
        return _rest;
      } else {
        return {};
      }
    }
    var {
      anchor: anchor2
    } = selection;
    var {
      path: path4
    } = anchor2;
    var [node5] = Editor.leaf(editor, path4);
    if (anchor2.offset === 0) {
      var prev2 = Editor.previous(editor, {
        at: path4,
        match: Text2.isText
      });
      var markedVoid = Editor.above(editor, {
        match: (n6) => Element2.isElement(n6) && Editor.isVoid(editor, n6) && editor.markableVoid(n6)
      });
      if (!markedVoid) {
        var block = Editor.above(editor, {
          match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6)
        });
        if (prev2 && block) {
          var [prevNode, prevPath] = prev2;
          var [, blockPath] = block;
          if (Path.isAncestor(blockPath, prevPath)) {
            node5 = prevNode;
          }
        }
      }
    }
    var rest = _objectWithoutProperties(node5, _excluded2$1);
    return rest;
  };
  var next2 = function next3(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      mode = "lowest",
      voids = false
    } = options;
    var {
      match: match2,
      at = editor.selection
    } = options;
    if (!at) {
      return;
    }
    var pointAfterLocation = Editor.after(editor, at, {
      voids
    });
    if (!pointAfterLocation)
      return;
    var [, to] = Editor.last(editor, []);
    var span = [pointAfterLocation.path, to];
    if (Path.isPath(at) && at.length === 0) {
      throw new Error("Cannot get the next node from the root node!");
    }
    if (match2 == null) {
      if (Path.isPath(at)) {
        var [parent3] = Editor.parent(editor, at);
        match2 = (n6) => parent3.children.includes(n6);
      } else {
        match2 = () => true;
      }
    }
    var [next4] = Editor.nodes(editor, {
      at: span,
      match: match2,
      mode,
      voids
    });
    return next4;
  };
  var node2 = function node3(editor, at) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var path4 = Editor.path(editor, at, options);
    var node5 = Node2.get(editor, path4);
    return [node5, path4];
  };
  function* nodes(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      at = editor.selection,
      mode = "all",
      universal = false,
      reverse = false,
      voids = false,
      ignoreNonSelectable = false
    } = options;
    var {
      match: match2
    } = options;
    if (!match2) {
      match2 = () => true;
    }
    if (!at) {
      return;
    }
    var from2;
    var to;
    if (Span.isSpan(at)) {
      from2 = at[0];
      to = at[1];
    } else {
      var first2 = Editor.path(editor, at, {
        edge: "start"
      });
      var last2 = Editor.path(editor, at, {
        edge: "end"
      });
      from2 = reverse ? last2 : first2;
      to = reverse ? first2 : last2;
    }
    var nodeEntries = Node2.nodes(editor, {
      reverse,
      from: from2,
      to,
      pass: (_ref) => {
        var [node6] = _ref;
        if (!Element2.isElement(node6))
          return false;
        if (!voids && (Editor.isVoid(editor, node6) || Editor.isElementReadOnly(editor, node6)))
          return true;
        if (ignoreNonSelectable && !Editor.isSelectable(editor, node6))
          return true;
        return false;
      }
    });
    var matches = [];
    var hit;
    for (var [node5, path4] of nodeEntries) {
      if (ignoreNonSelectable && Element2.isElement(node5) && !Editor.isSelectable(editor, node5)) {
        continue;
      }
      var isLower = hit && Path.compare(path4, hit[1]) === 0;
      if (mode === "highest" && isLower) {
        continue;
      }
      if (!match2(node5, path4)) {
        if (universal && !isLower && Text2.isText(node5)) {
          return;
        } else {
          continue;
        }
      }
      if (mode === "lowest" && isLower) {
        hit = [node5, path4];
        continue;
      }
      var emit = mode === "lowest" ? hit : [node5, path4];
      if (emit) {
        if (universal) {
          matches.push(emit);
        } else {
          yield emit;
        }
      }
      hit = [node5, path4];
    }
    if (mode === "lowest" && hit) {
      if (universal) {
        matches.push(hit);
      } else {
        yield hit;
      }
    }
    if (universal) {
      yield* matches;
    }
  }
  var normalize3 = function normalize4(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      force = false,
      operation
    } = options;
    var getDirtyPaths2 = (editor2) => {
      return DIRTY_PATHS.get(editor2) || [];
    };
    var getDirtyPathKeys = (editor2) => {
      return DIRTY_PATH_KEYS.get(editor2) || /* @__PURE__ */ new Set();
    };
    var popDirtyPath = (editor2) => {
      var path4 = getDirtyPaths2(editor2).pop();
      var key = path4.join(",");
      getDirtyPathKeys(editor2).delete(key);
      return path4;
    };
    if (!Editor.isNormalizing(editor)) {
      return;
    }
    if (force) {
      var allPaths = Array.from(Node2.nodes(editor), (_ref) => {
        var [, p3] = _ref;
        return p3;
      });
      var allPathKeys = new Set(allPaths.map((p3) => p3.join(",")));
      DIRTY_PATHS.set(editor, allPaths);
      DIRTY_PATH_KEYS.set(editor, allPathKeys);
    }
    if (getDirtyPaths2(editor).length === 0) {
      return;
    }
    Editor.withoutNormalizing(editor, () => {
      for (var dirtyPath of getDirtyPaths2(editor)) {
        if (Node2.has(editor, dirtyPath)) {
          var entry = Editor.node(editor, dirtyPath);
          var [node5, _3] = entry;
          if (Element2.isElement(node5) && node5.children.length === 0) {
            editor.normalizeNode(entry, {
              operation
            });
          }
        }
      }
      var dirtyPaths = getDirtyPaths2(editor);
      var initialDirtyPathsLength = dirtyPaths.length;
      var iteration = 0;
      while (dirtyPaths.length !== 0) {
        if (!editor.shouldNormalize({
          dirtyPaths,
          iteration,
          initialDirtyPathsLength,
          operation
        })) {
          return;
        }
        var _dirtyPath = popDirtyPath(editor);
        if (Node2.has(editor, _dirtyPath)) {
          var _entry = Editor.node(editor, _dirtyPath);
          editor.normalizeNode(_entry, {
            operation
          });
        }
        iteration++;
        dirtyPaths = getDirtyPaths2(editor);
      }
    });
  };
  var parent = function parent2(editor, at) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var path4 = Editor.path(editor, at, options);
    var parentPath = Path.parent(path4);
    var entry = Editor.node(editor, parentPath);
    return entry;
  };
  var pathRef = function pathRef2(editor, path4) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      affinity = "forward"
    } = options;
    var ref = {
      current: path4,
      affinity,
      unref() {
        var {
          current
        } = ref;
        var pathRefs2 = Editor.pathRefs(editor);
        pathRefs2.delete(ref);
        ref.current = null;
        return current;
      }
    };
    var refs = Editor.pathRefs(editor);
    refs.add(ref);
    return ref;
  };
  var pathRefs = (editor) => {
    var refs = PATH_REFS.get(editor);
    if (!refs) {
      refs = /* @__PURE__ */ new Set();
      PATH_REFS.set(editor, refs);
    }
    return refs;
  };
  var path = function path2(editor, at) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      depth,
      edge
    } = options;
    if (Path.isPath(at)) {
      if (edge === "start") {
        var [, firstPath] = Node2.first(editor, at);
        at = firstPath;
      } else if (edge === "end") {
        var [, lastPath] = Node2.last(editor, at);
        at = lastPath;
      }
    }
    if (Range.isRange(at)) {
      if (edge === "start") {
        at = Range.start(at);
      } else if (edge === "end") {
        at = Range.end(at);
      } else {
        at = Path.common(at.anchor.path, at.focus.path);
      }
    }
    if (Point.isPoint(at)) {
      at = at.path;
    }
    if (depth != null) {
      at = at.slice(0, depth);
    }
    return at;
  };
  var pointRef = function pointRef2(editor, point6) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      affinity = "forward"
    } = options;
    var ref = {
      current: point6,
      affinity,
      unref() {
        var {
          current
        } = ref;
        var pointRefs2 = Editor.pointRefs(editor);
        pointRefs2.delete(ref);
        ref.current = null;
        return current;
      }
    };
    var refs = Editor.pointRefs(editor);
    refs.add(ref);
    return ref;
  };
  var pointRefs = (editor) => {
    var refs = POINT_REFS.get(editor);
    if (!refs) {
      refs = /* @__PURE__ */ new Set();
      POINT_REFS.set(editor, refs);
    }
    return refs;
  };
  var point = function point2(editor, at) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      edge = "start"
    } = options;
    if (Path.isPath(at)) {
      var path4;
      if (edge === "end") {
        var [, lastPath] = Node2.last(editor, at);
        path4 = lastPath;
      } else {
        var [, firstPath] = Node2.first(editor, at);
        path4 = firstPath;
      }
      var node5 = Node2.get(editor, path4);
      if (!Text2.isText(node5)) {
        throw new Error("Cannot get the ".concat(edge, " point in the node at path [").concat(at, "] because it has no ").concat(edge, " text node."));
      }
      return {
        path: path4,
        offset: edge === "end" ? node5.text.length : 0
      };
    }
    if (Range.isRange(at)) {
      var [start2, end2] = Range.edges(at);
      return edge === "start" ? start2 : end2;
    }
    return at;
  };
  function* positions(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      at = editor.selection,
      unit = "offset",
      reverse = false,
      voids = false,
      ignoreNonSelectable = false
    } = options;
    if (!at) {
      return;
    }
    var range2 = Editor.range(editor, at);
    var [start2, end2] = Range.edges(range2);
    var first2 = reverse ? end2 : start2;
    var isNewBlock = false;
    var blockText = "";
    var distance = 0;
    var leafTextRemaining = 0;
    var leafTextOffset = 0;
    for (var [node5, path4] of Editor.nodes(editor, {
      at,
      reverse,
      voids,
      ignoreNonSelectable
    })) {
      if (Element2.isElement(node5)) {
        if (!voids && (editor.isVoid(node5) || editor.isElementReadOnly(node5))) {
          yield Editor.start(editor, path4);
          continue;
        }
        if (editor.isInline(node5))
          continue;
        if (Editor.hasInlines(editor, node5)) {
          var e3 = Path.isAncestor(path4, end2.path) ? end2 : Editor.end(editor, path4);
          var s3 = Path.isAncestor(path4, start2.path) ? start2 : Editor.start(editor, path4);
          blockText = Editor.string(editor, {
            anchor: s3,
            focus: e3
          }, {
            voids
          });
          isNewBlock = true;
        }
      }
      if (Text2.isText(node5)) {
        var isFirst = Path.equals(path4, first2.path);
        if (isFirst) {
          leafTextRemaining = reverse ? first2.offset : node5.text.length - first2.offset;
          leafTextOffset = first2.offset;
        } else {
          leafTextRemaining = node5.text.length;
          leafTextOffset = reverse ? leafTextRemaining : 0;
        }
        if (isFirst || isNewBlock || unit === "offset") {
          yield {
            path: path4,
            offset: leafTextOffset
          };
          isNewBlock = false;
        }
        while (true) {
          if (distance === 0) {
            if (blockText === "")
              break;
            distance = calcDistance(blockText, unit, reverse);
            blockText = splitByCharacterDistance(blockText, distance, reverse)[1];
          }
          leafTextOffset = reverse ? leafTextOffset - distance : leafTextOffset + distance;
          leafTextRemaining = leafTextRemaining - distance;
          if (leafTextRemaining < 0) {
            distance = -leafTextRemaining;
            break;
          }
          distance = 0;
          yield {
            path: path4,
            offset: leafTextOffset
          };
        }
      }
    }
    function calcDistance(text4, unit2, reverse2) {
      if (unit2 === "character") {
        return getCharacterDistance(text4, reverse2);
      } else if (unit2 === "word") {
        return getWordDistance(text4, reverse2);
      } else if (unit2 === "line" || unit2 === "block") {
        return text4.length;
      }
      return 1;
    }
  }
  var previous = function previous2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      mode = "lowest",
      voids = false
    } = options;
    var {
      match: match2,
      at = editor.selection
    } = options;
    if (!at) {
      return;
    }
    var pointBeforeLocation = Editor.before(editor, at, {
      voids
    });
    if (!pointBeforeLocation) {
      return;
    }
    var [, to] = Editor.first(editor, []);
    var span = [pointBeforeLocation.path, to];
    if (Path.isPath(at) && at.length === 0) {
      throw new Error("Cannot get the previous node from the root node!");
    }
    if (match2 == null) {
      if (Path.isPath(at)) {
        var [parent3] = Editor.parent(editor, at);
        match2 = (n6) => parent3.children.includes(n6);
      } else {
        match2 = () => true;
      }
    }
    var [previous4] = Editor.nodes(editor, {
      reverse: true,
      at: span,
      match: match2,
      mode,
      voids
    });
    return previous4;
  };
  var rangeRef = function rangeRef2(editor, range2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      affinity = "forward"
    } = options;
    var ref = {
      current: range2,
      affinity,
      unref() {
        var {
          current
        } = ref;
        var rangeRefs2 = Editor.rangeRefs(editor);
        rangeRefs2.delete(ref);
        ref.current = null;
        return current;
      }
    };
    var refs = Editor.rangeRefs(editor);
    refs.add(ref);
    return ref;
  };
  var rangeRefs = (editor) => {
    var refs = RANGE_REFS.get(editor);
    if (!refs) {
      refs = /* @__PURE__ */ new Set();
      RANGE_REFS.set(editor, refs);
    }
    return refs;
  };
  var range = (editor, at, to) => {
    if (Range.isRange(at) && !to) {
      return at;
    }
    var start2 = Editor.start(editor, at);
    var end2 = Editor.end(editor, to || at);
    return {
      anchor: start2,
      focus: end2
    };
  };
  function ownKeys$2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$2(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$2(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var removeMark = (editor, key) => {
    var {
      selection
    } = editor;
    if (selection) {
      var match2 = (node5, path4) => {
        if (!Text2.isText(node5)) {
          return false;
        }
        var [parentNode2, parentPath] = Editor.parent(editor, path4);
        return !editor.isVoid(parentNode2) || editor.markableVoid(parentNode2);
      };
      var expandedSelection = Range.isExpanded(selection);
      var markAcceptingVoidSelected = false;
      if (!expandedSelection) {
        var [selectedNode, selectedPath] = Editor.node(editor, selection);
        if (selectedNode && match2(selectedNode, selectedPath)) {
          var [parentNode] = Editor.parent(editor, selectedPath);
          markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);
        }
      }
      if (expandedSelection || markAcceptingVoidSelected) {
        Transforms.unsetNodes(editor, key, {
          match: match2,
          split: true,
          voids: true
        });
      } else {
        var marks3 = _objectSpread$2({}, Editor.marks(editor) || {});
        delete marks3[key];
        editor.marks = marks3;
        if (!FLUSHING.get(editor)) {
          editor.onChange();
        }
      }
    }
  };
  var setNormalizing = (editor, isNormalizing2) => {
    NORMALIZING.set(editor, isNormalizing2);
  };
  var start = (editor, at) => {
    return Editor.point(editor, at, {
      edge: "start"
    });
  };
  var string = function string2(editor, at) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      voids = false
    } = options;
    var range2 = Editor.range(editor, at);
    var [start2, end2] = Range.edges(range2);
    var text4 = "";
    for (var [node5, path4] of Editor.nodes(editor, {
      at: range2,
      match: Text2.isText,
      voids
    })) {
      var t4 = node5.text;
      if (Path.equals(path4, end2.path)) {
        t4 = t4.slice(0, end2.offset);
      }
      if (Path.equals(path4, start2.path)) {
        t4 = t4.slice(start2.offset);
      }
      text4 += t4;
    }
    return text4;
  };
  var unhangRange = function unhangRange2(editor, range2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      voids = false
    } = options;
    var [start2, end2] = Range.edges(range2);
    if (start2.offset !== 0 || end2.offset !== 0 || Range.isCollapsed(range2) || Path.hasPrevious(end2.path)) {
      return range2;
    }
    var endBlock = Editor.above(editor, {
      at: end2,
      match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6),
      voids
    });
    var blockPath = endBlock ? endBlock[1] : [];
    var first2 = Editor.start(editor, start2);
    var before3 = {
      anchor: first2,
      focus: end2
    };
    var skip = true;
    for (var [node5, path4] of Editor.nodes(editor, {
      at: before3,
      match: Text2.isText,
      reverse: true,
      voids
    })) {
      if (skip) {
        skip = false;
        continue;
      }
      if (node5.text !== "" || Path.isBefore(path4, blockPath)) {
        end2 = {
          path: path4,
          offset: node5.text.length
        };
        break;
      }
    }
    return {
      anchor: start2,
      focus: end2
    };
  };
  var withoutNormalizing = (editor, fn2) => {
    var value = Editor.isNormalizing(editor);
    Editor.setNormalizing(editor, false);
    try {
      fn2();
    } finally {
      Editor.setNormalizing(editor, value);
    }
    Editor.normalize(editor);
  };
  var deleteText = function deleteText2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor.withoutNormalizing(editor, () => {
      var _Editor$void, _Editor$void2;
      var {
        reverse = false,
        unit = "character",
        distance = 1,
        voids = false
      } = options;
      var {
        at = editor.selection,
        hanging = false
      } = options;
      if (!at) {
        return;
      }
      var isCollapsed = false;
      if (Range.isRange(at) && Range.isCollapsed(at)) {
        isCollapsed = true;
        at = at.anchor;
      }
      if (Point.isPoint(at)) {
        var furthestVoid = Editor.void(editor, {
          at,
          mode: "highest"
        });
        if (!voids && furthestVoid) {
          var [, voidPath] = furthestVoid;
          at = voidPath;
        } else {
          var opts = {
            unit,
            distance
          };
          var target = reverse ? Editor.before(editor, at, opts) || Editor.start(editor, []) : Editor.after(editor, at, opts) || Editor.end(editor, []);
          at = {
            anchor: at,
            focus: target
          };
          hanging = true;
        }
      }
      if (Path.isPath(at)) {
        Transforms.removeNodes(editor, {
          at,
          voids
        });
        return;
      }
      if (Range.isCollapsed(at)) {
        return;
      }
      if (!hanging) {
        var [, _end] = Range.edges(at);
        var endOfDoc = Editor.end(editor, []);
        if (!Point.equals(_end, endOfDoc)) {
          at = Editor.unhangRange(editor, at, {
            voids
          });
        }
      }
      var [start2, end2] = Range.edges(at);
      var startBlock = Editor.above(editor, {
        match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6),
        at: start2,
        voids
      });
      var endBlock = Editor.above(editor, {
        match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6),
        at: end2,
        voids
      });
      var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);
      var isSingleText = Path.equals(start2.path, end2.path);
      var startNonEditable = voids ? null : (_Editor$void = Editor.void(editor, {
        at: start2,
        mode: "highest"
      })) !== null && _Editor$void !== void 0 ? _Editor$void : Editor.elementReadOnly(editor, {
        at: start2,
        mode: "highest"
      });
      var endNonEditable = voids ? null : (_Editor$void2 = Editor.void(editor, {
        at: end2,
        mode: "highest"
      })) !== null && _Editor$void2 !== void 0 ? _Editor$void2 : Editor.elementReadOnly(editor, {
        at: end2,
        mode: "highest"
      });
      if (startNonEditable) {
        var before3 = Editor.before(editor, start2);
        if (before3 && startBlock && Path.isAncestor(startBlock[1], before3.path)) {
          start2 = before3;
        }
      }
      if (endNonEditable) {
        var after3 = Editor.after(editor, end2);
        if (after3 && endBlock && Path.isAncestor(endBlock[1], after3.path)) {
          end2 = after3;
        }
      }
      var matches = [];
      var lastPath;
      for (var entry of Editor.nodes(editor, {
        at,
        voids
      })) {
        var [node5, path4] = entry;
        if (lastPath && Path.compare(path4, lastPath) === 0) {
          continue;
        }
        if (!voids && Element2.isElement(node5) && (Editor.isVoid(editor, node5) || Editor.isElementReadOnly(editor, node5)) || !Path.isCommon(path4, start2.path) && !Path.isCommon(path4, end2.path)) {
          matches.push(entry);
          lastPath = path4;
        }
      }
      var pathRefs2 = Array.from(matches, (_ref) => {
        var [, p3] = _ref;
        return Editor.pathRef(editor, p3);
      });
      var startRef = Editor.pointRef(editor, start2);
      var endRef = Editor.pointRef(editor, end2);
      var removedText = "";
      if (!isSingleText && !startNonEditable) {
        var _point = startRef.current;
        var [_node] = Editor.leaf(editor, _point);
        var {
          path: _path
        } = _point;
        var {
          offset: offset3
        } = start2;
        var text4 = _node.text.slice(offset3);
        if (text4.length > 0) {
          editor.apply({
            type: "remove_text",
            path: _path,
            offset: offset3,
            text: text4
          });
          removedText = text4;
        }
      }
      pathRefs2.reverse().map((r3) => r3.unref()).filter((r3) => r3 !== null).forEach((p3) => Transforms.removeNodes(editor, {
        at: p3,
        voids
      }));
      if (!endNonEditable) {
        var _point2 = endRef.current;
        var [_node2] = Editor.leaf(editor, _point2);
        var {
          path: _path2
        } = _point2;
        var _offset = isSingleText ? start2.offset : 0;
        var _text = _node2.text.slice(_offset, end2.offset);
        if (_text.length > 0) {
          editor.apply({
            type: "remove_text",
            path: _path2,
            offset: _offset,
            text: _text
          });
          removedText = _text;
        }
      }
      if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {
        Transforms.mergeNodes(editor, {
          at: endRef.current,
          hanging: true,
          voids
        });
      }
      if (isCollapsed && reverse && unit === "character" && removedText.length > 1 && removedText.match(/[\u0E00-\u0E7F]+/)) {
        Transforms.insertText(editor, removedText.slice(0, removedText.length - distance));
      }
      var startUnref = startRef.unref();
      var endUnref = endRef.unref();
      var point6 = reverse ? startUnref || endUnref : endUnref || startUnref;
      if (options.at == null && point6) {
        Transforms.select(editor, point6);
      }
    });
  };
  var insertFragment = function insertFragment2(editor, fragment2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    Editor.withoutNormalizing(editor, () => {
      var {
        hanging = false,
        voids = false
      } = options;
      var {
        at = getDefaultInsertLocation(editor)
      } = options;
      if (!fragment2.length) {
        return;
      }
      if (Range.isRange(at)) {
        if (!hanging) {
          at = Editor.unhangRange(editor, at, {
            voids
          });
        }
        if (Range.isCollapsed(at)) {
          at = at.anchor;
        } else {
          var [, end2] = Range.edges(at);
          if (!voids && Editor.void(editor, {
            at: end2
          })) {
            return;
          }
          var pointRef3 = Editor.pointRef(editor, end2);
          Transforms.delete(editor, {
            at
          });
          at = pointRef3.unref();
        }
      } else if (Path.isPath(at)) {
        at = Editor.start(editor, at);
      }
      if (!voids && Editor.void(editor, {
        at
      })) {
        return;
      }
      var inlineElementMatch = Editor.above(editor, {
        at,
        match: (n6) => Element2.isElement(n6) && Editor.isInline(editor, n6),
        mode: "highest",
        voids
      });
      if (inlineElementMatch) {
        var [, _inlinePath] = inlineElementMatch;
        if (Editor.isEnd(editor, at, _inlinePath)) {
          var after3 = Editor.after(editor, _inlinePath);
          at = after3;
        } else if (Editor.isStart(editor, at, _inlinePath)) {
          var before3 = Editor.before(editor, _inlinePath);
          at = before3;
        }
      }
      var blockMatch = Editor.above(editor, {
        match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6),
        at,
        voids
      });
      var [, blockPath] = blockMatch;
      var isBlockStart = Editor.isStart(editor, at, blockPath);
      var isBlockEnd = Editor.isEnd(editor, at, blockPath);
      var isBlockEmpty = isBlockStart && isBlockEnd;
      var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;
      var mergeEnd = !isBlockEnd;
      var [, firstPath] = Node2.first({
        children: fragment2
      }, []);
      var [, lastPath] = Node2.last({
        children: fragment2
      }, []);
      var matches = [];
      var matcher = (_ref) => {
        var [n6, p3] = _ref;
        var isRoot = p3.length === 0;
        if (isRoot) {
          return false;
        }
        if (isBlockEmpty) {
          return true;
        }
        if (mergeStart && Path.isAncestor(p3, firstPath) && Element2.isElement(n6) && !editor.isVoid(n6) && !editor.isInline(n6)) {
          return false;
        }
        if (mergeEnd && Path.isAncestor(p3, lastPath) && Element2.isElement(n6) && !editor.isVoid(n6) && !editor.isInline(n6)) {
          return false;
        }
        return true;
      };
      for (var entry of Node2.nodes({
        children: fragment2
      }, {
        pass: matcher
      })) {
        if (matcher(entry)) {
          matches.push(entry);
        }
      }
      var starts = [];
      var middles = [];
      var ends = [];
      var starting = true;
      var hasBlocks2 = false;
      for (var [node5] of matches) {
        if (Element2.isElement(node5) && !editor.isInline(node5)) {
          starting = false;
          hasBlocks2 = true;
          middles.push(node5);
        } else if (starting) {
          starts.push(node5);
        } else {
          ends.push(node5);
        }
      }
      var [inlineMatch] = Editor.nodes(editor, {
        at,
        match: (n6) => Text2.isText(n6) || Editor.isInline(editor, n6),
        mode: "highest",
        voids
      });
      var [, inlinePath] = inlineMatch;
      var isInlineStart = Editor.isStart(editor, at, inlinePath);
      var isInlineEnd = Editor.isEnd(editor, at, inlinePath);
      var middleRef = Editor.pathRef(editor, isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath);
      var endRef = Editor.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);
      Transforms.splitNodes(editor, {
        at,
        match: (n6) => hasBlocks2 ? Element2.isElement(n6) && Editor.isBlock(editor, n6) : Text2.isText(n6) || Editor.isInline(editor, n6),
        mode: hasBlocks2 ? "lowest" : "highest",
        always: hasBlocks2 && (!isBlockStart || starts.length > 0) && (!isBlockEnd || ends.length > 0),
        voids
      });
      var startRef = Editor.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);
      Transforms.insertNodes(editor, starts, {
        at: startRef.current,
        match: (n6) => Text2.isText(n6) || Editor.isInline(editor, n6),
        mode: "highest",
        voids
      });
      if (isBlockEmpty && !starts.length && middles.length && !ends.length) {
        Transforms.delete(editor, {
          at: blockPath,
          voids
        });
      }
      Transforms.insertNodes(editor, middles, {
        at: middleRef.current,
        match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6),
        mode: "lowest",
        voids
      });
      Transforms.insertNodes(editor, ends, {
        at: endRef.current,
        match: (n6) => Text2.isText(n6) || Editor.isInline(editor, n6),
        mode: "highest",
        voids
      });
      if (!options.at) {
        var path4;
        if (ends.length > 0 && endRef.current) {
          path4 = Path.previous(endRef.current);
        } else if (middles.length > 0 && middleRef.current) {
          path4 = Path.previous(middleRef.current);
        } else if (startRef.current) {
          path4 = Path.previous(startRef.current);
        }
        if (path4) {
          var _end = Editor.end(editor, path4);
          Transforms.select(editor, _end);
        }
      }
      startRef.unref();
      middleRef.unref();
      endRef.unref();
    });
  };
  var collapse = function collapse2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      edge = "anchor"
    } = options;
    var {
      selection
    } = editor;
    if (!selection) {
      return;
    } else if (edge === "anchor") {
      Transforms.select(editor, selection.anchor);
    } else if (edge === "focus") {
      Transforms.select(editor, selection.focus);
    } else if (edge === "start") {
      var [start2] = Range.edges(selection);
      Transforms.select(editor, start2);
    } else if (edge === "end") {
      var [, end2] = Range.edges(selection);
      Transforms.select(editor, end2);
    }
  };
  var deselect = (editor) => {
    var {
      selection
    } = editor;
    if (selection) {
      editor.apply({
        type: "set_selection",
        properties: selection,
        newProperties: null
      });
    }
  };
  var move = function move2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      selection
    } = editor;
    var {
      distance = 1,
      unit = "character",
      reverse = false
    } = options;
    var {
      edge = null
    } = options;
    if (!selection) {
      return;
    }
    if (edge === "start") {
      edge = Range.isBackward(selection) ? "focus" : "anchor";
    }
    if (edge === "end") {
      edge = Range.isBackward(selection) ? "anchor" : "focus";
    }
    var {
      anchor: anchor2,
      focus
    } = selection;
    var opts = {
      distance,
      unit,
      ignoreNonSelectable: true
    };
    var props = {};
    if (edge == null || edge === "anchor") {
      var point6 = reverse ? Editor.before(editor, anchor2, opts) : Editor.after(editor, anchor2, opts);
      if (point6) {
        props.anchor = point6;
      }
    }
    if (edge == null || edge === "focus") {
      var _point = reverse ? Editor.before(editor, focus, opts) : Editor.after(editor, focus, opts);
      if (_point) {
        props.focus = _point;
      }
    }
    Transforms.setSelection(editor, props);
  };
  var select = (editor, target) => {
    var {
      selection
    } = editor;
    target = Editor.range(editor, target);
    if (selection) {
      Transforms.setSelection(editor, target);
      return;
    }
    if (!Range.isRange(target)) {
      throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(Scrubber.stringify(target)));
    }
    editor.apply({
      type: "set_selection",
      properties: selection,
      newProperties: target
    });
  };
  function ownKeys$1(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$1(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$1(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var setPoint = function setPoint2(editor, props) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      selection
    } = editor;
    var {
      edge = "both"
    } = options;
    if (!selection) {
      return;
    }
    if (edge === "start") {
      edge = Range.isBackward(selection) ? "focus" : "anchor";
    }
    if (edge === "end") {
      edge = Range.isBackward(selection) ? "anchor" : "focus";
    }
    var {
      anchor: anchor2,
      focus
    } = selection;
    var point6 = edge === "anchor" ? anchor2 : focus;
    Transforms.setSelection(editor, {
      [edge === "anchor" ? "anchor" : "focus"]: _objectSpread$1(_objectSpread$1({}, point6), props)
    });
  };
  var setSelection = (editor, props) => {
    var {
      selection
    } = editor;
    var oldProps = {};
    var newProps = {};
    if (!selection) {
      return;
    }
    for (var k2 in props) {
      if (k2 === "anchor" && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k2 === "focus" && props.focus != null && !Point.equals(props.focus, selection.focus) || k2 !== "anchor" && k2 !== "focus" && props[k2] !== selection[k2]) {
        oldProps[k2] = selection[k2];
        newProps[k2] = props[k2];
      }
    }
    if (Object.keys(oldProps).length > 0) {
      editor.apply({
        type: "set_selection",
        properties: oldProps,
        newProperties: newProps
      });
    }
  };
  var insertNodes = function insertNodes2(editor, nodes2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    Editor.withoutNormalizing(editor, () => {
      var {
        hanging = false,
        voids = false,
        mode = "lowest"
      } = options;
      var {
        at,
        match: match2,
        select: select2
      } = options;
      if (Node2.isNode(nodes2)) {
        nodes2 = [nodes2];
      }
      if (nodes2.length === 0) {
        return;
      }
      var [node5] = nodes2;
      if (!at) {
        at = getDefaultInsertLocation(editor);
        select2 = true;
      }
      if (select2 == null) {
        select2 = false;
      }
      if (Range.isRange(at)) {
        if (!hanging) {
          at = Editor.unhangRange(editor, at, {
            voids
          });
        }
        if (Range.isCollapsed(at)) {
          at = at.anchor;
        } else {
          var [, end2] = Range.edges(at);
          var pointRef3 = Editor.pointRef(editor, end2);
          Transforms.delete(editor, {
            at
          });
          at = pointRef3.unref();
        }
      }
      if (Point.isPoint(at)) {
        if (match2 == null) {
          if (Text2.isText(node5)) {
            match2 = (n6) => Text2.isText(n6);
          } else if (editor.isInline(node5)) {
            match2 = (n6) => Text2.isText(n6) || Editor.isInline(editor, n6);
          } else {
            match2 = (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6);
          }
        }
        var [entry] = Editor.nodes(editor, {
          at: at.path,
          match: match2,
          mode,
          voids
        });
        if (entry) {
          var [, matchPath3] = entry;
          var pathRef3 = Editor.pathRef(editor, matchPath3);
          var isAtEnd = Editor.isEnd(editor, at, matchPath3);
          Transforms.splitNodes(editor, {
            at,
            match: match2,
            mode,
            voids
          });
          var path4 = pathRef3.unref();
          at = isAtEnd ? Path.next(path4) : path4;
        } else {
          return;
        }
      }
      var parentPath = Path.parent(at);
      var index2 = at[at.length - 1];
      if (!voids && Editor.void(editor, {
        at: parentPath
      })) {
        return;
      }
      for (var _node of nodes2) {
        var _path = parentPath.concat(index2);
        index2++;
        editor.apply({
          type: "insert_node",
          path: _path,
          node: _node
        });
        at = Path.next(at);
      }
      at = Path.previous(at);
      if (select2) {
        var point6 = Editor.end(editor, at);
        if (point6) {
          Transforms.select(editor, point6);
        }
      }
    });
  };
  var liftNodes = function liftNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor.withoutNormalizing(editor, () => {
      var {
        at = editor.selection,
        mode = "lowest",
        voids = false
      } = options;
      var {
        match: match2
      } = options;
      if (match2 == null) {
        match2 = Path.isPath(at) ? matchPath2(editor, at) : (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6);
      }
      if (!at) {
        return;
      }
      var matches = Editor.nodes(editor, {
        at,
        match: match2,
        mode,
        voids
      });
      var pathRefs2 = Array.from(matches, (_ref) => {
        var [, p3] = _ref;
        return Editor.pathRef(editor, p3);
      });
      for (var pathRef3 of pathRefs2) {
        var path4 = pathRef3.unref();
        if (path4.length < 2) {
          throw new Error("Cannot lift node at a path [".concat(path4, "] because it has a depth of less than `2`."));
        }
        var parentNodeEntry = Editor.node(editor, Path.parent(path4));
        var [parent3, parentPath] = parentNodeEntry;
        var index2 = path4[path4.length - 1];
        var {
          length: length2
        } = parent3.children;
        if (length2 === 1) {
          var toPath = Path.next(parentPath);
          Transforms.moveNodes(editor, {
            at: path4,
            to: toPath,
            voids
          });
          Transforms.removeNodes(editor, {
            at: parentPath,
            voids
          });
        } else if (index2 === 0) {
          Transforms.moveNodes(editor, {
            at: path4,
            to: parentPath,
            voids
          });
        } else if (index2 === length2 - 1) {
          var _toPath = Path.next(parentPath);
          Transforms.moveNodes(editor, {
            at: path4,
            to: _toPath,
            voids
          });
        } else {
          var splitPath2 = Path.next(path4);
          var _toPath2 = Path.next(parentPath);
          Transforms.splitNodes(editor, {
            at: splitPath2,
            voids
          });
          Transforms.moveNodes(editor, {
            at: path4,
            to: _toPath2,
            voids
          });
        }
      }
    });
  };
  var _excluded4 = ["text"];
  var _excluded22 = ["children"];
  var hasSingleChildNest = (editor, node5) => {
    if (Element2.isElement(node5)) {
      var element2 = node5;
      if (Editor.isVoid(editor, node5)) {
        return true;
      } else if (element2.children.length === 1) {
        return hasSingleChildNest(editor, element2.children[0]);
      } else {
        return false;
      }
    } else if (Editor.isEditor(node5)) {
      return false;
    } else {
      return true;
    }
  };
  var mergeNodes = function mergeNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor.withoutNormalizing(editor, () => {
      var {
        match: match2,
        at = editor.selection
      } = options;
      var {
        hanging = false,
        voids = false,
        mode = "lowest"
      } = options;
      if (!at) {
        return;
      }
      if (match2 == null) {
        if (Path.isPath(at)) {
          var [parent3] = Editor.parent(editor, at);
          match2 = (n6) => parent3.children.includes(n6);
        } else {
          match2 = (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6);
        }
      }
      if (!hanging && Range.isRange(at)) {
        at = Editor.unhangRange(editor, at, {
          voids
        });
      }
      if (Range.isRange(at)) {
        if (Range.isCollapsed(at)) {
          at = at.anchor;
        } else {
          var [, end2] = Range.edges(at);
          var pointRef3 = Editor.pointRef(editor, end2);
          Transforms.delete(editor, {
            at
          });
          at = pointRef3.unref();
          if (options.at == null) {
            Transforms.select(editor, at);
          }
        }
      }
      var [current] = Editor.nodes(editor, {
        at,
        match: match2,
        voids,
        mode
      });
      var prev2 = Editor.previous(editor, {
        at,
        match: match2,
        voids,
        mode
      });
      if (!current || !prev2) {
        return;
      }
      var [node5, path4] = current;
      var [prevNode, prevPath] = prev2;
      if (path4.length === 0 || prevPath.length === 0) {
        return;
      }
      var newPath = Path.next(prevPath);
      var commonPath = Path.common(path4, prevPath);
      var isPreviousSibling = Path.isSibling(path4, prevPath);
      var levels2 = Array.from(Editor.levels(editor, {
        at: path4
      }), (_ref) => {
        var [n6] = _ref;
        return n6;
      }).slice(commonPath.length).slice(0, -1);
      var emptyAncestor = Editor.above(editor, {
        at: path4,
        mode: "highest",
        match: (n6) => levels2.includes(n6) && hasSingleChildNest(editor, n6)
      });
      var emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1]);
      var properties;
      var position4;
      if (Text2.isText(node5) && Text2.isText(prevNode)) {
        var rest = _objectWithoutProperties(node5, _excluded4);
        position4 = prevNode.text.length;
        properties = rest;
      } else if (Element2.isElement(node5) && Element2.isElement(prevNode)) {
        var rest = _objectWithoutProperties(node5, _excluded22);
        position4 = prevNode.children.length;
        properties = rest;
      } else {
        throw new Error("Cannot merge the node at path [".concat(path4, "] with the previous sibling because it is not the same kind: ").concat(Scrubber.stringify(node5), " ").concat(Scrubber.stringify(prevNode)));
      }
      if (!isPreviousSibling) {
        Transforms.moveNodes(editor, {
          at: path4,
          to: newPath,
          voids
        });
      }
      if (emptyRef) {
        Transforms.removeNodes(editor, {
          at: emptyRef.current,
          voids
        });
      }
      if (Element2.isElement(prevNode) && Editor.isEmpty(editor, prevNode) || Text2.isText(prevNode) && prevNode.text === "" && prevPath[prevPath.length - 1] !== 0) {
        Transforms.removeNodes(editor, {
          at: prevPath,
          voids
        });
      } else {
        editor.apply({
          type: "merge_node",
          path: newPath,
          position: position4,
          properties
        });
      }
      if (emptyRef) {
        emptyRef.unref();
      }
    });
  };
  var moveNodes = (editor, options) => {
    Editor.withoutNormalizing(editor, () => {
      var {
        to,
        at = editor.selection,
        mode = "lowest",
        voids = false
      } = options;
      var {
        match: match2
      } = options;
      if (!at) {
        return;
      }
      if (match2 == null) {
        match2 = Path.isPath(at) ? matchPath2(editor, at) : (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6);
      }
      var toRef = Editor.pathRef(editor, to);
      var targets = Editor.nodes(editor, {
        at,
        match: match2,
        mode,
        voids
      });
      var pathRefs2 = Array.from(targets, (_ref) => {
        var [, p3] = _ref;
        return Editor.pathRef(editor, p3);
      });
      for (var pathRef3 of pathRefs2) {
        var path4 = pathRef3.unref();
        var newPath = toRef.current;
        if (path4.length !== 0) {
          editor.apply({
            type: "move_node",
            path: path4,
            newPath
          });
        }
        if (toRef.current && Path.isSibling(newPath, path4) && Path.isAfter(newPath, path4)) {
          toRef.current = Path.next(toRef.current);
        }
      }
      toRef.unref();
    });
  };
  var removeNodes = function removeNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor.withoutNormalizing(editor, () => {
      var {
        hanging = false,
        voids = false,
        mode = "lowest"
      } = options;
      var {
        at = editor.selection,
        match: match2
      } = options;
      if (!at) {
        return;
      }
      if (match2 == null) {
        match2 = Path.isPath(at) ? matchPath2(editor, at) : (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6);
      }
      if (!hanging && Range.isRange(at)) {
        at = Editor.unhangRange(editor, at, {
          voids
        });
      }
      var depths = Editor.nodes(editor, {
        at,
        match: match2,
        mode,
        voids
      });
      var pathRefs2 = Array.from(depths, (_ref) => {
        var [, p3] = _ref;
        return Editor.pathRef(editor, p3);
      });
      for (var pathRef3 of pathRefs2) {
        var path4 = pathRef3.unref();
        if (path4) {
          var [node5] = Editor.node(editor, path4);
          editor.apply({
            type: "remove_node",
            path: path4,
            node: node5
          });
        }
      }
    });
  };
  var setNodes = function setNodes2(editor, props) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    Editor.withoutNormalizing(editor, () => {
      var {
        match: match2,
        at = editor.selection,
        compare,
        merge: merge3
      } = options;
      var {
        hanging = false,
        mode = "lowest",
        split = false,
        voids = false
      } = options;
      if (!at) {
        return;
      }
      if (match2 == null) {
        match2 = Path.isPath(at) ? matchPath2(editor, at) : (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6);
      }
      if (!hanging && Range.isRange(at)) {
        at = Editor.unhangRange(editor, at, {
          voids
        });
      }
      if (split && Range.isRange(at)) {
        if (Range.isCollapsed(at) && Editor.leaf(editor, at.anchor)[0].text.length > 0) {
          return;
        }
        var rangeRef3 = Editor.rangeRef(editor, at, {
          affinity: "inward"
        });
        var [start2, end2] = Range.edges(at);
        var splitMode = mode === "lowest" ? "lowest" : "highest";
        var endAtEndOfNode = Editor.isEnd(editor, end2, end2.path);
        Transforms.splitNodes(editor, {
          at: end2,
          match: match2,
          mode: splitMode,
          voids,
          always: !endAtEndOfNode
        });
        var startAtStartOfNode = Editor.isStart(editor, start2, start2.path);
        Transforms.splitNodes(editor, {
          at: start2,
          match: match2,
          mode: splitMode,
          voids,
          always: !startAtStartOfNode
        });
        at = rangeRef3.unref();
        if (options.at == null) {
          Transforms.select(editor, at);
        }
      }
      if (!compare) {
        compare = (prop, nodeProp) => prop !== nodeProp;
      }
      for (var [node5, path4] of Editor.nodes(editor, {
        at,
        match: match2,
        mode,
        voids
      })) {
        var properties = {};
        var newProperties = {};
        if (path4.length === 0) {
          continue;
        }
        var hasChanges = false;
        for (var k2 in props) {
          if (k2 === "children" || k2 === "text") {
            continue;
          }
          if (compare(props[k2], node5[k2])) {
            hasChanges = true;
            if (node5.hasOwnProperty(k2))
              properties[k2] = node5[k2];
            if (merge3) {
              if (props[k2] != null)
                newProperties[k2] = merge3(node5[k2], props[k2]);
            } else {
              if (props[k2] != null)
                newProperties[k2] = props[k2];
            }
          }
        }
        if (hasChanges) {
          editor.apply({
            type: "set_node",
            path: path4,
            properties,
            newProperties
          });
        }
      }
    });
  };
  var deleteRange = (editor, range2) => {
    if (Range.isCollapsed(range2)) {
      return range2.anchor;
    } else {
      var [, end2] = Range.edges(range2);
      var pointRef3 = Editor.pointRef(editor, end2);
      Transforms.delete(editor, {
        at: range2
      });
      return pointRef3.unref();
    }
  };
  var splitNodes = function splitNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor.withoutNormalizing(editor, () => {
      var {
        mode = "lowest",
        voids = false
      } = options;
      var {
        match: match2,
        at = editor.selection,
        height = 0,
        always: always2 = false
      } = options;
      if (match2 == null) {
        match2 = (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6);
      }
      if (Range.isRange(at)) {
        at = deleteRange(editor, at);
      }
      if (Path.isPath(at)) {
        var path4 = at;
        var point6 = Editor.point(editor, path4);
        var [parent3] = Editor.parent(editor, path4);
        match2 = (n6) => n6 === parent3;
        height = point6.path.length - path4.length + 1;
        at = point6;
        always2 = true;
      }
      if (!at) {
        return;
      }
      var beforeRef = Editor.pointRef(editor, at, {
        affinity: "backward"
      });
      var afterRef;
      try {
        var [highest] = Editor.nodes(editor, {
          at,
          match: match2,
          mode,
          voids
        });
        if (!highest) {
          return;
        }
        var voidMatch = Editor.void(editor, {
          at,
          mode: "highest"
        });
        var nudge = 0;
        if (!voids && voidMatch) {
          var [voidNode, voidPath] = voidMatch;
          if (Element2.isElement(voidNode) && editor.isInline(voidNode)) {
            var after3 = Editor.after(editor, voidPath);
            if (!after3) {
              var text4 = {
                text: ""
              };
              var afterPath = Path.next(voidPath);
              Transforms.insertNodes(editor, text4, {
                at: afterPath,
                voids
              });
              after3 = Editor.point(editor, afterPath);
            }
            at = after3;
            always2 = true;
          }
          var siblingHeight = at.path.length - voidPath.length;
          height = siblingHeight + 1;
          always2 = true;
        }
        afterRef = Editor.pointRef(editor, at);
        var depth = at.path.length - height;
        var [, highestPath] = highest;
        var lowestPath = at.path.slice(0, depth);
        var position4 = height === 0 ? at.offset : at.path[depth] + nudge;
        for (var [node5, _path] of Editor.levels(editor, {
          at: lowestPath,
          reverse: true,
          voids
        })) {
          var split = false;
          if (_path.length < highestPath.length || _path.length === 0 || !voids && Element2.isElement(node5) && Editor.isVoid(editor, node5)) {
            break;
          }
          var _point = beforeRef.current;
          var isEnd2 = Editor.isEnd(editor, _point, _path);
          if (always2 || !beforeRef || !Editor.isEdge(editor, _point, _path)) {
            split = true;
            var properties = Node2.extractProps(node5);
            editor.apply({
              type: "split_node",
              path: _path,
              position: position4,
              properties
            });
          }
          position4 = _path[_path.length - 1] + (split || isEnd2 ? 1 : 0);
        }
        if (options.at == null) {
          var _point2 = afterRef.current || Editor.end(editor, []);
          Transforms.select(editor, _point2);
        }
      } finally {
        var _afterRef;
        beforeRef.unref();
        (_afterRef = afterRef) === null || _afterRef === void 0 ? void 0 : _afterRef.unref();
      }
    });
  };
  var unsetNodes = function unsetNodes2(editor, props) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (!Array.isArray(props)) {
      props = [props];
    }
    var obj = {};
    for (var key of props) {
      obj[key] = null;
    }
    Transforms.setNodes(editor, obj, options);
  };
  var unwrapNodes = function unwrapNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor.withoutNormalizing(editor, () => {
      var {
        mode = "lowest",
        split = false,
        voids = false
      } = options;
      var {
        at = editor.selection,
        match: match2
      } = options;
      if (!at) {
        return;
      }
      if (match2 == null) {
        match2 = Path.isPath(at) ? matchPath2(editor, at) : (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6);
      }
      if (Path.isPath(at)) {
        at = Editor.range(editor, at);
      }
      var rangeRef3 = Range.isRange(at) ? Editor.rangeRef(editor, at) : null;
      var matches = Editor.nodes(editor, {
        at,
        match: match2,
        mode,
        voids
      });
      var pathRefs2 = Array.from(
        matches,
        (_ref) => {
          var [, p3] = _ref;
          return Editor.pathRef(editor, p3);
        }
        // unwrapNode will call liftNode which does not support splitting the node when nested.
        // If we do not reverse the order and call it from top to the bottom, it will remove all blocks
        // that wrap target node. So we reverse the order.
      ).reverse();
      var _loop = function _loop2(pathRef4) {
        var path4 = pathRef4.unref();
        var [node5] = Editor.node(editor, path4);
        var range2 = Editor.range(editor, path4);
        if (split && rangeRef3) {
          range2 = Range.intersection(rangeRef3.current, range2);
        }
        Transforms.liftNodes(editor, {
          at: range2,
          match: (n6) => Element2.isAncestor(node5) && node5.children.includes(n6),
          voids
        });
      };
      for (var pathRef3 of pathRefs2) {
        _loop(pathRef3);
      }
      if (rangeRef3) {
        rangeRef3.unref();
      }
    });
  };
  function ownKeys(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var wrapNodes = function wrapNodes2(editor, element2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    Editor.withoutNormalizing(editor, () => {
      var {
        mode = "lowest",
        split = false,
        voids = false
      } = options;
      var {
        match: match2,
        at = editor.selection
      } = options;
      if (!at) {
        return;
      }
      if (match2 == null) {
        if (Path.isPath(at)) {
          match2 = matchPath2(editor, at);
        } else if (editor.isInline(element2)) {
          match2 = (n6) => Element2.isElement(n6) && Editor.isInline(editor, n6) || Text2.isText(n6);
        } else {
          match2 = (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6);
        }
      }
      if (split && Range.isRange(at)) {
        var [start2, end2] = Range.edges(at);
        var rangeRef3 = Editor.rangeRef(editor, at, {
          affinity: "inward"
        });
        Transforms.splitNodes(editor, {
          at: end2,
          match: match2,
          voids
        });
        Transforms.splitNodes(editor, {
          at: start2,
          match: match2,
          voids
        });
        at = rangeRef3.unref();
        if (options.at == null) {
          Transforms.select(editor, at);
        }
      }
      var roots = Array.from(Editor.nodes(editor, {
        at,
        match: editor.isInline(element2) ? (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6) : (n6) => Editor.isEditor(n6),
        mode: "lowest",
        voids
      }));
      for (var [, rootPath] of roots) {
        var a3 = Range.isRange(at) ? Range.intersection(at, Editor.range(editor, rootPath)) : at;
        if (!a3) {
          continue;
        }
        var matches = Array.from(Editor.nodes(editor, {
          at: a3,
          match: match2,
          mode,
          voids
        }));
        if (matches.length > 0) {
          var _ret = function() {
            var [first2] = matches;
            var last2 = matches[matches.length - 1];
            var [, firstPath] = first2;
            var [, lastPath] = last2;
            if (firstPath.length === 0 && lastPath.length === 0) {
              return "continue";
            }
            var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);
            var range2 = Editor.range(editor, firstPath, lastPath);
            var commonNodeEntry = Editor.node(editor, commonPath);
            var [commonNode] = commonNodeEntry;
            var depth = commonPath.length + 1;
            var wrapperPath = Path.next(lastPath.slice(0, depth));
            var wrapper = _objectSpread(_objectSpread({}, element2), {}, {
              children: []
            });
            Transforms.insertNodes(editor, wrapper, {
              at: wrapperPath,
              voids
            });
            Transforms.moveNodes(editor, {
              at: range2,
              match: (n6) => Element2.isAncestor(commonNode) && commonNode.children.includes(n6),
              to: wrapperPath.concat(0),
              voids
            });
          }();
          if (_ret === "continue")
            continue;
        }
      }
    });
  };
  var createEditor = () => {
    var editor = {
      children: [],
      operations: [],
      selection: null,
      marks: null,
      isElementReadOnly: () => false,
      isInline: () => false,
      isSelectable: () => true,
      isVoid: () => false,
      markableVoid: () => false,
      onChange: () => {
      },
      // Core
      apply: function apply$1() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return apply(editor, ...args);
      },
      // Editor
      addMark: function addMark$1() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return addMark(editor, ...args);
      },
      deleteBackward: function deleteBackward$1() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return deleteBackward(editor, ...args);
      },
      deleteForward: function deleteForward$1() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return deleteForward(editor, ...args);
      },
      deleteFragment: function deleteFragment$1() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }
        return deleteFragment(editor, ...args);
      },
      getFragment: function getFragment$1() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }
        return getFragment(editor, ...args);
      },
      insertBreak: function insertBreak$1() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }
        return insertBreak(editor, ...args);
      },
      insertSoftBreak: function insertSoftBreak$1() {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }
        return insertSoftBreak(editor, ...args);
      },
      insertFragment: function insertFragment$1() {
        for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
          args[_key9] = arguments[_key9];
        }
        return insertFragment(editor, ...args);
      },
      insertNode: function insertNode$1() {
        for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
          args[_key10] = arguments[_key10];
        }
        return insertNode(editor, ...args);
      },
      insertText: function insertText$1() {
        for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
          args[_key11] = arguments[_key11];
        }
        return insertText(editor, ...args);
      },
      normalizeNode: function normalizeNode$1() {
        for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
          args[_key12] = arguments[_key12];
        }
        return normalizeNode(editor, ...args);
      },
      removeMark: function removeMark$1() {
        for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
          args[_key13] = arguments[_key13];
        }
        return removeMark(editor, ...args);
      },
      getDirtyPaths: function getDirtyPaths$1() {
        for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
          args[_key14] = arguments[_key14];
        }
        return getDirtyPaths(editor, ...args);
      },
      shouldNormalize: function shouldNormalize$1() {
        for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
          args[_key15] = arguments[_key15];
        }
        return shouldNormalize(editor, ...args);
      },
      // Editor interface
      above: function above$1() {
        for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
          args[_key16] = arguments[_key16];
        }
        return above(editor, ...args);
      },
      after: function after$1() {
        for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
          args[_key17] = arguments[_key17];
        }
        return after(editor, ...args);
      },
      before: function before$1() {
        for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
          args[_key18] = arguments[_key18];
        }
        return before(editor, ...args);
      },
      collapse: function collapse$1() {
        for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
          args[_key19] = arguments[_key19];
        }
        return collapse(editor, ...args);
      },
      delete: function _delete() {
        for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
          args[_key20] = arguments[_key20];
        }
        return deleteText(editor, ...args);
      },
      deselect: function deselect$1() {
        for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
          args[_key21] = arguments[_key21];
        }
        return deselect(editor, ...args);
      },
      edges: function edges$1() {
        for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
          args[_key22] = arguments[_key22];
        }
        return edges(editor, ...args);
      },
      elementReadOnly: function elementReadOnly$1() {
        for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
          args[_key23] = arguments[_key23];
        }
        return elementReadOnly(editor, ...args);
      },
      end: function end$1() {
        for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
          args[_key24] = arguments[_key24];
        }
        return end(editor, ...args);
      },
      first: function first$1() {
        for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
          args[_key25] = arguments[_key25];
        }
        return first(editor, ...args);
      },
      fragment: function fragment$1() {
        for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
          args[_key26] = arguments[_key26];
        }
        return fragment(editor, ...args);
      },
      getMarks: function getMarks() {
        for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {
          args[_key27] = arguments[_key27];
        }
        return marks(editor, ...args);
      },
      hasBlocks: function hasBlocks$1() {
        for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {
          args[_key28] = arguments[_key28];
        }
        return hasBlocks(editor, ...args);
      },
      hasInlines: function hasInlines$1() {
        for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {
          args[_key29] = arguments[_key29];
        }
        return hasInlines(editor, ...args);
      },
      hasPath: function hasPath$1() {
        for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {
          args[_key30] = arguments[_key30];
        }
        return hasPath(editor, ...args);
      },
      hasTexts: function hasTexts$1() {
        for (var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++) {
          args[_key31] = arguments[_key31];
        }
        return hasTexts(editor, ...args);
      },
      insertNodes: function insertNodes$1() {
        for (var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++) {
          args[_key32] = arguments[_key32];
        }
        return insertNodes(editor, ...args);
      },
      isBlock: function isBlock$1() {
        for (var _len33 = arguments.length, args = new Array(_len33), _key33 = 0; _key33 < _len33; _key33++) {
          args[_key33] = arguments[_key33];
        }
        return isBlock(editor, ...args);
      },
      isEdge: function isEdge$1() {
        for (var _len34 = arguments.length, args = new Array(_len34), _key34 = 0; _key34 < _len34; _key34++) {
          args[_key34] = arguments[_key34];
        }
        return isEdge(editor, ...args);
      },
      isEmpty: function isEmpty$1() {
        for (var _len35 = arguments.length, args = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++) {
          args[_key35] = arguments[_key35];
        }
        return isEmpty(editor, ...args);
      },
      isEnd: function isEnd$1() {
        for (var _len36 = arguments.length, args = new Array(_len36), _key36 = 0; _key36 < _len36; _key36++) {
          args[_key36] = arguments[_key36];
        }
        return isEnd(editor, ...args);
      },
      isNormalizing: function isNormalizing$1() {
        for (var _len37 = arguments.length, args = new Array(_len37), _key37 = 0; _key37 < _len37; _key37++) {
          args[_key37] = arguments[_key37];
        }
        return isNormalizing(editor, ...args);
      },
      isStart: function isStart$1() {
        for (var _len38 = arguments.length, args = new Array(_len38), _key38 = 0; _key38 < _len38; _key38++) {
          args[_key38] = arguments[_key38];
        }
        return isStart(editor, ...args);
      },
      last: function last$1() {
        for (var _len39 = arguments.length, args = new Array(_len39), _key39 = 0; _key39 < _len39; _key39++) {
          args[_key39] = arguments[_key39];
        }
        return last(editor, ...args);
      },
      leaf: function leaf$1() {
        for (var _len40 = arguments.length, args = new Array(_len40), _key40 = 0; _key40 < _len40; _key40++) {
          args[_key40] = arguments[_key40];
        }
        return leaf(editor, ...args);
      },
      levels: function levels$1() {
        for (var _len41 = arguments.length, args = new Array(_len41), _key41 = 0; _key41 < _len41; _key41++) {
          args[_key41] = arguments[_key41];
        }
        return levels(editor, ...args);
      },
      liftNodes: function liftNodes$1() {
        for (var _len42 = arguments.length, args = new Array(_len42), _key42 = 0; _key42 < _len42; _key42++) {
          args[_key42] = arguments[_key42];
        }
        return liftNodes(editor, ...args);
      },
      mergeNodes: function mergeNodes$1() {
        for (var _len43 = arguments.length, args = new Array(_len43), _key43 = 0; _key43 < _len43; _key43++) {
          args[_key43] = arguments[_key43];
        }
        return mergeNodes(editor, ...args);
      },
      move: function move$1() {
        for (var _len44 = arguments.length, args = new Array(_len44), _key44 = 0; _key44 < _len44; _key44++) {
          args[_key44] = arguments[_key44];
        }
        return move(editor, ...args);
      },
      moveNodes: function moveNodes$1() {
        for (var _len45 = arguments.length, args = new Array(_len45), _key45 = 0; _key45 < _len45; _key45++) {
          args[_key45] = arguments[_key45];
        }
        return moveNodes(editor, ...args);
      },
      next: function next$1() {
        for (var _len46 = arguments.length, args = new Array(_len46), _key46 = 0; _key46 < _len46; _key46++) {
          args[_key46] = arguments[_key46];
        }
        return next2(editor, ...args);
      },
      node: function node$1() {
        for (var _len47 = arguments.length, args = new Array(_len47), _key47 = 0; _key47 < _len47; _key47++) {
          args[_key47] = arguments[_key47];
        }
        return node2(editor, ...args);
      },
      nodes: function nodes$1() {
        for (var _len48 = arguments.length, args = new Array(_len48), _key48 = 0; _key48 < _len48; _key48++) {
          args[_key48] = arguments[_key48];
        }
        return nodes(editor, ...args);
      },
      normalize: function normalize$1() {
        for (var _len49 = arguments.length, args = new Array(_len49), _key49 = 0; _key49 < _len49; _key49++) {
          args[_key49] = arguments[_key49];
        }
        return normalize3(editor, ...args);
      },
      parent: function parent$1() {
        for (var _len50 = arguments.length, args = new Array(_len50), _key50 = 0; _key50 < _len50; _key50++) {
          args[_key50] = arguments[_key50];
        }
        return parent(editor, ...args);
      },
      path: function path$1() {
        for (var _len51 = arguments.length, args = new Array(_len51), _key51 = 0; _key51 < _len51; _key51++) {
          args[_key51] = arguments[_key51];
        }
        return path(editor, ...args);
      },
      pathRef: function pathRef$1() {
        for (var _len52 = arguments.length, args = new Array(_len52), _key52 = 0; _key52 < _len52; _key52++) {
          args[_key52] = arguments[_key52];
        }
        return pathRef(editor, ...args);
      },
      pathRefs: function pathRefs$1() {
        for (var _len53 = arguments.length, args = new Array(_len53), _key53 = 0; _key53 < _len53; _key53++) {
          args[_key53] = arguments[_key53];
        }
        return pathRefs(editor, ...args);
      },
      point: function point$1() {
        for (var _len54 = arguments.length, args = new Array(_len54), _key54 = 0; _key54 < _len54; _key54++) {
          args[_key54] = arguments[_key54];
        }
        return point(editor, ...args);
      },
      pointRef: function pointRef$1() {
        for (var _len55 = arguments.length, args = new Array(_len55), _key55 = 0; _key55 < _len55; _key55++) {
          args[_key55] = arguments[_key55];
        }
        return pointRef(editor, ...args);
      },
      pointRefs: function pointRefs$1() {
        for (var _len56 = arguments.length, args = new Array(_len56), _key56 = 0; _key56 < _len56; _key56++) {
          args[_key56] = arguments[_key56];
        }
        return pointRefs(editor, ...args);
      },
      positions: function positions$1() {
        for (var _len57 = arguments.length, args = new Array(_len57), _key57 = 0; _key57 < _len57; _key57++) {
          args[_key57] = arguments[_key57];
        }
        return positions(editor, ...args);
      },
      previous: function previous$1() {
        for (var _len58 = arguments.length, args = new Array(_len58), _key58 = 0; _key58 < _len58; _key58++) {
          args[_key58] = arguments[_key58];
        }
        return previous(editor, ...args);
      },
      range: function range$1() {
        for (var _len59 = arguments.length, args = new Array(_len59), _key59 = 0; _key59 < _len59; _key59++) {
          args[_key59] = arguments[_key59];
        }
        return range(editor, ...args);
      },
      rangeRef: function rangeRef$1() {
        for (var _len60 = arguments.length, args = new Array(_len60), _key60 = 0; _key60 < _len60; _key60++) {
          args[_key60] = arguments[_key60];
        }
        return rangeRef(editor, ...args);
      },
      rangeRefs: function rangeRefs$1() {
        for (var _len61 = arguments.length, args = new Array(_len61), _key61 = 0; _key61 < _len61; _key61++) {
          args[_key61] = arguments[_key61];
        }
        return rangeRefs(editor, ...args);
      },
      removeNodes: function removeNodes$1() {
        for (var _len62 = arguments.length, args = new Array(_len62), _key62 = 0; _key62 < _len62; _key62++) {
          args[_key62] = arguments[_key62];
        }
        return removeNodes(editor, ...args);
      },
      select: function select$1() {
        for (var _len63 = arguments.length, args = new Array(_len63), _key63 = 0; _key63 < _len63; _key63++) {
          args[_key63] = arguments[_key63];
        }
        return select(editor, ...args);
      },
      setNodes: function setNodes$1() {
        for (var _len64 = arguments.length, args = new Array(_len64), _key64 = 0; _key64 < _len64; _key64++) {
          args[_key64] = arguments[_key64];
        }
        return setNodes(editor, ...args);
      },
      setNormalizing: function setNormalizing$1() {
        for (var _len65 = arguments.length, args = new Array(_len65), _key65 = 0; _key65 < _len65; _key65++) {
          args[_key65] = arguments[_key65];
        }
        return setNormalizing(editor, ...args);
      },
      setPoint: function setPoint$1() {
        for (var _len66 = arguments.length, args = new Array(_len66), _key66 = 0; _key66 < _len66; _key66++) {
          args[_key66] = arguments[_key66];
        }
        return setPoint(editor, ...args);
      },
      setSelection: function setSelection$1() {
        for (var _len67 = arguments.length, args = new Array(_len67), _key67 = 0; _key67 < _len67; _key67++) {
          args[_key67] = arguments[_key67];
        }
        return setSelection(editor, ...args);
      },
      splitNodes: function splitNodes$1() {
        for (var _len68 = arguments.length, args = new Array(_len68), _key68 = 0; _key68 < _len68; _key68++) {
          args[_key68] = arguments[_key68];
        }
        return splitNodes(editor, ...args);
      },
      start: function start$1() {
        for (var _len69 = arguments.length, args = new Array(_len69), _key69 = 0; _key69 < _len69; _key69++) {
          args[_key69] = arguments[_key69];
        }
        return start(editor, ...args);
      },
      string: function string$1() {
        for (var _len70 = arguments.length, args = new Array(_len70), _key70 = 0; _key70 < _len70; _key70++) {
          args[_key70] = arguments[_key70];
        }
        return string(editor, ...args);
      },
      unhangRange: function unhangRange$1() {
        for (var _len71 = arguments.length, args = new Array(_len71), _key71 = 0; _key71 < _len71; _key71++) {
          args[_key71] = arguments[_key71];
        }
        return unhangRange(editor, ...args);
      },
      unsetNodes: function unsetNodes$1() {
        for (var _len72 = arguments.length, args = new Array(_len72), _key72 = 0; _key72 < _len72; _key72++) {
          args[_key72] = arguments[_key72];
        }
        return unsetNodes(editor, ...args);
      },
      unwrapNodes: function unwrapNodes$1() {
        for (var _len73 = arguments.length, args = new Array(_len73), _key73 = 0; _key73 < _len73; _key73++) {
          args[_key73] = arguments[_key73];
        }
        return unwrapNodes(editor, ...args);
      },
      void: function _void() {
        for (var _len74 = arguments.length, args = new Array(_len74), _key74 = 0; _key74 < _len74; _key74++) {
          args[_key74] = arguments[_key74];
        }
        return getVoid(editor, ...args);
      },
      withoutNormalizing: function withoutNormalizing$1() {
        for (var _len75 = arguments.length, args = new Array(_len75), _key75 = 0; _key75 < _len75; _key75++) {
          args[_key75] = arguments[_key75];
        }
        return withoutNormalizing(editor, ...args);
      },
      wrapNodes: function wrapNodes$1() {
        for (var _len76 = arguments.length, args = new Array(_len76), _key76 = 0; _key76 < _len76; _key76++) {
          args[_key76] = arguments[_key76];
        }
        return wrapNodes(editor, ...args);
      }
    };
    return editor;
  };

  // ../node_modules/slate-history/dist/index.es.js
  var History = {
    /**
     * Check if a value is a `History` object.
     */
    isHistory(value) {
      return isPlainObject2(value) && Array.isArray(value.redos) && Array.isArray(value.undos) && (value.redos.length === 0 || Operation.isOperationList(value.redos[0].operations)) && (value.undos.length === 0 || Operation.isOperationList(value.undos[0].operations));
    }
  };
  var SAVING = /* @__PURE__ */ new WeakMap();
  var MERGING = /* @__PURE__ */ new WeakMap();
  var HistoryEditor = {
    /**
     * Check if a value is a `HistoryEditor` object.
     */
    isHistoryEditor(value) {
      return History.isHistory(value.history) && Editor.isEditor(value);
    },
    /**
     * Get the merge flag's current value.
     */
    isMerging(editor) {
      return MERGING.get(editor);
    },
    /**
     * Get the saving flag's current value.
     */
    isSaving(editor) {
      return SAVING.get(editor);
    },
    /**
     * Redo to the previous saved state.
     */
    redo(editor) {
      editor.redo();
    },
    /**
     * Undo to the previous saved state.
     */
    undo(editor) {
      editor.undo();
    },
    /**
     * Apply a series of changes inside a synchronous `fn`, without merging any of
     * the new operations into previous save point in the history.
     */
    withoutMerging(editor, fn2) {
      var prev2 = HistoryEditor.isMerging(editor);
      MERGING.set(editor, false);
      fn2();
      MERGING.set(editor, prev2);
    },
    /**
     * Apply a series of changes inside a synchronous `fn`, without saving any of
     * their operations into the history.
     */
    withoutSaving(editor, fn2) {
      var prev2 = HistoryEditor.isSaving(editor);
      SAVING.set(editor, false);
      fn2();
      SAVING.set(editor, prev2);
    }
  };
  var withHistory = (editor) => {
    var e3 = editor;
    var {
      apply: apply2
    } = e3;
    e3.history = {
      undos: [],
      redos: []
    };
    e3.redo = () => {
      var {
        history
      } = e3;
      var {
        redos
      } = history;
      if (redos.length > 0) {
        var batch = redos[redos.length - 1];
        if (batch.selectionBefore) {
          Transforms.setSelection(e3, batch.selectionBefore);
        }
        HistoryEditor.withoutSaving(e3, () => {
          Editor.withoutNormalizing(e3, () => {
            for (var op of batch.operations) {
              e3.apply(op);
            }
          });
        });
        history.redos.pop();
        e3.writeHistory("undos", batch);
      }
    };
    e3.undo = () => {
      var {
        history
      } = e3;
      var {
        undos
      } = history;
      if (undos.length > 0) {
        var batch = undos[undos.length - 1];
        HistoryEditor.withoutSaving(e3, () => {
          Editor.withoutNormalizing(e3, () => {
            var inverseOps = batch.operations.map(Operation.inverse).reverse();
            for (var op of inverseOps) {
              e3.apply(op);
            }
            if (batch.selectionBefore) {
              Transforms.setSelection(e3, batch.selectionBefore);
            }
          });
        });
        e3.writeHistory("redos", batch);
        history.undos.pop();
      }
    };
    e3.apply = (op) => {
      var {
        operations,
        history
      } = e3;
      var {
        undos
      } = history;
      var lastBatch = undos[undos.length - 1];
      var lastOp = lastBatch && lastBatch.operations[lastBatch.operations.length - 1];
      var save = HistoryEditor.isSaving(e3);
      var merge3 = HistoryEditor.isMerging(e3);
      if (save == null) {
        save = shouldSave(op);
      }
      if (save) {
        if (merge3 == null) {
          if (lastBatch == null) {
            merge3 = false;
          } else if (operations.length !== 0) {
            merge3 = true;
          } else {
            merge3 = shouldMerge(op, lastOp);
          }
        }
        if (lastBatch && merge3) {
          lastBatch.operations.push(op);
        } else {
          var batch = {
            operations: [op],
            selectionBefore: e3.selection
          };
          e3.writeHistory("undos", batch);
        }
        while (undos.length > 100) {
          undos.shift();
        }
        history.redos = [];
      }
      apply2(op);
    };
    e3.writeHistory = (stack, batch) => {
      e3.history[stack].push(batch);
    };
    return e3;
  };
  var shouldMerge = (op, prev2) => {
    if (prev2 && op.type === "insert_text" && prev2.type === "insert_text" && op.offset === prev2.offset + prev2.text.length && Path.equals(op.path, prev2.path)) {
      return true;
    }
    if (prev2 && op.type === "remove_text" && prev2.type === "remove_text" && op.offset + op.text.length === prev2.offset && Path.equals(op.path, prev2.path)) {
      return true;
    }
    return false;
  };
  var shouldSave = (op, prev2) => {
    if (op.type === "set_selection") {
      return false;
    }
    return true;
  };

  // ../node_modules/slate-react/dist/index.es.js
  var import_direction = __toESM(require_direction());
  var import_debounce = __toESM(require_debounce());
  var import_throttle = __toESM(require_throttle());
  var import_react62 = __toESM(require_react());

  // ../node_modules/compute-scroll-into-view/dist/index.mjs
  function t3(t4) {
    return "object" == typeof t4 && null != t4 && 1 === t4.nodeType;
  }
  function e2(t4, e3) {
    return (!e3 || "hidden" !== t4) && "visible" !== t4 && "clip" !== t4;
  }
  function n4(t4, n6) {
    if (t4.clientHeight < t4.scrollHeight || t4.clientWidth < t4.scrollWidth) {
      var r3 = getComputedStyle(t4, null);
      return e2(r3.overflowY, n6) || e2(r3.overflowX, n6) || function(t5) {
        var e3 = function(t6) {
          if (!t6.ownerDocument || !t6.ownerDocument.defaultView)
            return null;
          try {
            return t6.ownerDocument.defaultView.frameElement;
          } catch (t7) {
            return null;
          }
        }(t5);
        return !!e3 && (e3.clientHeight < t5.scrollHeight || e3.clientWidth < t5.scrollWidth);
      }(t4);
    }
    return false;
  }
  function r2(t4, e3, n6, r3, i4, o3, l4, d3) {
    return o3 < t4 && l4 > e3 || o3 > t4 && l4 < e3 ? 0 : o3 <= t4 && d3 <= n6 || l4 >= e3 && d3 >= n6 ? o3 - t4 - r3 : l4 > e3 && d3 < n6 || o3 < t4 && d3 > n6 ? l4 - e3 + i4 : 0;
  }
  var i3 = function(e3, i4) {
    var o3 = window, l4 = i4.scrollMode, d3 = i4.block, f4 = i4.inline, h4 = i4.boundary, u4 = i4.skipOverflowHiddenElements, s3 = "function" == typeof h4 ? h4 : function(t4) {
      return t4 !== h4;
    };
    if (!t3(e3))
      throw new TypeError("Invalid target");
    for (var a3, c3, g3 = document.scrollingElement || document.documentElement, p3 = [], m2 = e3; t3(m2) && s3(m2); ) {
      if ((m2 = null == (c3 = (a3 = m2).parentElement) ? a3.getRootNode().host || null : c3) === g3) {
        p3.push(m2);
        break;
      }
      null != m2 && m2 === document.body && n4(m2) && !n4(document.documentElement) || null != m2 && n4(m2, u4) && p3.push(m2);
    }
    for (var w3 = o3.visualViewport ? o3.visualViewport.width : innerWidth, v3 = o3.visualViewport ? o3.visualViewport.height : innerHeight, W3 = window.scrollX || pageXOffset, H3 = window.scrollY || pageYOffset, b4 = e3.getBoundingClientRect(), y3 = b4.height, E2 = b4.width, M3 = b4.top, V2 = b4.right, x2 = b4.bottom, I3 = b4.left, C = "start" === d3 || "nearest" === d3 ? M3 : "end" === d3 ? x2 : M3 + y3 / 2, R2 = "center" === f4 ? I3 + E2 / 2 : "end" === f4 ? V2 : I3, T2 = [], k2 = 0; k2 < p3.length; k2++) {
      var B2 = p3[k2], D3 = B2.getBoundingClientRect(), O3 = D3.height, X3 = D3.width, Y3 = D3.top, L3 = D3.right, S3 = D3.bottom, j4 = D3.left;
      if ("if-needed" === l4 && M3 >= 0 && I3 >= 0 && x2 <= v3 && V2 <= w3 && M3 >= Y3 && x2 <= S3 && I3 >= j4 && V2 <= L3)
        return T2;
      var N2 = getComputedStyle(B2), q2 = parseInt(N2.borderLeftWidth, 10), z2 = parseInt(N2.borderTopWidth, 10), A3 = parseInt(N2.borderRightWidth, 10), F13 = parseInt(N2.borderBottomWidth, 10), G3 = 0, J2 = 0, K2 = "offsetWidth" in B2 ? B2.offsetWidth - B2.clientWidth - q2 - A3 : 0, P3 = "offsetHeight" in B2 ? B2.offsetHeight - B2.clientHeight - z2 - F13 : 0, Q3 = "offsetWidth" in B2 ? 0 === B2.offsetWidth ? 0 : X3 / B2.offsetWidth : 0, U3 = "offsetHeight" in B2 ? 0 === B2.offsetHeight ? 0 : O3 / B2.offsetHeight : 0;
      if (g3 === B2)
        G3 = "start" === d3 ? C : "end" === d3 ? C - v3 : "nearest" === d3 ? r2(H3, H3 + v3, v3, z2, F13, H3 + C, H3 + C + y3, y3) : C - v3 / 2, J2 = "start" === f4 ? R2 : "center" === f4 ? R2 - w3 / 2 : "end" === f4 ? R2 - w3 : r2(W3, W3 + w3, w3, q2, A3, W3 + R2, W3 + R2 + E2, E2), G3 = Math.max(0, G3 + H3), J2 = Math.max(0, J2 + W3);
      else {
        G3 = "start" === d3 ? C - Y3 - z2 : "end" === d3 ? C - S3 + F13 + P3 : "nearest" === d3 ? r2(Y3, S3, O3, z2, F13 + P3, C, C + y3, y3) : C - (Y3 + O3 / 2) + P3 / 2, J2 = "start" === f4 ? R2 - j4 - q2 : "center" === f4 ? R2 - (j4 + X3 / 2) + K2 / 2 : "end" === f4 ? R2 - L3 + A3 + K2 : r2(j4, L3, X3, q2, A3 + K2, R2, R2 + E2, E2);
        var Z3 = B2.scrollLeft, $2 = B2.scrollTop;
        C += $2 - (G3 = Math.max(0, Math.min($2 + G3 / U3, B2.scrollHeight - O3 / U3 + P3))), R2 += Z3 - (J2 = Math.max(0, Math.min(Z3 + J2 / Q3, B2.scrollWidth - X3 / Q3 + K2)));
      }
      T2.push({ el: B2, top: G3, left: J2 });
    }
    return T2;
  };

  // ../node_modules/scroll-into-view-if-needed/es/index.js
  function isOptionsObject(options) {
    return options === Object(options) && Object.keys(options).length !== 0;
  }
  function defaultBehavior(actions, behavior) {
    if (behavior === void 0) {
      behavior = "auto";
    }
    var canSmoothScroll = "scrollBehavior" in document.body.style;
    actions.forEach(function(_ref) {
      var el = _ref.el, top = _ref.top, left = _ref.left;
      if (el.scroll && canSmoothScroll) {
        el.scroll({
          top,
          left,
          behavior
        });
      } else {
        el.scrollTop = top;
        el.scrollLeft = left;
      }
    });
  }
  function getOptions(options) {
    if (options === false) {
      return {
        block: "end",
        inline: "nearest"
      };
    }
    if (isOptionsObject(options)) {
      return options;
    }
    return {
      block: "start",
      inline: "nearest"
    };
  }
  function scrollIntoView2(target, options) {
    var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);
    if (isOptionsObject(options) && typeof options.behavior === "function") {
      return options.behavior(isTargetAttached ? i3(target, options) : []);
    }
    if (!isTargetAttached) {
      return;
    }
    var computeOptions = getOptions(options);
    return defaultBehavior(i3(target, computeOptions), computeOptions.behavior);
  }
  var es_default = scrollIntoView2;

  // ../node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js
  var resizeObservers = [];

  // ../node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js
  var hasActiveObservations = function() {
    return resizeObservers.some(function(ro) {
      return ro.activeTargets.length > 0;
    });
  };

  // ../node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js
  var hasSkippedObservations = function() {
    return resizeObservers.some(function(ro) {
      return ro.skippedTargets.length > 0;
    });
  };

  // ../node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js
  var msg = "ResizeObserver loop completed with undelivered notifications.";
  var deliverResizeLoopError = function() {
    var event;
    if (typeof ErrorEvent === "function") {
      event = new ErrorEvent("error", {
        message: msg
      });
    } else {
      event = document.createEvent("Event");
      event.initEvent("error", false, false);
      event.message = msg;
    }
    window.dispatchEvent(event);
  };

  // ../node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js
  var ResizeObserverBoxOptions;
  (function(ResizeObserverBoxOptions2) {
    ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
    ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
    ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
  })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

  // ../node_modules/@juggle/resize-observer/lib/utils/freeze.js
  var freeze = function(obj) {
    return Object.freeze(obj);
  };

  // ../node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js
  var ResizeObserverSize = function() {
    function ResizeObserverSize2(inlineSize, blockSize) {
      this.inlineSize = inlineSize;
      this.blockSize = blockSize;
      freeze(this);
    }
    return ResizeObserverSize2;
  }();

  // ../node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js
  var DOMRectReadOnly = function() {
    function DOMRectReadOnly2(x2, y3, width, height) {
      this.x = x2;
      this.y = y3;
      this.width = width;
      this.height = height;
      this.top = this.y;
      this.left = this.x;
      this.bottom = this.top + this.height;
      this.right = this.left + this.width;
      return freeze(this);
    }
    DOMRectReadOnly2.prototype.toJSON = function() {
      var _a5 = this, x2 = _a5.x, y3 = _a5.y, top = _a5.top, right = _a5.right, bottom = _a5.bottom, left = _a5.left, width = _a5.width, height = _a5.height;
      return { x: x2, y: y3, top, right, bottom, left, width, height };
    };
    DOMRectReadOnly2.fromRect = function(rectangle) {
      return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    };
    return DOMRectReadOnly2;
  }();

  // ../node_modules/@juggle/resize-observer/lib/utils/element.js
  var isSVG = function(target) {
    return target instanceof SVGElement && "getBBox" in target;
  };
  var isHidden = function(target) {
    if (isSVG(target)) {
      var _a5 = target.getBBox(), width = _a5.width, height = _a5.height;
      return !width && !height;
    }
    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
    return !(offsetWidth || offsetHeight || target.getClientRects().length);
  };
  var isElement3 = function(obj) {
    var _a5;
    if (obj instanceof Element) {
      return true;
    }
    var scope = (_a5 = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a5 === void 0 ? void 0 : _a5.defaultView;
    return !!(scope && obj instanceof scope.Element);
  };
  var isReplacedElement = function(target) {
    switch (target.tagName) {
      case "INPUT":
        if (target.type !== "image") {
          break;
        }
      case "VIDEO":
      case "AUDIO":
      case "EMBED":
      case "OBJECT":
      case "CANVAS":
      case "IFRAME":
      case "IMG":
        return true;
    }
    return false;
  };

  // ../node_modules/@juggle/resize-observer/lib/utils/global.js
  var global2 = typeof window !== "undefined" ? window : {};

  // ../node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js
  var cache2 = /* @__PURE__ */ new WeakMap();
  var scrollRegexp = /auto|scroll/;
  var verticalRegexp = /^tb|vertical/;
  var IE = /msie|trident/i.test(global2.navigator && global2.navigator.userAgent);
  var parseDimension = function(pixel) {
    return parseFloat(pixel || "0");
  };
  var size2 = function(inlineSize, blockSize, switchSizes) {
    if (inlineSize === void 0) {
      inlineSize = 0;
    }
    if (blockSize === void 0) {
      blockSize = 0;
    }
    if (switchSizes === void 0) {
      switchSizes = false;
    }
    return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
  };
  var zeroBoxes = freeze({
    devicePixelContentBoxSize: size2(),
    borderBoxSize: size2(),
    contentBoxSize: size2(),
    contentRect: new DOMRectReadOnly(0, 0, 0, 0)
  });
  var calculateBoxSizes = function(target, forceRecalculation) {
    if (forceRecalculation === void 0) {
      forceRecalculation = false;
    }
    if (cache2.has(target) && !forceRecalculation) {
      return cache2.get(target);
    }
    if (isHidden(target)) {
      cache2.set(target, zeroBoxes);
      return zeroBoxes;
    }
    var cs = getComputedStyle(target);
    var svg3 = isSVG(target) && target.ownerSVGElement && target.getBBox();
    var removePadding = !IE && cs.boxSizing === "border-box";
    var switchSizes = verticalRegexp.test(cs.writingMode || "");
    var canScrollVertically = !svg3 && scrollRegexp.test(cs.overflowY || "");
    var canScrollHorizontally = !svg3 && scrollRegexp.test(cs.overflowX || "");
    var paddingTop = svg3 ? 0 : parseDimension(cs.paddingTop);
    var paddingRight = svg3 ? 0 : parseDimension(cs.paddingRight);
    var paddingBottom = svg3 ? 0 : parseDimension(cs.paddingBottom);
    var paddingLeft = svg3 ? 0 : parseDimension(cs.paddingLeft);
    var borderTop2 = svg3 ? 0 : parseDimension(cs.borderTopWidth);
    var borderRight2 = svg3 ? 0 : parseDimension(cs.borderRightWidth);
    var borderBottom2 = svg3 ? 0 : parseDimension(cs.borderBottomWidth);
    var borderLeft2 = svg3 ? 0 : parseDimension(cs.borderLeftWidth);
    var horizontalPadding = paddingLeft + paddingRight;
    var verticalPadding = paddingTop + paddingBottom;
    var horizontalBorderArea = borderLeft2 + borderRight2;
    var verticalBorderArea = borderTop2 + borderBottom2;
    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
    var contentWidth = svg3 ? svg3.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
    var contentHeight = svg3 ? svg3.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
    var boxes = freeze({
      devicePixelContentBoxSize: size2(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
      borderBoxSize: size2(borderBoxWidth, borderBoxHeight, switchSizes),
      contentBoxSize: size2(contentWidth, contentHeight, switchSizes),
      contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
    });
    cache2.set(target, boxes);
    return boxes;
  };
  var calculateBoxSize = function(target, observedBox, forceRecalculation) {
    var _a5 = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a5.borderBoxSize, contentBoxSize = _a5.contentBoxSize, devicePixelContentBoxSize = _a5.devicePixelContentBoxSize;
    switch (observedBox) {
      case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
        return devicePixelContentBoxSize;
      case ResizeObserverBoxOptions.BORDER_BOX:
        return borderBoxSize;
      default:
        return contentBoxSize;
    }
  };

  // ../node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js
  var ResizeObserverEntry = function() {
    function ResizeObserverEntry2(target) {
      var boxes = calculateBoxSizes(target);
      this.target = target;
      this.contentRect = boxes.contentRect;
      this.borderBoxSize = freeze([boxes.borderBoxSize]);
      this.contentBoxSize = freeze([boxes.contentBoxSize]);
      this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
    }
    return ResizeObserverEntry2;
  }();

  // ../node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js
  var calculateDepthForNode = function(node5) {
    if (isHidden(node5)) {
      return Infinity;
    }
    var depth = 0;
    var parent3 = node5.parentNode;
    while (parent3) {
      depth += 1;
      parent3 = parent3.parentNode;
    }
    return depth;
  };

  // ../node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js
  var broadcastActiveObservations = function() {
    var shallowestDepth = Infinity;
    var callbacks2 = [];
    resizeObservers.forEach(function processObserver(ro) {
      if (ro.activeTargets.length === 0) {
        return;
      }
      var entries = [];
      ro.activeTargets.forEach(function processTarget(ot) {
        var entry = new ResizeObserverEntry(ot.target);
        var targetDepth = calculateDepthForNode(ot.target);
        entries.push(entry);
        ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
        if (targetDepth < shallowestDepth) {
          shallowestDepth = targetDepth;
        }
      });
      callbacks2.push(function resizeObserverCallback() {
        ro.callback.call(ro.observer, entries, ro.observer);
      });
      ro.activeTargets.splice(0, ro.activeTargets.length);
    });
    for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
      var callback = callbacks_1[_i];
      callback();
    }
    return shallowestDepth;
  };

  // ../node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js
  var gatherActiveObservationsAtDepth = function(depth) {
    resizeObservers.forEach(function processObserver(ro) {
      ro.activeTargets.splice(0, ro.activeTargets.length);
      ro.skippedTargets.splice(0, ro.skippedTargets.length);
      ro.observationTargets.forEach(function processTarget(ot) {
        if (ot.isActive()) {
          if (calculateDepthForNode(ot.target) > depth) {
            ro.activeTargets.push(ot);
          } else {
            ro.skippedTargets.push(ot);
          }
        }
      });
    });
  };

  // ../node_modules/@juggle/resize-observer/lib/utils/process.js
  var process2 = function() {
    var depth = 0;
    gatherActiveObservationsAtDepth(depth);
    while (hasActiveObservations()) {
      depth = broadcastActiveObservations();
      gatherActiveObservationsAtDepth(depth);
    }
    if (hasSkippedObservations()) {
      deliverResizeLoopError();
    }
    return depth > 0;
  };

  // ../node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js
  var trigger;
  var callbacks = [];
  var notify = function() {
    return callbacks.splice(0).forEach(function(cb) {
      return cb();
    });
  };
  var queueMicroTask = function(callback) {
    if (!trigger) {
      var toggle_1 = 0;
      var el_1 = document.createTextNode("");
      var config = { characterData: true };
      new MutationObserver(function() {
        return notify();
      }).observe(el_1, config);
      trigger = function() {
        el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
      };
    }
    callbacks.push(callback);
    trigger();
  };

  // ../node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js
  var queueResizeObserver = function(cb) {
    queueMicroTask(function ResizeObserver3() {
      requestAnimationFrame(cb);
    });
  };

  // ../node_modules/@juggle/resize-observer/lib/utils/scheduler.js
  var watching = 0;
  var isWatching = function() {
    return !!watching;
  };
  var CATCH_PERIOD = 250;
  var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
  var events = [
    "resize",
    "load",
    "transitionend",
    "animationend",
    "animationstart",
    "animationiteration",
    "keyup",
    "keydown",
    "mouseup",
    "mousedown",
    "mouseover",
    "mouseout",
    "blur",
    "focus"
  ];
  var time = function(timeout) {
    if (timeout === void 0) {
      timeout = 0;
    }
    return Date.now() + timeout;
  };
  var scheduled = false;
  var Scheduler = function() {
    function Scheduler2() {
      var _this = this;
      this.stopped = true;
      this.listener = function() {
        return _this.schedule();
      };
    }
    Scheduler2.prototype.run = function(timeout) {
      var _this = this;
      if (timeout === void 0) {
        timeout = CATCH_PERIOD;
      }
      if (scheduled) {
        return;
      }
      scheduled = true;
      var until = time(timeout);
      queueResizeObserver(function() {
        var elementsHaveResized = false;
        try {
          elementsHaveResized = process2();
        } finally {
          scheduled = false;
          timeout = until - time();
          if (!isWatching()) {
            return;
          }
          if (elementsHaveResized) {
            _this.run(1e3);
          } else if (timeout > 0) {
            _this.run(timeout);
          } else {
            _this.start();
          }
        }
      });
    };
    Scheduler2.prototype.schedule = function() {
      this.stop();
      this.run();
    };
    Scheduler2.prototype.observe = function() {
      var _this = this;
      var cb = function() {
        return _this.observer && _this.observer.observe(document.body, observerConfig);
      };
      document.body ? cb() : global2.addEventListener("DOMContentLoaded", cb);
    };
    Scheduler2.prototype.start = function() {
      var _this = this;
      if (this.stopped) {
        this.stopped = false;
        this.observer = new MutationObserver(this.listener);
        this.observe();
        events.forEach(function(name) {
          return global2.addEventListener(name, _this.listener, true);
        });
      }
    };
    Scheduler2.prototype.stop = function() {
      var _this = this;
      if (!this.stopped) {
        this.observer && this.observer.disconnect();
        events.forEach(function(name) {
          return global2.removeEventListener(name, _this.listener, true);
        });
        this.stopped = true;
      }
    };
    return Scheduler2;
  }();
  var scheduler = new Scheduler();
  var updateCount = function(n6) {
    !watching && n6 > 0 && scheduler.start();
    watching += n6;
    !watching && scheduler.stop();
  };

  // ../node_modules/@juggle/resize-observer/lib/ResizeObservation.js
  var skipNotifyOnElement = function(target) {
    return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
  };
  var ResizeObservation = function() {
    function ResizeObservation2(target, observedBox) {
      this.target = target;
      this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
      this.lastReportedSize = {
        inlineSize: 0,
        blockSize: 0
      };
    }
    ResizeObservation2.prototype.isActive = function() {
      var size3 = calculateBoxSize(this.target, this.observedBox, true);
      if (skipNotifyOnElement(this.target)) {
        this.lastReportedSize = size3;
      }
      if (this.lastReportedSize.inlineSize !== size3.inlineSize || this.lastReportedSize.blockSize !== size3.blockSize) {
        return true;
      }
      return false;
    };
    return ResizeObservation2;
  }();

  // ../node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js
  var ResizeObserverDetail = function() {
    function ResizeObserverDetail2(resizeObserver, callback) {
      this.activeTargets = [];
      this.skippedTargets = [];
      this.observationTargets = [];
      this.observer = resizeObserver;
      this.callback = callback;
    }
    return ResizeObserverDetail2;
  }();

  // ../node_modules/@juggle/resize-observer/lib/ResizeObserverController.js
  var observerMap = /* @__PURE__ */ new WeakMap();
  var getObservationIndex = function(observationTargets, target) {
    for (var i4 = 0; i4 < observationTargets.length; i4 += 1) {
      if (observationTargets[i4].target === target) {
        return i4;
      }
    }
    return -1;
  };
  var ResizeObserverController = function() {
    function ResizeObserverController2() {
    }
    ResizeObserverController2.connect = function(resizeObserver, callback) {
      var detail = new ResizeObserverDetail(resizeObserver, callback);
      observerMap.set(resizeObserver, detail);
    };
    ResizeObserverController2.observe = function(resizeObserver, target, options) {
      var detail = observerMap.get(resizeObserver);
      var firstObservation = detail.observationTargets.length === 0;
      if (getObservationIndex(detail.observationTargets, target) < 0) {
        firstObservation && resizeObservers.push(detail);
        detail.observationTargets.push(new ResizeObservation(target, options && options.box));
        updateCount(1);
        scheduler.schedule();
      }
    };
    ResizeObserverController2.unobserve = function(resizeObserver, target) {
      var detail = observerMap.get(resizeObserver);
      var index2 = getObservationIndex(detail.observationTargets, target);
      var lastObservation = detail.observationTargets.length === 1;
      if (index2 >= 0) {
        lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
        detail.observationTargets.splice(index2, 1);
        updateCount(-1);
      }
    };
    ResizeObserverController2.disconnect = function(resizeObserver) {
      var _this = this;
      var detail = observerMap.get(resizeObserver);
      detail.observationTargets.slice().forEach(function(ot) {
        return _this.unobserve(resizeObserver, ot.target);
      });
      detail.activeTargets.splice(0, detail.activeTargets.length);
    };
    return ResizeObserverController2;
  }();

  // ../node_modules/@juggle/resize-observer/lib/ResizeObserver.js
  var ResizeObserver2 = function() {
    function ResizeObserver3(callback) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
      }
      if (typeof callback !== "function") {
        throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
      }
      ResizeObserverController.connect(this, callback);
    }
    ResizeObserver3.prototype.observe = function(target, options) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
      }
      if (!isElement3(target)) {
        throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
      }
      ResizeObserverController.observe(this, target, options);
    };
    ResizeObserver3.prototype.unobserve = function(target) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
      }
      if (!isElement3(target)) {
        throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
      }
      ResizeObserverController.unobserve(this, target);
    };
    ResizeObserver3.prototype.disconnect = function() {
      ResizeObserverController.disconnect(this);
    };
    ResizeObserver3.toString = function() {
      return "function ResizeObserver () { [polyfill code] }";
    };
    return ResizeObserver3;
  }();

  // ../node_modules/slate-react/dist/index.es.js
  var import_is_hotkey = __toESM(require_lib());
  var import_react_dom = __toESM(require_react_dom());
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _objectWithoutPropertiesLoose3(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i4;
    for (i4 = 0; i4 < sourceKeys.length; i4++) {
      key = sourceKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties2(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose3(source, excluded);
    var key, i4;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
        key = sourceSymbolKeys[i4];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var EditorContext = /* @__PURE__ */ (0, import_react62.createContext)(null);
  var useSlateStatic = () => {
    var editor = (0, import_react62.useContext)(EditorContext);
    if (!editor) {
      throw new Error("The `useSlateStatic` hook must be used inside the <Slate> component's context.");
    }
    return editor;
  };
  var REACT_MAJOR_VERSION = parseInt(import_react62.default.version.split(".")[0], 10);
  var IS_IOS = typeof navigator !== "undefined" && typeof window !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  var IS_APPLE = typeof navigator !== "undefined" && /Mac OS X/.test(navigator.userAgent);
  var IS_ANDROID = typeof navigator !== "undefined" && /Android/.test(navigator.userAgent);
  var IS_FIREFOX = typeof navigator !== "undefined" && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);
  var IS_WEBKIT = typeof navigator !== "undefined" && /AppleWebKit(?!.*Chrome)/i.test(navigator.userAgent);
  var IS_EDGE_LEGACY = typeof navigator !== "undefined" && /Edge?\/(?:[0-6][0-9]|[0-7][0-8])(?:\.)/i.test(navigator.userAgent);
  var IS_CHROME = typeof navigator !== "undefined" && /Chrome/i.test(navigator.userAgent);
  var IS_CHROME_LEGACY = typeof navigator !== "undefined" && /Chrome?\/(?:[0-7][0-5]|[0-6][0-9])(?:\.)/i.test(navigator.userAgent);
  var IS_ANDROID_CHROME_LEGACY = IS_ANDROID && typeof navigator !== "undefined" && /Chrome?\/(?:[0-5]?\d)(?:\.)/i.test(navigator.userAgent);
  var IS_FIREFOX_LEGACY = typeof navigator !== "undefined" && /^(?!.*Seamonkey)(?=.*Firefox\/(?:[0-7][0-9]|[0-8][0-6])(?:\.)).*/i.test(navigator.userAgent);
  var IS_UC_MOBILE = typeof navigator !== "undefined" && /.*UCBrowser/.test(navigator.userAgent);
  var IS_WECHATBROWSER = typeof navigator !== "undefined" && /.*Wechat/.test(navigator.userAgent) && !/.*MacWechat/.test(navigator.userAgent);
  var CAN_USE_DOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
  var HAS_BEFORE_INPUT_SUPPORT = (!IS_CHROME_LEGACY || !IS_ANDROID_CHROME_LEGACY) && !IS_EDGE_LEGACY && // globalThis is undefined in older browsers
  typeof globalThis !== "undefined" && globalThis.InputEvent && // @ts-ignore The `getTargetRanges` property isn't recognized.
  typeof globalThis.InputEvent.prototype.getTargetRanges === "function";
  var NODE_TO_INDEX = /* @__PURE__ */ new WeakMap();
  var NODE_TO_PARENT = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_WINDOW = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_ELEMENT = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PLACEHOLDER_ELEMENT = /* @__PURE__ */ new WeakMap();
  var ELEMENT_TO_NODE = /* @__PURE__ */ new WeakMap();
  var NODE_TO_ELEMENT = /* @__PURE__ */ new WeakMap();
  var NODE_TO_KEY = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_KEY_TO_ELEMENT = /* @__PURE__ */ new WeakMap();
  var IS_READ_ONLY = /* @__PURE__ */ new WeakMap();
  var IS_FOCUSED = /* @__PURE__ */ new WeakMap();
  var IS_COMPOSING = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_USER_SELECTION = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_ON_CHANGE = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_SCHEDULE_FLUSH = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PENDING_INSERTION_MARKS = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_USER_MARKS = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PENDING_DIFFS = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PENDING_ACTION = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PENDING_SELECTION = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_FORCE_RENDER = /* @__PURE__ */ new WeakMap();
  var PLACEHOLDER_SYMBOL = Symbol("placeholder");
  var MARK_PLACEHOLDER_SYMBOL = Symbol("mark-placeholder");
  var DOMText = globalThis.Text;
  var getDefaultView = (value) => {
    return value && value.ownerDocument && value.ownerDocument.defaultView || null;
  };
  var isDOMComment = (value) => {
    return isDOMNode(value) && value.nodeType === 8;
  };
  var isDOMElement = (value) => {
    return isDOMNode(value) && value.nodeType === 1;
  };
  var isDOMNode = (value) => {
    var window2 = getDefaultView(value);
    return !!window2 && value instanceof window2.Node;
  };
  var isDOMSelection = (value) => {
    var window2 = value && value.anchorNode && getDefaultView(value.anchorNode);
    return !!window2 && value instanceof window2.Selection;
  };
  var isDOMText = (value) => {
    return isDOMNode(value) && value.nodeType === 3;
  };
  var isPlainTextOnlyPaste = (event) => {
    return event.clipboardData && event.clipboardData.getData("text/plain") !== "" && event.clipboardData.types.length === 1;
  };
  var normalizeDOMPoint = (domPoint) => {
    var [node5, offset3] = domPoint;
    if (isDOMElement(node5) && node5.childNodes.length) {
      var isLast = offset3 === node5.childNodes.length;
      var index2 = isLast ? offset3 - 1 : offset3;
      [node5, index2] = getEditableChildAndIndex(node5, index2, isLast ? "backward" : "forward");
      isLast = index2 < offset3;
      while (isDOMElement(node5) && node5.childNodes.length) {
        var i4 = isLast ? node5.childNodes.length - 1 : 0;
        node5 = getEditableChild(node5, i4, isLast ? "backward" : "forward");
      }
      offset3 = isLast && node5.textContent != null ? node5.textContent.length : 0;
    }
    return [node5, offset3];
  };
  var hasShadowRoot = (node5) => {
    var parent3 = node5 && node5.parentNode;
    while (parent3) {
      if (parent3.toString() === "[object ShadowRoot]") {
        return true;
      }
      parent3 = parent3.parentNode;
    }
    return false;
  };
  var getEditableChildAndIndex = (parent3, index2, direction) => {
    var {
      childNodes
    } = parent3;
    var child = childNodes[index2];
    var i4 = index2;
    var triedForward = false;
    var triedBackward = false;
    while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute("contenteditable") === "false") {
      if (triedForward && triedBackward) {
        break;
      }
      if (i4 >= childNodes.length) {
        triedForward = true;
        i4 = index2 - 1;
        direction = "backward";
        continue;
      }
      if (i4 < 0) {
        triedBackward = true;
        i4 = index2 + 1;
        direction = "forward";
        continue;
      }
      child = childNodes[i4];
      index2 = i4;
      i4 += direction === "forward" ? 1 : -1;
    }
    return [child, index2];
  };
  var getEditableChild = (parent3, index2, direction) => {
    var [child] = getEditableChildAndIndex(parent3, index2, direction);
    return child;
  };
  var getPlainText = (domNode) => {
    var text4 = "";
    if (isDOMText(domNode) && domNode.nodeValue) {
      return domNode.nodeValue;
    }
    if (isDOMElement(domNode)) {
      for (var childNode of Array.from(domNode.childNodes)) {
        text4 += getPlainText(childNode);
      }
      var display = getComputedStyle(domNode).getPropertyValue("display");
      if (display === "block" || display === "list" || domNode.tagName === "BR") {
        text4 += "\n";
      }
    }
    return text4;
  };
  var catchSlateFragment = /data-slate-fragment="(.+?)"/m;
  var getSlateFragmentAttribute = (dataTransfer) => {
    var htmlData = dataTransfer.getData("text/html");
    var [, fragment2] = htmlData.match(catchSlateFragment) || [];
    return fragment2;
  };
  var isTrackedMutation = (editor, mutation, batch) => {
    var {
      target
    } = mutation;
    if (isDOMElement(target) && target.matches('[contentEditable="false"]')) {
      return false;
    }
    var {
      document: document4
    } = ReactEditor.getWindow(editor);
    if (document4.contains(target)) {
      return ReactEditor.hasDOMNode(editor, target, {
        editable: true
      });
    }
    var parentMutation = batch.find((_ref) => {
      var {
        addedNodes,
        removedNodes
      } = _ref;
      for (var node5 of addedNodes) {
        if (node5 === target || node5.contains(target)) {
          return true;
        }
      }
      for (var _node of removedNodes) {
        if (_node === target || _node.contains(target)) {
          return true;
        }
      }
    });
    if (!parentMutation || parentMutation === mutation) {
      return false;
    }
    return isTrackedMutation(editor, parentMutation, batch);
  };
  var n5 = 0;
  var Key = class {
    constructor() {
      this.id = "".concat(n5++);
    }
  };
  var ReactEditor = {
    androidPendingDiffs: (editor) => EDITOR_TO_PENDING_DIFFS.get(editor),
    androidScheduleFlush: (editor) => {
      var _EDITOR_TO_SCHEDULE_F;
      (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(editor)) === null || _EDITOR_TO_SCHEDULE_F === void 0 ? void 0 : _EDITOR_TO_SCHEDULE_F();
    },
    blur: (editor) => {
      var el = ReactEditor.toDOMNode(editor, editor);
      var root3 = ReactEditor.findDocumentOrShadowRoot(editor);
      IS_FOCUSED.set(editor, false);
      if (root3.activeElement === el) {
        el.blur();
      }
    },
    deselect: (editor) => {
      var {
        selection
      } = editor;
      var root3 = ReactEditor.findDocumentOrShadowRoot(editor);
      var domSelection = root3.getSelection();
      if (domSelection && domSelection.rangeCount > 0) {
        domSelection.removeAllRanges();
      }
      if (selection) {
        Transforms.deselect(editor);
      }
    },
    findDocumentOrShadowRoot: (editor) => {
      var el = ReactEditor.toDOMNode(editor, editor);
      var root3 = el.getRootNode();
      if ((root3 instanceof Document || root3 instanceof ShadowRoot) && root3.getSelection != null) {
        return root3;
      }
      return el.ownerDocument;
    },
    findEventRange: (editor, event) => {
      if ("nativeEvent" in event) {
        event = event.nativeEvent;
      }
      var {
        clientX: x2,
        clientY: y3,
        target
      } = event;
      if (x2 == null || y3 == null) {
        throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
      }
      var node5 = ReactEditor.toSlateNode(editor, event.target);
      var path4 = ReactEditor.findPath(editor, node5);
      if (Element2.isElement(node5) && Editor.isVoid(editor, node5)) {
        var rect = target.getBoundingClientRect();
        var isPrev = editor.isInline(node5) ? x2 - rect.left < rect.left + rect.width - x2 : y3 - rect.top < rect.top + rect.height - y3;
        var edge = Editor.point(editor, path4, {
          edge: isPrev ? "start" : "end"
        });
        var point6 = isPrev ? Editor.before(editor, edge) : Editor.after(editor, edge);
        if (point6) {
          var _range = Editor.range(editor, point6);
          return _range;
        }
      }
      var domRange;
      var {
        document: document4
      } = ReactEditor.getWindow(editor);
      if (document4.caretRangeFromPoint) {
        domRange = document4.caretRangeFromPoint(x2, y3);
      } else {
        var position4 = document4.caretPositionFromPoint(x2, y3);
        if (position4) {
          domRange = document4.createRange();
          domRange.setStart(position4.offsetNode, position4.offset);
          domRange.setEnd(position4.offsetNode, position4.offset);
        }
      }
      if (!domRange) {
        throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
      }
      var range2 = ReactEditor.toSlateRange(editor, domRange, {
        exactMatch: false,
        suppressThrow: false
      });
      return range2;
    },
    findKey: (editor, node5) => {
      var key = NODE_TO_KEY.get(node5);
      if (!key) {
        key = new Key();
        NODE_TO_KEY.set(node5, key);
      }
      return key;
    },
    findPath: (editor, node5) => {
      var path4 = [];
      var child = node5;
      while (true) {
        var parent3 = NODE_TO_PARENT.get(child);
        if (parent3 == null) {
          if (Editor.isEditor(child)) {
            return path4;
          } else {
            break;
          }
        }
        var i4 = NODE_TO_INDEX.get(child);
        if (i4 == null) {
          break;
        }
        path4.unshift(i4);
        child = parent3;
      }
      throw new Error("Unable to find the path for Slate node: ".concat(Scrubber.stringify(node5)));
    },
    focus: (editor) => {
      var el = ReactEditor.toDOMNode(editor, editor);
      var root3 = ReactEditor.findDocumentOrShadowRoot(editor);
      IS_FOCUSED.set(editor, true);
      if (root3.activeElement !== el) {
        el.focus({
          preventScroll: true
        });
      }
    },
    getWindow: (editor) => {
      var window2 = EDITOR_TO_WINDOW.get(editor);
      if (!window2) {
        throw new Error("Unable to find a host window element for this editor");
      }
      return window2;
    },
    hasDOMNode: function hasDOMNode(editor, target) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var {
        editable = false
      } = options;
      var editorEl = ReactEditor.toDOMNode(editor, editor);
      var targetEl;
      try {
        targetEl = isDOMElement(target) ? target : target.parentElement;
      } catch (err) {
        if (!err.message.includes('Permission denied to access property "nodeType"')) {
          throw err;
        }
      }
      if (!targetEl) {
        return false;
      }
      return targetEl.closest("[data-slate-editor]") === editorEl && (!editable || targetEl.isContentEditable ? true : typeof targetEl.isContentEditable === "boolean" && // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined
      // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable="false"(readOnly)
      targetEl.closest('[contenteditable="false"]') === editorEl || !!targetEl.getAttribute("data-slate-zero-width"));
    },
    hasEditableTarget: (editor, target) => isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {
      editable: true
    }),
    hasRange: (editor, range2) => {
      var {
        anchor: anchor2,
        focus
      } = range2;
      return Editor.hasPath(editor, anchor2.path) && Editor.hasPath(editor, focus.path);
    },
    hasSelectableTarget: (editor, target) => ReactEditor.hasEditableTarget(editor, target) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, target),
    hasTarget: (editor, target) => isDOMNode(target) && ReactEditor.hasDOMNode(editor, target),
    insertData: (editor, data) => {
      editor.insertData(data);
    },
    insertFragmentData: (editor, data) => editor.insertFragmentData(data),
    insertTextData: (editor, data) => editor.insertTextData(data),
    isComposing: (editor) => {
      return !!IS_COMPOSING.get(editor);
    },
    isFocused: (editor) => !!IS_FOCUSED.get(editor),
    isReadOnly: (editor) => !!IS_READ_ONLY.get(editor),
    isTargetInsideNonReadonlyVoid: (editor, target) => {
      if (IS_READ_ONLY.get(editor))
        return false;
      var slateNode = ReactEditor.hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target);
      return Element2.isElement(slateNode) && Editor.isVoid(editor, slateNode);
    },
    setFragmentData: (editor, data, originEvent) => editor.setFragmentData(data, originEvent),
    toDOMNode: (editor, node5) => {
      var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
      var domNode = Editor.isEditor(node5) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node5));
      if (!domNode) {
        throw new Error("Cannot resolve a DOM node from Slate node: ".concat(Scrubber.stringify(node5)));
      }
      return domNode;
    },
    toDOMPoint: (editor, point6) => {
      var [node5] = Editor.node(editor, point6.path);
      var el = ReactEditor.toDOMNode(editor, node5);
      var domPoint;
      if (Editor.void(editor, {
        at: point6
      })) {
        point6 = {
          path: point6.path,
          offset: 0
        };
      }
      var selector = "[data-slate-string], [data-slate-zero-width]";
      var texts = Array.from(el.querySelectorAll(selector));
      var start2 = 0;
      for (var i4 = 0; i4 < texts.length; i4++) {
        var text4 = texts[i4];
        var domNode = text4.childNodes[0];
        if (domNode == null || domNode.textContent == null) {
          continue;
        }
        var {
          length: length2
        } = domNode.textContent;
        var attr = text4.getAttribute("data-slate-length");
        var trueLength = attr == null ? length2 : parseInt(attr, 10);
        var end2 = start2 + trueLength;
        var nextText = texts[i4 + 1];
        if (point6.offset === end2 && nextText !== null && nextText !== void 0 && nextText.hasAttribute("data-slate-mark-placeholder")) {
          var _nextText$textContent;
          var domText = nextText.childNodes[0];
          domPoint = [
            // COMPAT: If we don't explicity set the dom point to be on the actual
            // dom text element, chrome will put the selection behind the actual dom
            // text element, causing domRange.getBoundingClientRect() calls on a collapsed
            // selection to return incorrect zero values (https://bugs.chromium.org/p/chromium/issues/detail?id=435438)
            // which will cause issues when scrolling to it.
            domText instanceof DOMText ? domText : nextText,
            (_nextText$textContent = nextText.textContent) !== null && _nextText$textContent !== void 0 && _nextText$textContent.startsWith("\uFEFF") ? 1 : 0
          ];
          break;
        }
        if (point6.offset <= end2) {
          var offset3 = Math.min(length2, Math.max(0, point6.offset - start2));
          domPoint = [domNode, offset3];
          break;
        }
        start2 = end2;
      }
      if (!domPoint) {
        throw new Error("Cannot resolve a DOM point from Slate point: ".concat(Scrubber.stringify(point6)));
      }
      return domPoint;
    },
    toDOMRange: (editor, range2) => {
      var {
        anchor: anchor2,
        focus
      } = range2;
      var isBackward = Range.isBackward(range2);
      var domAnchor = ReactEditor.toDOMPoint(editor, anchor2);
      var domFocus = Range.isCollapsed(range2) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);
      var window2 = ReactEditor.getWindow(editor);
      var domRange = window2.document.createRange();
      var [startNode, startOffset] = isBackward ? domFocus : domAnchor;
      var [endNode, endOffset] = isBackward ? domAnchor : domFocus;
      var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;
      var isStartAtZeroWidth = !!startEl.getAttribute("data-slate-zero-width");
      var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;
      var isEndAtZeroWidth = !!endEl.getAttribute("data-slate-zero-width");
      domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);
      domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);
      return domRange;
    },
    toSlateNode: (editor, domNode) => {
      var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;
      if (domEl && !domEl.hasAttribute("data-slate-node")) {
        domEl = domEl.closest("[data-slate-node]");
      }
      var node5 = domEl ? ELEMENT_TO_NODE.get(domEl) : null;
      if (!node5) {
        throw new Error("Cannot resolve a Slate node from DOM node: ".concat(domEl));
      }
      return node5;
    },
    toSlatePoint: (editor, domPoint, options) => {
      var {
        exactMatch,
        suppressThrow
      } = options;
      var [nearestNode, nearestOffset] = exactMatch ? domPoint : normalizeDOMPoint(domPoint);
      var parentNode = nearestNode.parentNode;
      var textNode = null;
      var offset3 = 0;
      if (parentNode) {
        var _domNode$textContent, _domNode$textContent2;
        var editorEl = ReactEditor.toDOMNode(editor, editor);
        var potentialVoidNode = parentNode.closest('[data-slate-void="true"]');
        var voidNode = potentialVoidNode && editorEl.contains(potentialVoidNode) ? potentialVoidNode : null;
        var leafNode = parentNode.closest("[data-slate-leaf]");
        var domNode = null;
        if (leafNode) {
          textNode = leafNode.closest('[data-slate-node="text"]');
          if (textNode) {
            var window2 = ReactEditor.getWindow(editor);
            var range2 = window2.document.createRange();
            range2.setStart(textNode, 0);
            range2.setEnd(nearestNode, nearestOffset);
            var contents = range2.cloneContents();
            var removals = [...Array.prototype.slice.call(contents.querySelectorAll("[data-slate-zero-width]")), ...Array.prototype.slice.call(contents.querySelectorAll("[contenteditable=false]"))];
            removals.forEach((el) => {
              if (IS_ANDROID && !exactMatch && el.hasAttribute("data-slate-zero-width") && el.textContent.length > 0 && el.textContext !== "\uFEFF") {
                if (el.textContent.startsWith("\uFEFF")) {
                  el.textContent = el.textContent.slice(1);
                }
                return;
              }
              el.parentNode.removeChild(el);
            });
            offset3 = contents.textContent.length;
            domNode = textNode;
          }
        } else if (voidNode) {
          var leafNodes = voidNode.querySelectorAll("[data-slate-leaf]");
          for (var index2 = 0; index2 < leafNodes.length; index2++) {
            var current = leafNodes[index2];
            if (ReactEditor.hasDOMNode(editor, current)) {
              leafNode = current;
              break;
            }
          }
          if (!leafNode) {
            offset3 = 1;
          } else {
            textNode = leafNode.closest('[data-slate-node="text"]');
            domNode = leafNode;
            offset3 = domNode.textContent.length;
            domNode.querySelectorAll("[data-slate-zero-width]").forEach((el) => {
              offset3 -= el.textContent.length;
            });
          }
        }
        if (domNode && offset3 === domNode.textContent.length && // COMPAT: Android IMEs might remove the zero width space while composing,
        // and we don't add it for line-breaks.
        IS_ANDROID && domNode.getAttribute("data-slate-zero-width") === "z" && (_domNode$textContent = domNode.textContent) !== null && _domNode$textContent !== void 0 && _domNode$textContent.startsWith("\uFEFF") && (parentNode.hasAttribute("data-slate-zero-width") || IS_FIREFOX && (_domNode$textContent2 = domNode.textContent) !== null && _domNode$textContent2 !== void 0 && _domNode$textContent2.endsWith("\n\n"))) {
          offset3--;
        }
      }
      if (IS_ANDROID && !textNode && !exactMatch) {
        var node5 = parentNode.hasAttribute("data-slate-node") ? parentNode : parentNode.closest("[data-slate-node]");
        if (node5 && ReactEditor.hasDOMNode(editor, node5, {
          editable: true
        })) {
          var _slateNode = ReactEditor.toSlateNode(editor, node5);
          var {
            path: _path,
            offset: _offset
          } = Editor.start(editor, ReactEditor.findPath(editor, _slateNode));
          if (!node5.querySelector("[data-slate-leaf]")) {
            _offset = nearestOffset;
          }
          return {
            path: _path,
            offset: _offset
          };
        }
      }
      if (!textNode) {
        if (suppressThrow) {
          return null;
        }
        throw new Error("Cannot resolve a Slate point from DOM point: ".concat(domPoint));
      }
      var slateNode = ReactEditor.toSlateNode(editor, textNode);
      var path4 = ReactEditor.findPath(editor, slateNode);
      return {
        path: path4,
        offset: offset3
      };
    },
    toSlateRange: (editor, domRange, options) => {
      var {
        exactMatch,
        suppressThrow
      } = options;
      var el = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;
      var anchorNode;
      var anchorOffset;
      var focusNode;
      var focusOffset;
      var isCollapsed;
      if (el) {
        if (isDOMSelection(domRange)) {
          if (IS_FIREFOX && domRange.rangeCount > 1) {
            focusNode = domRange.focusNode;
            var firstRange = domRange.getRangeAt(0);
            var lastRange = domRange.getRangeAt(domRange.rangeCount - 1);
            if (focusNode instanceof HTMLTableRowElement && firstRange.startContainer instanceof HTMLTableRowElement && lastRange.startContainer instanceof HTMLTableRowElement) {
              let getLastChildren = function(element2) {
                if (element2.childElementCount > 0) {
                  return getLastChildren(element2.children[0]);
                } else {
                  return element2;
                }
              };
              var firstNodeRow = firstRange.startContainer;
              var lastNodeRow = lastRange.startContainer;
              var firstNode = getLastChildren(firstNodeRow.children[firstRange.startOffset]);
              var lastNode = getLastChildren(lastNodeRow.children[lastRange.startOffset]);
              focusOffset = 0;
              if (lastNode.childNodes.length > 0) {
                anchorNode = lastNode.childNodes[0];
              } else {
                anchorNode = lastNode;
              }
              if (firstNode.childNodes.length > 0) {
                focusNode = firstNode.childNodes[0];
              } else {
                focusNode = firstNode;
              }
              if (lastNode instanceof HTMLElement) {
                anchorOffset = lastNode.innerHTML.length;
              } else {
                anchorOffset = 0;
              }
            } else {
              if (firstRange.startContainer === focusNode) {
                anchorNode = lastRange.endContainer;
                anchorOffset = lastRange.endOffset;
                focusOffset = firstRange.startOffset;
              } else {
                anchorNode = firstRange.startContainer;
                anchorOffset = firstRange.endOffset;
                focusOffset = lastRange.startOffset;
              }
            }
          } else {
            anchorNode = domRange.anchorNode;
            anchorOffset = domRange.anchorOffset;
            focusNode = domRange.focusNode;
            focusOffset = domRange.focusOffset;
          }
          if (IS_CHROME && hasShadowRoot(anchorNode) || IS_FIREFOX) {
            isCollapsed = domRange.anchorNode === domRange.focusNode && domRange.anchorOffset === domRange.focusOffset;
          } else {
            isCollapsed = domRange.isCollapsed;
          }
        } else {
          anchorNode = domRange.startContainer;
          anchorOffset = domRange.startOffset;
          focusNode = domRange.endContainer;
          focusOffset = domRange.endOffset;
          isCollapsed = domRange.collapsed;
        }
      }
      if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {
        throw new Error("Cannot resolve a Slate range from DOM range: ".concat(domRange));
      }
      if ("getAttribute" in focusNode && focusNode.getAttribute("contenteditable") === "false" && focusNode.getAttribute("data-slate-void") !== "true") {
        var _anchorNode$textConte;
        focusNode = anchorNode;
        focusOffset = ((_anchorNode$textConte = anchorNode.textContent) === null || _anchorNode$textConte === void 0 ? void 0 : _anchorNode$textConte.length) || 0;
      }
      var anchor2 = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset], {
        exactMatch,
        suppressThrow
      });
      if (!anchor2) {
        return null;
      }
      var focus = isCollapsed ? anchor2 : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], {
        exactMatch,
        suppressThrow
      });
      if (!focus) {
        return null;
      }
      var range2 = {
        anchor: anchor2,
        focus
      };
      if (Range.isExpanded(range2) && Range.isForward(range2) && isDOMElement(focusNode) && Editor.void(editor, {
        at: range2.focus,
        mode: "highest"
      })) {
        range2 = Editor.unhangRange(editor, range2, {
          voids: true
        });
      }
      return range2;
    }
  };
  function verifyDiffState(editor, textDiff) {
    var {
      path: path4,
      diff
    } = textDiff;
    if (!Editor.hasPath(editor, path4)) {
      return false;
    }
    var node5 = Node2.get(editor, path4);
    if (!Text2.isText(node5)) {
      return false;
    }
    if (diff.start !== node5.text.length || diff.text.length === 0) {
      return node5.text.slice(diff.start, diff.start + diff.text.length) === diff.text;
    }
    var nextPath = Path.next(path4);
    if (!Editor.hasPath(editor, nextPath)) {
      return false;
    }
    var nextNode = Node2.get(editor, nextPath);
    return Text2.isText(nextNode) && nextNode.text.startsWith(diff.text);
  }
  function applyStringDiff(text4) {
    for (var _len = arguments.length, diffs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      diffs[_key - 1] = arguments[_key];
    }
    return diffs.reduce((text5, diff) => text5.slice(0, diff.start) + diff.text + text5.slice(diff.end), text4);
  }
  function longestCommonPrefixLength(str, another) {
    var length2 = Math.min(str.length, another.length);
    for (var i4 = 0; i4 < length2; i4++) {
      if (str.charAt(i4) !== another.charAt(i4)) {
        return i4;
      }
    }
    return length2;
  }
  function longestCommonSuffixLength(str, another, max2) {
    var length2 = Math.min(str.length, another.length, max2);
    for (var i4 = 0; i4 < length2; i4++) {
      if (str.charAt(str.length - i4 - 1) !== another.charAt(another.length - i4 - 1)) {
        return i4;
      }
    }
    return length2;
  }
  function normalizeStringDiff(targetText, diff) {
    var {
      start: start2,
      end: end2,
      text: text4
    } = diff;
    var removedText = targetText.slice(start2, end2);
    var prefixLength = longestCommonPrefixLength(removedText, text4);
    var max2 = Math.min(removedText.length - prefixLength, text4.length - prefixLength);
    var suffixLength = longestCommonSuffixLength(removedText, text4, max2);
    var normalized = {
      start: start2 + prefixLength,
      end: end2 - suffixLength,
      text: text4.slice(prefixLength, text4.length - suffixLength)
    };
    if (normalized.start === normalized.end && normalized.text.length === 0) {
      return null;
    }
    return normalized;
  }
  function mergeStringDiffs(targetText, a3, b4) {
    var start2 = Math.min(a3.start, b4.start);
    var overlap = Math.max(0, Math.min(a3.start + a3.text.length, b4.end) - b4.start);
    var applied = applyStringDiff(targetText, a3, b4);
    var sliceEnd = Math.max(b4.start + b4.text.length, a3.start + a3.text.length + (a3.start + a3.text.length > b4.start ? b4.text.length : 0) - overlap);
    var text4 = applied.slice(start2, sliceEnd);
    var end2 = Math.max(a3.end, b4.end - a3.text.length + (a3.end - a3.start));
    return normalizeStringDiff(targetText, {
      start: start2,
      end: end2,
      text: text4
    });
  }
  function targetRange(textDiff) {
    var {
      path: path4,
      diff
    } = textDiff;
    return {
      anchor: {
        path: path4,
        offset: diff.start
      },
      focus: {
        path: path4,
        offset: diff.end
      }
    };
  }
  function normalizePoint(editor, point6) {
    var {
      path: path4,
      offset: offset3
    } = point6;
    if (!Editor.hasPath(editor, path4)) {
      return null;
    }
    var leaf3 = Node2.get(editor, path4);
    if (!Text2.isText(leaf3)) {
      return null;
    }
    var parentBlock = Editor.above(editor, {
      match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6),
      at: path4
    });
    if (!parentBlock) {
      return null;
    }
    while (offset3 > leaf3.text.length) {
      var entry = Editor.next(editor, {
        at: path4,
        match: Text2.isText
      });
      if (!entry || !Path.isDescendant(entry[1], parentBlock[1])) {
        return null;
      }
      offset3 -= leaf3.text.length;
      leaf3 = entry[0];
      path4 = entry[1];
    }
    return {
      path: path4,
      offset: offset3
    };
  }
  function normalizeRange(editor, range2) {
    var anchor2 = normalizePoint(editor, range2.anchor);
    if (!anchor2) {
      return null;
    }
    if (Range.isCollapsed(range2)) {
      return {
        anchor: anchor2,
        focus: anchor2
      };
    }
    var focus = normalizePoint(editor, range2.focus);
    if (!focus) {
      return null;
    }
    return {
      anchor: anchor2,
      focus
    };
  }
  function transformPendingPoint(editor, point6, op) {
    var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor);
    var textDiff = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find((_ref) => {
      var {
        path: path4
      } = _ref;
      return Path.equals(path4, point6.path);
    });
    if (!textDiff || point6.offset <= textDiff.diff.start) {
      return Point.transform(point6, op, {
        affinity: "backward"
      });
    }
    var {
      diff
    } = textDiff;
    if (point6.offset <= diff.start + diff.text.length) {
      var _anchor = {
        path: point6.path,
        offset: diff.start
      };
      var _transformed = Point.transform(_anchor, op, {
        affinity: "backward"
      });
      if (!_transformed) {
        return null;
      }
      return {
        path: _transformed.path,
        offset: _transformed.offset + point6.offset - diff.start
      };
    }
    var anchor2 = {
      path: point6.path,
      offset: point6.offset - diff.text.length + diff.end - diff.start
    };
    var transformed = Point.transform(anchor2, op, {
      affinity: "backward"
    });
    if (!transformed) {
      return null;
    }
    if (op.type === "split_node" && Path.equals(op.path, point6.path) && anchor2.offset < op.position && diff.start < op.position) {
      return transformed;
    }
    return {
      path: transformed.path,
      offset: transformed.offset + diff.text.length - diff.end + diff.start
    };
  }
  function transformPendingRange(editor, range2, op) {
    var anchor2 = transformPendingPoint(editor, range2.anchor, op);
    if (!anchor2) {
      return null;
    }
    if (Range.isCollapsed(range2)) {
      return {
        anchor: anchor2,
        focus: anchor2
      };
    }
    var focus = transformPendingPoint(editor, range2.focus, op);
    if (!focus) {
      return null;
    }
    return {
      anchor: anchor2,
      focus
    };
  }
  function transformTextDiff(textDiff, op) {
    var {
      path: path4,
      diff,
      id
    } = textDiff;
    switch (op.type) {
      case "insert_text": {
        if (!Path.equals(op.path, path4) || op.offset >= diff.end) {
          return textDiff;
        }
        if (op.offset <= diff.start) {
          return {
            diff: {
              start: op.text.length + diff.start,
              end: op.text.length + diff.end,
              text: diff.text
            },
            id,
            path: path4
          };
        }
        return {
          diff: {
            start: diff.start,
            end: diff.end + op.text.length,
            text: diff.text
          },
          id,
          path: path4
        };
      }
      case "remove_text": {
        if (!Path.equals(op.path, path4) || op.offset >= diff.end) {
          return textDiff;
        }
        if (op.offset + op.text.length <= diff.start) {
          return {
            diff: {
              start: diff.start - op.text.length,
              end: diff.end - op.text.length,
              text: diff.text
            },
            id,
            path: path4
          };
        }
        return {
          diff: {
            start: diff.start,
            end: diff.end - op.text.length,
            text: diff.text
          },
          id,
          path: path4
        };
      }
      case "split_node": {
        if (!Path.equals(op.path, path4) || op.position >= diff.end) {
          return {
            diff,
            id,
            path: Path.transform(path4, op, {
              affinity: "backward"
            })
          };
        }
        if (op.position > diff.start) {
          return {
            diff: {
              start: diff.start,
              end: Math.min(op.position, diff.end),
              text: diff.text
            },
            id,
            path: path4
          };
        }
        return {
          diff: {
            start: diff.start - op.position,
            end: diff.end - op.position,
            text: diff.text
          },
          id,
          path: Path.transform(path4, op, {
            affinity: "forward"
          })
        };
      }
      case "merge_node": {
        if (!Path.equals(op.path, path4)) {
          return {
            diff,
            id,
            path: Path.transform(path4, op)
          };
        }
        return {
          diff: {
            start: diff.start + op.position,
            end: diff.end + op.position,
            text: diff.text
          },
          id,
          path: Path.transform(path4, op)
        };
      }
    }
    var newPath = Path.transform(path4, op);
    if (!newPath) {
      return null;
    }
    return {
      diff,
      path: newPath,
      id
    };
  }
  function ownKeys$32(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$32(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$32(Object(source), true).forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$32(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var RESOLVE_DELAY = 25;
  var FLUSH_DELAY = 200;
  var debug = function debug2() {
  };
  var isDataTransfer = (value) => (value === null || value === void 0 ? void 0 : value.constructor.name) === "DataTransfer";
  function createAndroidInputManager(_ref) {
    var {
      editor,
      scheduleOnDOMSelectionChange,
      onDOMSelectionChange
    } = _ref;
    var flushing = false;
    var compositionEndTimeoutId = null;
    var flushTimeoutId = null;
    var actionTimeoutId = null;
    var idCounter = 0;
    var insertPositionHint = false;
    var applyPendingSelection = () => {
      var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(editor);
      EDITOR_TO_PENDING_SELECTION.delete(editor);
      if (pendingSelection) {
        var {
          selection
        } = editor;
        var normalized = normalizeRange(editor, pendingSelection);
        if (normalized && (!selection || !Range.equals(normalized, selection))) {
          Transforms.select(editor, normalized);
        }
      }
    };
    var performAction = () => {
      var action = EDITOR_TO_PENDING_ACTION.get(editor);
      EDITOR_TO_PENDING_ACTION.delete(editor);
      if (!action) {
        return;
      }
      if (action.at) {
        var target = Point.isPoint(action.at) ? normalizePoint(editor, action.at) : normalizeRange(editor, action.at);
        if (!target) {
          return;
        }
        var _targetRange = Editor.range(editor, target);
        if (!editor.selection || !Range.equals(editor.selection, _targetRange)) {
          Transforms.select(editor, target);
        }
      }
      action.run();
    };
    var flush = () => {
      if (flushTimeoutId) {
        clearTimeout(flushTimeoutId);
        flushTimeoutId = null;
      }
      if (actionTimeoutId) {
        clearTimeout(actionTimeoutId);
        actionTimeoutId = null;
      }
      if (!hasPendingDiffs() && !hasPendingAction()) {
        applyPendingSelection();
        return;
      }
      if (!flushing) {
        flushing = true;
        setTimeout(() => flushing = false);
      }
      if (hasPendingAction()) {
        flushing = "action";
      }
      var selectionRef = editor.selection && Editor.rangeRef(editor, editor.selection, {
        affinity: "forward"
      });
      EDITOR_TO_USER_MARKS.set(editor, editor.marks);
      debug("flush", EDITOR_TO_PENDING_ACTION.get(editor), EDITOR_TO_PENDING_DIFFS.get(editor));
      var scheduleSelectionChange = hasPendingDiffs();
      var diff;
      while (diff = (_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]) {
        var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;
        var pendingMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);
        if (pendingMarks !== void 0) {
          EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);
          editor.marks = pendingMarks;
        }
        if (pendingMarks && insertPositionHint === false) {
          insertPositionHint = null;
        }
        var range2 = targetRange(diff);
        if (!editor.selection || !Range.equals(editor.selection, range2)) {
          Transforms.select(editor, range2);
        }
        if (diff.diff.text) {
          Editor.insertText(editor, diff.diff.text);
        } else {
          Editor.deleteFragment(editor);
        }
        EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter((_ref2) => {
          var {
            id
          } = _ref2;
          return id !== diff.id;
        }));
        if (!verifyDiffState(editor, diff)) {
          scheduleSelectionChange = false;
          EDITOR_TO_PENDING_ACTION.delete(editor);
          EDITOR_TO_USER_MARKS.delete(editor);
          flushing = "action";
          EDITOR_TO_PENDING_SELECTION.delete(editor);
          scheduleOnDOMSelectionChange.cancel();
          onDOMSelectionChange.cancel();
          selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();
        }
      }
      var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();
      if (selection && !EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !Range.equals(selection, editor.selection))) {
        Transforms.select(editor, selection);
      }
      if (hasPendingAction()) {
        performAction();
        return;
      }
      if (scheduleSelectionChange) {
        scheduleOnDOMSelectionChange();
      }
      scheduleOnDOMSelectionChange.flush();
      onDOMSelectionChange.flush();
      applyPendingSelection();
      var userMarks = EDITOR_TO_USER_MARKS.get(editor);
      EDITOR_TO_USER_MARKS.delete(editor);
      if (userMarks !== void 0) {
        editor.marks = userMarks;
        editor.onChange();
      }
    };
    var handleCompositionEnd = (_event) => {
      if (compositionEndTimeoutId) {
        clearTimeout(compositionEndTimeoutId);
      }
      compositionEndTimeoutId = setTimeout(() => {
        IS_COMPOSING.set(editor, false);
        flush();
      }, RESOLVE_DELAY);
    };
    var handleCompositionStart = (_event) => {
      IS_COMPOSING.set(editor, true);
      if (compositionEndTimeoutId) {
        clearTimeout(compositionEndTimeoutId);
        compositionEndTimeoutId = null;
      }
    };
    var updatePlaceholderVisibility = function updatePlaceholderVisibility2() {
      var forceHide = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var placeholderElement = EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);
      if (!placeholderElement) {
        return;
      }
      if (hasPendingDiffs() || forceHide) {
        placeholderElement.style.display = "none";
        return;
      }
      placeholderElement.style.removeProperty("display");
    };
    var storeDiff = (path4, diff) => {
      var _EDITOR_TO_PENDING_DI3;
      var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];
      EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);
      var target = Node2.leaf(editor, path4);
      var idx = pendingDiffs.findIndex((change) => Path.equals(change.path, path4));
      if (idx < 0) {
        var normalized = normalizeStringDiff(target.text, diff);
        if (normalized) {
          pendingDiffs.push({
            path: path4,
            diff,
            id: idCounter++
          });
        }
        updatePlaceholderVisibility();
        return;
      }
      var merged = mergeStringDiffs(target.text, pendingDiffs[idx].diff, diff);
      if (!merged) {
        pendingDiffs.splice(idx, 1);
        updatePlaceholderVisibility();
        return;
      }
      pendingDiffs[idx] = _objectSpread$32(_objectSpread$32({}, pendingDiffs[idx]), {}, {
        diff: merged
      });
    };
    var scheduleAction = function scheduleAction2(run) {
      var {
        at
      } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      insertPositionHint = false;
      EDITOR_TO_PENDING_SELECTION.delete(editor);
      scheduleOnDOMSelectionChange.cancel();
      onDOMSelectionChange.cancel();
      if (hasPendingAction()) {
        flush();
      }
      EDITOR_TO_PENDING_ACTION.set(editor, {
        at,
        run
      });
      actionTimeoutId = setTimeout(flush);
    };
    var handleDOMBeforeInput = (event) => {
      var _targetRange2;
      if (flushTimeoutId) {
        clearTimeout(flushTimeoutId);
        flushTimeoutId = null;
      }
      var {
        inputType: type
      } = event;
      var targetRange2 = null;
      var data = event.dataTransfer || event.data || void 0;
      if (insertPositionHint !== false && type !== "insertText" && type !== "insertCompositionText") {
        insertPositionHint = false;
      }
      var [nativeTargetRange] = event.getTargetRanges();
      if (nativeTargetRange) {
        targetRange2 = ReactEditor.toSlateRange(editor, nativeTargetRange, {
          exactMatch: false,
          suppressThrow: true
        });
      }
      var window2 = ReactEditor.getWindow(editor);
      var domSelection = window2.getSelection();
      if (!targetRange2 && domSelection) {
        nativeTargetRange = domSelection;
        targetRange2 = ReactEditor.toSlateRange(editor, domSelection, {
          exactMatch: false,
          suppressThrow: true
        });
      }
      targetRange2 = (_targetRange2 = targetRange2) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;
      if (!targetRange2) {
        return;
      }
      var canStoreDiff = true;
      if (type.startsWith("delete")) {
        if (Range.isExpanded(targetRange2)) {
          var [_start, _end] = Range.edges(targetRange2);
          var _leaf = Node2.leaf(editor, _start.path);
          if (_leaf.text.length === _start.offset && _end.offset === 0) {
            var next4 = Editor.next(editor, {
              at: _start.path,
              match: Text2.isText
            });
            if (next4 && Path.equals(next4[1], _end.path)) {
              targetRange2 = {
                anchor: _end,
                focus: _end
              };
            }
          }
        }
        var direction = type.endsWith("Backward") ? "backward" : "forward";
        var [start2, end2] = Range.edges(targetRange2);
        var [leaf3, path4] = Editor.leaf(editor, start2.path);
        var diff = {
          text: "",
          start: start2.offset,
          end: end2.offset
        };
        var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor);
        var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find((change) => Path.equals(change.path, path4));
        var diffs = relevantPendingDiffs ? [relevantPendingDiffs.diff, diff] : [diff];
        var text4 = applyStringDiff(leaf3.text, ...diffs);
        if (text4.length === 0) {
          canStoreDiff = false;
        }
        if (Range.isExpanded(targetRange2)) {
          if (canStoreDiff && Path.equals(targetRange2.anchor.path, targetRange2.focus.path)) {
            var point6 = {
              path: targetRange2.anchor.path,
              offset: start2.offset
            };
            var range2 = Editor.range(editor, point6, point6);
            handleUserSelect(range2);
            return storeDiff(targetRange2.anchor.path, {
              text: "",
              end: end2.offset,
              start: start2.offset
            });
          }
          return scheduleAction(() => Editor.deleteFragment(editor, {
            direction
          }), {
            at: targetRange2
          });
        }
      }
      switch (type) {
        case "deleteByComposition":
        case "deleteByCut":
        case "deleteByDrag": {
          return scheduleAction(() => Editor.deleteFragment(editor), {
            at: targetRange2
          });
        }
        case "deleteContent":
        case "deleteContentForward": {
          var {
            anchor: anchor2
          } = targetRange2;
          if (canStoreDiff && Range.isCollapsed(targetRange2)) {
            var targetNode = Node2.leaf(editor, anchor2.path);
            if (anchor2.offset < targetNode.text.length) {
              return storeDiff(anchor2.path, {
                text: "",
                start: anchor2.offset,
                end: anchor2.offset + 1
              });
            }
          }
          return scheduleAction(() => Editor.deleteForward(editor), {
            at: targetRange2
          });
        }
        case "deleteContentBackward": {
          var _nativeTargetRange;
          var {
            anchor: _anchor
          } = targetRange2;
          var nativeCollapsed = isDOMSelection(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);
          if (canStoreDiff && nativeCollapsed && Range.isCollapsed(targetRange2) && _anchor.offset > 0) {
            return storeDiff(_anchor.path, {
              text: "",
              start: _anchor.offset - 1,
              end: _anchor.offset
            });
          }
          return scheduleAction(() => Editor.deleteBackward(editor), {
            at: targetRange2
          });
        }
        case "deleteEntireSoftLine": {
          return scheduleAction(() => {
            Editor.deleteBackward(editor, {
              unit: "line"
            });
            Editor.deleteForward(editor, {
              unit: "line"
            });
          }, {
            at: targetRange2
          });
        }
        case "deleteHardLineBackward": {
          return scheduleAction(() => Editor.deleteBackward(editor, {
            unit: "block"
          }), {
            at: targetRange2
          });
        }
        case "deleteSoftLineBackward": {
          return scheduleAction(() => Editor.deleteBackward(editor, {
            unit: "line"
          }), {
            at: targetRange2
          });
        }
        case "deleteHardLineForward": {
          return scheduleAction(() => Editor.deleteForward(editor, {
            unit: "block"
          }), {
            at: targetRange2
          });
        }
        case "deleteSoftLineForward": {
          return scheduleAction(() => Editor.deleteForward(editor, {
            unit: "line"
          }), {
            at: targetRange2
          });
        }
        case "deleteWordBackward": {
          return scheduleAction(() => Editor.deleteBackward(editor, {
            unit: "word"
          }), {
            at: targetRange2
          });
        }
        case "deleteWordForward": {
          return scheduleAction(() => Editor.deleteForward(editor, {
            unit: "word"
          }), {
            at: targetRange2
          });
        }
        case "insertLineBreak": {
          return scheduleAction(() => Editor.insertSoftBreak(editor), {
            at: targetRange2
          });
        }
        case "insertParagraph": {
          return scheduleAction(() => Editor.insertBreak(editor), {
            at: targetRange2
          });
        }
        case "insertCompositionText":
        case "deleteCompositionText":
        case "insertFromComposition":
        case "insertFromDrop":
        case "insertFromPaste":
        case "insertFromYank":
        case "insertReplacementText":
        case "insertText": {
          if (isDataTransfer(data)) {
            return scheduleAction(() => ReactEditor.insertData(editor, data), {
              at: targetRange2
            });
          }
          var _text = data !== null && data !== void 0 ? data : "";
          if (EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {
            _text = _text.replace("\uFEFF", "");
          }
          if (type === "insertText" && /.*\n.*\n$/.test(_text)) {
            _text = _text.slice(0, -1);
          }
          if (_text.includes("\n")) {
            return scheduleAction(() => {
              var parts = _text.split("\n");
              parts.forEach((line2, i4) => {
                if (line2) {
                  Editor.insertText(editor, line2);
                }
                if (i4 !== parts.length - 1) {
                  Editor.insertSoftBreak(editor);
                }
              });
            }, {
              at: targetRange2
            });
          }
          if (Path.equals(targetRange2.anchor.path, targetRange2.focus.path)) {
            var [_start2, _end2] = Range.edges(targetRange2);
            var _diff = {
              start: _start2.offset,
              end: _end2.offset,
              text: _text
            };
            if (_text && insertPositionHint && type === "insertCompositionText") {
              var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\S|$/);
              var diffPosition = _diff.start + _diff.text.search(/\S|$/);
              if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {
                _diff.start -= 1;
                insertPositionHint = null;
                scheduleFlush();
              } else {
                insertPositionHint = false;
              }
            } else if (type === "insertText") {
              if (insertPositionHint === null) {
                insertPositionHint = _diff;
              } else if (insertPositionHint && Range.isCollapsed(targetRange2) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {
                insertPositionHint = _objectSpread$32(_objectSpread$32({}, insertPositionHint), {}, {
                  text: insertPositionHint.text + _text
                });
              } else {
                insertPositionHint = false;
              }
            } else {
              insertPositionHint = false;
            }
            if (canStoreDiff) {
              storeDiff(_start2.path, _diff);
              return;
            }
          }
          return scheduleAction(() => Editor.insertText(editor, _text), {
            at: targetRange2
          });
        }
      }
    };
    var hasPendingAction = () => {
      return !!EDITOR_TO_PENDING_ACTION.get(editor);
    };
    var hasPendingDiffs = () => {
      var _EDITOR_TO_PENDING_DI4;
      return !!((_EDITOR_TO_PENDING_DI4 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);
    };
    var hasPendingChanges = () => {
      return hasPendingAction() || hasPendingDiffs();
    };
    var isFlushing = () => {
      return flushing;
    };
    var handleUserSelect = (range2) => {
      EDITOR_TO_PENDING_SELECTION.set(editor, range2);
      if (flushTimeoutId) {
        clearTimeout(flushTimeoutId);
        flushTimeoutId = null;
      }
      var {
        selection
      } = editor;
      if (!range2) {
        return;
      }
      var pathChanged = !selection || !Path.equals(selection.anchor.path, range2.anchor.path);
      var parentPathChanged = !selection || !Path.equals(selection.anchor.path.slice(0, -1), range2.anchor.path.slice(0, -1));
      if (pathChanged && insertPositionHint || parentPathChanged) {
        insertPositionHint = false;
      }
      if (pathChanged || hasPendingDiffs()) {
        flushTimeoutId = setTimeout(flush, FLUSH_DELAY);
      }
    };
    var handleInput = () => {
      if (hasPendingAction() || !hasPendingDiffs()) {
        flush();
      }
    };
    var handleKeyDown = (_3) => {
      if (!hasPendingDiffs()) {
        updatePlaceholderVisibility(true);
        setTimeout(updatePlaceholderVisibility);
      }
    };
    var scheduleFlush = () => {
      if (!hasPendingAction()) {
        actionTimeoutId = setTimeout(flush);
      }
    };
    var handleDomMutations = (mutations) => {
      if (hasPendingDiffs() || hasPendingAction()) {
        return;
      }
      if (mutations.some((mutation) => isTrackedMutation(editor, mutation, mutations))) {
        var _EDITOR_TO_FORCE_REND;
        (_EDITOR_TO_FORCE_REND = EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 ? void 0 : _EDITOR_TO_FORCE_REND();
      }
    };
    return {
      flush,
      scheduleFlush,
      hasPendingDiffs,
      hasPendingAction,
      hasPendingChanges,
      isFlushing,
      handleUserSelect,
      handleCompositionEnd,
      handleCompositionStart,
      handleDOMBeforeInput,
      handleKeyDown,
      handleDomMutations,
      handleInput
    };
  }
  function useIsMounted() {
    var isMountedRef = (0, import_react62.useRef)(false);
    (0, import_react62.useEffect)(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    return isMountedRef.current;
  }
  var useIsomorphicLayoutEffect4 = CAN_USE_DOM ? import_react62.useLayoutEffect : import_react62.useEffect;
  function useMutationObserver(node5, callback, options) {
    var [mutationObserver] = (0, import_react62.useState)(() => new MutationObserver(callback));
    useIsomorphicLayoutEffect4(() => {
      mutationObserver.takeRecords();
    });
    (0, import_react62.useEffect)(() => {
      if (!node5.current) {
        throw new Error("Failed to attach MutationObserver, `node` is undefined");
      }
      mutationObserver.observe(node5.current, options);
      return () => mutationObserver.disconnect();
    }, [mutationObserver, node5, options]);
  }
  var _excluded$32 = ["node"];
  function ownKeys$22(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$22(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$22(Object(source), true).forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$22(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var MUTATION_OBSERVER_CONFIG$1 = {
    subtree: true,
    childList: true,
    characterData: true
  };
  var useAndroidInputManager = !IS_ANDROID ? () => null : (_ref) => {
    var {
      node: node5
    } = _ref, options = _objectWithoutProperties2(_ref, _excluded$32);
    if (!IS_ANDROID) {
      return null;
    }
    var editor = useSlateStatic();
    var isMounted = useIsMounted();
    var [inputManager] = (0, import_react62.useState)(() => createAndroidInputManager(_objectSpread$22({
      editor
    }, options)));
    useMutationObserver(node5, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);
    EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);
    if (isMounted) {
      inputManager.flush();
    }
    return inputManager;
  };
  var _excluded$22 = ["anchor", "focus"];
  var _excluded2$12 = ["anchor", "focus"];
  var shallowCompare2 = (obj1, obj2) => Object.keys(obj1).length === Object.keys(obj2).length && Object.keys(obj1).every((key) => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]);
  var isDecorationFlagsEqual = (range2, other) => {
    var rangeOwnProps = _objectWithoutProperties2(range2, _excluded$22);
    var otherOwnProps = _objectWithoutProperties2(other, _excluded2$12);
    return range2[PLACEHOLDER_SYMBOL] === other[PLACEHOLDER_SYMBOL] && shallowCompare2(rangeOwnProps, otherOwnProps);
  };
  var isElementDecorationsEqual = (list3, another) => {
    if (list3.length !== another.length) {
      return false;
    }
    for (var i4 = 0; i4 < list3.length; i4++) {
      var range2 = list3[i4];
      var other = another[i4];
      if (!Range.equals(range2, other) || !isDecorationFlagsEqual(range2, other)) {
        return false;
      }
    }
    return true;
  };
  var isTextDecorationsEqual = (list3, another) => {
    if (list3.length !== another.length) {
      return false;
    }
    for (var i4 = 0; i4 < list3.length; i4++) {
      var range2 = list3[i4];
      var other = another[i4];
      if (range2.anchor.offset !== other.anchor.offset || range2.focus.offset !== other.focus.offset || !isDecorationFlagsEqual(range2, other)) {
        return false;
      }
    }
    return true;
  };
  var String2 = (props) => {
    var {
      isLast,
      leaf: leaf3,
      parent: parent3,
      text: text4
    } = props;
    var editor = useSlateStatic();
    var path4 = ReactEditor.findPath(editor, text4);
    var parentPath = Path.parent(path4);
    var isMarkPlaceholder = leaf3[MARK_PLACEHOLDER_SYMBOL] === true;
    if (editor.isVoid(parent3)) {
      return /* @__PURE__ */ import_react62.default.createElement(ZeroWidthString, {
        length: Node2.string(parent3).length
      });
    }
    if (leaf3.text === "" && parent3.children[parent3.children.length - 1] === text4 && !editor.isInline(parent3) && Editor.string(editor, parentPath) === "") {
      return /* @__PURE__ */ import_react62.default.createElement(ZeroWidthString, {
        isLineBreak: true,
        isMarkPlaceholder
      });
    }
    if (leaf3.text === "") {
      return /* @__PURE__ */ import_react62.default.createElement(ZeroWidthString, {
        isMarkPlaceholder
      });
    }
    if (isLast && leaf3.text.slice(-1) === "\n") {
      return /* @__PURE__ */ import_react62.default.createElement(TextString, {
        isTrailing: true,
        text: leaf3.text
      });
    }
    return /* @__PURE__ */ import_react62.default.createElement(TextString, {
      text: leaf3.text
    });
  };
  var TextString = (props) => {
    var {
      text: text4,
      isTrailing = false
    } = props;
    var ref = (0, import_react62.useRef)(null);
    var getTextContent = () => {
      return "".concat(text4 !== null && text4 !== void 0 ? text4 : "").concat(isTrailing ? "\n" : "");
    };
    var [initialText] = (0, import_react62.useState)(getTextContent);
    useIsomorphicLayoutEffect4(() => {
      var textWithTrailing = getTextContent();
      if (ref.current && ref.current.textContent !== textWithTrailing) {
        ref.current.textContent = textWithTrailing;
      }
    });
    return /* @__PURE__ */ import_react62.default.createElement(MemoizedText$1, {
      ref
    }, initialText);
  };
  var MemoizedText$1 = /* @__PURE__ */ (0, import_react62.memo)(/* @__PURE__ */ (0, import_react62.forwardRef)((props, ref) => {
    return /* @__PURE__ */ import_react62.default.createElement("span", {
      "data-slate-string": true,
      ref
    }, props.children);
  }));
  var ZeroWidthString = (props) => {
    var {
      length: length2 = 0,
      isLineBreak = false,
      isMarkPlaceholder = false
    } = props;
    var attributes = {
      "data-slate-zero-width": isLineBreak ? "n" : "z",
      "data-slate-length": length2
    };
    if (isMarkPlaceholder) {
      attributes["data-slate-mark-placeholder"] = true;
    }
    return /* @__PURE__ */ import_react62.default.createElement("span", Object.assign({}, attributes), !IS_ANDROID || !isLineBreak ? "\uFEFF" : null, isLineBreak ? /* @__PURE__ */ import_react62.default.createElement("br", null) : null);
  };
  function disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {
    if (placeholderResizeObserver.current) {
      placeholderResizeObserver.current.disconnect();
      if (releaseObserver) {
        placeholderResizeObserver.current = null;
      }
    }
  }
  function clearTimeoutRef(timeoutRef) {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  }
  var Leaf = (props) => {
    var {
      leaf: leaf3,
      isLast,
      text: text4,
      parent: parent3,
      renderPlaceholder,
      renderLeaf = (props2) => /* @__PURE__ */ import_react62.default.createElement(DefaultLeaf, Object.assign({}, props2))
    } = props;
    var editor = useSlateStatic();
    var placeholderResizeObserver = (0, import_react62.useRef)(null);
    var placeholderRef = (0, import_react62.useRef)(null);
    var [showPlaceholder, setShowPlaceholder] = (0, import_react62.useState)(false);
    var showPlaceholderTimeoutRef = (0, import_react62.useRef)(null);
    var callbackPlaceholderRef = (0, import_react62.useCallback)((placeholderEl) => {
      disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);
      if (placeholderEl == null) {
        var _leaf$onPlaceholderRe;
        EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);
        (_leaf$onPlaceholderRe = leaf3.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 ? void 0 : _leaf$onPlaceholderRe.call(leaf3, null);
      } else {
        EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);
        if (!placeholderResizeObserver.current) {
          var ResizeObserver$1 = window.ResizeObserver || ResizeObserver2;
          placeholderResizeObserver.current = new ResizeObserver$1(() => {
            var _leaf$onPlaceholderRe2;
            (_leaf$onPlaceholderRe2 = leaf3.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 ? void 0 : _leaf$onPlaceholderRe2.call(leaf3, placeholderEl);
          });
        }
        placeholderResizeObserver.current.observe(placeholderEl);
        placeholderRef.current = placeholderEl;
      }
    }, [placeholderRef, leaf3, editor]);
    var children = /* @__PURE__ */ import_react62.default.createElement(String2, {
      isLast,
      leaf: leaf3,
      parent: parent3,
      text: text4
    });
    var leafIsPlaceholder = leaf3[PLACEHOLDER_SYMBOL];
    (0, import_react62.useEffect)(() => {
      if (leafIsPlaceholder) {
        if (!showPlaceholderTimeoutRef.current) {
          showPlaceholderTimeoutRef.current = setTimeout(() => {
            setShowPlaceholder(true);
            showPlaceholderTimeoutRef.current = null;
          }, 300);
        }
      } else {
        clearTimeoutRef(showPlaceholderTimeoutRef);
        setShowPlaceholder(false);
      }
      return () => clearTimeoutRef(showPlaceholderTimeoutRef);
    }, [leafIsPlaceholder, setShowPlaceholder]);
    if (leafIsPlaceholder && showPlaceholder) {
      var placeholderProps = {
        children: leaf3.placeholder,
        attributes: {
          "data-slate-placeholder": true,
          style: {
            position: "absolute",
            top: 0,
            pointerEvents: "none",
            width: "100%",
            maxWidth: "100%",
            display: "block",
            opacity: "0.333",
            userSelect: "none",
            textDecoration: "none",
            // Fixes https://github.com/udecode/plate/issues/2315
            WebkitUserModify: IS_WEBKIT ? "inherit" : void 0
          },
          contentEditable: false,
          ref: callbackPlaceholderRef
        }
      };
      children = /* @__PURE__ */ import_react62.default.createElement(import_react62.default.Fragment, null, renderPlaceholder(placeholderProps), children);
    }
    var attributes = {
      "data-slate-leaf": true
    };
    return renderLeaf({
      attributes,
      children,
      leaf: leaf3,
      text: text4
    });
  };
  var MemoizedLeaf = /* @__PURE__ */ import_react62.default.memo(Leaf, (prev2, next4) => {
    return next4.parent === prev2.parent && next4.isLast === prev2.isLast && next4.renderLeaf === prev2.renderLeaf && next4.renderPlaceholder === prev2.renderPlaceholder && next4.text === prev2.text && Text2.equals(next4.leaf, prev2.leaf) && next4.leaf[PLACEHOLDER_SYMBOL] === prev2.leaf[PLACEHOLDER_SYMBOL];
  });
  var DefaultLeaf = (props) => {
    var {
      attributes,
      children
    } = props;
    return /* @__PURE__ */ import_react62.default.createElement("span", Object.assign({}, attributes), children);
  };
  var Text3 = (props) => {
    var {
      decorations,
      isLast,
      parent: parent3,
      renderPlaceholder,
      renderLeaf,
      text: text4
    } = props;
    var editor = useSlateStatic();
    var ref = (0, import_react62.useRef)(null);
    var leaves = Text2.decorations(text4, decorations);
    var key = ReactEditor.findKey(editor, text4);
    var children = [];
    for (var i4 = 0; i4 < leaves.length; i4++) {
      var leaf3 = leaves[i4];
      children.push(/* @__PURE__ */ import_react62.default.createElement(MemoizedLeaf, {
        isLast: isLast && i4 === leaves.length - 1,
        key: "".concat(key.id, "-").concat(i4),
        renderPlaceholder,
        leaf: leaf3,
        text: text4,
        parent: parent3,
        renderLeaf
      }));
    }
    var callbackRef = (0, import_react62.useCallback)((span) => {
      var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
      if (span) {
        KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.set(key, span);
        NODE_TO_ELEMENT.set(text4, span);
        ELEMENT_TO_NODE.set(span, text4);
      } else {
        KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.delete(key);
        NODE_TO_ELEMENT.delete(text4);
        if (ref.current) {
          ELEMENT_TO_NODE.delete(ref.current);
        }
      }
      ref.current = span;
    }, [ref, editor, key, text4]);
    return /* @__PURE__ */ import_react62.default.createElement("span", {
      "data-slate-node": "text",
      ref: callbackRef
    }, children);
  };
  var MemoizedText = /* @__PURE__ */ import_react62.default.memo(Text3, (prev2, next4) => {
    return next4.parent === prev2.parent && next4.isLast === prev2.isLast && next4.renderLeaf === prev2.renderLeaf && next4.renderPlaceholder === prev2.renderPlaceholder && next4.text === prev2.text && isTextDecorationsEqual(next4.decorations, prev2.decorations);
  });
  var Element3 = (props) => {
    var {
      decorations,
      element: element2,
      renderElement = (p3) => /* @__PURE__ */ import_react62.default.createElement(DefaultElement, Object.assign({}, p3)),
      renderPlaceholder,
      renderLeaf,
      selection
    } = props;
    var editor = useSlateStatic();
    var readOnly = useReadOnly();
    var isInline = editor.isInline(element2);
    var key = ReactEditor.findKey(editor, element2);
    var ref = (0, import_react62.useCallback)((ref2) => {
      var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
      if (ref2) {
        KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.set(key, ref2);
        NODE_TO_ELEMENT.set(element2, ref2);
        ELEMENT_TO_NODE.set(ref2, element2);
      } else {
        KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.delete(key);
        NODE_TO_ELEMENT.delete(element2);
      }
    }, [editor, key, element2]);
    var children = useChildren({
      decorations,
      node: element2,
      renderElement,
      renderPlaceholder,
      renderLeaf,
      selection
    });
    var attributes = {
      "data-slate-node": "element",
      ref
    };
    if (isInline) {
      attributes["data-slate-inline"] = true;
    }
    if (!isInline && Editor.hasInlines(editor, element2)) {
      var text4 = Node2.string(element2);
      var dir = (0, import_direction.default)(text4);
      if (dir === "rtl") {
        attributes.dir = dir;
      }
    }
    if (Editor.isVoid(editor, element2)) {
      attributes["data-slate-void"] = true;
      if (!readOnly && isInline) {
        attributes.contentEditable = false;
      }
      var Tag2 = isInline ? "span" : "div";
      var [[_text]] = Node2.texts(element2);
      children = /* @__PURE__ */ import_react62.default.createElement(Tag2, {
        "data-slate-spacer": true,
        style: {
          height: "0",
          color: "transparent",
          outline: "none",
          position: "absolute"
        }
      }, /* @__PURE__ */ import_react62.default.createElement(MemoizedText, {
        renderPlaceholder,
        decorations: [],
        isLast: false,
        parent: element2,
        text: _text
      }));
      NODE_TO_INDEX.set(_text, 0);
      NODE_TO_PARENT.set(_text, element2);
    }
    return renderElement({
      attributes,
      children,
      element: element2
    });
  };
  var MemoizedElement = /* @__PURE__ */ import_react62.default.memo(Element3, (prev2, next4) => {
    return prev2.element === next4.element && prev2.renderElement === next4.renderElement && prev2.renderLeaf === next4.renderLeaf && prev2.renderPlaceholder === next4.renderPlaceholder && isElementDecorationsEqual(prev2.decorations, next4.decorations) && (prev2.selection === next4.selection || !!prev2.selection && !!next4.selection && Range.equals(prev2.selection, next4.selection));
  });
  var DefaultElement = (props) => {
    var {
      attributes,
      children,
      element: element2
    } = props;
    var editor = useSlateStatic();
    var Tag2 = editor.isInline(element2) ? "span" : "div";
    return /* @__PURE__ */ import_react62.default.createElement(Tag2, Object.assign({}, attributes, {
      style: {
        position: "relative"
      }
    }), children);
  };
  var DecorateContext = /* @__PURE__ */ (0, import_react62.createContext)(() => []);
  var useDecorate = () => {
    return (0, import_react62.useContext)(DecorateContext);
  };
  var SelectedContext = /* @__PURE__ */ (0, import_react62.createContext)(false);
  var useChildren = (props) => {
    var {
      decorations,
      node: node5,
      renderElement,
      renderPlaceholder,
      renderLeaf,
      selection
    } = props;
    var decorate = useDecorate();
    var editor = useSlateStatic();
    var path4 = ReactEditor.findPath(editor, node5);
    var children = [];
    var isLeafBlock = Element2.isElement(node5) && !editor.isInline(node5) && Editor.hasInlines(editor, node5);
    for (var i4 = 0; i4 < node5.children.length; i4++) {
      var p3 = path4.concat(i4);
      var n6 = node5.children[i4];
      var key = ReactEditor.findKey(editor, n6);
      var range2 = Editor.range(editor, p3);
      var sel = selection && Range.intersection(range2, selection);
      var ds = decorate([n6, p3]);
      for (var dec of decorations) {
        var d3 = Range.intersection(dec, range2);
        if (d3) {
          ds.push(d3);
        }
      }
      if (Element2.isElement(n6)) {
        children.push(/* @__PURE__ */ import_react62.default.createElement(SelectedContext.Provider, {
          key: "provider-".concat(key.id),
          value: !!sel
        }, /* @__PURE__ */ import_react62.default.createElement(MemoizedElement, {
          decorations: ds,
          element: n6,
          key: key.id,
          renderElement,
          renderPlaceholder,
          renderLeaf,
          selection: sel
        })));
      } else {
        children.push(/* @__PURE__ */ import_react62.default.createElement(MemoizedText, {
          decorations: ds,
          key: key.id,
          isLast: isLeafBlock && i4 === node5.children.length - 1,
          parent: node5,
          renderPlaceholder,
          renderLeaf,
          text: n6
        }));
      }
      NODE_TO_INDEX.set(n6, i4);
      NODE_TO_PARENT.set(n6, node5);
    }
    return children;
  };
  var ReadOnlyContext = /* @__PURE__ */ (0, import_react62.createContext)(false);
  var useReadOnly = () => {
    return (0, import_react62.useContext)(ReadOnlyContext);
  };
  var SlateContext = /* @__PURE__ */ (0, import_react62.createContext)(null);
  var useSlate = () => {
    var context = (0, import_react62.useContext)(SlateContext);
    if (!context) {
      throw new Error("The `useSlate` hook must be used inside the <Slate> component's context.");
    }
    var {
      editor
    } = context;
    return editor;
  };
  function useTrackUserInput() {
    var editor = useSlateStatic();
    var receivedUserInput = (0, import_react62.useRef)(false);
    var animationFrameIdRef = (0, import_react62.useRef)(0);
    var onUserInput = (0, import_react62.useCallback)(() => {
      if (receivedUserInput.current) {
        return;
      }
      receivedUserInput.current = true;
      var window2 = ReactEditor.getWindow(editor);
      window2.cancelAnimationFrame(animationFrameIdRef.current);
      animationFrameIdRef.current = window2.requestAnimationFrame(() => {
        receivedUserInput.current = false;
      });
    }, [editor]);
    (0, import_react62.useEffect)(() => () => cancelAnimationFrame(animationFrameIdRef.current), []);
    return {
      receivedUserInput,
      onUserInput
    };
  }
  var TRIPLE_CLICK = 3;
  var HOTKEYS = {
    bold: "mod+b",
    compose: ["down", "left", "right", "up", "backspace", "enter"],
    moveBackward: "left",
    moveForward: "right",
    moveWordBackward: "ctrl+left",
    moveWordForward: "ctrl+right",
    deleteBackward: "shift?+backspace",
    deleteForward: "shift?+delete",
    extendBackward: "shift+left",
    extendForward: "shift+right",
    italic: "mod+i",
    insertSoftBreak: "shift+enter",
    splitBlock: "enter",
    undo: "mod+z"
  };
  var APPLE_HOTKEYS = {
    moveLineBackward: "opt+up",
    moveLineForward: "opt+down",
    moveWordBackward: "opt+left",
    moveWordForward: "opt+right",
    deleteBackward: ["ctrl+backspace", "ctrl+h"],
    deleteForward: ["ctrl+delete", "ctrl+d"],
    deleteLineBackward: "cmd+shift?+backspace",
    deleteLineForward: ["cmd+shift?+delete", "ctrl+k"],
    deleteWordBackward: "opt+shift?+backspace",
    deleteWordForward: "opt+shift?+delete",
    extendLineBackward: "opt+shift+up",
    extendLineForward: "opt+shift+down",
    redo: "cmd+shift+z",
    transposeCharacter: "ctrl+t"
  };
  var WINDOWS_HOTKEYS = {
    deleteWordBackward: "ctrl+shift?+backspace",
    deleteWordForward: "ctrl+shift?+delete",
    redo: ["ctrl+y", "ctrl+shift+z"]
  };
  var create = (key) => {
    var generic = HOTKEYS[key];
    var apple = APPLE_HOTKEYS[key];
    var windows = WINDOWS_HOTKEYS[key];
    var isGeneric = generic && (0, import_is_hotkey.isHotkey)(generic);
    var isApple = apple && (0, import_is_hotkey.isHotkey)(apple);
    var isWindows = windows && (0, import_is_hotkey.isHotkey)(windows);
    return (event) => {
      if (isGeneric && isGeneric(event))
        return true;
      if (IS_APPLE && isApple && isApple(event))
        return true;
      if (!IS_APPLE && isWindows && isWindows(event))
        return true;
      return false;
    };
  };
  var Hotkeys = {
    isBold: create("bold"),
    isCompose: create("compose"),
    isMoveBackward: create("moveBackward"),
    isMoveForward: create("moveForward"),
    isDeleteBackward: create("deleteBackward"),
    isDeleteForward: create("deleteForward"),
    isDeleteLineBackward: create("deleteLineBackward"),
    isDeleteLineForward: create("deleteLineForward"),
    isDeleteWordBackward: create("deleteWordBackward"),
    isDeleteWordForward: create("deleteWordForward"),
    isExtendBackward: create("extendBackward"),
    isExtendForward: create("extendForward"),
    isExtendLineBackward: create("extendLineBackward"),
    isExtendLineForward: create("extendLineForward"),
    isItalic: create("italic"),
    isMoveLineBackward: create("moveLineBackward"),
    isMoveLineForward: create("moveLineForward"),
    isMoveWordBackward: create("moveWordBackward"),
    isMoveWordForward: create("moveWordForward"),
    isRedo: create("redo"),
    isSoftBreak: create("insertSoftBreak"),
    isSplitBlock: create("splitBlock"),
    isTransposeCharacter: create("transposeCharacter"),
    isUndo: create("undo")
  };
  var createRestoreDomManager = (editor, receivedUserInput) => {
    var bufferedMutations = [];
    var clear = () => {
      bufferedMutations = [];
    };
    var registerMutations = (mutations) => {
      if (!receivedUserInput.current) {
        return;
      }
      var trackedMutations = mutations.filter((mutation) => isTrackedMutation(editor, mutation, mutations));
      bufferedMutations.push(...trackedMutations);
    };
    function restoreDOM() {
      if (bufferedMutations.length > 0) {
        bufferedMutations.reverse().forEach((mutation) => {
          if (mutation.type === "characterData") {
            return;
          }
          mutation.removedNodes.forEach((node5) => {
            mutation.target.insertBefore(node5, mutation.nextSibling);
          });
          mutation.addedNodes.forEach((node5) => {
            mutation.target.removeChild(node5);
          });
        });
        clear();
      }
    }
    return {
      registerMutations,
      restoreDOM,
      clear
    };
  };
  var MUTATION_OBSERVER_CONFIG = {
    subtree: true,
    childList: true,
    characterData: true,
    characterDataOldValue: true
  };
  var RestoreDOMComponent = class extends import_react62.Component {
    constructor() {
      super(...arguments);
      this.context = null;
      this.manager = null;
      this.mutationObserver = null;
    }
    observe() {
      var _this$mutationObserve;
      var {
        node: node5
      } = this.props;
      if (!node5.current) {
        throw new Error("Failed to attach MutationObserver, `node` is undefined");
      }
      (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 ? void 0 : _this$mutationObserve.observe(node5.current, MUTATION_OBSERVER_CONFIG);
    }
    componentDidMount() {
      var {
        receivedUserInput
      } = this.props;
      var editor = this.context;
      this.manager = createRestoreDomManager(editor, receivedUserInput);
      this.mutationObserver = new MutationObserver(this.manager.registerMutations);
      this.observe();
    }
    getSnapshotBeforeUpdate() {
      var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;
      var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();
      if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {
        var _this$manager;
        (_this$manager = this.manager) === null || _this$manager === void 0 ? void 0 : _this$manager.registerMutations(pendingMutations);
      }
      (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 ? void 0 : _this$mutationObserve3.disconnect();
      (_this$manager2 = this.manager) === null || _this$manager2 === void 0 ? void 0 : _this$manager2.restoreDOM();
      return null;
    }
    componentDidUpdate() {
      var _this$manager3;
      (_this$manager3 = this.manager) === null || _this$manager3 === void 0 ? void 0 : _this$manager3.clear();
      this.observe();
    }
    componentWillUnmount() {
      var _this$mutationObserve4;
      (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 ? void 0 : _this$mutationObserve4.disconnect();
    }
    render() {
      return this.props.children;
    }
  };
  RestoreDOMComponent.contextType = EditorContext;
  var RestoreDOM = IS_ANDROID ? RestoreDOMComponent : (_ref) => {
    var {
      children
    } = _ref;
    return /* @__PURE__ */ import_react62.default.createElement(import_react62.default.Fragment, null, children);
  };
  var _excluded$12 = ["autoFocus", "decorate", "onDOMBeforeInput", "placeholder", "readOnly", "renderElement", "renderLeaf", "renderPlaceholder", "scrollSelectionIntoView", "style", "as", "disableDefaultStyles"];
  var _excluded23 = ["text"];
  function ownKeys$12(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread$12(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys$12(Object(source), true).forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$12(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var Children10 = (props) => /* @__PURE__ */ import_react62.default.createElement(import_react62.default.Fragment, null, useChildren(props));
  var Editable = (props) => {
    var defaultRenderPlaceholder = (0, import_react62.useCallback)((props2) => /* @__PURE__ */ import_react62.default.createElement(DefaultPlaceholder, Object.assign({}, props2)), []);
    var {
      autoFocus,
      decorate = defaultDecorate,
      onDOMBeforeInput: propsOnDOMBeforeInput,
      placeholder,
      readOnly = false,
      renderElement,
      renderLeaf,
      renderPlaceholder = defaultRenderPlaceholder,
      scrollSelectionIntoView = defaultScrollSelectionIntoView,
      style: userStyle = {},
      as: Component18 = "div",
      disableDefaultStyles = false
    } = props, attributes = _objectWithoutProperties2(props, _excluded$12);
    var editor = useSlate();
    var [isComposing, setIsComposing] = (0, import_react62.useState)(false);
    var ref = (0, import_react62.useRef)(null);
    var deferredOperations = (0, import_react62.useRef)([]);
    var [placeholderHeight, setPlaceholderHeight] = (0, import_react62.useState)();
    var {
      onUserInput,
      receivedUserInput
    } = useTrackUserInput();
    var [, forceRender] = (0, import_react62.useReducer)((s3) => s3 + 1, 0);
    EDITOR_TO_FORCE_RENDER.set(editor, forceRender);
    IS_READ_ONLY.set(editor, readOnly);
    var state = (0, import_react62.useMemo)(() => ({
      isDraggingInternally: false,
      isUpdatingSelection: false,
      latestElement: null,
      hasMarkPlaceholder: false
    }), []);
    (0, import_react62.useEffect)(() => {
      if (ref.current && autoFocus) {
        ref.current.focus();
      }
    }, [autoFocus]);
    var androidInputManagerRef = (0, import_react62.useRef)();
    var onDOMSelectionChange = (0, import_react62.useMemo)(() => (0, import_throttle.default)(() => {
      var androidInputManager = androidInputManagerRef.current;
      if ((IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {
        var root3 = ReactEditor.findDocumentOrShadowRoot(editor);
        var {
          activeElement
        } = root3;
        var el = ReactEditor.toDOMNode(editor, editor);
        var domSelection = root3.getSelection();
        if (activeElement === el) {
          state.latestElement = activeElement;
          IS_FOCUSED.set(editor, true);
        } else {
          IS_FOCUSED.delete(editor);
        }
        if (!domSelection) {
          return Transforms.deselect(editor);
        }
        var {
          anchorNode,
          focusNode
        } = domSelection;
        var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);
        var focusNodeSelectable = ReactEditor.hasEditableTarget(editor, focusNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, focusNode);
        if (anchorNodeSelectable && focusNodeSelectable) {
          var range2 = ReactEditor.toSlateRange(editor, domSelection, {
            exactMatch: false,
            suppressThrow: true
          });
          if (range2) {
            if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {
              Transforms.select(editor, range2);
            } else {
              androidInputManager === null || androidInputManager === void 0 ? void 0 : androidInputManager.handleUserSelect(range2);
            }
          }
        }
        if (readOnly && (!anchorNodeSelectable || !focusNodeSelectable)) {
          Transforms.deselect(editor);
        }
      }
    }, 100), [editor, readOnly, state]);
    var scheduleOnDOMSelectionChange = (0, import_react62.useMemo)(() => (0, import_debounce.default)(onDOMSelectionChange, 0), [onDOMSelectionChange]);
    androidInputManagerRef.current = useAndroidInputManager({
      node: ref,
      onDOMSelectionChange,
      scheduleOnDOMSelectionChange
    });
    useIsomorphicLayoutEffect4(() => {
      var _androidInputManagerR, _androidInputManagerR2;
      var window2;
      if (ref.current && (window2 = getDefaultView(ref.current))) {
        EDITOR_TO_WINDOW.set(editor, window2);
        EDITOR_TO_ELEMENT.set(editor, ref.current);
        NODE_TO_ELEMENT.set(editor, ref.current);
        ELEMENT_TO_NODE.set(ref.current, editor);
      } else {
        NODE_TO_ELEMENT.delete(editor);
      }
      var {
        selection
      } = editor;
      var root3 = ReactEditor.findDocumentOrShadowRoot(editor);
      var domSelection = root3.getSelection();
      if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {
        return;
      }
      var setDomSelection = (forceChange) => {
        var hasDomSelection = domSelection.type !== "None";
        if (!selection && !hasDomSelection) {
          return;
        }
        var focusNode = domSelection.focusNode;
        var anchorNode;
        if (IS_FIREFOX && domSelection.rangeCount > 1) {
          var firstRange = domSelection.getRangeAt(0);
          var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);
          if (firstRange.startContainer === focusNode) {
            anchorNode = lastRange.endContainer;
          } else {
            anchorNode = firstRange.startContainer;
          }
        } else {
          anchorNode = domSelection.anchorNode;
        }
        var editorElement = EDITOR_TO_ELEMENT.get(editor);
        var hasDomSelectionInEditor = false;
        if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {
          hasDomSelectionInEditor = true;
        }
        if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {
          var slateRange = ReactEditor.toSlateRange(editor, domSelection, {
            exactMatch: true,
            // domSelection is not necessarily a valid Slate range
            // (e.g. when clicking on contentEditable:false element)
            suppressThrow: true
          });
          if (slateRange && Range.equals(slateRange, selection)) {
            var _anchorNode, _anchorNode$parentEle;
            if (!state.hasMarkPlaceholder) {
              return;
            }
            if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode$parentEle = _anchorNode.parentElement) !== null && _anchorNode$parentEle !== void 0 && _anchorNode$parentEle.hasAttribute("data-slate-mark-placeholder")) {
              return;
            }
          }
        }
        if (selection && !ReactEditor.hasRange(editor, selection)) {
          editor.selection = ReactEditor.toSlateRange(editor, domSelection, {
            exactMatch: false,
            suppressThrow: true
          });
          return;
        }
        state.isUpdatingSelection = true;
        var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);
        if (newDomRange) {
          if (ReactEditor.isComposing(editor) && !IS_ANDROID) {
            domSelection.collapseToEnd();
          } else if (Range.isBackward(selection)) {
            domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);
          } else {
            domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);
          }
          scrollSelectionIntoView(editor, newDomRange);
        } else {
          domSelection.removeAllRanges();
        }
        return newDomRange;
      };
      if (domSelection.rangeCount <= 1) {
        setDomSelection();
      }
      var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === "action";
      if (!IS_ANDROID || !ensureSelection) {
        setTimeout(() => {
          state.isUpdatingSelection = false;
        });
        return;
      }
      var timeoutId = null;
      var animationFrameId = requestAnimationFrame(() => {
        if (ensureSelection) {
          var ensureDomSelection = (forceChange) => {
            try {
              var el = ReactEditor.toDOMNode(editor, editor);
              el.focus();
              setDomSelection(forceChange);
            } catch (e3) {
            }
          };
          ensureDomSelection();
          timeoutId = setTimeout(() => {
            ensureDomSelection(true);
            state.isUpdatingSelection = false;
          });
        }
      });
      return () => {
        cancelAnimationFrame(animationFrameId);
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
      };
    });
    var onDOMBeforeInput = (0, import_react62.useCallback)((event) => {
      onUserInput();
      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {
        var _EDITOR_TO_USER_SELEC;
        if (androidInputManagerRef.current) {
          return androidInputManagerRef.current.handleDOMBeforeInput(event);
        }
        scheduleOnDOMSelectionChange.flush();
        onDOMSelectionChange.flush();
        var {
          selection
        } = editor;
        var {
          inputType: type
        } = event;
        var data = event.dataTransfer || event.data || void 0;
        var isCompositionChange = type === "insertCompositionText" || type === "deleteCompositionText";
        if (isCompositionChange && ReactEditor.isComposing(editor)) {
          return;
        }
        var native = false;
        if (type === "insertText" && selection && Range.isCollapsed(selection) && // Only use native character insertion for single characters a-z or space for now.
        // Long-press events (hold a + press 4 = ä) to choose a special character otherwise
        // causes duplicate inserts.
        event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) && // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405
        // When there is an inline element, e.g. a link, and you select
        // right after it (the start of the next node).
        selection.anchor.offset !== 0) {
          var _node$parentElement, _window$getComputedSt;
          native = true;
          if (editor.marks) {
            native = false;
          }
          var {
            anchor: anchor3
          } = selection;
          var [node5, offset3] = ReactEditor.toDOMPoint(editor, anchor3);
          var anchorNode = (_node$parentElement = node5.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest("a");
          var window2 = ReactEditor.getWindow(editor);
          if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {
            var _lastText$textContent;
            var lastText = window2 === null || window2 === void 0 ? void 0 : window2.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();
            if (lastText === node5 && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset3) {
              native = false;
            }
          }
          if (native && node5.parentElement && (window2 === null || window2 === void 0 ? void 0 : (_window$getComputedSt = window2.getComputedStyle(node5.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === "pre") {
            var block = Editor.above(editor, {
              at: anchor3.path,
              match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6)
            });
            if (block && Node2.string(block[0]).includes("	")) {
              native = false;
            }
          }
        }
        if (!type.startsWith("delete") || type.startsWith("deleteBy")) {
          var [targetRange2] = event.getTargetRanges();
          if (targetRange2) {
            var range2 = ReactEditor.toSlateRange(editor, targetRange2, {
              exactMatch: false,
              suppressThrow: false
            });
            if (!selection || !Range.equals(selection, range2)) {
              native = false;
              var selectionRef = !isCompositionChange && editor.selection && Editor.rangeRef(editor, editor.selection);
              Transforms.select(editor, range2);
              if (selectionRef) {
                EDITOR_TO_USER_SELECTION.set(editor, selectionRef);
              }
            }
          }
        }
        if (isCompositionChange) {
          return;
        }
        if (!native) {
          event.preventDefault();
        }
        if (selection && Range.isExpanded(selection) && type.startsWith("delete")) {
          var direction = type.endsWith("Backward") ? "backward" : "forward";
          Editor.deleteFragment(editor, {
            direction
          });
          return;
        }
        switch (type) {
          case "deleteByComposition":
          case "deleteByCut":
          case "deleteByDrag": {
            Editor.deleteFragment(editor);
            break;
          }
          case "deleteContent":
          case "deleteContentForward": {
            Editor.deleteForward(editor);
            break;
          }
          case "deleteContentBackward": {
            Editor.deleteBackward(editor);
            break;
          }
          case "deleteEntireSoftLine": {
            Editor.deleteBackward(editor, {
              unit: "line"
            });
            Editor.deleteForward(editor, {
              unit: "line"
            });
            break;
          }
          case "deleteHardLineBackward": {
            Editor.deleteBackward(editor, {
              unit: "block"
            });
            break;
          }
          case "deleteSoftLineBackward": {
            Editor.deleteBackward(editor, {
              unit: "line"
            });
            break;
          }
          case "deleteHardLineForward": {
            Editor.deleteForward(editor, {
              unit: "block"
            });
            break;
          }
          case "deleteSoftLineForward": {
            Editor.deleteForward(editor, {
              unit: "line"
            });
            break;
          }
          case "deleteWordBackward": {
            Editor.deleteBackward(editor, {
              unit: "word"
            });
            break;
          }
          case "deleteWordForward": {
            Editor.deleteForward(editor, {
              unit: "word"
            });
            break;
          }
          case "insertLineBreak":
            Editor.insertSoftBreak(editor);
            break;
          case "insertParagraph": {
            Editor.insertBreak(editor);
            break;
          }
          case "insertFromComposition":
          case "insertFromDrop":
          case "insertFromPaste":
          case "insertFromYank":
          case "insertReplacementText":
          case "insertText": {
            if (type === "insertFromComposition") {
              if (ReactEditor.isComposing(editor)) {
                setIsComposing(false);
                IS_COMPOSING.set(editor, false);
              }
            }
            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === "DataTransfer") {
              ReactEditor.insertData(editor, data);
            } else if (typeof data === "string") {
              if (native) {
                deferredOperations.current.push(() => Editor.insertText(editor, data));
              } else {
                Editor.insertText(editor, data);
              }
            }
            break;
          }
        }
        var toRestore = (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();
        EDITOR_TO_USER_SELECTION.delete(editor);
        if (toRestore && (!editor.selection || !Range.equals(editor.selection, toRestore))) {
          Transforms.select(editor, toRestore);
        }
      }
    }, [editor, onDOMSelectionChange, onUserInput, propsOnDOMBeforeInput, readOnly, scheduleOnDOMSelectionChange]);
    var callbackRef = (0, import_react62.useCallback)((node5) => {
      if (node5 == null) {
        onDOMSelectionChange.cancel();
        scheduleOnDOMSelectionChange.cancel();
        EDITOR_TO_ELEMENT.delete(editor);
        NODE_TO_ELEMENT.delete(editor);
        if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {
          ref.current.removeEventListener("beforeinput", onDOMBeforeInput);
        }
      } else {
        if (HAS_BEFORE_INPUT_SUPPORT) {
          node5.addEventListener("beforeinput", onDOMBeforeInput);
        }
      }
      ref.current = node5;
    }, [onDOMSelectionChange, scheduleOnDOMSelectionChange, editor, onDOMBeforeInput]);
    useIsomorphicLayoutEffect4(() => {
      var window2 = ReactEditor.getWindow(editor);
      window2.document.addEventListener("selectionchange", scheduleOnDOMSelectionChange);
      return () => {
        window2.document.removeEventListener("selectionchange", scheduleOnDOMSelectionChange);
      };
    }, [scheduleOnDOMSelectionChange]);
    var decorations = decorate([editor, []]);
    var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(Node2.texts(editor)).length === 1 && Node2.string(editor) === "" && !isComposing;
    var placeHolderResizeHandler = (0, import_react62.useCallback)((placeholderEl) => {
      if (placeholderEl && showPlaceholder) {
        var _placeholderEl$getBou;
        setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);
      } else {
        setPlaceholderHeight(void 0);
      }
    }, [showPlaceholder]);
    if (showPlaceholder) {
      var start2 = Editor.start(editor, []);
      decorations.push({
        [PLACEHOLDER_SYMBOL]: true,
        placeholder,
        onPlaceholderResize: placeHolderResizeHandler,
        anchor: start2,
        focus: start2
      });
    }
    var {
      marks: marks3
    } = editor;
    state.hasMarkPlaceholder = false;
    if (editor.selection && Range.isCollapsed(editor.selection) && marks3) {
      var {
        anchor: anchor2
      } = editor.selection;
      var leaf3 = Node2.leaf(editor, anchor2.path);
      var rest = _objectWithoutProperties2(leaf3, _excluded23);
      if (!Text2.equals(leaf3, marks3, {
        loose: true
      })) {
        state.hasMarkPlaceholder = true;
        var unset = Object.fromEntries(Object.keys(rest).map((mark2) => [mark2, null]));
        decorations.push(_objectSpread$12(_objectSpread$12(_objectSpread$12({
          [MARK_PLACEHOLDER_SYMBOL]: true
        }, unset), marks3), {}, {
          anchor: anchor2,
          focus: anchor2
        }));
      }
    }
    (0, import_react62.useEffect)(() => {
      setTimeout(() => {
        var {
          selection
        } = editor;
        if (selection) {
          var {
            anchor: _anchor
          } = selection;
          var _text = Node2.leaf(editor, _anchor.path);
          if (marks3 && !Text2.equals(_text, marks3, {
            loose: true
          })) {
            EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks3);
            return;
          }
        }
        EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);
      });
    });
    return /* @__PURE__ */ import_react62.default.createElement(ReadOnlyContext.Provider, {
      value: readOnly
    }, /* @__PURE__ */ import_react62.default.createElement(DecorateContext.Provider, {
      value: decorate
    }, /* @__PURE__ */ import_react62.default.createElement(RestoreDOM, {
      node: ref,
      receivedUserInput
    }, /* @__PURE__ */ import_react62.default.createElement(Component18, Object.assign({
      role: readOnly ? void 0 : "textbox",
      "aria-multiline": readOnly ? void 0 : true
    }, attributes, {
      // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd
      // have to use hacks to make these replacement-based features work.
      // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop
      // mismatch warning app moves to browser. Pass-through consumer props when
      // not CAN_USE_DOM (SSR) and default to falsy value
      spellCheck: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.spellCheck : false,
      autoCorrect: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCorrect : "false",
      autoCapitalize: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCapitalize : "false",
      "data-slate-editor": true,
      "data-slate-node": "value",
      // explicitly set this
      contentEditable: !readOnly,
      // in some cases, a decoration needs access to the range / selection to decorate a text node,
      // then you will select the whole text node when you select part the of text
      // this magic zIndex="-1" will fix it
      zindex: -1,
      suppressContentEditableWarning: true,
      ref: callbackRef,
      style: _objectSpread$12(_objectSpread$12({}, disableDefaultStyles ? {} : _objectSpread$12({
        // Allow positioning relative to the editable element.
        position: "relative",
        // Preserve adjacent whitespace and new lines.
        whiteSpace: "pre-wrap",
        // Allow words to break if they are too long.
        wordWrap: "break-word"
      }, placeholderHeight ? {
        minHeight: placeholderHeight
      } : {})), userStyle),
      onBeforeInput: (0, import_react62.useCallback)((event) => {
        if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {
          event.preventDefault();
          if (!ReactEditor.isComposing(editor)) {
            var _text2 = event.data;
            Editor.insertText(editor, _text2);
          }
        }
      }, [attributes.onBeforeInput, editor, readOnly]),
      onInput: (0, import_react62.useCallback)((event) => {
        if (isEventHandled(event, attributes.onInput)) {
          return;
        }
        if (androidInputManagerRef.current) {
          androidInputManagerRef.current.handleInput();
          return;
        }
        for (var op of deferredOperations.current) {
          op();
        }
        deferredOperations.current = [];
      }, [attributes.onInput]),
      onBlur: (0, import_react62.useCallback)((event) => {
        if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {
          return;
        }
        var root3 = ReactEditor.findDocumentOrShadowRoot(editor);
        if (state.latestElement === root3.activeElement) {
          return;
        }
        var {
          relatedTarget
        } = event;
        var el = ReactEditor.toDOMNode(editor, editor);
        if (relatedTarget === el) {
          return;
        }
        if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute("data-slate-spacer")) {
          return;
        }
        if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {
          var node5 = ReactEditor.toSlateNode(editor, relatedTarget);
          if (Element2.isElement(node5) && !editor.isVoid(node5)) {
            return;
          }
        }
        if (IS_WEBKIT) {
          var domSelection = root3.getSelection();
          domSelection === null || domSelection === void 0 ? void 0 : domSelection.removeAllRanges();
        }
        IS_FOCUSED.delete(editor);
      }, [readOnly, state.isUpdatingSelection, state.latestElement, editor, attributes.onBlur]),
      onClick: (0, import_react62.useCallback)((event) => {
        if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {
          var node5 = ReactEditor.toSlateNode(editor, event.target);
          var path4 = ReactEditor.findPath(editor, node5);
          if (!Editor.hasPath(editor, path4) || Node2.get(editor, path4) !== node5) {
            return;
          }
          if (event.detail === TRIPLE_CLICK && path4.length >= 1) {
            var blockPath = path4;
            if (!(Element2.isElement(node5) && Editor.isBlock(editor, node5))) {
              var _block$;
              var block = Editor.above(editor, {
                match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6),
                at: path4
              });
              blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path4.slice(0, 1);
            }
            var range2 = Editor.range(editor, blockPath);
            Transforms.select(editor, range2);
            return;
          }
          if (readOnly) {
            return;
          }
          var _start = Editor.start(editor, path4);
          var end2 = Editor.end(editor, path4);
          var startVoid = Editor.void(editor, {
            at: _start
          });
          var endVoid = Editor.void(editor, {
            at: end2
          });
          if (startVoid && endVoid && Path.equals(startVoid[1], endVoid[1])) {
            var _range = Editor.range(editor, _start);
            Transforms.select(editor, _range);
          }
        }
      }, [editor, attributes.onClick, readOnly]),
      onCompositionEnd: (0, import_react62.useCallback)((event) => {
        if (ReactEditor.hasSelectableTarget(editor, event.target)) {
          var _androidInputManagerR3;
          if (ReactEditor.isComposing(editor)) {
            setIsComposing(false);
            IS_COMPOSING.set(editor, false);
          }
          (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 ? void 0 : _androidInputManagerR3.handleCompositionEnd(event);
          if (isEventHandled(event, attributes.onCompositionEnd) || IS_ANDROID) {
            return;
          }
          if (!IS_WEBKIT && !IS_FIREFOX_LEGACY && !IS_IOS && !IS_WECHATBROWSER && !IS_UC_MOBILE && event.data) {
            var placeholderMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);
            EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);
            if (placeholderMarks !== void 0) {
              EDITOR_TO_USER_MARKS.set(editor, editor.marks);
              editor.marks = placeholderMarks;
            }
            Editor.insertText(editor, event.data);
            var userMarks = EDITOR_TO_USER_MARKS.get(editor);
            EDITOR_TO_USER_MARKS.delete(editor);
            if (userMarks !== void 0) {
              editor.marks = userMarks;
            }
          }
        }
      }, [attributes.onCompositionEnd, editor]),
      onCompositionUpdate: (0, import_react62.useCallback)((event) => {
        if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {
          if (!ReactEditor.isComposing(editor)) {
            setIsComposing(true);
            IS_COMPOSING.set(editor, true);
          }
        }
      }, [attributes.onCompositionUpdate, editor]),
      onCompositionStart: (0, import_react62.useCallback)((event) => {
        if (ReactEditor.hasSelectableTarget(editor, event.target)) {
          var _androidInputManagerR4;
          (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 ? void 0 : _androidInputManagerR4.handleCompositionStart(event);
          if (isEventHandled(event, attributes.onCompositionStart) || IS_ANDROID) {
            return;
          }
          setIsComposing(true);
          var {
            selection
          } = editor;
          if (selection) {
            if (Range.isExpanded(selection)) {
              Editor.deleteFragment(editor);
              return;
            }
            var inline2 = Editor.above(editor, {
              match: (n6) => Element2.isElement(n6) && Editor.isInline(editor, n6),
              mode: "highest"
            });
            if (inline2) {
              var [, inlinePath] = inline2;
              if (Editor.isEnd(editor, selection.anchor, inlinePath)) {
                var point6 = Editor.after(editor, inlinePath);
                Transforms.setSelection(editor, {
                  anchor: point6,
                  focus: point6
                });
              }
            }
          }
        }
      }, [attributes.onCompositionStart, editor]),
      onCopy: (0, import_react62.useCallback)((event) => {
        if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {
          event.preventDefault();
          ReactEditor.setFragmentData(editor, event.clipboardData, "copy");
        }
      }, [attributes.onCopy, editor]),
      onCut: (0, import_react62.useCallback)((event) => {
        if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut) && !isDOMEventTargetInput(event)) {
          event.preventDefault();
          ReactEditor.setFragmentData(editor, event.clipboardData, "cut");
          var {
            selection
          } = editor;
          if (selection) {
            if (Range.isExpanded(selection)) {
              Editor.deleteFragment(editor);
            } else {
              var node5 = Node2.parent(editor, selection.anchor.path);
              if (Editor.isVoid(editor, node5)) {
                Transforms.delete(editor);
              }
            }
          }
        }
      }, [readOnly, editor, attributes.onCut]),
      onDragOver: (0, import_react62.useCallback)((event) => {
        if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {
          var node5 = ReactEditor.toSlateNode(editor, event.target);
          if (Element2.isElement(node5) && Editor.isVoid(editor, node5)) {
            event.preventDefault();
          }
        }
      }, [attributes.onDragOver, editor]),
      onDragStart: (0, import_react62.useCallback)((event) => {
        if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {
          var node5 = ReactEditor.toSlateNode(editor, event.target);
          var path4 = ReactEditor.findPath(editor, node5);
          var voidMatch = Element2.isElement(node5) && Editor.isVoid(editor, node5) || Editor.void(editor, {
            at: path4,
            voids: true
          });
          if (voidMatch) {
            var range2 = Editor.range(editor, path4);
            Transforms.select(editor, range2);
          }
          state.isDraggingInternally = true;
          ReactEditor.setFragmentData(editor, event.dataTransfer, "drag");
        }
      }, [readOnly, editor, attributes.onDragStart, state]),
      onDrop: (0, import_react62.useCallback)((event) => {
        if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {
          event.preventDefault();
          var draggedRange = editor.selection;
          var range2 = ReactEditor.findEventRange(editor, event);
          var data = event.dataTransfer;
          Transforms.select(editor, range2);
          if (state.isDraggingInternally) {
            if (draggedRange && !Range.equals(draggedRange, range2) && !Editor.void(editor, {
              at: range2,
              voids: true
            })) {
              Transforms.delete(editor, {
                at: draggedRange
              });
            }
          }
          ReactEditor.insertData(editor, data);
          if (!ReactEditor.isFocused(editor)) {
            ReactEditor.focus(editor);
          }
        }
        state.isDraggingInternally = false;
      }, [readOnly, editor, attributes.onDrop, state]),
      onDragEnd: (0, import_react62.useCallback)((event) => {
        if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {
          attributes.onDragEnd(event);
        }
        state.isDraggingInternally = false;
      }, [readOnly, state, attributes, editor]),
      onFocus: (0, import_react62.useCallback)((event) => {
        if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {
          var el = ReactEditor.toDOMNode(editor, editor);
          var root3 = ReactEditor.findDocumentOrShadowRoot(editor);
          state.latestElement = root3.activeElement;
          if (IS_FIREFOX && event.target !== el) {
            el.focus();
            return;
          }
          IS_FOCUSED.set(editor, true);
        }
      }, [readOnly, state, editor, attributes.onFocus]),
      onKeyDown: (0, import_react62.useCallback)((event) => {
        if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {
          var _androidInputManagerR5;
          (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 ? void 0 : _androidInputManagerR5.handleKeyDown(event);
          var {
            nativeEvent
          } = event;
          if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {
            IS_COMPOSING.set(editor, false);
            setIsComposing(false);
          }
          if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {
            return;
          }
          var {
            selection
          } = editor;
          var element2 = editor.children[selection !== null ? selection.focus.path[0] : 0];
          var isRTL2 = (0, import_direction.default)(Node2.string(element2)) === "rtl";
          if (Hotkeys.isRedo(nativeEvent)) {
            event.preventDefault();
            var maybeHistoryEditor = editor;
            if (typeof maybeHistoryEditor.redo === "function") {
              maybeHistoryEditor.redo();
            }
            return;
          }
          if (Hotkeys.isUndo(nativeEvent)) {
            event.preventDefault();
            var _maybeHistoryEditor = editor;
            if (typeof _maybeHistoryEditor.undo === "function") {
              _maybeHistoryEditor.undo();
            }
            return;
          }
          if (Hotkeys.isMoveLineBackward(nativeEvent)) {
            event.preventDefault();
            Transforms.move(editor, {
              unit: "line",
              reverse: true
            });
            return;
          }
          if (Hotkeys.isMoveLineForward(nativeEvent)) {
            event.preventDefault();
            Transforms.move(editor, {
              unit: "line"
            });
            return;
          }
          if (Hotkeys.isExtendLineBackward(nativeEvent)) {
            event.preventDefault();
            Transforms.move(editor, {
              unit: "line",
              edge: "focus",
              reverse: true
            });
            return;
          }
          if (Hotkeys.isExtendLineForward(nativeEvent)) {
            event.preventDefault();
            Transforms.move(editor, {
              unit: "line",
              edge: "focus"
            });
            return;
          }
          if (Hotkeys.isMoveBackward(nativeEvent)) {
            event.preventDefault();
            if (selection && Range.isCollapsed(selection)) {
              Transforms.move(editor, {
                reverse: !isRTL2
              });
            } else {
              Transforms.collapse(editor, {
                edge: "start"
              });
            }
            return;
          }
          if (Hotkeys.isMoveForward(nativeEvent)) {
            event.preventDefault();
            if (selection && Range.isCollapsed(selection)) {
              Transforms.move(editor, {
                reverse: isRTL2
              });
            } else {
              Transforms.collapse(editor, {
                edge: "end"
              });
            }
            return;
          }
          if (Hotkeys.isMoveWordBackward(nativeEvent)) {
            event.preventDefault();
            if (selection && Range.isExpanded(selection)) {
              Transforms.collapse(editor, {
                edge: "focus"
              });
            }
            Transforms.move(editor, {
              unit: "word",
              reverse: !isRTL2
            });
            return;
          }
          if (Hotkeys.isMoveWordForward(nativeEvent)) {
            event.preventDefault();
            if (selection && Range.isExpanded(selection)) {
              Transforms.collapse(editor, {
                edge: "focus"
              });
            }
            Transforms.move(editor, {
              unit: "word",
              reverse: isRTL2
            });
            return;
          }
          if (!HAS_BEFORE_INPUT_SUPPORT) {
            if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {
              event.preventDefault();
              return;
            }
            if (Hotkeys.isSoftBreak(nativeEvent)) {
              event.preventDefault();
              Editor.insertSoftBreak(editor);
              return;
            }
            if (Hotkeys.isSplitBlock(nativeEvent)) {
              event.preventDefault();
              Editor.insertBreak(editor);
              return;
            }
            if (Hotkeys.isDeleteBackward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor.deleteFragment(editor, {
                  direction: "backward"
                });
              } else {
                Editor.deleteBackward(editor);
              }
              return;
            }
            if (Hotkeys.isDeleteForward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor.deleteFragment(editor, {
                  direction: "forward"
                });
              } else {
                Editor.deleteForward(editor);
              }
              return;
            }
            if (Hotkeys.isDeleteLineBackward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor.deleteFragment(editor, {
                  direction: "backward"
                });
              } else {
                Editor.deleteBackward(editor, {
                  unit: "line"
                });
              }
              return;
            }
            if (Hotkeys.isDeleteLineForward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor.deleteFragment(editor, {
                  direction: "forward"
                });
              } else {
                Editor.deleteForward(editor, {
                  unit: "line"
                });
              }
              return;
            }
            if (Hotkeys.isDeleteWordBackward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor.deleteFragment(editor, {
                  direction: "backward"
                });
              } else {
                Editor.deleteBackward(editor, {
                  unit: "word"
                });
              }
              return;
            }
            if (Hotkeys.isDeleteWordForward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor.deleteFragment(editor, {
                  direction: "forward"
                });
              } else {
                Editor.deleteForward(editor, {
                  unit: "word"
                });
              }
              return;
            }
          } else {
            if (IS_CHROME || IS_WEBKIT) {
              if (selection && (Hotkeys.isDeleteBackward(nativeEvent) || Hotkeys.isDeleteForward(nativeEvent)) && Range.isCollapsed(selection)) {
                var currentNode = Node2.parent(editor, selection.anchor.path);
                if (Element2.isElement(currentNode) && Editor.isVoid(editor, currentNode) && (Editor.isInline(editor, currentNode) || Editor.isBlock(editor, currentNode))) {
                  event.preventDefault();
                  Editor.deleteBackward(editor, {
                    unit: "block"
                  });
                  return;
                }
              }
            }
          }
        }
      }, [readOnly, editor, attributes.onKeyDown]),
      onPaste: (0, import_react62.useCallback)((event) => {
        if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {
          if (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent) || IS_WEBKIT) {
            event.preventDefault();
            ReactEditor.insertData(editor, event.clipboardData);
          }
        }
      }, [readOnly, editor, attributes.onPaste])
    }), /* @__PURE__ */ import_react62.default.createElement(Children10, {
      decorations,
      node: editor,
      renderElement,
      renderPlaceholder,
      renderLeaf,
      selection: editor.selection
    })))));
  };
  var DefaultPlaceholder = (_ref) => {
    var {
      attributes,
      children
    } = _ref;
    return (
      // COMPAT: Artificially add a line-break to the end on the placeholder element
      // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter
      /* @__PURE__ */ import_react62.default.createElement("span", Object.assign({}, attributes), children, IS_ANDROID && /* @__PURE__ */ import_react62.default.createElement("br", null))
    );
  };
  var defaultDecorate = () => [];
  var defaultScrollSelectionIntoView = (editor, domRange) => {
    if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && Range.isCollapsed(editor.selection))) {
      var leafEl = domRange.startContainer.parentElement;
      leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);
      es_default(leafEl, {
        scrollMode: "if-needed"
      });
      delete leafEl.getBoundingClientRect;
    }
  };
  var isEventHandled = (event, handler) => {
    if (!handler) {
      return false;
    }
    var shouldTreatEventAsHandled = handler(event);
    if (shouldTreatEventAsHandled != null) {
      return shouldTreatEventAsHandled;
    }
    return event.isDefaultPrevented() || event.isPropagationStopped();
  };
  var isDOMEventTargetInput = (event) => {
    return isDOMNode(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);
  };
  var isDOMEventHandled = (event, handler) => {
    if (!handler) {
      return false;
    }
    var shouldTreatEventAsHandled = handler(event);
    if (shouldTreatEventAsHandled != null) {
      return shouldTreatEventAsHandled;
    }
    return event.defaultPrevented;
  };
  var FocusedContext = /* @__PURE__ */ (0, import_react62.createContext)(false);
  var SlateSelectorContext = /* @__PURE__ */ (0, import_react62.createContext)({});
  function useSelectorContext(editor) {
    var eventListeners = (0, import_react62.useRef)([]).current;
    var slateRef = (0, import_react62.useRef)({
      editor
    }).current;
    var onChange = (0, import_react62.useCallback)((editor2) => {
      slateRef.editor = editor2;
      eventListeners.forEach((listener) => listener(editor2));
    }, [eventListeners, slateRef]);
    var selectorContext = (0, import_react62.useMemo)(() => {
      return {
        getSlate: () => slateRef.editor,
        addEventListener: (callback) => {
          eventListeners.push(callback);
          return () => {
            eventListeners.splice(eventListeners.indexOf(callback), 1);
          };
        }
      };
    }, [eventListeners, slateRef]);
    return {
      selectorContext,
      onChange
    };
  }
  var _excluded5 = ["editor", "children", "onChange", "initialValue"];
  var Slate = (props) => {
    var {
      editor,
      children,
      onChange,
      initialValue
    } = props, rest = _objectWithoutProperties2(props, _excluded5);
    var [context, setContext] = import_react62.default.useState(() => {
      if (!Node2.isNodeList(initialValue)) {
        throw new Error("[Slate] initialValue is invalid! Expected a list of elements but got: ".concat(Scrubber.stringify(initialValue)));
      }
      if (!Editor.isEditor(editor)) {
        throw new Error("[Slate] editor is invalid! You passed: ".concat(Scrubber.stringify(editor)));
      }
      editor.children = initialValue;
      Object.assign(editor, rest);
      return {
        v: 0,
        editor
      };
    });
    var {
      selectorContext,
      onChange: handleSelectorChange
    } = useSelectorContext(editor);
    var onContextChange = (0, import_react62.useCallback)(() => {
      if (onChange) {
        onChange(editor.children);
      }
      setContext((prevContext) => ({
        v: prevContext.v + 1,
        editor
      }));
      handleSelectorChange(editor);
    }, [editor, handleSelectorChange, onChange]);
    (0, import_react62.useEffect)(() => {
      EDITOR_TO_ON_CHANGE.set(editor, onContextChange);
      return () => {
        EDITOR_TO_ON_CHANGE.set(editor, () => {
        });
      };
    }, [editor, onContextChange]);
    var [isFocused, setIsFocused] = (0, import_react62.useState)(ReactEditor.isFocused(editor));
    (0, import_react62.useEffect)(() => {
      setIsFocused(ReactEditor.isFocused(editor));
    }, [editor]);
    useIsomorphicLayoutEffect4(() => {
      var fn2 = () => setIsFocused(ReactEditor.isFocused(editor));
      if (REACT_MAJOR_VERSION >= 17) {
        document.addEventListener("focusin", fn2);
        document.addEventListener("focusout", fn2);
        return () => {
          document.removeEventListener("focusin", fn2);
          document.removeEventListener("focusout", fn2);
        };
      } else {
        document.addEventListener("focus", fn2, true);
        document.addEventListener("blur", fn2, true);
        return () => {
          document.removeEventListener("focus", fn2, true);
          document.removeEventListener("blur", fn2, true);
        };
      }
    }, []);
    return /* @__PURE__ */ import_react62.default.createElement(SlateSelectorContext.Provider, {
      value: selectorContext
    }, /* @__PURE__ */ import_react62.default.createElement(SlateContext.Provider, {
      value: context
    }, /* @__PURE__ */ import_react62.default.createElement(EditorContext.Provider, {
      value: context.editor
    }, /* @__PURE__ */ import_react62.default.createElement(FocusedContext.Provider, {
      value: isFocused
    }, children))));
  };
  var doRectsIntersect = (rect, compareRect) => {
    var middle = (compareRect.top + compareRect.bottom) / 2;
    return rect.top <= middle && rect.bottom >= middle;
  };
  var areRangesSameLine = (editor, range1, range2) => {
    var rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect();
    var rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect();
    return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);
  };
  var findCurrentLineRange = (editor, parentRange) => {
    var parentRangeBoundary = Editor.range(editor, Range.end(parentRange));
    var positions2 = Array.from(Editor.positions(editor, {
      at: parentRange
    }));
    var left = 0;
    var right = positions2.length;
    var middle = Math.floor(right / 2);
    if (areRangesSameLine(editor, Editor.range(editor, positions2[left]), parentRangeBoundary)) {
      return Editor.range(editor, positions2[left], parentRangeBoundary);
    }
    if (positions2.length < 2) {
      return Editor.range(editor, positions2[positions2.length - 1], parentRangeBoundary);
    }
    while (middle !== positions2.length && middle !== left) {
      if (areRangesSameLine(editor, Editor.range(editor, positions2[middle]), parentRangeBoundary)) {
        right = middle;
      } else {
        left = middle;
      }
      middle = Math.floor((left + right) / 2);
    }
    return Editor.range(editor, positions2[right], parentRangeBoundary);
  };
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4] != null ? arguments[i4] : {};
      if (i4 % 2) {
        ownKeys2(Object(source), true).forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  var withReact = function withReact2(editor) {
    var clipboardFormatKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "x-slate-fragment";
    var e3 = editor;
    var {
      apply: apply2,
      onChange,
      deleteBackward: deleteBackward2,
      addMark: addMark2,
      removeMark: removeMark2
    } = e3;
    EDITOR_TO_KEY_TO_ELEMENT.set(e3, /* @__PURE__ */ new WeakMap());
    e3.addMark = (key, value) => {
      var _EDITOR_TO_SCHEDULE_F, _EDITOR_TO_PENDING_DI;
      (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(e3)) === null || _EDITOR_TO_SCHEDULE_F === void 0 ? void 0 : _EDITOR_TO_SCHEDULE_F();
      if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e3) && (_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(e3)) !== null && _EDITOR_TO_PENDING_DI !== void 0 && _EDITOR_TO_PENDING_DI.length) {
        EDITOR_TO_PENDING_INSERTION_MARKS.set(e3, null);
      }
      EDITOR_TO_USER_MARKS.delete(e3);
      addMark2(key, value);
    };
    e3.removeMark = (key) => {
      var _EDITOR_TO_PENDING_DI2;
      if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e3) && (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(e3)) !== null && _EDITOR_TO_PENDING_DI2 !== void 0 && _EDITOR_TO_PENDING_DI2.length) {
        EDITOR_TO_PENDING_INSERTION_MARKS.set(e3, null);
      }
      EDITOR_TO_USER_MARKS.delete(e3);
      removeMark2(key);
    };
    e3.deleteBackward = (unit) => {
      if (unit !== "line") {
        return deleteBackward2(unit);
      }
      if (e3.selection && Range.isCollapsed(e3.selection)) {
        var parentBlockEntry = Editor.above(e3, {
          match: (n6) => Element2.isElement(n6) && Editor.isBlock(e3, n6),
          at: e3.selection
        });
        if (parentBlockEntry) {
          var [, parentBlockPath] = parentBlockEntry;
          var parentElementRange = Editor.range(e3, parentBlockPath, e3.selection.anchor);
          var currentLineRange = findCurrentLineRange(e3, parentElementRange);
          if (!Range.isCollapsed(currentLineRange)) {
            Transforms.delete(e3, {
              at: currentLineRange
            });
          }
        }
      }
    };
    e3.apply = (op) => {
      var matches = [];
      var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(e3);
      if (pendingDiffs !== null && pendingDiffs !== void 0 && pendingDiffs.length) {
        var transformed = pendingDiffs.map((textDiff) => transformTextDiff(textDiff, op)).filter(Boolean);
        EDITOR_TO_PENDING_DIFFS.set(e3, transformed);
      }
      var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(e3);
      if (pendingSelection) {
        EDITOR_TO_PENDING_SELECTION.set(e3, transformPendingRange(e3, pendingSelection, op));
      }
      var pendingAction = EDITOR_TO_PENDING_ACTION.get(e3);
      if (pendingAction !== null && pendingAction !== void 0 && pendingAction.at) {
        var at = Point.isPoint(pendingAction === null || pendingAction === void 0 ? void 0 : pendingAction.at) ? transformPendingPoint(e3, pendingAction.at, op) : transformPendingRange(e3, pendingAction.at, op);
        EDITOR_TO_PENDING_ACTION.set(e3, at ? _objectSpread2(_objectSpread2({}, pendingAction), {}, {
          at
        }) : null);
      }
      switch (op.type) {
        case "insert_text":
        case "remove_text":
        case "set_node":
        case "split_node": {
          matches.push(...getMatches(e3, op.path));
          break;
        }
        case "set_selection": {
          var _EDITOR_TO_USER_SELEC;
          (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(e3)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();
          EDITOR_TO_USER_SELECTION.delete(e3);
          break;
        }
        case "insert_node":
        case "remove_node": {
          matches.push(...getMatches(e3, Path.parent(op.path)));
          break;
        }
        case "merge_node": {
          var prevPath = Path.previous(op.path);
          matches.push(...getMatches(e3, prevPath));
          break;
        }
        case "move_node": {
          var commonPath = Path.common(Path.parent(op.path), Path.parent(op.newPath));
          matches.push(...getMatches(e3, commonPath));
          break;
        }
      }
      apply2(op);
      for (var [path4, key] of matches) {
        var [node5] = Editor.node(e3, path4);
        NODE_TO_KEY.set(node5, key);
      }
    };
    e3.setFragmentData = (data) => {
      var {
        selection
      } = e3;
      if (!selection) {
        return;
      }
      var [start2, end2] = Range.edges(selection);
      var startVoid = Editor.void(e3, {
        at: start2.path
      });
      var endVoid = Editor.void(e3, {
        at: end2.path
      });
      if (Range.isCollapsed(selection) && !startVoid) {
        return;
      }
      var domRange = ReactEditor.toDOMRange(e3, selection);
      var contents = domRange.cloneContents();
      var attach = contents.childNodes[0];
      contents.childNodes.forEach((node5) => {
        if (node5.textContent && node5.textContent.trim() !== "") {
          attach = node5;
        }
      });
      if (endVoid) {
        var [voidNode] = endVoid;
        var r3 = domRange.cloneRange();
        var domNode = ReactEditor.toDOMNode(e3, voidNode);
        r3.setEndAfter(domNode);
        contents = r3.cloneContents();
      }
      if (startVoid) {
        attach = contents.querySelector("[data-slate-spacer]");
      }
      Array.from(contents.querySelectorAll("[data-slate-zero-width]")).forEach((zw) => {
        var isNewline = zw.getAttribute("data-slate-zero-width") === "n";
        zw.textContent = isNewline ? "\n" : "";
      });
      if (isDOMText(attach)) {
        var span = attach.ownerDocument.createElement("span");
        span.style.whiteSpace = "pre";
        span.appendChild(attach);
        contents.appendChild(span);
        attach = span;
      }
      var fragment2 = e3.getFragment();
      var string5 = JSON.stringify(fragment2);
      var encoded = window.btoa(encodeURIComponent(string5));
      attach.setAttribute("data-slate-fragment", encoded);
      data.setData("application/".concat(clipboardFormatKey), encoded);
      var div = contents.ownerDocument.createElement("div");
      div.appendChild(contents);
      div.setAttribute("hidden", "true");
      contents.ownerDocument.body.appendChild(div);
      data.setData("text/html", div.innerHTML);
      data.setData("text/plain", getPlainText(div));
      contents.ownerDocument.body.removeChild(div);
      return data;
    };
    e3.insertData = (data) => {
      if (!e3.insertFragmentData(data)) {
        e3.insertTextData(data);
      }
    };
    e3.insertFragmentData = (data) => {
      var fragment2 = data.getData("application/".concat(clipboardFormatKey)) || getSlateFragmentAttribute(data);
      if (fragment2) {
        var decoded = decodeURIComponent(window.atob(fragment2));
        var parsed = JSON.parse(decoded);
        e3.insertFragment(parsed);
        return true;
      }
      return false;
    };
    e3.insertTextData = (data) => {
      var text4 = data.getData("text/plain");
      if (text4) {
        var lines = text4.split(/\r\n|\r|\n/);
        var split = false;
        for (var line2 of lines) {
          if (split) {
            Transforms.splitNodes(e3, {
              always: true
            });
          }
          e3.insertText(line2);
          split = true;
        }
        return true;
      }
      return false;
    };
    e3.onChange = (options) => {
      var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? import_react_dom.default.unstable_batchedUpdates : (callback) => callback();
      maybeBatchUpdates(() => {
        var onContextChange = EDITOR_TO_ON_CHANGE.get(e3);
        if (onContextChange) {
          onContextChange();
        }
        onChange(options);
      });
    };
    return e3;
  };
  var getMatches = (e3, path4) => {
    var matches = [];
    for (var [n6, p3] of Editor.levels(e3, {
      at: path4
    })) {
      var key = ReactEditor.findKey(e3, n6);
      matches.push([p3, key]);
    }
    return matches;
  };

  // src/components/Editor/MarkdownEditor.tsx
  var import_is_hotkey2 = __toESM(require_lib(), 1);

  // src/util/slate.ts
  var serialize2 = (node5) => {
    if (Text2.isText(node5)) {
      return node5.text;
    }
    return node5.children.map(serializeNode).join("\n");
  };
  var serializeNode = (node5) => {
    if (Text2.isText(node5)) {
      return node5.text;
    }
    const children = node5.children.map(serializeNode).join("");
    switch (node5.type) {
      case "block-quote":
        return `> ${children}
`;
      case "paragraph":
        return `${children}
`;
      case "link":
        return `[${children}](${node5.url})`;
      case "bulleted-list":
        return `${children.replace(/^/gm, "* ")}`;
      default:
        return children;
    }
  };

  // src/extension/util.ts
  function textContent(text4, tags) {
    return new Content({
      tags,
      type: {
        case: "data",
        value: new Data({
          type: {
            case: "text",
            value: {
              data: text4
            }
          }
        })
      }
    });
  }
  function urlContent(url, tags) {
    return new Content({
      tags,
      type: {
        case: "data",
        value: new Data({
          type: {
            case: "url",
            value: {
              url
            }
          }
        })
      }
    });
  }

  // src/components/Editor/MarkdownEditor.tsx
  var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
  var SHORTCUTS = {
    "*": "list-item",
    "-": "list-item",
    "+": "list-item",
    ">": "block-quote",
    "#": "heading-one",
    "##": "heading-two",
    "###": "heading-three",
    "####": "heading-four",
    "#####": "heading-five",
    "######": "heading-six"
  };
  var MarkdownEditor = ({}) => {
    const { loadContent } = useProjectContext();
    const [text4, setText] = (0, import_react63.useState)("");
    const [currentInputType, setCurrentInputType] = (0, import_react63.useState)("text");
    const renderElement = (0, import_react63.useCallback)((props) => /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Element4, { ...props }), []);
    const editor = (0, import_react63.useMemo)(
      () => withShortcuts(withReact(withHistory(createEditor()))),
      []
    );
    const initialValue = (0, import_react63.useMemo)(
      () => JSON.parse(localStorage.getItem("content") || "null") || [{
        type: "paragraph",
        children: [{ text: "" }]
      }],
      []
    );
    const handleDOMBeforeInput = (0, import_react63.useCallback)(
      (e3) => {
        queueMicrotask(() => {
          const pendingDiffs = ReactEditor.androidPendingDiffs(editor);
          const scheduleFlush = pendingDiffs?.some(({ diff, path: path4 }) => {
            if (!diff.text.endsWith(" ")) {
              return false;
            }
            const { text: text5 } = Node2.leaf(editor, path4);
            const beforeText = text5.slice(0, diff.start) + diff.text.slice(0, -1);
            if (!(beforeText in SHORTCUTS)) {
              return;
            }
            const blockEntry = Editor.above(editor, {
              at: path4,
              match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6)
            });
            if (!blockEntry) {
              return false;
            }
            const [, blockPath] = blockEntry;
            return Editor.isStart(editor, Editor.start(editor, path4), blockPath);
          });
          if (scheduleFlush) {
            ReactEditor.androidScheduleFlush(editor);
          }
        });
      },
      [editor]
    );
    const onChange = (e3, { name, checkedItems }) => {
      setCurrentInputType(checkedItems[0]);
    };
    const saveContent = async (content3) => {
      try {
        const resp = await contentService.save({
          content: content3,
          related: []
        });
        console.log(resp);
        _t.success("Saved content");
        void loadContent();
      } catch (e3) {
        _t.error("Failed to save content");
        console.error("failed to save", e3);
      }
    };
    const saveURL = async (url) => {
      const u4 = new URL(url);
      await saveContent(urlContent(url, ["app/input"]));
    };
    const saveText = async (text5) => {
      await saveContent(textContent(text5, ["app/input"]));
      void loadContent();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
      Slate,
      {
        editor,
        initialValue,
        onChange: (value) => {
          const isAstChange = editor.operations.some(
            (op) => "set_selection" !== op.type
          );
          if (isAstChange) {
            const content3 = JSON.stringify(value);
            localStorage.setItem("content", content3);
            if (value.length === 1 && value[0].type === "paragraph" && value[0].children.length === 1 && value[0].children[0].type === "text") {
              setText(value[0].children[0].text);
            }
          }
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Stack, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
            Editable,
            {
              style: { height: "100%", maxHeight: "100%", overflowY: "auto" },
              onDOMBeforeInput: handleDOMBeforeInput,
              renderElement,
              placeholder: "Write some markdown...",
              spellCheck: true,
              autoFocus: true
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Stack, { horizontal: true, horizontalAlign: "space-between", tokens: { childrenGap: 3 }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
              Toolbar,
              {
                "aria-label": "with Radio Buttons",
                defaultCheckedValues: {
                  textOptions: ["text"]
                },
                onCheckedValueChange: onChange,
                children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(ToolbarRadioGroup, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                    ToolbarRadioButton,
                    {
                      "aria-label": "Text",
                      name: "textOptions",
                      value: "text",
                      icon: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(TextT24Regular, {})
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                    ToolbarRadioButton,
                    {
                      "aria-label": "Link",
                      name: "textOptions",
                      value: "link",
                      icon: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Link24Regular, {})
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                    ToolbarRadioButton,
                    {
                      "aria-label": "prompt",
                      name: "textOptions",
                      value: "prompt",
                      icon: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(BrainCircuit24Regular, {})
                    }
                  )
                ] })
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Button, { onClick: () => {
              if (currentInputType === "text") {
                void saveText(serialize2(editor));
              }
              if (currentInputType === "link") {
                void saveURL(text4);
              }
            }, children: "Save" }) })
          ] }) })
        ] })
      }
    );
  };
  var withShortcuts = (editor) => {
    const { deleteBackward: deleteBackward2, insertText: insertText3 } = editor;
    editor.insertText = (text4) => {
      const { selection } = editor;
      if (text4.endsWith(" ") && selection && Range.isCollapsed(selection)) {
        const { anchor: anchor2 } = selection;
        const block = Editor.above(editor, {
          match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6)
        });
        const path4 = block ? block[1] : [];
        const start2 = Editor.start(editor, path4);
        const range2 = { anchor: anchor2, focus: start2 };
        const beforeText = Editor.string(editor, range2) + text4.slice(0, -1);
        const type = SHORTCUTS[beforeText];
        if (type) {
          Transforms.select(editor, range2);
          if (!Range.isCollapsed(range2)) {
            Transforms.delete(editor);
          }
          const newProperties = {
            // @ts-ignore
            type
          };
          Transforms.setNodes(editor, newProperties, {
            match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6)
          });
          if (type === "list-item") {
            const list3 = {
              type: "bulleted-list",
              children: []
            };
            Transforms.wrapNodes(editor, list3, {
              match: (n6) => !Editor.isEditor(n6) && Element2.isElement(n6) && n6.type === "list-item"
            });
          }
          return;
        }
      }
      insertText3(text4);
    };
    editor.deleteBackward = (...args) => {
      const { selection } = editor;
      if (selection && Range.isCollapsed(selection)) {
        const match2 = Editor.above(editor, {
          match: (n6) => Element2.isElement(n6) && Editor.isBlock(editor, n6)
        });
        if (match2) {
          const [block, path4] = match2;
          const start2 = Editor.start(editor, path4);
          if (!Editor.isEditor(block) && Element2.isElement(block) && block.type !== "paragraph" && Point.equals(selection.anchor, start2)) {
            const newProperties = {
              type: "paragraph"
            };
            Transforms.setNodes(editor, newProperties);
            if (block.type === "list-item") {
              Transforms.unwrapNodes(editor, {
                match: (n6) => !Editor.isEditor(n6) && Element2.isElement(n6) && n6.type === "bulleted-list",
                split: true
              });
            }
            return;
          }
        }
        deleteBackward2(...args);
      }
    };
    return editor;
  };
  var Element4 = ({ attributes, children, element: element2 }) => {
    switch (element2.type) {
      case "block-quote":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("blockquote", { ...attributes, children });
      case "bulleted-list":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("ul", { ...attributes, children });
      case "heading-one":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h1", { ...attributes, children });
      case "heading-two":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h2", { ...attributes, children });
      case "heading-three":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h3", { ...attributes, children });
      case "heading-four":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h4", { ...attributes, children });
      case "heading-five":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h5", { ...attributes, children });
      case "heading-six":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h6", { ...attributes, children });
      case "list-item":
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("li", { ...attributes, children });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { ...attributes, children });
    }
  };

  // src/components/AudioPlayer.tsx
  var import_react65 = __toESM(require_react(), 1);
  var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);

  // src/components/Content/ContentCard.tsx
  var React240 = __toESM(require_react(), 1);

  // src/util/text.ts
  function truncateText(text4, maxLength) {
    if (text4.length <= maxLength) {
      return text4;
    }
    const words = text4.split(" ");
    let currentLength = 0;
    let truncatedText = "";
    for (const word of words) {
      if (currentLength + word.length + 1 <= maxLength) {
        truncatedText += word + " ";
        currentLength += word.length + 1;
      } else {
        break;
      }
    }
    if (truncatedText !== text4) {
      truncatedText = truncatedText.trim() + "...";
    }
    return truncatedText;
  }

  // src/components/IFrameSandbox.tsx
  var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
  var IFrameSandbox = ({ url }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
      "iframe",
      {
        src: url,
        style: { width: "100%", height: "500px" },
        sandbox: "allow-scripts allow-same-origin",
        title: "Sandboxed Iframe"
      }
    );
  };

  // src/components/Vote.tsx
  var import_react66 = __toESM(require_react(), 1);
  var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
  var Vote = ({ contentID, votes }) => {
    const [currentVotes, setCurrentVotes] = (0, import_react66.useState)(votes);
    const handleUpvote = async () => {
      const res = await contentService.vote({
        contentId: contentID
      });
      setCurrentVotes(res.votes);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between" }, children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ChevronUp20Filled, { onClick: handleUpvote, style: { cursor: "pointer" } }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("span", { children: currentVotes })
    ] }) });
  };

  // src/components/Content/styles.tsx
  var useStyles26 = makeStyles2({
    main: {
      ...shorthands.gap("36px"),
      display: "flex",
      flexDirection: "column",
      flexWrap: "wrap"
    },
    card: {
      maxWidth: "100%",
      height: "fit-content"
    },
    section: {
      width: "fit-content"
    },
    title: {
      ...shorthands.margin(0, 0, "12px")
    },
    horizontalCardImage: {
      width: "64px",
      height: "64px"
    },
    headerImage: {
      ...shorthands.borderRadius("4px"),
      maxWidth: "80px",
      maxHeight: "80px"
    },
    caption: {
      color: tokens.colorNeutralForeground3
    },
    text: {
      ...shorthands.margin(0)
    },
    stackItem: {
      width: "100%"
    }
  });

  // ../node_modules/qrcode.react/lib/esm/index.js
  var import_react67 = __toESM(require_react());
  var __defProp2 = Object.defineProperty;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a3, b4) => {
    for (var prop in b4 || (b4 = {}))
      if (__hasOwnProp2.call(b4, prop))
        __defNormalProp(a3, prop, b4[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b4)) {
        if (__propIsEnum.call(b4, prop))
          __defNormalProp(a3, prop, b4[prop]);
      }
    return a3;
  };
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp2.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var qrcodegen;
  ((qrcodegen2) => {
    const _QrCode = class {
      constructor(version2, errorCorrectionLevel, dataCodewords, msk) {
        this.version = version2;
        this.errorCorrectionLevel = errorCorrectionLevel;
        this.modules = [];
        this.isFunction = [];
        if (version2 < _QrCode.MIN_VERSION || version2 > _QrCode.MAX_VERSION)
          throw new RangeError("Version value out of range");
        if (msk < -1 || msk > 7)
          throw new RangeError("Mask value out of range");
        this.size = version2 * 4 + 17;
        let row = [];
        for (let i4 = 0; i4 < this.size; i4++)
          row.push(false);
        for (let i4 = 0; i4 < this.size; i4++) {
          this.modules.push(row.slice());
          this.isFunction.push(row.slice());
        }
        this.drawFunctionPatterns();
        const allCodewords = this.addEccAndInterleave(dataCodewords);
        this.drawCodewords(allCodewords);
        if (msk == -1) {
          let minPenalty = 1e9;
          for (let i4 = 0; i4 < 8; i4++) {
            this.applyMask(i4);
            this.drawFormatBits(i4);
            const penalty = this.getPenaltyScore();
            if (penalty < minPenalty) {
              msk = i4;
              minPenalty = penalty;
            }
            this.applyMask(i4);
          }
        }
        assert2(0 <= msk && msk <= 7);
        this.mask = msk;
        this.applyMask(msk);
        this.drawFormatBits(msk);
        this.isFunction = [];
      }
      static encodeText(text4, ecl) {
        const segs = qrcodegen2.QrSegment.makeSegments(text4);
        return _QrCode.encodeSegments(segs, ecl);
      }
      static encodeBinary(data, ecl) {
        const seg = qrcodegen2.QrSegment.makeBytes(data);
        return _QrCode.encodeSegments([seg], ecl);
      }
      static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {
        if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)
          throw new RangeError("Invalid value");
        let version2;
        let dataUsedBits;
        for (version2 = minVersion; ; version2++) {
          const dataCapacityBits2 = _QrCode.getNumDataCodewords(version2, ecl) * 8;
          const usedBits = QrSegment.getTotalBits(segs, version2);
          if (usedBits <= dataCapacityBits2) {
            dataUsedBits = usedBits;
            break;
          }
          if (version2 >= maxVersion)
            throw new RangeError("Data too long");
        }
        for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {
          if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version2, newEcl) * 8)
            ecl = newEcl;
        }
        let bb = [];
        for (const seg of segs) {
          appendBits(seg.mode.modeBits, 4, bb);
          appendBits(seg.numChars, seg.mode.numCharCountBits(version2), bb);
          for (const b4 of seg.getData())
            bb.push(b4);
        }
        assert2(bb.length == dataUsedBits);
        const dataCapacityBits = _QrCode.getNumDataCodewords(version2, ecl) * 8;
        assert2(bb.length <= dataCapacityBits);
        appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);
        appendBits(0, (8 - bb.length % 8) % 8, bb);
        assert2(bb.length % 8 == 0);
        for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)
          appendBits(padByte, 8, bb);
        let dataCodewords = [];
        while (dataCodewords.length * 8 < bb.length)
          dataCodewords.push(0);
        bb.forEach((b4, i4) => dataCodewords[i4 >>> 3] |= b4 << 7 - (i4 & 7));
        return new _QrCode(version2, ecl, dataCodewords, mask);
      }
      getModule(x2, y3) {
        return 0 <= x2 && x2 < this.size && 0 <= y3 && y3 < this.size && this.modules[y3][x2];
      }
      getModules() {
        return this.modules;
      }
      drawFunctionPatterns() {
        for (let i4 = 0; i4 < this.size; i4++) {
          this.setFunctionModule(6, i4, i4 % 2 == 0);
          this.setFunctionModule(i4, 6, i4 % 2 == 0);
        }
        this.drawFinderPattern(3, 3);
        this.drawFinderPattern(this.size - 4, 3);
        this.drawFinderPattern(3, this.size - 4);
        const alignPatPos = this.getAlignmentPatternPositions();
        const numAlign = alignPatPos.length;
        for (let i4 = 0; i4 < numAlign; i4++) {
          for (let j4 = 0; j4 < numAlign; j4++) {
            if (!(i4 == 0 && j4 == 0 || i4 == 0 && j4 == numAlign - 1 || i4 == numAlign - 1 && j4 == 0))
              this.drawAlignmentPattern(alignPatPos[i4], alignPatPos[j4]);
          }
        }
        this.drawFormatBits(0);
        this.drawVersion();
      }
      drawFormatBits(mask) {
        const data = this.errorCorrectionLevel.formatBits << 3 | mask;
        let rem = data;
        for (let i4 = 0; i4 < 10; i4++)
          rem = rem << 1 ^ (rem >>> 9) * 1335;
        const bits = (data << 10 | rem) ^ 21522;
        assert2(bits >>> 15 == 0);
        for (let i4 = 0; i4 <= 5; i4++)
          this.setFunctionModule(8, i4, getBit(bits, i4));
        this.setFunctionModule(8, 7, getBit(bits, 6));
        this.setFunctionModule(8, 8, getBit(bits, 7));
        this.setFunctionModule(7, 8, getBit(bits, 8));
        for (let i4 = 9; i4 < 15; i4++)
          this.setFunctionModule(14 - i4, 8, getBit(bits, i4));
        for (let i4 = 0; i4 < 8; i4++)
          this.setFunctionModule(this.size - 1 - i4, 8, getBit(bits, i4));
        for (let i4 = 8; i4 < 15; i4++)
          this.setFunctionModule(8, this.size - 15 + i4, getBit(bits, i4));
        this.setFunctionModule(8, this.size - 8, true);
      }
      drawVersion() {
        if (this.version < 7)
          return;
        let rem = this.version;
        for (let i4 = 0; i4 < 12; i4++)
          rem = rem << 1 ^ (rem >>> 11) * 7973;
        const bits = this.version << 12 | rem;
        assert2(bits >>> 18 == 0);
        for (let i4 = 0; i4 < 18; i4++) {
          const color2 = getBit(bits, i4);
          const a3 = this.size - 11 + i4 % 3;
          const b4 = Math.floor(i4 / 3);
          this.setFunctionModule(a3, b4, color2);
          this.setFunctionModule(b4, a3, color2);
        }
      }
      drawFinderPattern(x2, y3) {
        for (let dy = -4; dy <= 4; dy++) {
          for (let dx = -4; dx <= 4; dx++) {
            const dist = Math.max(Math.abs(dx), Math.abs(dy));
            const xx = x2 + dx;
            const yy = y3 + dy;
            if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)
              this.setFunctionModule(xx, yy, dist != 2 && dist != 4);
          }
        }
      }
      drawAlignmentPattern(x2, y3) {
        for (let dy = -2; dy <= 2; dy++) {
          for (let dx = -2; dx <= 2; dx++)
            this.setFunctionModule(x2 + dx, y3 + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);
        }
      }
      setFunctionModule(x2, y3, isDark) {
        this.modules[y3][x2] = isDark;
        this.isFunction[y3][x2] = true;
      }
      addEccAndInterleave(data) {
        const ver = this.version;
        const ecl = this.errorCorrectionLevel;
        if (data.length != _QrCode.getNumDataCodewords(ver, ecl))
          throw new RangeError("Invalid argument");
        const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];
        const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];
        const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);
        const numShortBlocks = numBlocks - rawCodewords % numBlocks;
        const shortBlockLen = Math.floor(rawCodewords / numBlocks);
        let blocks = [];
        const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);
        for (let i4 = 0, k2 = 0; i4 < numBlocks; i4++) {
          let dat = data.slice(k2, k2 + shortBlockLen - blockEccLen + (i4 < numShortBlocks ? 0 : 1));
          k2 += dat.length;
          const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);
          if (i4 < numShortBlocks)
            dat.push(0);
          blocks.push(dat.concat(ecc));
        }
        let result = [];
        for (let i4 = 0; i4 < blocks[0].length; i4++) {
          blocks.forEach((block, j4) => {
            if (i4 != shortBlockLen - blockEccLen || j4 >= numShortBlocks)
              result.push(block[i4]);
          });
        }
        assert2(result.length == rawCodewords);
        return result;
      }
      drawCodewords(data) {
        if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))
          throw new RangeError("Invalid argument");
        let i4 = 0;
        for (let right = this.size - 1; right >= 1; right -= 2) {
          if (right == 6)
            right = 5;
          for (let vert = 0; vert < this.size; vert++) {
            for (let j4 = 0; j4 < 2; j4++) {
              const x2 = right - j4;
              const upward = (right + 1 & 2) == 0;
              const y3 = upward ? this.size - 1 - vert : vert;
              if (!this.isFunction[y3][x2] && i4 < data.length * 8) {
                this.modules[y3][x2] = getBit(data[i4 >>> 3], 7 - (i4 & 7));
                i4++;
              }
            }
          }
        }
        assert2(i4 == data.length * 8);
      }
      applyMask(mask) {
        if (mask < 0 || mask > 7)
          throw new RangeError("Mask value out of range");
        for (let y3 = 0; y3 < this.size; y3++) {
          for (let x2 = 0; x2 < this.size; x2++) {
            let invert;
            switch (mask) {
              case 0:
                invert = (x2 + y3) % 2 == 0;
                break;
              case 1:
                invert = y3 % 2 == 0;
                break;
              case 2:
                invert = x2 % 3 == 0;
                break;
              case 3:
                invert = (x2 + y3) % 3 == 0;
                break;
              case 4:
                invert = (Math.floor(x2 / 3) + Math.floor(y3 / 2)) % 2 == 0;
                break;
              case 5:
                invert = x2 * y3 % 2 + x2 * y3 % 3 == 0;
                break;
              case 6:
                invert = (x2 * y3 % 2 + x2 * y3 % 3) % 2 == 0;
                break;
              case 7:
                invert = ((x2 + y3) % 2 + x2 * y3 % 3) % 2 == 0;
                break;
              default:
                throw new Error("Unreachable");
            }
            if (!this.isFunction[y3][x2] && invert)
              this.modules[y3][x2] = !this.modules[y3][x2];
          }
        }
      }
      getPenaltyScore() {
        let result = 0;
        for (let y3 = 0; y3 < this.size; y3++) {
          let runColor = false;
          let runX = 0;
          let runHistory = [0, 0, 0, 0, 0, 0, 0];
          for (let x2 = 0; x2 < this.size; x2++) {
            if (this.modules[y3][x2] == runColor) {
              runX++;
              if (runX == 5)
                result += _QrCode.PENALTY_N1;
              else if (runX > 5)
                result++;
            } else {
              this.finderPenaltyAddHistory(runX, runHistory);
              if (!runColor)
                result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;
              runColor = this.modules[y3][x2];
              runX = 1;
            }
          }
          result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;
        }
        for (let x2 = 0; x2 < this.size; x2++) {
          let runColor = false;
          let runY = 0;
          let runHistory = [0, 0, 0, 0, 0, 0, 0];
          for (let y3 = 0; y3 < this.size; y3++) {
            if (this.modules[y3][x2] == runColor) {
              runY++;
              if (runY == 5)
                result += _QrCode.PENALTY_N1;
              else if (runY > 5)
                result++;
            } else {
              this.finderPenaltyAddHistory(runY, runHistory);
              if (!runColor)
                result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;
              runColor = this.modules[y3][x2];
              runY = 1;
            }
          }
          result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;
        }
        for (let y3 = 0; y3 < this.size - 1; y3++) {
          for (let x2 = 0; x2 < this.size - 1; x2++) {
            const color2 = this.modules[y3][x2];
            if (color2 == this.modules[y3][x2 + 1] && color2 == this.modules[y3 + 1][x2] && color2 == this.modules[y3 + 1][x2 + 1])
              result += _QrCode.PENALTY_N2;
          }
        }
        let dark = 0;
        for (const row of this.modules)
          dark = row.reduce((sum, color2) => sum + (color2 ? 1 : 0), dark);
        const total = this.size * this.size;
        const k2 = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;
        assert2(0 <= k2 && k2 <= 9);
        result += k2 * _QrCode.PENALTY_N4;
        assert2(0 <= result && result <= 2568888);
        return result;
      }
      getAlignmentPatternPositions() {
        if (this.version == 1)
          return [];
        else {
          const numAlign = Math.floor(this.version / 7) + 2;
          const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;
          let result = [6];
          for (let pos = this.size - 7; result.length < numAlign; pos -= step)
            result.splice(1, 0, pos);
          return result;
        }
      }
      static getNumRawDataModules(ver) {
        if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)
          throw new RangeError("Version number out of range");
        let result = (16 * ver + 128) * ver + 64;
        if (ver >= 2) {
          const numAlign = Math.floor(ver / 7) + 2;
          result -= (25 * numAlign - 10) * numAlign - 55;
          if (ver >= 7)
            result -= 36;
        }
        assert2(208 <= result && result <= 29648);
        return result;
      }
      static getNumDataCodewords(ver, ecl) {
        return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];
      }
      static reedSolomonComputeDivisor(degree) {
        if (degree < 1 || degree > 255)
          throw new RangeError("Degree out of range");
        let result = [];
        for (let i4 = 0; i4 < degree - 1; i4++)
          result.push(0);
        result.push(1);
        let root3 = 1;
        for (let i4 = 0; i4 < degree; i4++) {
          for (let j4 = 0; j4 < result.length; j4++) {
            result[j4] = _QrCode.reedSolomonMultiply(result[j4], root3);
            if (j4 + 1 < result.length)
              result[j4] ^= result[j4 + 1];
          }
          root3 = _QrCode.reedSolomonMultiply(root3, 2);
        }
        return result;
      }
      static reedSolomonComputeRemainder(data, divisor) {
        let result = divisor.map((_3) => 0);
        for (const b4 of data) {
          const factor = b4 ^ result.shift();
          result.push(0);
          divisor.forEach((coef, i4) => result[i4] ^= _QrCode.reedSolomonMultiply(coef, factor));
        }
        return result;
      }
      static reedSolomonMultiply(x2, y3) {
        if (x2 >>> 8 != 0 || y3 >>> 8 != 0)
          throw new RangeError("Byte out of range");
        let z2 = 0;
        for (let i4 = 7; i4 >= 0; i4--) {
          z2 = z2 << 1 ^ (z2 >>> 7) * 285;
          z2 ^= (y3 >>> i4 & 1) * x2;
        }
        assert2(z2 >>> 8 == 0);
        return z2;
      }
      finderPenaltyCountPatterns(runHistory) {
        const n6 = runHistory[1];
        assert2(n6 <= this.size * 3);
        const core = n6 > 0 && runHistory[2] == n6 && runHistory[3] == n6 * 3 && runHistory[4] == n6 && runHistory[5] == n6;
        return (core && runHistory[0] >= n6 * 4 && runHistory[6] >= n6 ? 1 : 0) + (core && runHistory[6] >= n6 * 4 && runHistory[0] >= n6 ? 1 : 0);
      }
      finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {
        if (currentRunColor) {
          this.finderPenaltyAddHistory(currentRunLength, runHistory);
          currentRunLength = 0;
        }
        currentRunLength += this.size;
        this.finderPenaltyAddHistory(currentRunLength, runHistory);
        return this.finderPenaltyCountPatterns(runHistory);
      }
      finderPenaltyAddHistory(currentRunLength, runHistory) {
        if (runHistory[0] == 0)
          currentRunLength += this.size;
        runHistory.pop();
        runHistory.unshift(currentRunLength);
      }
    };
    let QrCode = _QrCode;
    QrCode.MIN_VERSION = 1;
    QrCode.MAX_VERSION = 40;
    QrCode.PENALTY_N1 = 3;
    QrCode.PENALTY_N2 = 3;
    QrCode.PENALTY_N3 = 40;
    QrCode.PENALTY_N4 = 10;
    QrCode.ECC_CODEWORDS_PER_BLOCK = [
      [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],
      [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],
      [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],
      [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]
    ];
    QrCode.NUM_ERROR_CORRECTION_BLOCKS = [
      [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],
      [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],
      [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],
      [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]
    ];
    qrcodegen2.QrCode = QrCode;
    function appendBits(val, len, bb) {
      if (len < 0 || len > 31 || val >>> len != 0)
        throw new RangeError("Value out of range");
      for (let i4 = len - 1; i4 >= 0; i4--)
        bb.push(val >>> i4 & 1);
    }
    function getBit(x2, i4) {
      return (x2 >>> i4 & 1) != 0;
    }
    function assert2(cond) {
      if (!cond)
        throw new Error("Assertion error");
    }
    const _QrSegment = class {
      constructor(mode, numChars, bitData) {
        this.mode = mode;
        this.numChars = numChars;
        this.bitData = bitData;
        if (numChars < 0)
          throw new RangeError("Invalid argument");
        this.bitData = bitData.slice();
      }
      static makeBytes(data) {
        let bb = [];
        for (const b4 of data)
          appendBits(b4, 8, bb);
        return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);
      }
      static makeNumeric(digits) {
        if (!_QrSegment.isNumeric(digits))
          throw new RangeError("String contains non-numeric characters");
        let bb = [];
        for (let i4 = 0; i4 < digits.length; ) {
          const n6 = Math.min(digits.length - i4, 3);
          appendBits(parseInt(digits.substr(i4, n6), 10), n6 * 3 + 1, bb);
          i4 += n6;
        }
        return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);
      }
      static makeAlphanumeric(text4) {
        if (!_QrSegment.isAlphanumeric(text4))
          throw new RangeError("String contains unencodable characters in alphanumeric mode");
        let bb = [];
        let i4;
        for (i4 = 0; i4 + 2 <= text4.length; i4 += 2) {
          let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text4.charAt(i4)) * 45;
          temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text4.charAt(i4 + 1));
          appendBits(temp, 11, bb);
        }
        if (i4 < text4.length)
          appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text4.charAt(i4)), 6, bb);
        return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text4.length, bb);
      }
      static makeSegments(text4) {
        if (text4 == "")
          return [];
        else if (_QrSegment.isNumeric(text4))
          return [_QrSegment.makeNumeric(text4)];
        else if (_QrSegment.isAlphanumeric(text4))
          return [_QrSegment.makeAlphanumeric(text4)];
        else
          return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text4))];
      }
      static makeEci(assignVal) {
        let bb = [];
        if (assignVal < 0)
          throw new RangeError("ECI assignment value out of range");
        else if (assignVal < 1 << 7)
          appendBits(assignVal, 8, bb);
        else if (assignVal < 1 << 14) {
          appendBits(2, 2, bb);
          appendBits(assignVal, 14, bb);
        } else if (assignVal < 1e6) {
          appendBits(6, 3, bb);
          appendBits(assignVal, 21, bb);
        } else
          throw new RangeError("ECI assignment value out of range");
        return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);
      }
      static isNumeric(text4) {
        return _QrSegment.NUMERIC_REGEX.test(text4);
      }
      static isAlphanumeric(text4) {
        return _QrSegment.ALPHANUMERIC_REGEX.test(text4);
      }
      getData() {
        return this.bitData.slice();
      }
      static getTotalBits(segs, version2) {
        let result = 0;
        for (const seg of segs) {
          const ccbits = seg.mode.numCharCountBits(version2);
          if (seg.numChars >= 1 << ccbits)
            return Infinity;
          result += 4 + ccbits + seg.bitData.length;
        }
        return result;
      }
      static toUtf8ByteArray(str) {
        str = encodeURI(str);
        let result = [];
        for (let i4 = 0; i4 < str.length; i4++) {
          if (str.charAt(i4) != "%")
            result.push(str.charCodeAt(i4));
          else {
            result.push(parseInt(str.substr(i4 + 1, 2), 16));
            i4 += 2;
          }
        }
        return result;
      }
    };
    let QrSegment = _QrSegment;
    QrSegment.NUMERIC_REGEX = /^[0-9]*$/;
    QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\/:-]*$/;
    QrSegment.ALPHANUMERIC_CHARSET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:";
    qrcodegen2.QrSegment = QrSegment;
  })(qrcodegen || (qrcodegen = {}));
  ((qrcodegen2) => {
    let QrCode;
    ((QrCode2) => {
      const _Ecc = class {
        constructor(ordinal, formatBits) {
          this.ordinal = ordinal;
          this.formatBits = formatBits;
        }
      };
      let Ecc = _Ecc;
      Ecc.LOW = new _Ecc(0, 1);
      Ecc.MEDIUM = new _Ecc(1, 0);
      Ecc.QUARTILE = new _Ecc(2, 3);
      Ecc.HIGH = new _Ecc(3, 2);
      QrCode2.Ecc = Ecc;
    })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));
  })(qrcodegen || (qrcodegen = {}));
  ((qrcodegen2) => {
    let QrSegment;
    ((QrSegment2) => {
      const _Mode = class {
        constructor(modeBits, numBitsCharCount) {
          this.modeBits = modeBits;
          this.numBitsCharCount = numBitsCharCount;
        }
        numCharCountBits(ver) {
          return this.numBitsCharCount[Math.floor((ver + 7) / 17)];
        }
      };
      let Mode = _Mode;
      Mode.NUMERIC = new _Mode(1, [10, 12, 14]);
      Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);
      Mode.BYTE = new _Mode(4, [8, 16, 16]);
      Mode.KANJI = new _Mode(8, [8, 10, 12]);
      Mode.ECI = new _Mode(7, [0, 0, 0]);
      QrSegment2.Mode = Mode;
    })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));
  })(qrcodegen || (qrcodegen = {}));
  var qrcodegen_default = qrcodegen;
  var ERROR_LEVEL_MAP = {
    L: qrcodegen_default.QrCode.Ecc.LOW,
    M: qrcodegen_default.QrCode.Ecc.MEDIUM,
    Q: qrcodegen_default.QrCode.Ecc.QUARTILE,
    H: qrcodegen_default.QrCode.Ecc.HIGH
  };
  var DEFAULT_SIZE = 128;
  var DEFAULT_LEVEL = "L";
  var DEFAULT_BGCOLOR = "#FFFFFF";
  var DEFAULT_FGCOLOR = "#000000";
  var DEFAULT_INCLUDEMARGIN = false;
  var MARGIN_SIZE = 4;
  var DEFAULT_IMG_SCALE = 0.1;
  function generatePath2(modules, margin2 = 0) {
    const ops = [];
    modules.forEach(function(row, y3) {
      let start2 = null;
      row.forEach(function(cell, x2) {
        if (!cell && start2 !== null) {
          ops.push(`M${start2 + margin2} ${y3 + margin2}h${x2 - start2}v1H${start2 + margin2}z`);
          start2 = null;
          return;
        }
        if (x2 === row.length - 1) {
          if (!cell) {
            return;
          }
          if (start2 === null) {
            ops.push(`M${x2 + margin2},${y3 + margin2} h1v1H${x2 + margin2}z`);
          } else {
            ops.push(`M${start2 + margin2},${y3 + margin2} h${x2 + 1 - start2}v1H${start2 + margin2}z`);
          }
          return;
        }
        if (cell && start2 === null) {
          start2 = x2;
        }
      });
    });
    return ops.join("");
  }
  function excavateModules(modules, excavation) {
    return modules.slice().map((row, y3) => {
      if (y3 < excavation.y || y3 >= excavation.y + excavation.h) {
        return row;
      }
      return row.map((cell, x2) => {
        if (x2 < excavation.x || x2 >= excavation.x + excavation.w) {
          return cell;
        }
        return false;
      });
    });
  }
  function getImageSettings(cells, size3, includeMargin, imageSettings) {
    if (imageSettings == null) {
      return null;
    }
    const margin2 = includeMargin ? MARGIN_SIZE : 0;
    const numCells = cells.length + margin2 * 2;
    const defaultSize = Math.floor(size3 * DEFAULT_IMG_SCALE);
    const scale = numCells / size3;
    const w3 = (imageSettings.width || defaultSize) * scale;
    const h4 = (imageSettings.height || defaultSize) * scale;
    const x2 = imageSettings.x == null ? cells.length / 2 - w3 / 2 : imageSettings.x * scale;
    const y3 = imageSettings.y == null ? cells.length / 2 - h4 / 2 : imageSettings.y * scale;
    let excavation = null;
    if (imageSettings.excavate) {
      let floorX = Math.floor(x2);
      let floorY = Math.floor(y3);
      let ceilW = Math.ceil(w3 + x2 - floorX);
      let ceilH = Math.ceil(h4 + y3 - floorY);
      excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };
    }
    return { x: x2, y: y3, h: h4, w: w3, excavation };
  }
  var SUPPORTS_PATH2D = function() {
    try {
      new Path2D().addPath(new Path2D());
    } catch (e3) {
      return false;
    }
    return true;
  }();
  function QRCodeCanvas(props) {
    const _a5 = props, {
      value,
      size: size3 = DEFAULT_SIZE,
      level = DEFAULT_LEVEL,
      bgColor = DEFAULT_BGCOLOR,
      fgColor = DEFAULT_FGCOLOR,
      includeMargin = DEFAULT_INCLUDEMARGIN,
      style,
      imageSettings
    } = _a5, otherProps = __objRest(_a5, [
      "value",
      "size",
      "level",
      "bgColor",
      "fgColor",
      "includeMargin",
      "style",
      "imageSettings"
    ]);
    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;
    const _canvas = (0, import_react67.useRef)(null);
    const _image = (0, import_react67.useRef)(null);
    const [isImgLoaded, setIsImageLoaded] = (0, import_react67.useState)(false);
    (0, import_react67.useEffect)(() => {
      if (_canvas.current != null) {
        const canvas = _canvas.current;
        const ctx = canvas.getContext("2d");
        if (!ctx) {
          return;
        }
        let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();
        const margin2 = includeMargin ? MARGIN_SIZE : 0;
        const numCells = cells.length + margin2 * 2;
        const calculatedImageSettings = getImageSettings(cells, size3, includeMargin, imageSettings);
        const image2 = _image.current;
        const haveImageToRender = calculatedImageSettings != null && image2 !== null && image2.complete && image2.naturalHeight !== 0 && image2.naturalWidth !== 0;
        if (haveImageToRender) {
          if (calculatedImageSettings.excavation != null) {
            cells = excavateModules(cells, calculatedImageSettings.excavation);
          }
        }
        const pixelRatio = window.devicePixelRatio || 1;
        canvas.height = canvas.width = size3 * pixelRatio;
        const scale = size3 / numCells * pixelRatio;
        ctx.scale(scale, scale);
        ctx.fillStyle = bgColor;
        ctx.fillRect(0, 0, numCells, numCells);
        ctx.fillStyle = fgColor;
        if (SUPPORTS_PATH2D) {
          ctx.fill(new Path2D(generatePath2(cells, margin2)));
        } else {
          cells.forEach(function(row, rdx) {
            row.forEach(function(cell, cdx) {
              if (cell) {
                ctx.fillRect(cdx + margin2, rdx + margin2, 1, 1);
              }
            });
          });
        }
        if (haveImageToRender) {
          ctx.drawImage(image2, calculatedImageSettings.x + margin2, calculatedImageSettings.y + margin2, calculatedImageSettings.w, calculatedImageSettings.h);
        }
      }
    });
    (0, import_react67.useEffect)(() => {
      setIsImageLoaded(false);
    }, [imgSrc]);
    const canvasStyle = __spreadValues({ height: size3, width: size3 }, style);
    let img = null;
    if (imgSrc != null) {
      img = /* @__PURE__ */ import_react67.default.createElement("img", {
        src: imgSrc,
        key: imgSrc,
        style: { display: "none" },
        onLoad: () => {
          setIsImageLoaded(true);
        },
        ref: _image
      });
    }
    return /* @__PURE__ */ import_react67.default.createElement(import_react67.default.Fragment, null, /* @__PURE__ */ import_react67.default.createElement("canvas", __spreadValues({
      style: canvasStyle,
      height: size3,
      width: size3,
      ref: _canvas
    }, otherProps)), img);
  }
  function QRCodeSVG(props) {
    const _a5 = props, {
      value,
      size: size3 = DEFAULT_SIZE,
      level = DEFAULT_LEVEL,
      bgColor = DEFAULT_BGCOLOR,
      fgColor = DEFAULT_FGCOLOR,
      includeMargin = DEFAULT_INCLUDEMARGIN,
      imageSettings
    } = _a5, otherProps = __objRest(_a5, [
      "value",
      "size",
      "level",
      "bgColor",
      "fgColor",
      "includeMargin",
      "imageSettings"
    ]);
    let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();
    const margin2 = includeMargin ? MARGIN_SIZE : 0;
    const numCells = cells.length + margin2 * 2;
    const calculatedImageSettings = getImageSettings(cells, size3, includeMargin, imageSettings);
    let image2 = null;
    if (imageSettings != null && calculatedImageSettings != null) {
      if (calculatedImageSettings.excavation != null) {
        cells = excavateModules(cells, calculatedImageSettings.excavation);
      }
      image2 = /* @__PURE__ */ import_react67.default.createElement("image", {
        xlinkHref: imageSettings.src,
        height: calculatedImageSettings.h,
        width: calculatedImageSettings.w,
        x: calculatedImageSettings.x + margin2,
        y: calculatedImageSettings.y + margin2,
        preserveAspectRatio: "none"
      });
    }
    const fgPath = generatePath2(cells, margin2);
    return /* @__PURE__ */ import_react67.default.createElement("svg", __spreadValues({
      height: size3,
      width: size3,
      viewBox: `0 0 ${numCells} ${numCells}`
    }, otherProps), /* @__PURE__ */ import_react67.default.createElement("path", {
      fill: bgColor,
      d: `M0,0 h${numCells}v${numCells}H0z`,
      shapeRendering: "crispEdges"
    }), /* @__PURE__ */ import_react67.default.createElement("path", {
      fill: fgColor,
      d: fgPath,
      shapeRendering: "crispEdges"
    }), image2);
  }
  var QRCode = (props) => {
    const _a5 = props, { renderAs } = _a5, otherProps = __objRest(_a5, ["renderAs"]);
    if (renderAs === "svg") {
      return /* @__PURE__ */ import_react67.default.createElement(QRCodeSVG, __spreadValues({}, otherProps));
    }
    return /* @__PURE__ */ import_react67.default.createElement(QRCodeCanvas, __spreadValues({}, otherProps));
  };

  // src/components/QRCode.tsx
  var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
  var QRCodeGenerator = ({ text: text4, size: size3 = 128 }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(QRCode, { value: text4, size: size3 });
  };
  var QRCode_default = QRCodeGenerator;

  // src/components/Content/ContentCard.tsx
  var import_react72 = __toESM(require_react(), 1);

  // src/components/Content/FilteredTagInput.tsx
  var React237 = __toESM(require_react(), 1);

  // ../node_modules/@uidotdev/usehooks/index.js
  var React236 = __toESM(require_react(), 1);
  function useDebounce(value, delay) {
    const [debouncedValue, setDebouncedValue] = React236.useState(value);
    React236.useEffect(() => {
      const handler = setTimeout(() => {
        setDebouncedValue(value);
      }, delay);
      return () => {
        clearTimeout(handler);
      };
    }, [value, delay]);
    return debouncedValue;
  }

  // src/components/Content/FilteredTagInput.tsx
  var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
  var useStyles27 = makeStyles2({
    root: {
      // Stack the label above the field with a gap
      display: "grid",
      gridTemplateRows: "repeat(1fr)",
      justifyItems: "start",
      ...shorthands.gap("2px"),
      maxWidth: "400px"
    }
  });
  function flattenTag(tag) {
    let names = [tag.name];
    for (let subTag of tag.subTags) {
      names = names.concat(`${tag.name}/${flattenTag(subTag)}`);
    }
    return names;
  }
  function normalizeTags(tags) {
    let names = [];
    for (let tag of tags) {
      names = names.concat(flattenTag(tag));
    }
    return names;
  }
  var FilteredTagInput = ({
    selectedTag,
    setSelectedTag,
    onAddTag
  }) => {
    const { tags, addFilteredTag } = useProjectContext();
    const normalizedTags = normalizeTags(tags);
    const filterOptions = (tag) => {
      return normalizedTags.filter(
        (option) => option.toLowerCase().indexOf(tag.toLowerCase()) === 0
      );
    };
    const [matchingOptions, setMatchingOptions] = React237.useState(filterOptions(selectedTag));
    const onChange = (tag) => {
      setMatchingOptions(filterOptions(tag));
      setSelectedTag(tag);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(Stack, { horizontal: true, children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(TagInput, { value: selectedTag, onChange, matchingOptions }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Button, { onClick: () => onAddTag(selectedTag), icon: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(AddSquare24Regular, {}), "aria-label": "add-tag" })
    ] });
  };
  var TagInput = ({
    onChange,
    value,
    matchingOptions
  }) => {
    const styles4 = useStyles27();
    const debouncedOptions = useDebounce(matchingOptions, 300);
    const onBoxChange = (event) => {
      const value2 = event.target.value.trim();
      onChange(value2);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: styles4.root, children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
      Combobox,
      {
        value,
        placeholder: "search by tag...",
        onChange: onBoxChange,
        onOptionSelect: (e3, option) => {
          option.optionValue && onChange(option.optionValue);
        },
        children: [
          debouncedOptions.map((option) => /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Option, { value: option, children: option }, option)),
          debouncedOptions.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Option, { text: "", children: "No results found" }, "no-results") : null
        ]
      }
    ) });
  };

  // ../node_modules/react-markdown/lib/uri-transformer.js
  var protocols = ["http", "https", "mailto", "tel"];
  function uriTransformer(uri) {
    const url = (uri || "").trim();
    const first2 = url.charAt(0);
    if (first2 === "#" || first2 === "/") {
      return url;
    }
    const colon = url.indexOf(":");
    if (colon === -1) {
      return url;
    }
    let index2 = -1;
    while (++index2 < protocols.length) {
      const protocol = protocols[index2];
      if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
        return url;
      }
    }
    index2 = url.indexOf("?");
    if (index2 !== -1 && colon > index2) {
      return url;
    }
    index2 = url.indexOf("#");
    if (index2 !== -1 && colon > index2) {
      return url;
    }
    return "javascript:void(0)";
  }

  // ../node_modules/react-markdown/lib/react-markdown.js
  var import_react70 = __toESM(require_react(), 1);

  // ../node_modules/vfile/lib/index.js
  var import_is_buffer = __toESM(require_is_buffer(), 1);

  // ../node_modules/unist-util-stringify-position/lib/index.js
  function stringifyPosition(value) {
    if (!value || typeof value !== "object") {
      return "";
    }
    if ("position" in value || "type" in value) {
      return position2(value.position);
    }
    if ("start" in value || "end" in value) {
      return position2(value);
    }
    if ("line" in value || "column" in value) {
      return point3(value);
    }
    return "";
  }
  function point3(point6) {
    return index(point6 && point6.line) + ":" + index(point6 && point6.column);
  }
  function position2(pos) {
    return point3(pos && pos.start) + "-" + point3(pos && pos.end);
  }
  function index(value) {
    return value && typeof value === "number" ? value : 1;
  }

  // ../node_modules/vfile-message/lib/index.js
  var VFileMessage = class extends Error {
    /**
     * Create a message for `reason` at `place` from `origin`.
     *
     * When an error is passed in as `reason`, the `stack` is copied.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     *
     *   > 👉 **Note**: you should use markdown.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns
     *   Instance of `VFileMessage`.
     */
    // To do: next major: expose `undefined` everywhere instead of `null`.
    constructor(reason, place, origin) {
      const parts = [null, null];
      let position4 = {
        // @ts-expect-error: we always follows the structure of `position`.
        start: { line: null, column: null },
        // @ts-expect-error: "
        end: { line: null, column: null }
      };
      super();
      if (typeof place === "string") {
        origin = place;
        place = void 0;
      }
      if (typeof origin === "string") {
        const index2 = origin.indexOf(":");
        if (index2 === -1) {
          parts[1] = origin;
        } else {
          parts[0] = origin.slice(0, index2);
          parts[1] = origin.slice(index2 + 1);
        }
      }
      if (place) {
        if ("type" in place || "position" in place) {
          if (place.position) {
            position4 = place.position;
          }
        } else if ("start" in place || "end" in place) {
          position4 = place;
        } else if ("line" in place || "column" in place) {
          position4.start = place;
        }
      }
      this.name = stringifyPosition(place) || "1:1";
      this.message = typeof reason === "object" ? reason.message : reason;
      this.stack = "";
      if (typeof reason === "object" && reason.stack) {
        this.stack = reason.stack;
      }
      this.reason = this.message;
      this.fatal;
      this.line = position4.start.line;
      this.column = position4.start.column;
      this.position = position4;
      this.source = parts[0];
      this.ruleId = parts[1];
      this.file;
      this.actual;
      this.expected;
      this.url;
      this.note;
    }
  };
  VFileMessage.prototype.file = "";
  VFileMessage.prototype.name = "";
  VFileMessage.prototype.reason = "";
  VFileMessage.prototype.message = "";
  VFileMessage.prototype.stack = "";
  VFileMessage.prototype.fatal = null;
  VFileMessage.prototype.column = null;
  VFileMessage.prototype.line = null;
  VFileMessage.prototype.source = null;
  VFileMessage.prototype.ruleId = null;
  VFileMessage.prototype.position = null;

  // ../node_modules/vfile/lib/minpath.browser.js
  var path3 = { basename, dirname, extname, join, sep: "/" };
  function basename(path4, ext) {
    if (ext !== void 0 && typeof ext !== "string") {
      throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path4);
    let start2 = 0;
    let end2 = -1;
    let index2 = path4.length;
    let seenNonSlash;
    if (ext === void 0 || ext.length === 0 || ext.length > path4.length) {
      while (index2--) {
        if (path4.charCodeAt(index2) === 47) {
          if (seenNonSlash) {
            start2 = index2 + 1;
            break;
          }
        } else if (end2 < 0) {
          seenNonSlash = true;
          end2 = index2 + 1;
        }
      }
      return end2 < 0 ? "" : path4.slice(start2, end2);
    }
    if (ext === path4) {
      return "";
    }
    let firstNonSlashEnd = -1;
    let extIndex = ext.length - 1;
    while (index2--) {
      if (path4.charCodeAt(index2) === 47) {
        if (seenNonSlash) {
          start2 = index2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd < 0) {
          seenNonSlash = true;
          firstNonSlashEnd = index2 + 1;
        }
        if (extIndex > -1) {
          if (path4.charCodeAt(index2) === ext.charCodeAt(extIndex--)) {
            if (extIndex < 0) {
              end2 = index2;
            }
          } else {
            extIndex = -1;
            end2 = firstNonSlashEnd;
          }
        }
      }
    }
    if (start2 === end2) {
      end2 = firstNonSlashEnd;
    } else if (end2 < 0) {
      end2 = path4.length;
    }
    return path4.slice(start2, end2);
  }
  function dirname(path4) {
    assertPath(path4);
    if (path4.length === 0) {
      return ".";
    }
    let end2 = -1;
    let index2 = path4.length;
    let unmatchedSlash;
    while (--index2) {
      if (path4.charCodeAt(index2) === 47) {
        if (unmatchedSlash) {
          end2 = index2;
          break;
        }
      } else if (!unmatchedSlash) {
        unmatchedSlash = true;
      }
    }
    return end2 < 0 ? path4.charCodeAt(0) === 47 ? "/" : "." : end2 === 1 && path4.charCodeAt(0) === 47 ? "//" : path4.slice(0, end2);
  }
  function extname(path4) {
    assertPath(path4);
    let index2 = path4.length;
    let end2 = -1;
    let startPart = 0;
    let startDot = -1;
    let preDotState = 0;
    let unmatchedSlash;
    while (index2--) {
      const code2 = path4.charCodeAt(index2);
      if (code2 === 47) {
        if (unmatchedSlash) {
          startPart = index2 + 1;
          break;
        }
        continue;
      }
      if (end2 < 0) {
        unmatchedSlash = true;
        end2 = index2 + 1;
      }
      if (code2 === 46) {
        if (startDot < 0) {
          startDot = index2;
        } else if (preDotState !== 1) {
          preDotState = 1;
        }
      } else if (startDot > -1) {
        preDotState = -1;
      }
    }
    if (startDot < 0 || end2 < 0 || // We saw a non-dot character immediately before the dot.
    preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
    preDotState === 1 && startDot === end2 - 1 && startDot === startPart + 1) {
      return "";
    }
    return path4.slice(startDot, end2);
  }
  function join(...segments) {
    let index2 = -1;
    let joined;
    while (++index2 < segments.length) {
      assertPath(segments[index2]);
      if (segments[index2]) {
        joined = joined === void 0 ? segments[index2] : joined + "/" + segments[index2];
      }
    }
    return joined === void 0 ? "." : normalize5(joined);
  }
  function normalize5(path4) {
    assertPath(path4);
    const absolute = path4.charCodeAt(0) === 47;
    let value = normalizeString(path4, !absolute);
    if (value.length === 0 && !absolute) {
      value = ".";
    }
    if (value.length > 0 && path4.charCodeAt(path4.length - 1) === 47) {
      value += "/";
    }
    return absolute ? "/" + value : value;
  }
  function normalizeString(path4, allowAboveRoot) {
    let result = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let index2 = -1;
    let code2;
    let lastSlashIndex;
    while (++index2 <= path4.length) {
      if (index2 < path4.length) {
        code2 = path4.charCodeAt(index2);
      } else if (code2 === 47) {
        break;
      } else {
        code2 = 47;
      }
      if (code2 === 47) {
        if (lastSlash === index2 - 1 || dots === 1) {
        } else if (lastSlash !== index2 - 1 && dots === 2) {
          if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 || result.charCodeAt(result.length - 2) !== 46) {
            if (result.length > 2) {
              lastSlashIndex = result.lastIndexOf("/");
              if (lastSlashIndex !== result.length - 1) {
                if (lastSlashIndex < 0) {
                  result = "";
                  lastSegmentLength = 0;
                } else {
                  result = result.slice(0, lastSlashIndex);
                  lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
                }
                lastSlash = index2;
                dots = 0;
                continue;
              }
            } else if (result.length > 0) {
              result = "";
              lastSegmentLength = 0;
              lastSlash = index2;
              dots = 0;
              continue;
            }
          }
          if (allowAboveRoot) {
            result = result.length > 0 ? result + "/.." : "..";
            lastSegmentLength = 2;
          }
        } else {
          if (result.length > 0) {
            result += "/" + path4.slice(lastSlash + 1, index2);
          } else {
            result = path4.slice(lastSlash + 1, index2);
          }
          lastSegmentLength = index2 - lastSlash - 1;
        }
        lastSlash = index2;
        dots = 0;
      } else if (code2 === 46 && dots > -1) {
        dots++;
      } else {
        dots = -1;
      }
    }
    return result;
  }
  function assertPath(path4) {
    if (typeof path4 !== "string") {
      throw new TypeError(
        "Path must be a string. Received " + JSON.stringify(path4)
      );
    }
  }

  // ../node_modules/vfile/lib/minproc.browser.js
  var proc = { cwd };
  function cwd() {
    return "/";
  }

  // ../node_modules/vfile/lib/minurl.shared.js
  function isUrl(fileUrlOrPath) {
    return fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && // @ts-expect-error: indexable.
    fileUrlOrPath.href && // @ts-expect-error: indexable.
    fileUrlOrPath.origin;
  }

  // ../node_modules/vfile/lib/minurl.browser.js
  function urlToPath(path4) {
    if (typeof path4 === "string") {
      path4 = new URL(path4);
    } else if (!isUrl(path4)) {
      const error = new TypeError(
        'The "path" argument must be of type string or an instance of URL. Received `' + path4 + "`"
      );
      error.code = "ERR_INVALID_ARG_TYPE";
      throw error;
    }
    if (path4.protocol !== "file:") {
      const error = new TypeError("The URL must be of scheme file");
      error.code = "ERR_INVALID_URL_SCHEME";
      throw error;
    }
    return getPathFromURLPosix(path4);
  }
  function getPathFromURLPosix(url) {
    if (url.hostname !== "") {
      const error = new TypeError(
        'File URL host must be "localhost" or empty on darwin'
      );
      error.code = "ERR_INVALID_FILE_URL_HOST";
      throw error;
    }
    const pathname = url.pathname;
    let index2 = -1;
    while (++index2 < pathname.length) {
      if (pathname.charCodeAt(index2) === 37 && pathname.charCodeAt(index2 + 1) === 50) {
        const third = pathname.charCodeAt(index2 + 2);
        if (third === 70 || third === 102) {
          const error = new TypeError(
            "File URL path must not include encoded / characters"
          );
          error.code = "ERR_INVALID_FILE_URL_PATH";
          throw error;
        }
      }
    }
    return decodeURIComponent(pathname);
  }

  // ../node_modules/vfile/lib/index.js
  var order = ["history", "path", "basename", "stem", "extname", "dirname"];
  var VFile = class {
    /**
     * Create a new virtual file.
     *
     * `options` is treated as:
     *
     * *   `string` or `Buffer` — `{value: options}`
     * *   `URL` — `{path: options}`
     * *   `VFile` — shallow copies its data over to the new file
     * *   `object` — all fields are shallow copied over to the new file
     *
     * Path related fields are set in the following order (least specific to
     * most specific): `history`, `path`, `basename`, `stem`, `extname`,
     * `dirname`.
     *
     * You cannot set `dirname` or `extname` without setting either `history`,
     * `path`, `basename`, or `stem` too.
     *
     * @param {Compatible | null | undefined} [value]
     *   File value.
     * @returns
     *   New instance.
     */
    constructor(value) {
      let options;
      if (!value) {
        options = {};
      } else if (typeof value === "string" || buffer(value)) {
        options = { value };
      } else if (isUrl(value)) {
        options = { path: value };
      } else {
        options = value;
      }
      this.data = {};
      this.messages = [];
      this.history = [];
      this.cwd = proc.cwd();
      this.value;
      this.stored;
      this.result;
      this.map;
      let index2 = -1;
      while (++index2 < order.length) {
        const prop2 = order[index2];
        if (prop2 in options && options[prop2] !== void 0 && options[prop2] !== null) {
          this[prop2] = prop2 === "history" ? [...options[prop2]] : options[prop2];
        }
      }
      let prop;
      for (prop in options) {
        if (!order.includes(prop)) {
          this[prop] = options[prop];
        }
      }
    }
    /**
     * Get the full path (example: `'~/index.min.js'`).
     *
     * @returns {string}
     */
    get path() {
      return this.history[this.history.length - 1];
    }
    /**
     * Set the full path (example: `'~/index.min.js'`).
     *
     * Cannot be nullified.
     * You can set a file URL (a `URL` object with a `file:` protocol) which will
     * be turned into a path with `url.fileURLToPath`.
     *
     * @param {string | URL} path
     */
    set path(path4) {
      if (isUrl(path4)) {
        path4 = urlToPath(path4);
      }
      assertNonEmpty(path4, "path");
      if (this.path !== path4) {
        this.history.push(path4);
      }
    }
    /**
     * Get the parent path (example: `'~'`).
     */
    get dirname() {
      return typeof this.path === "string" ? path3.dirname(this.path) : void 0;
    }
    /**
     * Set the parent path (example: `'~'`).
     *
     * Cannot be set if there’s no `path` yet.
     */
    set dirname(dirname3) {
      assertPath2(this.basename, "dirname");
      this.path = path3.join(dirname3 || "", this.basename);
    }
    /**
     * Get the basename (including extname) (example: `'index.min.js'`).
     */
    get basename() {
      return typeof this.path === "string" ? path3.basename(this.path) : void 0;
    }
    /**
     * Set basename (including extname) (`'index.min.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     */
    set basename(basename3) {
      assertNonEmpty(basename3, "basename");
      assertPart(basename3, "basename");
      this.path = path3.join(this.dirname || "", basename3);
    }
    /**
     * Get the extname (including dot) (example: `'.js'`).
     */
    get extname() {
      return typeof this.path === "string" ? path3.extname(this.path) : void 0;
    }
    /**
     * Set the extname (including dot) (example: `'.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be set if there’s no `path` yet.
     */
    set extname(extname3) {
      assertPart(extname3, "extname");
      assertPath2(this.dirname, "extname");
      if (extname3) {
        if (extname3.charCodeAt(0) !== 46) {
          throw new Error("`extname` must start with `.`");
        }
        if (extname3.includes(".", 1)) {
          throw new Error("`extname` cannot contain multiple dots");
        }
      }
      this.path = path3.join(this.dirname, this.stem + (extname3 || ""));
    }
    /**
     * Get the stem (basename w/o extname) (example: `'index.min'`).
     */
    get stem() {
      return typeof this.path === "string" ? path3.basename(this.path, this.extname) : void 0;
    }
    /**
     * Set the stem (basename w/o extname) (example: `'index.min'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     */
    set stem(stem) {
      assertNonEmpty(stem, "stem");
      assertPart(stem, "stem");
      this.path = path3.join(this.dirname || "", stem + (this.extname || ""));
    }
    /**
     * Serialize the file.
     *
     * @param {BufferEncoding | null | undefined} [encoding='utf8']
     *   Character encoding to understand `value` as when it’s a `Buffer`
     *   (default: `'utf8'`).
     * @returns {string}
     *   Serialized file.
     */
    toString(encoding) {
      return (this.value || "").toString(encoding || void 0);
    }
    /**
     * Create a warning message associated with the file.
     *
     * Its `fatal` is set to `false` and `file` is set to the current file path.
     * Its added to `file.messages`.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    message(reason, place, origin) {
      const message = new VFileMessage(reason, place, origin);
      if (this.path) {
        message.name = this.path + ":" + message.name;
        message.file = this.path;
      }
      message.fatal = false;
      this.messages.push(message);
      return message;
    }
    /**
     * Create an info message associated with the file.
     *
     * Its `fatal` is set to `null` and `file` is set to the current file path.
     * Its added to `file.messages`.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    info(reason, place, origin) {
      const message = this.message(reason, place, origin);
      message.fatal = null;
      return message;
    }
    /**
     * Create a fatal error associated with the file.
     *
     * Its `fatal` is set to `true` and `file` is set to the current file path.
     * Its added to `file.messages`.
     *
     * > 👉 **Note**: a fatal error means that a file is no longer processable.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {never}
     *   Message.
     * @throws {VFileMessage}
     *   Message.
     */
    fail(reason, place, origin) {
      const message = this.message(reason, place, origin);
      message.fatal = true;
      throw message;
    }
  };
  function assertPart(part, name) {
    if (part && part.includes(path3.sep)) {
      throw new Error(
        "`" + name + "` cannot be a path: did not expect `" + path3.sep + "`"
      );
    }
  }
  function assertNonEmpty(part, name) {
    if (!part) {
      throw new Error("`" + name + "` cannot be empty");
    }
  }
  function assertPath2(path4, name) {
    if (!path4) {
      throw new Error("Setting `" + name + "` requires `path` to be set too");
    }
  }
  function buffer(value) {
    return (0, import_is_buffer.default)(value);
  }

  // ../node_modules/bail/index.js
  function bail(error) {
    if (error) {
      throw error;
    }
  }

  // ../node_modules/unified/lib/index.js
  var import_is_buffer2 = __toESM(require_is_buffer(), 1);
  var import_extend = __toESM(require_extend(), 1);

  // ../node_modules/is-plain-obj/index.js
  function isPlainObject3(value) {
    if (typeof value !== "object" || value === null) {
      return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
  }

  // ../node_modules/trough/index.js
  function trough() {
    const fns = [];
    const pipeline = { run, use };
    return pipeline;
    function run(...values2) {
      let middlewareIndex = -1;
      const callback = values2.pop();
      if (typeof callback !== "function") {
        throw new TypeError("Expected function as last argument, not " + callback);
      }
      next4(null, ...values2);
      function next4(error, ...output) {
        const fn2 = fns[++middlewareIndex];
        let index2 = -1;
        if (error) {
          callback(error);
          return;
        }
        while (++index2 < values2.length) {
          if (output[index2] === null || output[index2] === void 0) {
            output[index2] = values2[index2];
          }
        }
        values2 = output;
        if (fn2) {
          wrap(fn2, next4)(...output);
        } else {
          callback(null, ...output);
        }
      }
    }
    function use(middelware) {
      if (typeof middelware !== "function") {
        throw new TypeError(
          "Expected `middelware` to be a function, not " + middelware
        );
      }
      fns.push(middelware);
      return pipeline;
    }
  }
  function wrap(middleware2, callback) {
    let called;
    return wrapped;
    function wrapped(...parameters) {
      const fnExpectsCallback = middleware2.length > parameters.length;
      let result;
      if (fnExpectsCallback) {
        parameters.push(done);
      }
      try {
        result = middleware2.apply(this, parameters);
      } catch (error) {
        const exception = (
          /** @type {Error} */
          error
        );
        if (fnExpectsCallback && called) {
          throw exception;
        }
        return done(exception);
      }
      if (!fnExpectsCallback) {
        if (result instanceof Promise) {
          result.then(then, done);
        } else if (result instanceof Error) {
          done(result);
        } else {
          then(result);
        }
      }
    }
    function done(error, ...output) {
      if (!called) {
        called = true;
        callback(error, ...output);
      }
    }
    function then(value) {
      done(null, value);
    }
  }

  // ../node_modules/unified/lib/index.js
  var unified = base().freeze();
  var own = {}.hasOwnProperty;
  function base() {
    const transformers = trough();
    const attachers = [];
    let namespace = {};
    let frozen;
    let freezeIndex = -1;
    processor.data = data;
    processor.Parser = void 0;
    processor.Compiler = void 0;
    processor.freeze = freeze2;
    processor.attachers = attachers;
    processor.use = use;
    processor.parse = parse3;
    processor.stringify = stringify4;
    processor.run = run;
    processor.runSync = runSync;
    processor.process = process3;
    processor.processSync = processSync;
    return processor;
    function processor() {
      const destination = base();
      let index2 = -1;
      while (++index2 < attachers.length) {
        destination.use(...attachers[index2]);
      }
      destination.data((0, import_extend.default)(true, {}, namespace));
      return destination;
    }
    function data(key, value) {
      if (typeof key === "string") {
        if (arguments.length === 2) {
          assertUnfrozen("data", frozen);
          namespace[key] = value;
          return processor;
        }
        return own.call(namespace, key) && namespace[key] || null;
      }
      if (key) {
        assertUnfrozen("data", frozen);
        namespace = key;
        return processor;
      }
      return namespace;
    }
    function freeze2() {
      if (frozen) {
        return processor;
      }
      while (++freezeIndex < attachers.length) {
        const [attacher, ...options] = attachers[freezeIndex];
        if (options[0] === false) {
          continue;
        }
        if (options[0] === true) {
          options[0] = void 0;
        }
        const transformer = attacher.call(processor, ...options);
        if (typeof transformer === "function") {
          transformers.use(transformer);
        }
      }
      frozen = true;
      freezeIndex = Number.POSITIVE_INFINITY;
      return processor;
    }
    function use(value, ...options) {
      let settings;
      assertUnfrozen("use", frozen);
      if (value === null || value === void 0) {
      } else if (typeof value === "function") {
        addPlugin(value, ...options);
      } else if (typeof value === "object") {
        if (Array.isArray(value)) {
          addList(value);
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value + "`");
      }
      if (settings) {
        namespace.settings = Object.assign(namespace.settings || {}, settings);
      }
      return processor;
      function add(value2) {
        if (typeof value2 === "function") {
          addPlugin(value2);
        } else if (typeof value2 === "object") {
          if (Array.isArray(value2)) {
            const [plugin, ...options2] = value2;
            addPlugin(plugin, ...options2);
          } else {
            addPreset(value2);
          }
        } else {
          throw new TypeError("Expected usable value, not `" + value2 + "`");
        }
      }
      function addPreset(result) {
        addList(result.plugins);
        if (result.settings) {
          settings = Object.assign(settings || {}, result.settings);
        }
      }
      function addList(plugins) {
        let index2 = -1;
        if (plugins === null || plugins === void 0) {
        } else if (Array.isArray(plugins)) {
          while (++index2 < plugins.length) {
            const thing = plugins[index2];
            add(thing);
          }
        } else {
          throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
        }
      }
      function addPlugin(plugin, value2) {
        let index2 = -1;
        let entry;
        while (++index2 < attachers.length) {
          if (attachers[index2][0] === plugin) {
            entry = attachers[index2];
            break;
          }
        }
        if (entry) {
          if (isPlainObject3(entry[1]) && isPlainObject3(value2)) {
            value2 = (0, import_extend.default)(true, entry[1], value2);
          }
          entry[1] = value2;
        } else {
          attachers.push([...arguments]);
        }
      }
    }
    function parse3(doc) {
      processor.freeze();
      const file = vfile(doc);
      const Parser = processor.Parser;
      assertParser("parse", Parser);
      if (newable(Parser, "parse")) {
        return new Parser(String(file), file).parse();
      }
      return Parser(String(file), file);
    }
    function stringify4(node5, doc) {
      processor.freeze();
      const file = vfile(doc);
      const Compiler = processor.Compiler;
      assertCompiler("stringify", Compiler);
      assertNode(node5);
      if (newable(Compiler, "compile")) {
        return new Compiler(node5, file).compile();
      }
      return Compiler(node5, file);
    }
    function run(node5, doc, callback) {
      assertNode(node5);
      processor.freeze();
      if (!callback && typeof doc === "function") {
        callback = doc;
        doc = void 0;
      }
      if (!callback) {
        return new Promise(executor);
      }
      executor(null, callback);
      function executor(resolve2, reject) {
        transformers.run(node5, vfile(doc), done);
        function done(error, tree, file) {
          tree = tree || node5;
          if (error) {
            reject(error);
          } else if (resolve2) {
            resolve2(tree);
          } else {
            callback(null, tree, file);
          }
        }
      }
    }
    function runSync(node5, file) {
      let result;
      let complete;
      processor.run(node5, file, done);
      assertDone("runSync", "run", complete);
      return result;
      function done(error, tree) {
        bail(error);
        result = tree;
        complete = true;
      }
    }
    function process3(doc, callback) {
      processor.freeze();
      assertParser("process", processor.Parser);
      assertCompiler("process", processor.Compiler);
      if (!callback) {
        return new Promise(executor);
      }
      executor(null, callback);
      function executor(resolve2, reject) {
        const file = vfile(doc);
        processor.run(processor.parse(file), file, (error, tree, file2) => {
          if (error || !tree || !file2) {
            done(error);
          } else {
            const result = processor.stringify(tree, file2);
            if (result === void 0 || result === null) {
            } else if (looksLikeAVFileValue(result)) {
              file2.value = result;
            } else {
              file2.result = result;
            }
            done(error, file2);
          }
        });
        function done(error, file2) {
          if (error || !file2) {
            reject(error);
          } else if (resolve2) {
            resolve2(file2);
          } else {
            callback(null, file2);
          }
        }
      }
    }
    function processSync(doc) {
      let complete;
      processor.freeze();
      assertParser("processSync", processor.Parser);
      assertCompiler("processSync", processor.Compiler);
      const file = vfile(doc);
      processor.process(file, done);
      assertDone("processSync", "process", complete);
      return file;
      function done(error) {
        complete = true;
        bail(error);
      }
    }
  }
  function newable(value, name) {
    return typeof value === "function" && // Prototypes do exist.
    // type-coverage:ignore-next-line
    value.prototype && // A function with keys in its prototype is probably a constructor.
    // Classes’ prototype methods are not enumerable, so we check if some value
    // exists in the prototype.
    // type-coverage:ignore-next-line
    (keys(value.prototype) || name in value.prototype);
  }
  function keys(value) {
    let key;
    for (key in value) {
      if (own.call(value, key)) {
        return true;
      }
    }
    return false;
  }
  function assertParser(name, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name + "` without `Parser`");
    }
  }
  function assertCompiler(name, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name + "` without `Compiler`");
    }
  }
  function assertUnfrozen(name, frozen) {
    if (frozen) {
      throw new Error(
        "Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
      );
    }
  }
  function assertNode(node5) {
    if (!isPlainObject3(node5) || typeof node5.type !== "string") {
      throw new TypeError("Expected node, got `" + node5 + "`");
    }
  }
  function assertDone(name, asyncName, complete) {
    if (!complete) {
      throw new Error(
        "`" + name + "` finished async. Use `" + asyncName + "` instead"
      );
    }
  }
  function vfile(value) {
    return looksLikeAVFile(value) ? value : new VFile(value);
  }
  function looksLikeAVFile(value) {
    return Boolean(
      value && typeof value === "object" && "message" in value && "messages" in value
    );
  }
  function looksLikeAVFileValue(value) {
    return typeof value === "string" || (0, import_is_buffer2.default)(value);
  }

  // ../node_modules/mdast-util-to-string/lib/index.js
  var emptyOptions = {};
  function toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
    const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
    return one(value, includeImageAlt, includeHtml);
  }
  function one(value, includeImageAlt, includeHtml) {
    if (node4(value)) {
      if ("value" in value) {
        return value.type === "html" && !includeHtml ? "" : value.value;
      }
      if (includeImageAlt && "alt" in value && value.alt) {
        return value.alt;
      }
      if ("children" in value) {
        return all(value.children, includeImageAlt, includeHtml);
      }
    }
    if (Array.isArray(value)) {
      return all(value, includeImageAlt, includeHtml);
    }
    return "";
  }
  function all(values2, includeImageAlt, includeHtml) {
    const result = [];
    let index2 = -1;
    while (++index2 < values2.length) {
      result[index2] = one(values2[index2], includeImageAlt, includeHtml);
    }
    return result.join("");
  }
  function node4(value) {
    return Boolean(value && typeof value === "object");
  }

  // ../node_modules/micromark-util-chunked/index.js
  function splice(list3, start2, remove, items) {
    const end2 = list3.length;
    let chunkStart = 0;
    let parameters;
    if (start2 < 0) {
      start2 = -start2 > end2 ? 0 : end2 + start2;
    } else {
      start2 = start2 > end2 ? end2 : start2;
    }
    remove = remove > 0 ? remove : 0;
    if (items.length < 1e4) {
      parameters = Array.from(items);
      parameters.unshift(start2, remove);
      list3.splice(...parameters);
    } else {
      if (remove)
        list3.splice(start2, remove);
      while (chunkStart < items.length) {
        parameters = items.slice(chunkStart, chunkStart + 1e4);
        parameters.unshift(start2, 0);
        list3.splice(...parameters);
        chunkStart += 1e4;
        start2 += 1e4;
      }
    }
  }
  function push(list3, items) {
    if (list3.length > 0) {
      splice(list3, list3.length, 0, items);
      return list3;
    }
    return items;
  }

  // ../node_modules/micromark-util-combine-extensions/index.js
  var hasOwnProperty = {}.hasOwnProperty;
  function combineExtensions(extensions) {
    const all3 = {};
    let index2 = -1;
    while (++index2 < extensions.length) {
      syntaxExtension(all3, extensions[index2]);
    }
    return all3;
  }
  function syntaxExtension(all3, extension2) {
    let hook;
    for (hook in extension2) {
      const maybe = hasOwnProperty.call(all3, hook) ? all3[hook] : void 0;
      const left = maybe || (all3[hook] = {});
      const right = extension2[hook];
      let code2;
      if (right) {
        for (code2 in right) {
          if (!hasOwnProperty.call(left, code2))
            left[code2] = [];
          const value = right[code2];
          constructs(
            // @ts-expect-error Looks like a list.
            left[code2],
            Array.isArray(value) ? value : value ? [value] : []
          );
        }
      }
    }
  }
  function constructs(existing, list3) {
    let index2 = -1;
    const before3 = [];
    while (++index2 < list3.length) {
      ;
      (list3[index2].add === "after" ? existing : before3).push(list3[index2]);
    }
    splice(existing, 0, 0, before3);
  }

  // ../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js
  var unicodePunctuationRegex = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

  // ../node_modules/micromark-util-character/index.js
  var asciiAlpha = regexCheck(/[A-Za-z]/);
  var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
  var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
  function asciiControl(code2) {
    return (
      // Special whitespace codes (which have negative values), C0 and Control
      // character DEL
      code2 !== null && (code2 < 32 || code2 === 127)
    );
  }
  var asciiDigit = regexCheck(/\d/);
  var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
  var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
  function markdownLineEnding(code2) {
    return code2 !== null && code2 < -2;
  }
  function markdownLineEndingOrSpace(code2) {
    return code2 !== null && (code2 < 0 || code2 === 32);
  }
  function markdownSpace(code2) {
    return code2 === -2 || code2 === -1 || code2 === 32;
  }
  var unicodePunctuation = regexCheck(unicodePunctuationRegex);
  var unicodeWhitespace = regexCheck(/\s/);
  function regexCheck(regex2) {
    return check;
    function check(code2) {
      return code2 !== null && regex2.test(String.fromCharCode(code2));
    }
  }

  // ../node_modules/micromark-factory-space/index.js
  function factorySpace(effects, ok2, type, max2) {
    const limit = max2 ? max2 - 1 : Number.POSITIVE_INFINITY;
    let size3 = 0;
    return start2;
    function start2(code2) {
      if (markdownSpace(code2)) {
        effects.enter(type);
        return prefix2(code2);
      }
      return ok2(code2);
    }
    function prefix2(code2) {
      if (markdownSpace(code2) && size3++ < limit) {
        effects.consume(code2);
        return prefix2;
      }
      effects.exit(type);
      return ok2(code2);
    }
  }

  // ../node_modules/micromark/lib/initialize/content.js
  var content = {
    tokenize: initializeContent
  };
  function initializeContent(effects) {
    const contentStart = effects.attempt(
      this.parser.constructs.contentInitial,
      afterContentStartConstruct,
      paragraphInitial
    );
    let previous4;
    return contentStart;
    function afterContentStartConstruct(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, contentStart, "linePrefix");
    }
    function paragraphInitial(code2) {
      effects.enter("paragraph");
      return lineStart(code2);
    }
    function lineStart(code2) {
      const token2 = effects.enter("chunkText", {
        contentType: "text",
        previous: previous4
      });
      if (previous4) {
        previous4.next = token2;
      }
      previous4 = token2;
      return data(code2);
    }
    function data(code2) {
      if (code2 === null) {
        effects.exit("chunkText");
        effects.exit("paragraph");
        effects.consume(code2);
        return;
      }
      if (markdownLineEnding(code2)) {
        effects.consume(code2);
        effects.exit("chunkText");
        return lineStart;
      }
      effects.consume(code2);
      return data;
    }
  }

  // ../node_modules/micromark/lib/initialize/document.js
  var document2 = {
    tokenize: initializeDocument
  };
  var containerConstruct = {
    tokenize: tokenizeContainer
  };
  function initializeDocument(effects) {
    const self2 = this;
    const stack = [];
    let continued = 0;
    let childFlow;
    let childToken;
    let lineStartOffset;
    return start2;
    function start2(code2) {
      if (continued < stack.length) {
        const item = stack[continued];
        self2.containerState = item[1];
        return effects.attempt(
          item[0].continuation,
          documentContinue,
          checkNewContainers
        )(code2);
      }
      return checkNewContainers(code2);
    }
    function documentContinue(code2) {
      continued++;
      if (self2.containerState._closeFlow) {
        self2.containerState._closeFlow = void 0;
        if (childFlow) {
          closeFlow();
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let point6;
        while (indexBeforeFlow--) {
          if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
            point6 = self2.events[indexBeforeFlow][1].end;
            break;
          }
        }
        exitContainers(continued);
        let index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point6);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits)
        );
        self2.events.length = index2;
        return checkNewContainers(code2);
      }
      return start2(code2);
    }
    function checkNewContainers(code2) {
      if (continued === stack.length) {
        if (!childFlow) {
          return documentContinued(code2);
        }
        if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
          return flowStart(code2);
        }
        self2.interrupt = Boolean(
          childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
        );
      }
      self2.containerState = {};
      return effects.check(
        containerConstruct,
        thereIsANewContainer,
        thereIsNoNewContainer
      )(code2);
    }
    function thereIsANewContainer(code2) {
      if (childFlow)
        closeFlow();
      exitContainers(continued);
      return documentContinued(code2);
    }
    function thereIsNoNewContainer(code2) {
      self2.parser.lazy[self2.now().line] = continued !== stack.length;
      lineStartOffset = self2.now().offset;
      return flowStart(code2);
    }
    function documentContinued(code2) {
      self2.containerState = {};
      return effects.attempt(
        containerConstruct,
        containerContinue,
        flowStart
      )(code2);
    }
    function containerContinue(code2) {
      continued++;
      stack.push([self2.currentConstruct, self2.containerState]);
      return documentContinued(code2);
    }
    function flowStart(code2) {
      if (code2 === null) {
        if (childFlow)
          closeFlow();
        exitContainers(0);
        effects.consume(code2);
        return;
      }
      childFlow = childFlow || self2.parser.flow(self2.now());
      effects.enter("chunkFlow", {
        contentType: "flow",
        previous: childToken,
        _tokenizer: childFlow
      });
      return flowContinue(code2);
    }
    function flowContinue(code2) {
      if (code2 === null) {
        writeToChild(effects.exit("chunkFlow"), true);
        exitContainers(0);
        effects.consume(code2);
        return;
      }
      if (markdownLineEnding(code2)) {
        effects.consume(code2);
        writeToChild(effects.exit("chunkFlow"));
        continued = 0;
        self2.interrupt = void 0;
        return start2;
      }
      effects.consume(code2);
      return flowContinue;
    }
    function writeToChild(token2, eof) {
      const stream = self2.sliceStream(token2);
      if (eof)
        stream.push(null);
      token2.previous = childToken;
      if (childToken)
        childToken.next = token2;
      childToken = token2;
      childFlow.defineSkip(token2.start);
      childFlow.write(stream);
      if (self2.parser.lazy[token2.start.line]) {
        let index2 = childFlow.events.length;
        while (index2--) {
          if (
            // The token starts before the line ending…
            childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…
            (!childFlow.events[index2][1].end || // …or ends after it.
            childFlow.events[index2][1].end.offset > lineStartOffset)
          ) {
            return;
          }
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let seen;
        let point6;
        while (indexBeforeFlow--) {
          if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
            if (seen) {
              point6 = self2.events[indexBeforeFlow][1].end;
              break;
            }
            seen = true;
          }
        }
        exitContainers(continued);
        index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point6);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits)
        );
        self2.events.length = index2;
      }
    }
    function exitContainers(size3) {
      let index2 = stack.length;
      while (index2-- > size3) {
        const entry = stack[index2];
        self2.containerState = entry[1];
        entry[0].exit.call(self2, effects);
      }
      stack.length = size3;
    }
    function closeFlow() {
      childFlow.write([null]);
      childToken = void 0;
      childFlow = void 0;
      self2.containerState._closeFlow = void 0;
    }
  }
  function tokenizeContainer(effects, ok2, nok) {
    return factorySpace(
      effects,
      effects.attempt(this.parser.constructs.document, ok2, nok),
      "linePrefix",
      this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    );
  }

  // ../node_modules/micromark-util-classify-character/index.js
  function classifyCharacter(code2) {
    if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) {
      return 1;
    }
    if (unicodePunctuation(code2)) {
      return 2;
    }
  }

  // ../node_modules/micromark-util-resolve-all/index.js
  function resolveAll(constructs2, events2, context) {
    const called = [];
    let index2 = -1;
    while (++index2 < constructs2.length) {
      const resolve2 = constructs2[index2].resolveAll;
      if (resolve2 && !called.includes(resolve2)) {
        events2 = resolve2(events2, context);
        called.push(resolve2);
      }
    }
    return events2;
  }

  // ../node_modules/micromark-core-commonmark/lib/attention.js
  var attention = {
    name: "attention",
    tokenize: tokenizeAttention,
    resolveAll: resolveAllAttention
  };
  function resolveAllAttention(events2, context) {
    let index2 = -1;
    let open;
    let group;
    let text4;
    let openingSequence;
    let closingSequence;
    let use;
    let nextEvents;
    let offset3;
    while (++index2 < events2.length) {
      if (events2[index2][0] === "enter" && events2[index2][1].type === "attentionSequence" && events2[index2][1]._close) {
        open = index2;
        while (open--) {
          if (events2[open][0] === "exit" && events2[open][1].type === "attentionSequence" && events2[open][1]._open && // If the markers are the same:
          context.sliceSerialize(events2[open][1]).charCodeAt(0) === context.sliceSerialize(events2[index2][1]).charCodeAt(0)) {
            if ((events2[open][1]._close || events2[index2][1]._open) && (events2[index2][1].end.offset - events2[index2][1].start.offset) % 3 && !((events2[open][1].end.offset - events2[open][1].start.offset + events2[index2][1].end.offset - events2[index2][1].start.offset) % 3)) {
              continue;
            }
            use = events2[open][1].end.offset - events2[open][1].start.offset > 1 && events2[index2][1].end.offset - events2[index2][1].start.offset > 1 ? 2 : 1;
            const start2 = Object.assign({}, events2[open][1].end);
            const end2 = Object.assign({}, events2[index2][1].start);
            movePoint(start2, -use);
            movePoint(end2, use);
            openingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start: start2,
              end: Object.assign({}, events2[open][1].end)
            };
            closingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start: Object.assign({}, events2[index2][1].start),
              end: end2
            };
            text4 = {
              type: use > 1 ? "strongText" : "emphasisText",
              start: Object.assign({}, events2[open][1].end),
              end: Object.assign({}, events2[index2][1].start)
            };
            group = {
              type: use > 1 ? "strong" : "emphasis",
              start: Object.assign({}, openingSequence.start),
              end: Object.assign({}, closingSequence.end)
            };
            events2[open][1].end = Object.assign({}, openingSequence.start);
            events2[index2][1].start = Object.assign({}, closingSequence.end);
            nextEvents = [];
            if (events2[open][1].end.offset - events2[open][1].start.offset) {
              nextEvents = push(nextEvents, [
                ["enter", events2[open][1], context],
                ["exit", events2[open][1], context]
              ]);
            }
            nextEvents = push(nextEvents, [
              ["enter", group, context],
              ["enter", openingSequence, context],
              ["exit", openingSequence, context],
              ["enter", text4, context]
            ]);
            nextEvents = push(
              nextEvents,
              resolveAll(
                context.parser.constructs.insideSpan.null,
                events2.slice(open + 1, index2),
                context
              )
            );
            nextEvents = push(nextEvents, [
              ["exit", text4, context],
              ["enter", closingSequence, context],
              ["exit", closingSequence, context],
              ["exit", group, context]
            ]);
            if (events2[index2][1].end.offset - events2[index2][1].start.offset) {
              offset3 = 2;
              nextEvents = push(nextEvents, [
                ["enter", events2[index2][1], context],
                ["exit", events2[index2][1], context]
              ]);
            } else {
              offset3 = 0;
            }
            splice(events2, open - 1, index2 - open + 3, nextEvents);
            index2 = open + nextEvents.length - offset3 - 2;
            break;
          }
        }
      }
    }
    index2 = -1;
    while (++index2 < events2.length) {
      if (events2[index2][1].type === "attentionSequence") {
        events2[index2][1].type = "data";
      }
    }
    return events2;
  }
  function tokenizeAttention(effects, ok2) {
    const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
    const previous4 = this.previous;
    const before3 = classifyCharacter(previous4);
    let marker;
    return start2;
    function start2(code2) {
      marker = code2;
      effects.enter("attentionSequence");
      return inside(code2);
    }
    function inside(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        return inside;
      }
      const token2 = effects.exit("attentionSequence");
      const after3 = classifyCharacter(code2);
      const open = !after3 || after3 === 2 && before3 || attentionMarkers2.includes(code2);
      const close = !before3 || before3 === 2 && after3 || attentionMarkers2.includes(previous4);
      token2._open = Boolean(marker === 42 ? open : open && (before3 || !close));
      token2._close = Boolean(marker === 42 ? close : close && (after3 || !open));
      return ok2(code2);
    }
  }
  function movePoint(point6, offset3) {
    point6.column += offset3;
    point6.offset += offset3;
    point6._bufferIndex += offset3;
  }

  // ../node_modules/micromark-core-commonmark/lib/autolink.js
  var autolink = {
    name: "autolink",
    tokenize: tokenizeAutolink
  };
  function tokenizeAutolink(effects, ok2, nok) {
    let size3 = 0;
    return start2;
    function start2(code2) {
      effects.enter("autolink");
      effects.enter("autolinkMarker");
      effects.consume(code2);
      effects.exit("autolinkMarker");
      effects.enter("autolinkProtocol");
      return open;
    }
    function open(code2) {
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return schemeOrEmailAtext;
      }
      return emailAtext(code2);
    }
    function schemeOrEmailAtext(code2) {
      if (code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) {
        size3 = 1;
        return schemeInsideOrEmailAtext(code2);
      }
      return emailAtext(code2);
    }
    function schemeInsideOrEmailAtext(code2) {
      if (code2 === 58) {
        effects.consume(code2);
        size3 = 0;
        return urlInside;
      }
      if ((code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) && size3++ < 32) {
        effects.consume(code2);
        return schemeInsideOrEmailAtext;
      }
      size3 = 0;
      return emailAtext(code2);
    }
    function urlInside(code2) {
      if (code2 === 62) {
        effects.exit("autolinkProtocol");
        effects.enter("autolinkMarker");
        effects.consume(code2);
        effects.exit("autolinkMarker");
        effects.exit("autolink");
        return ok2;
      }
      if (code2 === null || code2 === 32 || code2 === 60 || asciiControl(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return urlInside;
    }
    function emailAtext(code2) {
      if (code2 === 64) {
        effects.consume(code2);
        return emailAtSignOrDot;
      }
      if (asciiAtext(code2)) {
        effects.consume(code2);
        return emailAtext;
      }
      return nok(code2);
    }
    function emailAtSignOrDot(code2) {
      return asciiAlphanumeric(code2) ? emailLabel(code2) : nok(code2);
    }
    function emailLabel(code2) {
      if (code2 === 46) {
        effects.consume(code2);
        size3 = 0;
        return emailAtSignOrDot;
      }
      if (code2 === 62) {
        effects.exit("autolinkProtocol").type = "autolinkEmail";
        effects.enter("autolinkMarker");
        effects.consume(code2);
        effects.exit("autolinkMarker");
        effects.exit("autolink");
        return ok2;
      }
      return emailValue(code2);
    }
    function emailValue(code2) {
      if ((code2 === 45 || asciiAlphanumeric(code2)) && size3++ < 63) {
        const next4 = code2 === 45 ? emailValue : emailLabel;
        effects.consume(code2);
        return next4;
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/blank-line.js
  var blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true
  };
  function tokenizeBlankLine(effects, ok2, nok) {
    return start2;
    function start2(code2) {
      return markdownSpace(code2) ? factorySpace(effects, after3, "linePrefix")(code2) : after3(code2);
    }
    function after3(code2) {
      return code2 === null || markdownLineEnding(code2) ? ok2(code2) : nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/block-quote.js
  var blockQuote = {
    name: "blockQuote",
    tokenize: tokenizeBlockQuoteStart,
    continuation: {
      tokenize: tokenizeBlockQuoteContinuation
    },
    exit
  };
  function tokenizeBlockQuoteStart(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      if (code2 === 62) {
        const state = self2.containerState;
        if (!state.open) {
          effects.enter("blockQuote", {
            _container: true
          });
          state.open = true;
        }
        effects.enter("blockQuotePrefix");
        effects.enter("blockQuoteMarker");
        effects.consume(code2);
        effects.exit("blockQuoteMarker");
        return after3;
      }
      return nok(code2);
    }
    function after3(code2) {
      if (markdownSpace(code2)) {
        effects.enter("blockQuotePrefixWhitespace");
        effects.consume(code2);
        effects.exit("blockQuotePrefixWhitespace");
        effects.exit("blockQuotePrefix");
        return ok2;
      }
      effects.exit("blockQuotePrefix");
      return ok2(code2);
    }
  }
  function tokenizeBlockQuoteContinuation(effects, ok2, nok) {
    const self2 = this;
    return contStart;
    function contStart(code2) {
      if (markdownSpace(code2)) {
        return factorySpace(
          effects,
          contBefore,
          "linePrefix",
          self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
        )(code2);
      }
      return contBefore(code2);
    }
    function contBefore(code2) {
      return effects.attempt(blockQuote, ok2, nok)(code2);
    }
  }
  function exit(effects) {
    effects.exit("blockQuote");
  }

  // ../node_modules/micromark-core-commonmark/lib/character-escape.js
  var characterEscape = {
    name: "characterEscape",
    tokenize: tokenizeCharacterEscape
  };
  function tokenizeCharacterEscape(effects, ok2, nok) {
    return start2;
    function start2(code2) {
      effects.enter("characterEscape");
      effects.enter("escapeMarker");
      effects.consume(code2);
      effects.exit("escapeMarker");
      return inside;
    }
    function inside(code2) {
      if (asciiPunctuation(code2)) {
        effects.enter("characterEscapeValue");
        effects.consume(code2);
        effects.exit("characterEscapeValue");
        effects.exit("characterEscape");
        return ok2;
      }
      return nok(code2);
    }
  }

  // ../node_modules/decode-named-character-reference/index.dom.js
  var element = document.createElement("i");
  function decodeNamedCharacterReference(value) {
    const characterReference2 = "&" + value + ";";
    element.innerHTML = characterReference2;
    const char2 = element.textContent;
    if (char2.charCodeAt(char2.length - 1) === 59 && value !== "semi") {
      return false;
    }
    return char2 === characterReference2 ? false : char2;
  }

  // ../node_modules/micromark-core-commonmark/lib/character-reference.js
  var characterReference = {
    name: "characterReference",
    tokenize: tokenizeCharacterReference
  };
  function tokenizeCharacterReference(effects, ok2, nok) {
    const self2 = this;
    let size3 = 0;
    let max2;
    let test;
    return start2;
    function start2(code2) {
      effects.enter("characterReference");
      effects.enter("characterReferenceMarker");
      effects.consume(code2);
      effects.exit("characterReferenceMarker");
      return open;
    }
    function open(code2) {
      if (code2 === 35) {
        effects.enter("characterReferenceMarkerNumeric");
        effects.consume(code2);
        effects.exit("characterReferenceMarkerNumeric");
        return numeric;
      }
      effects.enter("characterReferenceValue");
      max2 = 31;
      test = asciiAlphanumeric;
      return value(code2);
    }
    function numeric(code2) {
      if (code2 === 88 || code2 === 120) {
        effects.enter("characterReferenceMarkerHexadecimal");
        effects.consume(code2);
        effects.exit("characterReferenceMarkerHexadecimal");
        effects.enter("characterReferenceValue");
        max2 = 6;
        test = asciiHexDigit;
        return value;
      }
      effects.enter("characterReferenceValue");
      max2 = 7;
      test = asciiDigit;
      return value(code2);
    }
    function value(code2) {
      if (code2 === 59 && size3) {
        const token2 = effects.exit("characterReferenceValue");
        if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token2))) {
          return nok(code2);
        }
        effects.enter("characterReferenceMarker");
        effects.consume(code2);
        effects.exit("characterReferenceMarker");
        effects.exit("characterReference");
        return ok2;
      }
      if (test(code2) && size3++ < max2) {
        effects.consume(code2);
        return value;
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/code-fenced.js
  var nonLazyContinuation = {
    tokenize: tokenizeNonLazyContinuation,
    partial: true
  };
  var codeFenced = {
    name: "codeFenced",
    tokenize: tokenizeCodeFenced,
    concrete: true
  };
  function tokenizeCodeFenced(effects, ok2, nok) {
    const self2 = this;
    const closeStart = {
      tokenize: tokenizeCloseStart,
      partial: true
    };
    let initialPrefix = 0;
    let sizeOpen = 0;
    let marker;
    return start2;
    function start2(code2) {
      return beforeSequenceOpen(code2);
    }
    function beforeSequenceOpen(code2) {
      const tail = self2.events[self2.events.length - 1];
      initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
      marker = code2;
      effects.enter("codeFenced");
      effects.enter("codeFencedFence");
      effects.enter("codeFencedFenceSequence");
      return sequenceOpen(code2);
    }
    function sequenceOpen(code2) {
      if (code2 === marker) {
        sizeOpen++;
        effects.consume(code2);
        return sequenceOpen;
      }
      if (sizeOpen < 3) {
        return nok(code2);
      }
      effects.exit("codeFencedFenceSequence");
      return markdownSpace(code2) ? factorySpace(effects, infoBefore, "whitespace")(code2) : infoBefore(code2);
    }
    function infoBefore(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("codeFencedFence");
        return self2.interrupt ? ok2(code2) : effects.check(nonLazyContinuation, atNonLazyBreak, after3)(code2);
      }
      effects.enter("codeFencedFenceInfo");
      effects.enter("chunkString", {
        contentType: "string"
      });
      return info(code2);
    }
    function info(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceInfo");
        return infoBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceInfo");
        return factorySpace(effects, metaBefore, "whitespace")(code2);
      }
      if (code2 === 96 && code2 === marker) {
        return nok(code2);
      }
      effects.consume(code2);
      return info;
    }
    function metaBefore(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return infoBefore(code2);
      }
      effects.enter("codeFencedFenceMeta");
      effects.enter("chunkString", {
        contentType: "string"
      });
      return meta(code2);
    }
    function meta(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceMeta");
        return infoBefore(code2);
      }
      if (code2 === 96 && code2 === marker) {
        return nok(code2);
      }
      effects.consume(code2);
      return meta;
    }
    function atNonLazyBreak(code2) {
      return effects.attempt(closeStart, after3, contentBefore)(code2);
    }
    function contentBefore(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return contentStart;
    }
    function contentStart(code2) {
      return initialPrefix > 0 && markdownSpace(code2) ? factorySpace(
        effects,
        beforeContentChunk,
        "linePrefix",
        initialPrefix + 1
      )(code2) : beforeContentChunk(code2);
    }
    function beforeContentChunk(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return effects.check(nonLazyContinuation, atNonLazyBreak, after3)(code2);
      }
      effects.enter("codeFlowValue");
      return contentChunk(code2);
    }
    function contentChunk(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("codeFlowValue");
        return beforeContentChunk(code2);
      }
      effects.consume(code2);
      return contentChunk;
    }
    function after3(code2) {
      effects.exit("codeFenced");
      return ok2(code2);
    }
    function tokenizeCloseStart(effects2, ok3, nok2) {
      let size3 = 0;
      return startBefore;
      function startBefore(code2) {
        effects2.enter("lineEnding");
        effects2.consume(code2);
        effects2.exit("lineEnding");
        return start3;
      }
      function start3(code2) {
        effects2.enter("codeFencedFence");
        return markdownSpace(code2) ? factorySpace(
          effects2,
          beforeSequenceClose,
          "linePrefix",
          self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
        )(code2) : beforeSequenceClose(code2);
      }
      function beforeSequenceClose(code2) {
        if (code2 === marker) {
          effects2.enter("codeFencedFenceSequence");
          return sequenceClose(code2);
        }
        return nok2(code2);
      }
      function sequenceClose(code2) {
        if (code2 === marker) {
          size3++;
          effects2.consume(code2);
          return sequenceClose;
        }
        if (size3 >= sizeOpen) {
          effects2.exit("codeFencedFenceSequence");
          return markdownSpace(code2) ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code2) : sequenceCloseAfter(code2);
        }
        return nok2(code2);
      }
      function sequenceCloseAfter(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
          effects2.exit("codeFencedFence");
          return ok3(code2);
        }
        return nok2(code2);
      }
    }
  }
  function tokenizeNonLazyContinuation(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return lineStart;
    }
    function lineStart(code2) {
      return self2.parser.lazy[self2.now().line] ? nok(code2) : ok2(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/code-indented.js
  var codeIndented = {
    name: "codeIndented",
    tokenize: tokenizeCodeIndented
  };
  var furtherStart = {
    tokenize: tokenizeFurtherStart,
    partial: true
  };
  function tokenizeCodeIndented(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      effects.enter("codeIndented");
      return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
    }
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code2) : nok(code2);
    }
    function atBreak(code2) {
      if (code2 === null) {
        return after3(code2);
      }
      if (markdownLineEnding(code2)) {
        return effects.attempt(furtherStart, atBreak, after3)(code2);
      }
      effects.enter("codeFlowValue");
      return inside(code2);
    }
    function inside(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("codeFlowValue");
        return atBreak(code2);
      }
      effects.consume(code2);
      return inside;
    }
    function after3(code2) {
      effects.exit("codeIndented");
      return ok2(code2);
    }
  }
  function tokenizeFurtherStart(effects, ok2, nok) {
    const self2 = this;
    return furtherStart2;
    function furtherStart2(code2) {
      if (self2.parser.lazy[self2.now().line]) {
        return nok(code2);
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return furtherStart2;
      }
      return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
    }
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok2(code2) : markdownLineEnding(code2) ? furtherStart2(code2) : nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/code-text.js
  var codeText = {
    name: "codeText",
    tokenize: tokenizeCodeText,
    resolve: resolveCodeText,
    previous: previous3
  };
  function resolveCodeText(events2) {
    let tailExitIndex = events2.length - 4;
    let headEnterIndex = 3;
    let index2;
    let enter;
    if ((events2[headEnterIndex][1].type === "lineEnding" || events2[headEnterIndex][1].type === "space") && (events2[tailExitIndex][1].type === "lineEnding" || events2[tailExitIndex][1].type === "space")) {
      index2 = headEnterIndex;
      while (++index2 < tailExitIndex) {
        if (events2[index2][1].type === "codeTextData") {
          events2[headEnterIndex][1].type = "codeTextPadding";
          events2[tailExitIndex][1].type = "codeTextPadding";
          headEnterIndex += 2;
          tailExitIndex -= 2;
          break;
        }
      }
    }
    index2 = headEnterIndex - 1;
    tailExitIndex++;
    while (++index2 <= tailExitIndex) {
      if (enter === void 0) {
        if (index2 !== tailExitIndex && events2[index2][1].type !== "lineEnding") {
          enter = index2;
        }
      } else if (index2 === tailExitIndex || events2[index2][1].type === "lineEnding") {
        events2[enter][1].type = "codeTextData";
        if (index2 !== enter + 2) {
          events2[enter][1].end = events2[index2 - 1][1].end;
          events2.splice(enter + 2, index2 - enter - 2);
          tailExitIndex -= index2 - enter - 2;
          index2 = enter + 2;
        }
        enter = void 0;
      }
    }
    return events2;
  }
  function previous3(code2) {
    return code2 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
  }
  function tokenizeCodeText(effects, ok2, nok) {
    const self2 = this;
    let sizeOpen = 0;
    let size3;
    let token2;
    return start2;
    function start2(code2) {
      effects.enter("codeText");
      effects.enter("codeTextSequence");
      return sequenceOpen(code2);
    }
    function sequenceOpen(code2) {
      if (code2 === 96) {
        effects.consume(code2);
        sizeOpen++;
        return sequenceOpen;
      }
      effects.exit("codeTextSequence");
      return between(code2);
    }
    function between(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 32) {
        effects.enter("space");
        effects.consume(code2);
        effects.exit("space");
        return between;
      }
      if (code2 === 96) {
        token2 = effects.enter("codeTextSequence");
        size3 = 0;
        return sequenceClose(code2);
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return between;
      }
      effects.enter("codeTextData");
      return data(code2);
    }
    function data(code2) {
      if (code2 === null || code2 === 32 || code2 === 96 || markdownLineEnding(code2)) {
        effects.exit("codeTextData");
        return between(code2);
      }
      effects.consume(code2);
      return data;
    }
    function sequenceClose(code2) {
      if (code2 === 96) {
        effects.consume(code2);
        size3++;
        return sequenceClose;
      }
      if (size3 === sizeOpen) {
        effects.exit("codeTextSequence");
        effects.exit("codeText");
        return ok2(code2);
      }
      token2.type = "codeTextData";
      return data(code2);
    }
  }

  // ../node_modules/micromark-util-subtokenize/index.js
  function subtokenize(events2) {
    const jumps = {};
    let index2 = -1;
    let event;
    let lineIndex;
    let otherIndex;
    let otherEvent;
    let parameters;
    let subevents;
    let more;
    while (++index2 < events2.length) {
      while (index2 in jumps) {
        index2 = jumps[index2];
      }
      event = events2[index2];
      if (index2 && event[1].type === "chunkFlow" && events2[index2 - 1][1].type === "listItemPrefix") {
        subevents = event[1]._tokenizer.events;
        otherIndex = 0;
        if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
          otherIndex += 2;
        }
        if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
          while (++otherIndex < subevents.length) {
            if (subevents[otherIndex][1].type === "content") {
              break;
            }
            if (subevents[otherIndex][1].type === "chunkText") {
              subevents[otherIndex][1]._isInFirstContentOfListItem = true;
              otherIndex++;
            }
          }
        }
      }
      if (event[0] === "enter") {
        if (event[1].contentType) {
          Object.assign(jumps, subcontent(events2, index2));
          index2 = jumps[index2];
          more = true;
        }
      } else if (event[1]._container) {
        otherIndex = index2;
        lineIndex = void 0;
        while (otherIndex--) {
          otherEvent = events2[otherIndex];
          if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
            if (otherEvent[0] === "enter") {
              if (lineIndex) {
                events2[lineIndex][1].type = "lineEndingBlank";
              }
              otherEvent[1].type = "lineEnding";
              lineIndex = otherIndex;
            }
          } else {
            break;
          }
        }
        if (lineIndex) {
          event[1].end = Object.assign({}, events2[lineIndex][1].start);
          parameters = events2.slice(lineIndex, index2);
          parameters.unshift(event);
          splice(events2, lineIndex, index2 - lineIndex + 1, parameters);
        }
      }
    }
    return !more;
  }
  function subcontent(events2, eventIndex) {
    const token2 = events2[eventIndex][1];
    const context = events2[eventIndex][2];
    let startPosition = eventIndex - 1;
    const startPositions = [];
    const tokenizer2 = token2._tokenizer || context.parser[token2.contentType](token2.start);
    const childEvents = tokenizer2.events;
    const jumps = [];
    const gaps = {};
    let stream;
    let previous4;
    let index2 = -1;
    let current = token2;
    let adjust = 0;
    let start2 = 0;
    const breaks = [start2];
    while (current) {
      while (events2[++startPosition][1] !== current) {
      }
      startPositions.push(startPosition);
      if (!current._tokenizer) {
        stream = context.sliceStream(current);
        if (!current.next) {
          stream.push(null);
        }
        if (previous4) {
          tokenizer2.defineSkip(current.start);
        }
        if (current._isInFirstContentOfListItem) {
          tokenizer2._gfmTasklistFirstContentOfListItem = true;
        }
        tokenizer2.write(stream);
        if (current._isInFirstContentOfListItem) {
          tokenizer2._gfmTasklistFirstContentOfListItem = void 0;
        }
      }
      previous4 = current;
      current = current.next;
    }
    current = token2;
    while (++index2 < childEvents.length) {
      if (
        // Find a void token that includes a break.
        childEvents[index2][0] === "exit" && childEvents[index2 - 1][0] === "enter" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line
      ) {
        start2 = index2 + 1;
        breaks.push(start2);
        current._tokenizer = void 0;
        current.previous = void 0;
        current = current.next;
      }
    }
    tokenizer2.events = [];
    if (current) {
      current._tokenizer = void 0;
      current.previous = void 0;
    } else {
      breaks.pop();
    }
    index2 = breaks.length;
    while (index2--) {
      const slice2 = childEvents.slice(breaks[index2], breaks[index2 + 1]);
      const start3 = startPositions.pop();
      jumps.unshift([start3, start3 + slice2.length - 1]);
      splice(events2, start3, 2, slice2);
    }
    index2 = -1;
    while (++index2 < jumps.length) {
      gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
      adjust += jumps[index2][1] - jumps[index2][0] - 1;
    }
    return gaps;
  }

  // ../node_modules/micromark-core-commonmark/lib/content.js
  var content2 = {
    tokenize: tokenizeContent,
    resolve: resolveContent
  };
  var continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: true
  };
  function resolveContent(events2) {
    subtokenize(events2);
    return events2;
  }
  function tokenizeContent(effects, ok2) {
    let previous4;
    return chunkStart;
    function chunkStart(code2) {
      effects.enter("content");
      previous4 = effects.enter("chunkContent", {
        contentType: "content"
      });
      return chunkInside(code2);
    }
    function chunkInside(code2) {
      if (code2 === null) {
        return contentEnd(code2);
      }
      if (markdownLineEnding(code2)) {
        return effects.check(
          continuationConstruct,
          contentContinue,
          contentEnd
        )(code2);
      }
      effects.consume(code2);
      return chunkInside;
    }
    function contentEnd(code2) {
      effects.exit("chunkContent");
      effects.exit("content");
      return ok2(code2);
    }
    function contentContinue(code2) {
      effects.consume(code2);
      effects.exit("chunkContent");
      previous4.next = effects.enter("chunkContent", {
        contentType: "content",
        previous: previous4
      });
      previous4 = previous4.next;
      return chunkInside;
    }
  }
  function tokenizeContinuation(effects, ok2, nok) {
    const self2 = this;
    return startLookahead;
    function startLookahead(code2) {
      effects.exit("chunkContent");
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, prefixed, "linePrefix");
    }
    function prefixed(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return nok(code2);
      }
      const tail = self2.events[self2.events.length - 1];
      if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
        return ok2(code2);
      }
      return effects.interrupt(self2.parser.constructs.flow, nok, ok2)(code2);
    }
  }

  // ../node_modules/micromark-factory-destination/index.js
  function factoryDestination(effects, ok2, nok, type, literalType, literalMarkerType, rawType, stringType, max2) {
    const limit = max2 || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start2;
    function start2(code2) {
      if (code2 === 60) {
        effects.enter(type);
        effects.enter(literalType);
        effects.enter(literalMarkerType);
        effects.consume(code2);
        effects.exit(literalMarkerType);
        return enclosedBefore;
      }
      if (code2 === null || code2 === 32 || code2 === 41 || asciiControl(code2)) {
        return nok(code2);
      }
      effects.enter(type);
      effects.enter(rawType);
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string"
      });
      return raw(code2);
    }
    function enclosedBefore(code2) {
      if (code2 === 62) {
        effects.enter(literalMarkerType);
        effects.consume(code2);
        effects.exit(literalMarkerType);
        effects.exit(literalType);
        effects.exit(type);
        return ok2;
      }
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string"
      });
      return enclosed(code2);
    }
    function enclosed(code2) {
      if (code2 === 62) {
        effects.exit("chunkString");
        effects.exit(stringType);
        return enclosedBefore(code2);
      }
      if (code2 === null || code2 === 60 || markdownLineEnding(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return code2 === 92 ? enclosedEscape : enclosed;
    }
    function enclosedEscape(code2) {
      if (code2 === 60 || code2 === 62 || code2 === 92) {
        effects.consume(code2);
        return enclosed;
      }
      return enclosed(code2);
    }
    function raw(code2) {
      if (!balance && (code2 === null || code2 === 41 || markdownLineEndingOrSpace(code2))) {
        effects.exit("chunkString");
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok2(code2);
      }
      if (balance < limit && code2 === 40) {
        effects.consume(code2);
        balance++;
        return raw;
      }
      if (code2 === 41) {
        effects.consume(code2);
        balance--;
        return raw;
      }
      if (code2 === null || code2 === 32 || code2 === 40 || asciiControl(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return code2 === 92 ? rawEscape : raw;
    }
    function rawEscape(code2) {
      if (code2 === 40 || code2 === 41 || code2 === 92) {
        effects.consume(code2);
        return raw;
      }
      return raw(code2);
    }
  }

  // ../node_modules/micromark-factory-label/index.js
  function factoryLabel(effects, ok2, nok, type, markerType, stringType) {
    const self2 = this;
    let size3 = 0;
    let seen;
    return start2;
    function start2(code2) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code2);
      effects.exit(markerType);
      effects.enter(stringType);
      return atBreak;
    }
    function atBreak(code2) {
      if (size3 > 999 || code2 === null || code2 === 91 || code2 === 93 && !seen || // To do: remove in the future once we’ve switched from
      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
      // which doesn’t need this.
      // Hidden footnotes hook.
      /* c8 ignore next 3 */
      code2 === 94 && !size3 && "_hiddenFootnoteSupport" in self2.parser.constructs) {
        return nok(code2);
      }
      if (code2 === 93) {
        effects.exit(stringType);
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        effects.exit(type);
        return ok2;
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return atBreak;
      }
      effects.enter("chunkString", {
        contentType: "string"
      });
      return labelInside(code2);
    }
    function labelInside(code2) {
      if (code2 === null || code2 === 91 || code2 === 93 || markdownLineEnding(code2) || size3++ > 999) {
        effects.exit("chunkString");
        return atBreak(code2);
      }
      effects.consume(code2);
      if (!seen)
        seen = !markdownSpace(code2);
      return code2 === 92 ? labelEscape : labelInside;
    }
    function labelEscape(code2) {
      if (code2 === 91 || code2 === 92 || code2 === 93) {
        effects.consume(code2);
        size3++;
        return labelInside;
      }
      return labelInside(code2);
    }
  }

  // ../node_modules/micromark-factory-title/index.js
  function factoryTitle(effects, ok2, nok, type, markerType, stringType) {
    let marker;
    return start2;
    function start2(code2) {
      if (code2 === 34 || code2 === 39 || code2 === 40) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        marker = code2 === 40 ? 41 : code2;
        return begin;
      }
      return nok(code2);
    }
    function begin(code2) {
      if (code2 === marker) {
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        effects.exit(type);
        return ok2;
      }
      effects.enter(stringType);
      return atBreak(code2);
    }
    function atBreak(code2) {
      if (code2 === marker) {
        effects.exit(stringType);
        return begin(marker);
      }
      if (code2 === null) {
        return nok(code2);
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return factorySpace(effects, atBreak, "linePrefix");
      }
      effects.enter("chunkString", {
        contentType: "string"
      });
      return inside(code2);
    }
    function inside(code2) {
      if (code2 === marker || code2 === null || markdownLineEnding(code2)) {
        effects.exit("chunkString");
        return atBreak(code2);
      }
      effects.consume(code2);
      return code2 === 92 ? escape : inside;
    }
    function escape(code2) {
      if (code2 === marker || code2 === 92) {
        effects.consume(code2);
        return inside;
      }
      return inside(code2);
    }
  }

  // ../node_modules/micromark-factory-whitespace/index.js
  function factoryWhitespace(effects, ok2) {
    let seen;
    return start2;
    function start2(code2) {
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        seen = true;
        return start2;
      }
      if (markdownSpace(code2)) {
        return factorySpace(
          effects,
          start2,
          seen ? "linePrefix" : "lineSuffix"
        )(code2);
      }
      return ok2(code2);
    }
  }

  // ../node_modules/micromark-util-normalize-identifier/index.js
  function normalizeIdentifier(value) {
    return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
  }

  // ../node_modules/micromark-core-commonmark/lib/definition.js
  var definition = {
    name: "definition",
    tokenize: tokenizeDefinition
  };
  var titleBefore = {
    tokenize: tokenizeTitleBefore,
    partial: true
  };
  function tokenizeDefinition(effects, ok2, nok) {
    const self2 = this;
    let identifier2;
    return start2;
    function start2(code2) {
      effects.enter("definition");
      return before3(code2);
    }
    function before3(code2) {
      return factoryLabel.call(
        self2,
        effects,
        labelAfter,
        // Note: we don’t need to reset the way `markdown-rs` does.
        nok,
        "definitionLabel",
        "definitionLabelMarker",
        "definitionLabelString"
      )(code2);
    }
    function labelAfter(code2) {
      identifier2 = normalizeIdentifier(
        self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
      );
      if (code2 === 58) {
        effects.enter("definitionMarker");
        effects.consume(code2);
        effects.exit("definitionMarker");
        return markerAfter;
      }
      return nok(code2);
    }
    function markerAfter(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, destinationBefore)(code2) : destinationBefore(code2);
    }
    function destinationBefore(code2) {
      return factoryDestination(
        effects,
        destinationAfter,
        // Note: we don’t need to reset the way `markdown-rs` does.
        nok,
        "definitionDestination",
        "definitionDestinationLiteral",
        "definitionDestinationLiteralMarker",
        "definitionDestinationRaw",
        "definitionDestinationString"
      )(code2);
    }
    function destinationAfter(code2) {
      return effects.attempt(titleBefore, after3, after3)(code2);
    }
    function after3(code2) {
      return markdownSpace(code2) ? factorySpace(effects, afterWhitespace, "whitespace")(code2) : afterWhitespace(code2);
    }
    function afterWhitespace(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("definition");
        self2.parser.defined.push(identifier2);
        return ok2(code2);
      }
      return nok(code2);
    }
  }
  function tokenizeTitleBefore(effects, ok2, nok) {
    return titleBefore2;
    function titleBefore2(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, beforeMarker)(code2) : nok(code2);
    }
    function beforeMarker(code2) {
      return factoryTitle(
        effects,
        titleAfter,
        nok,
        "definitionTitle",
        "definitionTitleMarker",
        "definitionTitleString"
      )(code2);
    }
    function titleAfter(code2) {
      return markdownSpace(code2) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code2) : titleAfterOptionalWhitespace(code2);
    }
    function titleAfterOptionalWhitespace(code2) {
      return code2 === null || markdownLineEnding(code2) ? ok2(code2) : nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/hard-break-escape.js
  var hardBreakEscape = {
    name: "hardBreakEscape",
    tokenize: tokenizeHardBreakEscape
  };
  function tokenizeHardBreakEscape(effects, ok2, nok) {
    return start2;
    function start2(code2) {
      effects.enter("hardBreakEscape");
      effects.consume(code2);
      return after3;
    }
    function after3(code2) {
      if (markdownLineEnding(code2)) {
        effects.exit("hardBreakEscape");
        return ok2(code2);
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/heading-atx.js
  var headingAtx = {
    name: "headingAtx",
    tokenize: tokenizeHeadingAtx,
    resolve: resolveHeadingAtx
  };
  function resolveHeadingAtx(events2, context) {
    let contentEnd = events2.length - 2;
    let contentStart = 3;
    let content3;
    let text4;
    if (events2[contentStart][1].type === "whitespace") {
      contentStart += 2;
    }
    if (contentEnd - 2 > contentStart && events2[contentEnd][1].type === "whitespace") {
      contentEnd -= 2;
    }
    if (events2[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events2[contentEnd - 2][1].type === "whitespace")) {
      contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
    }
    if (contentEnd > contentStart) {
      content3 = {
        type: "atxHeadingText",
        start: events2[contentStart][1].start,
        end: events2[contentEnd][1].end
      };
      text4 = {
        type: "chunkText",
        start: events2[contentStart][1].start,
        end: events2[contentEnd][1].end,
        contentType: "text"
      };
      splice(events2, contentStart, contentEnd - contentStart + 1, [
        ["enter", content3, context],
        ["enter", text4, context],
        ["exit", text4, context],
        ["exit", content3, context]
      ]);
    }
    return events2;
  }
  function tokenizeHeadingAtx(effects, ok2, nok) {
    let size3 = 0;
    return start2;
    function start2(code2) {
      effects.enter("atxHeading");
      return before3(code2);
    }
    function before3(code2) {
      effects.enter("atxHeadingSequence");
      return sequenceOpen(code2);
    }
    function sequenceOpen(code2) {
      if (code2 === 35 && size3++ < 6) {
        effects.consume(code2);
        return sequenceOpen;
      }
      if (code2 === null || markdownLineEndingOrSpace(code2)) {
        effects.exit("atxHeadingSequence");
        return atBreak(code2);
      }
      return nok(code2);
    }
    function atBreak(code2) {
      if (code2 === 35) {
        effects.enter("atxHeadingSequence");
        return sequenceFurther(code2);
      }
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("atxHeading");
        return ok2(code2);
      }
      if (markdownSpace(code2)) {
        return factorySpace(effects, atBreak, "whitespace")(code2);
      }
      effects.enter("atxHeadingText");
      return data(code2);
    }
    function sequenceFurther(code2) {
      if (code2 === 35) {
        effects.consume(code2);
        return sequenceFurther;
      }
      effects.exit("atxHeadingSequence");
      return atBreak(code2);
    }
    function data(code2) {
      if (code2 === null || code2 === 35 || markdownLineEndingOrSpace(code2)) {
        effects.exit("atxHeadingText");
        return atBreak(code2);
      }
      effects.consume(code2);
      return data;
    }
  }

  // ../node_modules/micromark-util-html-tag-name/index.js
  var htmlBlockNames = [
    "address",
    "article",
    "aside",
    "base",
    "basefont",
    "blockquote",
    "body",
    "caption",
    "center",
    "col",
    "colgroup",
    "dd",
    "details",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hr",
    "html",
    "iframe",
    "legend",
    "li",
    "link",
    "main",
    "menu",
    "menuitem",
    "nav",
    "noframes",
    "ol",
    "optgroup",
    "option",
    "p",
    "param",
    "search",
    "section",
    "summary",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "title",
    "tr",
    "track",
    "ul"
  ];
  var htmlRawNames = ["pre", "script", "style", "textarea"];

  // ../node_modules/micromark-core-commonmark/lib/html-flow.js
  var htmlFlow = {
    name: "htmlFlow",
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: true
  };
  var blankLineBefore = {
    tokenize: tokenizeBlankLineBefore,
    partial: true
  };
  var nonLazyContinuationStart = {
    tokenize: tokenizeNonLazyContinuationStart,
    partial: true
  };
  function resolveToHtmlFlow(events2) {
    let index2 = events2.length;
    while (index2--) {
      if (events2[index2][0] === "enter" && events2[index2][1].type === "htmlFlow") {
        break;
      }
    }
    if (index2 > 1 && events2[index2 - 2][1].type === "linePrefix") {
      events2[index2][1].start = events2[index2 - 2][1].start;
      events2[index2 + 1][1].start = events2[index2 - 2][1].start;
      events2.splice(index2 - 2, 2);
    }
    return events2;
  }
  function tokenizeHtmlFlow(effects, ok2, nok) {
    const self2 = this;
    let marker;
    let closingTag;
    let buffer2;
    let index2;
    let markerB;
    return start2;
    function start2(code2) {
      return before3(code2);
    }
    function before3(code2) {
      effects.enter("htmlFlow");
      effects.enter("htmlFlowData");
      effects.consume(code2);
      return open;
    }
    function open(code2) {
      if (code2 === 33) {
        effects.consume(code2);
        return declarationOpen;
      }
      if (code2 === 47) {
        effects.consume(code2);
        closingTag = true;
        return tagCloseStart;
      }
      if (code2 === 63) {
        effects.consume(code2);
        marker = 3;
        return self2.interrupt ? ok2 : continuationDeclarationInside;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        buffer2 = String.fromCharCode(code2);
        return tagName;
      }
      return nok(code2);
    }
    function declarationOpen(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        marker = 2;
        return commentOpenInside;
      }
      if (code2 === 91) {
        effects.consume(code2);
        marker = 5;
        index2 = 0;
        return cdataOpenInside;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        marker = 4;
        return self2.interrupt ? ok2 : continuationDeclarationInside;
      }
      return nok(code2);
    }
    function commentOpenInside(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return self2.interrupt ? ok2 : continuationDeclarationInside;
      }
      return nok(code2);
    }
    function cdataOpenInside(code2) {
      const value = "CDATA[";
      if (code2 === value.charCodeAt(index2++)) {
        effects.consume(code2);
        if (index2 === value.length) {
          return self2.interrupt ? ok2 : continuation;
        }
        return cdataOpenInside;
      }
      return nok(code2);
    }
    function tagCloseStart(code2) {
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        buffer2 = String.fromCharCode(code2);
        return tagName;
      }
      return nok(code2);
    }
    function tagName(code2) {
      if (code2 === null || code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        const slash = code2 === 47;
        const name = buffer2.toLowerCase();
        if (!slash && !closingTag && htmlRawNames.includes(name)) {
          marker = 1;
          return self2.interrupt ? ok2(code2) : continuation(code2);
        }
        if (htmlBlockNames.includes(buffer2.toLowerCase())) {
          marker = 6;
          if (slash) {
            effects.consume(code2);
            return basicSelfClosing;
          }
          return self2.interrupt ? ok2(code2) : continuation(code2);
        }
        marker = 7;
        return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code2) : closingTag ? completeClosingTagAfter(code2) : completeAttributeNameBefore(code2);
      }
      if (code2 === 45 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        buffer2 += String.fromCharCode(code2);
        return tagName;
      }
      return nok(code2);
    }
    function basicSelfClosing(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        return self2.interrupt ? ok2 : continuation;
      }
      return nok(code2);
    }
    function completeClosingTagAfter(code2) {
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeClosingTagAfter;
      }
      return completeEnd(code2);
    }
    function completeAttributeNameBefore(code2) {
      if (code2 === 47) {
        effects.consume(code2);
        return completeEnd;
      }
      if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
        effects.consume(code2);
        return completeAttributeName;
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAttributeNameBefore;
      }
      return completeEnd(code2);
    }
    function completeAttributeName(code2) {
      if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return completeAttributeName;
      }
      return completeAttributeNameAfter(code2);
    }
    function completeAttributeNameAfter(code2) {
      if (code2 === 61) {
        effects.consume(code2);
        return completeAttributeValueBefore;
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAttributeNameAfter;
      }
      return completeAttributeNameBefore(code2);
    }
    function completeAttributeValueBefore(code2) {
      if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) {
        return nok(code2);
      }
      if (code2 === 34 || code2 === 39) {
        effects.consume(code2);
        markerB = code2;
        return completeAttributeValueQuoted;
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAttributeValueBefore;
      }
      return completeAttributeValueUnquoted(code2);
    }
    function completeAttributeValueQuoted(code2) {
      if (code2 === markerB) {
        effects.consume(code2);
        markerB = null;
        return completeAttributeValueQuotedAfter;
      }
      if (code2 === null || markdownLineEnding(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return completeAttributeValueQuoted;
    }
    function completeAttributeValueUnquoted(code2) {
      if (code2 === null || code2 === 34 || code2 === 39 || code2 === 47 || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96 || markdownLineEndingOrSpace(code2)) {
        return completeAttributeNameAfter(code2);
      }
      effects.consume(code2);
      return completeAttributeValueUnquoted;
    }
    function completeAttributeValueQuotedAfter(code2) {
      if (code2 === 47 || code2 === 62 || markdownSpace(code2)) {
        return completeAttributeNameBefore(code2);
      }
      return nok(code2);
    }
    function completeEnd(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        return completeAfter;
      }
      return nok(code2);
    }
    function completeAfter(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return continuation(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAfter;
      }
      return nok(code2);
    }
    function continuation(code2) {
      if (code2 === 45 && marker === 2) {
        effects.consume(code2);
        return continuationCommentInside;
      }
      if (code2 === 60 && marker === 1) {
        effects.consume(code2);
        return continuationRawTagOpen;
      }
      if (code2 === 62 && marker === 4) {
        effects.consume(code2);
        return continuationClose;
      }
      if (code2 === 63 && marker === 3) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      if (code2 === 93 && marker === 5) {
        effects.consume(code2);
        return continuationCdataInside;
      }
      if (markdownLineEnding(code2) && (marker === 6 || marker === 7)) {
        effects.exit("htmlFlowData");
        return effects.check(
          blankLineBefore,
          continuationAfter,
          continuationStart
        )(code2);
      }
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("htmlFlowData");
        return continuationStart(code2);
      }
      effects.consume(code2);
      return continuation;
    }
    function continuationStart(code2) {
      return effects.check(
        nonLazyContinuationStart,
        continuationStartNonLazy,
        continuationAfter
      )(code2);
    }
    function continuationStartNonLazy(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return continuationBefore;
    }
    function continuationBefore(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return continuationStart(code2);
      }
      effects.enter("htmlFlowData");
      return continuation(code2);
    }
    function continuationCommentInside(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      return continuation(code2);
    }
    function continuationRawTagOpen(code2) {
      if (code2 === 47) {
        effects.consume(code2);
        buffer2 = "";
        return continuationRawEndTag;
      }
      return continuation(code2);
    }
    function continuationRawEndTag(code2) {
      if (code2 === 62) {
        const name = buffer2.toLowerCase();
        if (htmlRawNames.includes(name)) {
          effects.consume(code2);
          return continuationClose;
        }
        return continuation(code2);
      }
      if (asciiAlpha(code2) && buffer2.length < 8) {
        effects.consume(code2);
        buffer2 += String.fromCharCode(code2);
        return continuationRawEndTag;
      }
      return continuation(code2);
    }
    function continuationCdataInside(code2) {
      if (code2 === 93) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      return continuation(code2);
    }
    function continuationDeclarationInside(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        return continuationClose;
      }
      if (code2 === 45 && marker === 2) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      return continuation(code2);
    }
    function continuationClose(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("htmlFlowData");
        return continuationAfter(code2);
      }
      effects.consume(code2);
      return continuationClose;
    }
    function continuationAfter(code2) {
      effects.exit("htmlFlow");
      return ok2(code2);
    }
  }
  function tokenizeNonLazyContinuationStart(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return after3;
      }
      return nok(code2);
    }
    function after3(code2) {
      return self2.parser.lazy[self2.now().line] ? nok(code2) : ok2(code2);
    }
  }
  function tokenizeBlankLineBefore(effects, ok2, nok) {
    return start2;
    function start2(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return effects.attempt(blankLine, ok2, nok);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/html-text.js
  var htmlText = {
    name: "htmlText",
    tokenize: tokenizeHtmlText
  };
  function tokenizeHtmlText(effects, ok2, nok) {
    const self2 = this;
    let marker;
    let index2;
    let returnState;
    return start2;
    function start2(code2) {
      effects.enter("htmlText");
      effects.enter("htmlTextData");
      effects.consume(code2);
      return open;
    }
    function open(code2) {
      if (code2 === 33) {
        effects.consume(code2);
        return declarationOpen;
      }
      if (code2 === 47) {
        effects.consume(code2);
        return tagCloseStart;
      }
      if (code2 === 63) {
        effects.consume(code2);
        return instruction;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return tagOpen;
      }
      return nok(code2);
    }
    function declarationOpen(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return commentOpenInside;
      }
      if (code2 === 91) {
        effects.consume(code2);
        index2 = 0;
        return cdataOpenInside;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return declaration2;
      }
      return nok(code2);
    }
    function commentOpenInside(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return commentEnd;
      }
      return nok(code2);
    }
    function comment2(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 45) {
        effects.consume(code2);
        return commentClose;
      }
      if (markdownLineEnding(code2)) {
        returnState = comment2;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return comment2;
    }
    function commentClose(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return commentEnd;
      }
      return comment2(code2);
    }
    function commentEnd(code2) {
      return code2 === 62 ? end2(code2) : code2 === 45 ? commentClose(code2) : comment2(code2);
    }
    function cdataOpenInside(code2) {
      const value = "CDATA[";
      if (code2 === value.charCodeAt(index2++)) {
        effects.consume(code2);
        return index2 === value.length ? cdata : cdataOpenInside;
      }
      return nok(code2);
    }
    function cdata(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 93) {
        effects.consume(code2);
        return cdataClose;
      }
      if (markdownLineEnding(code2)) {
        returnState = cdata;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return cdata;
    }
    function cdataClose(code2) {
      if (code2 === 93) {
        effects.consume(code2);
        return cdataEnd;
      }
      return cdata(code2);
    }
    function cdataEnd(code2) {
      if (code2 === 62) {
        return end2(code2);
      }
      if (code2 === 93) {
        effects.consume(code2);
        return cdataEnd;
      }
      return cdata(code2);
    }
    function declaration2(code2) {
      if (code2 === null || code2 === 62) {
        return end2(code2);
      }
      if (markdownLineEnding(code2)) {
        returnState = declaration2;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return declaration2;
    }
    function instruction(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 63) {
        effects.consume(code2);
        return instructionClose;
      }
      if (markdownLineEnding(code2)) {
        returnState = instruction;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return instruction;
    }
    function instructionClose(code2) {
      return code2 === 62 ? end2(code2) : instruction(code2);
    }
    function tagCloseStart(code2) {
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return tagClose;
      }
      return nok(code2);
    }
    function tagClose(code2) {
      if (code2 === 45 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return tagClose;
      }
      return tagCloseBetween(code2);
    }
    function tagCloseBetween(code2) {
      if (markdownLineEnding(code2)) {
        returnState = tagCloseBetween;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagCloseBetween;
      }
      return end2(code2);
    }
    function tagOpen(code2) {
      if (code2 === 45 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return tagOpen;
      }
      if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        return tagOpenBetween(code2);
      }
      return nok(code2);
    }
    function tagOpenBetween(code2) {
      if (code2 === 47) {
        effects.consume(code2);
        return end2;
      }
      if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
        effects.consume(code2);
        return tagOpenAttributeName;
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenBetween;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagOpenBetween;
      }
      return end2(code2);
    }
    function tagOpenAttributeName(code2) {
      if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return tagOpenAttributeName;
      }
      return tagOpenAttributeNameAfter(code2);
    }
    function tagOpenAttributeNameAfter(code2) {
      if (code2 === 61) {
        effects.consume(code2);
        return tagOpenAttributeValueBefore;
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenAttributeNameAfter;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagOpenAttributeNameAfter;
      }
      return tagOpenBetween(code2);
    }
    function tagOpenAttributeValueBefore(code2) {
      if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) {
        return nok(code2);
      }
      if (code2 === 34 || code2 === 39) {
        effects.consume(code2);
        marker = code2;
        return tagOpenAttributeValueQuoted;
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenAttributeValueBefore;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagOpenAttributeValueBefore;
      }
      effects.consume(code2);
      return tagOpenAttributeValueUnquoted;
    }
    function tagOpenAttributeValueQuoted(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        marker = void 0;
        return tagOpenAttributeValueQuotedAfter;
      }
      if (code2 === null) {
        return nok(code2);
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenAttributeValueQuoted;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return tagOpenAttributeValueQuoted;
    }
    function tagOpenAttributeValueUnquoted(code2) {
      if (code2 === null || code2 === 34 || code2 === 39 || code2 === 60 || code2 === 61 || code2 === 96) {
        return nok(code2);
      }
      if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        return tagOpenBetween(code2);
      }
      effects.consume(code2);
      return tagOpenAttributeValueUnquoted;
    }
    function tagOpenAttributeValueQuotedAfter(code2) {
      if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        return tagOpenBetween(code2);
      }
      return nok(code2);
    }
    function end2(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        effects.exit("htmlTextData");
        effects.exit("htmlText");
        return ok2;
      }
      return nok(code2);
    }
    function lineEndingBefore(code2) {
      effects.exit("htmlTextData");
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return lineEndingAfter;
    }
    function lineEndingAfter(code2) {
      return markdownSpace(code2) ? factorySpace(
        effects,
        lineEndingAfterPrefix,
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(code2) : lineEndingAfterPrefix(code2);
    }
    function lineEndingAfterPrefix(code2) {
      effects.enter("htmlTextData");
      return returnState(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/label-end.js
  var labelEnd = {
    name: "labelEnd",
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd
  };
  var resourceConstruct = {
    tokenize: tokenizeResource
  };
  var referenceFullConstruct = {
    tokenize: tokenizeReferenceFull
  };
  var referenceCollapsedConstruct = {
    tokenize: tokenizeReferenceCollapsed
  };
  function resolveAllLabelEnd(events2) {
    let index2 = -1;
    while (++index2 < events2.length) {
      const token2 = events2[index2][1];
      if (token2.type === "labelImage" || token2.type === "labelLink" || token2.type === "labelEnd") {
        events2.splice(index2 + 1, token2.type === "labelImage" ? 4 : 2);
        token2.type = "data";
        index2++;
      }
    }
    return events2;
  }
  function resolveToLabelEnd(events2, context) {
    let index2 = events2.length;
    let offset3 = 0;
    let token2;
    let open;
    let close;
    let media;
    while (index2--) {
      token2 = events2[index2][1];
      if (open) {
        if (token2.type === "link" || token2.type === "labelLink" && token2._inactive) {
          break;
        }
        if (events2[index2][0] === "enter" && token2.type === "labelLink") {
          token2._inactive = true;
        }
      } else if (close) {
        if (events2[index2][0] === "enter" && (token2.type === "labelImage" || token2.type === "labelLink") && !token2._balanced) {
          open = index2;
          if (token2.type !== "labelLink") {
            offset3 = 2;
            break;
          }
        }
      } else if (token2.type === "labelEnd") {
        close = index2;
      }
    }
    const group = {
      type: events2[open][1].type === "labelLink" ? "link" : "image",
      start: Object.assign({}, events2[open][1].start),
      end: Object.assign({}, events2[events2.length - 1][1].end)
    };
    const label = {
      type: "label",
      start: Object.assign({}, events2[open][1].start),
      end: Object.assign({}, events2[close][1].end)
    };
    const text4 = {
      type: "labelText",
      start: Object.assign({}, events2[open + offset3 + 2][1].end),
      end: Object.assign({}, events2[close - 2][1].start)
    };
    media = [
      ["enter", group, context],
      ["enter", label, context]
    ];
    media = push(media, events2.slice(open + 1, open + offset3 + 3));
    media = push(media, [["enter", text4, context]]);
    media = push(
      media,
      resolveAll(
        context.parser.constructs.insideSpan.null,
        events2.slice(open + offset3 + 4, close - 3),
        context
      )
    );
    media = push(media, [
      ["exit", text4, context],
      events2[close - 2],
      events2[close - 1],
      ["exit", label, context]
    ]);
    media = push(media, events2.slice(close + 1));
    media = push(media, [["exit", group, context]]);
    splice(events2, open, events2.length, media);
    return events2;
  }
  function tokenizeLabelEnd(effects, ok2, nok) {
    const self2 = this;
    let index2 = self2.events.length;
    let labelStart;
    let defined;
    while (index2--) {
      if ((self2.events[index2][1].type === "labelImage" || self2.events[index2][1].type === "labelLink") && !self2.events[index2][1]._balanced) {
        labelStart = self2.events[index2][1];
        break;
      }
    }
    return start2;
    function start2(code2) {
      if (!labelStart) {
        return nok(code2);
      }
      if (labelStart._inactive) {
        return labelEndNok(code2);
      }
      defined = self2.parser.defined.includes(
        normalizeIdentifier(
          self2.sliceSerialize({
            start: labelStart.end,
            end: self2.now()
          })
        )
      );
      effects.enter("labelEnd");
      effects.enter("labelMarker");
      effects.consume(code2);
      effects.exit("labelMarker");
      effects.exit("labelEnd");
      return after3;
    }
    function after3(code2) {
      if (code2 === 40) {
        return effects.attempt(
          resourceConstruct,
          labelEndOk,
          defined ? labelEndOk : labelEndNok
        )(code2);
      }
      if (code2 === 91) {
        return effects.attempt(
          referenceFullConstruct,
          labelEndOk,
          defined ? referenceNotFull : labelEndNok
        )(code2);
      }
      return defined ? labelEndOk(code2) : labelEndNok(code2);
    }
    function referenceNotFull(code2) {
      return effects.attempt(
        referenceCollapsedConstruct,
        labelEndOk,
        labelEndNok
      )(code2);
    }
    function labelEndOk(code2) {
      return ok2(code2);
    }
    function labelEndNok(code2) {
      labelStart._balanced = true;
      return nok(code2);
    }
  }
  function tokenizeResource(effects, ok2, nok) {
    return resourceStart;
    function resourceStart(code2) {
      effects.enter("resource");
      effects.enter("resourceMarker");
      effects.consume(code2);
      effects.exit("resourceMarker");
      return resourceBefore;
    }
    function resourceBefore(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceOpen)(code2) : resourceOpen(code2);
    }
    function resourceOpen(code2) {
      if (code2 === 41) {
        return resourceEnd(code2);
      }
      return factoryDestination(
        effects,
        resourceDestinationAfter,
        resourceDestinationMissing,
        "resourceDestination",
        "resourceDestinationLiteral",
        "resourceDestinationLiteralMarker",
        "resourceDestinationRaw",
        "resourceDestinationString",
        32
      )(code2);
    }
    function resourceDestinationAfter(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceBetween)(code2) : resourceEnd(code2);
    }
    function resourceDestinationMissing(code2) {
      return nok(code2);
    }
    function resourceBetween(code2) {
      if (code2 === 34 || code2 === 39 || code2 === 40) {
        return factoryTitle(
          effects,
          resourceTitleAfter,
          nok,
          "resourceTitle",
          "resourceTitleMarker",
          "resourceTitleString"
        )(code2);
      }
      return resourceEnd(code2);
    }
    function resourceTitleAfter(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceEnd)(code2) : resourceEnd(code2);
    }
    function resourceEnd(code2) {
      if (code2 === 41) {
        effects.enter("resourceMarker");
        effects.consume(code2);
        effects.exit("resourceMarker");
        effects.exit("resource");
        return ok2;
      }
      return nok(code2);
    }
  }
  function tokenizeReferenceFull(effects, ok2, nok) {
    const self2 = this;
    return referenceFull;
    function referenceFull(code2) {
      return factoryLabel.call(
        self2,
        effects,
        referenceFullAfter,
        referenceFullMissing,
        "reference",
        "referenceMarker",
        "referenceString"
      )(code2);
    }
    function referenceFullAfter(code2) {
      return self2.parser.defined.includes(
        normalizeIdentifier(
          self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
        )
      ) ? ok2(code2) : nok(code2);
    }
    function referenceFullMissing(code2) {
      return nok(code2);
    }
  }
  function tokenizeReferenceCollapsed(effects, ok2, nok) {
    return referenceCollapsedStart;
    function referenceCollapsedStart(code2) {
      effects.enter("reference");
      effects.enter("referenceMarker");
      effects.consume(code2);
      effects.exit("referenceMarker");
      return referenceCollapsedOpen;
    }
    function referenceCollapsedOpen(code2) {
      if (code2 === 93) {
        effects.enter("referenceMarker");
        effects.consume(code2);
        effects.exit("referenceMarker");
        effects.exit("reference");
        return ok2;
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/label-start-image.js
  var labelStartImage = {
    name: "labelStartImage",
    tokenize: tokenizeLabelStartImage,
    resolveAll: labelEnd.resolveAll
  };
  function tokenizeLabelStartImage(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      effects.enter("labelImage");
      effects.enter("labelImageMarker");
      effects.consume(code2);
      effects.exit("labelImageMarker");
      return open;
    }
    function open(code2) {
      if (code2 === 91) {
        effects.enter("labelMarker");
        effects.consume(code2);
        effects.exit("labelMarker");
        effects.exit("labelImage");
        return after3;
      }
      return nok(code2);
    }
    function after3(code2) {
      return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code2) : ok2(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/label-start-link.js
  var labelStartLink = {
    name: "labelStartLink",
    tokenize: tokenizeLabelStartLink,
    resolveAll: labelEnd.resolveAll
  };
  function tokenizeLabelStartLink(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      effects.enter("labelLink");
      effects.enter("labelMarker");
      effects.consume(code2);
      effects.exit("labelMarker");
      effects.exit("labelLink");
      return after3;
    }
    function after3(code2) {
      return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code2) : ok2(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/line-ending.js
  var lineEnding = {
    name: "lineEnding",
    tokenize: tokenizeLineEnding
  };
  function tokenizeLineEnding(effects, ok2) {
    return start2;
    function start2(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, ok2, "linePrefix");
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/thematic-break.js
  var thematicBreak = {
    name: "thematicBreak",
    tokenize: tokenizeThematicBreak
  };
  function tokenizeThematicBreak(effects, ok2, nok) {
    let size3 = 0;
    let marker;
    return start2;
    function start2(code2) {
      effects.enter("thematicBreak");
      return before3(code2);
    }
    function before3(code2) {
      marker = code2;
      return atBreak(code2);
    }
    function atBreak(code2) {
      if (code2 === marker) {
        effects.enter("thematicBreakSequence");
        return sequence(code2);
      }
      if (size3 >= 3 && (code2 === null || markdownLineEnding(code2))) {
        effects.exit("thematicBreak");
        return ok2(code2);
      }
      return nok(code2);
    }
    function sequence(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        size3++;
        return sequence;
      }
      effects.exit("thematicBreakSequence");
      return markdownSpace(code2) ? factorySpace(effects, atBreak, "whitespace")(code2) : atBreak(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/list.js
  var list = {
    name: "list",
    tokenize: tokenizeListStart,
    continuation: {
      tokenize: tokenizeListContinuation
    },
    exit: tokenizeListEnd
  };
  var listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: true
  };
  var indentConstruct = {
    tokenize: tokenizeIndent,
    partial: true
  };
  function tokenizeListStart(effects, ok2, nok) {
    const self2 = this;
    const tail = self2.events[self2.events.length - 1];
    let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    let size3 = 0;
    return start2;
    function start2(code2) {
      const kind = self2.containerState.type || (code2 === 42 || code2 === 43 || code2 === 45 ? "listUnordered" : "listOrdered");
      if (kind === "listUnordered" ? !self2.containerState.marker || code2 === self2.containerState.marker : asciiDigit(code2)) {
        if (!self2.containerState.type) {
          self2.containerState.type = kind;
          effects.enter(kind, {
            _container: true
          });
        }
        if (kind === "listUnordered") {
          effects.enter("listItemPrefix");
          return code2 === 42 || code2 === 45 ? effects.check(thematicBreak, nok, atMarker)(code2) : atMarker(code2);
        }
        if (!self2.interrupt || code2 === 49) {
          effects.enter("listItemPrefix");
          effects.enter("listItemValue");
          return inside(code2);
        }
      }
      return nok(code2);
    }
    function inside(code2) {
      if (asciiDigit(code2) && ++size3 < 10) {
        effects.consume(code2);
        return inside;
      }
      if ((!self2.interrupt || size3 < 2) && (self2.containerState.marker ? code2 === self2.containerState.marker : code2 === 41 || code2 === 46)) {
        effects.exit("listItemValue");
        return atMarker(code2);
      }
      return nok(code2);
    }
    function atMarker(code2) {
      effects.enter("listItemMarker");
      effects.consume(code2);
      effects.exit("listItemMarker");
      self2.containerState.marker = self2.containerState.marker || code2;
      return effects.check(
        blankLine,
        // Can’t be empty when interrupting.
        self2.interrupt ? nok : onBlank,
        effects.attempt(
          listItemPrefixWhitespaceConstruct,
          endOfPrefix,
          otherPrefix
        )
      );
    }
    function onBlank(code2) {
      self2.containerState.initialBlankLine = true;
      initialSize++;
      return endOfPrefix(code2);
    }
    function otherPrefix(code2) {
      if (markdownSpace(code2)) {
        effects.enter("listItemPrefixWhitespace");
        effects.consume(code2);
        effects.exit("listItemPrefixWhitespace");
        return endOfPrefix;
      }
      return nok(code2);
    }
    function endOfPrefix(code2) {
      self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit("listItemPrefix"), true).length;
      return ok2(code2);
    }
  }
  function tokenizeListContinuation(effects, ok2, nok) {
    const self2 = this;
    self2.containerState._closeFlow = void 0;
    return effects.check(blankLine, onBlank, notBlank);
    function onBlank(code2) {
      self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
      return factorySpace(
        effects,
        ok2,
        "listItemIndent",
        self2.containerState.size + 1
      )(code2);
    }
    function notBlank(code2) {
      if (self2.containerState.furtherBlankLines || !markdownSpace(code2)) {
        self2.containerState.furtherBlankLines = void 0;
        self2.containerState.initialBlankLine = void 0;
        return notInCurrentItem(code2);
      }
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return effects.attempt(indentConstruct, ok2, notInCurrentItem)(code2);
    }
    function notInCurrentItem(code2) {
      self2.containerState._closeFlow = true;
      self2.interrupt = void 0;
      return factorySpace(
        effects,
        effects.attempt(list, ok2, nok),
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(code2);
    }
  }
  function tokenizeIndent(effects, ok2, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "listItemIndent",
      self2.containerState.size + 1
    );
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok2(code2) : nok(code2);
    }
  }
  function tokenizeListEnd(effects) {
    effects.exit(this.containerState.type);
  }
  function tokenizeListItemPrefixWhitespace(effects, ok2, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "listItemPrefixWhitespace",
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1
    );
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return !markdownSpace(code2) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok2(code2) : nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/setext-underline.js
  var setextUnderline = {
    name: "setextUnderline",
    tokenize: tokenizeSetextUnderline,
    resolveTo: resolveToSetextUnderline
  };
  function resolveToSetextUnderline(events2, context) {
    let index2 = events2.length;
    let content3;
    let text4;
    let definition2;
    while (index2--) {
      if (events2[index2][0] === "enter") {
        if (events2[index2][1].type === "content") {
          content3 = index2;
          break;
        }
        if (events2[index2][1].type === "paragraph") {
          text4 = index2;
        }
      } else {
        if (events2[index2][1].type === "content") {
          events2.splice(index2, 1);
        }
        if (!definition2 && events2[index2][1].type === "definition") {
          definition2 = index2;
        }
      }
    }
    const heading2 = {
      type: "setextHeading",
      start: Object.assign({}, events2[text4][1].start),
      end: Object.assign({}, events2[events2.length - 1][1].end)
    };
    events2[text4][1].type = "setextHeadingText";
    if (definition2) {
      events2.splice(text4, 0, ["enter", heading2, context]);
      events2.splice(definition2 + 1, 0, ["exit", events2[content3][1], context]);
      events2[content3][1].end = Object.assign({}, events2[definition2][1].end);
    } else {
      events2[content3][1] = heading2;
    }
    events2.push(["exit", heading2, context]);
    return events2;
  }
  function tokenizeSetextUnderline(effects, ok2, nok) {
    const self2 = this;
    let marker;
    return start2;
    function start2(code2) {
      let index2 = self2.events.length;
      let paragraph2;
      while (index2--) {
        if (self2.events[index2][1].type !== "lineEnding" && self2.events[index2][1].type !== "linePrefix" && self2.events[index2][1].type !== "content") {
          paragraph2 = self2.events[index2][1].type === "paragraph";
          break;
        }
      }
      if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph2)) {
        effects.enter("setextHeadingLine");
        marker = code2;
        return before3(code2);
      }
      return nok(code2);
    }
    function before3(code2) {
      effects.enter("setextHeadingLineSequence");
      return inside(code2);
    }
    function inside(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        return inside;
      }
      effects.exit("setextHeadingLineSequence");
      return markdownSpace(code2) ? factorySpace(effects, after3, "lineSuffix")(code2) : after3(code2);
    }
    function after3(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("setextHeadingLine");
        return ok2(code2);
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark/lib/initialize/flow.js
  var flow = {
    tokenize: initializeFlow
  };
  function initializeFlow(effects) {
    const self2 = this;
    const initial = effects.attempt(
      // Try to parse a blank line.
      blankLine,
      atBlankEnding,
      // Try to parse initial flow (essentially, only code).
      effects.attempt(
        this.parser.constructs.flowInitial,
        afterConstruct,
        factorySpace(
          effects,
          effects.attempt(
            this.parser.constructs.flow,
            afterConstruct,
            effects.attempt(content2, afterConstruct)
          ),
          "linePrefix"
        )
      )
    );
    return initial;
    function atBlankEnding(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("lineEndingBlank");
      effects.consume(code2);
      effects.exit("lineEndingBlank");
      self2.currentConstruct = void 0;
      return initial;
    }
    function afterConstruct(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      self2.currentConstruct = void 0;
      return initial;
    }
  }

  // ../node_modules/micromark/lib/initialize/text.js
  var resolver = {
    resolveAll: createResolver2()
  };
  var string3 = initializeFactory("string");
  var text = initializeFactory("text");
  function initializeFactory(field) {
    return {
      tokenize: initializeText,
      resolveAll: createResolver2(
        field === "text" ? resolveAllLineSuffixes : void 0
      )
    };
    function initializeText(effects) {
      const self2 = this;
      const constructs2 = this.parser.constructs[field];
      const text4 = effects.attempt(constructs2, start2, notText);
      return start2;
      function start2(code2) {
        return atBreak(code2) ? text4(code2) : notText(code2);
      }
      function notText(code2) {
        if (code2 === null) {
          effects.consume(code2);
          return;
        }
        effects.enter("data");
        effects.consume(code2);
        return data;
      }
      function data(code2) {
        if (atBreak(code2)) {
          effects.exit("data");
          return text4(code2);
        }
        effects.consume(code2);
        return data;
      }
      function atBreak(code2) {
        if (code2 === null) {
          return true;
        }
        const list3 = constructs2[code2];
        let index2 = -1;
        if (list3) {
          while (++index2 < list3.length) {
            const item = list3[index2];
            if (!item.previous || item.previous.call(self2, self2.previous)) {
              return true;
            }
          }
        }
        return false;
      }
    }
  }
  function createResolver2(extraResolver) {
    return resolveAllText;
    function resolveAllText(events2, context) {
      let index2 = -1;
      let enter;
      while (++index2 <= events2.length) {
        if (enter === void 0) {
          if (events2[index2] && events2[index2][1].type === "data") {
            enter = index2;
            index2++;
          }
        } else if (!events2[index2] || events2[index2][1].type !== "data") {
          if (index2 !== enter + 2) {
            events2[enter][1].end = events2[index2 - 1][1].end;
            events2.splice(enter + 2, index2 - enter - 2);
            index2 = enter + 2;
          }
          enter = void 0;
        }
      }
      return extraResolver ? extraResolver(events2, context) : events2;
    }
  }
  function resolveAllLineSuffixes(events2, context) {
    let eventIndex = 0;
    while (++eventIndex <= events2.length) {
      if ((eventIndex === events2.length || events2[eventIndex][1].type === "lineEnding") && events2[eventIndex - 1][1].type === "data") {
        const data = events2[eventIndex - 1][1];
        const chunks = context.sliceStream(data);
        let index2 = chunks.length;
        let bufferIndex = -1;
        let size3 = 0;
        let tabs;
        while (index2--) {
          const chunk = chunks[index2];
          if (typeof chunk === "string") {
            bufferIndex = chunk.length;
            while (chunk.charCodeAt(bufferIndex - 1) === 32) {
              size3++;
              bufferIndex--;
            }
            if (bufferIndex)
              break;
            bufferIndex = -1;
          } else if (chunk === -2) {
            tabs = true;
            size3++;
          } else if (chunk === -1) {
          } else {
            index2++;
            break;
          }
        }
        if (size3) {
          const token2 = {
            type: eventIndex === events2.length || tabs || size3 < 2 ? "lineSuffix" : "hardBreakTrailing",
            start: {
              line: data.end.line,
              column: data.end.column - size3,
              offset: data.end.offset - size3,
              _index: data.start._index + index2,
              _bufferIndex: index2 ? bufferIndex : data.start._bufferIndex + bufferIndex
            },
            end: Object.assign({}, data.end)
          };
          data.end = Object.assign({}, token2.start);
          if (data.start.offset === data.end.offset) {
            Object.assign(data, token2);
          } else {
            events2.splice(
              eventIndex,
              0,
              ["enter", token2, context],
              ["exit", token2, context]
            );
            eventIndex += 2;
          }
        }
        eventIndex++;
      }
    }
    return events2;
  }

  // ../node_modules/micromark/lib/create-tokenizer.js
  function createTokenizer(parser, initialize, from2) {
    let point6 = Object.assign(
      from2 ? Object.assign({}, from2) : {
        line: 1,
        column: 1,
        offset: 0
      },
      {
        _index: 0,
        _bufferIndex: -1
      }
    );
    const columnStart = {};
    const resolveAllConstructs = [];
    let chunks = [];
    let stack = [];
    let consumed = true;
    const effects = {
      consume,
      enter,
      exit: exit2,
      attempt: constructFactory(onsuccessfulconstruct),
      check: constructFactory(onsuccessfulcheck),
      interrupt: constructFactory(onsuccessfulcheck, {
        interrupt: true
      })
    };
    const context = {
      previous: null,
      code: null,
      containerState: {},
      events: [],
      parser,
      sliceStream,
      sliceSerialize,
      now,
      defineSkip,
      write
    };
    let state = initialize.tokenize.call(context, effects);
    let expectedCode;
    if (initialize.resolveAll) {
      resolveAllConstructs.push(initialize);
    }
    return context;
    function write(slice2) {
      chunks = push(chunks, slice2);
      main();
      if (chunks[chunks.length - 1] !== null) {
        return [];
      }
      addResult(initialize, 0);
      context.events = resolveAll(resolveAllConstructs, context.events, context);
      return context.events;
    }
    function sliceSerialize(token2, expandTabs) {
      return serializeChunks(sliceStream(token2), expandTabs);
    }
    function sliceStream(token2) {
      return sliceChunks(chunks, token2);
    }
    function now() {
      const { line: line2, column: column2, offset: offset3, _index, _bufferIndex } = point6;
      return {
        line: line2,
        column: column2,
        offset: offset3,
        _index,
        _bufferIndex
      };
    }
    function defineSkip(value) {
      columnStart[value.line] = value.column;
      accountForPotentialSkip();
    }
    function main() {
      let chunkIndex;
      while (point6._index < chunks.length) {
        const chunk = chunks[point6._index];
        if (typeof chunk === "string") {
          chunkIndex = point6._index;
          if (point6._bufferIndex < 0) {
            point6._bufferIndex = 0;
          }
          while (point6._index === chunkIndex && point6._bufferIndex < chunk.length) {
            go(chunk.charCodeAt(point6._bufferIndex));
          }
        } else {
          go(chunk);
        }
      }
    }
    function go(code2) {
      consumed = void 0;
      expectedCode = code2;
      state = state(code2);
    }
    function consume(code2) {
      if (markdownLineEnding(code2)) {
        point6.line++;
        point6.column = 1;
        point6.offset += code2 === -3 ? 2 : 1;
        accountForPotentialSkip();
      } else if (code2 !== -1) {
        point6.column++;
        point6.offset++;
      }
      if (point6._bufferIndex < 0) {
        point6._index++;
      } else {
        point6._bufferIndex++;
        if (point6._bufferIndex === chunks[point6._index].length) {
          point6._bufferIndex = -1;
          point6._index++;
        }
      }
      context.previous = code2;
      consumed = true;
    }
    function enter(type, fields) {
      const token2 = fields || {};
      token2.type = type;
      token2.start = now();
      context.events.push(["enter", token2, context]);
      stack.push(token2);
      return token2;
    }
    function exit2(type) {
      const token2 = stack.pop();
      token2.end = now();
      context.events.push(["exit", token2, context]);
      return token2;
    }
    function onsuccessfulconstruct(construct, info) {
      addResult(construct, info.from);
    }
    function onsuccessfulcheck(_3, info) {
      info.restore();
    }
    function constructFactory(onreturn, fields) {
      return hook;
      function hook(constructs2, returnState, bogusState) {
        let listOfConstructs;
        let constructIndex;
        let currentConstruct;
        let info;
        return Array.isArray(constructs2) ? handleListOfConstructs(constructs2) : "tokenize" in constructs2 ? (
          // @ts-expect-error Looks like a construct.
          handleListOfConstructs([constructs2])
        ) : handleMapOfConstructs(constructs2);
        function handleMapOfConstructs(map) {
          return start2;
          function start2(code2) {
            const def = code2 !== null && map[code2];
            const all3 = code2 !== null && map.null;
            const list3 = [
              // To do: add more extension tests.
              /* c8 ignore next 2 */
              ...Array.isArray(def) ? def : def ? [def] : [],
              ...Array.isArray(all3) ? all3 : all3 ? [all3] : []
            ];
            return handleListOfConstructs(list3)(code2);
          }
        }
        function handleListOfConstructs(list3) {
          listOfConstructs = list3;
          constructIndex = 0;
          if (list3.length === 0) {
            return bogusState;
          }
          return handleConstruct(list3[constructIndex]);
        }
        function handleConstruct(construct) {
          return start2;
          function start2(code2) {
            info = store();
            currentConstruct = construct;
            if (!construct.partial) {
              context.currentConstruct = construct;
            }
            if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
              return nok(code2);
            }
            return construct.tokenize.call(
              // If we do have fields, create an object w/ `context` as its
              // prototype.
              // This allows a “live binding”, which is needed for `interrupt`.
              fields ? Object.assign(Object.create(context), fields) : context,
              effects,
              ok2,
              nok
            )(code2);
          }
        }
        function ok2(code2) {
          consumed = true;
          onreturn(currentConstruct, info);
          return returnState;
        }
        function nok(code2) {
          consumed = true;
          info.restore();
          if (++constructIndex < listOfConstructs.length) {
            return handleConstruct(listOfConstructs[constructIndex]);
          }
          return bogusState;
        }
      }
    }
    function addResult(construct, from3) {
      if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
        resolveAllConstructs.push(construct);
      }
      if (construct.resolve) {
        splice(
          context.events,
          from3,
          context.events.length - from3,
          construct.resolve(context.events.slice(from3), context)
        );
      }
      if (construct.resolveTo) {
        context.events = construct.resolveTo(context.events, context);
      }
    }
    function store() {
      const startPoint = now();
      const startPrevious = context.previous;
      const startCurrentConstruct = context.currentConstruct;
      const startEventsIndex = context.events.length;
      const startStack = Array.from(stack);
      return {
        restore,
        from: startEventsIndex
      };
      function restore() {
        point6 = startPoint;
        context.previous = startPrevious;
        context.currentConstruct = startCurrentConstruct;
        context.events.length = startEventsIndex;
        stack = startStack;
        accountForPotentialSkip();
      }
    }
    function accountForPotentialSkip() {
      if (point6.line in columnStart && point6.column < 2) {
        point6.column = columnStart[point6.line];
        point6.offset += columnStart[point6.line] - 1;
      }
    }
  }
  function sliceChunks(chunks, token2) {
    const startIndex = token2.start._index;
    const startBufferIndex = token2.start._bufferIndex;
    const endIndex = token2.end._index;
    const endBufferIndex = token2.end._bufferIndex;
    let view;
    if (startIndex === endIndex) {
      view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
    } else {
      view = chunks.slice(startIndex, endIndex);
      if (startBufferIndex > -1) {
        const head = view[0];
        if (typeof head === "string") {
          view[0] = head.slice(startBufferIndex);
        } else {
          view.shift();
        }
      }
      if (endBufferIndex > 0) {
        view.push(chunks[endIndex].slice(0, endBufferIndex));
      }
    }
    return view;
  }
  function serializeChunks(chunks, expandTabs) {
    let index2 = -1;
    const result = [];
    let atTab;
    while (++index2 < chunks.length) {
      const chunk = chunks[index2];
      let value;
      if (typeof chunk === "string") {
        value = chunk;
      } else
        switch (chunk) {
          case -5: {
            value = "\r";
            break;
          }
          case -4: {
            value = "\n";
            break;
          }
          case -3: {
            value = "\r\n";
            break;
          }
          case -2: {
            value = expandTabs ? " " : "	";
            break;
          }
          case -1: {
            if (!expandTabs && atTab)
              continue;
            value = " ";
            break;
          }
          default: {
            value = String.fromCharCode(chunk);
          }
        }
      atTab = chunk === -2;
      result.push(value);
    }
    return result.join("");
  }

  // ../node_modules/micromark/lib/constructs.js
  var constructs_exports = {};
  __export(constructs_exports, {
    attentionMarkers: () => attentionMarkers,
    contentInitial: () => contentInitial,
    disable: () => disable,
    document: () => document3,
    flow: () => flow2,
    flowInitial: () => flowInitial,
    insideSpan: () => insideSpan,
    string: () => string4,
    text: () => text2
  });
  var document3 = {
    [42]: list,
    [43]: list,
    [45]: list,
    [48]: list,
    [49]: list,
    [50]: list,
    [51]: list,
    [52]: list,
    [53]: list,
    [54]: list,
    [55]: list,
    [56]: list,
    [57]: list,
    [62]: blockQuote
  };
  var contentInitial = {
    [91]: definition
  };
  var flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented
  };
  var flow2 = {
    [35]: headingAtx,
    [42]: thematicBreak,
    [45]: [setextUnderline, thematicBreak],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak,
    [96]: codeFenced,
    [126]: codeFenced
  };
  var string4 = {
    [38]: characterReference,
    [92]: characterEscape
  };
  var text2 = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [autolink, htmlText],
    [91]: labelStartLink,
    [92]: [hardBreakEscape, characterEscape],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText
  };
  var insideSpan = {
    null: [attention, resolver]
  };
  var attentionMarkers = {
    null: [42, 95]
  };
  var disable = {
    null: []
  };

  // ../node_modules/micromark/lib/parse.js
  function parse2(options) {
    const settings = options || {};
    const constructs2 = (
      /** @type {FullNormalizedExtension} */
      combineExtensions([constructs_exports, ...settings.extensions || []])
    );
    const parser = {
      defined: [],
      lazy: {},
      constructs: constructs2,
      content: create3(content),
      document: create3(document2),
      flow: create3(flow),
      string: create3(string3),
      text: create3(text)
    };
    return parser;
    function create3(initial) {
      return creator;
      function creator(from2) {
        return createTokenizer(parser, initial, from2);
      }
    }
  }

  // ../node_modules/micromark/lib/preprocess.js
  var search = /[\0\t\n\r]/g;
  function preprocess() {
    let column2 = 1;
    let buffer2 = "";
    let start2 = true;
    let atCarriageReturn;
    return preprocessor;
    function preprocessor(value, encoding, end2) {
      const chunks = [];
      let match2;
      let next4;
      let startPosition;
      let endPosition;
      let code2;
      value = buffer2 + value.toString(encoding);
      startPosition = 0;
      buffer2 = "";
      if (start2) {
        if (value.charCodeAt(0) === 65279) {
          startPosition++;
        }
        start2 = void 0;
      }
      while (startPosition < value.length) {
        search.lastIndex = startPosition;
        match2 = search.exec(value);
        endPosition = match2 && match2.index !== void 0 ? match2.index : value.length;
        code2 = value.charCodeAt(endPosition);
        if (!match2) {
          buffer2 = value.slice(startPosition);
          break;
        }
        if (code2 === 10 && startPosition === endPosition && atCarriageReturn) {
          chunks.push(-3);
          atCarriageReturn = void 0;
        } else {
          if (atCarriageReturn) {
            chunks.push(-5);
            atCarriageReturn = void 0;
          }
          if (startPosition < endPosition) {
            chunks.push(value.slice(startPosition, endPosition));
            column2 += endPosition - startPosition;
          }
          switch (code2) {
            case 0: {
              chunks.push(65533);
              column2++;
              break;
            }
            case 9: {
              next4 = Math.ceil(column2 / 4) * 4;
              chunks.push(-2);
              while (column2++ < next4)
                chunks.push(-1);
              break;
            }
            case 10: {
              chunks.push(-4);
              column2 = 1;
              break;
            }
            default: {
              atCarriageReturn = true;
              column2 = 1;
            }
          }
        }
        startPosition = endPosition + 1;
      }
      if (end2) {
        if (atCarriageReturn)
          chunks.push(-5);
        if (buffer2)
          chunks.push(buffer2);
        chunks.push(null);
      }
      return chunks;
    }
  }

  // ../node_modules/micromark/lib/postprocess.js
  function postprocess(events2) {
    while (!subtokenize(events2)) {
    }
    return events2;
  }

  // ../node_modules/micromark-util-decode-numeric-character-reference/index.js
  function decodeNumericCharacterReference(value, base2) {
    const code2 = Number.parseInt(value, base2);
    if (
      // C0 except for HT, LF, FF, CR, space.
      code2 < 9 || code2 === 11 || code2 > 13 && code2 < 32 || // Control character (DEL) of C0, and C1 controls.
      code2 > 126 && code2 < 160 || // Lone high surrogates and low surrogates.
      code2 > 55295 && code2 < 57344 || // Noncharacters.
      code2 > 64975 && code2 < 65008 || (code2 & 65535) === 65535 || (code2 & 65535) === 65534 || // Out of range
      code2 > 1114111
    ) {
      return "\uFFFD";
    }
    return String.fromCharCode(code2);
  }

  // ../node_modules/micromark-util-decode-string/index.js
  var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
  function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
  }
  function decode($0, $1, $2) {
    if ($1) {
      return $1;
    }
    const head = $2.charCodeAt(0);
    if (head === 35) {
      const head2 = $2.charCodeAt(1);
      const hex = head2 === 120 || head2 === 88;
      return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
    }
    return decodeNamedCharacterReference($2) || $0;
  }

  // ../node_modules/mdast-util-from-markdown/lib/index.js
  var own2 = {}.hasOwnProperty;
  var fromMarkdown = (
    /**
     * @type {(
     *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
     *   ((value: Value, options?: Options | null | undefined) => Root)
     * )}
     */
    /**
     * @param {Value} value
     * @param {Encoding | Options | null | undefined} [encoding]
     * @param {Options | null | undefined} [options]
     * @returns {Root}
     */
    function(value, encoding, options) {
      if (typeof encoding !== "string") {
        options = encoding;
        encoding = void 0;
      }
      return compiler(options)(
        postprocess(
          parse2(options).document().write(preprocess()(value, encoding, true))
        )
      );
    }
  );
  function compiler(options) {
    const config = {
      transforms: [],
      canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
      enter: {
        autolink: opener(link2),
        autolinkProtocol: onenterdata,
        autolinkEmail: onenterdata,
        atxHeading: opener(heading2),
        blockQuote: opener(blockQuote2),
        characterEscape: onenterdata,
        characterReference: onenterdata,
        codeFenced: opener(codeFlow),
        codeFencedFenceInfo: buffer2,
        codeFencedFenceMeta: buffer2,
        codeIndented: opener(codeFlow, buffer2),
        codeText: opener(codeText2, buffer2),
        codeTextData: onenterdata,
        data: onenterdata,
        codeFlowValue: onenterdata,
        definition: opener(definition2),
        definitionDestinationString: buffer2,
        definitionLabelString: buffer2,
        definitionTitleString: buffer2,
        emphasis: opener(emphasis2),
        hardBreakEscape: opener(hardBreak2),
        hardBreakTrailing: opener(hardBreak2),
        htmlFlow: opener(html4, buffer2),
        htmlFlowData: onenterdata,
        htmlText: opener(html4, buffer2),
        htmlTextData: onenterdata,
        image: opener(image2),
        label: buffer2,
        link: opener(link2),
        listItem: opener(listItem2),
        listItemValue: onenterlistitemvalue,
        listOrdered: opener(list3, onenterlistordered),
        listUnordered: opener(list3),
        paragraph: opener(paragraph2),
        reference: onenterreference,
        referenceString: buffer2,
        resourceDestinationString: buffer2,
        resourceTitleString: buffer2,
        setextHeading: opener(heading2),
        strong: opener(strong2),
        thematicBreak: opener(thematicBreak3)
      },
      exit: {
        atxHeading: closer(),
        atxHeadingSequence: onexitatxheadingsequence,
        autolink: closer(),
        autolinkEmail: onexitautolinkemail,
        autolinkProtocol: onexitautolinkprotocol,
        blockQuote: closer(),
        characterEscapeValue: onexitdata,
        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
        characterReferenceValue: onexitcharacterreferencevalue,
        codeFenced: closer(onexitcodefenced),
        codeFencedFence: onexitcodefencedfence,
        codeFencedFenceInfo: onexitcodefencedfenceinfo,
        codeFencedFenceMeta: onexitcodefencedfencemeta,
        codeFlowValue: onexitdata,
        codeIndented: closer(onexitcodeindented),
        codeText: closer(onexitcodetext),
        codeTextData: onexitdata,
        data: onexitdata,
        definition: closer(),
        definitionDestinationString: onexitdefinitiondestinationstring,
        definitionLabelString: onexitdefinitionlabelstring,
        definitionTitleString: onexitdefinitiontitlestring,
        emphasis: closer(),
        hardBreakEscape: closer(onexithardbreak),
        hardBreakTrailing: closer(onexithardbreak),
        htmlFlow: closer(onexithtmlflow),
        htmlFlowData: onexitdata,
        htmlText: closer(onexithtmltext),
        htmlTextData: onexitdata,
        image: closer(onexitimage),
        label: onexitlabel,
        labelText: onexitlabeltext,
        lineEnding: onexitlineending,
        link: closer(onexitlink),
        listItem: closer(),
        listOrdered: closer(),
        listUnordered: closer(),
        paragraph: closer(),
        referenceString: onexitreferencestring,
        resourceDestinationString: onexitresourcedestinationstring,
        resourceTitleString: onexitresourcetitlestring,
        resource: onexitresource,
        setextHeading: closer(onexitsetextheading),
        setextHeadingLineSequence: onexitsetextheadinglinesequence,
        setextHeadingText: onexitsetextheadingtext,
        strong: closer(),
        thematicBreak: closer()
      }
    };
    configure(config, (options || {}).mdastExtensions || []);
    const data = {};
    return compile2;
    function compile2(events2) {
      let tree = {
        type: "root",
        children: []
      };
      const context = {
        stack: [tree],
        tokenStack: [],
        config,
        enter,
        exit: exit2,
        buffer: buffer2,
        resume,
        setData,
        getData
      };
      const listStack = [];
      let index2 = -1;
      while (++index2 < events2.length) {
        if (events2[index2][1].type === "listOrdered" || events2[index2][1].type === "listUnordered") {
          if (events2[index2][0] === "enter") {
            listStack.push(index2);
          } else {
            const tail = listStack.pop();
            index2 = prepareList(events2, tail, index2);
          }
        }
      }
      index2 = -1;
      while (++index2 < events2.length) {
        const handler = config[events2[index2][0]];
        if (own2.call(handler, events2[index2][1].type)) {
          handler[events2[index2][1].type].call(
            Object.assign(
              {
                sliceSerialize: events2[index2][2].sliceSerialize
              },
              context
            ),
            events2[index2][1]
          );
        }
      }
      if (context.tokenStack.length > 0) {
        const tail = context.tokenStack[context.tokenStack.length - 1];
        const handler = tail[1] || defaultOnError;
        handler.call(context, void 0, tail[0]);
      }
      tree.position = {
        start: point4(
          events2.length > 0 ? events2[0][1].start : {
            line: 1,
            column: 1,
            offset: 0
          }
        ),
        end: point4(
          events2.length > 0 ? events2[events2.length - 2][1].end : {
            line: 1,
            column: 1,
            offset: 0
          }
        )
      };
      index2 = -1;
      while (++index2 < config.transforms.length) {
        tree = config.transforms[index2](tree) || tree;
      }
      return tree;
    }
    function prepareList(events2, start2, length2) {
      let index2 = start2 - 1;
      let containerBalance = -1;
      let listSpread = false;
      let listItem3;
      let lineIndex;
      let firstBlankLineIndex;
      let atMarker;
      while (++index2 <= length2) {
        const event = events2[index2];
        if (event[1].type === "listUnordered" || event[1].type === "listOrdered" || event[1].type === "blockQuote") {
          if (event[0] === "enter") {
            containerBalance++;
          } else {
            containerBalance--;
          }
          atMarker = void 0;
        } else if (event[1].type === "lineEndingBlank") {
          if (event[0] === "enter") {
            if (listItem3 && !atMarker && !containerBalance && !firstBlankLineIndex) {
              firstBlankLineIndex = index2;
            }
            atMarker = void 0;
          }
        } else if (event[1].type === "linePrefix" || event[1].type === "listItemValue" || event[1].type === "listItemMarker" || event[1].type === "listItemPrefix" || event[1].type === "listItemPrefixWhitespace") {
        } else {
          atMarker = void 0;
        }
        if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
          if (listItem3) {
            let tailIndex = index2;
            lineIndex = void 0;
            while (tailIndex--) {
              const tailEvent = events2[tailIndex];
              if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
                if (tailEvent[0] === "exit")
                  continue;
                if (lineIndex) {
                  events2[lineIndex][1].type = "lineEndingBlank";
                  listSpread = true;
                }
                tailEvent[1].type = "lineEnding";
                lineIndex = tailIndex;
              } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
              } else {
                break;
              }
            }
            if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
              listItem3._spread = true;
            }
            listItem3.end = Object.assign(
              {},
              lineIndex ? events2[lineIndex][1].start : event[1].end
            );
            events2.splice(lineIndex || index2, 0, ["exit", listItem3, event[2]]);
            index2++;
            length2++;
          }
          if (event[1].type === "listItemPrefix") {
            listItem3 = {
              type: "listItem",
              _spread: false,
              start: Object.assign({}, event[1].start),
              // @ts-expect-error: we’ll add `end` in a second.
              end: void 0
            };
            events2.splice(index2, 0, ["enter", listItem3, event[2]]);
            index2++;
            length2++;
            firstBlankLineIndex = void 0;
            atMarker = true;
          }
        }
      }
      events2[start2][1]._spread = listSpread;
      return length2;
    }
    function setData(key, value) {
      data[key] = value;
    }
    function getData(key) {
      return data[key];
    }
    function opener(create3, and) {
      return open;
      function open(token2) {
        enter.call(this, create3(token2), token2);
        if (and)
          and.call(this, token2);
      }
    }
    function buffer2() {
      this.stack.push({
        type: "fragment",
        children: []
      });
    }
    function enter(node5, token2, errorHandler) {
      const parent3 = this.stack[this.stack.length - 1];
      parent3.children.push(node5);
      this.stack.push(node5);
      this.tokenStack.push([token2, errorHandler]);
      node5.position = {
        start: point4(token2.start)
      };
      return node5;
    }
    function closer(and) {
      return close;
      function close(token2) {
        if (and)
          and.call(this, token2);
        exit2.call(this, token2);
      }
    }
    function exit2(token2, onExitError) {
      const node5 = this.stack.pop();
      const open = this.tokenStack.pop();
      if (!open) {
        throw new Error(
          "Cannot close `" + token2.type + "` (" + stringifyPosition({
            start: token2.start,
            end: token2.end
          }) + "): it\u2019s not open"
        );
      } else if (open[0].type !== token2.type) {
        if (onExitError) {
          onExitError.call(this, token2, open[0]);
        } else {
          const handler = open[1] || defaultOnError;
          handler.call(this, token2, open[0]);
        }
      }
      node5.position.end = point4(token2.end);
      return node5;
    }
    function resume() {
      return toString(this.stack.pop());
    }
    function onenterlistordered() {
      setData("expectingFirstListItemValue", true);
    }
    function onenterlistitemvalue(token2) {
      if (getData("expectingFirstListItemValue")) {
        const ancestor = this.stack[this.stack.length - 2];
        ancestor.start = Number.parseInt(this.sliceSerialize(token2), 10);
        setData("expectingFirstListItemValue");
      }
    }
    function onexitcodefencedfenceinfo() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.lang = data2;
    }
    function onexitcodefencedfencemeta() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.meta = data2;
    }
    function onexitcodefencedfence() {
      if (getData("flowCodeInside"))
        return;
      this.buffer();
      setData("flowCodeInside", true);
    }
    function onexitcodefenced() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
      setData("flowCodeInside");
    }
    function onexitcodeindented() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.value = data2.replace(/(\r?\n|\r)$/g, "");
    }
    function onexitdefinitionlabelstring(token2) {
      const label = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.label = label;
      node5.identifier = normalizeIdentifier(
        this.sliceSerialize(token2)
      ).toLowerCase();
    }
    function onexitdefinitiontitlestring() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.title = data2;
    }
    function onexitdefinitiondestinationstring() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.url = data2;
    }
    function onexitatxheadingsequence(token2) {
      const node5 = this.stack[this.stack.length - 1];
      if (!node5.depth) {
        const depth = this.sliceSerialize(token2).length;
        node5.depth = depth;
      }
    }
    function onexitsetextheadingtext() {
      setData("setextHeadingSlurpLineEnding", true);
    }
    function onexitsetextheadinglinesequence(token2) {
      const node5 = this.stack[this.stack.length - 1];
      node5.depth = this.sliceSerialize(token2).charCodeAt(0) === 61 ? 1 : 2;
    }
    function onexitsetextheading() {
      setData("setextHeadingSlurpLineEnding");
    }
    function onenterdata(token2) {
      const node5 = this.stack[this.stack.length - 1];
      let tail = node5.children[node5.children.length - 1];
      if (!tail || tail.type !== "text") {
        tail = text4();
        tail.position = {
          start: point4(token2.start)
        };
        node5.children.push(tail);
      }
      this.stack.push(tail);
    }
    function onexitdata(token2) {
      const tail = this.stack.pop();
      tail.value += this.sliceSerialize(token2);
      tail.position.end = point4(token2.end);
    }
    function onexitlineending(token2) {
      const context = this.stack[this.stack.length - 1];
      if (getData("atHardBreak")) {
        const tail = context.children[context.children.length - 1];
        tail.position.end = point4(token2.end);
        setData("atHardBreak");
        return;
      }
      if (!getData("setextHeadingSlurpLineEnding") && config.canContainEols.includes(context.type)) {
        onenterdata.call(this, token2);
        onexitdata.call(this, token2);
      }
    }
    function onexithardbreak() {
      setData("atHardBreak", true);
    }
    function onexithtmlflow() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.value = data2;
    }
    function onexithtmltext() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.value = data2;
    }
    function onexitcodetext() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.value = data2;
    }
    function onexitlink() {
      const node5 = this.stack[this.stack.length - 1];
      if (getData("inReference")) {
        const referenceType = getData("referenceType") || "shortcut";
        node5.type += "Reference";
        node5.referenceType = referenceType;
        delete node5.url;
        delete node5.title;
      } else {
        delete node5.identifier;
        delete node5.label;
      }
      setData("referenceType");
    }
    function onexitimage() {
      const node5 = this.stack[this.stack.length - 1];
      if (getData("inReference")) {
        const referenceType = getData("referenceType") || "shortcut";
        node5.type += "Reference";
        node5.referenceType = referenceType;
        delete node5.url;
        delete node5.title;
      } else {
        delete node5.identifier;
        delete node5.label;
      }
      setData("referenceType");
    }
    function onexitlabeltext(token2) {
      const string5 = this.sliceSerialize(token2);
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.label = decodeString(string5);
      ancestor.identifier = normalizeIdentifier(string5).toLowerCase();
    }
    function onexitlabel() {
      const fragment2 = this.stack[this.stack.length - 1];
      const value = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      setData("inReference", true);
      if (node5.type === "link") {
        const children = fragment2.children;
        node5.children = children;
      } else {
        node5.alt = value;
      }
    }
    function onexitresourcedestinationstring() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.url = data2;
    }
    function onexitresourcetitlestring() {
      const data2 = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.title = data2;
    }
    function onexitresource() {
      setData("inReference");
    }
    function onenterreference() {
      setData("referenceType", "collapsed");
    }
    function onexitreferencestring(token2) {
      const label = this.resume();
      const node5 = this.stack[this.stack.length - 1];
      node5.label = label;
      node5.identifier = normalizeIdentifier(
        this.sliceSerialize(token2)
      ).toLowerCase();
      setData("referenceType", "full");
    }
    function onexitcharacterreferencemarker(token2) {
      setData("characterReferenceType", token2.type);
    }
    function onexitcharacterreferencevalue(token2) {
      const data2 = this.sliceSerialize(token2);
      const type = getData("characterReferenceType");
      let value;
      if (type) {
        value = decodeNumericCharacterReference(
          data2,
          type === "characterReferenceMarkerNumeric" ? 10 : 16
        );
        setData("characterReferenceType");
      } else {
        const result = decodeNamedCharacterReference(data2);
        value = result;
      }
      const tail = this.stack.pop();
      tail.value += value;
      tail.position.end = point4(token2.end);
    }
    function onexitautolinkprotocol(token2) {
      onexitdata.call(this, token2);
      const node5 = this.stack[this.stack.length - 1];
      node5.url = this.sliceSerialize(token2);
    }
    function onexitautolinkemail(token2) {
      onexitdata.call(this, token2);
      const node5 = this.stack[this.stack.length - 1];
      node5.url = "mailto:" + this.sliceSerialize(token2);
    }
    function blockQuote2() {
      return {
        type: "blockquote",
        children: []
      };
    }
    function codeFlow() {
      return {
        type: "code",
        lang: null,
        meta: null,
        value: ""
      };
    }
    function codeText2() {
      return {
        type: "inlineCode",
        value: ""
      };
    }
    function definition2() {
      return {
        type: "definition",
        identifier: "",
        label: null,
        title: null,
        url: ""
      };
    }
    function emphasis2() {
      return {
        type: "emphasis",
        children: []
      };
    }
    function heading2() {
      return {
        type: "heading",
        depth: void 0,
        children: []
      };
    }
    function hardBreak2() {
      return {
        type: "break"
      };
    }
    function html4() {
      return {
        type: "html",
        value: ""
      };
    }
    function image2() {
      return {
        type: "image",
        title: null,
        url: "",
        alt: null
      };
    }
    function link2() {
      return {
        type: "link",
        title: null,
        url: "",
        children: []
      };
    }
    function list3(token2) {
      return {
        type: "list",
        ordered: token2.type === "listOrdered",
        start: null,
        spread: token2._spread,
        children: []
      };
    }
    function listItem2(token2) {
      return {
        type: "listItem",
        spread: token2._spread,
        checked: null,
        children: []
      };
    }
    function paragraph2() {
      return {
        type: "paragraph",
        children: []
      };
    }
    function strong2() {
      return {
        type: "strong",
        children: []
      };
    }
    function text4() {
      return {
        type: "text",
        value: ""
      };
    }
    function thematicBreak3() {
      return {
        type: "thematicBreak"
      };
    }
  }
  function point4(d3) {
    return {
      line: d3.line,
      column: d3.column,
      offset: d3.offset
    };
  }
  function configure(combined, extensions) {
    let index2 = -1;
    while (++index2 < extensions.length) {
      const value = extensions[index2];
      if (Array.isArray(value)) {
        configure(combined, value);
      } else {
        extension(combined, value);
      }
    }
  }
  function extension(combined, extension2) {
    let key;
    for (key in extension2) {
      if (own2.call(extension2, key)) {
        if (key === "canContainEols") {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
        } else if (key === "transforms") {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
        } else if (key === "enter" || key === "exit") {
          const right = extension2[key];
          if (right) {
            Object.assign(combined[key], right);
          }
        }
      }
    }
  }
  function defaultOnError(left, right) {
    if (left) {
      throw new Error(
        "Cannot close `" + left.type + "` (" + stringifyPosition({
          start: left.start,
          end: left.end
        }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
          start: right.start,
          end: right.end
        }) + ") is open"
      );
    } else {
      throw new Error(
        "Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
          start: right.start,
          end: right.end
        }) + ") is still open"
      );
    }
  }

  // ../node_modules/remark-parse/lib/index.js
  function remarkParse(options) {
    const parser = (doc) => {
      const settings = (
        /** @type {Options} */
        this.data("settings")
      );
      return fromMarkdown(
        doc,
        Object.assign({}, settings, options, {
          // Note: these options are not in the readme.
          // The goal is for them to be set by plugins on `data` instead of being
          // passed by users.
          extensions: this.data("micromarkExtensions") || [],
          mdastExtensions: this.data("fromMarkdownExtensions") || []
        })
      );
    };
    Object.assign(this, { Parser: parser });
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
  function blockquote(state, node5) {
    const result = {
      type: "element",
      tagName: "blockquote",
      properties: {},
      children: state.wrap(state.all(node5), true)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/break.js
  function hardBreak(state, node5) {
    const result = { type: "element", tagName: "br", properties: {}, children: [] };
    state.patch(node5, result);
    return [state.applyData(node5, result), { type: "text", value: "\n" }];
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/code.js
  function code(state, node5) {
    const value = node5.value ? node5.value + "\n" : "";
    const lang = node5.lang ? node5.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null;
    const properties = {};
    if (lang) {
      properties.className = ["language-" + lang];
    }
    let result = {
      type: "element",
      tagName: "code",
      properties,
      children: [{ type: "text", value }]
    };
    if (node5.meta) {
      result.data = { meta: node5.meta };
    }
    state.patch(node5, result);
    result = state.applyData(node5, result);
    result = { type: "element", tagName: "pre", properties: {}, children: [result] };
    state.patch(node5, result);
    return result;
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/delete.js
  function strikethrough(state, node5) {
    const result = {
      type: "element",
      tagName: "del",
      properties: {},
      children: state.all(node5)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
  function emphasis(state, node5) {
    const result = {
      type: "element",
      tagName: "em",
      properties: {},
      children: state.all(node5)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/micromark-util-sanitize-uri/index.js
  function normalizeUri(value) {
    const result = [];
    let index2 = -1;
    let start2 = 0;
    let skip = 0;
    while (++index2 < value.length) {
      const code2 = value.charCodeAt(index2);
      let replace2 = "";
      if (code2 === 37 && asciiAlphanumeric(value.charCodeAt(index2 + 1)) && asciiAlphanumeric(value.charCodeAt(index2 + 2))) {
        skip = 2;
      } else if (code2 < 128) {
        if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code2))) {
          replace2 = String.fromCharCode(code2);
        }
      } else if (code2 > 55295 && code2 < 57344) {
        const next4 = value.charCodeAt(index2 + 1);
        if (code2 < 56320 && next4 > 56319 && next4 < 57344) {
          replace2 = String.fromCharCode(code2, next4);
          skip = 1;
        } else {
          replace2 = "\uFFFD";
        }
      } else {
        replace2 = String.fromCharCode(code2);
      }
      if (replace2) {
        result.push(value.slice(start2, index2), encodeURIComponent(replace2));
        start2 = index2 + skip + 1;
        replace2 = "";
      }
      if (skip) {
        index2 += skip;
        skip = 0;
      }
    }
    return result.join("") + value.slice(start2);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
  function footnoteReference(state, node5) {
    const id = String(node5.identifier).toUpperCase();
    const safeId = normalizeUri(id.toLowerCase());
    const index2 = state.footnoteOrder.indexOf(id);
    let counter;
    if (index2 === -1) {
      state.footnoteOrder.push(id);
      state.footnoteCounts[id] = 1;
      counter = state.footnoteOrder.length;
    } else {
      state.footnoteCounts[id]++;
      counter = index2 + 1;
    }
    const reuseCounter = state.footnoteCounts[id];
    const link2 = {
      type: "element",
      tagName: "a",
      properties: {
        href: "#" + state.clobberPrefix + "fn-" + safeId,
        id: state.clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
        dataFootnoteRef: true,
        ariaDescribedBy: ["footnote-label"]
      },
      children: [{ type: "text", value: String(counter) }]
    };
    state.patch(node5, link2);
    const sup = {
      type: "element",
      tagName: "sup",
      properties: {},
      children: [link2]
    };
    state.patch(node5, sup);
    return state.applyData(node5, sup);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/footnote.js
  function footnote(state, node5) {
    const footnoteById = state.footnoteById;
    let no = 1;
    while (no in footnoteById)
      no++;
    const identifier2 = String(no);
    footnoteById[identifier2] = {
      type: "footnoteDefinition",
      identifier: identifier2,
      children: [{ type: "paragraph", children: node5.children }],
      position: node5.position
    };
    return footnoteReference(state, {
      type: "footnoteReference",
      identifier: identifier2,
      position: node5.position
    });
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/heading.js
  function heading(state, node5) {
    const result = {
      type: "element",
      tagName: "h" + node5.depth,
      properties: {},
      children: state.all(node5)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/html.js
  function html(state, node5) {
    if (state.dangerous) {
      const result = { type: "raw", value: node5.value };
      state.patch(node5, result);
      return state.applyData(node5, result);
    }
    return null;
  }

  // ../node_modules/mdast-util-to-hast/lib/revert.js
  function revert(state, node5) {
    const subtype = node5.referenceType;
    let suffix = "]";
    if (subtype === "collapsed") {
      suffix += "[]";
    } else if (subtype === "full") {
      suffix += "[" + (node5.label || node5.identifier) + "]";
    }
    if (node5.type === "imageReference") {
      return { type: "text", value: "![" + node5.alt + suffix };
    }
    const contents = state.all(node5);
    const head = contents[0];
    if (head && head.type === "text") {
      head.value = "[" + head.value;
    } else {
      contents.unshift({ type: "text", value: "[" });
    }
    const tail = contents[contents.length - 1];
    if (tail && tail.type === "text") {
      tail.value += suffix;
    } else {
      contents.push({ type: "text", value: suffix });
    }
    return contents;
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
  function imageReference(state, node5) {
    const def = state.definition(node5.identifier);
    if (!def) {
      return revert(state, node5);
    }
    const properties = { src: normalizeUri(def.url || ""), alt: node5.alt };
    if (def.title !== null && def.title !== void 0) {
      properties.title = def.title;
    }
    const result = { type: "element", tagName: "img", properties, children: [] };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/image.js
  function image(state, node5) {
    const properties = { src: normalizeUri(node5.url) };
    if (node5.alt !== null && node5.alt !== void 0) {
      properties.alt = node5.alt;
    }
    if (node5.title !== null && node5.title !== void 0) {
      properties.title = node5.title;
    }
    const result = { type: "element", tagName: "img", properties, children: [] };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
  function inlineCode(state, node5) {
    const text4 = { type: "text", value: node5.value.replace(/\r?\n|\r/g, " ") };
    state.patch(node5, text4);
    const result = {
      type: "element",
      tagName: "code",
      properties: {},
      children: [text4]
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
  function linkReference(state, node5) {
    const def = state.definition(node5.identifier);
    if (!def) {
      return revert(state, node5);
    }
    const properties = { href: normalizeUri(def.url || "") };
    if (def.title !== null && def.title !== void 0) {
      properties.title = def.title;
    }
    const result = {
      type: "element",
      tagName: "a",
      properties,
      children: state.all(node5)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/link.js
  function link(state, node5) {
    const properties = { href: normalizeUri(node5.url) };
    if (node5.title !== null && node5.title !== void 0) {
      properties.title = node5.title;
    }
    const result = {
      type: "element",
      tagName: "a",
      properties,
      children: state.all(node5)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/list-item.js
  function listItem(state, node5, parent3) {
    const results = state.all(node5);
    const loose = parent3 ? listLoose(parent3) : listItemLoose(node5);
    const properties = {};
    const children = [];
    if (typeof node5.checked === "boolean") {
      const head = results[0];
      let paragraph2;
      if (head && head.type === "element" && head.tagName === "p") {
        paragraph2 = head;
      } else {
        paragraph2 = { type: "element", tagName: "p", properties: {}, children: [] };
        results.unshift(paragraph2);
      }
      if (paragraph2.children.length > 0) {
        paragraph2.children.unshift({ type: "text", value: " " });
      }
      paragraph2.children.unshift({
        type: "element",
        tagName: "input",
        properties: { type: "checkbox", checked: node5.checked, disabled: true },
        children: []
      });
      properties.className = ["task-list-item"];
    }
    let index2 = -1;
    while (++index2 < results.length) {
      const child = results[index2];
      if (loose || index2 !== 0 || child.type !== "element" || child.tagName !== "p") {
        children.push({ type: "text", value: "\n" });
      }
      if (child.type === "element" && child.tagName === "p" && !loose) {
        children.push(...child.children);
      } else {
        children.push(child);
      }
    }
    const tail = results[results.length - 1];
    if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
      children.push({ type: "text", value: "\n" });
    }
    const result = { type: "element", tagName: "li", properties, children };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }
  function listLoose(node5) {
    let loose = false;
    if (node5.type === "list") {
      loose = node5.spread || false;
      const children = node5.children;
      let index2 = -1;
      while (!loose && ++index2 < children.length) {
        loose = listItemLoose(children[index2]);
      }
    }
    return loose;
  }
  function listItemLoose(node5) {
    const spread = node5.spread;
    return spread === void 0 || spread === null ? node5.children.length > 1 : spread;
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/list.js
  function list2(state, node5) {
    const properties = {};
    const results = state.all(node5);
    let index2 = -1;
    if (typeof node5.start === "number" && node5.start !== 1) {
      properties.start = node5.start;
    }
    while (++index2 < results.length) {
      const child = results[index2];
      if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
        properties.className = ["contains-task-list"];
        break;
      }
    }
    const result = {
      type: "element",
      tagName: node5.ordered ? "ol" : "ul",
      properties,
      children: state.wrap(results, true)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
  function paragraph(state, node5) {
    const result = {
      type: "element",
      tagName: "p",
      properties: {},
      children: state.all(node5)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/root.js
  function root(state, node5) {
    const result = { type: "root", children: state.wrap(state.all(node5)) };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/strong.js
  function strong(state, node5) {
    const result = {
      type: "element",
      tagName: "strong",
      properties: {},
      children: state.all(node5)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/unist-util-position/lib/index.js
  var pointStart = point5("start");
  var pointEnd = point5("end");
  function position3(node5) {
    return { start: pointStart(node5), end: pointEnd(node5) };
  }
  function point5(type) {
    return point6;
    function point6(node5) {
      const point7 = node5 && node5.position && node5.position[type] || {};
      return {
        // @ts-expect-error: in practice, null is allowed.
        line: point7.line || null,
        // @ts-expect-error: in practice, null is allowed.
        column: point7.column || null,
        // @ts-expect-error: in practice, null is allowed.
        offset: point7.offset > -1 ? point7.offset : null
      };
    }
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/table.js
  function table(state, node5) {
    const rows = state.all(node5);
    const firstRow = rows.shift();
    const tableContent = [];
    if (firstRow) {
      const head = {
        type: "element",
        tagName: "thead",
        properties: {},
        children: state.wrap([firstRow], true)
      };
      state.patch(node5.children[0], head);
      tableContent.push(head);
    }
    if (rows.length > 0) {
      const body = {
        type: "element",
        tagName: "tbody",
        properties: {},
        children: state.wrap(rows, true)
      };
      const start2 = pointStart(node5.children[1]);
      const end2 = pointEnd(node5.children[node5.children.length - 1]);
      if (start2.line && end2.line)
        body.position = { start: start2, end: end2 };
      tableContent.push(body);
    }
    const result = {
      type: "element",
      tagName: "table",
      properties: {},
      children: state.wrap(tableContent, true)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/table-row.js
  function tableRow(state, node5, parent3) {
    const siblings = parent3 ? parent3.children : void 0;
    const rowIndex = siblings ? siblings.indexOf(node5) : 1;
    const tagName = rowIndex === 0 ? "th" : "td";
    const align = parent3 && parent3.type === "table" ? parent3.align : void 0;
    const length2 = align ? align.length : node5.children.length;
    let cellIndex = -1;
    const cells = [];
    while (++cellIndex < length2) {
      const cell = node5.children[cellIndex];
      const properties = {};
      const alignValue = align ? align[cellIndex] : void 0;
      if (alignValue) {
        properties.align = alignValue;
      }
      let result2 = { type: "element", tagName, properties, children: [] };
      if (cell) {
        result2.children = state.all(cell);
        state.patch(cell, result2);
        result2 = state.applyData(node5, result2);
      }
      cells.push(result2);
    }
    const result = {
      type: "element",
      tagName: "tr",
      properties: {},
      children: state.wrap(cells, true)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
  function tableCell(state, node5) {
    const result = {
      type: "element",
      tagName: "td",
      // Assume body cell.
      properties: {},
      children: state.all(node5)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/trim-lines/index.js
  var tab = 9;
  var space = 32;
  function trimLines(value) {
    const source = String(value);
    const search2 = /\r?\n|\r/g;
    let match2 = search2.exec(source);
    let last2 = 0;
    const lines = [];
    while (match2) {
      lines.push(
        trimLine(source.slice(last2, match2.index), last2 > 0, true),
        match2[0]
      );
      last2 = match2.index + match2[0].length;
      match2 = search2.exec(source);
    }
    lines.push(trimLine(source.slice(last2), last2 > 0, false));
    return lines.join("");
  }
  function trimLine(value, start2, end2) {
    let startIndex = 0;
    let endIndex = value.length;
    if (start2) {
      let code2 = value.codePointAt(startIndex);
      while (code2 === tab || code2 === space) {
        startIndex++;
        code2 = value.codePointAt(startIndex);
      }
    }
    if (end2) {
      let code2 = value.codePointAt(endIndex - 1);
      while (code2 === tab || code2 === space) {
        endIndex--;
        code2 = value.codePointAt(endIndex - 1);
      }
    }
    return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/text.js
  function text3(state, node5) {
    const result = { type: "text", value: trimLines(String(node5.value)) };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
  function thematicBreak2(state, node5) {
    const result = {
      type: "element",
      tagName: "hr",
      properties: {},
      children: []
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/index.js
  var handlers = {
    blockquote,
    break: hardBreak,
    code,
    delete: strikethrough,
    emphasis,
    footnoteReference,
    footnote,
    heading,
    html,
    imageReference,
    image,
    inlineCode,
    linkReference,
    link,
    listItem,
    list: list2,
    paragraph,
    root,
    strong,
    table,
    tableCell,
    tableRow,
    text: text3,
    thematicBreak: thematicBreak2,
    toml: ignore,
    yaml: ignore,
    definition: ignore,
    footnoteDefinition: ignore
  };
  function ignore() {
    return null;
  }

  // ../node_modules/unist-util-is/lib/index.js
  var convert2 = (
    /**
     * @type {(
     *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
     *   ((test?: Test) => AssertAnything)
     * )}
     */
    /**
     * @param {Test} [test]
     * @returns {AssertAnything}
     */
    function(test) {
      if (test === void 0 || test === null) {
        return ok;
      }
      if (typeof test === "string") {
        return typeFactory(test);
      }
      if (typeof test === "object") {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
      }
      if (typeof test === "function") {
        return castFactory(test);
      }
      throw new Error("Expected function, string, or object as test");
    }
  );
  function anyFactory(tests) {
    const checks2 = [];
    let index2 = -1;
    while (++index2 < tests.length) {
      checks2[index2] = convert2(tests[index2]);
    }
    return castFactory(any);
    function any(...parameters) {
      let index3 = -1;
      while (++index3 < checks2.length) {
        if (checks2[index3].call(this, ...parameters))
          return true;
      }
      return false;
    }
  }
  function propsFactory(check) {
    return castFactory(all3);
    function all3(node5) {
      let key;
      for (key in check) {
        if (node5[key] !== check[key])
          return false;
      }
      return true;
    }
  }
  function typeFactory(check) {
    return castFactory(type);
    function type(node5) {
      return node5 && node5.type === check;
    }
  }
  function castFactory(check) {
    return assertion;
    function assertion(node5, ...parameters) {
      return Boolean(
        node5 && typeof node5 === "object" && "type" in node5 && // @ts-expect-error: fine.
        Boolean(check.call(this, node5, ...parameters))
      );
    }
  }
  function ok() {
    return true;
  }

  // ../node_modules/unist-util-visit-parents/lib/color.browser.js
  function color(d3) {
    return d3;
  }

  // ../node_modules/unist-util-visit-parents/lib/index.js
  var CONTINUE = true;
  var EXIT = false;
  var SKIP = "skip";
  var visitParents = (
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
     * )}
     */
    /**
     * @param {Node} tree
     * @param {Test} test
     * @param {Visitor<Node>} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {void}
     */
    function(tree, test, visitor, reverse) {
      if (typeof test === "function" && typeof visitor !== "function") {
        reverse = visitor;
        visitor = test;
        test = null;
      }
      const is3 = convert2(test);
      const step = reverse ? -1 : 1;
      factory(tree, void 0, [])();
      function factory(node5, index2, parents) {
        const value = node5 && typeof node5 === "object" ? node5 : {};
        if (typeof value.type === "string") {
          const name = (
            // `hast`
            typeof value.tagName === "string" ? value.tagName : (
              // `xast`
              typeof value.name === "string" ? value.name : void 0
            )
          );
          Object.defineProperty(visit2, "name", {
            value: "node (" + color(node5.type + (name ? "<" + name + ">" : "")) + ")"
          });
        }
        return visit2;
        function visit2() {
          let result = [];
          let subresult;
          let offset3;
          let grandparents;
          if (!test || is3(node5, index2, parents[parents.length - 1] || null)) {
            result = toResult(visitor(node5, parents));
            if (result[0] === EXIT) {
              return result;
            }
          }
          if (node5.children && result[0] !== SKIP) {
            offset3 = (reverse ? node5.children.length : -1) + step;
            grandparents = parents.concat(node5);
            while (offset3 > -1 && offset3 < node5.children.length) {
              subresult = factory(node5.children[offset3], offset3, grandparents)();
              if (subresult[0] === EXIT) {
                return subresult;
              }
              offset3 = typeof subresult[1] === "number" ? subresult[1] : offset3 + step;
            }
          }
          return result;
        }
      }
    }
  );
  function toResult(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "number") {
      return [CONTINUE, value];
    }
    return [value];
  }

  // ../node_modules/unist-util-visit/lib/index.js
  var visit = (
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
     * )}
     */
    /**
     * @param {Node} tree
     * @param {Test} test
     * @param {Visitor} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {void}
     */
    function(tree, test, visitor, reverse) {
      if (typeof test === "function" && typeof visitor !== "function") {
        reverse = visitor;
        visitor = test;
        test = null;
      }
      visitParents(tree, test, overload, reverse);
      function overload(node5, parents) {
        const parent3 = parents[parents.length - 1];
        return visitor(
          node5,
          parent3 ? parent3.children.indexOf(node5) : null,
          parent3
        );
      }
    }
  );

  // ../node_modules/unist-util-generated/lib/index.js
  function generated(node5) {
    return !node5 || !node5.position || !node5.position.start || !node5.position.start.line || !node5.position.start.column || !node5.position.end || !node5.position.end.line || !node5.position.end.column;
  }

  // ../node_modules/mdast-util-definitions/lib/index.js
  var own3 = {}.hasOwnProperty;
  function definitions(tree) {
    const cache3 = /* @__PURE__ */ Object.create(null);
    if (!tree || !tree.type) {
      throw new Error("mdast-util-definitions expected node");
    }
    visit(tree, "definition", (definition3) => {
      const id = clean(definition3.identifier);
      if (id && !own3.call(cache3, id)) {
        cache3[id] = definition3;
      }
    });
    return definition2;
    function definition2(identifier2) {
      const id = clean(identifier2);
      return id && own3.call(cache3, id) ? cache3[id] : null;
    }
  }
  function clean(value) {
    return String(value || "").toUpperCase();
  }

  // ../node_modules/mdast-util-to-hast/lib/state.js
  var own4 = {}.hasOwnProperty;
  function createState(tree, options) {
    const settings = options || {};
    const dangerous = settings.allowDangerousHtml || false;
    const footnoteById = {};
    state.dangerous = dangerous;
    state.clobberPrefix = settings.clobberPrefix === void 0 || settings.clobberPrefix === null ? "user-content-" : settings.clobberPrefix;
    state.footnoteLabel = settings.footnoteLabel || "Footnotes";
    state.footnoteLabelTagName = settings.footnoteLabelTagName || "h2";
    state.footnoteLabelProperties = settings.footnoteLabelProperties || {
      className: ["sr-only"]
    };
    state.footnoteBackLabel = settings.footnoteBackLabel || "Back to content";
    state.unknownHandler = settings.unknownHandler;
    state.passThrough = settings.passThrough;
    state.handlers = { ...handlers, ...settings.handlers };
    state.definition = definitions(tree);
    state.footnoteById = footnoteById;
    state.footnoteOrder = [];
    state.footnoteCounts = {};
    state.patch = patch;
    state.applyData = applyData;
    state.one = oneBound;
    state.all = allBound;
    state.wrap = wrap2;
    state.augment = augment;
    visit(tree, "footnoteDefinition", (definition2) => {
      const id = String(definition2.identifier).toUpperCase();
      if (!own4.call(footnoteById, id)) {
        footnoteById[id] = definition2;
      }
    });
    return state;
    function augment(left, right) {
      if (left && "data" in left && left.data) {
        const data = left.data;
        if (data.hName) {
          if (right.type !== "element") {
            right = {
              type: "element",
              tagName: "",
              properties: {},
              children: []
            };
          }
          right.tagName = data.hName;
        }
        if (right.type === "element" && data.hProperties) {
          right.properties = { ...right.properties, ...data.hProperties };
        }
        if ("children" in right && right.children && data.hChildren) {
          right.children = data.hChildren;
        }
      }
      if (left) {
        const ctx = "type" in left ? left : { position: left };
        if (!generated(ctx)) {
          right.position = { start: pointStart(ctx), end: pointEnd(ctx) };
        }
      }
      return right;
    }
    function state(node5, tagName, props, children) {
      if (Array.isArray(props)) {
        children = props;
        props = {};
      }
      return augment(node5, {
        type: "element",
        tagName,
        properties: props || {},
        children: children || []
      });
    }
    function oneBound(node5, parent3) {
      return one2(state, node5, parent3);
    }
    function allBound(parent3) {
      return all2(state, parent3);
    }
  }
  function patch(from2, to) {
    if (from2.position)
      to.position = position3(from2);
  }
  function applyData(from2, to) {
    let result = to;
    if (from2 && from2.data) {
      const hName = from2.data.hName;
      const hChildren = from2.data.hChildren;
      const hProperties = from2.data.hProperties;
      if (typeof hName === "string") {
        if (result.type === "element") {
          result.tagName = hName;
        } else {
          result = {
            type: "element",
            tagName: hName,
            properties: {},
            children: []
          };
        }
      }
      if (result.type === "element" && hProperties) {
        result.properties = { ...result.properties, ...hProperties };
      }
      if ("children" in result && result.children && hChildren !== null && hChildren !== void 0) {
        result.children = hChildren;
      }
    }
    return result;
  }
  function one2(state, node5, parent3) {
    const type = node5 && node5.type;
    if (!type) {
      throw new Error("Expected node, got `" + node5 + "`");
    }
    if (own4.call(state.handlers, type)) {
      return state.handlers[type](state, node5, parent3);
    }
    if (state.passThrough && state.passThrough.includes(type)) {
      return "children" in node5 ? { ...node5, children: all2(state, node5) } : node5;
    }
    if (state.unknownHandler) {
      return state.unknownHandler(state, node5, parent3);
    }
    return defaultUnknownHandler(state, node5);
  }
  function all2(state, parent3) {
    const values2 = [];
    if ("children" in parent3) {
      const nodes2 = parent3.children;
      let index2 = -1;
      while (++index2 < nodes2.length) {
        const result = one2(state, nodes2[index2], parent3);
        if (result) {
          if (index2 && nodes2[index2 - 1].type === "break") {
            if (!Array.isArray(result) && result.type === "text") {
              result.value = result.value.replace(/^\s+/, "");
            }
            if (!Array.isArray(result) && result.type === "element") {
              const head = result.children[0];
              if (head && head.type === "text") {
                head.value = head.value.replace(/^\s+/, "");
              }
            }
          }
          if (Array.isArray(result)) {
            values2.push(...result);
          } else {
            values2.push(result);
          }
        }
      }
    }
    return values2;
  }
  function defaultUnknownHandler(state, node5) {
    const data = node5.data || {};
    const result = "value" in node5 && !(own4.call(data, "hProperties") || own4.call(data, "hChildren")) ? { type: "text", value: node5.value } : {
      type: "element",
      tagName: "div",
      properties: {},
      children: all2(state, node5)
    };
    state.patch(node5, result);
    return state.applyData(node5, result);
  }
  function wrap2(nodes2, loose) {
    const result = [];
    let index2 = -1;
    if (loose) {
      result.push({ type: "text", value: "\n" });
    }
    while (++index2 < nodes2.length) {
      if (index2)
        result.push({ type: "text", value: "\n" });
      result.push(nodes2[index2]);
    }
    if (loose && nodes2.length > 0) {
      result.push({ type: "text", value: "\n" });
    }
    return result;
  }

  // ../node_modules/mdast-util-to-hast/lib/footer.js
  function footer(state) {
    const listItems = [];
    let index2 = -1;
    while (++index2 < state.footnoteOrder.length) {
      const def = state.footnoteById[state.footnoteOrder[index2]];
      if (!def) {
        continue;
      }
      const content3 = state.all(def);
      const id = String(def.identifier).toUpperCase();
      const safeId = normalizeUri(id.toLowerCase());
      let referenceIndex = 0;
      const backReferences = [];
      while (++referenceIndex <= state.footnoteCounts[id]) {
        const backReference = {
          type: "element",
          tagName: "a",
          properties: {
            href: "#" + state.clobberPrefix + "fnref-" + safeId + (referenceIndex > 1 ? "-" + referenceIndex : ""),
            dataFootnoteBackref: true,
            className: ["data-footnote-backref"],
            ariaLabel: state.footnoteBackLabel
          },
          children: [{ type: "text", value: "\u21A9" }]
        };
        if (referenceIndex > 1) {
          backReference.children.push({
            type: "element",
            tagName: "sup",
            children: [{ type: "text", value: String(referenceIndex) }]
          });
        }
        if (backReferences.length > 0) {
          backReferences.push({ type: "text", value: " " });
        }
        backReferences.push(backReference);
      }
      const tail = content3[content3.length - 1];
      if (tail && tail.type === "element" && tail.tagName === "p") {
        const tailTail = tail.children[tail.children.length - 1];
        if (tailTail && tailTail.type === "text") {
          tailTail.value += " ";
        } else {
          tail.children.push({ type: "text", value: " " });
        }
        tail.children.push(...backReferences);
      } else {
        content3.push(...backReferences);
      }
      const listItem2 = {
        type: "element",
        tagName: "li",
        properties: { id: state.clobberPrefix + "fn-" + safeId },
        children: state.wrap(content3, true)
      };
      state.patch(def, listItem2);
      listItems.push(listItem2);
    }
    if (listItems.length === 0) {
      return;
    }
    return {
      type: "element",
      tagName: "section",
      properties: { dataFootnotes: true, className: ["footnotes"] },
      children: [
        {
          type: "element",
          tagName: state.footnoteLabelTagName,
          properties: {
            // To do: use structured clone.
            ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),
            id: "footnote-label"
          },
          children: [{ type: "text", value: state.footnoteLabel }]
        },
        { type: "text", value: "\n" },
        {
          type: "element",
          tagName: "ol",
          properties: {},
          children: state.wrap(listItems, true)
        },
        { type: "text", value: "\n" }
      ]
    };
  }

  // ../node_modules/mdast-util-to-hast/lib/index.js
  function toHast(tree, options) {
    const state = createState(tree, options);
    const node5 = state.one(tree, null);
    const foot = footer(state);
    if (foot) {
      node5.children.push({ type: "text", value: "\n" }, foot);
    }
    return Array.isArray(node5) ? { type: "root", children: node5 } : node5;
  }

  // ../node_modules/remark-rehype/lib/index.js
  var remarkRehype = (
    /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */
    function(destination, options) {
      return destination && "run" in destination ? bridge(destination, options) : mutate(destination || options);
    }
  );
  var lib_default = remarkRehype;
  function bridge(destination, options) {
    return (node5, file, next4) => {
      destination.run(toHast(node5, options), file, (error) => {
        next4(error);
      });
    };
  }
  function mutate(options) {
    return (node5) => toHast(node5, options);
  }

  // ../node_modules/react-markdown/lib/react-markdown.js
  var import_prop_types = __toESM(require_prop_types(), 1);

  // ../node_modules/property-information/lib/util/schema.js
  var Schema = class {
    /**
     * @constructor
     * @param {Properties} property
     * @param {Normal} normal
     * @param {string} [space]
     */
    constructor(property, normal, space2) {
      this.property = property;
      this.normal = normal;
      if (space2) {
        this.space = space2;
      }
    }
  };
  Schema.prototype.property = {};
  Schema.prototype.normal = {};
  Schema.prototype.space = null;

  // ../node_modules/property-information/lib/util/merge.js
  function merge2(definitions2, space2) {
    const property = {};
    const normal = {};
    let index2 = -1;
    while (++index2 < definitions2.length) {
      Object.assign(property, definitions2[index2].property);
      Object.assign(normal, definitions2[index2].normal);
    }
    return new Schema(property, normal, space2);
  }

  // ../node_modules/property-information/lib/normalize.js
  function normalize6(value) {
    return value.toLowerCase();
  }

  // ../node_modules/property-information/lib/util/info.js
  var Info2 = class {
    /**
     * @constructor
     * @param {string} property
     * @param {string} attribute
     */
    constructor(property, attribute) {
      this.property = property;
      this.attribute = attribute;
    }
  };
  Info2.prototype.space = null;
  Info2.prototype.boolean = false;
  Info2.prototype.booleanish = false;
  Info2.prototype.overloadedBoolean = false;
  Info2.prototype.number = false;
  Info2.prototype.commaSeparated = false;
  Info2.prototype.spaceSeparated = false;
  Info2.prototype.commaOrSpaceSeparated = false;
  Info2.prototype.mustUseProperty = false;
  Info2.prototype.defined = false;

  // ../node_modules/property-information/lib/util/types.js
  var types_exports = {};
  __export(types_exports, {
    boolean: () => boolean,
    booleanish: () => booleanish,
    commaOrSpaceSeparated: () => commaOrSpaceSeparated,
    commaSeparated: () => commaSeparated,
    number: () => number,
    overloadedBoolean: () => overloadedBoolean,
    spaceSeparated: () => spaceSeparated
  });
  var powers = 0;
  var boolean = increment();
  var booleanish = increment();
  var overloadedBoolean = increment();
  var number = increment();
  var spaceSeparated = increment();
  var commaSeparated = increment();
  var commaOrSpaceSeparated = increment();
  function increment() {
    return 2 ** ++powers;
  }

  // ../node_modules/property-information/lib/util/defined-info.js
  var checks = Object.keys(types_exports);
  var DefinedInfo = class extends Info2 {
    /**
     * @constructor
     * @param {string} property
     * @param {string} attribute
     * @param {number|null} [mask]
     * @param {string} [space]
     */
    constructor(property, attribute, mask, space2) {
      let index2 = -1;
      super(property, attribute);
      mark(this, "space", space2);
      if (typeof mask === "number") {
        while (++index2 < checks.length) {
          const check = checks[index2];
          mark(this, checks[index2], (mask & types_exports[check]) === types_exports[check]);
        }
      }
    }
  };
  DefinedInfo.prototype.defined = true;
  function mark(values2, key, value) {
    if (value) {
      values2[key] = value;
    }
  }

  // ../node_modules/property-information/lib/util/create.js
  var own5 = {}.hasOwnProperty;
  function create2(definition2) {
    const property = {};
    const normal = {};
    let prop;
    for (prop in definition2.properties) {
      if (own5.call(definition2.properties, prop)) {
        const value = definition2.properties[prop];
        const info = new DefinedInfo(
          prop,
          definition2.transform(definition2.attributes || {}, prop),
          value,
          definition2.space
        );
        if (definition2.mustUseProperty && definition2.mustUseProperty.includes(prop)) {
          info.mustUseProperty = true;
        }
        property[prop] = info;
        normal[normalize6(prop)] = prop;
        normal[normalize6(info.attribute)] = prop;
      }
    }
    return new Schema(property, normal, definition2.space);
  }

  // ../node_modules/property-information/lib/xlink.js
  var xlink = create2({
    space: "xlink",
    transform(_3, prop) {
      return "xlink:" + prop.slice(5).toLowerCase();
    },
    properties: {
      xLinkActuate: null,
      xLinkArcRole: null,
      xLinkHref: null,
      xLinkRole: null,
      xLinkShow: null,
      xLinkTitle: null,
      xLinkType: null
    }
  });

  // ../node_modules/property-information/lib/xml.js
  var xml = create2({
    space: "xml",
    transform(_3, prop) {
      return "xml:" + prop.slice(3).toLowerCase();
    },
    properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
  });

  // ../node_modules/property-information/lib/util/case-sensitive-transform.js
  function caseSensitiveTransform(attributes, attribute) {
    return attribute in attributes ? attributes[attribute] : attribute;
  }

  // ../node_modules/property-information/lib/util/case-insensitive-transform.js
  function caseInsensitiveTransform(attributes, property) {
    return caseSensitiveTransform(attributes, property.toLowerCase());
  }

  // ../node_modules/property-information/lib/xmlns.js
  var xmlns = create2({
    space: "xmlns",
    attributes: { xmlnsxlink: "xmlns:xlink" },
    transform: caseInsensitiveTransform,
    properties: { xmlns: null, xmlnsXLink: null }
  });

  // ../node_modules/property-information/lib/aria.js
  var aria = create2({
    transform(_3, prop) {
      return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
    },
    properties: {
      ariaActiveDescendant: null,
      ariaAtomic: booleanish,
      ariaAutoComplete: null,
      ariaBusy: booleanish,
      ariaChecked: booleanish,
      ariaColCount: number,
      ariaColIndex: number,
      ariaColSpan: number,
      ariaControls: spaceSeparated,
      ariaCurrent: null,
      ariaDescribedBy: spaceSeparated,
      ariaDetails: null,
      ariaDisabled: booleanish,
      ariaDropEffect: spaceSeparated,
      ariaErrorMessage: null,
      ariaExpanded: booleanish,
      ariaFlowTo: spaceSeparated,
      ariaGrabbed: booleanish,
      ariaHasPopup: null,
      ariaHidden: booleanish,
      ariaInvalid: null,
      ariaKeyShortcuts: null,
      ariaLabel: null,
      ariaLabelledBy: spaceSeparated,
      ariaLevel: number,
      ariaLive: null,
      ariaModal: booleanish,
      ariaMultiLine: booleanish,
      ariaMultiSelectable: booleanish,
      ariaOrientation: null,
      ariaOwns: spaceSeparated,
      ariaPlaceholder: null,
      ariaPosInSet: number,
      ariaPressed: booleanish,
      ariaReadOnly: booleanish,
      ariaRelevant: null,
      ariaRequired: booleanish,
      ariaRoleDescription: spaceSeparated,
      ariaRowCount: number,
      ariaRowIndex: number,
      ariaRowSpan: number,
      ariaSelected: booleanish,
      ariaSetSize: number,
      ariaSort: null,
      ariaValueMax: number,
      ariaValueMin: number,
      ariaValueNow: number,
      ariaValueText: null,
      role: null
    }
  });

  // ../node_modules/property-information/lib/html.js
  var html2 = create2({
    space: "html",
    attributes: {
      acceptcharset: "accept-charset",
      classname: "class",
      htmlfor: "for",
      httpequiv: "http-equiv"
    },
    transform: caseInsensitiveTransform,
    mustUseProperty: ["checked", "multiple", "muted", "selected"],
    properties: {
      // Standard Properties.
      abbr: null,
      accept: commaSeparated,
      acceptCharset: spaceSeparated,
      accessKey: spaceSeparated,
      action: null,
      allow: null,
      allowFullScreen: boolean,
      allowPaymentRequest: boolean,
      allowUserMedia: boolean,
      alt: null,
      as: null,
      async: boolean,
      autoCapitalize: null,
      autoComplete: spaceSeparated,
      autoFocus: boolean,
      autoPlay: boolean,
      capture: boolean,
      charSet: null,
      checked: boolean,
      cite: null,
      className: spaceSeparated,
      cols: number,
      colSpan: null,
      content: null,
      contentEditable: booleanish,
      controls: boolean,
      controlsList: spaceSeparated,
      coords: number | commaSeparated,
      crossOrigin: null,
      data: null,
      dateTime: null,
      decoding: null,
      default: boolean,
      defer: boolean,
      dir: null,
      dirName: null,
      disabled: boolean,
      download: overloadedBoolean,
      draggable: booleanish,
      encType: null,
      enterKeyHint: null,
      form: null,
      formAction: null,
      formEncType: null,
      formMethod: null,
      formNoValidate: boolean,
      formTarget: null,
      headers: spaceSeparated,
      height: number,
      hidden: boolean,
      high: number,
      href: null,
      hrefLang: null,
      htmlFor: spaceSeparated,
      httpEquiv: spaceSeparated,
      id: null,
      imageSizes: null,
      imageSrcSet: null,
      inputMode: null,
      integrity: null,
      is: null,
      isMap: boolean,
      itemId: null,
      itemProp: spaceSeparated,
      itemRef: spaceSeparated,
      itemScope: boolean,
      itemType: spaceSeparated,
      kind: null,
      label: null,
      lang: null,
      language: null,
      list: null,
      loading: null,
      loop: boolean,
      low: number,
      manifest: null,
      max: null,
      maxLength: number,
      media: null,
      method: null,
      min: null,
      minLength: number,
      multiple: boolean,
      muted: boolean,
      name: null,
      nonce: null,
      noModule: boolean,
      noValidate: boolean,
      onAbort: null,
      onAfterPrint: null,
      onAuxClick: null,
      onBeforeMatch: null,
      onBeforePrint: null,
      onBeforeUnload: null,
      onBlur: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onContextLost: null,
      onContextMenu: null,
      onContextRestored: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFormData: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLanguageChange: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadEnd: null,
      onLoadStart: null,
      onMessage: null,
      onMessageError: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRejectionHandled: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onScrollEnd: null,
      onSecurityPolicyViolation: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onSlotChange: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnhandledRejection: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onWheel: null,
      open: boolean,
      optimum: number,
      pattern: null,
      ping: spaceSeparated,
      placeholder: null,
      playsInline: boolean,
      poster: null,
      preload: null,
      readOnly: boolean,
      referrerPolicy: null,
      rel: spaceSeparated,
      required: boolean,
      reversed: boolean,
      rows: number,
      rowSpan: number,
      sandbox: spaceSeparated,
      scope: null,
      scoped: boolean,
      seamless: boolean,
      selected: boolean,
      shape: null,
      size: number,
      sizes: null,
      slot: null,
      span: number,
      spellCheck: booleanish,
      src: null,
      srcDoc: null,
      srcLang: null,
      srcSet: null,
      start: number,
      step: null,
      style: null,
      tabIndex: number,
      target: null,
      title: null,
      translate: null,
      type: null,
      typeMustMatch: boolean,
      useMap: null,
      value: booleanish,
      width: number,
      wrap: null,
      // Legacy.
      // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
      align: null,
      // Several. Use CSS `text-align` instead,
      aLink: null,
      // `<body>`. Use CSS `a:active {color}` instead
      archive: spaceSeparated,
      // `<object>`. List of URIs to archives
      axis: null,
      // `<td>` and `<th>`. Use `scope` on `<th>`
      background: null,
      // `<body>`. Use CSS `background-image` instead
      bgColor: null,
      // `<body>` and table elements. Use CSS `background-color` instead
      border: number,
      // `<table>`. Use CSS `border-width` instead,
      borderColor: null,
      // `<table>`. Use CSS `border-color` instead,
      bottomMargin: number,
      // `<body>`
      cellPadding: null,
      // `<table>`
      cellSpacing: null,
      // `<table>`
      char: null,
      // Several table elements. When `align=char`, sets the character to align on
      charOff: null,
      // Several table elements. When `char`, offsets the alignment
      classId: null,
      // `<object>`
      clear: null,
      // `<br>`. Use CSS `clear` instead
      code: null,
      // `<object>`
      codeBase: null,
      // `<object>`
      codeType: null,
      // `<object>`
      color: null,
      // `<font>` and `<hr>`. Use CSS instead
      compact: boolean,
      // Lists. Use CSS to reduce space between items instead
      declare: boolean,
      // `<object>`
      event: null,
      // `<script>`
      face: null,
      // `<font>`. Use CSS instead
      frame: null,
      // `<table>`
      frameBorder: null,
      // `<iframe>`. Use CSS `border` instead
      hSpace: number,
      // `<img>` and `<object>`
      leftMargin: number,
      // `<body>`
      link: null,
      // `<body>`. Use CSS `a:link {color: *}` instead
      longDesc: null,
      // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
      lowSrc: null,
      // `<img>`. Use a `<picture>`
      marginHeight: number,
      // `<body>`
      marginWidth: number,
      // `<body>`
      noResize: boolean,
      // `<frame>`
      noHref: boolean,
      // `<area>`. Use no href instead of an explicit `nohref`
      noShade: boolean,
      // `<hr>`. Use background-color and height instead of borders
      noWrap: boolean,
      // `<td>` and `<th>`
      object: null,
      // `<applet>`
      profile: null,
      // `<head>`
      prompt: null,
      // `<isindex>`
      rev: null,
      // `<link>`
      rightMargin: number,
      // `<body>`
      rules: null,
      // `<table>`
      scheme: null,
      // `<meta>`
      scrolling: booleanish,
      // `<frame>`. Use overflow in the child context
      standby: null,
      // `<object>`
      summary: null,
      // `<table>`
      text: null,
      // `<body>`. Use CSS `color` instead
      topMargin: number,
      // `<body>`
      valueType: null,
      // `<param>`
      version: null,
      // `<html>`. Use a doctype.
      vAlign: null,
      // Several. Use CSS `vertical-align` instead
      vLink: null,
      // `<body>`. Use CSS `a:visited {color}` instead
      vSpace: number,
      // `<img>` and `<object>`
      // Non-standard Properties.
      allowTransparency: null,
      autoCorrect: null,
      autoSave: null,
      disablePictureInPicture: boolean,
      disableRemotePlayback: boolean,
      prefix: null,
      property: null,
      results: number,
      security: null,
      unselectable: null
    }
  });

  // ../node_modules/property-information/lib/svg.js
  var svg = create2({
    space: "svg",
    attributes: {
      accentHeight: "accent-height",
      alignmentBaseline: "alignment-baseline",
      arabicForm: "arabic-form",
      baselineShift: "baseline-shift",
      capHeight: "cap-height",
      className: "class",
      clipPath: "clip-path",
      clipRule: "clip-rule",
      colorInterpolation: "color-interpolation",
      colorInterpolationFilters: "color-interpolation-filters",
      colorProfile: "color-profile",
      colorRendering: "color-rendering",
      crossOrigin: "crossorigin",
      dataType: "datatype",
      dominantBaseline: "dominant-baseline",
      enableBackground: "enable-background",
      fillOpacity: "fill-opacity",
      fillRule: "fill-rule",
      floodColor: "flood-color",
      floodOpacity: "flood-opacity",
      fontFamily: "font-family",
      fontSize: "font-size",
      fontSizeAdjust: "font-size-adjust",
      fontStretch: "font-stretch",
      fontStyle: "font-style",
      fontVariant: "font-variant",
      fontWeight: "font-weight",
      glyphName: "glyph-name",
      glyphOrientationHorizontal: "glyph-orientation-horizontal",
      glyphOrientationVertical: "glyph-orientation-vertical",
      hrefLang: "hreflang",
      horizAdvX: "horiz-adv-x",
      horizOriginX: "horiz-origin-x",
      horizOriginY: "horiz-origin-y",
      imageRendering: "image-rendering",
      letterSpacing: "letter-spacing",
      lightingColor: "lighting-color",
      markerEnd: "marker-end",
      markerMid: "marker-mid",
      markerStart: "marker-start",
      navDown: "nav-down",
      navDownLeft: "nav-down-left",
      navDownRight: "nav-down-right",
      navLeft: "nav-left",
      navNext: "nav-next",
      navPrev: "nav-prev",
      navRight: "nav-right",
      navUp: "nav-up",
      navUpLeft: "nav-up-left",
      navUpRight: "nav-up-right",
      onAbort: "onabort",
      onActivate: "onactivate",
      onAfterPrint: "onafterprint",
      onBeforePrint: "onbeforeprint",
      onBegin: "onbegin",
      onCancel: "oncancel",
      onCanPlay: "oncanplay",
      onCanPlayThrough: "oncanplaythrough",
      onChange: "onchange",
      onClick: "onclick",
      onClose: "onclose",
      onCopy: "oncopy",
      onCueChange: "oncuechange",
      onCut: "oncut",
      onDblClick: "ondblclick",
      onDrag: "ondrag",
      onDragEnd: "ondragend",
      onDragEnter: "ondragenter",
      onDragExit: "ondragexit",
      onDragLeave: "ondragleave",
      onDragOver: "ondragover",
      onDragStart: "ondragstart",
      onDrop: "ondrop",
      onDurationChange: "ondurationchange",
      onEmptied: "onemptied",
      onEnd: "onend",
      onEnded: "onended",
      onError: "onerror",
      onFocus: "onfocus",
      onFocusIn: "onfocusin",
      onFocusOut: "onfocusout",
      onHashChange: "onhashchange",
      onInput: "oninput",
      onInvalid: "oninvalid",
      onKeyDown: "onkeydown",
      onKeyPress: "onkeypress",
      onKeyUp: "onkeyup",
      onLoad: "onload",
      onLoadedData: "onloadeddata",
      onLoadedMetadata: "onloadedmetadata",
      onLoadStart: "onloadstart",
      onMessage: "onmessage",
      onMouseDown: "onmousedown",
      onMouseEnter: "onmouseenter",
      onMouseLeave: "onmouseleave",
      onMouseMove: "onmousemove",
      onMouseOut: "onmouseout",
      onMouseOver: "onmouseover",
      onMouseUp: "onmouseup",
      onMouseWheel: "onmousewheel",
      onOffline: "onoffline",
      onOnline: "ononline",
      onPageHide: "onpagehide",
      onPageShow: "onpageshow",
      onPaste: "onpaste",
      onPause: "onpause",
      onPlay: "onplay",
      onPlaying: "onplaying",
      onPopState: "onpopstate",
      onProgress: "onprogress",
      onRateChange: "onratechange",
      onRepeat: "onrepeat",
      onReset: "onreset",
      onResize: "onresize",
      onScroll: "onscroll",
      onSeeked: "onseeked",
      onSeeking: "onseeking",
      onSelect: "onselect",
      onShow: "onshow",
      onStalled: "onstalled",
      onStorage: "onstorage",
      onSubmit: "onsubmit",
      onSuspend: "onsuspend",
      onTimeUpdate: "ontimeupdate",
      onToggle: "ontoggle",
      onUnload: "onunload",
      onVolumeChange: "onvolumechange",
      onWaiting: "onwaiting",
      onZoom: "onzoom",
      overlinePosition: "overline-position",
      overlineThickness: "overline-thickness",
      paintOrder: "paint-order",
      panose1: "panose-1",
      pointerEvents: "pointer-events",
      referrerPolicy: "referrerpolicy",
      renderingIntent: "rendering-intent",
      shapeRendering: "shape-rendering",
      stopColor: "stop-color",
      stopOpacity: "stop-opacity",
      strikethroughPosition: "strikethrough-position",
      strikethroughThickness: "strikethrough-thickness",
      strokeDashArray: "stroke-dasharray",
      strokeDashOffset: "stroke-dashoffset",
      strokeLineCap: "stroke-linecap",
      strokeLineJoin: "stroke-linejoin",
      strokeMiterLimit: "stroke-miterlimit",
      strokeOpacity: "stroke-opacity",
      strokeWidth: "stroke-width",
      tabIndex: "tabindex",
      textAnchor: "text-anchor",
      textDecoration: "text-decoration",
      textRendering: "text-rendering",
      typeOf: "typeof",
      underlinePosition: "underline-position",
      underlineThickness: "underline-thickness",
      unicodeBidi: "unicode-bidi",
      unicodeRange: "unicode-range",
      unitsPerEm: "units-per-em",
      vAlphabetic: "v-alphabetic",
      vHanging: "v-hanging",
      vIdeographic: "v-ideographic",
      vMathematical: "v-mathematical",
      vectorEffect: "vector-effect",
      vertAdvY: "vert-adv-y",
      vertOriginX: "vert-origin-x",
      vertOriginY: "vert-origin-y",
      wordSpacing: "word-spacing",
      writingMode: "writing-mode",
      xHeight: "x-height",
      // These were camelcased in Tiny. Now lowercased in SVG 2
      playbackOrder: "playbackorder",
      timelineBegin: "timelinebegin"
    },
    transform: caseSensitiveTransform,
    properties: {
      about: commaOrSpaceSeparated,
      accentHeight: number,
      accumulate: null,
      additive: null,
      alignmentBaseline: null,
      alphabetic: number,
      amplitude: number,
      arabicForm: null,
      ascent: number,
      attributeName: null,
      attributeType: null,
      azimuth: number,
      bandwidth: null,
      baselineShift: null,
      baseFrequency: null,
      baseProfile: null,
      bbox: null,
      begin: null,
      bias: number,
      by: null,
      calcMode: null,
      capHeight: number,
      className: spaceSeparated,
      clip: null,
      clipPath: null,
      clipPathUnits: null,
      clipRule: null,
      color: null,
      colorInterpolation: null,
      colorInterpolationFilters: null,
      colorProfile: null,
      colorRendering: null,
      content: null,
      contentScriptType: null,
      contentStyleType: null,
      crossOrigin: null,
      cursor: null,
      cx: null,
      cy: null,
      d: null,
      dataType: null,
      defaultAction: null,
      descent: number,
      diffuseConstant: number,
      direction: null,
      display: null,
      dur: null,
      divisor: number,
      dominantBaseline: null,
      download: boolean,
      dx: null,
      dy: null,
      edgeMode: null,
      editable: null,
      elevation: number,
      enableBackground: null,
      end: null,
      event: null,
      exponent: number,
      externalResourcesRequired: null,
      fill: null,
      fillOpacity: number,
      fillRule: null,
      filter: null,
      filterRes: null,
      filterUnits: null,
      floodColor: null,
      floodOpacity: null,
      focusable: null,
      focusHighlight: null,
      fontFamily: null,
      fontSize: null,
      fontSizeAdjust: null,
      fontStretch: null,
      fontStyle: null,
      fontVariant: null,
      fontWeight: null,
      format: null,
      fr: null,
      from: null,
      fx: null,
      fy: null,
      g1: commaSeparated,
      g2: commaSeparated,
      glyphName: commaSeparated,
      glyphOrientationHorizontal: null,
      glyphOrientationVertical: null,
      glyphRef: null,
      gradientTransform: null,
      gradientUnits: null,
      handler: null,
      hanging: number,
      hatchContentUnits: null,
      hatchUnits: null,
      height: null,
      href: null,
      hrefLang: null,
      horizAdvX: number,
      horizOriginX: number,
      horizOriginY: number,
      id: null,
      ideographic: number,
      imageRendering: null,
      initialVisibility: null,
      in: null,
      in2: null,
      intercept: number,
      k: number,
      k1: number,
      k2: number,
      k3: number,
      k4: number,
      kernelMatrix: commaOrSpaceSeparated,
      kernelUnitLength: null,
      keyPoints: null,
      // SEMI_COLON_SEPARATED
      keySplines: null,
      // SEMI_COLON_SEPARATED
      keyTimes: null,
      // SEMI_COLON_SEPARATED
      kerning: null,
      lang: null,
      lengthAdjust: null,
      letterSpacing: null,
      lightingColor: null,
      limitingConeAngle: number,
      local: null,
      markerEnd: null,
      markerMid: null,
      markerStart: null,
      markerHeight: null,
      markerUnits: null,
      markerWidth: null,
      mask: null,
      maskContentUnits: null,
      maskUnits: null,
      mathematical: null,
      max: null,
      media: null,
      mediaCharacterEncoding: null,
      mediaContentEncodings: null,
      mediaSize: number,
      mediaTime: null,
      method: null,
      min: null,
      mode: null,
      name: null,
      navDown: null,
      navDownLeft: null,
      navDownRight: null,
      navLeft: null,
      navNext: null,
      navPrev: null,
      navRight: null,
      navUp: null,
      navUpLeft: null,
      navUpRight: null,
      numOctaves: null,
      observer: null,
      offset: null,
      onAbort: null,
      onActivate: null,
      onAfterPrint: null,
      onBeforePrint: null,
      onBegin: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnd: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFocusIn: null,
      onFocusOut: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadStart: null,
      onMessage: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onMouseWheel: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRepeat: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onShow: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onZoom: null,
      opacity: null,
      operator: null,
      order: null,
      orient: null,
      orientation: null,
      origin: null,
      overflow: null,
      overlay: null,
      overlinePosition: number,
      overlineThickness: number,
      paintOrder: null,
      panose1: null,
      path: null,
      pathLength: number,
      patternContentUnits: null,
      patternTransform: null,
      patternUnits: null,
      phase: null,
      ping: spaceSeparated,
      pitch: null,
      playbackOrder: null,
      pointerEvents: null,
      points: null,
      pointsAtX: number,
      pointsAtY: number,
      pointsAtZ: number,
      preserveAlpha: null,
      preserveAspectRatio: null,
      primitiveUnits: null,
      propagate: null,
      property: commaOrSpaceSeparated,
      r: null,
      radius: null,
      referrerPolicy: null,
      refX: null,
      refY: null,
      rel: commaOrSpaceSeparated,
      rev: commaOrSpaceSeparated,
      renderingIntent: null,
      repeatCount: null,
      repeatDur: null,
      requiredExtensions: commaOrSpaceSeparated,
      requiredFeatures: commaOrSpaceSeparated,
      requiredFonts: commaOrSpaceSeparated,
      requiredFormats: commaOrSpaceSeparated,
      resource: null,
      restart: null,
      result: null,
      rotate: null,
      rx: null,
      ry: null,
      scale: null,
      seed: null,
      shapeRendering: null,
      side: null,
      slope: null,
      snapshotTime: null,
      specularConstant: number,
      specularExponent: number,
      spreadMethod: null,
      spacing: null,
      startOffset: null,
      stdDeviation: null,
      stemh: null,
      stemv: null,
      stitchTiles: null,
      stopColor: null,
      stopOpacity: null,
      strikethroughPosition: number,
      strikethroughThickness: number,
      string: null,
      stroke: null,
      strokeDashArray: commaOrSpaceSeparated,
      strokeDashOffset: null,
      strokeLineCap: null,
      strokeLineJoin: null,
      strokeMiterLimit: number,
      strokeOpacity: number,
      strokeWidth: null,
      style: null,
      surfaceScale: number,
      syncBehavior: null,
      syncBehaviorDefault: null,
      syncMaster: null,
      syncTolerance: null,
      syncToleranceDefault: null,
      systemLanguage: commaOrSpaceSeparated,
      tabIndex: number,
      tableValues: null,
      target: null,
      targetX: number,
      targetY: number,
      textAnchor: null,
      textDecoration: null,
      textRendering: null,
      textLength: null,
      timelineBegin: null,
      title: null,
      transformBehavior: null,
      type: null,
      typeOf: commaOrSpaceSeparated,
      to: null,
      transform: null,
      u1: null,
      u2: null,
      underlinePosition: number,
      underlineThickness: number,
      unicode: null,
      unicodeBidi: null,
      unicodeRange: null,
      unitsPerEm: number,
      values: null,
      vAlphabetic: number,
      vMathematical: number,
      vectorEffect: null,
      vHanging: number,
      vIdeographic: number,
      version: null,
      vertAdvY: number,
      vertOriginX: number,
      vertOriginY: number,
      viewBox: null,
      viewTarget: null,
      visibility: null,
      width: null,
      widths: null,
      wordSpacing: null,
      writingMode: null,
      x: null,
      x1: null,
      x2: null,
      xChannelSelector: null,
      xHeight: number,
      y: null,
      y1: null,
      y2: null,
      yChannelSelector: null,
      z: null,
      zoomAndPan: null
    }
  });

  // ../node_modules/property-information/lib/find.js
  var valid = /^data[-\w.:]+$/i;
  var dash = /-[a-z]/g;
  var cap = /[A-Z]/g;
  function find2(schema, value) {
    const normal = normalize6(value);
    let prop = value;
    let Type = Info2;
    if (normal in schema.normal) {
      return schema.property[schema.normal[normal]];
    }
    if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
      if (value.charAt(4) === "-") {
        const rest = value.slice(5).replace(dash, camelcase);
        prop = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
      } else {
        const rest = value.slice(4);
        if (!dash.test(rest)) {
          let dashes = rest.replace(cap, kebab);
          if (dashes.charAt(0) !== "-") {
            dashes = "-" + dashes;
          }
          value = "data" + dashes;
        }
      }
      Type = DefinedInfo;
    }
    return new Type(prop, value);
  }
  function kebab($0) {
    return "-" + $0.toLowerCase();
  }
  function camelcase($0) {
    return $0.charAt(1).toUpperCase();
  }

  // ../node_modules/property-information/lib/hast-to-react.js
  var hastToReact = {
    classId: "classID",
    dataType: "datatype",
    itemId: "itemID",
    strokeDashArray: "strokeDasharray",
    strokeDashOffset: "strokeDashoffset",
    strokeLineCap: "strokeLinecap",
    strokeLineJoin: "strokeLinejoin",
    strokeMiterLimit: "strokeMiterlimit",
    typeOf: "typeof",
    xLinkActuate: "xlinkActuate",
    xLinkArcRole: "xlinkArcrole",
    xLinkHref: "xlinkHref",
    xLinkRole: "xlinkRole",
    xLinkShow: "xlinkShow",
    xLinkTitle: "xlinkTitle",
    xLinkType: "xlinkType",
    xmlnsXLink: "xmlnsXlink"
  };

  // ../node_modules/property-information/index.js
  var html3 = merge2([xml, xlink, xmlns, aria, html2], "html");
  var svg2 = merge2([xml, xlink, xmlns, aria, svg], "svg");

  // ../node_modules/react-markdown/lib/rehype-filter.js
  function rehypeFilter(options) {
    if (options.allowedElements && options.disallowedElements) {
      throw new TypeError(
        "Only one of `allowedElements` and `disallowedElements` should be defined"
      );
    }
    if (options.allowedElements || options.disallowedElements || options.allowElement) {
      return (tree) => {
        visit(tree, "element", (node5, index2, parent_) => {
          const parent3 = (
            /** @type {Element|Root} */
            parent_
          );
          let remove;
          if (options.allowedElements) {
            remove = !options.allowedElements.includes(node5.tagName);
          } else if (options.disallowedElements) {
            remove = options.disallowedElements.includes(node5.tagName);
          }
          if (!remove && options.allowElement && typeof index2 === "number") {
            remove = !options.allowElement(node5, index2, parent3);
          }
          if (remove && typeof index2 === "number") {
            if (options.unwrapDisallowed && node5.children) {
              parent3.children.splice(index2, 1, ...node5.children);
            } else {
              parent3.children.splice(index2, 1);
            }
            return index2;
          }
          return void 0;
        });
      };
    }
  }

  // ../node_modules/react-markdown/lib/ast-to-react.js
  var import_react69 = __toESM(require_react(), 1);
  var import_react_is = __toESM(require_react_is2(), 1);

  // ../node_modules/hast-util-whitespace/index.js
  function whitespace2(thing) {
    const value = (
      // @ts-expect-error looks like a node.
      thing && typeof thing === "object" && thing.type === "text" ? (
        // @ts-expect-error looks like a text.
        thing.value || ""
      ) : thing
    );
    return typeof value === "string" && value.replace(/[ \t\n\f\r]/g, "") === "";
  }

  // ../node_modules/space-separated-tokens/index.js
  function stringify2(values2) {
    return values2.join(" ").trim();
  }

  // ../node_modules/comma-separated-tokens/index.js
  function stringify3(values2, options) {
    const settings = options || {};
    const input = values2[values2.length - 1] === "" ? [...values2, ""] : values2;
    return input.join(
      (settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")
    ).trim();
  }

  // ../node_modules/style-to-object/index.mjs
  var import_index2 = __toESM(require_style_to_object(), 1);
  var style_to_object_default = import_index2.default;

  // ../node_modules/react-markdown/lib/ast-to-react.js
  var own6 = {}.hasOwnProperty;
  var tableElements = /* @__PURE__ */ new Set(["table", "thead", "tbody", "tfoot", "tr"]);
  function childrenToReact(context, node5) {
    const children = [];
    let childIndex = -1;
    let child;
    while (++childIndex < node5.children.length) {
      child = node5.children[childIndex];
      if (child.type === "element") {
        children.push(toReact(context, child, childIndex, node5));
      } else if (child.type === "text") {
        if (node5.type !== "element" || !tableElements.has(node5.tagName) || !whitespace2(child)) {
          children.push(child.value);
        }
      } else if (child.type === "raw" && !context.options.skipHtml) {
        children.push(child.value);
      }
    }
    return children;
  }
  function toReact(context, node5, index2, parent3) {
    const options = context.options;
    const transform2 = options.transformLinkUri === void 0 ? uriTransformer : options.transformLinkUri;
    const parentSchema = context.schema;
    const name = node5.tagName;
    const properties = {};
    let schema = parentSchema;
    let property;
    if (parentSchema.space === "html" && name === "svg") {
      schema = svg2;
      context.schema = schema;
    }
    if (node5.properties) {
      for (property in node5.properties) {
        if (own6.call(node5.properties, property)) {
          addProperty(properties, property, node5.properties[property], context);
        }
      }
    }
    if (name === "ol" || name === "ul") {
      context.listDepth++;
    }
    const children = childrenToReact(context, node5);
    if (name === "ol" || name === "ul") {
      context.listDepth--;
    }
    context.schema = parentSchema;
    const position4 = node5.position || {
      start: { line: null, column: null, offset: null },
      end: { line: null, column: null, offset: null }
    };
    const component = options.components && own6.call(options.components, name) ? options.components[name] : name;
    const basic = typeof component === "string" || component === import_react69.default.Fragment;
    if (!import_react_is.default.isValidElementType(component)) {
      throw new TypeError(
        `Component for name \`${name}\` not defined or is not renderable`
      );
    }
    properties.key = index2;
    if (name === "a" && options.linkTarget) {
      properties.target = typeof options.linkTarget === "function" ? options.linkTarget(
        String(properties.href || ""),
        node5.children,
        typeof properties.title === "string" ? properties.title : null
      ) : options.linkTarget;
    }
    if (name === "a" && transform2) {
      properties.href = transform2(
        String(properties.href || ""),
        node5.children,
        typeof properties.title === "string" ? properties.title : null
      );
    }
    if (!basic && name === "code" && parent3.type === "element" && parent3.tagName !== "pre") {
      properties.inline = true;
    }
    if (!basic && (name === "h1" || name === "h2" || name === "h3" || name === "h4" || name === "h5" || name === "h6")) {
      properties.level = Number.parseInt(name.charAt(1), 10);
    }
    if (name === "img" && options.transformImageUri) {
      properties.src = options.transformImageUri(
        String(properties.src || ""),
        String(properties.alt || ""),
        typeof properties.title === "string" ? properties.title : null
      );
    }
    if (!basic && name === "li" && parent3.type === "element") {
      const input = getInputElement(node5);
      properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;
      properties.index = getElementsBeforeCount(parent3, node5);
      properties.ordered = parent3.tagName === "ol";
    }
    if (!basic && (name === "ol" || name === "ul")) {
      properties.ordered = name === "ol";
      properties.depth = context.listDepth;
    }
    if (name === "td" || name === "th") {
      if (properties.align) {
        if (!properties.style)
          properties.style = {};
        properties.style.textAlign = properties.align;
        delete properties.align;
      }
      if (!basic) {
        properties.isHeader = name === "th";
      }
    }
    if (!basic && name === "tr" && parent3.type === "element") {
      properties.isHeader = Boolean(parent3.tagName === "thead");
    }
    if (options.sourcePos) {
      properties["data-sourcepos"] = flattenPosition(position4);
    }
    if (!basic && options.rawSourcePos) {
      properties.sourcePosition = node5.position;
    }
    if (!basic && options.includeElementIndex) {
      properties.index = getElementsBeforeCount(parent3, node5);
      properties.siblingCount = getElementsBeforeCount(parent3);
    }
    if (!basic) {
      properties.node = node5;
    }
    return children.length > 0 ? import_react69.default.createElement(component, properties, children) : import_react69.default.createElement(component, properties);
  }
  function getInputElement(node5) {
    let index2 = -1;
    while (++index2 < node5.children.length) {
      const child = node5.children[index2];
      if (child.type === "element" && child.tagName === "input") {
        return child;
      }
    }
    return null;
  }
  function getElementsBeforeCount(parent3, node5) {
    let index2 = -1;
    let count = 0;
    while (++index2 < parent3.children.length) {
      if (parent3.children[index2] === node5)
        break;
      if (parent3.children[index2].type === "element")
        count++;
    }
    return count;
  }
  function addProperty(props, prop, value, ctx) {
    const info = find2(ctx.schema, prop);
    let result = value;
    if (result === null || result === void 0 || result !== result) {
      return;
    }
    if (Array.isArray(result)) {
      result = info.commaSeparated ? stringify3(result) : stringify2(result);
    }
    if (info.property === "style" && typeof result === "string") {
      result = parseStyle(result);
    }
    if (info.space && info.property) {
      props[own6.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;
    } else if (info.attribute) {
      props[info.attribute] = result;
    }
  }
  function parseStyle(value) {
    const result = {};
    try {
      style_to_object_default(value, iterator);
    } catch {
    }
    return result;
    function iterator(name, v3) {
      const k2 = name.slice(0, 4) === "-ms-" ? `ms-${name.slice(4)}` : name;
      result[k2.replace(/-([a-z])/g, styleReplacer)] = v3;
    }
  }
  function styleReplacer(_3, $1) {
    return $1.toUpperCase();
  }
  function flattenPosition(pos) {
    return [
      pos.start.line,
      ":",
      pos.start.column,
      "-",
      pos.end.line,
      ":",
      pos.end.column
    ].map(String).join("");
  }

  // ../node_modules/react-markdown/lib/react-markdown.js
  var own7 = {}.hasOwnProperty;
  var changelog = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
  var deprecated = {
    plugins: { to: "remarkPlugins", id: "change-plugins-to-remarkplugins" },
    renderers: { to: "components", id: "change-renderers-to-components" },
    astPlugins: { id: "remove-buggy-html-in-markdown-parser" },
    allowDangerousHtml: { id: "remove-buggy-html-in-markdown-parser" },
    escapeHtml: { id: "remove-buggy-html-in-markdown-parser" },
    source: { to: "children", id: "change-source-to-children" },
    allowNode: {
      to: "allowElement",
      id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    allowedTypes: {
      to: "allowedElements",
      id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    disallowedTypes: {
      to: "disallowedElements",
      id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    includeNodeIndex: {
      to: "includeElementIndex",
      id: "change-includenodeindex-to-includeelementindex"
    }
  };
  function ReactMarkdown(options) {
    for (const key in deprecated) {
      if (own7.call(deprecated, key) && own7.call(options, key)) {
        const deprecation = deprecated[key];
        console.warn(
          `[react-markdown] Warning: please ${deprecation.to ? `use \`${deprecation.to}\` instead of` : "remove"} \`${key}\` (see <${changelog}#${deprecation.id}> for more info)`
        );
        delete deprecated[key];
      }
    }
    const processor = unified().use(remarkParse).use(options.remarkPlugins || []).use(lib_default, {
      ...options.remarkRehypeOptions,
      allowDangerousHtml: true
    }).use(options.rehypePlugins || []).use(rehypeFilter, options);
    const file = new VFile();
    if (typeof options.children === "string") {
      file.value = options.children;
    } else if (options.children !== void 0 && options.children !== null) {
      console.warn(
        `[react-markdown] Warning: please pass a string as \`children\` (not: \`${options.children}\`)`
      );
    }
    const hastNode = processor.runSync(processor.parse(file), file);
    if (hastNode.type !== "root") {
      throw new TypeError("Expected a `root` node");
    }
    let result = import_react70.default.createElement(
      import_react70.default.Fragment,
      {},
      childrenToReact({ options, schema: html3, listDepth: 0 }, hastNode)
    );
    if (options.className) {
      result = import_react70.default.createElement("div", { className: options.className }, result);
    }
    return result;
  }
  ReactMarkdown.propTypes = {
    // Core options:
    children: import_prop_types.default.string,
    // Layout options:
    className: import_prop_types.default.string,
    // Filter options:
    allowElement: import_prop_types.default.func,
    allowedElements: import_prop_types.default.arrayOf(import_prop_types.default.string),
    disallowedElements: import_prop_types.default.arrayOf(import_prop_types.default.string),
    unwrapDisallowed: import_prop_types.default.bool,
    // Plugin options:
    remarkPlugins: import_prop_types.default.arrayOf(
      import_prop_types.default.oneOfType([
        import_prop_types.default.object,
        import_prop_types.default.func,
        import_prop_types.default.arrayOf(
          import_prop_types.default.oneOfType([
            import_prop_types.default.bool,
            import_prop_types.default.string,
            import_prop_types.default.object,
            import_prop_types.default.func,
            import_prop_types.default.arrayOf(
              // prettier-ignore
              // type-coverage:ignore-next-line
              import_prop_types.default.any
            )
          ])
        )
      ])
    ),
    rehypePlugins: import_prop_types.default.arrayOf(
      import_prop_types.default.oneOfType([
        import_prop_types.default.object,
        import_prop_types.default.func,
        import_prop_types.default.arrayOf(
          import_prop_types.default.oneOfType([
            import_prop_types.default.bool,
            import_prop_types.default.string,
            import_prop_types.default.object,
            import_prop_types.default.func,
            import_prop_types.default.arrayOf(
              // prettier-ignore
              // type-coverage:ignore-next-line
              import_prop_types.default.any
            )
          ])
        )
      ])
    ),
    // Transform options:
    sourcePos: import_prop_types.default.bool,
    rawSourcePos: import_prop_types.default.bool,
    skipHtml: import_prop_types.default.bool,
    includeElementIndex: import_prop_types.default.bool,
    transformLinkUri: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.bool]),
    linkTarget: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.string]),
    transformImageUri: import_prop_types.default.func,
    components: import_prop_types.default.object
  };

  // src/components/Content/ContentCard.tsx
  var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
  var ContentCard = ({ item, setChecked }) => {
    const { userSettings, loadTags, loadContent, addFilteredTag } = useProjectContext();
    const [preview, setPreview] = React240.useState(false);
    const styles4 = useStyles26();
    const addTag = async (tag) => {
      const newTags = [...item.tags.map((t4) => t4.name), tag];
      try {
        const res = await contentService.setTags({
          contentId: item.id,
          tags: newTags
        });
        _t.success("Added tag");
        void loadContent();
        void loadTags();
      } catch (e3) {
        _t.error("Failed to add tag");
        console.error(e3);
      }
    };
    const removeTag = async (tag) => {
      const newTags = item.tags.map((t4) => t4.name).filter((t4) => t4 !== tag);
      try {
        const res = await contentService.setTags({
          contentId: item.id,
          tags: newTags
        });
        _t.success("Added tag");
        void loadContent();
        void loadTags();
      } catch (e3) {
        _t.error("Failed to add tag");
        console.error(e3);
      }
    };
    const searchTag = (tag) => {
      addFilteredTag(tag);
    };
    const openURL = () => window.location.href = item.url;
    const CardActions = () => {
      return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack, { horizontal: true, tokens: { childrenGap: 3 }, style: { marginTop: 3 }, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(PreviewLink16Regular, { onClick: () => setPreview(!preview) }) });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(
      Card,
      {
        className: styles4.card,
        floatingAction: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Checkbox2, { onChange: (ev, checked) => {
          setChecked(checked || false);
        } }),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
            CardHeader,
            {
              header: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(import_jsx_runtime46.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("b", { children: item.user ? `${item.user.email}` : "someone" }),
                "\xA0shared\xA0",
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { style: { cursor: "pointer" }, onClick: openURL, children: item.title })
              ] }),
              description: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { style: { cursor: "pointer" }, onClick: openURL, children: truncateText(item.description, 150) }),
              image: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("img", { style: { cursor: "pointer" }, onClick: openURL, className: styles4.headerImage, src: item.image }),
              action: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(GroupButton, { contentId: item.id })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CardPreview, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(Stack, { horizontal: true, children: [
            preview && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(import_jsx_runtime46.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { grow: 1, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(Stack, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CardActions, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { style: { maxHeight: "70vh", overflowY: "auto" }, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(ReactMarkdown, { children: item.preview }) })
            ] }) }) }),
            userSettings.showPreviews && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(IFrameSandbox, { url: item.url }) }),
            userSettings.showQRCodes && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(QRCode_default, { text: item.url }) }),
            userSettings.showRelatedContent && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { children: item.related.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack, { horizontal: true, disableShrink: true, tokens: { childrenGap: 5 }, style: { width: "100%", overflowX: "scroll", display: "flex", flexFlow: "row nowrap" }, children: item.related.map((r3) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { style: { width: 100 }, grow: true, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(RelatedContentCard, { content: r3 }, r3.id) }, r3.id)) }) })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CardFooter, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(Stack, { style: { width: "100%" }, horizontal: true, tokens: { childrenGap: 10 }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Vote, { contentID: item.id, votes: item.votes }) }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CardActions, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(Stack, { horizontal: true, tokens: { childrenGap: 3 }, children: [
              item.tags.map((t4, i4) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(Popover, { withArrow: true, trapFocus: true, children: [
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(PopoverTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Badge, { children: t4.name }, i4) }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(PopoverSurface, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Button, { icon: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Search24Regular, {}), onClick: () => searchTag(t4.name), "aria-label": "search-tag" }),
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Button, { icon: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Delete24Regular, {}), onClick: () => removeTag(t4.name), "aria-label": "delete-tag" })
                ] }) })
              ] }, i4)),
              /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(AddTagBadge, { onNewTag: addTag })
            ] }) })
          ] }) })
        ]
      }
    );
  };
  var contentDisplay = (content3) => {
    switch (content3.type.case) {
      case "data":
        const d3 = content3.type.value;
        switch (d3.type.case) {
          case "text":
            return {
              type: "text",
              info: d3.type.value.data
            };
          case "file":
            return {
              type: "file",
              info: d3.type.value.file
            };
          case "url":
            return {
              type: "url",
              info: d3.type.value.url
            };
        }
        break;
      case "normalized":
        const n6 = content3.type.value;
        switch (n6.type.case) {
          case "article":
            return {
              type: "article",
              info: n6.type.value.title
            };
        }
    }
    return void 0;
  };
  var RelatedContentCard = ({ content: content3, setChecked }) => {
    const cd = contentDisplay(content3);
    if (!cd) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(
      Card,
      {
        floatingAction: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Checkbox2, { onChange: (ev, checked) => {
          setChecked && setChecked(checked || false);
        } }),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
            CardHeader,
            {
              header: cd.type
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CardPreview, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(ReactMarkdown, { children: cd.info }) }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CardFooter, { children: content3.tags.map((t4, i4) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Badge, { children: t4 }, i4)) })
        ]
      }
    );
  };
  var GroupButton = ({ contentId, style }) => {
    const { groups } = useProjectContext();
    const shareContent = async (groupId) => {
      try {
        const res = userService.share({
          groupId,
          contentId
        });
        _t.success("Shared content");
      } catch (e3) {
        _t.error(e3.message);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { style, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(Menu, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(MenuTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        MenuButton,
        {
          appearance: "transparent",
          icon: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(MoreHorizontal20Regular, {}),
          "aria-label": "More options"
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(MenuPopover, { children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(MenuList, { children: groups.map((g3) => {
        return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(MenuItem, { onClick: () => shareContent(g3.id), children: g3.name }, g3.id);
      }) }) })
    ] }) });
  };
  var AddTagBadge = ({ onNewTag }) => {
    const [addingTag, setAddingTag] = React240.useState(false);
    const icon = addingTag ? /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SubtractCircle16Regular, {}) : /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(AddCircle16Regular, {});
    const [selectedTag, setSelectedTag] = (0, import_react72.useState)("");
    const onAddTag = (tag) => {
      if (tag) {
        setAddingTag(false);
        onNewTag(tag);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(Stack, { horizontal: true, tokens: { childrenGap: 3 }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Badge, { size: "medium", onClick: () => setAddingTag(!addingTag), style: { cursor: "pointer" }, icon }),
      addingTag && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(FilteredTagInput, { selectedTag, setSelectedTag, onAddTag })
    ] });
  };

  // src/components/Content/ContentList.tsx
  var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
  var ContentList = ({
    content: content3,
    selectedContent,
    setSelectedContent
  }) => {
    const styles4 = useStyles26();
    const verticalGapStackTokens = {
      childrenGap: 10,
      padding: 10
    };
    const getContent = (item) => {
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ContentView, { item, setChecked: (checked) => {
        if (checked) {
          setSelectedContent([...selectedContent, item.id]);
        } else {
          setSelectedContent(selectedContent.filter((c3) => c3 !== item.id));
        }
      } });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Stack, { tokens: verticalGapStackTokens, children: content3.map((item) => {
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Stack.Item, { className: styles4.stackItem, children: getContent(item) }, item.id);
    }) });
  };
  var ContentView = ({ item, setChecked }) => {
    const c3 = item.content;
    if (!c3) {
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_jsx_runtime47.Fragment, { children: "Unknown" });
    }
    switch (c3.type.case) {
      case "data":
        const d3 = c3.type.value;
        switch (d3.type.case) {
          case "text":
            if (!item.content) {
              return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_jsx_runtime47.Fragment, { children: "Unknown" });
            }
            return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(RelatedContentCard, { content: item.content, setChecked });
          case "file":
            return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { children: d3.type.value.file });
          case "url":
            return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ContentCard, { item, setChecked });
        }
        break;
    }
    return null;
  };

  // src/components/TagManager.tsx
  var import_react74 = __toESM(require_react(), 1);
  var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
  var TagManager = () => {
    const { addFilteredTag, tags, filteredTags, removeFilteredTag } = useProjectContext();
    const [selectedTag, setSelectedTag] = (0, import_react74.useState)("");
    const onAddTag = (tag) => {
      if (tag) {
        addFilteredTag(tag);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(import_jsx_runtime48.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(FilteredTagInput, { onAddTag, selectedTag, setSelectedTag }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("ul", { children: filteredTags.map((g3, idx) => /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Badge, { onClick: () => removeFilteredTag(g3), children: g3 }, `${g3}-${idx}`)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { style: { overflowY: "auto", height: "100vh" }, children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(TagTree, { tags, setSelectedTag }) })
    ] });
  };
  var TagTree = ({ tags, path: path4, setSelectedTag }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Tree, { "aria-label": "Default", children: tags.map((t4, idx) => {
      const tagPath = path4 ? `${path4}/${t4.name}` : t4.name;
      return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(TreeItem, { itemType: t4.subTags.length > 0 ? "branch" : "leaf", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(TreeItemLayout, { onClick: () => setSelectedTag(tagPath), children: t4.name }),
        t4.subTags.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(TagTree, { tags: t4.subTags, path: tagPath, setSelectedTag })
      ] }, idx);
    }) });
  };

  // src/components/Content/ContentWindow.tsx
  var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
  var ContentWindow = ({}) => {
    const [inputValue, setInputValue] = (0, import_react75.useState)("");
    const [searchValue, setSearchValue] = (0, import_react75.useState)("");
    const { content: content3, showTagTree, setShowTagTree, loadContent } = useProjectContext();
    const [selectedContent, setSelectedContent] = (0, import_react75.useState)([]);
    const [inputType, setInputType] = (0, import_react75.useState)("url");
    const deleteContent = async () => {
      try {
        const res = await contentService.delete({
          contentIds: selectedContent
        });
        _t.success("Deleted content");
        setSelectedContent([]);
        loadContent();
      } catch (e3) {
        console.error(e3);
        _t.error("Failed to delete content");
      }
    };
    const CreateCard = () => {
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(Stack, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(MarkdownEditor, {}) }),
        selectedContent.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Stack, { horizontalAlign: "end", tokens: { childrenGap: 3 }, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Button, { disabled: selectedContent.length === 0, onClick: deleteContent, icon: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Delete24Regular, {}) }) }) })
      ] }) });
    };
    const SearchStack = () => {
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
        Stack,
        {
          horizontal: true,
          verticalAlign: "end",
          horizontalAlign: "center",
          styles: { root: { width: "100%", gap: 15, paddingLeft: 10, paddingRight: 10, marginBottom: 20, relative: true } },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
              TextField,
              {
                placeholder: `Search...`,
                value: searchValue,
                onChange: (e3, newValue) => setSearchValue(newValue),
                underlined: true,
                styles: { root: { width: "100%" } }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(PrimaryButton, { text: "Search", onClick: () => {
            } })
          ]
        }
      );
    };
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(Stack, { style: { padding: "5px", height: "95vh" }, verticalFill: true, children: [
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Stack.Item, { grow: true, styles: { root: { overflowY: "auto" } }, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(Stack, { horizontal: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Stack.Item, { style: { width: "100%" }, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ContentList, { content: content3, selectedContent, setSelectedContent }) }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Stack.Item, { children: showTagTree && /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(Stack, { style: { marginTop: 10 }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(SearchStack, {}),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(TagManager, {})
        ] }) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Stack.Item, { disableShrink: true, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(CreateCard, {}) })
    ] });
  };

  // src/components/AccountCard.tsx
  var import_react78 = __toESM(require_react(), 1);

  // src/components/UserSettings.tsx
  var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
  var UserSettingsDialog = ({ open, setOpen }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Dialog, { open, onOpenChange: (event, data) => {
      setOpen(data.open);
    }, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(DialogSurface, { children: /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(DialogBody, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(DialogTitle, { children: "Groups" }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(DialogContent, { children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(SettingsManager, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(DialogActions, { children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(DialogTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Button, { appearance: "secondary", children: "Close" }) }) })
    ] }) }) });
  };
  var SettingsManager = () => {
    const { userSettings, setUserSettings } = useProjectContext();
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Stack, { tokens: { childrenGap: 10 }, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(Stack.Item, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Switch, { onChange: (event, data) => {
        setUserSettings({
          ...userSettings,
          showPreviews: data.checked
        });
      }, checked: userSettings.showPreviews, label: "Show Previews" }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Switch, { onChange: (event, data) => {
        setUserSettings({
          ...userSettings,
          showQRCodes: data.checked
        });
      }, checked: userSettings.showQRCodes, label: "Show QR Codes" }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Switch, { onChange: (event, data) => {
        setUserSettings({
          ...userSettings,
          showRelatedContent: data.checked
        });
      }, checked: userSettings.showRelatedContent, label: "Show related content" })
    ] }) });
  };

  // src/components/AccountCard.tsx
  var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
  var AccountCard = () => {
    const [settingsOpen, setSettingsOpen] = (0, import_react78.useState)(false);
    const { user, setUser } = useProjectContext();
    const logout = async () => {
      try {
        await userService.logout({});
        setUser(void 0);
        _t.success("Successfully logged out!");
      } catch (e3) {
        console.error(e3);
        _t.error("Failed to logout: " + e3.message);
      }
    };
    if (!user) {
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("p", { children: "Not logged in" });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(UserSettingsDialog, { open: settingsOpen, setOpen: setSettingsOpen }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(Menu, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(MenuTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(MenuButton, { children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          Persona,
          {
            name: user.email,
            textAlignment: "center"
          }
        ) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(MenuPopover, { children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(MenuList, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(MenuItem, { onClick: logout, children: "Logout" }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(MenuItem, { onClick: () => setSettingsOpen(true), children: "Settings" })
        ] }) })
      ] })
    ] });
  };

  // src/components/GroupManager.tsx
  var import_react79 = __toESM(require_react(), 1);
  var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
  var GroupDialog = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(Dialog, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(DialogTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Button, { icon: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(PeopleCommunity24Regular, {}) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(DialogSurface, { children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(DialogBody, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(DialogTitle, { children: "Groups" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(DialogContent, { children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(GroupManager, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(DialogActions, { children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(DialogTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Button, { appearance: "secondary", children: "Close" }) }) })
      ] }) })
    ] });
  };
  var GroupMenu = ({ id, setInvite }) => {
    const { loadGroups } = useProjectContext();
    const deleteGroup = async () => {
      try {
        const res = await userService.deleteGroup({ id });
        _t.success("Deleted group");
        loadGroups();
      } catch (e3) {
        _t.error("Failed to delete group");
        console.error(e3);
      }
    };
    const createInvite = async () => {
      try {
        const res = await userService.createGroupInvite({
          groupId: id
        });
        _t.success("Created invite");
        setInvite(`${baseURL}/app/group/join/${res.secret}`);
      } catch (e3) {
        _t.error("Failed to create invite");
        console.error(e3);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(Menu, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(MenuTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
        MenuButton,
        {
          appearance: "transparent",
          icon: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(MoreHorizontal20Regular, {})
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(MenuPopover, { children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(MenuList, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(MenuItem, { onClick: createInvite, children: "Invite" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(MenuItem, { onClick: deleteGroup, children: "Delete" })
      ] }) })
    ] });
  };
  var GroupManager = () => {
    const { groups, loadGroups } = useProjectContext();
    const [name, setName] = (0, import_react79.useState)("");
    const [invite, setInvite] = (0, import_react79.useState)(void 0);
    const addGroup = async () => {
      try {
        const res = await userService.createGroup({ name });
        _t.success("Created group");
        loadGroups();
      } catch (e3) {
        _t.error("Failed to create group");
        console.error(e3);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(Stack, { tokens: { childrenGap: 10 }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(Stack.Item, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Input, { value: name, onChange: (e3) => setName(e3.target.value) }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Button, { onClick: addGroup, children: "Add Group" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Divider, {}),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(Stack.Item, { children: [
        invite && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("a", { href: invite, children: invite }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Stack, { children: groups.map((g3) => {
          return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Card, { size: "small", role: "listitem", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
            CardHeader,
            {
              header: g3.name,
              action: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(GroupMenu, { id: g3.id, setInvite })
            }
          ) }, g3.id);
        }) })
      ] })
    ] });
  };

  // src/site/ContentPage.tsx
  var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
  var ContentPage = () => {
    const { groups, currentGroup, setCurrentGroup, showTagTree, setShowTagTree } = useProjectContext();
    const onTabSelect = (event, data) => {
      setCurrentGroup(data.value);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Stack, { style: { height: "100vh", gap: 15, width: "100%" }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Stack, { horizontal: true, horizontalAlign: "space-between", styles: { root: { width: "100%" } }, children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(TabList, { selectedValue: currentGroup, onTabSelect, children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Tab2, { value: "home", children: "my shit" }),
          groups.map((g3) => {
            return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Tab2, { value: g3.id, children: g3.name }, g3.id);
          })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Stack, { horizontal: true, tokens: { childrenGap: 5 }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ToggleButton, { checked: showTagTree, onClick: () => setShowTagTree(!showTagTree), icon: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Tag24Regular, {}) }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(GroupDialog, {}),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(AccountCard, {})
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Stack.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(FileDrop, { children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ContentWindow, {}) }) })
    ] });
  };

  // src/components/Auth/AuthForm.tsx
  var import_react84 = __toESM(require_react(), 1);

  // src/components/Auth/Login.tsx
  var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
  var Login = ({ email, password, setEmail, setPassword }) => {
    const { setUser } = useProjectContext();
    const handleLogin = async () => {
      try {
        const res = await userService.login({
          email,
          password
        });
        if (!res.email) {
          console.warn("no user logged in");
          _t.error("Failed to login: no user logged in");
          return;
        }
        setUser(res);
        _t.success("Successful login!");
      } catch (e3) {
        console.error(e3);
        _t.error("Failed to login: " + e3.message);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(Stack, { tokens: { childrenGap: 10 }, styles: { root: { margin: "0 auto" } }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Input, { placeholder: "email", value: email, onChange: (e3, val) => setEmail(val.value) }),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Input, { placeholder: "password", type: "password", value: password, onChange: (e3, val) => setPassword(val.value) }),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(PrimaryButton, { text: "Login", onClick: handleLogin })
    ] });
  };

  // src/components/Auth/Register.tsx
  var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
  var Register = ({ email, password, setEmail, setPassword }) => {
    const { setUser } = useProjectContext();
    const handleRegister = async () => {
      try {
        const res = await userService.register({
          email,
          password
        });
        setUser(res);
        _t.success("Successfully registered!");
      } catch (e3) {
        console.error(e3);
        _t.error("Failed to register: " + e3.message);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(Stack, { tokens: { childrenGap: 10 }, styles: { root: { margin: "0 auto" } }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Input, { placeholder: "email", value: email, onChange: (e3, val) => setEmail(val.value) }),
      /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Input, { placeholder: "password", type: "password", value: password, onChange: (e3, val) => setPassword(val.value) }),
      /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(PrimaryButton, { text: "Register", onClick: handleRegister })
    ] });
  };

  // src/components/Auth/AuthForm.tsx
  var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
  var AuthForm = ({ allowRegister }) => {
    const [email, setEmail] = (0, import_react84.useState)("");
    const [password, setPassword] = (0, import_react84.useState)("");
    const [selectedValue, setSelectedValue] = import_react84.default.useState("login");
    const onTabSelect = (event, data) => {
      setSelectedValue(data.value);
    };
    const authFormProps = {
      email,
      password,
      setEmail,
      setPassword
    };
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(import_jsx_runtime56.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(TabList, { selectedValue, onTabSelect, children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Tab2, { value: "login", children: "Login" }),
        allowRegister && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Tab2, { value: "register", children: "Register" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { children: [
        selectedValue === "login" && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Login, { ...authFormProps }),
        allowRegister && selectedValue === "register" && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Register, { ...authFormProps })
      ] })
    ] });
  };

  // src/site/AuthLandingPage.tsx
  var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
  var styles2 = {
    authContainer: {
      display: "flex",
      height: "100vh",
      width: "100vw",
      justifyContent: "center",
      alignItems: "center"
    }
  };
  var AuthLandingPage = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { style: styles2.authContainer, children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
      Stack,
      {
        horizontalAlign: "center",
        verticalAlign: "center",
        verticalFill: true,
        tokens: {
          childrenGap: 20
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h3", { children: "If you don't know, you don't know" }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(AuthForm, { allowRegister: true })
        ]
      }
    ) });
  };

  // src/site/index.tsx
  var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
  function Home2() {
    const { user } = useProjectContext();
    if (!user) {
      return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(AuthLandingPage, {});
    }
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(ContentPage, {});
  }

  // ../node_modules/@connectrpc/connect-query/dist/esm/use-transport.js
  var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);

  // ../node_modules/@connectrpc/connect/dist/esm/code.js
  var Code2;
  (function(Code3) {
    Code3[Code3["Canceled"] = 1] = "Canceled";
    Code3[Code3["Unknown"] = 2] = "Unknown";
    Code3[Code3["InvalidArgument"] = 3] = "InvalidArgument";
    Code3[Code3["DeadlineExceeded"] = 4] = "DeadlineExceeded";
    Code3[Code3["NotFound"] = 5] = "NotFound";
    Code3[Code3["AlreadyExists"] = 6] = "AlreadyExists";
    Code3[Code3["PermissionDenied"] = 7] = "PermissionDenied";
    Code3[Code3["ResourceExhausted"] = 8] = "ResourceExhausted";
    Code3[Code3["FailedPrecondition"] = 9] = "FailedPrecondition";
    Code3[Code3["Aborted"] = 10] = "Aborted";
    Code3[Code3["OutOfRange"] = 11] = "OutOfRange";
    Code3[Code3["Unimplemented"] = 12] = "Unimplemented";
    Code3[Code3["Internal"] = 13] = "Internal";
    Code3[Code3["Unavailable"] = 14] = "Unavailable";
    Code3[Code3["DataLoss"] = 15] = "DataLoss";
    Code3[Code3["Unauthenticated"] = 16] = "Unauthenticated";
  })(Code2 || (Code2 = {}));

  // ../node_modules/@connectrpc/connect/dist/esm/protocol-connect/code-string.js
  function codeToString2(value) {
    const name = Code2[value];
    if (typeof name != "string") {
      return value.toString();
    }
    return name[0].toLowerCase() + name.substring(1).replace(/[A-Z]/g, (c3) => "_" + c3.toLowerCase());
  }

  // ../node_modules/@connectrpc/connect/dist/esm/connect-error.js
  var ConnectError2 = class _ConnectError extends Error {
    /**
     * Create a new ConnectError.
     * If no code is provided, code "unknown" is used.
     * Outgoing details are only relevant for the server side - a service may
     * raise an error with details, and it is up to the protocol implementation
     * to encode and send the details along with error.
     */
    constructor(message, code2 = Code2.Unknown, metadata, outgoingDetails, cause) {
      super(createMessage2(message, code2));
      this.name = "ConnectError";
      Object.setPrototypeOf(this, new.target.prototype);
      this.rawMessage = message;
      this.code = code2;
      this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});
      this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];
      this.cause = cause;
    }
    /**
     * Convert any value - typically a caught error into a ConnectError,
     * following these rules:
     * - If the value is already a ConnectError, return it as is.
     * - If the value is an AbortError from the fetch API, return the message
     *   of the AbortError with code Canceled.
     * - For other Errors, return the error message with code Unknown by default.
     * - For other values, return the values String representation as a message,
     *   with the code Unknown by default.
     * The original value will be used for the "cause" property for the new
     * ConnectError.
     */
    static from(reason, code2 = Code2.Unknown) {
      if (reason instanceof _ConnectError) {
        return reason;
      }
      if (reason instanceof Error) {
        if (reason.name == "AbortError") {
          return new _ConnectError(reason.message, Code2.Canceled);
        }
        return new _ConnectError(reason.message, code2, void 0, void 0, reason);
      }
      return new _ConnectError(String(reason), code2, void 0, void 0, reason);
    }
    findDetails(typeOrRegistry) {
      const registry = "typeName" in typeOrRegistry ? {
        findMessage: (typeName) => typeName === typeOrRegistry.typeName ? typeOrRegistry : void 0
      } : typeOrRegistry;
      const details = [];
      for (const data of this.details) {
        if (data instanceof Message) {
          if (registry.findMessage(data.getType().typeName)) {
            details.push(data);
          }
          continue;
        }
        const type = registry.findMessage(data.type);
        if (type) {
          try {
            details.push(type.fromBinary(data.value));
          } catch (_3) {
          }
        }
      }
      return details;
    }
  };
  function createMessage2(message, code2) {
    return message.length ? `[${codeToString2(code2)}] ${message}` : `[${codeToString2(code2)}]`;
  }

  // ../node_modules/@connectrpc/connect-query/dist/esm/use-transport.js
  var import_react86 = __toESM(require_react(), 1);
  var fallbackTransportError = new ConnectError2("To use Connect, you must provide a `Transport`: a simple object that handles `unary` and `stream` requests. `Transport` objects can easily be created by using `@connectrpc/connect-web`'s exports `createConnectTransport` and `createGrpcWebTransport`. see: https://connectrpc.com/docs/web/getting-started for more info.");
  var fallbackTransport = {
    unary: () => {
      throw fallbackTransportError;
    },
    stream: () => {
      throw fallbackTransportError;
    }
  };
  var transportContext = (0, import_react86.createContext)(fallbackTransport);
  var TransportProvider = ({ children, transport: transport2 }) => (0, import_jsx_runtime59.jsx)(transportContext.Provider, { value: transport2, children });

  // src/site/JoinGroupPage.tsx
  var import_react87 = __toESM(require_react(), 1);
  var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
  var styles3 = {
    authContainer: {
      display: "flex",
      height: "100vh",
      width: "100vw",
      justifyContent: "center",
      alignItems: "center"
    }
  };
  var Join = () => {
    const { setCurrentGroup, user } = useProjectContext();
    const [success, setSuccess] = (0, import_react87.useState)(false);
    const [name, setName] = (0, import_react87.useState)(void 0);
    const { secret } = useParams();
    (0, import_react87.useEffect)(() => {
      (async () => {
        const res = await userService.groupInfo({ secret });
        setName(res.name);
      })();
    }, [secret]);
    const joinGroup = async () => {
      try {
        const res = await userService.joinGroup({ secret });
        _t.success("Joined group");
        setSuccess(true);
        setCurrentGroup(res.id);
      } catch (e3) {
        console.error(e3);
        _t.error("Failed to join group");
      }
    };
    if (success) {
      return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Home2, {});
    }
    const info = name ? /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("h3", { children: [
      "Want to join ",
      name,
      "?"
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Spinner, { label: "Loading group info..." });
    const auth = !user ? /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(import_jsx_runtime60.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AuthForm, { allowRegister: true }) }) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Button, { onClick: joinGroup, children: "Join Group" });
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { style: styles3.authContainer, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(
      Stack,
      {
        horizontalAlign: "center",
        verticalAlign: "center",
        verticalFill: true,
        tokens: {
          childrenGap: 20
        },
        children: [
          info,
          auth
        ]
      }
    ) });
  };

  // src/App.tsx
  var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
  initializeIcons20();
  var AppRoutes = () => {
    const commonRoutes = [{
      path: "/app",
      element: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Home2, {})
    }, {
      path: "/app/group/:groupID",
      element: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Home2, {})
    }, {
      path: "/app/group/join/:secret",
      element: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Join, {})
    }];
    const element2 = useRoutes([...commonRoutes]);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(import_jsx_runtime61.Fragment, { children: element2 });
  };
  function App() {
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(FluentProvider, { theme: webDarkTheme, children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
      ErrorBoundary,
      {
        FallbackComponent: FallbackError,
        children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(HotkeysProvider, { initiallyActiveScopes: ["editor"], children: /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)(ProjectProvider, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(BrowserRouter, { children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(TransportProvider, { transport, children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(QueryClientProvider, { client: queryClient, children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(AppRoutes, {}) }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Ie, {})
        ] }) })
      }
    ) });
  }

  // ../node_modules/source-map-support/register.js
  require_source_map_support().install();

  // src/index.tsx
  var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
  window.React = import_react89.default;
  if (false) {
    new EventSource("/esbuild").addEventListener("change", () => location.reload());
  }
  var root2 = import_client.default.createRoot(document.getElementById("root"));
  root2.render(
    /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(import_react89.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(App, {}) })
  );
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (** @license React v0.20.0
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

keyborg/dist/keyborg.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

keyborg/dist/keyborg.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.8.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.15.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.15.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

is-plain-object/dist/is-plain-object.mjs:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

qrcode.react/lib/esm/index.js:
  (**
   * @license QR Code generator library (TypeScript)
   * Copyright (c) Project Nayuki.
   * SPDX-License-Identifier: MIT
   *)
  (**
   * @license qrcode.react
   * Copyright (c) Paul O'Shannessy
   * SPDX-License-Identifier: ISC
   *)
*/
//# sourceMappingURL=index.js.map

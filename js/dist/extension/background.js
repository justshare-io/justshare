"use strict";(()=>{function b(n,e){if(!n)throw new Error(e)}var ss=34028234663852886e22,os=-34028234663852886e22,is=4294967295,ls=2147483647,us=-2147483648;function W(n){if(typeof n!="number")throw new Error("invalid int 32: "+typeof n);if(!Number.isInteger(n)||n>ls||n<us)throw new Error("invalid int 32: "+n)}function Ie(n){if(typeof n!="number")throw new Error("invalid uint 32: "+typeof n);if(!Number.isInteger(n)||n>is||n<0)throw new Error("invalid uint 32: "+n)}function tt(n){if(typeof n!="number")throw new Error("invalid float 32: "+typeof n);if(Number.isFinite(n)&&(n>ss||n<os))throw new Error("invalid float 32: "+n)}var zr=Symbol("@bufbuild/protobuf/enum-type");function Hr(n){let e=n[zr];return b(e,"missing enum type on enum object"),e}function Un(n,e,t,s){n[zr]=Fn(e,t.map(r=>({no:r.no,name:r.name,localName:n[r.no]})),s)}function Fn(n,e,t){let s=Object.create(null),r=Object.create(null),o=[];for(let i of e){let l=Kr(i);o.push(l),s[i.name]=l,r[i.no]=l}return{typeName:n,values:o,findName(i){return s[i]},findNumber(i){return r[i]}}}function Wr(n,e,t){let s={};for(let r of e){let o=Kr(r);s[o.localName]=o.no,s[o.no]=o.localName}return Un(s,n,e,t),s}function Kr(n){return"localName"in n?n:Object.assign(Object.assign({},n),{localName:n.name})}var c=class{equals(e){return this.getType().runtime.util.equals(this.getType(),this,e)}clone(){return this.getType().runtime.util.clone(this)}fromBinary(e,t){let s=this.getType(),r=s.runtime.bin,o=r.makeReadOptions(t);return r.readMessage(this,o.readerFactory(e),e.byteLength,o),this}fromJson(e,t){let s=this.getType(),r=s.runtime.json,o=r.makeReadOptions(t);return r.readMessage(s,e,o,this),this}fromJsonString(e,t){let s;try{s=JSON.parse(e)}catch(r){throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${r instanceof Error?r.message:String(r)}`)}return this.fromJson(s,t)}toBinary(e){let t=this.getType(),s=t.runtime.bin,r=s.makeWriteOptions(e),o=r.writerFactory();return s.writeMessage(this,o,r),o.finish()}toJson(e){let t=this.getType(),s=t.runtime.json,r=s.makeWriteOptions(e);return s.writeMessage(this,r)}toJsonString(e){var t;let s=this.toJson(e);return JSON.stringify(s,null,(t=e?.prettySpaces)!==null&&t!==void 0?t:0)}toJSON(){return this.toJson({emitDefaultValues:!0})}getType(){return Object.getPrototypeOf(this).constructor}};function Xr(n,e,t,s){var r;let o=(r=s?.localName)!==null&&r!==void 0?r:e.substring(e.lastIndexOf(".")+1),i={[o]:function(l){n.util.initFields(this),n.util.initPartial(l,this)}}[o];return Object.setPrototypeOf(i.prototype,new c),Object.assign(i,{runtime:n,typeName:e,fields:n.util.newFieldList(t),fromBinary(l,u){return new i().fromBinary(l,u)},fromJson(l,u){return new i().fromJson(l,u)},fromJsonString(l,u){return new i().fromJsonString(l,u)},equals(l,u){return n.util.equals(i,l,u)}}),i}function nt(n,e,t,s){return{syntax:n,json:e,bin:t,util:s,makeMessageType(r,o,i){return Xr(this,r,o,i)},makeEnum:Wr,makeEnumType:Fn,getEnumType:Hr}}var m;(function(n){n[n.DOUBLE=1]="DOUBLE",n[n.FLOAT=2]="FLOAT",n[n.INT64=3]="INT64",n[n.UINT64=4]="UINT64",n[n.INT32=5]="INT32",n[n.FIXED64=6]="FIXED64",n[n.FIXED32=7]="FIXED32",n[n.BOOL=8]="BOOL",n[n.STRING=9]="STRING",n[n.BYTES=12]="BYTES",n[n.UINT32=13]="UINT32",n[n.SFIXED32=15]="SFIXED32",n[n.SFIXED64=16]="SFIXED64",n[n.SINT32=17]="SINT32",n[n.SINT64=18]="SINT64"})(m||(m={}));var v;(function(n){n[n.BIGINT=0]="BIGINT",n[n.STRING=1]="STRING"})(v||(v={}));function Zr(){let n=0,e=0;for(let s=0;s<28;s+=7){let r=this.buf[this.pos++];if(n|=(r&127)<<s,!(r&128))return this.assertBounds(),[n,e]}let t=this.buf[this.pos++];if(n|=(t&15)<<28,e=(t&112)>>4,!(t&128))return this.assertBounds(),[n,e];for(let s=3;s<=31;s+=7){let r=this.buf[this.pos++];if(e|=(r&127)<<s,!(r&128))return this.assertBounds(),[n,e]}throw new Error("invalid varint")}function at(n,e,t){for(let o=0;o<28;o=o+7){let i=n>>>o,l=!(!(i>>>7)&&e==0),u=(l?i|128:i)&255;if(t.push(u),!l)return}let s=n>>>28&15|(e&7)<<4,r=!!(e>>3);if(t.push((r?s|128:s)&255),!!r){for(let o=3;o<31;o=o+7){let i=e>>>o,l=!!(i>>>7),u=(l?i|128:i)&255;if(t.push(u),!l)return}t.push(e>>>31&1)}}var rt=4294967296;function An(n){let e=n[0]==="-";e&&(n=n.slice(1));let t=1e6,s=0,r=0;function o(i,l){let u=Number(n.slice(i,l));r*=t,s=s*t+u,s>=rt&&(r=r+(s/rt|0),s=s%rt)}return o(-24,-18),o(-18,-12),o(-12,-6),o(-6),e?ea(s,r):Dn(s,r)}function _r(n,e){let t=Dn(n,e),s=t.hi&2147483648;s&&(t=ea(t.lo,t.hi));let r=Gn(t.lo,t.hi);return s?"-"+r:r}function Gn(n,e){if({lo:n,hi:e}=cs(n,e),e<=2097151)return String(rt*e+n);let t=n&16777215,s=(n>>>24|e<<8)&16777215,r=e>>16&65535,o=t+s*6777216+r*6710656,i=s+r*8147497,l=r*2,u=1e7;return o>=u&&(i+=Math.floor(o/u),o%=u),i>=u&&(l+=Math.floor(i/u),i%=u),l.toString()+Qr(i)+Qr(o)}function cs(n,e){return{lo:n>>>0,hi:e>>>0}}function Dn(n,e){return{lo:n|0,hi:e|0}}function ea(n,e){return e=~e,n?n=~n+1:e+=1,Dn(n,e)}var Qr=n=>{let e=String(n);return"0000000".slice(e.length)+e};function Vn(n,e){if(n>=0){for(;n>127;)e.push(n&127|128),n=n>>>7;e.push(n)}else{for(let t=0;t<9;t++)e.push(n&127|128),n=n>>7;e.push(1)}}function ta(){let n=this.buf[this.pos++],e=n&127;if(!(n&128))return this.assertBounds(),e;if(n=this.buf[this.pos++],e|=(n&127)<<7,!(n&128))return this.assertBounds(),e;if(n=this.buf[this.pos++],e|=(n&127)<<14,!(n&128))return this.assertBounds(),e;if(n=this.buf[this.pos++],e|=(n&127)<<21,!(n&128))return this.assertBounds(),e;n=this.buf[this.pos++],e|=(n&15)<<28;for(let t=5;n&128&&t<10;t++)n=this.buf[this.pos++];if(n&128)throw new Error("invalid varint");return this.assertBounds(),e>>>0}function ds(){let n=new DataView(new ArrayBuffer(8));if(typeof BigInt=="function"&&typeof n.getBigInt64=="function"&&typeof n.getBigUint64=="function"&&typeof n.setBigInt64=="function"&&typeof n.setBigUint64=="function"&&(typeof process!="object"||typeof process.env!="object"||process.env.BUF_BIGINT_DISABLE!=="1")){let r=BigInt("-9223372036854775808"),o=BigInt("9223372036854775807"),i=BigInt("0"),l=BigInt("18446744073709551615");return{zero:BigInt(0),supported:!0,parse(u){let f=typeof u=="bigint"?u:BigInt(u);if(f>o||f<r)throw new Error(`int64 invalid: ${u}`);return f},uParse(u){let f=typeof u=="bigint"?u:BigInt(u);if(f>l||f<i)throw new Error(`uint64 invalid: ${u}`);return f},enc(u){return n.setBigInt64(0,this.parse(u),!0),{lo:n.getInt32(0,!0),hi:n.getInt32(4,!0)}},uEnc(u){return n.setBigInt64(0,this.uParse(u),!0),{lo:n.getInt32(0,!0),hi:n.getInt32(4,!0)}},dec(u,f){return n.setInt32(0,u,!0),n.setInt32(4,f,!0),n.getBigInt64(0,!0)},uDec(u,f){return n.setInt32(0,u,!0),n.setInt32(4,f,!0),n.getBigUint64(0,!0)}}}let t=r=>b(/^-?[0-9]+$/.test(r),`int64 invalid: ${r}`),s=r=>b(/^[0-9]+$/.test(r),`uint64 invalid: ${r}`);return{zero:"0",supported:!1,parse(r){return typeof r!="string"&&(r=r.toString()),t(r),r},uParse(r){return typeof r!="string"&&(r=r.toString()),s(r),r},enc(r){return typeof r!="string"&&(r=r.toString()),t(r),An(r)},uEnc(r){return typeof r!="string"&&(r=r.toString()),s(r),An(r)},dec(r,o){return _r(r,o)},uDec(r,o){return Gn(r,o)}}}var J=ds();var k;(function(n){n[n.Varint=0]="Varint",n[n.Bit64=1]="Bit64",n[n.LengthDelimited=2]="LengthDelimited",n[n.StartGroup=3]="StartGroup",n[n.EndGroup=4]="EndGroup",n[n.Bit32=5]="Bit32"})(k||(k={}));var st=class{constructor(e){this.stack=[],this.textEncoder=e??new TextEncoder,this.chunks=[],this.buf=[]}finish(){this.chunks.push(new Uint8Array(this.buf));let e=0;for(let r=0;r<this.chunks.length;r++)e+=this.chunks[r].length;let t=new Uint8Array(e),s=0;for(let r=0;r<this.chunks.length;r++)t.set(this.chunks[r],s),s+=this.chunks[r].length;return this.chunks=[],t}fork(){return this.stack.push({chunks:this.chunks,buf:this.buf}),this.chunks=[],this.buf=[],this}join(){let e=this.finish(),t=this.stack.pop();if(!t)throw new Error("invalid state, fork stack empty");return this.chunks=t.chunks,this.buf=t.buf,this.uint32(e.byteLength),this.raw(e)}tag(e,t){return this.uint32((e<<3|t)>>>0)}raw(e){return this.buf.length&&(this.chunks.push(new Uint8Array(this.buf)),this.buf=[]),this.chunks.push(e),this}uint32(e){for(Ie(e);e>127;)this.buf.push(e&127|128),e=e>>>7;return this.buf.push(e),this}int32(e){return W(e),Vn(e,this.buf),this}bool(e){return this.buf.push(e?1:0),this}bytes(e){return this.uint32(e.byteLength),this.raw(e)}string(e){let t=this.textEncoder.encode(e);return this.uint32(t.byteLength),this.raw(t)}float(e){tt(e);let t=new Uint8Array(4);return new DataView(t.buffer).setFloat32(0,e,!0),this.raw(t)}double(e){let t=new Uint8Array(8);return new DataView(t.buffer).setFloat64(0,e,!0),this.raw(t)}fixed32(e){Ie(e);let t=new Uint8Array(4);return new DataView(t.buffer).setUint32(0,e,!0),this.raw(t)}sfixed32(e){W(e);let t=new Uint8Array(4);return new DataView(t.buffer).setInt32(0,e,!0),this.raw(t)}sint32(e){return W(e),e=(e<<1^e>>31)>>>0,Vn(e,this.buf),this}sfixed64(e){let t=new Uint8Array(8),s=new DataView(t.buffer),r=J.enc(e);return s.setInt32(0,r.lo,!0),s.setInt32(4,r.hi,!0),this.raw(t)}fixed64(e){let t=new Uint8Array(8),s=new DataView(t.buffer),r=J.uEnc(e);return s.setInt32(0,r.lo,!0),s.setInt32(4,r.hi,!0),this.raw(t)}int64(e){let t=J.enc(e);return at(t.lo,t.hi,this.buf),this}sint64(e){let t=J.enc(e),s=t.hi>>31,r=t.lo<<1^s,o=(t.hi<<1|t.lo>>>31)^s;return at(r,o,this.buf),this}uint64(e){let t=J.uEnc(e);return at(t.lo,t.hi,this.buf),this}},ot=class{constructor(e,t){this.varint64=Zr,this.uint32=ta,this.buf=e,this.len=e.length,this.pos=0,this.view=new DataView(e.buffer,e.byteOffset,e.byteLength),this.textDecoder=t??new TextDecoder}tag(){let e=this.uint32(),t=e>>>3,s=e&7;if(t<=0||s<0||s>5)throw new Error("illegal tag: field no "+t+" wire type "+s);return[t,s]}skip(e){let t=this.pos;switch(e){case k.Varint:for(;this.buf[this.pos++]&128;);break;case k.Bit64:this.pos+=4;case k.Bit32:this.pos+=4;break;case k.LengthDelimited:let s=this.uint32();this.pos+=s;break;case k.StartGroup:let r;for(;(r=this.tag()[1])!==k.EndGroup;)this.skip(r);break;default:throw new Error("cant skip wire type "+e)}return this.assertBounds(),this.buf.subarray(t,this.pos)}assertBounds(){if(this.pos>this.len)throw new RangeError("premature EOF")}int32(){return this.uint32()|0}sint32(){let e=this.uint32();return e>>>1^-(e&1)}int64(){return J.dec(...this.varint64())}uint64(){return J.uDec(...this.varint64())}sint64(){let[e,t]=this.varint64(),s=-(e&1);return e=(e>>>1|(t&1)<<31)^s,t=t>>>1^s,J.dec(e,t)}bool(){let[e,t]=this.varint64();return e!==0||t!==0}fixed32(){return this.view.getUint32((this.pos+=4)-4,!0)}sfixed32(){return this.view.getInt32((this.pos+=4)-4,!0)}fixed64(){return J.uDec(this.sfixed32(),this.sfixed32())}sfixed64(){return J.dec(this.sfixed32(),this.sfixed32())}float(){return this.view.getFloat32((this.pos+=4)-4,!0)}double(){return this.view.getFloat64((this.pos+=8)-8,!0)}bytes(){let e=this.uint32(),t=this.pos;return this.pos+=e,this.assertBounds(),this.buf.subarray(t,t+e)}string(){return this.textDecoder.decode(this.bytes())}};function z(n,e){return e instanceof c||!n.fieldWrapper?e:n.fieldWrapper.wrapField(e)}var io={"google.protobuf.DoubleValue":m.DOUBLE,"google.protobuf.FloatValue":m.FLOAT,"google.protobuf.Int64Value":m.INT64,"google.protobuf.UInt64Value":m.UINT64,"google.protobuf.Int32Value":m.INT32,"google.protobuf.UInt32Value":m.UINT32,"google.protobuf.BoolValue":m.BOOL,"google.protobuf.StringValue":m.STRING,"google.protobuf.BytesValue":m.BYTES};function L(n,e,t){if(e===t)return!0;if(n==m.BYTES){if(!(e instanceof Uint8Array)||!(t instanceof Uint8Array)||e.length!==t.length)return!1;for(let s=0;s<e.length;s++)if(e[s]!==t[s])return!1;return!0}switch(n){case m.UINT64:case m.FIXED64:case m.INT64:case m.SFIXED64:case m.SINT64:return e==t}return!1}function Oe(n,e){switch(n){case m.BOOL:return!1;case m.UINT64:case m.FIXED64:case m.INT64:case m.SFIXED64:case m.SINT64:return e==0?J.zero:"0";case m.DOUBLE:case m.FLOAT:return 0;case m.BYTES:return new Uint8Array(0);case m.STRING:return"";default:return 0}}function Yn(n,e){let t=e===void 0,s=k.Varint,r=e===0;switch(n){case m.STRING:r=t||!e.length,s=k.LengthDelimited;break;case m.BOOL:r=e===!1;break;case m.DOUBLE:s=k.Bit64;break;case m.FLOAT:s=k.Bit32;break;case m.INT64:r=t||e==0;break;case m.UINT64:r=t||e==0;break;case m.FIXED64:r=t||e==0,s=k.Bit64;break;case m.BYTES:r=t||!e.byteLength,s=k.LengthDelimited;break;case m.FIXED32:s=k.Bit32;break;case m.SFIXED32:s=k.Bit32;break;case m.SFIXED64:r=t||e==0,s=k.Bit64;break;case m.SINT64:r=t||e==0;break}let o=m[n].toLowerCase();return[s,o,t||r]}var K=Symbol("@bufbuild/protobuf/unknown-fields"),na={readUnknownFields:!0,readerFactory:n=>new ot(n)},ra={writeUnknownFields:!0,writerFactory:()=>new st};function fs(n){return n?Object.assign(Object.assign({},na),n):na}function ms(n){return n?Object.assign(Object.assign({},ra),n):ra}function ut(){return{makeReadOptions:fs,makeWriteOptions:ms,listUnknownFields(n){var e;return(e=n[K])!==null&&e!==void 0?e:[]},discardUnknownFields(n){delete n[K]},writeUnknownFields(n,e){let s=n[K];if(s)for(let r of s)e.tag(r.no,r.wireType).raw(r.data)},onUnknownField(n,e,t,s){let r=n;Array.isArray(r[K])||(r[K]=[]),r[K].push({no:e,wireType:t,data:s})},readMessage(n,e,t,s,r){let o=n.getType(),i=r?e.len:e.pos+t,l,u;for(;e.pos<i&&([l,u]=e.tag(),u!=k.EndGroup);){let f=o.fields.find(l);if(!f){let p=e.skip(u);s.readUnknownFields&&this.onUnknownField(n,l,u,p);continue}let g=n,P=f.repeated,T=f.localName;switch(f.oneof&&(g=g[f.oneof.localName],g.case!=T&&delete g.value,g.case=T,T="value"),f.kind){case"scalar":case"enum":let p=f.kind=="enum"?m.INT32:f.T,y=lt;if(f.kind=="scalar"&&f.L>0&&(y=gs),P){let O=g[T];if(u==k.LengthDelimited&&p!=m.STRING&&p!=m.BYTES){let D=e.uint32()+e.pos;for(;e.pos<D;)O.push(y(e,p))}else O.push(y(e,p))}else g[T]=y(e,p);break;case"message":let w=f.T;P?g[T].push(it(e,new w,s,f)):g[T]instanceof c?it(e,g[T],s,f):(g[T]=it(e,new w,s,f),w.fieldWrapper&&!f.oneof&&!f.repeated&&(g[T]=w.fieldWrapper.unwrapField(g[T])));break;case"map":let[S,E]=ps(f,e,s);g[T][S]=E;break}}if(r&&(u!=k.EndGroup||l!==t))throw new Error("invalid end group tag")}}}function it(n,e,t,s){let r=e.getType().runtime.bin,o=s?.delimited;return r.readMessage(e,n,o?s?.no:n.uint32(),t,o),e}function ps(n,e,t){let s=e.uint32(),r=e.pos+s,o,i;for(;e.pos<r;){let[l]=e.tag();switch(l){case 1:o=lt(e,n.K);break;case 2:switch(n.V.kind){case"scalar":i=lt(e,n.V.T);break;case"enum":i=e.int32();break;case"message":i=it(e,new n.V.T,t,void 0);break}break}}if(o===void 0){let l=Oe(n.K,v.BIGINT);o=n.K==m.BOOL?l.toString():l}if(typeof o!="string"&&typeof o!="number"&&(o=o.toString()),i===void 0)switch(n.V.kind){case"scalar":i=Oe(n.V.T,v.BIGINT);break;case"enum":i=0;break;case"message":i=new n.V.T;break}return[o,i]}function gs(n,e){let t=lt(n,e);return typeof t=="bigint"?t.toString():t}function lt(n,e){switch(e){case m.STRING:return n.string();case m.BOOL:return n.bool();case m.DOUBLE:return n.double();case m.FLOAT:return n.float();case m.INT32:return n.int32();case m.INT64:return n.int64();case m.UINT64:return n.uint64();case m.FIXED64:return n.fixed64();case m.BYTES:return n.bytes();case m.FIXED32:return n.fixed32();case m.SFIXED32:return n.sfixed32();case m.SFIXED64:return n.sfixed64();case m.SINT64:return n.sint64();case m.UINT32:return n.uint32();case m.SINT32:return n.sint32()}}function ct(n,e,t,s,r){n.tag(t.no,k.LengthDelimited),n.fork();let o=s;switch(t.K){case m.INT32:case m.FIXED32:case m.UINT32:case m.SFIXED32:case m.SINT32:o=Number.parseInt(s);break;case m.BOOL:b(s=="true"||s=="false"),o=s=="true";break}switch(U(n,t.K,1,o,!0),t.V.kind){case"scalar":U(n,t.V.T,2,r,!0);break;case"enum":U(n,m.INT32,2,r,!0);break;case"message":n.tag(2,k.LengthDelimited).bytes(r.toBinary(e));break}n.join()}function X(n,e,t,s){if(s!==void 0){let r=z(t.T,s);t?.delimited?n.tag(t.no,k.StartGroup).raw(r.toBinary(e)).tag(t.no,k.EndGroup):n.tag(t.no,k.LengthDelimited).bytes(r.toBinary(e))}}function U(n,e,t,s,r){let[o,i,l]=Yn(e,s);(!l||r)&&n.tag(t,o)[i](s)}function dt(n,e,t,s){if(!s.length)return;n.tag(t,k.LengthDelimited).fork();let[,r]=Yn(e);for(let o=0;o<s.length;o++)n[r](s[o]);n.join()}function aa(){return Object.assign(Object.assign({},ut()),{writeMessage(n,e,t){let s=n.getType();for(let r of s.fields.byNumber()){let o,i=r.repeated,l=r.localName;if(r.oneof){let u=n[r.oneof.localName];if(u.case!==l)continue;o=u.value}else o=n[l];switch(r.kind){case"scalar":case"enum":let u=r.kind=="enum"?m.INT32:r.T;if(i)if(r.packed)dt(e,u,r.no,o);else for(let f of o)U(e,u,r.no,f,!0);else o!==void 0&&U(e,u,r.no,o,!!r.oneof||r.opt);break;case"message":if(i)for(let f of o)X(e,t,r,f);else X(e,t,r,o);break;case"map":for(let[f,g]of Object.entries(o))ct(e,t,r,f,g);break}}return t.writeUnknownFields&&this.writeUnknownFields(n,e),e}})}var F="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""),ft=[];for(let n=0;n<F.length;n++)ft[F[n].charCodeAt(0)]=n;ft["-".charCodeAt(0)]=F.indexOf("+");ft["_".charCodeAt(0)]=F.indexOf("/");var V={dec(n){let e=n.length*3/4;n[n.length-2]=="="?e-=2:n[n.length-1]=="="&&(e-=1);let t=new Uint8Array(e),s=0,r=0,o,i=0;for(let l=0;l<n.length;l++){if(o=ft[n.charCodeAt(l)],o===void 0)switch(n[l]){case"=":r=0;case`
`:case"\r":case"	":case" ":continue;default:throw Error("invalid base64 string.")}switch(r){case 0:i=o,r=1;break;case 1:t[s++]=i<<2|(o&48)>>4,i=o,r=2;break;case 2:t[s++]=(i&15)<<4|(o&60)>>2,i=o,r=3;break;case 3:t[s++]=(i&3)<<6|o,r=0;break}}if(r==1)throw Error("invalid base64 string.");return t.subarray(0,s)},enc(n){let e="",t=0,s,r=0;for(let o=0;o<n.length;o++)switch(s=n[o],t){case 0:e+=F[s>>2],r=(s&3)<<4,t=1;break;case 1:e+=F[r|s>>4],r=(s&15)<<2,t=2;break;case 2:e+=F[r|s>>6],e+=F[s&63],t=0;break}return t&&(e+=F[r],e+="=",t==1&&(e+="=")),e}};var sa={ignoreUnknownFields:!1},oa={emitDefaultValues:!1,enumAsInteger:!1,useProtoFieldName:!1,prettySpaces:0};function ys(n){return n?Object.assign(Object.assign({},sa),n):sa}function hs(n){return n?Object.assign(Object.assign({},oa),n):oa}function mt(n){let e=n(Ts,ia);return{makeReadOptions:ys,makeWriteOptions:hs,readMessage(t,s,r,o){if(s==null||Array.isArray(s)||typeof s!="object")throw new Error(`cannot decode message ${t.typeName} from JSON: ${this.debug(s)}`);o=o??new t;let i={};for(let[l,u]of Object.entries(s)){let f=t.fields.findJsonName(l);if(!f){if(!r.ignoreUnknownFields)throw new Error(`cannot decode message ${t.typeName} from JSON: key "${l}" is unknown`);continue}let g=f.localName,P=o;if(f.oneof){if(u===null&&f.kind=="scalar")continue;let T=i[f.oneof.localName];if(T)throw new Error(`cannot decode message ${t.typeName} from JSON: multiple keys for oneof "${f.oneof.name}" present: "${T}", "${l}"`);i[f.oneof.localName]=l,P=P[f.oneof.localName]={case:g},g="value"}if(f.repeated){if(u===null)continue;if(!Array.isArray(u))throw new Error(`cannot decode field ${t.typeName}.${f.name} from JSON: ${this.debug(u)}`);let T=P[g];for(let p of u){if(p===null)throw new Error(`cannot decode field ${t.typeName}.${f.name} from JSON: ${this.debug(p)}`);let y;switch(f.kind){case"message":y=f.T.fromJson(p,r);break;case"enum":if(y=jn(f.T,p,r.ignoreUnknownFields),y===void 0)continue;break;case"scalar":try{y=Ee(f.T,p,f.L)}catch(w){let S=`cannot decode field ${t.typeName}.${f.name} from JSON: ${this.debug(p)}`;throw w instanceof Error&&w.message.length>0&&(S+=`: ${w.message}`),new Error(S)}break}T.push(y)}}else if(f.kind=="map"){if(u===null)continue;if(Array.isArray(u)||typeof u!="object")throw new Error(`cannot decode field ${t.typeName}.${f.name} from JSON: ${this.debug(u)}`);let T=P[g];for(let[p,y]of Object.entries(u)){if(y===null)throw new Error(`cannot decode field ${t.typeName}.${f.name} from JSON: map value null`);let w;switch(f.V.kind){case"message":w=f.V.T.fromJson(y,r);break;case"enum":if(w=jn(f.V.T,y,r.ignoreUnknownFields),w===void 0)continue;break;case"scalar":try{w=Ee(f.V.T,y,v.BIGINT)}catch(S){let E=`cannot decode map value for field ${t.typeName}.${f.name} from JSON: ${this.debug(u)}`;throw S instanceof Error&&S.message.length>0&&(E+=`: ${S.message}`),new Error(E)}break}try{T[Ee(f.K,f.K==m.BOOL?p=="true"?!0:p=="false"?!1:p:p,v.BIGINT).toString()]=w}catch(S){let E=`cannot decode map key for field ${t.typeName}.${f.name} from JSON: ${this.debug(u)}`;throw S instanceof Error&&S.message.length>0&&(E+=`: ${S.message}`),new Error(E)}}}else switch(f.kind){case"message":let T=f.T;if(u===null&&T.typeName!="google.protobuf.Value"){if(f.oneof)throw new Error(`cannot decode field ${t.typeName}.${f.name} from JSON: null is invalid for oneof field "${l}"`);continue}P[g]instanceof c?P[g].fromJson(u,r):(P[g]=T.fromJson(u,r),T.fieldWrapper&&!f.oneof&&(P[g]=T.fieldWrapper.unwrapField(P[g])));break;case"enum":let p=jn(f.T,u,r.ignoreUnknownFields);p!==void 0&&(P[g]=p);break;case"scalar":try{P[g]=Ee(f.T,u,f.L)}catch(y){let w=`cannot decode field ${t.typeName}.${f.name} from JSON: ${this.debug(u)}`;throw y instanceof Error&&y.message.length>0&&(w+=`: ${y.message}`),new Error(w)}break}}return o},writeMessage(t,s){let r=t.getType(),o={},i;try{for(let l of r.fields.byMember()){let u;if(l.kind=="oneof"){let f=t[l.localName];if(f.value===void 0)continue;if(i=l.findField(f.case),!i)throw"oneof case not found: "+f.case;u=e(i,f.value,s)}else i=l,u=e(i,t[i.localName],s);u!==void 0&&(o[s.useProtoFieldName?i.name:i.jsonName]=u)}}catch(l){let u=i?`cannot encode field ${r.typeName}.${i.name} to JSON`:`cannot encode message ${r.typeName} to JSON`,f=l instanceof Error?l.message:String(l);throw new Error(u+(f.length>0?`: ${f}`:""))}return o},readScalar:Ee,writeScalar:ia,debug:la}}function la(n){if(n===null)return"null";switch(typeof n){case"object":return Array.isArray(n)?"array":"object";case"string":return n.length>100?"string":`"${n.split('"').join('\\"')}"`;default:return String(n)}}function Ee(n,e,t){switch(n){case m.DOUBLE:case m.FLOAT:if(e===null)return 0;if(e==="NaN")return Number.NaN;if(e==="Infinity")return Number.POSITIVE_INFINITY;if(e==="-Infinity")return Number.NEGATIVE_INFINITY;if(e===""||typeof e=="string"&&e.trim().length!==e.length||typeof e!="string"&&typeof e!="number")break;let s=Number(e);if(Number.isNaN(s)||!Number.isFinite(s))break;return n==m.FLOAT&&tt(s),s;case m.INT32:case m.FIXED32:case m.SFIXED32:case m.SINT32:case m.UINT32:if(e===null)return 0;let r;if(typeof e=="number"?r=e:typeof e=="string"&&e.length>0&&e.trim().length===e.length&&(r=Number(e)),r===void 0)break;return n==m.UINT32?Ie(r):W(r),r;case m.INT64:case m.SFIXED64:case m.SINT64:if(e===null)return J.zero;if(typeof e!="number"&&typeof e!="string")break;let o=J.parse(e);return t?o.toString():o;case m.FIXED64:case m.UINT64:if(e===null)return J.zero;if(typeof e!="number"&&typeof e!="string")break;let i=J.uParse(e);return t?i.toString():i;case m.BOOL:if(e===null)return!1;if(typeof e!="boolean")break;return e;case m.STRING:if(e===null)return"";if(typeof e!="string")break;try{encodeURIComponent(e)}catch{throw new Error("invalid UTF8")}return e;case m.BYTES:if(e===null||e==="")return new Uint8Array(0);if(typeof e!="string")break;return V.dec(e)}throw new Error}function jn(n,e,t){if(e===null)return 0;switch(typeof e){case"number":if(Number.isInteger(e))return e;break;case"string":let s=n.findName(e);if(s||t)return s?.no;break}throw new Error(`cannot decode enum ${n.typeName} from JSON: ${la(e)}`)}function Ts(n,e,t,s){var r;if(e===void 0)return e;if(e===0&&!t)return;if(s)return e;if(n.typeName=="google.protobuf.NullValue")return null;let o=n.findNumber(e);return(r=o?.name)!==null&&r!==void 0?r:e}function ia(n,e,t){if(e!==void 0)switch(n){case m.INT32:case m.SFIXED32:case m.SINT32:case m.FIXED32:case m.UINT32:return b(typeof e=="number"),e!=0||t?e:void 0;case m.FLOAT:case m.DOUBLE:return b(typeof e=="number"),Number.isNaN(e)?"NaN":e===Number.POSITIVE_INFINITY?"Infinity":e===Number.NEGATIVE_INFINITY?"-Infinity":e!==0||t?e:void 0;case m.STRING:return b(typeof e=="string"),e.length>0||t?e:void 0;case m.BOOL:return b(typeof e=="boolean"),e||t?e:void 0;case m.UINT64:case m.FIXED64:case m.INT64:case m.SFIXED64:case m.SINT64:return b(typeof e=="bigint"||typeof e=="string"||typeof e=="number"),t||e!=0?e.toString(10):void 0;case m.BYTES:return b(e instanceof Uint8Array),t||e.byteLength>0?V.enc(e):void 0}}function ua(){return mt((n,e)=>function(s,r,o){if(s.kind=="map"){let i={};switch(s.V.kind){case"scalar":for(let[u,f]of Object.entries(r)){let g=e(s.V.T,f,!0);b(g!==void 0),i[u.toString()]=g}break;case"message":for(let[u,f]of Object.entries(r))i[u.toString()]=f.toJson(o);break;case"enum":let l=s.V.T;for(let[u,f]of Object.entries(r)){b(f===void 0||typeof f=="number");let g=n(l,f,!0,o.enumAsInteger);b(g!==void 0),i[u.toString()]=g}break}return o.emitDefaultValues||Object.keys(i).length>0?i:void 0}else if(s.repeated){let i=[];switch(s.kind){case"scalar":for(let l=0;l<r.length;l++)i.push(e(s.T,r[l],!0));break;case"enum":for(let l=0;l<r.length;l++)i.push(n(s.T,r[l],!0,o.enumAsInteger));break;case"message":for(let l=0;l<r.length;l++)i.push(z(s.T,r[l]).toJson(o));break}return o.emitDefaultValues||i.length>0?i:void 0}else switch(s.kind){case"scalar":return e(s.T,r,!!s.oneof||s.opt||o.emitDefaultValues);case"enum":return n(s.T,r,!!s.oneof||s.opt||o.emitDefaultValues,o.enumAsInteger);case"message":return r!==void 0?z(s.T,r).toJson(o):void 0}})}function gt(){return{setEnumType:Un,initPartial(n,e){if(n===void 0)return;let t=e.getType();for(let s of t.fields.byMember()){let r=s.localName,o=e,i=n;if(i[r]!==void 0)switch(s.kind){case"oneof":let l=i[r].case;if(l===void 0)continue;let u=s.findField(l),f=i[r].value;u&&u.kind=="message"&&!(f instanceof u.T)?f=new u.T(f):u&&u.kind==="scalar"&&u.T===m.BYTES&&(f=Ne(f)),o[r]={case:l,value:f};break;case"scalar":case"enum":let g=i[r];s.T===m.BYTES&&(g=s.repeated?g.map(Ne):Ne(g)),o[r]=g;break;case"map":switch(s.V.kind){case"scalar":case"enum":if(s.V.T===m.BYTES)for(let[p,y]of Object.entries(i[r]))o[r][p]=Ne(y);else Object.assign(o[r],i[r]);break;case"message":let T=s.V.T;for(let p of Object.keys(i[r])){let y=i[r][p];T.fieldWrapper||(y=new T(y)),o[r][p]=y}break}break;case"message":let P=s.T;if(s.repeated)o[r]=i[r].map(T=>T instanceof P?T:new P(T));else if(i[r]!==void 0){let T=i[r];P.fieldWrapper?P.typeName==="google.protobuf.BytesValue"?o[r]=Ne(T):o[r]=T:o[r]=T instanceof P?T:new P(T)}break}}},equals(n,e,t){return e===t?!0:!e||!t?!1:n.fields.byMember().every(s=>{let r=e[s.localName],o=t[s.localName];if(s.repeated){if(r.length!==o.length)return!1;switch(s.kind){case"message":return r.every((i,l)=>s.T.equals(i,o[l]));case"scalar":return r.every((i,l)=>L(s.T,i,o[l]));case"enum":return r.every((i,l)=>L(m.INT32,i,o[l]))}throw new Error(`repeated cannot contain ${s.kind}`)}switch(s.kind){case"message":return s.T.equals(r,o);case"enum":return L(m.INT32,r,o);case"scalar":return L(s.T,r,o);case"oneof":if(r.case!==o.case)return!1;let i=s.findField(r.case);if(i===void 0)return!0;switch(i.kind){case"message":return i.T.equals(r.value,o.value);case"enum":return L(m.INT32,r.value,o.value);case"scalar":return L(i.T,r.value,o.value)}throw new Error(`oneof cannot contain ${i.kind}`);case"map":let l=Object.keys(r).concat(Object.keys(o));switch(s.V.kind){case"message":let u=s.V.T;return l.every(g=>u.equals(r[g],o[g]));case"enum":return l.every(g=>L(m.INT32,r[g],o[g]));case"scalar":let f=s.V.T;return l.every(g=>L(f,r[g],o[g]))}break}})},clone(n){let e=n.getType(),t=new e,s=t;for(let r of e.fields.byMember()){let o=n[r.localName],i;if(r.repeated)i=o.map(pt);else if(r.kind=="map"){i=s[r.localName];for(let[l,u]of Object.entries(o))i[l]=pt(u)}else r.kind=="oneof"?i=r.findField(o.case)?{case:o.case,value:pt(o.value)}:{case:void 0}:i=pt(o);s[r.localName]=i}return t}}}function pt(n){if(n===void 0)return n;if(n instanceof c)return n.clone();if(n instanceof Uint8Array){let e=new Uint8Array(n.byteLength);return e.set(n),e}return n}function Ne(n){return n instanceof Uint8Array?n:new Uint8Array(n)}var Q=class{constructor(e,t){this._fields=e,this._normalizer=t}findJsonName(e){if(!this.jsonNames){let t={};for(let s of this.list())t[s.jsonName]=t[s.name]=s;this.jsonNames=t}return this.jsonNames[e]}find(e){if(!this.numbers){let t={};for(let s of this.list())t[s.no]=s;this.numbers=t}return this.numbers[e]}list(){return this.all||(this.all=this._normalizer(this._fields)),this.all}byNumber(){return this.numbersAsc||(this.numbersAsc=this.list().concat().sort((e,t)=>e.no-t.no)),this.numbersAsc}byMember(){if(!this.members){this.members=[];let e=this.members,t;for(let s of this.list())s.oneof?s.oneof!==t&&(t=s.oneof,e.push(t)):e.push(s)}return this.members}};function Be(n,e){let t=da(n);return e?t:Js(Rs(t))}function ca(n){return Be(n,!1)}var yt=da;function da(n){let e=!1,t=[];for(let s=0;s<n.length;s++){let r=n.charAt(s);switch(r){case"_":e=!0;break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":t.push(r),e=!1;break;default:e&&(e=!1,r=r.toUpperCase()),t.push(r);break}}return t.join("")}var ws=new Set(["constructor","toString","toJSON","valueOf"]),Ps=new Set(["getType","clone","equals","fromBinary","fromJson","fromJsonString","toBinary","toJson","toJsonString","toObject"]),fa=n=>`${n}$`,Rs=n=>Ps.has(n)?fa(n):n,Js=n=>ws.has(n)?fa(n):n;var Z=class{constructor(e){this.kind="oneof",this.repeated=!1,this.packed=!1,this.opt=!1,this.default=void 0,this.fields=[],this.name=e,this.localName=ca(e)}addField(e){b(e.oneof===this,`field ${e.name} not one of ${this.name}`),this.fields.push(e)}findField(e){if(!this._lookup){this._lookup=Object.create(null);for(let t=0;t<this.fields.length;t++)this._lookup[this.fields[t].localName]=this.fields[t]}return this._lookup[e]}};var a=nt("proto3",ua(),aa(),Object.assign(Object.assign({},gt()),{newFieldList(n){return new Q(n,Ss)},initFields(n){for(let e of n.getType().fields.byMember()){if(e.opt)continue;let t=e.localName,s=n;if(e.repeated){s[t]=[];continue}switch(e.kind){case"oneof":s[t]={case:void 0};break;case"enum":s[t]=0;break;case"map":s[t]={};break;case"scalar":s[t]=Oe(e.T,e.L);break;case"message":break}}}}));function Ss(n){var e,t,s,r;let o=[],i;for(let l of typeof n=="function"?n():n){let u=l;if(u.localName=Be(l.name,l.oneof!==void 0),u.jsonName=(e=l.jsonName)!==null&&e!==void 0?e:yt(l.name),u.repeated=(t=l.repeated)!==null&&t!==void 0?t:!1,l.kind=="scalar"&&(u.L=(s=l.L)!==null&&s!==void 0?s:v.BIGINT),l.oneof!==void 0){let f=typeof l.oneof=="string"?l.oneof:l.oneof.name;(!i||i.name!=f)&&(i=new Z(f)),u.oneof=i,i.addField(u)}l.kind=="message"&&(u.delimited=!1),u.packed=(r=l.packed)!==null&&r!==void 0?r:l.kind=="enum"||l.kind=="scalar"&&l.T!=m.BYTES&&l.T!=m.STRING,o.push(u)}return o}function ma(){return Object.assign(Object.assign({},ut()),{writeMessage(n,e,t){let s=n.getType(),r;try{for(r of s.fields.byNumber()){let o,i=r.repeated,l=r.localName;if(r.oneof){let u=n[r.oneof.localName];if(u.case!==l)continue;o=u.value}else if(o=n[l],o===void 0&&!r.oneof&&!r.opt)throw new Error(`cannot encode field ${s.typeName}.${r.name} to binary: required field not set`);switch(r.kind){case"scalar":case"enum":let u=r.kind=="enum"?m.INT32:r.T;if(i)if(r.packed)dt(e,u,r.no,o);else for(let f of o)U(e,u,r.no,f,!0);else o!==void 0&&U(e,u,r.no,o,!0);break;case"message":if(i)for(let f of o)X(e,t,r,f);else X(e,t,r,o);break;case"map":for(let[f,g]of Object.entries(o))ct(e,t,r,f,g);break}}}catch(o){let i=r?`cannot encode field ${s.typeName}.${r?.name} to binary`:`cannot encode message ${s.typeName} to binary`,l=o instanceof Error?o.message:String(o);throw new Error(i+(l.length>0?`: ${l}`:""))}return t.writeUnknownFields&&this.writeUnknownFields(n,e),e}})}function pa(){return mt((n,e)=>function(s,r,o){if(s.kind=="map"){let i={};switch(s.V.kind){case"scalar":for(let[u,f]of Object.entries(r)){let g=e(s.V.T,f,!0);b(g!==void 0),i[u.toString()]=g}break;case"message":for(let[u,f]of Object.entries(r))i[u.toString()]=f.toJson(o);break;case"enum":let l=s.V.T;for(let[u,f]of Object.entries(r)){b(f===void 0||typeof f=="number");let g=n(l,f,!0,o.enumAsInteger);b(g!==void 0),i[u.toString()]=g}break}return o.emitDefaultValues||Object.keys(i).length>0?i:void 0}else if(s.repeated){let i=[];switch(s.kind){case"scalar":for(let l=0;l<r.length;l++)i.push(e(s.T,r[l],!0));break;case"enum":for(let l=0;l<r.length;l++)i.push(n(s.T,r[l],!0,o.enumAsInteger));break;case"message":for(let l=0;l<r.length;l++)i.push(r[l].toJson(o));break}return o.emitDefaultValues||i.length>0?i:void 0}else{if(r===void 0){if(!s.oneof&&!s.opt)throw"required field not set";return}switch(s.kind){case"scalar":return e(s.T,r,!0);case"enum":return n(s.T,r,!0,o.enumAsInteger);case"message":return z(s.T,r).toJson(o)}}})}var d=nt("proto2",pa(),ma(),Object.assign(Object.assign({},gt()),{newFieldList(n){return new Q(n,ks)},initFields(n){for(let e of n.getType().fields.byMember()){let t=e.localName,s=n;if(e.repeated){s[t]=[];continue}switch(e.kind){case"oneof":s[t]={case:void 0};break;case"map":s[t]={};break;case"scalar":case"enum":case"message":break}}}}));function ks(n){var e,t,s,r,o;let i=[],l;for(let u of typeof n=="function"?n():n){let f=u;if(f.localName=Be(u.name,u.oneof!==void 0),f.jsonName=(e=u.jsonName)!==null&&e!==void 0?e:yt(u.name),f.repeated=(t=u.repeated)!==null&&t!==void 0?t:!1,u.kind=="scalar"&&(f.L=(s=u.L)!==null&&s!==void 0?s:v.BIGINT),u.oneof!==void 0){let g=typeof u.oneof=="string"?u.oneof:u.oneof.name;(!l||l.name!=g)&&(l=new Z(g)),f.oneof=l,l.addField(f)}u.kind=="message"&&(f.delimited=(r=u.delimited)!==null&&r!==void 0?r:!1),f.packed=(o=u.packed)!==null&&o!==void 0?o:!1,i.push(f)}return i}var h;(function(n){n[n.Unary=0]="Unary",n[n.ServerStreaming=1]="ServerStreaming",n[n.ClientStreaming=2]="ClientStreaming",n[n.BiDiStreaming=3]="BiDiStreaming"})(h||(h={}));var Me;(function(n){n[n.NoSideEffects=1]="NoSideEffects",n[n.Idempotent=2]="Idempotent"})(Me||(Me={}));var Y;(function(n){n[n.EDITION_UNKNOWN=0]="EDITION_UNKNOWN",n[n.EDITION_PROTO2=998]="EDITION_PROTO2",n[n.EDITION_PROTO3=999]="EDITION_PROTO3",n[n.EDITION_2023=1e3]="EDITION_2023",n[n.EDITION_1_TEST_ONLY=1]="EDITION_1_TEST_ONLY",n[n.EDITION_2_TEST_ONLY=2]="EDITION_2_TEST_ONLY",n[n.EDITION_99997_TEST_ONLY=99997]="EDITION_99997_TEST_ONLY",n[n.EDITION_99998_TEST_ONLY=99998]="EDITION_99998_TEST_ONLY",n[n.EDITION_99999_TEST_ONLY=99999]="EDITION_99999_TEST_ONLY"})(Y||(Y={}));d.util.setEnumType(Y,"google.protobuf.Edition",[{no:0,name:"EDITION_UNKNOWN"},{no:998,name:"EDITION_PROTO2"},{no:999,name:"EDITION_PROTO3"},{no:1e3,name:"EDITION_2023"},{no:1,name:"EDITION_1_TEST_ONLY"},{no:2,name:"EDITION_2_TEST_ONLY"},{no:99997,name:"EDITION_99997_TEST_ONLY"},{no:99998,name:"EDITION_99998_TEST_ONLY"},{no:99999,name:"EDITION_99999_TEST_ONLY"}]);var ve=class n extends c{constructor(e){super(),this.file=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};ve.runtime=d;ve.typeName="google.protobuf.FileDescriptorSet";ve.fields=d.util.newFieldList(()=>[{no:1,name:"file",kind:"message",T:_,repeated:!0}]);var _=class n extends c{constructor(e){super(),this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};_.runtime=d;_.typeName="google.protobuf.FileDescriptorProto";_.fields=d.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"package",kind:"scalar",T:9,opt:!0},{no:3,name:"dependency",kind:"scalar",T:9,repeated:!0},{no:10,name:"public_dependency",kind:"scalar",T:5,repeated:!0},{no:11,name:"weak_dependency",kind:"scalar",T:5,repeated:!0},{no:4,name:"message_type",kind:"message",T:q,repeated:!0},{no:5,name:"enum_type",kind:"message",T:A,repeated:!0},{no:6,name:"service",kind:"message",T:ie,repeated:!0},{no:7,name:"extension",kind:"message",T:j,repeated:!0},{no:8,name:"options",kind:"message",T:ue,opt:!0},{no:9,name:"source_code_info",kind:"message",T:Pe,opt:!0},{no:12,name:"syntax",kind:"scalar",T:9,opt:!0},{no:14,name:"edition",kind:"enum",T:d.getEnumType(Y),opt:!0}]);var q=class n extends c{constructor(e){super(),this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};q.runtime=d;q.typeName="google.protobuf.DescriptorProto";q.fields=d.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"field",kind:"message",T:j,repeated:!0},{no:6,name:"extension",kind:"message",T:j,repeated:!0},{no:3,name:"nested_type",kind:"message",T:q,repeated:!0},{no:4,name:"enum_type",kind:"message",T:A,repeated:!0},{no:5,name:"extension_range",kind:"message",T:ee,repeated:!0},{no:8,name:"oneof_decl",kind:"message",T:ae,repeated:!0},{no:7,name:"options",kind:"message",T:ce,opt:!0},{no:9,name:"reserved_range",kind:"message",T:te,repeated:!0},{no:10,name:"reserved_name",kind:"scalar",T:9,repeated:!0}]);var ee=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};ee.runtime=d;ee.typeName="google.protobuf.DescriptorProto.ExtensionRange";ee.fields=d.util.newFieldList(()=>[{no:1,name:"start",kind:"scalar",T:5,opt:!0},{no:2,name:"end",kind:"scalar",T:5,opt:!0},{no:3,name:"options",kind:"message",T:ne,opt:!0}]);var te=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};te.runtime=d;te.typeName="google.protobuf.DescriptorProto.ReservedRange";te.fields=d.util.newFieldList(()=>[{no:1,name:"start",kind:"scalar",T:5,opt:!0},{no:2,name:"end",kind:"scalar",T:5,opt:!0}]);var ne=class n extends c{constructor(e){super(),this.uninterpretedOption=[],this.declaration=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};ne.runtime=d;ne.typeName="google.protobuf.ExtensionRangeOptions";ne.fields=d.util.newFieldList(()=>[{no:999,name:"uninterpreted_option",kind:"message",T:B,repeated:!0},{no:2,name:"declaration",kind:"message",T:re,repeated:!0},{no:50,name:"features",kind:"message",T:N,opt:!0},{no:3,name:"verification",kind:"enum",T:d.getEnumType(qe),opt:!0,default:qe.UNVERIFIED}]);var qe;(function(n){n[n.DECLARATION=0]="DECLARATION",n[n.UNVERIFIED=1]="UNVERIFIED"})(qe||(qe={}));d.util.setEnumType(qe,"google.protobuf.ExtensionRangeOptions.VerificationState",[{no:0,name:"DECLARATION"},{no:1,name:"UNVERIFIED"}]);var re=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};re.runtime=d;re.typeName="google.protobuf.ExtensionRangeOptions.Declaration";re.fields=d.util.newFieldList(()=>[{no:1,name:"number",kind:"scalar",T:5,opt:!0},{no:2,name:"full_name",kind:"scalar",T:9,opt:!0},{no:3,name:"type",kind:"scalar",T:9,opt:!0},{no:5,name:"reserved",kind:"scalar",T:8,opt:!0},{no:6,name:"repeated",kind:"scalar",T:8,opt:!0}]);var j=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};j.runtime=d;j.typeName="google.protobuf.FieldDescriptorProto";j.fields=d.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:3,name:"number",kind:"scalar",T:5,opt:!0},{no:4,name:"label",kind:"enum",T:d.getEnumType(Tt),opt:!0},{no:5,name:"type",kind:"enum",T:d.getEnumType(ht),opt:!0},{no:6,name:"type_name",kind:"scalar",T:9,opt:!0},{no:2,name:"extendee",kind:"scalar",T:9,opt:!0},{no:7,name:"default_value",kind:"scalar",T:9,opt:!0},{no:9,name:"oneof_index",kind:"scalar",T:5,opt:!0},{no:10,name:"json_name",kind:"scalar",T:9,opt:!0},{no:8,name:"options",kind:"message",T:de,opt:!0},{no:17,name:"proto3_optional",kind:"scalar",T:8,opt:!0}]);var ht;(function(n){n[n.DOUBLE=1]="DOUBLE",n[n.FLOAT=2]="FLOAT",n[n.INT64=3]="INT64",n[n.UINT64=4]="UINT64",n[n.INT32=5]="INT32",n[n.FIXED64=6]="FIXED64",n[n.FIXED32=7]="FIXED32",n[n.BOOL=8]="BOOL",n[n.STRING=9]="STRING",n[n.GROUP=10]="GROUP",n[n.MESSAGE=11]="MESSAGE",n[n.BYTES=12]="BYTES",n[n.UINT32=13]="UINT32",n[n.ENUM=14]="ENUM",n[n.SFIXED32=15]="SFIXED32",n[n.SFIXED64=16]="SFIXED64",n[n.SINT32=17]="SINT32",n[n.SINT64=18]="SINT64"})(ht||(ht={}));d.util.setEnumType(ht,"google.protobuf.FieldDescriptorProto.Type",[{no:1,name:"TYPE_DOUBLE"},{no:2,name:"TYPE_FLOAT"},{no:3,name:"TYPE_INT64"},{no:4,name:"TYPE_UINT64"},{no:5,name:"TYPE_INT32"},{no:6,name:"TYPE_FIXED64"},{no:7,name:"TYPE_FIXED32"},{no:8,name:"TYPE_BOOL"},{no:9,name:"TYPE_STRING"},{no:10,name:"TYPE_GROUP"},{no:11,name:"TYPE_MESSAGE"},{no:12,name:"TYPE_BYTES"},{no:13,name:"TYPE_UINT32"},{no:14,name:"TYPE_ENUM"},{no:15,name:"TYPE_SFIXED32"},{no:16,name:"TYPE_SFIXED64"},{no:17,name:"TYPE_SINT32"},{no:18,name:"TYPE_SINT64"}]);var Tt;(function(n){n[n.OPTIONAL=1]="OPTIONAL",n[n.REPEATED=3]="REPEATED",n[n.REQUIRED=2]="REQUIRED"})(Tt||(Tt={}));d.util.setEnumType(Tt,"google.protobuf.FieldDescriptorProto.Label",[{no:1,name:"LABEL_OPTIONAL"},{no:3,name:"LABEL_REPEATED"},{no:2,name:"LABEL_REQUIRED"}]);var ae=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};ae.runtime=d;ae.typeName="google.protobuf.OneofDescriptorProto";ae.fields=d.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"options",kind:"message",T:me,opt:!0}]);var A=class n extends c{constructor(e){super(),this.value=[],this.reservedRange=[],this.reservedName=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};A.runtime=d;A.typeName="google.protobuf.EnumDescriptorProto";A.fields=d.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"value",kind:"message",T:oe,repeated:!0},{no:3,name:"options",kind:"message",T:pe,opt:!0},{no:4,name:"reserved_range",kind:"message",T:se,repeated:!0},{no:5,name:"reserved_name",kind:"scalar",T:9,repeated:!0}]);var se=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};se.runtime=d;se.typeName="google.protobuf.EnumDescriptorProto.EnumReservedRange";se.fields=d.util.newFieldList(()=>[{no:1,name:"start",kind:"scalar",T:5,opt:!0},{no:2,name:"end",kind:"scalar",T:5,opt:!0}]);var oe=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};oe.runtime=d;oe.typeName="google.protobuf.EnumValueDescriptorProto";oe.fields=d.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"number",kind:"scalar",T:5,opt:!0},{no:3,name:"options",kind:"message",T:ge,opt:!0}]);var ie=class n extends c{constructor(e){super(),this.method=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};ie.runtime=d;ie.typeName="google.protobuf.ServiceDescriptorProto";ie.fields=d.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"method",kind:"message",T:le,repeated:!0},{no:3,name:"options",kind:"message",T:ye,opt:!0}]);var le=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};le.runtime=d;le.typeName="google.protobuf.MethodDescriptorProto";le.fields=d.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"input_type",kind:"scalar",T:9,opt:!0},{no:3,name:"output_type",kind:"scalar",T:9,opt:!0},{no:4,name:"options",kind:"message",T:he,opt:!0},{no:5,name:"client_streaming",kind:"scalar",T:8,opt:!0,default:!1},{no:6,name:"server_streaming",kind:"scalar",T:8,opt:!0,default:!1}]);var ue=class n extends c{constructor(e){super(),this.uninterpretedOption=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};ue.runtime=d;ue.typeName="google.protobuf.FileOptions";ue.fields=d.util.newFieldList(()=>[{no:1,name:"java_package",kind:"scalar",T:9,opt:!0},{no:8,name:"java_outer_classname",kind:"scalar",T:9,opt:!0},{no:10,name:"java_multiple_files",kind:"scalar",T:8,opt:!0,default:!1},{no:20,name:"java_generate_equals_and_hash",kind:"scalar",T:8,opt:!0},{no:27,name:"java_string_check_utf8",kind:"scalar",T:8,opt:!0,default:!1},{no:9,name:"optimize_for",kind:"enum",T:d.getEnumType(Ce),opt:!0,default:Ce.SPEED},{no:11,name:"go_package",kind:"scalar",T:9,opt:!0},{no:16,name:"cc_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:17,name:"java_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:18,name:"py_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:42,name:"php_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:23,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:31,name:"cc_enable_arenas",kind:"scalar",T:8,opt:!0,default:!0},{no:36,name:"objc_class_prefix",kind:"scalar",T:9,opt:!0},{no:37,name:"csharp_namespace",kind:"scalar",T:9,opt:!0},{no:39,name:"swift_prefix",kind:"scalar",T:9,opt:!0},{no:40,name:"php_class_prefix",kind:"scalar",T:9,opt:!0},{no:41,name:"php_namespace",kind:"scalar",T:9,opt:!0},{no:44,name:"php_metadata_namespace",kind:"scalar",T:9,opt:!0},{no:45,name:"ruby_package",kind:"scalar",T:9,opt:!0},{no:50,name:"features",kind:"message",T:N,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:B,repeated:!0}]);var Ce;(function(n){n[n.SPEED=1]="SPEED",n[n.CODE_SIZE=2]="CODE_SIZE",n[n.LITE_RUNTIME=3]="LITE_RUNTIME"})(Ce||(Ce={}));d.util.setEnumType(Ce,"google.protobuf.FileOptions.OptimizeMode",[{no:1,name:"SPEED"},{no:2,name:"CODE_SIZE"},{no:3,name:"LITE_RUNTIME"}]);var ce=class n extends c{constructor(e){super(),this.uninterpretedOption=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};ce.runtime=d;ce.typeName="google.protobuf.MessageOptions";ce.fields=d.util.newFieldList(()=>[{no:1,name:"message_set_wire_format",kind:"scalar",T:8,opt:!0,default:!1},{no:2,name:"no_standard_descriptor_accessor",kind:"scalar",T:8,opt:!0,default:!1},{no:3,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:7,name:"map_entry",kind:"scalar",T:8,opt:!0},{no:11,name:"deprecated_legacy_json_field_conflicts",kind:"scalar",T:8,opt:!0},{no:12,name:"features",kind:"message",T:N,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:B,repeated:!0}]);var de=class n extends c{constructor(e){super(),this.targets=[],this.editionDefaults=[],this.uninterpretedOption=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};de.runtime=d;de.typeName="google.protobuf.FieldOptions";de.fields=d.util.newFieldList(()=>[{no:1,name:"ctype",kind:"enum",T:d.getEnumType(Le),opt:!0,default:Le.STRING},{no:2,name:"packed",kind:"scalar",T:8,opt:!0},{no:6,name:"jstype",kind:"enum",T:d.getEnumType(Ue),opt:!0,default:Ue.JS_NORMAL},{no:5,name:"lazy",kind:"scalar",T:8,opt:!0,default:!1},{no:15,name:"unverified_lazy",kind:"scalar",T:8,opt:!0,default:!1},{no:3,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:10,name:"weak",kind:"scalar",T:8,opt:!0,default:!1},{no:16,name:"debug_redact",kind:"scalar",T:8,opt:!0,default:!1},{no:17,name:"retention",kind:"enum",T:d.getEnumType(wt),opt:!0},{no:19,name:"targets",kind:"enum",T:d.getEnumType(Pt),repeated:!0},{no:20,name:"edition_defaults",kind:"message",T:fe,repeated:!0},{no:21,name:"features",kind:"message",T:N,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:B,repeated:!0}]);var Le;(function(n){n[n.STRING=0]="STRING",n[n.CORD=1]="CORD",n[n.STRING_PIECE=2]="STRING_PIECE"})(Le||(Le={}));d.util.setEnumType(Le,"google.protobuf.FieldOptions.CType",[{no:0,name:"STRING"},{no:1,name:"CORD"},{no:2,name:"STRING_PIECE"}]);var Ue;(function(n){n[n.JS_NORMAL=0]="JS_NORMAL",n[n.JS_STRING=1]="JS_STRING",n[n.JS_NUMBER=2]="JS_NUMBER"})(Ue||(Ue={}));d.util.setEnumType(Ue,"google.protobuf.FieldOptions.JSType",[{no:0,name:"JS_NORMAL"},{no:1,name:"JS_STRING"},{no:2,name:"JS_NUMBER"}]);var wt;(function(n){n[n.RETENTION_UNKNOWN=0]="RETENTION_UNKNOWN",n[n.RETENTION_RUNTIME=1]="RETENTION_RUNTIME",n[n.RETENTION_SOURCE=2]="RETENTION_SOURCE"})(wt||(wt={}));d.util.setEnumType(wt,"google.protobuf.FieldOptions.OptionRetention",[{no:0,name:"RETENTION_UNKNOWN"},{no:1,name:"RETENTION_RUNTIME"},{no:2,name:"RETENTION_SOURCE"}]);var Pt;(function(n){n[n.TARGET_TYPE_UNKNOWN=0]="TARGET_TYPE_UNKNOWN",n[n.TARGET_TYPE_FILE=1]="TARGET_TYPE_FILE",n[n.TARGET_TYPE_EXTENSION_RANGE=2]="TARGET_TYPE_EXTENSION_RANGE",n[n.TARGET_TYPE_MESSAGE=3]="TARGET_TYPE_MESSAGE",n[n.TARGET_TYPE_FIELD=4]="TARGET_TYPE_FIELD",n[n.TARGET_TYPE_ONEOF=5]="TARGET_TYPE_ONEOF",n[n.TARGET_TYPE_ENUM=6]="TARGET_TYPE_ENUM",n[n.TARGET_TYPE_ENUM_ENTRY=7]="TARGET_TYPE_ENUM_ENTRY",n[n.TARGET_TYPE_SERVICE=8]="TARGET_TYPE_SERVICE",n[n.TARGET_TYPE_METHOD=9]="TARGET_TYPE_METHOD"})(Pt||(Pt={}));d.util.setEnumType(Pt,"google.protobuf.FieldOptions.OptionTargetType",[{no:0,name:"TARGET_TYPE_UNKNOWN"},{no:1,name:"TARGET_TYPE_FILE"},{no:2,name:"TARGET_TYPE_EXTENSION_RANGE"},{no:3,name:"TARGET_TYPE_MESSAGE"},{no:4,name:"TARGET_TYPE_FIELD"},{no:5,name:"TARGET_TYPE_ONEOF"},{no:6,name:"TARGET_TYPE_ENUM"},{no:7,name:"TARGET_TYPE_ENUM_ENTRY"},{no:8,name:"TARGET_TYPE_SERVICE"},{no:9,name:"TARGET_TYPE_METHOD"}]);var fe=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};fe.runtime=d;fe.typeName="google.protobuf.FieldOptions.EditionDefault";fe.fields=d.util.newFieldList(()=>[{no:3,name:"edition",kind:"enum",T:d.getEnumType(Y),opt:!0},{no:2,name:"value",kind:"scalar",T:9,opt:!0}]);var me=class n extends c{constructor(e){super(),this.uninterpretedOption=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};me.runtime=d;me.typeName="google.protobuf.OneofOptions";me.fields=d.util.newFieldList(()=>[{no:1,name:"features",kind:"message",T:N,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:B,repeated:!0}]);var pe=class n extends c{constructor(e){super(),this.uninterpretedOption=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};pe.runtime=d;pe.typeName="google.protobuf.EnumOptions";pe.fields=d.util.newFieldList(()=>[{no:2,name:"allow_alias",kind:"scalar",T:8,opt:!0},{no:3,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:6,name:"deprecated_legacy_json_field_conflicts",kind:"scalar",T:8,opt:!0},{no:7,name:"features",kind:"message",T:N,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:B,repeated:!0}]);var ge=class n extends c{constructor(e){super(),this.uninterpretedOption=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};ge.runtime=d;ge.typeName="google.protobuf.EnumValueOptions";ge.fields=d.util.newFieldList(()=>[{no:1,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:2,name:"features",kind:"message",T:N,opt:!0},{no:3,name:"debug_redact",kind:"scalar",T:8,opt:!0,default:!1},{no:999,name:"uninterpreted_option",kind:"message",T:B,repeated:!0}]);var ye=class n extends c{constructor(e){super(),this.uninterpretedOption=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};ye.runtime=d;ye.typeName="google.protobuf.ServiceOptions";ye.fields=d.util.newFieldList(()=>[{no:34,name:"features",kind:"message",T:N,opt:!0},{no:33,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:999,name:"uninterpreted_option",kind:"message",T:B,repeated:!0}]);var he=class n extends c{constructor(e){super(),this.uninterpretedOption=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};he.runtime=d;he.typeName="google.protobuf.MethodOptions";he.fields=d.util.newFieldList(()=>[{no:33,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:34,name:"idempotency_level",kind:"enum",T:d.getEnumType(Fe),opt:!0,default:Fe.IDEMPOTENCY_UNKNOWN},{no:35,name:"features",kind:"message",T:N,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:B,repeated:!0}]);var Fe;(function(n){n[n.IDEMPOTENCY_UNKNOWN=0]="IDEMPOTENCY_UNKNOWN",n[n.NO_SIDE_EFFECTS=1]="NO_SIDE_EFFECTS",n[n.IDEMPOTENT=2]="IDEMPOTENT"})(Fe||(Fe={}));d.util.setEnumType(Fe,"google.protobuf.MethodOptions.IdempotencyLevel",[{no:0,name:"IDEMPOTENCY_UNKNOWN"},{no:1,name:"NO_SIDE_EFFECTS"},{no:2,name:"IDEMPOTENT"}]);var B=class n extends c{constructor(e){super(),this.name=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};B.runtime=d;B.typeName="google.protobuf.UninterpretedOption";B.fields=d.util.newFieldList(()=>[{no:2,name:"name",kind:"message",T:Te,repeated:!0},{no:3,name:"identifier_value",kind:"scalar",T:9,opt:!0},{no:4,name:"positive_int_value",kind:"scalar",T:4,opt:!0},{no:5,name:"negative_int_value",kind:"scalar",T:3,opt:!0},{no:6,name:"double_value",kind:"scalar",T:1,opt:!0},{no:7,name:"string_value",kind:"scalar",T:12,opt:!0},{no:8,name:"aggregate_value",kind:"scalar",T:9,opt:!0}]);var Te=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};Te.runtime=d;Te.typeName="google.protobuf.UninterpretedOption.NamePart";Te.fields=d.util.newFieldList(()=>[{no:1,name:"name_part",kind:"scalar",T:9},{no:2,name:"is_extension",kind:"scalar",T:8}]);var N=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};N.runtime=d;N.typeName="google.protobuf.FeatureSet";N.fields=d.util.newFieldList(()=>[{no:1,name:"field_presence",kind:"enum",T:d.getEnumType(Rt),opt:!0},{no:2,name:"enum_type",kind:"enum",T:d.getEnumType(Jt),opt:!0},{no:3,name:"repeated_field_encoding",kind:"enum",T:d.getEnumType(St),opt:!0},{no:4,name:"utf8_validation",kind:"enum",T:d.getEnumType(kt),opt:!0},{no:5,name:"message_encoding",kind:"enum",T:d.getEnumType(bt),opt:!0},{no:6,name:"json_format",kind:"enum",T:d.getEnumType(xt),opt:!0}]);var Rt;(function(n){n[n.FIELD_PRESENCE_UNKNOWN=0]="FIELD_PRESENCE_UNKNOWN",n[n.EXPLICIT=1]="EXPLICIT",n[n.IMPLICIT=2]="IMPLICIT",n[n.LEGACY_REQUIRED=3]="LEGACY_REQUIRED"})(Rt||(Rt={}));d.util.setEnumType(Rt,"google.protobuf.FeatureSet.FieldPresence",[{no:0,name:"FIELD_PRESENCE_UNKNOWN"},{no:1,name:"EXPLICIT"},{no:2,name:"IMPLICIT"},{no:3,name:"LEGACY_REQUIRED"}]);var Jt;(function(n){n[n.ENUM_TYPE_UNKNOWN=0]="ENUM_TYPE_UNKNOWN",n[n.OPEN=1]="OPEN",n[n.CLOSED=2]="CLOSED"})(Jt||(Jt={}));d.util.setEnumType(Jt,"google.protobuf.FeatureSet.EnumType",[{no:0,name:"ENUM_TYPE_UNKNOWN"},{no:1,name:"OPEN"},{no:2,name:"CLOSED"}]);var St;(function(n){n[n.REPEATED_FIELD_ENCODING_UNKNOWN=0]="REPEATED_FIELD_ENCODING_UNKNOWN",n[n.PACKED=1]="PACKED",n[n.EXPANDED=2]="EXPANDED"})(St||(St={}));d.util.setEnumType(St,"google.protobuf.FeatureSet.RepeatedFieldEncoding",[{no:0,name:"REPEATED_FIELD_ENCODING_UNKNOWN"},{no:1,name:"PACKED"},{no:2,name:"EXPANDED"}]);var kt;(function(n){n[n.UTF8_VALIDATION_UNKNOWN=0]="UTF8_VALIDATION_UNKNOWN",n[n.NONE=1]="NONE",n[n.VERIFY=2]="VERIFY"})(kt||(kt={}));d.util.setEnumType(kt,"google.protobuf.FeatureSet.Utf8Validation",[{no:0,name:"UTF8_VALIDATION_UNKNOWN"},{no:1,name:"NONE"},{no:2,name:"VERIFY"}]);var bt;(function(n){n[n.MESSAGE_ENCODING_UNKNOWN=0]="MESSAGE_ENCODING_UNKNOWN",n[n.LENGTH_PREFIXED=1]="LENGTH_PREFIXED",n[n.DELIMITED=2]="DELIMITED"})(bt||(bt={}));d.util.setEnumType(bt,"google.protobuf.FeatureSet.MessageEncoding",[{no:0,name:"MESSAGE_ENCODING_UNKNOWN"},{no:1,name:"LENGTH_PREFIXED"},{no:2,name:"DELIMITED"}]);var xt;(function(n){n[n.JSON_FORMAT_UNKNOWN=0]="JSON_FORMAT_UNKNOWN",n[n.ALLOW=1]="ALLOW",n[n.LEGACY_BEST_EFFORT=2]="LEGACY_BEST_EFFORT"})(xt||(xt={}));d.util.setEnumType(xt,"google.protobuf.FeatureSet.JsonFormat",[{no:0,name:"JSON_FORMAT_UNKNOWN"},{no:1,name:"ALLOW"},{no:2,name:"LEGACY_BEST_EFFORT"}]);var Ae=class n extends c{constructor(e){super(),this.defaults=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};Ae.runtime=d;Ae.typeName="google.protobuf.FeatureSetDefaults";Ae.fields=d.util.newFieldList(()=>[{no:1,name:"defaults",kind:"message",T:we,repeated:!0},{no:4,name:"minimum_edition",kind:"enum",T:d.getEnumType(Y),opt:!0},{no:5,name:"maximum_edition",kind:"enum",T:d.getEnumType(Y),opt:!0}]);var we=class n extends c{constructor(e){super(),d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};we.runtime=d;we.typeName="google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault";we.fields=d.util.newFieldList(()=>[{no:3,name:"edition",kind:"enum",T:d.getEnumType(Y),opt:!0},{no:2,name:"features",kind:"message",T:N,opt:!0}]);var Pe=class n extends c{constructor(e){super(),this.location=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};Pe.runtime=d;Pe.typeName="google.protobuf.SourceCodeInfo";Pe.fields=d.util.newFieldList(()=>[{no:1,name:"location",kind:"message",T:Re,repeated:!0}]);var Re=class n extends c{constructor(e){super(),this.path=[],this.span=[],this.leadingDetachedComments=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};Re.runtime=d;Re.typeName="google.protobuf.SourceCodeInfo.Location";Re.fields=d.util.newFieldList(()=>[{no:1,name:"path",kind:"scalar",T:5,repeated:!0,packed:!0},{no:2,name:"span",kind:"scalar",T:5,repeated:!0,packed:!0},{no:3,name:"leading_comments",kind:"scalar",T:9,opt:!0},{no:4,name:"trailing_comments",kind:"scalar",T:9,opt:!0},{no:6,name:"leading_detached_comments",kind:"scalar",T:9,repeated:!0}]);var Ge=class n extends c{constructor(e){super(),this.annotation=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};Ge.runtime=d;Ge.typeName="google.protobuf.GeneratedCodeInfo";Ge.fields=d.util.newFieldList(()=>[{no:1,name:"annotation",kind:"message",T:Je,repeated:!0}]);var Je=class n extends c{constructor(e){super(),this.path=[],d.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return d.util.equals(n,e,t)}};Je.runtime=d;Je.typeName="google.protobuf.GeneratedCodeInfo.Annotation";Je.fields=d.util.newFieldList(()=>[{no:1,name:"path",kind:"scalar",T:5,repeated:!0,packed:!0},{no:2,name:"source_file",kind:"scalar",T:9,opt:!0},{no:3,name:"begin",kind:"scalar",T:5,opt:!0},{no:4,name:"end",kind:"scalar",T:5,opt:!0},{no:5,name:"semantic",kind:"enum",T:d.getEnumType(It),opt:!0}]);var It;(function(n){n[n.NONE=0]="NONE",n[n.SET=1]="SET",n[n.ALIAS=2]="ALIAS"})(It||(It={}));d.util.setEnumType(It,"google.protobuf.GeneratedCodeInfo.Annotation.Semantic",[{no:0,name:"NONE"},{no:1,name:"SET"},{no:2,name:"ALIAS"}]);var I=class n extends c{constructor(e){super(),a.util.initPartial(e,this)}static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}};I.runtime=a;I.typeName="google.protobuf.Empty";I.fields=a.util.newFieldList(()=>[]);var Ot=class n extends c{secret="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.VerifyUserRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"secret",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Et=class n extends c{secret="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.GroupInfoRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"secret",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Nt=class n extends c{groupId="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.GroupID";static fields=a.util.newFieldList(()=>[{no:1,name:"group_id",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Bt=class n extends c{contentId="";groupId="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.ShareRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"content_id",kind:"scalar",T:9},{no:2,name:"group_id",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},De=class n extends c{secret="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.GroupInvite";static fields=a.util.newFieldList(()=>[{no:1,name:"secret",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Mt=class n extends c{groups=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.Groups";static fields=a.util.newFieldList(()=>[{no:1,name:"groups",kind:"message",T:G,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},ga=class n extends c{text="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.AnalyzeConversationRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},C=class n extends c{email="";password="";username="";config;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.User";static fields=a.util.newFieldList(()=>[{no:1,name:"email",kind:"scalar",T:9},{no:2,name:"password",kind:"scalar",T:9},{no:3,name:"username",kind:"scalar",T:9},{no:4,name:"config",kind:"message",T:Ve}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},G=class n extends c{id="";name="";users=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.Group";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"users",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Ve=class n extends c{domainWhitelist=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.Config";static fields=a.util.newFieldList(()=>[{no:1,name:"domain_whitelist",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},ya=class n extends c{constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="user.LoginResponse";static fields=a.util.newFieldList(()=>[]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}};var vt=class n extends c{content;site;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.TypesResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:$t},{no:2,name:"site",kind:"message",T:$t}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},qt=class n extends c{contentTypes=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.GetSourcesRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"content_types",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Ct=class n extends c{captureDevice=0;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.VoiceInputRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"capture_device",kind:"scalar",T:5}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Lt=class n extends c{segment;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.VoiceInputResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"segment",kind:"message",T:Se}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Ut=class n extends c{parent="";children=[];connect=!1;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.RelateRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"parent",kind:"scalar",T:9},{no:2,name:"children",kind:"scalar",T:9,repeated:!0},{no:3,name:"connect",kind:"scalar",T:8}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Ft=class n extends c{sources=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Sources";static fields=a.util.newFieldList(()=>[{no:1,name:"sources",kind:"message",T:$n,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},$n=class n extends c{source;displayContent=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.EnumeratedSource";static fields=a.util.newFieldList(()=>[{no:1,name:"source",kind:"message",T:Hn},{no:2,name:"display_content",kind:"message",T:zn,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},zn=class n extends c{title="";description="";type="";content;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.DisplayContent";static fields=a.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"description",kind:"scalar",T:9},{no:3,name:"type",kind:"scalar",T:9},{no:4,name:"content",kind:"message",T:M}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Hn=class n extends c{name="";type={case:void 0};constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Source";static fields=a.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"server",kind:"message",T:Wn,oneof:"type"},{no:3,name:"folder",kind:"message",T:Kn,oneof:"type"}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Wn=class n extends c{constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Server";static fields=a.util.newFieldList(()=>[]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Kn=class n extends c{path="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Folder";static fields=a.util.newFieldList(()=>[{no:2,name:"path",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},At=class n extends c{contentId="";tags=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.SetTagsRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"content_id",kind:"scalar",T:9},{no:2,name:"tags",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Gt=class n extends c{groupId="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.TagRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"group_id",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Dt=class n extends c{tags=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Tags";static fields=a.util.newFieldList(()=>[{no:1,name:"tags",kind:"message",T:Vt,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Vt=class n extends c{name="";subTags=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Tag";static fields=a.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"sub_tags",kind:"message",T:n,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},$=class n extends c{contentIds=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.ContentIDs";static fields=a.util.newFieldList(()=>[{no:1,name:"content_ids",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Ye=class n extends c{content;tags=[];related=[];parents=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Contents";static fields=a.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:M},{no:2,name:"tags",kind:"scalar",T:9,repeated:!0},{no:3,name:"related",kind:"message",T:M,repeated:!0},{no:4,name:"parents",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Yt=class n extends c{query="";page=0;contentID="";groupID="";tags=[];contentTypes=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Query";static fields=a.util.newFieldList(()=>[{no:1,name:"query",kind:"scalar",T:9},{no:2,name:"page",kind:"scalar",T:13},{no:3,name:"contentID",kind:"scalar",T:9},{no:4,name:"groupID",kind:"scalar",T:9},{no:5,name:"tags",kind:"scalar",T:9,repeated:!0},{no:6,name:"content_types",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},jt=class n extends c{storedContent=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Results";static fields=a.util.newFieldList(()=>[{no:1,name:"storedContent",kind:"message",T:Xn,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Xn=class n extends c{content;id="";related=[];title="";description="";image="";url="";user;tags=[];preview="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.StoredContent";static fields=a.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:M},{no:2,name:"id",kind:"scalar",T:9},{no:3,name:"related",kind:"message",T:M,repeated:!0},{no:4,name:"title",kind:"scalar",T:9},{no:5,name:"description",kind:"scalar",T:9},{no:6,name:"image",kind:"scalar",T:9},{no:7,name:"url",kind:"scalar",T:9},{no:9,name:"user",kind:"message",T:C},{no:10,name:"tags",kind:"message",T:Vt,repeated:!0},{no:11,name:"preview",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},ha=class n extends c{from="";to="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Edge";static fields=a.util.newFieldList(()=>[{no:1,name:"from",kind:"scalar",T:9},{no:2,name:"to",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},M=class n extends c{tags=[];createdAt="";uri="";id="";type={case:void 0};constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Content";static fields=a.util.newFieldList(()=>[{no:1,name:"tags",kind:"scalar",T:9,repeated:!0},{no:2,name:"created_at",kind:"scalar",T:9},{no:3,name:"uri",kind:"scalar",T:9},{no:4,name:"id",kind:"scalar",T:9},{no:6,name:"data",kind:"message",T:Zn,oneof:"type"},{no:7,name:"normalized",kind:"message",T:_n,oneof:"type"},{no:8,name:"transformed",kind:"message",T:er,oneof:"type"},{no:9,name:"post",kind:"message",T:Qn,oneof:"type"},{no:10,name:"site",kind:"message",T:dr,oneof:"type"}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Qn=class n extends c{title="";summary="";content="";authors=[];draft=!1;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Post";static fields=a.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"summary",kind:"scalar",T:9},{no:3,name:"content",kind:"scalar",T:9},{no:4,name:"authors",kind:"scalar",T:9,repeated:!0},{no:6,name:"draft",kind:"scalar",T:8}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Ta=class n extends c{url="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.GitRepo";static fields=a.util.newFieldList(()=>[{no:1,name:"url",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Zn=class n extends c{type={case:void 0};constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Data";static fields=a.util.newFieldList(()=>[{no:4,name:"text",kind:"message",T:ir,oneof:"type"},{no:5,name:"file",kind:"message",T:or,oneof:"type"},{no:6,name:"url",kind:"message",T:lr,oneof:"type"}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},_n=class n extends c{type={case:void 0};constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Normalized";static fields=a.util.newFieldList(()=>[{no:3,name:"article",kind:"message",T:tr,oneof:"type"},{no:4,name:"html",kind:"message",T:nr,oneof:"type"},{no:6,name:"transcript",kind:"message",T:cr,oneof:"type"},{no:7,name:"readme",kind:"message",T:rr,oneof:"type"}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},er=class n extends c{type={case:void 0};constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Transformed";static fields=a.util.newFieldList(()=>[{no:1,name:"summary",kind:"message",T:ar,oneof:"type"},{no:2,name:"categories",kind:"message",T:sr,oneof:"type"}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},tr=class n extends c{title="";author="";length=0;excerpt="";siteName="";image="";favicon="";text="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Article";static fields=a.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"author",kind:"scalar",T:9},{no:3,name:"length",kind:"scalar",T:5},{no:4,name:"excerpt",kind:"scalar",T:9},{no:5,name:"site_name",kind:"scalar",T:9},{no:6,name:"image",kind:"scalar",T:9},{no:7,name:"favicon",kind:"scalar",T:9},{no:8,name:"text",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},nr=class n extends c{html="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.HTML";static fields=a.util.newFieldList(()=>[{no:1,name:"html",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},rr=class n extends c{data="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.ReadMe";static fields=a.util.newFieldList(()=>[{no:1,name:"data",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},ar=class n extends c{summary="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Summary";static fields=a.util.newFieldList(()=>[{no:1,name:"summary",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},sr=class n extends c{categories=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Categories";static fields=a.util.newFieldList(()=>[{no:1,name:"categories",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},or=class n extends c{file="";data=new Uint8Array(0);url="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.File";static fields=a.util.newFieldList(()=>[{no:1,name:"file",kind:"scalar",T:9},{no:2,name:"data",kind:"scalar",T:12},{no:3,name:"url",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},ir=class n extends c{data="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Text";static fields=a.util.newFieldList(()=>[{no:1,name:"data",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},lr=class n extends c{url="";crawl=!1;title="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.URL";static fields=a.util.newFieldList(()=>[{no:1,name:"url",kind:"scalar",T:9},{no:2,name:"crawl",kind:"scalar",T:8},{no:3,name:"title",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},ur=class n extends c{id=0;startTime=J.zero;endTime=J.zero;text="";p="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Token";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:13},{no:2,name:"start_time",kind:"scalar",T:4},{no:3,name:"end_time",kind:"scalar",T:4},{no:4,name:"text",kind:"scalar",T:9},{no:5,name:"p",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Se=class n extends c{num=0;tokens=[];text="";startTime=J.zero;endTime=J.zero;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Segment";static fields=a.util.newFieldList(()=>[{no:1,name:"num",kind:"scalar",T:13},{no:2,name:"tokens",kind:"message",T:ur,repeated:!0},{no:3,name:"text",kind:"scalar",T:9},{no:4,name:"start_time",kind:"scalar",T:4},{no:5,name:"end_time",kind:"scalar",T:4}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},cr=class n extends c{id="";name="";segments=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Transcript";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"segments",kind:"message",T:Se,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},$t=class n extends c{msg;descLookup={};enumLookup={};packageName="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.GRPCTypeInfo";static fields=a.util.newFieldList(()=>[{no:1,name:"msg",kind:"message",T:q},{no:3,name:"desc_lookup",kind:"map",K:9,V:{kind:"message",T:q}},{no:4,name:"enum_lookup",kind:"map",K:9,V:{kind:"message",T:A}},{no:6,name:"package_name",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},dr=class n extends c{hugoConfig;postTags=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.Site";static fields=a.util.newFieldList(()=>[{no:1,name:"hugo_config",kind:"message",T:fr},{no:2,name:"post_tags",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},fr=class n extends c{publishDir="";baseUrl="";title="";paginate=0;theme=[];enableInlineShortcodes=!1;enableRobotsTxt=!1;buildDrafts=!1;buildFuture=!1;buildExpired=!1;enableEmoji=!1;pygmentsUseClasses=!1;mainSections=[];minify;languages={};outputs={};params;markup;services;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.HugoConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"publish_dir",kind:"scalar",T:9},{no:2,name:"base_url",kind:"scalar",T:9},{no:3,name:"title",kind:"scalar",T:9},{no:4,name:"paginate",kind:"scalar",T:5},{no:5,name:"theme",kind:"scalar",T:9,repeated:!0},{no:6,name:"enable_inline_shortcodes",kind:"scalar",T:8},{no:7,name:"enable_robots_txt",kind:"scalar",T:8},{no:8,name:"build_drafts",kind:"scalar",T:8},{no:9,name:"build_future",kind:"scalar",T:8},{no:10,name:"build_expired",kind:"scalar",T:8},{no:11,name:"enable_emoji",kind:"scalar",T:8},{no:12,name:"pygments_use_classes",kind:"scalar",T:8},{no:13,name:"main_sections",kind:"scalar",T:9,repeated:!0},{no:14,name:"minify",kind:"message",T:mr},{no:15,name:"languages",kind:"map",K:9,V:{kind:"message",T:pr}},{no:16,name:"outputs",kind:"map",K:9,V:{kind:"message",T:Sr}},{no:17,name:"params",kind:"message",T:br},{no:18,name:"markup",kind:"message",T:Tr},{no:19,name:"services",kind:"message",T:Jr}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},mr=class n extends c{disableXml=!1;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.MinifyConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"disable_xml",kind:"scalar",T:8}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},pr=class n extends c{languageName="";weight=0;title="";taxonomies={};menu={};params={};constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.LanguageConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"language_name",kind:"scalar",T:9},{no:2,name:"weight",kind:"scalar",T:5},{no:3,name:"title",kind:"scalar",T:9},{no:4,name:"taxonomies",kind:"map",K:9,V:{kind:"scalar",T:9}},{no:5,name:"menu",kind:"map",K:9,V:{kind:"message",T:kr}},{no:6,name:"params",kind:"map",K:9,V:{kind:"scalar",T:9}}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},gr=class n extends c{name="";url="";weight=0;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.MenuItem";static fields=a.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"url",kind:"scalar",T:9},{no:3,name:"weight",kind:"scalar",T:5}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},yr=class n extends c{url="";text="";appendFilePath=!1;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.EditPostConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"url",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9},{no:3,name:"append_file_path",kind:"scalar",T:8}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},hr=class n extends c{disableHljs=!1;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.AssetsConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"disable_hljs",kind:"scalar",T:8}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Tr=class n extends c{goldmark;highlight;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.MarkupConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"goldmark",kind:"message",T:wr},{no:2,name:"highlight",kind:"message",T:Rr}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},wr=class n extends c{renderer;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.GoldmarkConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"renderer",kind:"message",T:Pr}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Pr=class n extends c{unsafe=!1;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.RendererConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"unsafe",kind:"scalar",T:8}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Rr=class n extends c{noClasses=!1;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.HighlightConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"no_classes",kind:"scalar",T:8}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Jr=class n extends c{instagram;twitter;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.ServicesConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"instagram",kind:"message",T:zt},{no:2,name:"twitter",kind:"message",T:zt}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},zt=class n extends c{disableInlineCss=!1;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.ServiceConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"disable_inline_css",kind:"scalar",T:8}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Sr=class n extends c{values=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.repeated_string";static fields=a.util.newFieldList(()=>[{no:1,name:"values",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},kr=class n extends c{items=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.repeated_menu_item";static fields=a.util.newFieldList(()=>[{no:1,name:"items",kind:"message",T:gr,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},br=class n extends c{env="";description="";author="";defaultTheme="";showShareButtons=!1;showReadingTime=!1;displayFullLangName=!1;showPostNavLinks=!1;showBreadCrumbs=!1;showCodeCopyButtons=!1;showRssButtonInSectionTermList=!1;showAllPagesInArchive=!1;showPageNums=!1;showToc=!1;images=[];profileMode;homeInfoParams;socialIcons=[];editPost;assets;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.ParamsConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"env",kind:"scalar",T:9},{no:2,name:"description",kind:"scalar",T:9},{no:3,name:"author",kind:"scalar",T:9},{no:4,name:"default_theme",kind:"scalar",T:9},{no:5,name:"show_share_buttons",kind:"scalar",T:8},{no:6,name:"show_reading_time",kind:"scalar",T:8},{no:7,name:"display_full_lang_name",kind:"scalar",T:8},{no:8,name:"show_post_nav_links",kind:"scalar",T:8},{no:9,name:"show_bread_crumbs",kind:"scalar",T:8},{no:10,name:"show_code_copy_buttons",kind:"scalar",T:8},{no:11,name:"show_rss_button_in_section_term_list",kind:"scalar",T:8},{no:12,name:"show_all_pages_in_archive",kind:"scalar",T:8},{no:13,name:"show_page_nums",kind:"scalar",T:8},{no:14,name:"show_toc",kind:"scalar",T:8},{no:15,name:"images",kind:"scalar",T:9,repeated:!0},{no:16,name:"profile_mode",kind:"message",T:xr},{no:17,name:"home_info_params",kind:"message",T:Or},{no:18,name:"social_icons",kind:"message",T:Er,repeated:!0},{no:19,name:"edit_post",kind:"message",T:yr},{no:20,name:"assets",kind:"message",T:hr}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},xr=class n extends c{enabled=!1;title="";imageUrl="";imageTitle="";buttons=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.ProfileModeConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"enabled",kind:"scalar",T:8},{no:2,name:"title",kind:"scalar",T:9},{no:3,name:"image_url",kind:"scalar",T:9},{no:4,name:"image_title",kind:"scalar",T:9},{no:5,name:"buttons",kind:"message",T:Ir,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Ir=class n extends c{name="";url="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.ButtonConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"url",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Or=class n extends c{title="";content="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.HomeInfoParamsConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"content",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Er=class n extends c{name="";title="";url="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="content.SocialIconConfig";static fields=a.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"title",kind:"scalar",T:9},{no:3,name:"url",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}};var Ht=class n extends c{text="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.AnalyzeConversationRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Wt=class n extends c{prompt="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.GenerateImagesRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"prompt",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Kt=class n extends c{images=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.GenerateImagesResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"images",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Xt=class n extends c{id="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.DeleteSessionRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},ke=class n extends c{id="";text="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.Prompt";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Qt=class n extends c{constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.GetPromptsRequest";static fields=a.util.newFieldList(()=>[]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Zt=class n extends c{prompts=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.GetPromptsResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"prompts",kind:"message",T:ke,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},_t=class n extends c{prompt="";text=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.InferRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"prompt",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},en=class n extends c{text="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.InferResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},tn=class n extends c{content;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.UploadContentRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:M}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},wa=class n extends c{id="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.UploadContentResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},nn=class n extends c{id="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.GetSessionRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},rn=class n extends c{session;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.GetSessionResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"session",kind:"message",T:ln}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},an=class n extends c{page=J.zero;limit=J.zero;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.GetSessionsRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"page",kind:"scalar",T:4},{no:2,name:"limit",kind:"scalar",T:4}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},sn=class n extends c{sessions=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.GetSessionsResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"sessions",kind:"message",T:ln,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Nr=class n extends c{id=0;startTime=J.zero;endTime=J.zero;text="";p="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.Token";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:13},{no:2,name:"start_time",kind:"scalar",T:4},{no:3,name:"end_time",kind:"scalar",T:4},{no:4,name:"text",kind:"scalar",T:9},{no:5,name:"p",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},on=class n extends c{num=0;tokens=[];text="";startTime=J.zero;endTime=J.zero;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.Segment";static fields=a.util.newFieldList(()=>[{no:1,name:"num",kind:"scalar",T:13},{no:2,name:"tokens",kind:"message",T:Nr,repeated:!0},{no:3,name:"text",kind:"scalar",T:9},{no:4,name:"start_time",kind:"scalar",T:4},{no:5,name:"end_time",kind:"scalar",T:4}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},ln=class n extends c{id="";name="";segments=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.Session";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"segments",kind:"message",T:on,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Pa=class n extends c{filePath="";model="";language="";translate=!1;offset=J.zero;duration=J.zero;threads=0;speedup=!1;maxLen=0;maxTokens=0;wordThreshold=0;tokens=!1;colorize=!1;out="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.TranscriptionRequest";static fields=a.util.newFieldList(()=>[{no:14,name:"file_path",kind:"scalar",T:9},{no:1,name:"model",kind:"scalar",T:9},{no:2,name:"language",kind:"scalar",T:9},{no:3,name:"translate",kind:"scalar",T:8},{no:4,name:"offset",kind:"scalar",T:3},{no:5,name:"duration",kind:"scalar",T:3},{no:6,name:"threads",kind:"scalar",T:13},{no:7,name:"speedup",kind:"scalar",T:8},{no:8,name:"max_len",kind:"scalar",T:13},{no:9,name:"max_tokens",kind:"scalar",T:13},{no:10,name:"word_threshold",kind:"scalar",T:1},{no:11,name:"tokens",kind:"scalar",T:8},{no:12,name:"colorize",kind:"scalar",T:8},{no:13,name:"out",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Ra=class n extends c{constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.RegisterFlags";static fields=a.util.newFieldList(()=>[]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Ja=class n extends c{text="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.OCRText";static fields=a.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Sa=class n extends c{image=new Uint8Array(0);constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.Image";static fields=a.util.newFieldList(()=>[{no:1,name:"image",kind:"scalar",T:12}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},un=class n extends c{from="";to="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.ConvertFileRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"from",kind:"scalar",T:9},{no:2,name:"to",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},cn=class n extends c{captureDevice=0;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.ChatRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"capture_device",kind:"scalar",T:5}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},je=class n extends c{segment;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.ChatResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"segment",kind:"message",T:on}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},dn=class n extends c{id="";file="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.YouTubeVideo";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"file",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},$e=class n extends c{file="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.FilePath";static fields=a.util.newFieldList(()=>[{no:1,name:"file",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},fn=class n extends c{title="";filePath;transcript=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="protoflow.YouTubeVideoResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"file_path",kind:"message",T:$e},{no:3,name:"transcript",kind:"message",T:Se,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}};var mn=class n extends c{phoneNumbers=[];summary="";questions=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="ai.AnalyzeConversationResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"phone_numbers",kind:"scalar",T:9,repeated:!0},{no:2,name:"summary",kind:"scalar",T:9},{no:3,name:"questions",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},ka=class n extends c{categories=[];constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="ai.AnalyzeContent";static fields=a.util.newFieldList(()=>[{no:1,name:"categories",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}};var ba={typeName:"protoflow.ProtoflowService",methods:{downloadYouTubeVideo:{name:"DownloadYouTubeVideo",I:dn,O:fn,kind:h.Unary},getSessions:{name:"GetSessions",I:an,O:sn,kind:h.Unary},getSession:{name:"GetSession",I:nn,O:rn,kind:h.Unary},deleteSession:{name:"DeleteSession",I:Xt,O:I,kind:h.Unary},getPrompts:{name:"GetPrompts",I:Qt,O:Zt,kind:h.Unary},newPrompt:{name:"NewPrompt",I:ke,O:ke,kind:h.Unary},uploadContent:{name:"UploadContent",I:tn,O:je,kind:h.ServerStreaming},infer:{name:"Infer",I:_t,O:en,kind:h.ServerStreaming},chat:{name:"Chat",I:cn,O:je,kind:h.ServerStreaming},convertFile:{name:"ConvertFile",I:un,O:$e,kind:h.Unary},generateImages:{name:"GenerateImages",I:Wt,O:Kt,kind:h.Unary},analyzeConversation:{name:"AnalyzeConversation",I:Ht,O:mn,kind:h.Unary}}};var xa={typeName:"content.ContentService",methods:{save:{name:"Save",I:Ye,O:$,kind:h.Unary},search:{name:"Search",I:Yt,O:jt,kind:h.Unary},relate:{name:"Relate",I:Ut,O:I,kind:h.Unary},analyze:{name:"Analyze",I:M,O:Ye,kind:h.Unary},delete:{name:"Delete",I:$,O:$,kind:h.Unary},getTags:{name:"GetTags",I:Gt,O:Dt,kind:h.Unary},setTags:{name:"SetTags",I:At,O:I,kind:h.Unary},publish:{name:"Publish",I:$,O:$,kind:h.Unary},getSources:{name:"GetSources",I:qt,O:Ft,kind:h.Unary},types:{name:"Types",I,O:vt,kind:h.Unary},voiceInput:{name:"VoiceInput",I:Ct,O:Lt,kind:h.ServerStreaming}}};var Ia={typeName:"user.UserService",methods:{register:{name:"Register",I:C,O:C,kind:h.Unary},login:{name:"Login",I:C,O:C,kind:h.Unary},logout:{name:"Logout",I,O:I,kind:h.Unary},resetPassword:{name:"ResetPassword",I:C,O:I,kind:h.Unary},verifyUser:{name:"VerifyUser",I:Ot,O:I,kind:h.Unary},updateConfig:{name:"UpdateConfig",I:Ve,O:I,kind:h.Unary},createGroupInvite:{name:"CreateGroupInvite",I:Nt,O:De,kind:h.Unary},joinGroup:{name:"JoinGroup",I:De,O:G,kind:h.Unary},groupInfo:{name:"GroupInfo",I:Et,O:G,kind:h.Unary},createGroup:{name:"CreateGroup",I:G,O:G,kind:h.Unary},getGroups:{name:"GetGroups",I,O:Mt,kind:h.Unary},deleteGroup:{name:"DeleteGroup",I:G,O:I,kind:h.Unary},share:{name:"Share",I:Bt,O:I,kind:h.Unary}}};var pn=class n extends c{user="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="chat.BanUserRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"user",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},gn=class n extends c{constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="chat.BanUserResponse";static fields=a.util.newFieldList(()=>[]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},yn=class n extends c{message="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="chat.SendMessageRequest";static fields=a.util.newFieldList(()=>[{no:2,name:"message",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},hn=class n extends c{constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="chat.SendMessageResponse";static fields=a.util.newFieldList(()=>[]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Tn=class n extends c{constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="chat.ReceiveMessagesRequest";static fields=a.util.newFieldList(()=>[]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},wn=class n extends c{user="";text="";timestamp=J.zero;constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="chat.Message";static fields=a.util.newFieldList(()=>[{no:1,name:"user",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9},{no:3,name:"timestamp",kind:"scalar",T:3}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}};var Oa={typeName:"chat.ChatService",methods:{sendMessage:{name:"SendMessage",I:yn,O:hn,kind:h.Unary},receiveMessages:{name:"ReceiveMessages",I:Tn,O:wn,kind:h.ServerStreaming},banUser:{name:"BanUser",I:pn,O:gn,kind:h.Unary}}};var Pn=class n extends c{type={case:void 0};constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="event.Metric";static fields=a.util.newFieldList(()=>[{no:1,name:"http",kind:"message",T:Br,oneof:"type"},{no:2,name:"rrweb",kind:"message",T:Mr,oneof:"type"}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Br=class n extends c{method="";path="";query="";headers={};host="";remoteAddr="";userAgent="";referer="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="event.HTTPRequest";static fields=a.util.newFieldList(()=>[{no:1,name:"method",kind:"scalar",T:9},{no:2,name:"path",kind:"scalar",T:9},{no:3,name:"query",kind:"scalar",T:9},{no:4,name:"headers",kind:"map",K:9,V:{kind:"scalar",T:9}},{no:5,name:"host",kind:"scalar",T:9},{no:6,name:"remoteAddr",kind:"scalar",T:9},{no:7,name:"userAgent",kind:"scalar",T:9},{no:8,name:"referer",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Mr=class n extends c{events="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="event.RRWeb";static fields=a.util.newFieldList(()=>[{no:1,name:"events",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}},Rn=class n extends c{id="";constructor(e){super(),a.util.initPartial(e,this)}static runtime=a;static typeName="event.SendResponse";static fields=a.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(e,t){return new n().fromBinary(e,t)}static fromJson(e,t){return new n().fromJson(e,t)}static fromJsonString(e,t){return new n().fromJsonString(e,t)}static equals(e,t){return a.util.equals(n,e,t)}};var Ea={typeName:"event.EventService",methods:{send:{name:"Send",I:Pn,O:Rn,kind:h.Unary}}};var R;(function(n){n[n.Canceled=1]="Canceled",n[n.Unknown=2]="Unknown",n[n.InvalidArgument=3]="InvalidArgument",n[n.DeadlineExceeded=4]="DeadlineExceeded",n[n.NotFound=5]="NotFound",n[n.AlreadyExists=6]="AlreadyExists",n[n.PermissionDenied=7]="PermissionDenied",n[n.ResourceExhausted=8]="ResourceExhausted",n[n.FailedPrecondition=9]="FailedPrecondition",n[n.Aborted=10]="Aborted",n[n.OutOfRange=11]="OutOfRange",n[n.Unimplemented=12]="Unimplemented",n[n.Internal=13]="Internal",n[n.Unavailable=14]="Unavailable",n[n.DataLoss=15]="DataLoss",n[n.Unauthenticated=16]="Unauthenticated"})(R||(R={}));function ze(n){let e=R[n];return typeof e!="string"?n.toString():e[0].toLowerCase()+e.substring(1).replace(/[A-Z]/g,t=>"_"+t.toLowerCase())}var Jn;function Na(n){if(!Jn){Jn={};for(let e of Object.values(R))typeof e!="string"&&(Jn[ze(e)]=e)}return Jn[n]}var x=class n extends Error{constructor(e,t=R.Unknown,s,r,o){super(bs(e,t)),this.name="ConnectError",Object.setPrototypeOf(this,new.target.prototype),this.rawMessage=e,this.code=t,this.metadata=new Headers(s??{}),this.details=r??[],this.cause=o}static from(e,t=R.Unknown){return e instanceof n?e:e instanceof Error?e.name=="AbortError"?new n(e.message,R.Canceled):new n(e.message,t,void 0,void 0,e):new n(String(e),t,void 0,void 0,e)}static[Symbol.hasInstance](e){return e instanceof Error?Object.getPrototypeOf(e)===n.prototype?!0:e.name==="ConnectError"&&"code"in e&&typeof e.code=="number"&&"metadata"in e&&"details"in e&&Array.isArray(e.details)&&"rawMessage"in e&&typeof e.rawMessage=="string"&&"cause"in e:!1}findDetails(e){let t="typeName"in e?{findMessage:r=>r===e.typeName?e:void 0}:e,s=[];for(let r of this.details){if(r instanceof c){t.findMessage(r.getType().typeName)&&s.push(r);continue}let o=t.findMessage(r.type);if(o)try{s.push(o.fromBinary(r.value))}catch{}}return s}};function bs(n,e){return n.length?`[${ze(e)}] ${n}`:`[${ze(e)}]`}function vr(...n){let e=new Headers;for(let t of n)t.forEach((s,r)=>{e.append(r,s)});return e}function Ba(n,e){let t={};for(let[s,r]of Object.entries(n.methods)){let o=e(Object.assign(Object.assign({},r),{localName:s,service:n}));o!=null&&(t[s]=o)}return t}function qr(n){let e,t=new Uint8Array(0);function s(r){let o=new Uint8Array(t.length+r.length);o.set(t),o.set(r,t.length),t=o}return new ReadableStream({start(){e=n.getReader()},async pull(r){let o;for(;;){if(o===void 0&&t.byteLength>=5){let u=0;for(let f=1;f<5;f++)u=(u<<8)+t[f];o={flags:t[0],length:u}}if(o!==void 0&&t.byteLength>=o.length+5)break;let l=await e.read();if(l.done)break;s(l.value)}if(o===void 0){if(t.byteLength==0){r.close();return}r.error(new x("premature end of stream",R.DataLoss));return}let i=t.subarray(5,5+o.length);t=t.subarray(5+o.length),r.enqueue({flags:o.flags,data:i})}})}function Cr(n,e){let t=new Uint8Array(e.length+5);t.set(e,5);let s=new DataView(t.buffer,t.byteOffset,t.byteLength);return s.setUint8(0,n),s.setUint32(1,e.length),t}var xs=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=n[Symbol.asyncIterator],t;return e?e.call(n):(n=typeof __values=="function"?__values(n):n[Symbol.iterator](),t={},s("next"),s("throw"),s("return"),t[Symbol.asyncIterator]=function(){return this},t);function s(o){t[o]=n[o]&&function(i){return new Promise(function(l,u){i=n[o](i),r(l,u,i.done,i.value)})}}function r(o,i,l,u){Promise.resolve(u).then(function(f){o({value:f,done:l})},i)}},He=function(n){return this instanceof He?(this.v=n,this):new He(n)},Is=function(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var s=t.apply(n,e||[]),r,o=[];return r={},l("next"),l("throw"),l("return",i),r[Symbol.asyncIterator]=function(){return this},r;function i(p){return function(y){return Promise.resolve(y).then(p,P)}}function l(p,y){s[p]&&(r[p]=function(w){return new Promise(function(S,E){o.push([p,w,S,E])>1||u(p,w)})},y&&(r[p]=y(r[p])))}function u(p,y){try{f(s[p](y))}catch(w){T(o[0][3],w)}}function f(p){p.value instanceof He?Promise.resolve(p.value.v).then(g,P):T(o[0][2],p)}function g(p){u("next",p)}function P(p){u("throw",p)}function T(p,y){p(y),o.shift(),o.length&&u(o[0][0],o[0][1])}},Os=function(n){var e,t;return e={},s("next"),s("throw",function(r){throw r}),s("return"),e[Symbol.iterator]=function(){return this},e;function s(r,o){e[r]=n[r]?function(i){return(t=!t)?{value:He(n[r](i)),done:!1}:o?o(i):i}:o}};function Ma(n){return Is(this,arguments,function*(){yield He(yield*Os(xs(n)))})}var va=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=n[Symbol.asyncIterator],t;return e?e.call(n):(n=typeof __values=="function"?__values(n):n[Symbol.iterator](),t={},s("next"),s("throw"),s("return"),t[Symbol.asyncIterator]=function(){return this},t);function s(o){t[o]=n[o]&&function(i){return new Promise(function(l,u){i=n[o](i),r(l,u,i.done,i.value)})}}function r(o,i,l,u){Promise.resolve(u).then(function(f){o({value:f,done:l})},i)}},be=function(n){return this instanceof be?(this.v=n,this):new be(n)},Es=function(n){var e,t;return e={},s("next"),s("throw",function(r){throw r}),s("return"),e[Symbol.iterator]=function(){return this},e;function s(r,o){e[r]=n[r]?function(i){return(t=!t)?{value:be(n[r](i)),done:!1}:o?o(i):i}:o}},Ns=function(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var s=t.apply(n,e||[]),r,o=[];return r={},l("next"),l("throw"),l("return",i),r[Symbol.asyncIterator]=function(){return this},r;function i(p){return function(y){return Promise.resolve(y).then(p,P)}}function l(p,y){s[p]&&(r[p]=function(w){return new Promise(function(S,E){o.push([p,w,S,E])>1||u(p,w)})},y&&(r[p]=y(r[p])))}function u(p,y){try{f(s[p](y))}catch(w){T(o[0][3],w)}}function f(p){p.value instanceof be?Promise.resolve(p.value.v).then(g,P):T(o[0][2],p)}function g(p){u("next",p)}function P(p){u("throw",p)}function T(p,y){p(y),o.shift(),o.length&&u(o[0][0],o[0][1])}};function H(n,e){return Ba(n,t=>{switch(t.kind){case h.Unary:return Bs(e,n,t);case h.ServerStreaming:return Ms(e,n,t);case h.ClientStreaming:return vs(e,n,t);case h.BiDiStreaming:return qs(e,n,t);default:return null}})}function Bs(n,e,t){return async function(s,r){var o,i;let l=await n.unary(e,t,r?.signal,r?.timeoutMs,r?.headers,s,r?.contextValues);return(o=r?.onHeader)===null||o===void 0||o.call(r,l.header),(i=r?.onTrailer)===null||i===void 0||i.call(r,l.trailer),l.message}}function Ms(n,e,t){return function(s,r){return qa(n.stream(e,t,r?.signal,r?.timeoutMs,r?.headers,Ma([s]),r?.contextValues),r)}}function vs(n,e,t){return async function(s,r){var o,i,l,u,f,g;let P=await n.stream(e,t,r?.signal,r?.timeoutMs,r?.headers,s,r?.contextValues);(f=r?.onHeader)===null||f===void 0||f.call(r,P.header);let T;try{for(var p=!0,y=va(P.message),w;w=await y.next(),o=w.done,!o;p=!0)u=w.value,p=!1,T=u}catch(S){i={error:S}}finally{try{!p&&!o&&(l=y.return)&&await l.call(y)}finally{if(i)throw i.error}}if(!T)throw new x("protocol error: missing response message",R.Internal);return(g=r?.onTrailer)===null||g===void 0||g.call(r,P.trailer),T}}function qs(n,e,t){return function(s,r){return qa(n.stream(e,t,r?.signal,r?.timeoutMs,r?.headers,s,r?.contextValues),r)}}function qa(n,e){let t=function(){var s,r;return Ns(this,arguments,function*(){let o=yield be(n);(s=e?.onHeader)===null||s===void 0||s.call(e,o.header),yield be(yield*Es(va(o.message))),(r=e?.onTrailer)===null||r===void 0||r.call(e,o.trailer)})}()[Symbol.asyncIterator]();return{[Symbol.asyncIterator]:()=>({next:()=>t.next()})}}function Ca(...n){let e=new AbortController,t=n.filter(r=>r!==void 0).concat(e.signal);for(let r of t){if(r.aborted){s.apply(r);break}r.addEventListener("abort",s)}function s(){e.signal.aborted||e.abort(Lr(this));for(let r of t)r.removeEventListener("abort",s)}return e}function La(n){let e=new AbortController,t=()=>{e.abort(new x("the operation timed out",R.DeadlineExceeded))},s;return n!==void 0&&(n<=0?t():s=setTimeout(t,n)),{signal:e.signal,cleanup:()=>clearTimeout(s)}}function Lr(n){if(!n.aborted)return;if(n.reason!==void 0)return n.reason;let e=new Error("This operation was aborted");return e.name="AbortError",e}function Sn(){return{get(n){return n.id in this?this[n.id]:n.defaultValue},set(n,e){return this[n.id]=e,this},delete(n){return delete this[n.id],this}}}function kn(n,e,t){let s=typeof e=="string"?e:e.typeName,r=typeof t=="string"?t:t.name;return n.toString().replace(/\/?$/,`/${s}/${r}`)}function Ur(n,e){return e instanceof n?e:new n(e)}function Ua(n,e){function t(s){return s.done===!0?s:{done:s.done,value:Ur(n,s.value)}}return{[Symbol.asyncIterator](){let s=e[Symbol.asyncIterator](),r={next:()=>s.next().then(t)};return s.throw!==void 0&&(r.throw=o=>s.throw(o).then(t)),s.return!==void 0&&(r.return=o=>s.return(o).then(t)),r}}}function bn(n){var e;let t=Object.assign({},n);return(e=t.ignoreUnknownFields)!==null&&e!==void 0||(t.ignoreUnknownFields=!0),t}function xn(n,e,t,s){let r=e?Fa(n.I,s):Aa(n.I,t);return{parse:(e?Fa(n.O,s):Aa(n.O,t)).parse,serialize:r.serialize}}function Fa(n,e){return{parse(t){try{return n.fromBinary(t,e)}catch(s){let r=s instanceof Error?s.message:String(s);throw new x(`parse binary: ${r}`,R.InvalidArgument)}},serialize(t){try{return t.toBinary(e)}catch(s){let r=s instanceof Error?s.message:String(s);throw new x(`serialize binary: ${r}`,R.Internal)}}}}function Aa(n,e){var t,s;let r=(t=e?.textEncoder)!==null&&t!==void 0?t:new TextEncoder,o=(s=e?.textDecoder)!==null&&s!==void 0?s:new TextDecoder,i=bn(e);return{parse(l){try{let u=o.decode(l);return n.fromJsonString(u,i)}catch(u){throw x.from(u,R.InvalidArgument)}},serialize(l){try{let u=l.toJsonString(i);return r.encode(u)}catch(u){throw x.from(u,R.Internal)}}}}var Cs=/^application\/(connect\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;var Ga="application/proto",Da="application/json",Va="application/connect+proto",Ya="application/connect+json";function ja(n){let e=n?.match(Cs);if(!e)return;let t=!!e[1],s=!!e[3];return{stream:t,binary:s}}function We(n,e,t){if(e&&new Headers(e).forEach((i,l)=>t.metadata.append(l,i)),typeof n!="object"||n==null||Array.isArray(n)||!("code"in n)||typeof n.code!="string")throw t;let s=Na(n.code);if(s===void 0)throw t;let r=n.message;if(r!=null&&typeof r!="string")throw t;let o=new x(r??"",s,e);if("details"in n&&Array.isArray(n.details))for(let i of n.details){if(i===null||typeof i!="object"||Array.isArray(i)||typeof i.type!="string"||typeof i.value!="string"||"debug"in i&&typeof i.debug!="object")throw t;try{o.details.push({type:i.type,value:V.dec(i.value),debug:i.debug})}catch{throw t}}return o}var In=2;function Fr(n){let e=new x("invalid end stream",R.InvalidArgument),t;try{t=JSON.parse(typeof n=="string"?n:new TextDecoder().decode(n))}catch{throw e}if(typeof t!="object"||t==null||Array.isArray(t))throw e;let s=new Headers;if("metadata"in t){if(typeof t.metadata!="object"||t.metadata==null||Array.isArray(t.metadata))throw e;for(let[o,i]of Object.entries(t.metadata)){if(!Array.isArray(i)||i.some(l=>typeof l!="string"))throw e;for(let l of i)s.append(o,l)}}let r="error"in t?We(t.error,s,e):void 0;return{metadata:s,error:r}}var Ke="Content-Type",$a="Content-Length",On="Content-Encoding";var Ar="Accept-Encoding";var za="Connect-Timeout-Ms",En="Connect-Protocol-Version",Ha="User-Agent";function Wa(n){switch(n){case 400:return R.InvalidArgument;case 401:return R.Unauthenticated;case 403:return R.PermissionDenied;case 404:return R.Unimplemented;case 408:return R.DeadlineExceeded;case 409:return R.Aborted;case 412:return R.FailedPrecondition;case 413:return R.ResourceExhausted;case 415:return R.Internal;case 429:return R.Unavailable;case 431:return R.ResourceExhausted;case 502:return R.Unavailable;case 503:return R.Unavailable;case 504:return R.Unavailable;default:return R.Unknown}}function Nn(n){let e=new Headers,t=new Headers;return n.forEach((s,r)=>{r.toLowerCase().startsWith("trailer-")?t.set(r.substring(8),s):e.set(r,s)}),[e,t]}var Bn="1";function Mn(n,e,t,s,r){let o=new Headers(s??{});return t!==void 0&&o.set(za,`${t}`),o.set(Ke,n==h.Unary?e?Ga:Da:e?Va:Ya),o.set(En,Bn),r&&o.set(Ha,"connect-es/1.3.0"),o}function vn(n,e,t){let s=t.get("Content-Type"),r=ja(s);if(e!==200){let o=new x(`HTTP ${e}`,Wa(e),t);if(n==h.Unary&&r&&!r.binary)return{isUnaryError:!0,unaryError:o};throw o}return{isUnaryError:!1}}var Ka="application/";function Us(n,e){return e?V.enc(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,""):encodeURIComponent(new TextDecoder().decode(n))}function Gr(n,e,t){let s=`?connect=v${Bn}`,r=n.header.get(Ke);r?.indexOf(Ka)===0&&(s+="&encoding="+encodeURIComponent(r.slice(Ka.length)));let o=n.header.get(On);o!==null&&o!=="identity"&&(s+="&compression="+encodeURIComponent(o),t=!0),t&&(s+="&base64=1"),s+="&message="+Us(e,t);let i=n.url+s,l=new Headers(n.header);return[En,Ke,$a,On,Ar].forEach(u=>l.delete(u)),Object.assign(Object.assign({},n),{init:Object.assign(Object.assign({},n.init),{method:"GET"}),url:i,header:l})}function Dr(n){let e=Qa(n.next,n.interceptors),[t,s,r]=Xa(n),o=Object.assign(Object.assign({},n.req),{message:Ur(n.req.method.I,n.req.message),signal:t});return e(o).then(i=>(r(),i),s)}function Vr(n){let e=Qa(n.next,n.interceptors),[t,s,r]=Xa(n),o=Object.assign(Object.assign({},n.req),{message:Ua(n.req.method.I,n.req.message),signal:t}),i=!1;return t.addEventListener("abort",function(){var l,u;let f=n.req.message[Symbol.asyncIterator]();i||(l=f.throw)===null||l===void 0||l.call(f,this.reason).catch(()=>{}),(u=f.return)===null||u===void 0||u.call(f).catch(()=>{})}),e(o).then(l=>Object.assign(Object.assign({},l),{message:{[Symbol.asyncIterator](){let u=l.message[Symbol.asyncIterator]();return{next(){return u.next().then(f=>(f.done==!0&&(i=!0,r()),f),s)}}}}}),s)}function Xa(n){let{signal:e,cleanup:t}=La(n.timeoutMs),s=Ca(n.signal,e);return[s.signal,function(o){let i=x.from(e.aborted?Lr(e):o);return s.abort(i),t(),Promise.reject(i)},function(){t(),s.abort()}]}function Qa(n,e){var t;return(t=e?.concat().reverse().reduce((s,r)=>r(s),n))!==null&&t!==void 0?t:n}function Za(){try{new Headers}catch{throw new Error("connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.")}}var Xe=function(n){return this instanceof Xe?(this.v=n,this):new Xe(n)},Fs=function(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var s=t.apply(n,e||[]),r,o=[];return r={},l("next"),l("throw"),l("return",i),r[Symbol.asyncIterator]=function(){return this},r;function i(p){return function(y){return Promise.resolve(y).then(p,P)}}function l(p,y){s[p]&&(r[p]=function(w){return new Promise(function(S,E){o.push([p,w,S,E])>1||u(p,w)})},y&&(r[p]=y(r[p])))}function u(p,y){try{f(s[p](y))}catch(w){T(o[0][3],w)}}function f(p){p.value instanceof Xe?Promise.resolve(p.value.v).then(g,P):T(o[0][2],p)}function g(p){u("next",p)}function P(p){u("throw",p)}function T(p,y){p(y),o.shift(),o.length&&u(o[0][0],o[0][1])}};function Yr(n){var e;Za();let t=(e=n.useBinaryFormat)!==null&&e!==void 0?e:!1;return{async unary(s,r,o,i,l,u,f){var g;let{serialize:P,parse:T}=xn(r,t,n.jsonOptions,n.binaryOptions);return i=i===void 0?n.defaultTimeoutMs:i<=0?void 0:i,await Dr({interceptors:n.interceptors,signal:o,timeoutMs:i,req:{stream:!1,service:s,method:r,url:kn(n.baseUrl,s,r),init:{method:"POST",credentials:(g=n.credentials)!==null&&g!==void 0?g:"same-origin",redirect:"error",mode:"cors"},header:Mn(r.kind,t,i,l,!1),contextValues:f??Sn(),message:u},next:async p=>{var y;let w=n.useHttpGet===!0&&r.idempotency===Me.NoSideEffects,S=null;w?p=Gr(p,P(p.message),t):S=P(p.message);let O=await((y=n.fetch)!==null&&y!==void 0?y:globalThis.fetch)(p.url,Object.assign(Object.assign({},p.init),{headers:p.header,signal:p.signal,body:S})),{isUnaryError:D,unaryError:xe}=vn(r.kind,O.status,O.headers);if(D)throw We(await O.json(),vr(...Nn(O.headers)),xe);let[_e,qn]=Nn(O.headers);return{stream:!1,service:s,method:r,header:_e,message:t?T(new Uint8Array(await O.arrayBuffer())):r.O.fromJson(await O.json(),bn(n.jsonOptions)),trailer:qn}}})},async stream(s,r,o,i,l,u,f){var g;let{serialize:P,parse:T}=xn(r,t,n.jsonOptions,n.binaryOptions);function p(w,S,E){return Fs(this,arguments,function*(){let D=qr(w).getReader(),xe=!1;for(;;){let _e=yield Xe(D.read());if(_e.done)break;let{flags:qn,data:$r}=_e.value;if((qn&In)===In){xe=!0;let Cn=Fr($r);if(Cn.error){let et=Cn.error;throw E.forEach((Ln,as)=>{et.metadata.append(as,Ln)}),et}Cn.metadata.forEach((et,Ln)=>S.set(Ln,et));continue}yield yield Xe(T($r))}if(!xe)throw"missing EndStreamResponse"})}async function y(w){if(r.kind!=h.ServerStreaming)throw"The fetch API does not support streaming request bodies";let S=await w[Symbol.asyncIterator]().next();if(S.done==!0)throw"missing request message";return Cr(0,P(S.value))}return i=i===void 0?n.defaultTimeoutMs:i<=0?void 0:i,await Vr({interceptors:n.interceptors,timeoutMs:i,signal:o,req:{stream:!0,service:s,method:r,url:kn(n.baseUrl,s,r),init:{method:"POST",credentials:(g=n.credentials)!==null&&g!==void 0?g:"same-origin",redirect:"error",mode:"cors"},header:Mn(r.kind,t,i,l,!1),contextValues:f??Sn(),message:u},next:async w=>{var S;let O=await((S=n.fetch)!==null&&S!==void 0?S:globalThis.fetch)(w.url,Object.assign(Object.assign({},w.init),{headers:w.header,signal:w.signal,body:await y(w.message)}));if(vn(r.kind,O.status,O.headers),O.body===null)throw"missing response body";let D=new Headers;return Object.assign(Object.assign({},w),{header:O.headers,trailer:D,message:p(O.body,D,O.headers)})}})}}}var As="https://demo.lunabrain.com",Qe=Yr({baseUrl:`${As}/api`||"error"}),kc=H(ba,Qe),_a=H(xa,Qe),es=H(Ia,Qe),bc=H(Oa,Qe),xc=H(Ea,Qe);var ts="content/get",ns="content/save";var jr;var Ze=new Map;function rs(n){let e=/https:\/\/chat\.openai\.com\/backend-api\/conversation\/([0-9a-fA-F\-]+)/,t=n.match(e);return t?t[1]:null}var Gs=()=>{async function n(r){try{let o=await _a.save({content:r,related:[]});console.log(o)}catch(o){console.error("failed to save",o)}}(async()=>{let r=await es.login({},{});console.log(r)})(),chrome.runtime.onInstalled.addListener(function(){console.log("Extension Installed")}),chrome.runtime.onStartup.addListener(function(){console.log("Extension Started")}),chrome.webNavigation.onCommitted.addListener(r=>{console.log("completed",r.url)});function e(r){return new Promise((o,i)=>{chrome.tabs.get(r,l=>{chrome.runtime.lastError?o(void 0):o(l)})})}chrome.runtime.onMessage.addListener(async(r,o,i)=>{if(r.action===ts&&(i({data:jr}),jr=void 0),r.action===ns){console.log("asdf");let l=M.fromJson(r.data);try{await n(l)}catch(u){i({data:{error:u}});return}i({data:{}})}}),chrome.tabs.onUpdated.addListener(async(r,o,i)=>{if(!r)return;let l=await e(r);if(l){let u=Ze.get(r);u&&Ze.set(r,{...u,tab:l})}}),chrome.tabs.onCreated.addListener(async r=>{if(!r.id)return;let o=await e(r.id);o&&Ze.set(r.id,{created:Date.now(),closed:-1,tab:o})}),chrome.tabs.onRemoved.addListener(async(r,o)=>{let i=Ze.get(r);if(i){let l={...i,closed:Date.now()};Ze.set(r,l),console.log("tab was opened for",(l.closed-l.created)/1e3,"seconds")}}),chrome.webRequest.onBeforeRequest.addListener(r=>{if(!r.initiator||r.type!=="main_frame")return;let o=new URL(r.initiator),i=new URL(r.url);o.host!==i.host&&(o.host==="news.ycombinator.com"&&(jr={from:r.initiator,to:r.url}),console.log(`Visited URL: ${r.url}, Referrer: ${r.initiator}`))},{urls:["<all_urls>"]},[]);let t={},s={};chrome.webRequest.onCompleted.addListener(r=>{let o=s[r.url.toString()]||0;if(rs(r.url)&&o<2){let i=t[r.url.toString()];console.log("completed",r.url,r),fetch(r.url,{headers:i.map(l=>[l.name,l.value||""])}).then(l=>l.json()).then(l=>{console.log("json",l)}).catch(l=>{console.error("failed to fetch",l)})}},{urls:["<all_urls>"]},[]),chrome.webRequest.onBeforeSendHeaders.addListener(r=>{let o="";if(!r.requestHeaders)return;let i=s[r.url.toString()]||0;rs(r.url)&&(s[r.url.toString()]=i+1,t[r.url.toString()]=r.requestHeaders,console.log("send",r.url,r));for(let l of r.requestHeaders)if(l.name.toLowerCase()==="referer"&&l.value){o=l.value;break}},{urls:["<all_urls>"]},["requestHeaders"])};console.log("asdf");Gs();})();
//# sourceMappingURL=data:application/json;base64,

{
  "version": 3,
  "sources": ["../../../node_modules/@bufbuild/protobuf/dist/esm/private/assert.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/enum.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/message.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/field.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/google/varint.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-common.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-proto3.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-common.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-proto3.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/names.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/private/field.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/proto3.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/service-type.js", "../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/empty_pb.js", "../../../node_modules/@bufbuild/connect/dist/esm/code.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/code-string.js", "../../../node_modules/@bufbuild/connect/dist/esm/connect-error.js", "../../../node_modules/@bufbuild/connect/dist/esm/http-headers.js", "../../../node_modules/@bufbuild/connect/dist/esm/any-client.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol/envelope.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol/async-iterable.js", "../../../node_modules/@bufbuild/connect/dist/esm/promise-client.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol/signals.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol/create-method-url.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol/serialization.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/content-type.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/error-json.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/end-stream.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/headers.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/http-status.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/trailer-mux.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/version.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/request-header.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/validate-response.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol-connect/get-request.js", "../../../node_modules/@bufbuild/connect/dist/esm/protocol/run-call.js", "../../../node_modules/@bufbuild/connect-web/dist/esm/assert-fetch-api.js", "../../../node_modules/@bufbuild/connect-web/dist/esm/connect-transport.js", "../../site/rpc/user/user_pb.ts", "../../site/rpc/content/content_pb.ts", "../../site/rpc/protoflow_pb.ts", "../../site/rpc/ai_pb.ts", "../../site/rpc/protoflow_connect.ts", "../../site/rpc/content/content_connect.ts", "../../site/rpc/user/user_connect.ts", "../../../node_modules/@tanstack/query-core/src/subscribable.ts", "../../../node_modules/@tanstack/query-core/src/utils.ts", "../../../node_modules/@tanstack/query-core/src/focusManager.ts", "../../../node_modules/@tanstack/query-core/src/onlineManager.ts", "../../../node_modules/@tanstack/query-core/src/retryer.ts", "../../../node_modules/@tanstack/query-core/src/logger.ts", "../../../node_modules/@tanstack/query-core/src/notifyManager.ts", "../../../node_modules/@tanstack/query-core/src/removable.ts", "../../../node_modules/@tanstack/query-core/src/query.ts", "../../../node_modules/@tanstack/query-core/src/queryCache.ts", "../../../node_modules/@tanstack/query-core/src/mutation.ts", "../../../node_modules/@tanstack/query-core/src/mutationCache.ts", "../../../node_modules/@tanstack/query-core/src/infiniteQueryBehavior.ts", "../../../node_modules/@tanstack/query-core/src/queryClient.ts", "../../site/service.ts", "../../extension/shared.tsx", "../../extension/background.tsx"],
  "sourcesContent": ["// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Assert that condition is truthy or throw error (with message)\n */\nexport function assert(condition, msg) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\nconst FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;\n/**\n * Assert a valid signed protobuf 32-bit integer.\n */\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid int 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer.\n */\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid uint 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid protobuf float value.\n */\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid float 32: \" + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./assert.js\";\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\n/**\n * Get reflection information from a generated enum.\n * If this function is called on something other than a generated\n * enum, it raises an error.\n */\nexport function getEnumType(enumObject) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\n    const t = enumObject[enumTypeSymbol];\n    assert(t, \"missing enum type on enum object\");\n    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\n}\n/**\n * Sets reflection information on a generated enum.\n */\nexport function setEnumType(enumObject, typeName, values, opt) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v) => ({\n        no: v.no,\n        name: v.name,\n        localName: enumObject[v.no],\n    })), opt);\n}\n/**\n * Create a new EnumType with the given values.\n */\nexport function makeEnumType(typeName, values, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_opt) {\n    const names = Object.create(null);\n    const numbers = Object.create(null);\n    const normalValues = [];\n    for (const value of values) {\n        // We do not surface options at this time\n        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\n        const n = normalizeEnumValue(value);\n        normalValues.push(n);\n        names[value.name] = n;\n        numbers[value.no] = n;\n    }\n    return {\n        typeName,\n        values: normalValues,\n        // We do not surface options at this time\n        // options: opt?.options ?? Object.create(null),\n        findName(name) {\n            return names[name];\n        },\n        findNumber(no) {\n            return numbers[no];\n        },\n    };\n}\n/**\n * Create a new enum object with the given values.\n * Sets reflection information.\n */\nexport function makeEnum(typeName, values, opt) {\n    const enumObject = {};\n    for (const value of values) {\n        const n = normalizeEnumValue(value);\n        enumObject[n.localName] = n.no;\n        enumObject[n.no] = n.localName;\n    }\n    setEnumType(enumObject, typeName, values, opt);\n    return enumObject;\n}\nfunction normalizeEnumValue(value) {\n    if (\"localName\" in value) {\n        return value;\n    }\n    return Object.assign(Object.assign({}, value), { localName: value.name });\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Message is the base class of every message, generated, or created at\n * runtime.\n *\n * It is _not_ safe to extend this class. If you want to create a message at\n * run time, use proto3.makeMessageType().\n */\nexport class Message {\n    /**\n     * Compare with a message of the same type.\n     */\n    equals(other) {\n        return this.getType().runtime.util.equals(this.getType(), this, other);\n    }\n    /**\n     * Create a deep copy.\n     */\n    clone() {\n        return this.getType().runtime.util.clone(this);\n    }\n    /**\n     * Parse from binary data, merging fields.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    fromBinary(bytes, options) {\n        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);\n        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON value.\n     */\n    fromJson(jsonValue, options) {\n        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);\n        format.readMessage(type, jsonValue, opt, this);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON string.\n     */\n    fromJsonString(jsonString, options) {\n        let json;\n        try {\n            json = JSON.parse(jsonString);\n        }\n        catch (e) {\n            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        return this.fromJson(json, options);\n    }\n    /**\n     * Serialize the message to binary data.\n     */\n    toBinary(options) {\n        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();\n        bin.writeMessage(this, writer, opt);\n        return writer.finish();\n    }\n    /**\n     * Serialize the message to a JSON value, a JavaScript value that can be\n     * passed to JSON.stringify().\n     */\n    toJson(options) {\n        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);\n        return json.writeMessage(this, opt);\n    }\n    /**\n     * Serialize the message to a JSON string.\n     */\n    toJsonString(options) {\n        var _a;\n        const value = this.toJson(options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Override for serialization behavior. This will be invoked when calling\n     * JSON.stringify on this message (i.e. JSON.stringify(msg)).\n     *\n     * Note that this will not serialize google.protobuf.Any with a packed\n     * message because the protobuf JSON format specifies that it needs to be\n     * unpacked, and this is only possible with a type registry to look up the\n     * message type.  As a result, attempting to serialize a message with this\n     * type will throw an Error.\n     *\n     * This method is protected because you should not need to invoke it\n     * directly -- instead use JSON.stringify or toJsonString for\n     * stringified JSON.  Alternatively, if actual JSON is desired, you should\n     * use toJson.\n     */\n    toJSON() {\n        return this.toJson({\n            emitDefaultValues: true,\n        });\n    }\n    /**\n     * Retrieve the MessageType of this message - a singleton that represents\n     * the protobuf message declaration and provides metadata for reflection-\n     * based operations.\n     */\n    getType() {\n        // Any class that extends Message _must_ provide a complete static\n        // implementation of MessageType.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n        return Object.getPrototypeOf(this).constructor;\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\n/**\n * Create a new message type using the given runtime.\n */\nexport function makeMessageType(runtime, typeName, fields, opt) {\n    var _a;\n    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\n    const type = {\n        [localName]: function (data) {\n            runtime.util.initFields(this);\n            runtime.util.initPartial(data, this);\n        },\n    }[localName];\n    Object.setPrototypeOf(type.prototype, new Message());\n    Object.assign(type, {\n        runtime,\n        typeName,\n        fields: runtime.util.newFieldList(fields),\n        fromBinary(bytes, options) {\n            return new type().fromBinary(bytes, options);\n        },\n        fromJson(jsonValue, options) {\n            return new type().fromJson(jsonValue, options);\n        },\n        fromJsonString(jsonString, options) {\n            return new type().fromJsonString(jsonString, options);\n        },\n        equals(a, b) {\n            return runtime.util.equals(type, a, b);\n        },\n    });\n    return type;\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getEnumType, makeEnum, makeEnumType } from \"./enum.js\";\nimport { makeMessageType } from \"./message-type.js\";\nexport function makeProtoRuntime(syntax, json, bin, util) {\n    return {\n        syntax,\n        json,\n        bin,\n        util,\n        makeMessageType(typeName, fields, opt) {\n            return makeMessageType(this, typeName, fields, opt);\n        },\n        makeEnum,\n        makeEnumType,\n        getEnumType,\n    };\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n", "// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = (bits.hi & 0x80000000);\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1FFFFF) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xFFFFFF;\n    const mid = ((lo >>> 24) | (hi << 8)) & 0xFFFFFF;\n    const high = (hi >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) +\n        decimalFrom1e7WithLeadingZeros(digitA);\n}\nfunction toUnsigned(lo, hi) {\n    return { lo: lo >>> 0, hi: hi >>> 0 };\n}\nfunction newBits(lo, hi) {\n    return { lo: lo | 0, hi: hi | 0 };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    }\n    else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = (digit1e7) => {\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push((value & 127) | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { int64FromString, int64ToString, uInt64ToString, } from \"./google/varint.js\";\nfunction makeInt64Support() {\n    const dv = new DataView(new ArrayBuffer(8));\n    // note that Safari 14 implements BigInt, but not the DataView methods\n    const ok = typeof BigInt === \"function\" &&\n        typeof dv.getBigInt64 === \"function\" &&\n        typeof dv.getBigUint64 === \"function\" &&\n        typeof dv.setBigInt64 === \"function\" &&\n        typeof dv.setBigUint64 === \"function\" &&\n        (typeof process != \"object\" ||\n            typeof process.env != \"object\" ||\n            process.env.BUF_BIGINT_DISABLE !== \"1\");\n    if (ok) {\n        const MIN = BigInt(\"-9223372036854775808\"), MAX = BigInt(\"9223372036854775807\"), UMIN = BigInt(\"0\"), UMAX = BigInt(\"18446744073709551615\");\n        return {\n            zero: BigInt(0),\n            supported: true,\n            parse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > MAX || bi < MIN) {\n                    throw new Error(`int64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            uParse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > UMAX || bi < UMIN) {\n                    throw new Error(`uint64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            enc(value) {\n                dv.setBigInt64(0, this.parse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            uEnc(value) {\n                dv.setBigInt64(0, this.uParse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            dec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigInt64(0, true);\n            },\n            uDec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigUint64(0, true);\n            },\n        };\n    }\n    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);\n    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);\n    return {\n        zero: \"0\",\n        supported: false,\n        parse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return value;\n        },\n        uParse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return value;\n        },\n        enc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return int64FromString(value);\n        },\n        uEnc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return int64FromString(value);\n        },\n        dec(lo, hi) {\n            return int64ToString(lo, hi);\n        },\n        uDec(lo, hi) {\n            return uInt64ToString(lo, hi);\n        },\n    };\n}\nexport const protoInt64 = makeInt64Support();\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { varint32read, varint32write, varint64read, varint64write, } from \"./google/varint.js\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./private/assert.js\";\nimport { protoInt64 } from \"./proto-int64.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error(\"invalid state, fork stack empty\");\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32(((fieldNo << 3) | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let tc = protoInt64.enc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let tc = protoInt64.enc(value), \n        // zigzag encode\n        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let tc = protoInt64.uEnc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit64:\n                this.pos += 4;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return protoInt64.dec(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return protoInt64.uDec(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;\n        hi = (hi >>> 1) ^ s;\n        return protoInt64.dec(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return protoInt64.uDec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return protoInt64.dec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../field.js\";\n/**\n * Wrap a primitive message field value in its corresponding wrapper\n * message. This function is idempotent.\n */\nexport function wrapField(type, value) {\n    if (value instanceof Message || !type.fieldWrapper) {\n        return value;\n    }\n    return type.fieldWrapper.wrapField(value);\n}\n/**\n * If the given field uses one of the well-known wrapper types, return\n * the primitive type it wraps.\n */\nexport function getUnwrappedFieldType(field) {\n    if (field.fieldKind !== \"message\") {\n        return undefined;\n    }\n    if (field.repeated) {\n        return undefined;\n    }\n    if (field.oneof != undefined) {\n        return undefined;\n    }\n    return wktWrapperToScalarType[field.message.typeName];\n}\nconst wktWrapperToScalarType = {\n    \"google.protobuf.DoubleValue\": ScalarType.DOUBLE,\n    \"google.protobuf.FloatValue\": ScalarType.FLOAT,\n    \"google.protobuf.Int64Value\": ScalarType.INT64,\n    \"google.protobuf.UInt64Value\": ScalarType.UINT64,\n    \"google.protobuf.Int32Value\": ScalarType.INT32,\n    \"google.protobuf.UInt32Value\": ScalarType.UINT32,\n    \"google.protobuf.BoolValue\": ScalarType.BOOL,\n    \"google.protobuf.StringValue\": ScalarType.STRING,\n    \"google.protobuf.BytesValue\": ScalarType.BYTES,\n};\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType } from \"../field.js\";\nimport { WireType } from \"../binary-encoding.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Returns true if both scalar values are equal.\n */\nexport function scalarEquals(type, a, b) {\n    if (a === b) {\n        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n        return true;\n    }\n    // Special case BYTES - we need to compare each byte individually\n    if (type == ScalarType.BYTES) {\n        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Special case 64-bit integers - we support number, string and bigint representation.\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (type) {\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // Loose comparison will match between 0n, 0 and \"0\".\n            return a == b;\n    }\n    // Anything that hasn't been caught by strict comparison or special cased\n    // BYTES and 64-bit integers is not equal.\n    return false;\n}\n/**\n * Returns the default value for the given scalar type, following\n * proto3 semantics.\n */\nexport function scalarDefaultValue(type) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return protoInt64.zero;\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n            // We do not use individual cases to save a few bytes code size.\n            return 0;\n    }\n}\n/**\n * Get information for writing a scalar value.\n *\n * Returns tuple:\n * [0]: appropriate WireType\n * [1]: name of the appropriate method of IBinaryWriter\n * [2]: whether the given value is a default value for proto3 semantics\n *\n * If argument `value` is omitted, [2] is always false.\n */\nexport function scalarTypeInfo(type, value) {\n    const isUndefined = value === undefined;\n    let wireType = WireType.Varint;\n    let isIntrinsicDefault = value === 0;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\n    switch (type) {\n        case ScalarType.STRING:\n            isIntrinsicDefault = isUndefined || !value.length;\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.BOOL:\n            isIntrinsicDefault = value === false;\n            break;\n        case ScalarType.DOUBLE:\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.FLOAT:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.INT64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            break;\n        case ScalarType.UINT64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            break;\n        case ScalarType.FIXED64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.BYTES:\n            isIntrinsicDefault = isUndefined || !value.byteLength;\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.FIXED32:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.SFIXED32:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.SFIXED64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.SINT64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            break;\n    }\n    const method = ScalarType[type].toLowerCase();\n    return [wireType, method, isUndefined || isIntrinsicDefault];\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { BinaryReader, BinaryWriter, WireType } from \"../binary-encoding.js\";\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../field.js\";\nimport { wrapField } from \"./field-wrapper.js\";\nimport { scalarDefaultValue, scalarTypeInfo } from \"./scalars.js\";\nimport { assert } from \"./assert.js\";\n/* eslint-disable @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unnecessary-condition, no-case-declarations, prefer-const */\nconst unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\n// Default options for parsing binary data.\nconst readDefaults = {\n    readUnknownFields: true,\n    readerFactory: (bytes) => new BinaryReader(bytes),\n};\n// Default options for serializing binary data.\nconst writeDefaults = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nexport function makeBinaryFormatCommon() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        listUnknownFields(message) {\n            var _a;\n            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\n        },\n        discardUnknownFields(message) {\n            delete message[unknownFieldsSymbol];\n        },\n        writeUnknownFields(message, writer) {\n            const m = message;\n            const c = m[unknownFieldsSymbol];\n            if (c) {\n                for (const f of c) {\n                    writer.tag(f.no, f.wireType).raw(f.data);\n                }\n            }\n        },\n        onUnknownField(message, no, wireType, data) {\n            const m = message;\n            if (!Array.isArray(m[unknownFieldsSymbol])) {\n                m[unknownFieldsSymbol] = [];\n            }\n            m[unknownFieldsSymbol].push({ no, wireType, data });\n        },\n        readMessage(message, reader, length, options) {\n            const type = message.getType();\n            const end = length === undefined ? reader.len : reader.pos + length;\n            while (reader.pos < end) {\n                const [fieldNo, wireType] = reader.tag(), field = type.fields.find(fieldNo);\n                if (!field) {\n                    const data = reader.skip(wireType);\n                    if (options.readUnknownFields) {\n                        this.onUnknownField(message, fieldNo, wireType, data);\n                    }\n                    continue;\n                }\n                let target = message, repeated = field.repeated, localName = field.localName;\n                if (field.oneof) {\n                    target = target[field.oneof.localName];\n                    if (target.case != localName) {\n                        delete target.value;\n                    }\n                    target.case = localName;\n                    localName = \"value\";\n                }\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        const scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                        if (repeated) {\n                            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                            if (wireType == WireType.LengthDelimited &&\n                                scalarType != ScalarType.STRING &&\n                                scalarType != ScalarType.BYTES) {\n                                let e = reader.uint32() + reader.pos;\n                                while (reader.pos < e) {\n                                    arr.push(readScalar(reader, scalarType));\n                                }\n                            }\n                            else {\n                                arr.push(readScalar(reader, scalarType));\n                            }\n                        }\n                        else {\n                            target[localName] = readScalar(reader, scalarType);\n                        }\n                        break;\n                    case \"message\":\n                        const messageType = field.T;\n                        if (repeated) {\n                            // safe to assume presence of array, oneof cannot contain repeated values\n                            target[localName].push(readMessageField(reader, new messageType(), options));\n                        }\n                        else {\n                            if (target[localName] instanceof Message) {\n                                readMessageField(reader, target[localName], options);\n                            }\n                            else {\n                                target[localName] = readMessageField(reader, new messageType(), options);\n                                if (messageType.fieldWrapper &&\n                                    !field.oneof &&\n                                    !field.repeated) {\n                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                                }\n                            }\n                        }\n                        break;\n                    case \"map\":\n                        let [mapKey, mapVal] = readMapEntry(field, reader, options);\n                        // safe to assume presence of map object, oneof cannot contain repeated values\n                        target[localName][mapKey] = mapVal;\n                        break;\n                }\n            }\n        },\n    };\n}\n// Read a message, avoiding MessageType.fromBinary() to re-use the\n// BinaryReadOptions and the IBinaryReader.\nfunction readMessageField(reader, message, options) {\n    const format = message.getType().runtime.bin;\n    format.readMessage(message, reader, reader.uint32(), options);\n    return message;\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(field, reader, options) {\n    const length = reader.uint32(), end = reader.pos + length;\n    let key, val;\n    while (reader.pos < end) {\n        let [fieldNo] = reader.tag();\n        switch (fieldNo) {\n            case 1:\n                key = readScalar(reader, field.K);\n                break;\n            case 2:\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        val = readScalar(reader, field.V.T);\n                        break;\n                    case \"enum\":\n                        val = reader.int32();\n                        break;\n                    case \"message\":\n                        val = readMessageField(reader, new field.V.T(), options);\n                        break;\n                }\n                break;\n        }\n    }\n    if (key === undefined) {\n        let keyRaw = scalarDefaultValue(field.K);\n        key =\n            field.K == ScalarType.BOOL\n                ? keyRaw.toString()\n                : keyRaw;\n    }\n    if (typeof key != \"string\" && typeof key != \"number\") {\n        key = key.toString();\n    }\n    if (val === undefined) {\n        switch (field.V.kind) {\n            case \"scalar\":\n                val = scalarDefaultValue(field.V.T);\n                break;\n            case \"enum\":\n                val = 0;\n                break;\n            case \"message\":\n                val = new field.V.T();\n                break;\n        }\n    }\n    return [key, val];\n}\n// Does not use scalarTypeInfo() for better performance.\nfunction readScalar(reader, type) {\n    switch (type) {\n        case ScalarType.STRING:\n            return reader.string();\n        case ScalarType.BOOL:\n            return reader.bool();\n        case ScalarType.DOUBLE:\n            return reader.double();\n        case ScalarType.FLOAT:\n            return reader.float();\n        case ScalarType.INT32:\n            return reader.int32();\n        case ScalarType.INT64:\n            return reader.int64();\n        case ScalarType.UINT64:\n            return reader.uint64();\n        case ScalarType.FIXED64:\n            return reader.fixed64();\n        case ScalarType.BYTES:\n            return reader.bytes();\n        case ScalarType.FIXED32:\n            return reader.fixed32();\n        case ScalarType.SFIXED32:\n            return reader.sfixed32();\n        case ScalarType.SFIXED64:\n            return reader.sfixed64();\n        case ScalarType.SINT64:\n            return reader.sint64();\n        case ScalarType.UINT32:\n            return reader.uint32();\n        case ScalarType.SINT32:\n            return reader.sint32();\n    }\n}\nexport function writeMapEntry(writer, options, field, key, value) {\n    writer.tag(field.no, WireType.LengthDelimited);\n    writer.fork();\n    // javascript only allows number or string for object properties\n    // we convert from our representation to the protobuf type\n    let keyValue = key;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\n    switch (field.K) {\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n            keyValue = Number.parseInt(key);\n            break;\n        case ScalarType.BOOL:\n            assert(key == \"true\" || key == \"false\");\n            keyValue = key == \"true\";\n            break;\n    }\n    // write key, expecting key field number = 1\n    writeScalar(writer, field.K, 1, keyValue, true);\n    // write value, expecting value field number = 2\n    switch (field.V.kind) {\n        case \"scalar\":\n            writeScalar(writer, field.V.T, 2, value, true);\n            break;\n        case \"enum\":\n            writeScalar(writer, ScalarType.INT32, 2, value, true);\n            break;\n        case \"message\":\n            writeMessageField(writer, options, field.V.T, 2, value);\n            break;\n    }\n    writer.join();\n}\nexport function writeMessageField(writer, options, type, fieldNo, value) {\n    if (value !== undefined) {\n        const message = wrapField(type, value);\n        writer\n            .tag(fieldNo, WireType.LengthDelimited)\n            .bytes(message.toBinary(options));\n    }\n}\nexport function writeScalar(writer, type, fieldNo, value, emitIntrinsicDefault) {\n    let [wireType, method, isIntrinsicDefault] = scalarTypeInfo(type, value);\n    if (!isIntrinsicDefault || emitIntrinsicDefault) {\n        writer.tag(fieldNo, wireType)[method](value);\n    }\n}\nexport function writePacked(writer, type, fieldNo, value) {\n    if (!value.length) {\n        return;\n    }\n    writer.tag(fieldNo, WireType.LengthDelimited).fork();\n    let [, method] = scalarTypeInfo(type);\n    for (let i = 0; i < value.length; i++) {\n        writer[method](value[i]);\n    }\n    writer.join();\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType } from \"../field.js\";\nimport { makeBinaryFormatCommon, writeMapEntry, writeMessageField, writePacked, writeScalar, } from \"./binary-format-common.js\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions, prefer-const, no-case-declarations */\nexport function makeBinaryFormatProto3() {\n    return Object.assign(Object.assign({}, makeBinaryFormatCommon()), { writeMessage(message, writer, options) {\n            const type = message.getType();\n            for (const field of type.fields.byNumber()) {\n                let value, // this will be our field value, whether it is member of a oneof or regular field\n                repeated = field.repeated, localName = field.localName;\n                if (field.oneof) {\n                    const oneof = message[field.oneof.localName];\n                    if (oneof.case !== localName) {\n                        continue; // field is not selected, skip\n                    }\n                    value = oneof.value;\n                }\n                else {\n                    value = message[localName];\n                }\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        let scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                        if (repeated) {\n                            if (field.packed) {\n                                writePacked(writer, scalarType, field.no, value);\n                            }\n                            else {\n                                for (const item of value) {\n                                    writeScalar(writer, scalarType, field.no, item, true);\n                                }\n                            }\n                        }\n                        else {\n                            if (value !== undefined) {\n                                writeScalar(writer, scalarType, field.no, value, !!field.oneof || field.opt);\n                            }\n                        }\n                        break;\n                    case \"message\":\n                        if (repeated) {\n                            for (const item of value) {\n                                writeMessageField(writer, options, field.T, field.no, item);\n                            }\n                        }\n                        else {\n                            writeMessageField(writer, options, field.T, field.no, value);\n                        }\n                        break;\n                    case \"map\":\n                        for (const [key, val] of Object.entries(value)) {\n                            writeMapEntry(writer, options, field, key, val);\n                        }\n                        break;\n                }\n            }\n            if (options.writeUnknownFields) {\n                this.writeUnknownFields(message, writer);\n            }\n            return writer;\n        } });\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */\n// lookup table from base64 character to byte\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\nexport const protoBase64 = {\n    /**\n     * Decodes a base64 string to a byte array.\n     *\n     * - ignores white-space, including line breaks and tabs\n     * - allows inner padding (can decode concatenated base64 strings)\n     * - does not require padding\n     * - understands base64url encoding:\n     *   \"-\" instead of \"+\",\n     *   \"_\" instead of \"/\",\n     *   no padding\n     */\n    dec(base64Str) {\n        // estimate byte size, not accounting for inner padding and whitespace\n        let es = (base64Str.length * 3) / 4;\n        if (base64Str[base64Str.length - 2] == \"=\")\n            es -= 2;\n        else if (base64Str[base64Str.length - 1] == \"=\")\n            es -= 1;\n        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n        groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // previous byte\n        for (let i = 0; i < base64Str.length; i++) {\n            b = decTable[base64Str.charCodeAt(i)];\n            if (b === undefined) {\n                switch (base64Str[i]) {\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"=\":\n                        groupPos = 0; // reset state when padding found\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"\\n\":\n                    case \"\\r\":\n                    case \"\\t\":\n                    case \" \":\n                        continue; // skip white-space, and padding\n                    default:\n                        throw Error(\"invalid base64 string.\");\n                }\n            }\n            switch (groupPos) {\n                case 0:\n                    p = b;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);\n                    p = b;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);\n                    p = b;\n                    groupPos = 3;\n                    break;\n                case 3:\n                    bytes[bytePos++] = ((p & 3) << 6) | b;\n                    groupPos = 0;\n                    break;\n            }\n        }\n        if (groupPos == 1)\n            throw Error(\"invalid base64 string.\");\n        return bytes.subarray(0, bytePos);\n    },\n    /**\n     * Encode a byte array to a base64 string.\n     */\n    enc(bytes) {\n        let base64 = \"\", groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // carry over from previous byte\n        for (let i = 0; i < bytes.length; i++) {\n            b = bytes[i];\n            switch (groupPos) {\n                case 0:\n                    base64 += encTable[b >> 2];\n                    p = (b & 3) << 4;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    base64 += encTable[p | (b >> 4)];\n                    p = (b & 15) << 2;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    base64 += encTable[p | (b >> 6)];\n                    base64 += encTable[b & 63];\n                    groupPos = 0;\n                    break;\n            }\n        }\n        // add output padding\n        if (groupPos) {\n            base64 += encTable[p];\n            base64 += \"=\";\n            if (groupPos == 1)\n                base64 += \"=\";\n        }\n        return base64;\n    },\n};\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../field.js\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { protoBase64 } from \"../proto-base64.js\";\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\n// Default options for parsing JSON.\nconst jsonReadDefaults = {\n    ignoreUnknownFields: false,\n};\n// Default options for serializing to JSON.\nconst jsonWriteDefaults = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\n}\nexport function makeJsonFormatCommon(makeWriteField) {\n    const writeField = makeWriteField(writeEnum, writeScalar);\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        readMessage(type, json, options, message) {\n            if (json == null || Array.isArray(json) || typeof json != \"object\") {\n                throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json)}`);\n            }\n            message = message !== null && message !== void 0 ? message : new type();\n            const oneofSeen = {};\n            for (const [jsonKey, jsonValue] of Object.entries(json)) {\n                const field = type.fields.findJsonName(jsonKey);\n                if (!field) {\n                    if (!options.ignoreUnknownFields) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: key \"${jsonKey}\" is unknown`);\n                    }\n                    continue;\n                }\n                let localName = field.localName;\n                let target = message;\n                if (field.oneof) {\n                    if (jsonValue === null && field.kind == \"scalar\") {\n                        // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}\n                        continue;\n                    }\n                    const seen = oneofSeen[field.oneof.localName];\n                    if (seen) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof \"${field.oneof.name}\" present: \"${seen}\", \"${jsonKey}\"`);\n                    }\n                    oneofSeen[field.oneof.localName] = jsonKey;\n                    target = target[field.oneof.localName] = { case: localName };\n                    localName = \"value\";\n                }\n                if (field.repeated) {\n                    if (jsonValue === null) {\n                        continue;\n                    }\n                    if (!Array.isArray(jsonValue)) {\n                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);\n                    }\n                    const targetArray = target[localName];\n                    for (const jsonItem of jsonValue) {\n                        if (jsonItem === null) {\n                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);\n                        }\n                        let val;\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- \"map\" is invalid for repeated fields\n                        switch (field.kind) {\n                            case \"message\":\n                                val = field.T.fromJson(jsonItem, options);\n                                break;\n                            case \"enum\":\n                                val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);\n                                if (val === undefined)\n                                    continue;\n                                break;\n                            case \"scalar\":\n                                try {\n                                    val = readScalar(field.T, jsonItem);\n                                }\n                                catch (e) {\n                                    let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;\n                                    if (e instanceof Error && e.message.length > 0) {\n                                        m += `: ${e.message}`;\n                                    }\n                                    throw new Error(m);\n                                }\n                                break;\n                        }\n                        targetArray.push(val);\n                    }\n                }\n                else if (field.kind == \"map\") {\n                    if (jsonValue === null) {\n                        continue;\n                    }\n                    if (Array.isArray(jsonValue) || typeof jsonValue != \"object\") {\n                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);\n                    }\n                    const targetMap = target[localName];\n                    for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {\n                        if (jsonMapValue === null) {\n                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);\n                        }\n                        let val;\n                        switch (field.V.kind) {\n                            case \"message\":\n                                val = field.V.T.fromJson(jsonMapValue, options);\n                                break;\n                            case \"enum\":\n                                val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);\n                                if (val === undefined)\n                                    continue;\n                                break;\n                            case \"scalar\":\n                                try {\n                                    val = readScalar(field.V.T, jsonMapValue);\n                                }\n                                catch (e) {\n                                    let m = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                                    if (e instanceof Error && e.message.length > 0) {\n                                        m += `: ${e.message}`;\n                                    }\n                                    throw new Error(m);\n                                }\n                                break;\n                        }\n                        try {\n                            targetMap[readScalar(field.K, field.K == ScalarType.BOOL\n                                ? jsonMapKey == \"true\"\n                                    ? true\n                                    : jsonMapKey == \"false\"\n                                        ? false\n                                        : jsonMapKey\n                                : jsonMapKey).toString()] = val;\n                        }\n                        catch (e) {\n                            let m = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                            if (e instanceof Error && e.message.length > 0) {\n                                m += `: ${e.message}`;\n                            }\n                            throw new Error(m);\n                        }\n                    }\n                }\n                else {\n                    switch (field.kind) {\n                        case \"message\":\n                            const messageType = field.T;\n                            if (jsonValue === null &&\n                                messageType.typeName != \"google.protobuf.Value\") {\n                                if (field.oneof) {\n                                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field \"${jsonKey}\"`);\n                                }\n                                continue;\n                            }\n                            if (target[localName] instanceof Message) {\n                                target[localName].fromJson(jsonValue, options);\n                            }\n                            else {\n                                target[localName] = messageType.fromJson(jsonValue, options);\n                                if (messageType.fieldWrapper && !field.oneof) {\n                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                                }\n                            }\n                            break;\n                        case \"enum\":\n                            const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);\n                            if (enumValue !== undefined) {\n                                target[localName] = enumValue;\n                            }\n                            break;\n                        case \"scalar\":\n                            try {\n                                target[localName] = readScalar(field.T, jsonValue);\n                            }\n                            catch (e) {\n                                let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                                if (e instanceof Error && e.message.length > 0) {\n                                    m += `: ${e.message}`;\n                                }\n                                throw new Error(m);\n                            }\n                            break;\n                    }\n                }\n            }\n            return message;\n        },\n        writeMessage(message, options) {\n            const type = message.getType();\n            const json = {};\n            let field;\n            try {\n                for (const member of type.fields.byMember()) {\n                    let jsonValue;\n                    if (member.kind == \"oneof\") {\n                        const oneof = message[member.localName];\n                        if (oneof.value === undefined) {\n                            continue;\n                        }\n                        field = member.findField(oneof.case);\n                        if (!field) {\n                            throw \"oneof case not found: \" + oneof.case;\n                        }\n                        jsonValue = writeField(field, oneof.value, options);\n                    }\n                    else {\n                        field = member;\n                        jsonValue = writeField(field, message[field.localName], options);\n                    }\n                    if (jsonValue !== undefined) {\n                        json[options.useProtoFieldName ? field.name : field.jsonName] =\n                            jsonValue;\n                    }\n                }\n            }\n            catch (e) {\n                const m = field\n                    ? `cannot encode field ${type.typeName}.${field.name} to JSON`\n                    : `cannot encode message ${type.typeName} to JSON`;\n                const r = e instanceof Error ? e.message : String(e);\n                throw new Error(m + (r.length > 0 ? `: ${r}` : \"\"));\n            }\n            return json;\n        },\n        readScalar,\n        writeScalar,\n        debug: debugJsonValue,\n    };\n}\nfunction debugJsonValue(json) {\n    if (json === null) {\n        return \"null\";\n    }\n    switch (typeof json) {\n        case \"object\":\n            return Array.isArray(json) ? \"array\" : \"object\";\n        case \"string\":\n            return json.length > 100 ? \"string\" : `\"${json.split('\"').join('\\\\\"')}\"`;\n        default:\n            return String(json);\n    }\n}\n// May throw an error. If the error message is non-blank, it should be shown.\n// It is up to the caller to provide context.\nfunction readScalar(type, json) {\n    // every valid case in the switch below returns, and every fall\n    // through is regarded as a failure.\n    switch (type) {\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            if (json === null)\n                return 0.0;\n            if (json === \"NaN\")\n                return Number.NaN;\n            if (json === \"Infinity\")\n                return Number.POSITIVE_INFINITY;\n            if (json === \"-Infinity\")\n                return Number.NEGATIVE_INFINITY;\n            if (json === \"\") {\n                // empty string is not a number\n                break;\n            }\n            if (typeof json == \"string\" && json.trim().length !== json.length) {\n                // extra whitespace\n                break;\n            }\n            if (typeof json != \"string\" && typeof json != \"number\") {\n                break;\n            }\n            const float = Number(json);\n            if (Number.isNaN(float)) {\n                // not a number\n                break;\n            }\n            if (!Number.isFinite(float)) {\n                // infinity and -infinity are handled by string representation above, so this is an error\n                break;\n            }\n            if (type == ScalarType.FLOAT)\n                assertFloat32(float);\n            return float;\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.UINT32:\n            if (json === null)\n                return 0;\n            let int32;\n            if (typeof json == \"number\")\n                int32 = json;\n            else if (typeof json == \"string\" && json.length > 0) {\n                if (json.trim().length === json.length)\n                    int32 = Number(json);\n            }\n            if (int32 === undefined)\n                break;\n            if (type == ScalarType.UINT32)\n                assertUInt32(int32);\n            else\n                assertInt32(int32);\n            return int32;\n        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            if (json === null)\n                return protoInt64.zero;\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            return protoInt64.parse(json);\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            if (json === null)\n                return protoInt64.zero;\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            return protoInt64.uParse(json);\n        // bool:\n        case ScalarType.BOOL:\n            if (json === null)\n                return false;\n            if (typeof json !== \"boolean\")\n                break;\n            return json;\n        // string:\n        case ScalarType.STRING:\n            if (json === null)\n                return \"\";\n            if (typeof json !== \"string\") {\n                break;\n            }\n            // A string must always contain UTF-8 encoded or 7-bit ASCII.\n            // We validate with encodeURIComponent, which appears to be the fastest widely available option.\n            try {\n                encodeURIComponent(json);\n            }\n            catch (e) {\n                throw new Error(\"invalid UTF8\");\n            }\n            return json;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            if (json === null || json === \"\")\n                return new Uint8Array(0);\n            if (typeof json !== \"string\")\n                break;\n            return protoBase64.dec(json);\n    }\n    throw new Error();\n}\nfunction readEnum(type, json, ignoreUnknownFields) {\n    if (json === null) {\n        // proto3 requires 0 to be default value for all enums\n        return 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (typeof json) {\n        case \"number\":\n            if (Number.isInteger(json)) {\n                return json;\n            }\n            break;\n        case \"string\":\n            const value = type.findName(json);\n            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n            if (value || ignoreUnknownFields) {\n                return value === null || value === void 0 ? void 0 : value.no;\n            }\n            break;\n    }\n    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n}\nfunction writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {\n    var _a;\n    if (value === undefined) {\n        return value;\n    }\n    if (value === 0 && !emitIntrinsicDefault) {\n        // proto3 requires 0 to be default value for all enums\n        return undefined;\n    }\n    if (enumAsInteger) {\n        return value;\n    }\n    if (type.typeName == \"google.protobuf.NullValue\") {\n        return null;\n    }\n    const val = type.findNumber(value);\n    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\n}\nfunction writeScalar(type, value, emitIntrinsicDefault) {\n    if (value === undefined) {\n        return undefined;\n    }\n    switch (type) {\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n            assert(typeof value == \"number\");\n            return value != 0 || emitIntrinsicDefault ? value : undefined;\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.FLOAT:\n        // assertFloat32(value);\n        case ScalarType.DOUBLE: // eslint-disable-line no-fallthrough\n            assert(typeof value == \"number\");\n            if (Number.isNaN(value))\n                return \"NaN\";\n            if (value === Number.POSITIVE_INFINITY)\n                return \"Infinity\";\n            if (value === Number.NEGATIVE_INFINITY)\n                return \"-Infinity\";\n            return value !== 0 || emitIntrinsicDefault ? value : undefined;\n        // string:\n        case ScalarType.STRING:\n            assert(typeof value == \"string\");\n            return value.length > 0 || emitIntrinsicDefault ? value : undefined;\n        // bool:\n        case ScalarType.BOOL:\n            assert(typeof value == \"boolean\");\n            return value || emitIntrinsicDefault ? value : undefined;\n        // JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            assert(typeof value == \"bigint\" ||\n                typeof value == \"string\" ||\n                typeof value == \"number\");\n            // We use implicit conversion with `value != 0` to catch both 0n and \"0\"\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            return emitIntrinsicDefault || value != 0\n                ? value.toString(10)\n                : undefined;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            assert(value instanceof Uint8Array);\n            return emitIntrinsicDefault || value.byteLength > 0\n                ? protoBase64.enc(value)\n                : undefined;\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { wrapField } from \"./field-wrapper.js\";\nimport { assert } from \"./assert.js\";\nimport { makeJsonFormatCommon } from \"./json-format-common.js\";\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\nexport function makeJsonFormatProto3() {\n    return makeJsonFormatCommon((writeEnum, writeScalar) => {\n        return function writeField(field, value, options) {\n            if (field.kind == \"map\") {\n                const jsonObj = {};\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        for (const [entryKey, entryValue] of Object.entries(value)) {\n                            const val = writeScalar(field.V.T, entryValue, true);\n                            assert(val !== undefined);\n                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                        }\n                        break;\n                    case \"message\":\n                        for (const [entryKey, entryValue] of Object.entries(value)) {\n                            // JSON standard allows only (double quoted) string as property key\n                            jsonObj[entryKey.toString()] = entryValue.toJson(options);\n                        }\n                        break;\n                    case \"enum\":\n                        const enumType = field.V.T;\n                        for (const [entryKey, entryValue] of Object.entries(value)) {\n                            assert(entryValue === undefined || typeof entryValue == \"number\");\n                            const val = writeEnum(enumType, entryValue, true, options.enumAsInteger);\n                            assert(val !== undefined);\n                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                        }\n                        break;\n                }\n                return options.emitDefaultValues || Object.keys(jsonObj).length > 0\n                    ? jsonObj\n                    : undefined;\n            }\n            else if (field.repeated) {\n                const jsonArr = [];\n                switch (field.kind) {\n                    case \"scalar\":\n                        for (let i = 0; i < value.length; i++) {\n                            jsonArr.push(writeScalar(field.T, value[i], true));\n                        }\n                        break;\n                    case \"enum\":\n                        for (let i = 0; i < value.length; i++) {\n                            jsonArr.push(writeEnum(field.T, value[i], true, options.enumAsInteger));\n                        }\n                        break;\n                    case \"message\":\n                        for (let i = 0; i < value.length; i++) {\n                            jsonArr.push(wrapField(field.T, value[i]).toJson(options));\n                        }\n                        break;\n                }\n                return options.emitDefaultValues || jsonArr.length > 0\n                    ? jsonArr\n                    : undefined;\n            }\n            else {\n                switch (field.kind) {\n                    case \"scalar\":\n                        return writeScalar(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);\n                    case \"enum\":\n                        return writeEnum(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);\n                    case \"message\":\n                        return value !== undefined\n                            ? wrapField(field.T, value).toJson(options)\n                            : undefined;\n                }\n            }\n        };\n    });\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { setEnumType } from \"./enum.js\";\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../field.js\";\nimport { scalarEquals } from \"./scalars.js\";\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */\nexport function makeUtilCommon() {\n    return {\n        setEnumType,\n        initPartial(source, target) {\n            if (source === undefined) {\n                return;\n            }\n            const type = target.getType();\n            for (const member of type.fields.byMember()) {\n                const localName = member.localName, t = target, s = source;\n                if (s[localName] === undefined) {\n                    continue;\n                }\n                switch (member.kind) {\n                    case \"oneof\":\n                        const sk = s[localName].case;\n                        if (sk === undefined) {\n                            continue;\n                        }\n                        const sourceField = member.findField(sk);\n                        let val = s[localName].value;\n                        if (sourceField &&\n                            sourceField.kind == \"message\" &&\n                            !(val instanceof sourceField.T)) {\n                            val = new sourceField.T(val);\n                        }\n                        else if (sourceField &&\n                            sourceField.kind === \"scalar\" &&\n                            sourceField.T === ScalarType.BYTES) {\n                            val = toU8Arr(val);\n                        }\n                        t[localName] = { case: sk, value: val };\n                        break;\n                    case \"scalar\":\n                    case \"enum\":\n                        let copy = s[localName];\n                        if (member.T === ScalarType.BYTES) {\n                            copy = member.repeated\n                                ? copy.map(toU8Arr)\n                                : toU8Arr(copy);\n                        }\n                        t[localName] = copy;\n                        break;\n                    case \"map\":\n                        switch (member.V.kind) {\n                            case \"scalar\":\n                            case \"enum\":\n                                if (member.V.T === ScalarType.BYTES) {\n                                    for (const [k, v] of Object.entries(s[localName])) {\n                                        t[localName][k] = toU8Arr(v);\n                                    }\n                                }\n                                else {\n                                    Object.assign(t[localName], s[localName]);\n                                }\n                                break;\n                            case \"message\":\n                                const messageType = member.V.T;\n                                for (const k of Object.keys(s[localName])) {\n                                    let val = s[localName][k];\n                                    if (!messageType.fieldWrapper) {\n                                        // We only take partial input for messages that are not a wrapper type.\n                                        // For those messages, we recursively normalize the partial input.\n                                        val = new messageType(val);\n                                    }\n                                    t[localName][k] = val;\n                                }\n                                break;\n                        }\n                        break;\n                    case \"message\":\n                        const mt = member.T;\n                        if (member.repeated) {\n                            t[localName] = s[localName].map((val) => val instanceof mt ? val : new mt(val));\n                        }\n                        else if (s[localName] !== undefined) {\n                            const val = s[localName];\n                            if (mt.fieldWrapper) {\n                                if (\n                                // We can't use BytesValue.typeName as that will create a circular import\n                                mt.typeName === \"google.protobuf.BytesValue\") {\n                                    t[localName] = toU8Arr(val);\n                                }\n                                else {\n                                    t[localName] = val;\n                                }\n                            }\n                            else {\n                                t[localName] = val instanceof mt ? val : new mt(val);\n                            }\n                        }\n                        break;\n                }\n            }\n        },\n        equals(type, a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (!a || !b) {\n                return false;\n            }\n            return type.fields.byMember().every((m) => {\n                const va = a[m.localName];\n                const vb = b[m.localName];\n                if (m.repeated) {\n                    if (va.length !== vb.length) {\n                        return false;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\n                    switch (m.kind) {\n                        case \"message\":\n                            return va.every((a, i) => m.T.equals(a, vb[i]));\n                        case \"scalar\":\n                            return va.every((a, i) => scalarEquals(m.T, a, vb[i]));\n                        case \"enum\":\n                            return va.every((a, i) => scalarEquals(ScalarType.INT32, a, vb[i]));\n                    }\n                    throw new Error(`repeated cannot contain ${m.kind}`);\n                }\n                switch (m.kind) {\n                    case \"message\":\n                        return m.T.equals(va, vb);\n                    case \"enum\":\n                        return scalarEquals(ScalarType.INT32, va, vb);\n                    case \"scalar\":\n                        return scalarEquals(m.T, va, vb);\n                    case \"oneof\":\n                        if (va.case !== vb.case) {\n                            return false;\n                        }\n                        const s = m.findField(va.case);\n                        if (s === undefined) {\n                            return true;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\n                        switch (s.kind) {\n                            case \"message\":\n                                return s.T.equals(va.value, vb.value);\n                            case \"enum\":\n                                return scalarEquals(ScalarType.INT32, va.value, vb.value);\n                            case \"scalar\":\n                                return scalarEquals(s.T, va.value, vb.value);\n                        }\n                        throw new Error(`oneof cannot contain ${s.kind}`);\n                    case \"map\":\n                        const keys = Object.keys(va).concat(Object.keys(vb));\n                        switch (m.V.kind) {\n                            case \"message\":\n                                const messageType = m.V.T;\n                                return keys.every((k) => messageType.equals(va[k], vb[k]));\n                            case \"enum\":\n                                return keys.every((k) => scalarEquals(ScalarType.INT32, va[k], vb[k]));\n                            case \"scalar\":\n                                const scalarType = m.V.T;\n                                return keys.every((k) => scalarEquals(scalarType, va[k], vb[k]));\n                        }\n                        break;\n                }\n            });\n        },\n        clone(message) {\n            const type = message.getType(), target = new type(), any = target;\n            for (const member of type.fields.byMember()) {\n                const source = message[member.localName];\n                let copy;\n                if (member.repeated) {\n                    copy = source.map(cloneSingularField);\n                }\n                else if (member.kind == \"map\") {\n                    copy = any[member.localName];\n                    for (const [key, v] of Object.entries(source)) {\n                        copy[key] = cloneSingularField(v);\n                    }\n                }\n                else if (member.kind == \"oneof\") {\n                    const f = member.findField(source.case);\n                    copy = f\n                        ? { case: source.case, value: cloneSingularField(source.value) }\n                        : { case: undefined };\n                }\n                else {\n                    copy = cloneSingularField(source);\n                }\n                any[member.localName] = copy;\n            }\n            return target;\n        },\n    };\n}\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\nfunction cloneSingularField(value) {\n    if (value === undefined) {\n        return value;\n    }\n    if (value instanceof Message) {\n        return value.clone();\n    }\n    if (value instanceof Uint8Array) {\n        const c = new Uint8Array(value.byteLength);\n        c.set(value);\n        return c;\n    }\n    return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(input) {\n    return input instanceof Uint8Array ? input : new Uint8Array(input);\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport class InternalFieldList {\n    constructor(fields, normalizer) {\n        this._fields = fields;\n        this._normalizer = normalizer;\n    }\n    findJsonName(jsonName) {\n        if (!this.jsonNames) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.jsonName] = t[f.name] = f;\n            }\n            this.jsonNames = t;\n        }\n        return this.jsonNames[jsonName];\n    }\n    find(fieldNo) {\n        if (!this.numbers) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.no] = f;\n            }\n            this.numbers = t;\n        }\n        return this.numbers[fieldNo];\n    }\n    list() {\n        if (!this.all) {\n            this.all = this._normalizer(this._fields);\n        }\n        return this.all;\n    }\n    byNumber() {\n        if (!this.numbersAsc) {\n            this.numbersAsc = this.list()\n                .concat()\n                .sort((a, b) => a.no - b.no);\n        }\n        return this.numbersAsc;\n    }\n    byMember() {\n        if (!this.members) {\n            this.members = [];\n            const a = this.members;\n            let o;\n            for (const f of this.list()) {\n                if (f.oneof) {\n                    if (f.oneof !== o) {\n                        o = f.oneof;\n                        a.push(o);\n                    }\n                }\n                else {\n                    a.push(f);\n                }\n            }\n        }\n        return this.members;\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Returns the name of a protobuf element in generated code.\n *\n * Field names - including oneofs - are converted to lowerCamelCase. For\n * messages, enumerations and services, the package name is stripped from\n * the type name. For nested messages and enumerations, the names are joined\n * with an underscore. For methods, the first character is made lowercase.\n */\nexport function localName(desc) {\n    switch (desc.kind) {\n        case \"field\":\n            return localFieldName(desc.name, desc.oneof !== undefined);\n        case \"oneof\":\n            return localOneofName(desc.name);\n        case \"enum\":\n        case \"message\":\n        case \"service\": {\n            const pkg = desc.file.proto.package;\n            const offset = pkg === undefined ? 0 : pkg.length + 1;\n            const name = desc.typeName.substring(offset).replace(/\\./g, \"_\");\n            // For services, we only care about safe identifiers, not safe object properties,\n            // but we have shipped v1 with a bug that respected object properties, and we\n            // do not want to introduce a breaking change, so we continue to escape for\n            // safe object properties.\n            // See https://github.com/bufbuild/protobuf-es/pull/391\n            return safeObjectProperty(safeIdentifier(name));\n        }\n        case \"enum_value\": {\n            const sharedPrefix = desc.parent.sharedPrefix;\n            if (sharedPrefix === undefined) {\n                return desc.name;\n            }\n            const name = desc.name.substring(sharedPrefix.length);\n            return safeObjectProperty(name);\n        }\n        case \"rpc\": {\n            let name = desc.name;\n            if (name.length == 0) {\n                return name;\n            }\n            name = name[0].toLowerCase() + name.substring(1);\n            return safeObjectProperty(name);\n        }\n    }\n}\n/**\n * Returns the name of a field in generated code.\n */\nexport function localFieldName(protoName, inOneof) {\n    const name = protoCamelCase(protoName);\n    if (inOneof) {\n        // oneof member names are not properties, but values of the `case` property.\n        return name;\n    }\n    return safeObjectProperty(safeMessageProperty(name));\n}\n/**\n * Returns the name of a oneof group in generated code.\n */\nexport function localOneofName(protoName) {\n    return localFieldName(protoName, false);\n}\n/**\n * Returns the JSON name for a protobuf field, exactly like protoc does.\n */\nexport const fieldJsonName = protoCamelCase;\n/**\n * Finds a prefix shared by enum values, for example `MY_ENUM_` for\n * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.\n */\nexport function findEnumSharedPrefix(enumName, valueNames) {\n    const prefix = camelToSnakeCase(enumName) + \"_\";\n    for (const name of valueNames) {\n        if (!name.toLowerCase().startsWith(prefix)) {\n            return undefined;\n        }\n        const shortName = name.substring(prefix.length);\n        if (shortName.length == 0) {\n            return undefined;\n        }\n        if (/^\\d/.test(shortName)) {\n            // identifiers must not start with numbers\n            return undefined;\n        }\n    }\n    return prefix;\n}\n/**\n * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.\n * This is used to find shared prefixes in an enum.\n */\nfunction camelToSnakeCase(camel) {\n    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c)).toLowerCase();\n}\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */\nfunction protoCamelCase(snakeCase) {\n    let capNext = false;\n    const b = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let c = snakeCase.charAt(i);\n        switch (c) {\n            case \"_\":\n                capNext = true;\n                break;\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                b.push(c);\n                capNext = false;\n                break;\n            default:\n                if (capNext) {\n                    capNext = false;\n                    c = c.toUpperCase();\n                }\n                b.push(c);\n                break;\n        }\n    }\n    return b.join(\"\");\n}\n/**\n * Names that cannot be used for identifiers, such as class names,\n * but _can_ be used for object properties.\n */\nconst reservedIdentifiers = new Set([\n    // ECMAScript 2015 keywords\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"const\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"else\",\n    \"export\",\n    \"extends\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"instanceof\",\n    \"new\",\n    \"null\",\n    \"return\",\n    \"super\",\n    \"switch\",\n    \"this\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typeof\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    // ECMAScript 2015 future reserved keywords\n    \"enum\",\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    // Class name cannot be 'Object' when targeting ES5 with module CommonJS\n    \"Object\",\n    // TypeScript keywords that cannot be used for types (as opposed to variables)\n    \"bigint\",\n    \"number\",\n    \"boolean\",\n    \"string\",\n    \"object\",\n    // Identifiers reserved for the runtime, so we can generate legible code\n    \"globalThis\",\n    \"Uint8Array\",\n    \"Partial\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nconst reservedObjectProperties = new Set([\n    // names reserved by JavaScript\n    \"constructor\",\n    \"toString\",\n    \"toJSON\",\n    \"valueOf\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by the runtime.\n */\nconst reservedMessageProperties = new Set([\n    // names reserved by the runtime\n    \"getType\",\n    \"clone\",\n    \"equals\",\n    \"fromBinary\",\n    \"fromJson\",\n    \"fromJsonString\",\n    \"toBinary\",\n    \"toJson\",\n    \"toJsonString\",\n    // names reserved by the runtime for the future\n    \"toObject\",\n]);\nconst fallback = (name) => `${name}$`;\n/**\n * Will wrap names that are Object prototype properties or names reserved\n * for `Message`s.\n */\nconst safeMessageProperty = (name) => {\n    if (reservedMessageProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nexport const safeObjectProperty = (name) => {\n    if (reservedObjectProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that can be used for identifiers or class properties\n */\nexport const safeIdentifier = (name) => {\n    if (reservedIdentifiers.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { localOneofName } from \"./names.js\";\nimport { assert } from \"./assert.js\";\nexport class InternalOneofInfo {\n    constructor(name) {\n        this.kind = \"oneof\";\n        this.repeated = false;\n        this.packed = false;\n        this.opt = false;\n        this.default = undefined;\n        this.fields = [];\n        this.name = name;\n        this.localName = localOneofName(name);\n    }\n    addField(field) {\n        assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);\n        this.fields.push(field);\n    }\n    findField(localName) {\n        if (!this._lookup) {\n            this._lookup = Object.create(null);\n            for (let i = 0; i < this.fields.length; i++) {\n                this._lookup[this.fields[i].localName] = this.fields[i];\n            }\n        }\n        return this._lookup[localName];\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { makeProtoRuntime } from \"./private/proto-runtime.js\";\nimport { makeBinaryFormatProto3 } from \"./private/binary-format-proto3.js\";\nimport { makeJsonFormatProto3 } from \"./private/json-format-proto3.js\";\nimport { makeUtilCommon } from \"./private/util-common.js\";\nimport { InternalFieldList } from \"./private/field-list.js\";\nimport { scalarDefaultValue } from \"./private/scalars.js\";\nimport { ScalarType } from \"./field.js\";\nimport { InternalOneofInfo } from \"./private/field.js\";\nimport { localFieldName, fieldJsonName } from \"./private/names.js\";\n/**\n * Provides functionality for messages defined with the proto3 syntax.\n */\nexport const proto3 = makeProtoRuntime(\"proto3\", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), { newFieldList(fields) {\n        return new InternalFieldList(fields, normalizeFieldInfosProto3);\n    },\n    initFields(target) {\n        for (const member of target.getType().fields.byMember()) {\n            if (member.opt) {\n                continue;\n            }\n            const name = member.localName, t = target;\n            if (member.repeated) {\n                t[name] = [];\n                continue;\n            }\n            switch (member.kind) {\n                case \"oneof\":\n                    t[name] = { case: undefined };\n                    break;\n                case \"enum\":\n                    t[name] = 0;\n                    break;\n                case \"map\":\n                    t[name] = {};\n                    break;\n                case \"scalar\":\n                    t[name] = scalarDefaultValue(member.T); // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n                    break;\n                case \"message\":\n                    // message fields are always optional in proto3\n                    break;\n            }\n        }\n    } }));\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\nfunction normalizeFieldInfosProto3(fieldInfos) {\n    var _a, _b, _c;\n    const r = [];\n    let o;\n    for (const field of typeof fieldInfos == \"function\"\n        ? fieldInfos()\n        : fieldInfos) {\n        const f = field;\n        f.localName = localFieldName(field.name, field.oneof !== undefined);\n        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);\n        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\n        // From the proto3 language guide:\n        // > In proto3, repeated fields of scalar numeric types are packed by default.\n        // This information is incomplete - according to the conformance tests, BOOL\n        // and ENUM are packed by default as well. This means only STRING and BYTES\n        // are not packed by default, which makes sense because they are length-delimited.\n        f.packed =\n            (_c = field.packed) !== null && _c !== void 0 ? _c : (field.kind == \"enum\" ||\n                (field.kind == \"scalar\" &&\n                    field.T != ScalarType.BYTES &&\n                    field.T != ScalarType.STRING));\n        // We do not surface options at this time\n        // f.options = field.options ?? emptyReadonlyObject;\n        if (field.oneof !== undefined) {\n            const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\n            if (!o || o.name != ooname) {\n                o = new InternalOneofInfo(ooname);\n            }\n            f.oneof = o;\n            o.addField(f);\n        }\n        r.push(f);\n    }\n    return r;\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * MethodKind represents the four method types that can be declared in\n * protobuf with the `stream` keyword:\n *\n * 1. Unary:           rpc (Input) returns (Output)\n * 2. ServerStreaming: rpc (Input) returns (stream Output)\n * 3. ClientStreaming: rpc (stream Input) returns (Output)\n * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)\n */\nexport var MethodKind;\n(function (MethodKind) {\n    MethodKind[MethodKind[\"Unary\"] = 0] = \"Unary\";\n    MethodKind[MethodKind[\"ServerStreaming\"] = 1] = \"ServerStreaming\";\n    MethodKind[MethodKind[\"ClientStreaming\"] = 2] = \"ClientStreaming\";\n    MethodKind[MethodKind[\"BiDiStreaming\"] = 3] = \"BiDiStreaming\";\n})(MethodKind || (MethodKind = {}));\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or just\n * idempotent, or neither? HTTP based RPC implementation may choose GET verb\n * for safe methods, and PUT verb for idempotent methods instead of the\n * default POST.\n *\n * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,\n * defined in the well-known type google/protobuf/descriptor.proto, but\n * drops UNKNOWN.\n */\nexport var MethodIdempotency;\n(function (MethodIdempotency) {\n    /**\n     * Idempotent, no side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"NoSideEffects\"] = 1] = \"NoSideEffects\";\n    /**\n     * Idempotent, but may have side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"Idempotent\"] = 2] = \"Idempotent\";\n})(MethodIdempotency || (MethodIdempotency = {}));\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * A generic empty message that you can re-use to avoid defining duplicated\n * empty messages in your APIs. A typical example is to use it as the request\n * or the response type of an API method. For instance:\n *\n *     service Foo {\n *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n *     }\n *\n *\n * @generated from message google.protobuf.Empty\n */\nexport class Empty extends Message {\n    constructor(data) {\n        super();\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Empty().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Empty().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Empty().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Empty, a, b);\n    }\n}\nEmpty.runtime = proto3;\nEmpty.typeName = \"google.protobuf.Empty\";\nEmpty.fields = proto3.util.newFieldList(() => []);\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Connect represents categories of errors as codes, and each code maps to a\n * specific HTTP status code. The codes and their semantics were chosen to\n * match gRPC. Only the codes below are valid \u2014 there are no user-defined\n * codes.\n *\n * See the specification at https://connectrpc.com/docs/protocol#error-codes\n * for details.\n */\nexport var Code;\n(function (Code) {\n    /**\n     * Canceled, usually be the user\n     */\n    Code[Code[\"Canceled\"] = 1] = \"Canceled\";\n    /**\n     * Unknown error\n     */\n    Code[Code[\"Unknown\"] = 2] = \"Unknown\";\n    /**\n     * Argument invalid regardless of system state\n     */\n    Code[Code[\"InvalidArgument\"] = 3] = \"InvalidArgument\";\n    /**\n     * Operation expired, may or may not have completed.\n     */\n    Code[Code[\"DeadlineExceeded\"] = 4] = \"DeadlineExceeded\";\n    /**\n     * Entity not found.\n     */\n    Code[Code[\"NotFound\"] = 5] = \"NotFound\";\n    /**\n     * Entity already exists.\n     */\n    Code[Code[\"AlreadyExists\"] = 6] = \"AlreadyExists\";\n    /**\n     * Operation not authorized.\n     */\n    Code[Code[\"PermissionDenied\"] = 7] = \"PermissionDenied\";\n    /**\n     * Quota exhausted.\n     */\n    Code[Code[\"ResourceExhausted\"] = 8] = \"ResourceExhausted\";\n    /**\n     * Argument invalid in current system state.\n     */\n    Code[Code[\"FailedPrecondition\"] = 9] = \"FailedPrecondition\";\n    /**\n     * Operation aborted.\n     */\n    Code[Code[\"Aborted\"] = 10] = \"Aborted\";\n    /**\n     * Out of bounds, use instead of FailedPrecondition.\n     */\n    Code[Code[\"OutOfRange\"] = 11] = \"OutOfRange\";\n    /**\n     * Operation not implemented or disabled.\n     */\n    Code[Code[\"Unimplemented\"] = 12] = \"Unimplemented\";\n    /**\n     * Internal error, reserved for \"serious errors\".\n     */\n    Code[Code[\"Internal\"] = 13] = \"Internal\";\n    /**\n     * Unavailable, client should back off and retry.\n     */\n    Code[Code[\"Unavailable\"] = 14] = \"Unavailable\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */\n    Code[Code[\"DataLoss\"] = 15] = \"DataLoss\";\n    /**\n     * Request isn't authenticated.\n     */\n    Code[Code[\"Unauthenticated\"] = 16] = \"Unauthenticated\";\n})(Code || (Code = {}));\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Code } from \"../code.js\";\n/**\n * codeToString returns the string representation of a Code.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeToString(value) {\n    const name = Code[value];\n    if (typeof name != \"string\") {\n        return value.toString();\n    }\n    return (name[0].toLowerCase() +\n        name.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c.toLowerCase()));\n}\nlet stringToCode;\n/**\n * codeFromString parses the string representation of a Code in snake_case.\n * For example, the string \"permission_denied\" parses into Code.PermissionDenied.\n *\n * If the given string cannot be parsed, the function returns undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeFromString(value) {\n    if (!stringToCode) {\n        stringToCode = {};\n        for (const value of Object.values(Code)) {\n            if (typeof value == \"string\") {\n                continue;\n            }\n            stringToCode[codeToString(value)] = value;\n        }\n    }\n    return stringToCode[value];\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Code } from \"./code.js\";\nimport { createRegistry, Message } from \"@bufbuild/protobuf\";\nimport { codeToString } from \"./protocol-connect/code-string.js\";\n/**\n * ConnectError captures four pieces of information: a Code, an error\n * message, an optional cause of the error, and an optional collection of\n * arbitrary Protobuf messages called  \"details\".\n *\n * Because developer tools typically show just the error message, we prefix\n * it with the status code, so that the most important information is always\n * visible immediately.\n *\n * Error details are wrapped with google.protobuf.Any on the wire, so that\n * a server or middleware can attach arbitrary data to an error. Use the\n * method findDetails() to retrieve the details.\n */\nexport class ConnectError extends Error {\n    /**\n     * Create a new ConnectError.\n     * If no code is provided, code \"unknown\" is used.\n     * Outgoing details are only relevant for the server side - a service may\n     * raise an error with details, and it is up to the protocol implementation\n     * to encode and send the details along with error.\n     */\n    constructor(message, code = Code.Unknown, metadata, outgoingDetails, cause) {\n        super(createMessage(message, code));\n        this.name = \"ConnectError\";\n        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.rawMessage = message;\n        this.code = code;\n        this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});\n        this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];\n        this.cause = cause;\n    }\n    /**\n     * Convert any value - typically a caught error into a ConnectError,\n     * following these rules:\n     * - If the value is already a ConnectError, return it as is.\n     * - If the value is an AbortError from the fetch API, return the message\n     *   of the AbortError with code Canceled.\n     * - For other Errors, return the error message with code Unknown by default.\n     * - For other values, return the values String representation as a message,\n     *   with the code Unknown by default.\n     * The original value will be used for the \"cause\" property for the new\n     * ConnectError.\n     */\n    static from(reason, code = Code.Unknown) {\n        if (reason instanceof ConnectError) {\n            return reason;\n        }\n        if (reason instanceof Error) {\n            if (reason.name == \"AbortError\") {\n                // Fetch requests can only be canceled with an AbortController.\n                // We detect that condition by looking at the name of the raised\n                // error object, and translate to the appropriate status code.\n                return new ConnectError(reason.message, Code.Canceled);\n            }\n            return new ConnectError(reason.message, code, undefined, undefined, reason);\n        }\n        return new ConnectError(String(reason), code, undefined, undefined, reason);\n    }\n    findDetails(typeOrRegistry) {\n        const registry = \"typeName\" in typeOrRegistry\n            ? {\n                findMessage: (typeName) => typeName === typeOrRegistry.typeName ? typeOrRegistry : undefined,\n            }\n            : typeOrRegistry;\n        const details = [];\n        for (const data of this.details) {\n            if (data instanceof Message) {\n                if (registry.findMessage(data.getType().typeName)) {\n                    details.push(data);\n                }\n                continue;\n            }\n            const type = registry.findMessage(data.type);\n            if (type) {\n                try {\n                    details.push(type.fromBinary(data.value));\n                }\n                catch (_) {\n                    // We silently give up if we are unable to parse the detail, because\n                    // that appears to be the least worst behavior.\n                    // It is very unlikely that a user surrounds a catch body handling the\n                    // error with another try-catch statement, and we do not want to\n                    // recommend doing so.\n                }\n            }\n        }\n        return details;\n    }\n}\n/**\n * @deprecated use ConnectError.findDetails() instead\n */\nexport function connectErrorDetails(error, typeOrRegistry, ...moreTypes) {\n    const types = \"typeName\" in typeOrRegistry ? [typeOrRegistry, ...moreTypes] : [];\n    const registry = \"typeName\" in typeOrRegistry ? createRegistry(...types) : typeOrRegistry;\n    const details = [];\n    for (const data of error.details) {\n        if (data instanceof Message) {\n            if (registry.findMessage(data.getType().typeName)) {\n                details.push(data);\n            }\n            continue;\n        }\n        const type = registry.findMessage(data.type);\n        if (type) {\n            try {\n                details.push(type.fromBinary(data.value));\n            }\n            catch (_) {\n                // We silently give up if we are unable to parse the detail, because\n                // that appears to be the least worst behavior.\n                // It is very unlikely that a user surrounds a catch body handling the\n                // error with another try-catch statement, and we do not want to\n                // recommend doing so.\n            }\n        }\n    }\n    return details;\n}\n/**\n * Create an error message, prefixing the given code.\n */\nfunction createMessage(message, code) {\n    return message.length\n        ? `[${codeToString(code)}] ${message}`\n        : `[${codeToString(code)}]`;\n}\n/**\n * Convert any value - typically a caught error into a ConnectError,\n * following these rules:\n * - If the value is already a ConnectError, return it as is.\n * - If the value is an AbortError from the fetch API, return the message\n *   of the AbortError with code Canceled.\n * - For other Errors, return the error message with code Unknown by default.\n * - For other values, return the values String representation as a message,\n *   with the code Unknown by default.\n *\n * @deprecated use ConnectError.from() instead\n */\nexport function connectErrorFromReason(reason, code = Code.Unknown) {\n    if (reason instanceof ConnectError) {\n        return reason;\n    }\n    if (reason instanceof Error) {\n        if (reason.name == \"AbortError\") {\n            // Fetch requests can only be canceled with an AbortController.\n            // We detect that condition by looking at the name of the raised\n            // error object, and translate to the appropriate status code.\n            return new ConnectError(reason.message, Code.Canceled);\n        }\n        return new ConnectError(reason.message, code);\n    }\n    return new ConnectError(String(reason), code);\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message, protoBase64 } from \"@bufbuild/protobuf\";\nimport { ConnectError } from \"./connect-error.js\";\nimport { Code } from \"./code.js\";\n/**\n * Encode a single binary header value according to the Connect\n * and gRPC specifications.\n *\n * This function accepts raw binary data from a buffer, a string\n * with UTF-8 text, or a protobuf message. It encodes the input\n * with unpadded base64 and returns a string that can be used for\n * a header whose name ends with `-bin`.\n */\nexport function encodeBinaryHeader(value) {\n    let bytes;\n    if (value instanceof Message) {\n        bytes = value.toBinary();\n    }\n    else if (typeof value == \"string\") {\n        bytes = new TextEncoder().encode(value);\n    }\n    else {\n        bytes = value instanceof Uint8Array ? value : new Uint8Array(value);\n    }\n    return protoBase64.enc(bytes).replace(/=+$/, \"\");\n}\nexport function decodeBinaryHeader(value, type, options) {\n    try {\n        const bytes = protoBase64.dec(value);\n        if (type) {\n            return type.fromBinary(bytes, options);\n        }\n        return bytes;\n    }\n    catch (e) {\n        throw ConnectError.from(e, Code.DataLoss);\n    }\n}\n/**\n * Merge two or more Headers objects by appending all fields from\n * all inputs to a new Headers object.\n */\nexport function appendHeaders(...headers) {\n    const h = new Headers();\n    for (const e of headers) {\n        e.forEach((value, key) => {\n            h.append(key, value);\n        });\n    }\n    return h;\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create any client for the given service.\n *\n * The given createMethod function is called for each method definition\n * of the service. The function it returns is added to the client object\n * as a method.\n */\nexport function makeAnyClient(service, createMethod) {\n    const client = {};\n    for (const [localName, methodInfo] of Object.entries(service.methods)) {\n        const method = createMethod(Object.assign(Object.assign({}, methodInfo), { localName,\n            service }));\n        if (method != null) {\n            client[localName] = method;\n        }\n    }\n    return client;\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\nimport { compressedFlag } from \"./compression.js\";\n/**\n * Create a WHATWG ReadableStream of enveloped messages from a ReadableStream\n * of bytes.\n *\n * Ideally, this would simply be a TransformStream, but ReadableStream.pipeThrough\n * does not have the necessary availability at this time.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createEnvelopeReadableStream(stream) {\n    let reader;\n    let buffer = new Uint8Array(0);\n    function append(chunk) {\n        const n = new Uint8Array(buffer.length + chunk.length);\n        n.set(buffer);\n        n.set(chunk, buffer.length);\n        buffer = n;\n    }\n    return new ReadableStream({\n        start() {\n            reader = stream.getReader();\n        },\n        async pull(controller) {\n            let header = undefined;\n            for (;;) {\n                if (header === undefined && buffer.byteLength >= 5) {\n                    let length = 0;\n                    for (let i = 1; i < 5; i++) {\n                        length = (length << 8) + buffer[i];\n                    }\n                    header = { flags: buffer[0], length };\n                }\n                if (header !== undefined && buffer.byteLength >= header.length + 5) {\n                    break;\n                }\n                const result = await reader.read();\n                if (result.done) {\n                    break;\n                }\n                append(result.value);\n            }\n            if (header === undefined) {\n                if (buffer.byteLength == 0) {\n                    controller.close();\n                    return;\n                }\n                controller.error(new ConnectError(\"premature end of stream\", Code.DataLoss));\n                return;\n            }\n            const data = buffer.subarray(5, 5 + header.length);\n            buffer = buffer.subarray(5 + header.length);\n            controller.enqueue({\n                flags: header.flags,\n                data,\n            });\n        },\n    });\n}\n/**\n * Compress an EnvelopedMessage.\n *\n * Raises Internal if an enveloped message is already compressed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function envelopeCompress(envelope, compression, compressMinBytes) {\n    let { flags, data } = envelope;\n    if ((flags & compressedFlag) === compressedFlag) {\n        throw new ConnectError(\"invalid envelope, already compressed\", Code.Internal);\n    }\n    if (compression && data.byteLength >= compressMinBytes) {\n        data = await compression.compress(data);\n        flags = flags | compressedFlag;\n    }\n    return { data, flags };\n}\n/**\n * Decompress an EnvelopedMessage.\n *\n * Raises InvalidArgument if an envelope is compressed, but compression is null.\n *\n * Relies on the provided Compression to raise ResourceExhausted if the\n * *decompressed* message size is larger than readMaxBytes. If the envelope is\n * not compressed, readMaxBytes is not honored.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function envelopeDecompress(envelope, compression, readMaxBytes) {\n    let { flags, data } = envelope;\n    if ((flags & compressedFlag) === compressedFlag) {\n        if (!compression) {\n            throw new ConnectError(\"received compressed envelope, but do not know how to decompress\", Code.InvalidArgument);\n        }\n        data = await compression.decompress(data, readMaxBytes);\n        flags = flags ^ compressedFlag;\n    }\n    return { data, flags };\n}\n/**\n * Encode a single enveloped message.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function encodeEnvelope(flags, data) {\n    const bytes = new Uint8Array(data.length + 5);\n    bytes.set(data, 5);\n    const v = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    v.setUint8(0, flags); // first byte is flags\n    v.setUint32(1, data.length); // 4 bytes message length\n    return bytes;\n}\n/**\n * Encode a set of enveloped messages.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function encodeEnvelopes(...envelopes) {\n    const len = envelopes.reduce((previousValue, currentValue) => previousValue + currentValue.data.length + 5, 0);\n    const bytes = new Uint8Array(len);\n    const v = new DataView(bytes.buffer);\n    let offset = 0;\n    for (const e of envelopes) {\n        v.setUint8(offset, e.flags); // first byte is flags\n        v.setUint32(offset + 1, e.data.length); // 4 bytes message length\n        bytes.set(e.data, offset + 5);\n        offset += e.data.length + 5;\n    }\n    return bytes;\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nvar __asyncDelegator = (this && this.__asyncDelegator) || function (o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n};\nimport { Code } from \"../code.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { encodeEnvelope, envelopeCompress, envelopeDecompress, } from \"./envelope.js\";\nimport { assertReadMaxBytes } from \"./limit-io.js\";\nexport function pipeTo(source, ...rest) {\n    const [transforms, sink, opt] = pickTransformsAndSink(rest);\n    let iterable = source;\n    let abortable;\n    if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n        iterable = abortable = makeIterableAbortable(iterable);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    iterable = pipe(iterable, ...transforms, { propagateDownStreamError: false });\n    return sink(iterable).catch((reason) => {\n        if (abortable) {\n            return abortable.abort(reason).then(() => Promise.reject(reason));\n        }\n        return Promise.reject(reason);\n    });\n}\n// pick transforms, the sink, and options from the pipeTo() rest parameter\nfunction pickTransformsAndSink(rest) {\n    let opt;\n    if (typeof rest[rest.length - 1] != \"function\") {\n        opt = rest.pop();\n    }\n    const sink = rest.pop();\n    return [rest, sink, opt];\n}\n/**\n * Creates an AsyncIterableSink that concatenates all elements from the input.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function sinkAll() {\n    return async function (iterable) {\n        var _a, e_1, _b, _c;\n        const all = [];\n        try {\n            for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), _a = iterable_1_1.done, !_a; _d = true) {\n                _c = iterable_1_1.value;\n                _d = false;\n                const chunk = _c;\n                all.push(chunk);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (!_d && !_a && (_b = iterable_1.return)) await _b.call(iterable_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return all;\n    };\n}\n/**\n * Creates an AsyncIterableSink that concatenates all chunks from the input into\n * a single Uint8Array.\n *\n * The iterable raises an error if the more than readMaxBytes are read.\n *\n * An optional length hint can be provided to optimize allocation and validation.\n * If more or less bytes are present in the source that the length hint indicates,\n * and error is raised.\n * If the length hint is larger than readMaxBytes, an error is raised.\n * If the length hint is not a positive integer, it is ignored.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function sinkAllBytes(readMaxBytes, lengthHint) {\n    return async function (iterable) {\n        return await readAllBytes(iterable, readMaxBytes, lengthHint);\n    };\n}\nexport function pipe(source, ...rest) {\n    var _a, _b;\n    return __asyncGenerator(this, arguments, function* pipe_1() {\n        const [transforms, opt] = pickTransforms(rest);\n        let abortable;\n        let iterable = source;\n        if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n            iterable = abortable = makeIterableAbortable(iterable);\n        }\n        for (const t of transforms) {\n            iterable = t(iterable);\n        }\n        const it = iterable[Symbol.asyncIterator]();\n        try {\n            for (;;) {\n                const r = yield __await(it.next());\n                if (r.done === true) {\n                    break;\n                }\n                if (!abortable) {\n                    yield yield __await(r.value);\n                    continue;\n                }\n                try {\n                    yield yield __await(r.value);\n                }\n                catch (e) {\n                    yield __await(abortable.abort(e)); // propagate downstream error to the source\n                    throw e;\n                }\n            }\n        }\n        finally {\n            if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n                // Call return on the source iterable to indicate\n                // that we will no longer consume it and it should\n                // cleanup any allocated resources.\n                (_b = (_a = source[Symbol.asyncIterator]()).return) === null || _b === void 0 ? void 0 : _b.call(_a).catch(() => {\n                    // return returns a promise, which we don't care about.\n                    //\n                    // Uncaught promises are thrown at sometime/somewhere by the event loop,\n                    // this is to ensure error is caught and ignored.\n                });\n            }\n        }\n    });\n}\nfunction pickTransforms(rest) {\n    let opt;\n    if (typeof rest[rest.length - 1] != \"function\") {\n        opt = rest.pop();\n    }\n    return [rest, opt];\n}\n/**\n * Creates an AsyncIterableTransform that catches any error from the input, and\n * passes it to the given catchError function.\n *\n * The catchError function may return a final value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformCatch(catchError) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            // we deliberate avoid a for-await loop because we only want to catch upstream\n            // errors, not downstream errors (yield).\n            const it = iterable[Symbol.asyncIterator]();\n            for (;;) {\n                let r;\n                try {\n                    r = yield __await(it.next());\n                }\n                catch (e) {\n                    const caught = yield __await(catchError(e));\n                    if (caught !== undefined) {\n                        yield yield __await(caught);\n                    }\n                    break;\n                }\n                if (r.done === true) {\n                    break;\n                }\n                yield yield __await(r.value);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that catches any error from the input, and\n * passes it to the given function. Unlike transformCatch(), the given function\n * is also called when no error is raised.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformCatchFinally(catchFinally) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            // we deliberate avoid a for-await loop because we only want to catch upstream\n            // errors, not downstream errors (yield).\n            let err;\n            const it = iterable[Symbol.asyncIterator]();\n            for (;;) {\n                let r;\n                try {\n                    r = yield __await(it.next());\n                }\n                catch (e) {\n                    err = e;\n                    break;\n                }\n                if (r.done === true) {\n                    break;\n                }\n                yield yield __await(r.value);\n            }\n            const caught = yield __await(catchFinally(err));\n            if (caught !== undefined) {\n                yield yield __await(caught);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that appends a value.\n *\n * The element to append is provided by a function. If the function returns\n * undefined, no element is appended.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformAppend(provide) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_2, _b, _c;\n            try {\n                for (var _d = true, iterable_2 = __asyncValues(iterable), iterable_2_1; iterable_2_1 = yield __await(iterable_2.next()), _a = iterable_2_1.done, !_a; _d = true) {\n                    _c = iterable_2_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    yield yield __await(chunk);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_2.return)) yield __await(_b.call(iterable_2));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            const append = yield __await(provide());\n            if (append !== undefined) {\n                yield yield __await(append);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that prepends an element.\n *\n * The element to prepend is provided by a function. If the function returns\n * undefined, no element is appended.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformPrepend(provide) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_3, _b, _c;\n            const prepend = yield __await(provide());\n            if (prepend !== undefined) {\n                yield yield __await(prepend);\n            }\n            try {\n                for (var _d = true, iterable_3 = __asyncValues(iterable), iterable_3_1; iterable_3_1 = yield __await(iterable_3.next()), _a = iterable_3_1.done, !_a; _d = true) {\n                    _c = iterable_3_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    yield yield __await(chunk);\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_3.return)) yield __await(_b.call(iterable_3));\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that reads all bytes from the input, and\n * concatenates them to a single Uint8Array.\n *\n * The iterable raises an error if the more than readMaxBytes are read.\n *\n * An optional length hint can be provided to optimize allocation and validation.\n * If more or less bytes are present in the source that the length hint indicates,\n * and error is raised.\n * If the length hint is larger than readMaxBytes, an error is raised.\n * If the length hint is not a positive integer, it is ignored.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformReadAllBytes(readMaxBytes, lengthHint) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            yield yield __await(yield __await(readAllBytes(iterable, readMaxBytes, lengthHint)));\n        });\n    };\n}\nexport function transformSerializeEnvelope(serialization, endStreamFlag, endSerialization) {\n    if (endStreamFlag === undefined || endSerialization === undefined) {\n        return function (iterable) {\n            return __asyncGenerator(this, arguments, function* () {\n                var _a, e_4, _b, _c;\n                try {\n                    for (var _d = true, iterable_4 = __asyncValues(iterable), iterable_4_1; iterable_4_1 = yield __await(iterable_4.next()), _a = iterable_4_1.done, !_a; _d = true) {\n                        _c = iterable_4_1.value;\n                        _d = false;\n                        const chunk = _c;\n                        const data = serialization.serialize(chunk);\n                        yield yield __await({ flags: 0, data });\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = iterable_4.return)) yield __await(_b.call(iterable_4));\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            });\n        };\n    }\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_5, _b, _c;\n            try {\n                for (var _d = true, iterable_5 = __asyncValues(iterable), iterable_5_1; iterable_5_1 = yield __await(iterable_5.next()), _a = iterable_5_1.done, !_a; _d = true) {\n                    _c = iterable_5_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    let data;\n                    let flags = 0;\n                    if (chunk.end) {\n                        flags = flags | endStreamFlag;\n                        data = endSerialization.serialize(chunk.value);\n                    }\n                    else {\n                        data = serialization.serialize(chunk.value);\n                    }\n                    yield yield __await({ flags, data });\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_5.return)) yield __await(_b.call(iterable_5));\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n        });\n    };\n}\nexport function transformParseEnvelope(serialization, endStreamFlag, endSerialization) {\n    // code path always yields ParsedEnvelopedMessage<T, E>\n    if (endSerialization && endStreamFlag !== undefined) {\n        return function (iterable) {\n            return __asyncGenerator(this, arguments, function* () {\n                var _a, e_6, _b, _c;\n                try {\n                    for (var _d = true, iterable_6 = __asyncValues(iterable), iterable_6_1; iterable_6_1 = yield __await(iterable_6.next()), _a = iterable_6_1.done, !_a; _d = true) {\n                        _c = iterable_6_1.value;\n                        _d = false;\n                        const { flags, data } = _c;\n                        if ((flags & endStreamFlag) === endStreamFlag) {\n                            yield yield __await({ value: endSerialization.parse(data), end: true });\n                        }\n                        else {\n                            yield yield __await({ value: serialization.parse(data), end: false });\n                        }\n                    }\n                }\n                catch (e_6_1) { e_6 = { error: e_6_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = iterable_6.return)) yield __await(_b.call(iterable_6));\n                    }\n                    finally { if (e_6) throw e_6.error; }\n                }\n            });\n        };\n    }\n    // code path always yields T\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_7, _b, _c;\n            try {\n                for (var _d = true, iterable_7 = __asyncValues(iterable), iterable_7_1; iterable_7_1 = yield __await(iterable_7.next()), _a = iterable_7_1.done, !_a; _d = true) {\n                    _c = iterable_7_1.value;\n                    _d = false;\n                    const { flags, data } = _c;\n                    if (endStreamFlag !== undefined &&\n                        (flags & endStreamFlag) === endStreamFlag) {\n                        if (endSerialization === null) {\n                            throw new ConnectError(\"unexpected end flag\", Code.InvalidArgument);\n                        }\n                        // skips end-of-stream envelope\n                        continue;\n                    }\n                    yield yield __await(serialization.parse(data));\n                }\n            }\n            catch (e_7_1) { e_7 = { error: e_7_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_7.return)) yield __await(_b.call(iterable_7));\n                }\n                finally { if (e_7) throw e_7.error; }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that takes enveloped messages as a source,\n * and compresses them if they are larger than compressMinBytes.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformCompressEnvelope(compression, compressMinBytes) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_8, _b, _c;\n            try {\n                for (var _d = true, iterable_8 = __asyncValues(iterable), iterable_8_1; iterable_8_1 = yield __await(iterable_8.next()), _a = iterable_8_1.done, !_a; _d = true) {\n                    _c = iterable_8_1.value;\n                    _d = false;\n                    const env = _c;\n                    yield yield __await(yield __await(envelopeCompress(env, compression, compressMinBytes)));\n                }\n            }\n            catch (e_8_1) { e_8 = { error: e_8_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_8.return)) yield __await(_b.call(iterable_8));\n                }\n                finally { if (e_8) throw e_8.error; }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that takes enveloped messages as a source,\n * and decompresses them using the given compression.\n *\n * The iterable raises an error if the decompressed payload of an enveloped\n * message is larger than readMaxBytes, or if no compression is provided.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformDecompressEnvelope(compression, readMaxBytes) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_9, _b, _c;\n            try {\n                for (var _d = true, iterable_9 = __asyncValues(iterable), iterable_9_1; iterable_9_1 = yield __await(iterable_9.next()), _a = iterable_9_1.done, !_a; _d = true) {\n                    _c = iterable_9_1.value;\n                    _d = false;\n                    const env = _c;\n                    yield yield __await(yield __await(envelopeDecompress(env, compression, readMaxBytes)));\n                }\n            }\n            catch (e_9_1) { e_9 = { error: e_9_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_9.return)) yield __await(_b.call(iterable_9));\n                }\n                finally { if (e_9) throw e_9.error; }\n            }\n        });\n    };\n}\n/**\n * Create an AsyncIterableTransform that takes enveloped messages as a source,\n * and joins them into a stream of raw bytes.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformJoinEnvelopes() {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_10, _b, _c;\n            try {\n                for (var _d = true, iterable_10 = __asyncValues(iterable), iterable_10_1; iterable_10_1 = yield __await(iterable_10.next()), _a = iterable_10_1.done, !_a; _d = true) {\n                    _c = iterable_10_1.value;\n                    _d = false;\n                    const { flags, data } = _c;\n                    yield yield __await(encodeEnvelope(flags, data));\n                }\n            }\n            catch (e_10_1) { e_10 = { error: e_10_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_10.return)) yield __await(_b.call(iterable_10));\n                }\n                finally { if (e_10) throw e_10.error; }\n            }\n        });\n    };\n}\n/**\n * Create an AsyncIterableTransform that takes raw bytes as a source, and splits\n * them into enveloped messages.\n *\n * The iterable raises an error\n * - if the payload of an enveloped message is larger than readMaxBytes,\n * - if the stream ended before an enveloped message fully arrived,\n * - or if the stream ended with extraneous data.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformSplitEnvelope(readMaxBytes) {\n    // append chunk to buffer, returning updated buffer\n    function append(buffer, chunk) {\n        const n = new Uint8Array(buffer.byteLength + chunk.byteLength);\n        n.set(buffer);\n        n.set(chunk, buffer.length);\n        return n;\n    }\n    // tuple 0: envelope, or undefined if incomplete\n    // tuple 1: remainder of the buffer\n    function shiftEnvelope(buffer, header) {\n        if (buffer.byteLength < 5 + header.length) {\n            return [undefined, buffer];\n        }\n        return [\n            { flags: header.flags, data: buffer.subarray(5, 5 + header.length) },\n            buffer.subarray(5 + header.length),\n        ];\n    }\n    // undefined: header is incomplete\n    function peekHeader(buffer) {\n        if (buffer.byteLength < 5) {\n            return undefined;\n        }\n        const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n        const length = view.getUint32(1); // 4 bytes message length\n        const flags = view.getUint8(0); // first byte is flags\n        return { length, flags };\n    }\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_11, _b, _c;\n            let buffer = new Uint8Array(0);\n            try {\n                for (var _d = true, iterable_11 = __asyncValues(iterable), iterable_11_1; iterable_11_1 = yield __await(iterable_11.next()), _a = iterable_11_1.done, !_a; _d = true) {\n                    _c = iterable_11_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    buffer = append(buffer, chunk);\n                    for (;;) {\n                        const header = peekHeader(buffer);\n                        if (!header) {\n                            break;\n                        }\n                        assertReadMaxBytes(readMaxBytes, header.length, true);\n                        let env;\n                        [env, buffer] = shiftEnvelope(buffer, header);\n                        if (!env) {\n                            break;\n                        }\n                        yield yield __await(env);\n                    }\n                }\n            }\n            catch (e_11_1) { e_11 = { error: e_11_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_11.return)) yield __await(_b.call(iterable_11));\n                }\n                finally { if (e_11) throw e_11.error; }\n            }\n            if (buffer.byteLength > 0) {\n                const header = peekHeader(buffer);\n                let message = \"protocol error: incomplete envelope\";\n                if (header) {\n                    message = `protocol error: promised ${header.length} bytes in enveloped message, got ${buffer.byteLength - 5} bytes`;\n                }\n                throw new ConnectError(message, Code.InvalidArgument);\n            }\n        });\n    };\n}\n/**\n * Reads all bytes from the source, and concatenates them to a single Uint8Array.\n *\n * Raises an error if:\n * - more than readMaxBytes are read\n * - lengthHint is a positive integer, but larger than readMaxBytes\n * - lengthHint is a positive integer, and the source contains more or less bytes\n *   than promised\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function readAllBytes(iterable, readMaxBytes, lengthHint) {\n    var _a, e_12, _b, _c, _d, e_13, _e, _f;\n    const [ok, hint] = parseLengthHint(lengthHint);\n    if (ok) {\n        if (hint > readMaxBytes) {\n            assertReadMaxBytes(readMaxBytes, hint, true);\n        }\n        const buffer = new Uint8Array(hint);\n        let offset = 0;\n        try {\n            for (var _g = true, iterable_12 = __asyncValues(iterable), iterable_12_1; iterable_12_1 = await iterable_12.next(), _a = iterable_12_1.done, !_a; _g = true) {\n                _c = iterable_12_1.value;\n                _g = false;\n                const chunk = _c;\n                if (offset + chunk.byteLength > hint) {\n                    throw new ConnectError(`protocol error: promised ${hint} bytes, received ${offset + chunk.byteLength}`, Code.InvalidArgument);\n                }\n                buffer.set(chunk, offset);\n                offset += chunk.byteLength;\n            }\n        }\n        catch (e_12_1) { e_12 = { error: e_12_1 }; }\n        finally {\n            try {\n                if (!_g && !_a && (_b = iterable_12.return)) await _b.call(iterable_12);\n            }\n            finally { if (e_12) throw e_12.error; }\n        }\n        if (offset < hint) {\n            throw new ConnectError(`protocol error: promised ${hint} bytes, received ${offset}`, Code.InvalidArgument);\n        }\n        return buffer;\n    }\n    const chunks = [];\n    let count = 0;\n    try {\n        for (var _h = true, iterable_13 = __asyncValues(iterable), iterable_13_1; iterable_13_1 = await iterable_13.next(), _d = iterable_13_1.done, !_d; _h = true) {\n            _f = iterable_13_1.value;\n            _h = false;\n            const chunk = _f;\n            count += chunk.byteLength;\n            assertReadMaxBytes(readMaxBytes, count);\n            chunks.push(chunk);\n        }\n    }\n    catch (e_13_1) { e_13 = { error: e_13_1 }; }\n    finally {\n        try {\n            if (!_h && !_d && (_e = iterable_13.return)) await _e.call(iterable_13);\n        }\n        finally { if (e_13) throw e_13.error; }\n    }\n    const all = new Uint8Array(count);\n    let offset = 0;\n    for (let chunk = chunks.shift(); chunk; chunk = chunks.shift()) {\n        all.set(chunk, offset);\n        offset += chunk.byteLength;\n    }\n    return all;\n}\n// parse the lengthHint argument of readAllBytes()\nfunction parseLengthHint(lengthHint) {\n    if (lengthHint === undefined || lengthHint === null) {\n        return [false, 0];\n    }\n    const n = typeof lengthHint == \"string\" ? parseInt(lengthHint, 10) : lengthHint;\n    if (!Number.isSafeInteger(n) || n < 0) {\n        return [false, n];\n    }\n    return [true, n];\n}\n/**\n * Wait for the first element of an iterable without modifying the iterable.\n * This consumes the first element, but pushes it back on the stack.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function untilFirst(iterable) {\n    const it = iterable[Symbol.asyncIterator]();\n    let first = await it.next();\n    return {\n        [Symbol.asyncIterator]() {\n            const w = {\n                async next() {\n                    if (first !== null) {\n                        const n = first;\n                        first = null;\n                        return n;\n                    }\n                    return await it.next();\n                },\n            };\n            if (it.throw !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- can't handle mutated object sensibly\n                w.throw = (e) => it.throw(e);\n            }\n            if (it.return !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-explicit-any -- can't handle mutated object sensibly\n                w.return = (value) => it.return(value);\n            }\n            return w;\n        },\n    };\n}\n/**\n * Wrap the given iterable and return an iterable with an abort() method.\n *\n * This function exists purely for convenience. Where one would typically have\n * to access the iterator directly, advance through all elements, and call\n * AsyncIterator.throw() to notify the upstream iterable, this function allows\n * to use convenient for-await loops and still notify the upstream iterable:\n *\n * ```ts\n * const abortable = makeIterableAbortable(iterable);\n * for await (const ele of abortable) {\n *   await abortable.abort(\"ERR\");\n * }\n * ```\n * There are a couple of limitations of this function:\n * - the given async iterable must implement throw\n * - the async iterable cannot be re-use\n * - if source catches errors and yields values for them, they are ignored, and\n *   the source may still dangle\n *\n * There are four possible ways an async function* can handle yield errors:\n * 1. don't catch errors at all - Abortable.abort() will resolve \"rethrown\"\n * 2. catch errors and rethrow - Abortable.abort() will resolve \"rethrown\"\n * 3. catch errors and return - Abortable.abort() will resolve \"completed\"\n * 4. catch errors and yield a value - Abortable.abort() will resolve \"caught\"\n *\n * Note that catching errors and yielding a value is problematic, and it should\n * be documented that this may leave the source in a dangling state.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function makeIterableAbortable(iterable) {\n    const innerCandidate = iterable[Symbol.asyncIterator]();\n    if (innerCandidate.throw === undefined) {\n        throw new Error(\"AsyncIterable does not implement throw\");\n    }\n    const inner = innerCandidate;\n    let aborted;\n    let resultPromise;\n    let it = {\n        next() {\n            resultPromise = inner.next().finally(() => {\n                resultPromise = undefined;\n            });\n            return resultPromise;\n        },\n        throw(e) {\n            return inner.throw(e);\n        },\n    };\n    if (innerCandidate.return !== undefined) {\n        it = Object.assign(Object.assign({}, it), { return(value) {\n                return inner.return(value);\n            } });\n    }\n    let used = false;\n    return {\n        abort(reason) {\n            if (aborted) {\n                return aborted.state;\n            }\n            const f = () => {\n                return inner.throw(reason).then((r) => (r.done === true ? \"completed\" : \"caught\"), () => \"rethrown\");\n            };\n            if (resultPromise) {\n                aborted = { reason, state: resultPromise.then(f, f) };\n                return aborted.state;\n            }\n            aborted = { reason, state: f() };\n            return aborted.state;\n        },\n        [Symbol.asyncIterator]() {\n            if (used) {\n                throw new Error(\"AsyncIterable cannot be re-used\");\n            }\n            used = true;\n            return it;\n        },\n    };\n}\n/**\n * Create a new WritableIterable.\n */\nexport function createWritableIterable() {\n    // We start with two queues to capture the read and write attempts.\n    //\n    // The writes and reads each check of their counterpart is\n    // already available and either interact/add themselves to the queue.\n    const readQueue = [];\n    const writeQueue = [];\n    let err = undefined;\n    let nextResolve;\n    let nextReject;\n    let nextPromise = new Promise((resolve, reject) => {\n        nextResolve = resolve;\n        nextReject = reject;\n    });\n    let closed = false;\n    // drain the readQueue in case of error/writer is closed by sending a\n    // done result.\n    function drain() {\n        for (const next of readQueue.splice(0, readQueue.length)) {\n            next({ done: true, value: undefined });\n        }\n    }\n    return {\n        close() {\n            closed = true;\n            drain();\n        },\n        async write(payload) {\n            if (closed) {\n                throw err !== null && err !== void 0 ? err : new Error(\"cannot write, WritableIterable already closed\");\n            }\n            const read = readQueue.shift();\n            if (read === undefined) {\n                // We didn't find a pending read so we add the payload to the write queue.\n                writeQueue.push(payload);\n            }\n            else {\n                // We found a pending read so we respond with the payload.\n                read({ done: false, value: payload });\n                if (readQueue.length > 0) {\n                    // If there are more in the read queue we can mark the write as complete.\n                    // as the error reporting is not guaranteed to be sequential and therefore cannot\n                    // to linked to a specific write.\n                    return;\n                }\n            }\n            // We await the next call for as many times as there are items in the queue + 1\n            //\n            // If there are no items in the write queue that means write happened and we just have\n            // to wait for one more call likewise if we are the nth write in the queue we\n            // have to wait for n writes to complete and one more.\n            const limit = writeQueue.length + 1;\n            for (let i = 0; i < limit; i++) {\n                await nextPromise;\n            }\n        },\n        [Symbol.asyncIterator]() {\n            return {\n                next() {\n                    // Resolve the nextPromise to indicate\n                    // pending writes that a read attempt has been made\n                    // after their write.\n                    //\n                    // We also need to reset the promise for future writes.\n                    nextResolve();\n                    nextPromise = new Promise((resolve, reject) => {\n                        nextResolve = resolve;\n                        nextReject = reject;\n                    });\n                    const write = writeQueue.shift();\n                    if (write !== undefined) {\n                        // We found a pending write so response with the payload.\n                        return Promise.resolve({ done: false, value: write });\n                    }\n                    if (closed) {\n                        return Promise.resolve({ done: true, value: undefined });\n                    }\n                    // We return a promise immediately that is either resolved/rejected\n                    // as writes happen.\n                    let readResolve;\n                    const readPromise = new Promise((resolve) => (readResolve = resolve));\n                    readQueue.push(readResolve); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                    return readPromise;\n                },\n                throw(throwErr) {\n                    err = throwErr;\n                    closed = true;\n                    writeQueue.splice(0, writeQueue.length);\n                    nextPromise.catch(() => {\n                        // To make sure that the nextPromise is always resolved.\n                    });\n                    // This will reject all pending writes.\n                    nextReject(err);\n                    drain();\n                    return Promise.resolve({ done: true, value: undefined });\n                },\n                return() {\n                    closed = true;\n                    writeQueue.splice(0, writeQueue.length);\n                    // Resolve once for the write awaiting confirmation.\n                    nextResolve();\n                    // Reject all future writes.\n                    nextPromise = Promise.reject(new Error(\"cannot write, consumer called return\"));\n                    nextPromise.catch(() => {\n                        // To make sure that the nextPromise is always resolved.\n                    });\n                    drain();\n                    return Promise.resolve({ done: true, value: undefined });\n                },\n            };\n        },\n    };\n}\n/**\n * Create an asynchronous iterable from an array.\n *\n * @private Internal code, does not follow semantic versioning.\n */\n// eslint-disable-next-line @typescript-eslint/require-await\nexport function createAsyncIterable(items) {\n    return __asyncGenerator(this, arguments, function* createAsyncIterable_1() {\n        yield __await(yield* __asyncDelegator(__asyncValues(items)));\n    });\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncDelegator = (this && this.__asyncDelegator) || function (o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n};\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { Message, MethodKind } from \"@bufbuild/protobuf\";\nimport { makeAnyClient } from \"./any-client.js\";\nimport { ConnectError } from \"./connect-error.js\";\nimport { Code } from \"./code.js\";\nimport { createAsyncIterable } from \"./protocol/async-iterable.js\";\n/**\n * Create a PromiseClient for the given service, invoking RPCs through the\n * given transport.\n */\nexport function createPromiseClient(service, transport) {\n    return makeAnyClient(service, (method) => {\n        switch (method.kind) {\n            case MethodKind.Unary:\n                return createUnaryFn(transport, service, method);\n            case MethodKind.ServerStreaming:\n                return createServerStreamingFn(transport, service, method);\n            case MethodKind.ClientStreaming:\n                return createClientStreamingFn(transport, service, method);\n            case MethodKind.BiDiStreaming:\n                return createBiDiStreamingFn(transport, service, method);\n            default:\n                return null;\n        }\n    });\n}\nfunction createUnaryFn(transport, service, method) {\n    return async function (input, options) {\n        var _a, _b;\n        const response = await transport.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input);\n        (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        return response.message;\n    };\n}\nexport function createServerStreamingFn(transport, service, method) {\n    return function (input, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, createAsyncIterable([input])), options);\n    };\n}\nexport function createClientStreamingFn(transport, service, method) {\n    return async function (request, options) {\n        var _a, e_1, _b, _c;\n        var _d, _e;\n        const response = await transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request);\n        (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);\n        let singleMessage;\n        try {\n            for (var _f = true, _g = __asyncValues(response.message), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {\n                _c = _h.value;\n                _f = false;\n                const message = _c;\n                singleMessage = message;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (!_f && !_a && (_b = _g.return)) await _b.call(_g);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (!singleMessage) {\n            throw new ConnectError(\"protocol error: missing response message\", Code.Internal);\n        }\n        (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);\n        return singleMessage;\n    };\n}\nexport function createBiDiStreamingFn(transport, service, method) {\n    return function (request, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request), options);\n    };\n}\nfunction handleStreamResponse(stream, options) {\n    const it = (function () {\n        var _a, _b;\n        return __asyncGenerator(this, arguments, function* () {\n            const response = yield __await(stream);\n            (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n            yield __await(yield* __asyncDelegator(__asyncValues(response.message)));\n            (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        });\n    })()[Symbol.asyncIterator]();\n    // Create a new iterable to omit throw/return.\n    return {\n        [Symbol.asyncIterator]: () => ({\n            next: () => it.next(),\n        }),\n    };\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\n/**\n * Create an AbortController that is automatically aborted if one of the given\n * signals is aborted.\n *\n * For convenience, the linked AbortSignals can be undefined.\n *\n * If the controller or any of the signals is aborted, all event listeners are\n * removed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createLinkedAbortController(...signals) {\n    const controller = new AbortController();\n    const sa = signals\n        .filter((s) => s !== undefined)\n        .concat(controller.signal);\n    for (const signal of sa) {\n        if (signal.aborted) {\n            onAbort.apply(signal);\n            break;\n        }\n        signal.addEventListener(\"abort\", onAbort);\n    }\n    function onAbort() {\n        if (!controller.signal.aborted) {\n            controller.abort(getAbortSignalReason(this));\n        }\n        for (const signal of sa) {\n            signal.removeEventListener(\"abort\", onAbort);\n        }\n    }\n    return controller;\n}\n/**\n * Create a deadline signal. The returned object contains an AbortSignal, but\n * also a cleanup function to stop the timer, which must be called once the\n * calling code is no longer interested in the signal.\n *\n * Ideally, we would simply use AbortSignal.timeout(), but it is not widely\n * available yet.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createDeadlineSignal(timeoutMs) {\n    const controller = new AbortController();\n    const listener = () => {\n        controller.abort(new ConnectError(\"the operation timed out\", Code.DeadlineExceeded));\n    };\n    let timeoutId;\n    if (timeoutMs !== undefined) {\n        if (timeoutMs <= 0)\n            listener();\n        else\n            timeoutId = setTimeout(listener, timeoutMs);\n    }\n    return {\n        signal: controller.signal,\n        cleanup: () => clearTimeout(timeoutId),\n    };\n}\n/**\n * Returns the reason why an AbortSignal was aborted. Returns undefined if the\n * signal has not been aborted.\n *\n * The property AbortSignal.reason is not widely available. This function\n * returns an AbortError if the signal is aborted, but reason is undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function getAbortSignalReason(signal) {\n    if (!signal.aborted) {\n        return undefined;\n    }\n    if (signal.reason !== undefined) {\n        return signal.reason;\n    }\n    // AbortSignal.reason is available in Node.js v16, v18, and later,\n    // and in all browsers since early 2022.\n    const e = new Error(\"This operation was aborted\");\n    e.name = \"AbortError\";\n    return e;\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create a URL for the given RPC. This simply adds the qualified\n * service name, a slash, and the method name to the path of the given\n * baseUrl.\n *\n * For example, the baseUri https://example.com and method \"Say\" from\n * the service example.ElizaService results in:\n * https://example.com/example.ElizaService/Say\n *\n * This format is used by the protocols Connect, gRPC and Twirp.\n *\n * Note that this function also accepts a protocol-relative baseUrl.\n * If given an empty string or \"/\" as a baseUrl, it returns just the\n * path.\n */\nexport function createMethodUrl(baseUrl, service, method) {\n    const s = typeof service == \"string\" ? service : service.typeName;\n    const m = typeof method == \"string\" ? method : method.name;\n    return baseUrl.toString().replace(/\\/?$/, `/${s}/${m}`);\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\nimport { assertReadMaxBytes, assertWriteMaxBytes } from \"./limit-io.js\";\n/**\n * Sets default JSON serialization options for connect-es.\n *\n * With standard protobuf JSON serialization, unknown JSON fields are\n * rejected by default. In connect-es, unknown JSON fields are ignored\n * by default.\n */\nexport function getJsonOptions(options) {\n    var _a;\n    const o = Object.assign({}, options);\n    (_a = o.ignoreUnknownFields) !== null && _a !== void 0 ? _a : (o.ignoreUnknownFields = true);\n    return o;\n}\n/**\n * Create an object that provides convenient access to request and response\n * message serialization for a given method.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createMethodSerializationLookup(method, binaryOptions, jsonOptions, limitOptions) {\n    const inputBinary = limitSerialization(createBinarySerialization(method.I, binaryOptions), limitOptions);\n    const inputJson = limitSerialization(createJsonSerialization(method.I, jsonOptions), limitOptions);\n    const outputBinary = limitSerialization(createBinarySerialization(method.O, binaryOptions), limitOptions);\n    const outputJson = limitSerialization(createJsonSerialization(method.O, jsonOptions), limitOptions);\n    return {\n        getI(useBinaryFormat) {\n            return useBinaryFormat ? inputBinary : inputJson;\n        },\n        getO(useBinaryFormat) {\n            return useBinaryFormat ? outputBinary : outputJson;\n        },\n    };\n}\n/**\n * Returns functions to normalize and serialize the input message\n * of an RPC, and to parse the output message of an RPC.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {\n    const input = useBinaryFormat\n        ? createBinarySerialization(method.I, binaryOptions)\n        : createJsonSerialization(method.I, jsonOptions);\n    const output = useBinaryFormat\n        ? createBinarySerialization(method.O, binaryOptions)\n        : createJsonSerialization(method.O, jsonOptions);\n    return { parse: output.parse, serialize: input.serialize };\n}\n/**\n * Apply I/O limits to a Serialization object, returning a new object.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function limitSerialization(serialization, limitOptions) {\n    return {\n        serialize(data) {\n            const bytes = serialization.serialize(data);\n            assertWriteMaxBytes(limitOptions.writeMaxBytes, bytes.byteLength);\n            return bytes;\n        },\n        parse(data) {\n            assertReadMaxBytes(limitOptions.readMaxBytes, data.byteLength, true);\n            return serialization.parse(data);\n        },\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf binary format.\n */\nexport function createBinarySerialization(messageType, options) {\n    return {\n        parse(data) {\n            try {\n                return messageType.fromBinary(data, options);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`parse binary: ${m}`, Code.InvalidArgument);\n            }\n        },\n        serialize(data) {\n            try {\n                return data.toBinary(options);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`serialize binary: ${m}`, Code.Internal);\n            }\n        },\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf canonical JSON encoding.\n *\n * By default, unknown fields are ignored.\n */\nexport function createJsonSerialization(messageType, options) {\n    var _a, _b;\n    const textEncoder = (_a = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a !== void 0 ? _a : new TextEncoder();\n    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();\n    const o = getJsonOptions(options);\n    return {\n        parse(data) {\n            try {\n                const json = textDecoder.decode(data);\n                return messageType.fromJsonString(json, o);\n            }\n            catch (e) {\n                throw ConnectError.from(e, Code.InvalidArgument);\n            }\n        },\n        serialize(data) {\n            try {\n                const json = data.toJsonString(o);\n                return textEncoder.encode(json);\n            }\n            catch (e) {\n                throw ConnectError.from(e, Code.Internal);\n            }\n        },\n    };\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Regular Expression that matches any valid Connect Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const contentTypeRegExp = /^application\\/(connect\\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;\n/**\n * Regular Expression that matches a Connect unary Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const contentTypeUnaryRegExp = /^application\\/(?:json(?:; ?charset=utf-?8)?|proto)$/i;\n/**\n * Regular Expression that matches a Connect streaming Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const contentTypeStreamRegExp = /^application\\/connect\\+?(?:json(?:; ?charset=utf-?8)?|proto)$/i;\nexport const contentTypeUnaryProto = \"application/proto\";\nexport const contentTypeUnaryJson = \"application/json\";\nexport const contentTypeStreamProto = \"application/connect+proto\";\nexport const contentTypeStreamJson = \"application/connect+json\";\nconst encodingProto = \"proto\";\nconst encodingJson = \"json\";\n/**\n * Parse a Connect Content-Type header.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function parseContentType(contentType) {\n    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);\n    if (!match) {\n        return undefined;\n    }\n    const stream = !!match[1];\n    const binary = !!match[3];\n    return { stream, binary };\n}\n/**\n * Parse a Connect Get encoding query parameter.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function parseEncodingQuery(encoding) {\n    switch (encoding) {\n        case encodingProto:\n            return { stream: false, binary: true };\n        case encodingJson:\n            return { stream: false, binary: false };\n        default:\n            return undefined;\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Message, protoBase64 } from \"@bufbuild/protobuf\";\nimport { Code } from \"../code.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { codeFromString, codeToString } from \"./code-string.js\";\n/**\n * Parse a Connect error from a JSON value.\n * Will return a ConnectError, and throw the provided fallback if parsing failed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function errorFromJson(jsonValue, metadata, fallback) {\n    if (metadata) {\n        new Headers(metadata).forEach((value, key) => fallback.metadata.append(key, value));\n    }\n    if (typeof jsonValue !== \"object\" ||\n        jsonValue == null ||\n        Array.isArray(jsonValue) ||\n        !(\"code\" in jsonValue) ||\n        typeof jsonValue.code !== \"string\") {\n        throw fallback;\n    }\n    const code = codeFromString(jsonValue.code);\n    if (code === undefined) {\n        throw fallback;\n    }\n    const message = jsonValue.message;\n    if (message != null && typeof message !== \"string\") {\n        throw fallback;\n    }\n    const error = new ConnectError(message !== null && message !== void 0 ? message : \"\", code, metadata);\n    if (\"details\" in jsonValue && Array.isArray(jsonValue.details)) {\n        for (const detail of jsonValue.details) {\n            if (detail === null ||\n                typeof detail != \"object\" ||\n                Array.isArray(detail) ||\n                typeof detail.type != \"string\" ||\n                typeof detail.value != \"string\" ||\n                (\"debug\" in detail && typeof detail.debug != \"object\")) {\n                throw fallback;\n            }\n            try {\n                error.details.push({\n                    type: detail.type,\n                    value: protoBase64.dec(detail.value),\n                    debug: detail.debug,\n                });\n            }\n            catch (e) {\n                throw fallback;\n            }\n        }\n    }\n    return error;\n}\n/**\n * Parse a Connect error from a serialized JSON value.\n * Will return a ConnectError, and throw the provided fallback if parsing failed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function errorFromJsonBytes(bytes, metadata, fallback) {\n    let jsonValue;\n    try {\n        jsonValue = JSON.parse(new TextDecoder().decode(bytes));\n    }\n    catch (e) {\n        throw fallback;\n    }\n    return errorFromJson(jsonValue, metadata, fallback);\n}\n/**\n * Serialize the given error to JSON.\n *\n * The JSON serialization options are required to produce the optional\n * human-readable representation in the \"debug\" key if the detail uses\n * google.protobuf.Any. If serialization of the \"debug\" value fails, it\n * is silently disregarded.\n *\n * See https://connectrpc.com/docs/protocol#error-end-stream\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function errorToJson(error, jsonWriteOptions) {\n    const o = {\n        code: codeToString(error.code),\n    };\n    if (error.rawMessage.length > 0) {\n        o.message = error.rawMessage;\n    }\n    if (error.details.length > 0) {\n        o.details = error.details\n            .map((value) => {\n            if (value instanceof Message) {\n                const i = {\n                    type: value.getType().typeName,\n                    value: value.toBinary(),\n                };\n                try {\n                    i.debug = value.toJson(jsonWriteOptions);\n                }\n                catch (e) {\n                    // We deliberately ignore errors that may occur when serializing\n                    // a message to JSON (the message contains an Any).\n                    // The rationale is that we are only trying to provide optional\n                    // debug information.\n                }\n                return i;\n            }\n            return value;\n        })\n            .map((_a) => {\n            var { value } = _a, rest = __rest(_a, [\"value\"]);\n            return (Object.assign(Object.assign({}, rest), { value: protoBase64.enc(value) }));\n        });\n    }\n    return o;\n}\n/**\n * Serialize the given error to JSON. This calls errorToJson(), but stringifies\n * the result, and converts it into a UInt8Array.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function errorToJsonBytes(error, jsonWriteOptions) {\n    const textEncoder = new TextEncoder();\n    try {\n        const jsonObject = errorToJson(error, jsonWriteOptions);\n        const jsonString = JSON.stringify(jsonObject);\n        return textEncoder.encode(jsonString);\n    }\n    catch (e) {\n        const m = e instanceof Error ? e.message : String(e);\n        throw new ConnectError(`failed to serialize Connect Error: ${m}`, Code.Internal);\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { errorFromJson, errorToJson } from \"./error-json.js\";\nimport { appendHeaders } from \"../http-headers.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\n/**\n * endStreamFlag indicates that the data in a EnvelopedMessage\n * is a EndStreamResponse of the Connect protocol.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const endStreamFlag = 0b00000010;\n/**\n * Parse an EndStreamResponse of the Connect protocol.\n * Throws a ConnectError on malformed input.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function endStreamFromJson(data) {\n    const parseErr = new ConnectError(\"invalid end stream\", Code.InvalidArgument);\n    let jsonValue;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        jsonValue = JSON.parse(typeof data == \"string\" ? data : new TextDecoder().decode(data));\n    }\n    catch (e) {\n        throw parseErr;\n    }\n    if (typeof jsonValue != \"object\" ||\n        jsonValue == null ||\n        Array.isArray(jsonValue)) {\n        throw parseErr;\n    }\n    const metadata = new Headers();\n    if (\"metadata\" in jsonValue) {\n        if (typeof jsonValue.metadata != \"object\" ||\n            jsonValue.metadata == null ||\n            Array.isArray(jsonValue.metadata)) {\n            throw parseErr;\n        }\n        for (const [key, values] of Object.entries(jsonValue.metadata)) {\n            if (!Array.isArray(values) ||\n                values.some((value) => typeof value != \"string\")) {\n                throw parseErr;\n            }\n            for (const value of values) {\n                metadata.append(key, value);\n            }\n        }\n    }\n    const error = \"error\" in jsonValue\n        ? errorFromJson(jsonValue.error, metadata, parseErr)\n        : undefined;\n    return { metadata, error };\n}\n/**\n * Serialize the given EndStreamResponse to JSON.\n *\n * The JSON serialization options are required to produce the optional\n * human-readable representation of error details if the detail uses\n * google.protobuf.Any.\n *\n * See https://connectrpc.com/docs/protocol#error-end-stream\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function endStreamToJson(metadata, error, jsonWriteOptions) {\n    const es = {};\n    if (error !== undefined) {\n        es.error = errorToJson(error, jsonWriteOptions);\n        metadata = appendHeaders(metadata, error.metadata);\n    }\n    let hasMetadata = false;\n    const md = {};\n    metadata.forEach((value, key) => {\n        hasMetadata = true;\n        md[key] = [value];\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (hasMetadata) {\n        es.metadata = md;\n    }\n    return es;\n}\n/**\n * Create a Serialization object that serializes a Connect EndStreamResponse.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createEndStreamSerialization(options) {\n    const textEncoder = new TextEncoder();\n    return {\n        serialize(data) {\n            try {\n                const jsonObject = endStreamToJson(data.metadata, data.error, options);\n                const jsonString = JSON.stringify(jsonObject);\n                return textEncoder.encode(jsonString);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`failed to serialize EndStreamResponse: ${m}`, Code.Internal);\n            }\n        },\n        parse(data) {\n            try {\n                return endStreamFromJson(data);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`failed to parse EndStreamResponse: ${m}`, Code.InvalidArgument);\n            }\n        },\n    };\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @private Internal code, does not follow semantic versioning.\n */\nexport const headerContentType = \"Content-Type\";\nexport const headerUnaryContentLength = \"Content-Length\";\nexport const headerUnaryEncoding = \"Content-Encoding\";\nexport const headerStreamEncoding = \"Connect-Content-Encoding\";\nexport const headerUnaryAcceptEncoding = \"Accept-Encoding\";\nexport const headerStreamAcceptEncoding = \"Connect-Accept-Encoding\";\nexport const headerTimeout = \"Connect-Timeout-Ms\";\nexport const headerProtocolVersion = \"Connect-Protocol-Version\";\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Code } from \"../code.js\";\n/**\n * Determine the Connect error code for the given HTTP status code.\n * See https://connectrpc.com/docs/protocol#error-codes\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeFromHttpStatus(httpStatus) {\n    switch (httpStatus) {\n        case 400: // Bad Request\n            return Code.InvalidArgument;\n        case 401: // Unauthorized\n            return Code.Unauthenticated;\n        case 403: // Forbidden\n            return Code.PermissionDenied;\n        case 404: // Not Found\n            return Code.Unimplemented;\n        case 408: // Request Timeout\n            return Code.DeadlineExceeded;\n        case 409: // Conflict\n            return Code.Aborted;\n        case 412: // Precondition Failed\n            return Code.FailedPrecondition;\n        case 413: // Payload Too Large\n            return Code.ResourceExhausted;\n        case 415: // Unsupported Media Type\n            return Code.Internal;\n        case 429: // Too Many Requests\n            return Code.Unavailable;\n        case 431: // Request Header Fields Too Large\n            return Code.ResourceExhausted;\n        case 502: // Bad Gateway\n            return Code.Unavailable;\n        case 503: // Service Unavailable\n            return Code.Unavailable;\n        case 504: // Gateway Timeout\n            return Code.Unavailable;\n        default:\n            return Code.Unknown;\n    }\n}\n/**\n * Returns a HTTP status code for the given Connect code.\n * See https://connectrpc.com/docs/protocol#error-codes\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeToHttpStatus(code) {\n    switch (code) {\n        case Code.Canceled:\n            return 408; // Request Timeout\n        case Code.Unknown:\n            return 500; // Internal Server Error\n        case Code.InvalidArgument:\n            return 400; // Bad Request\n        case Code.DeadlineExceeded:\n            return 408; // Request Timeout\n        case Code.NotFound:\n            return 404; // Not Found\n        case Code.AlreadyExists:\n            return 409; // Conflict\n        case Code.PermissionDenied:\n            return 403; // Forbidden\n        case Code.ResourceExhausted:\n            return 429; // Too Many Requests\n        case Code.FailedPrecondition:\n            return 412; // Precondition Failed\n        case Code.Aborted:\n            return 409; // Conflict\n        case Code.OutOfRange:\n            return 400; // Bad Request\n        case Code.Unimplemented:\n            return 404; // Not Found\n        case Code.Internal:\n            return 500; // Internal Server Error\n        case Code.Unavailable:\n            return 503; // Service Unavailable\n        case Code.DataLoss:\n            return 500; // Internal Server Error\n        case Code.Unauthenticated:\n            return 401; // Unauthorized\n        default:\n            return 500; // same as CodeUnknown\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * In unary RPCs, Connect transports trailing metadata as response header\n * fields, prefixed with \"trailer-\".\n *\n * This function demuxes headers and trailers into two separate Headers\n * objects.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function trailerDemux(header) {\n    const h = new Headers(), t = new Headers();\n    header.forEach((value, key) => {\n        if (key.toLowerCase().startsWith(\"trailer-\")) {\n            t.set(key.substring(8), value);\n        }\n        else {\n            h.set(key, value);\n        }\n    });\n    return [h, t];\n}\n/**\n * In unary RPCs, Connect transports trailing metadata as response header\n * fields, prefixed with \"trailer-\".\n *\n * This function muxes a header and a trailer into a single Headers object.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function trailerMux(header, trailer) {\n    const h = new Headers(header);\n    trailer.forEach((value, key) => {\n        h.set(`trailer-${key}`, value);\n    });\n    return h;\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { headerProtocolVersion } from \"./headers.js\";\nimport { paramConnectVersion } from \"./query-params.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\n/**\n * The only know value for the header Connect-Protocol-Version.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const protocolVersion = \"1\";\n/**\n * Requires the Connect-Protocol-Version header to be present with the expected\n * value. Raises a ConnectError with Code.InvalidArgument otherwise.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requireProtocolVersionHeader(requestHeader) {\n    const v = requestHeader.get(headerProtocolVersion);\n    if (v === null) {\n        throw new ConnectError(`missing required header: set ${headerProtocolVersion} to \"${protocolVersion}\"`, Code.InvalidArgument);\n    }\n    else if (v !== protocolVersion) {\n        throw new ConnectError(`${headerProtocolVersion} must be \"${protocolVersion}\": got \"${v}\"`, Code.InvalidArgument);\n    }\n}\n/**\n * Requires the connect query parameter to be present with the expected value.\n * Raises a ConnectError with Code.InvalidArgument otherwise.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requireProtocolVersionParam(queryParams) {\n    const v = queryParams.get(paramConnectVersion);\n    if (v === null) {\n        throw new ConnectError(`missing required parameter: set ${paramConnectVersion} to \"v${protocolVersion}\"`, Code.InvalidArgument);\n    }\n    else if (v !== `v${protocolVersion}`) {\n        throw new ConnectError(`${paramConnectVersion} must be \"v${protocolVersion}\": got \"${v}\"`, Code.InvalidArgument);\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { MethodKind } from \"@bufbuild/protobuf\";\nimport { headerContentType, headerStreamAcceptEncoding, headerStreamEncoding, headerUnaryAcceptEncoding, headerUnaryEncoding, headerTimeout, headerProtocolVersion, } from \"./headers.js\";\nimport { protocolVersion } from \"./version.js\";\nimport { contentTypeStreamJson, contentTypeStreamProto, contentTypeUnaryJson, contentTypeUnaryProto, } from \"./content-type.js\";\n/**\n * Creates headers for a Connect request.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders) {\n    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});\n    if (timeoutMs !== undefined) {\n        result.set(headerTimeout, `${timeoutMs}`);\n    }\n    result.set(headerContentType, methodKind == MethodKind.Unary\n        ? useBinaryFormat\n            ? contentTypeUnaryProto\n            : contentTypeUnaryJson\n        : useBinaryFormat\n            ? contentTypeStreamProto\n            : contentTypeStreamJson);\n    result.set(headerProtocolVersion, protocolVersion);\n    return result;\n}\n/**\n * Creates headers for a Connect request with compression.\n *\n * Note that we always set the Content-Encoding header for unary methods.\n * It is up to the caller to decide whether to apply compression - and remove\n * the header if compression is not used, for example because the payload is\n * too small to make compression effective.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requestHeaderWithCompression(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, acceptCompression, sendCompression) {\n    const result = requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders);\n    if (sendCompression != null) {\n        const name = methodKind == MethodKind.Unary\n            ? headerUnaryEncoding\n            : headerStreamEncoding;\n        result.set(name, sendCompression.name);\n    }\n    if (acceptCompression.length > 0) {\n        const name = methodKind == MethodKind.Unary\n            ? headerUnaryAcceptEncoding\n            : headerStreamAcceptEncoding;\n        result.set(name, acceptCompression.map((c) => c.name).join(\",\"));\n    }\n    return result;\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { MethodKind } from \"@bufbuild/protobuf\";\nimport { Code } from \"../code.js\";\nimport { codeFromHttpStatus } from \"./http-status.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { parseContentType } from \"./content-type.js\";\nimport { headerStreamEncoding, headerUnaryEncoding } from \"./headers.js\";\n/**\n * Validates response status and header for the Connect protocol.\n * Throws a ConnectError if the header indicates an error, or if\n * the content type is unexpected, with the following exception:\n * For unary RPCs with an HTTP error status, this returns an error\n * derived from the HTTP status instead of throwing it, giving an\n * implementation a chance to parse a Connect error from the wire.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function validateResponse(methodKind, status, headers) {\n    const mimeType = headers.get(\"Content-Type\");\n    const parsedType = parseContentType(mimeType);\n    if (status !== 200) {\n        const errorFromStatus = new ConnectError(`HTTP ${status}`, codeFromHttpStatus(status), headers);\n        // If parsedType is defined and it is not binary, then this is a unary JSON response\n        if (methodKind == MethodKind.Unary && parsedType && !parsedType.binary) {\n            return { isUnaryError: true, unaryError: errorFromStatus };\n        }\n        throw errorFromStatus;\n    }\n    return { isUnaryError: false };\n}\n/**\n * Validates response status and header for the Connect protocol.\n * This function is identical to validateResponse(), but also verifies\n * that a given encoding header is acceptable.\n *\n * @private\n */\nexport function validateResponseWithCompression(methodKind, acceptCompression, status, headers) {\n    let compression;\n    const encoding = headers.get(methodKind == MethodKind.Unary ? headerUnaryEncoding : headerStreamEncoding);\n    if (encoding != null && encoding.toLowerCase() !== \"identity\") {\n        compression = acceptCompression.find((c) => c.name === encoding);\n        if (!compression) {\n            throw new ConnectError(`unsupported response encoding \"${encoding}\"`, Code.InvalidArgument, headers);\n        }\n    }\n    return Object.assign({ compression }, validateResponse(methodKind, status, headers));\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message, protoBase64 } from \"@bufbuild/protobuf\";\nimport { headerContentType, headerProtocolVersion, headerUnaryAcceptEncoding, headerUnaryContentLength, headerUnaryEncoding, } from \"./headers.js\";\nimport { protocolVersion } from \"./version.js\";\nconst contentTypePrefix = \"application/\";\nfunction encodeMessageForUrl(message, useBase64) {\n    if (useBase64) {\n        // TODO(jchadwick-buf): Three regex replaces seems excessive.\n        // Can we make protoBase64.enc more flexible?\n        return protoBase64\n            .enc(message)\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\")\n            .replace(/=+$/, \"\");\n    }\n    else {\n        return encodeURIComponent(new TextDecoder().decode(message));\n    }\n}\n/**\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformConnectPostToGetRequest(request, message, useBase64) {\n    let query = `?connect=v${protocolVersion}`;\n    const contentType = request.header.get(headerContentType);\n    if ((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(contentTypePrefix)) === 0) {\n        query +=\n            \"&encoding=\" +\n                encodeURIComponent(contentType.slice(contentTypePrefix.length));\n    }\n    const compression = request.header.get(headerUnaryEncoding);\n    if (compression !== null && compression !== \"identity\") {\n        query += \"&compression=\" + encodeURIComponent(compression);\n        // Force base64 for compressed payloads.\n        useBase64 = true;\n    }\n    if (useBase64) {\n        query += \"&base64=1\";\n    }\n    query += \"&message=\" + encodeMessageForUrl(message, useBase64);\n    const url = request.url + query;\n    // Omit headers that are not used for unary GET requests.\n    const header = new Headers(request.header);\n    header.delete(headerProtocolVersion);\n    header.delete(headerContentType);\n    header.delete(headerUnaryContentLength);\n    header.delete(headerUnaryEncoding);\n    header.delete(headerUnaryAcceptEncoding);\n    return Object.assign(Object.assign({}, request), { init: Object.assign(Object.assign({}, request.init), { method: \"GET\" }), url,\n        header });\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { createDeadlineSignal, createLinkedAbortController, getAbortSignalReason, } from \"./signals.js\";\n/**\n * Runs a unary method with the given interceptors. Note that this function\n * is only used when implementing a Transport.\n */\nexport function runUnaryCall(opt) {\n    const next = applyInterceptors(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), { message: normalize(opt.req.method.I, opt.req.message), signal });\n    return next(req).then((res) => {\n        done();\n        return res;\n    }, abort);\n}\n/**\n * Runs a server-streaming method with the given interceptors. Note that this\n * function is only used when implementing a Transport.\n */\nexport function runStreamingCall(opt) {\n    const next = applyInterceptors(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), { message: normalizeIterable(opt.req.method.I, opt.req.message), signal });\n    let doneCalled = false;\n    // Call return on the request iterable to indicate\n    // that we will no longer consume it and it should\n    // cleanup any allocated resources.\n    signal.addEventListener(\"abort\", function () {\n        var _a, _b;\n        const it = opt.req.message[Symbol.asyncIterator]();\n        // If the signal is aborted due to an error, we want to throw\n        // the error to the request iterator.\n        if (!doneCalled) {\n            (_a = it.throw) === null || _a === void 0 ? void 0 : _a.call(it, this.reason).catch(() => {\n                // throw returns a promise, which we don't care about.\n                //\n                // Uncaught promises are thrown at sometime/somewhere by the event loop,\n                // this is to ensure error is caught and ignored.\n            });\n        }\n        (_b = it.return) === null || _b === void 0 ? void 0 : _b.call(it).catch(() => {\n            // return returns a promise, which we don't care about.\n            //\n            // Uncaught promises are thrown at sometime/somewhere by the event loop,\n            // this is to ensure error is caught and ignored.\n        });\n    });\n    return next(req).then((res) => {\n        return Object.assign(Object.assign({}, res), { message: {\n                [Symbol.asyncIterator]() {\n                    const it = res.message[Symbol.asyncIterator]();\n                    return {\n                        next() {\n                            return it.next().then((r) => {\n                                if (r.done == true) {\n                                    doneCalled = true;\n                                    done();\n                                }\n                                return r;\n                            }, abort);\n                        },\n                        // We deliberately omit throw/return.\n                    };\n                },\n            } });\n    }, abort);\n}\n/**\n * Create an AbortSignal for Transport implementations. The signal is available\n * in UnaryRequest and StreamingRequest, and is triggered when the call is\n * aborted (via a timeout or explicit cancellation), errored (e.g. when reading\n * an error from the server from the wire), or finished successfully.\n *\n * Transport implementations can pass the signal to HTTP clients to ensure that\n * there are no unused connections leak.\n *\n * Returns a tuple:\n * [0]: The signal, which is also aborted if the optional deadline is reached.\n * [1]: Function to call if the Transport encountered an error.\n * [2]: Function to call if the Transport finished without an error.\n */\nfunction setupSignal(opt) {\n    const { signal, cleanup } = createDeadlineSignal(opt.timeoutMs);\n    const controller = createLinkedAbortController(opt.signal, signal);\n    return [\n        controller.signal,\n        function abort(reason) {\n            // We peek at the deadline signal because fetch() will throw an error on\n            // abort that discards the signal reason.\n            const e = ConnectError.from(signal.aborted ? getAbortSignalReason(signal) : reason);\n            controller.abort(e);\n            cleanup();\n            return Promise.reject(e);\n        },\n        function done() {\n            cleanup();\n            controller.abort();\n        },\n    ];\n}\n/**\n * applyInterceptors takes the given UnaryFn or ServerStreamingFn, and wraps\n * it with each of the given interceptors, returning a new UnaryFn or\n * ServerStreamingFn.\n */\nfunction applyInterceptors(next, interceptors) {\n    var _a;\n    return ((_a = interceptors === null || interceptors === void 0 ? void 0 : interceptors.concat().reverse().reduce(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    (n, i) => i(n), next)) !== null && _a !== void 0 ? _a : next);\n}\n/**\n *  Takes a partial protobuf messages of the\n *  specified message type as input, and returns full instances.\n */\nfunction normalize(type, message) {\n    return message instanceof type ? message : new type(message);\n}\n/**\n * Takes an AsyncIterable of partial protobuf messages of the\n * specified message type as input, and yields full instances.\n */\nexport function normalizeIterable(messageType, input) {\n    function transform(result) {\n        if (result.done === true) {\n            return result;\n        }\n        return {\n            done: result.done,\n            value: normalize(messageType, result.value),\n        };\n    }\n    return {\n        [Symbol.asyncIterator]() {\n            const it = input[Symbol.asyncIterator]();\n            const res = {\n                next: () => it.next().then(transform),\n            };\n            if (it.throw !== undefined) {\n                res.throw = (e) => it.throw(e).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            if (it.return !== undefined) {\n                res.return = (v) => it.return(v).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            return res;\n        },\n    };\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Asserts that the fetch API is available.\n */\nexport function assertFetchApi() {\n    try {\n        new Headers();\n    }\n    catch (_) {\n        throw new Error(\"connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.\");\n    }\n}\n", "// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { Message, MethodIdempotency, MethodKind } from \"@bufbuild/protobuf\";\nimport { appendHeaders } from \"@bufbuild/connect\";\nimport { createClientMethodSerializers, createEnvelopeReadableStream, createMethodUrl, getJsonOptions, encodeEnvelope, runStreamingCall, runUnaryCall, } from \"@bufbuild/connect/protocol\";\nimport { endStreamFlag, endStreamFromJson, errorFromJson, requestHeader, trailerDemux, transformConnectPostToGetRequest, validateResponse, } from \"@bufbuild/connect/protocol-connect\";\nimport { assertFetchApi } from \"./assert-fetch-api.js\";\n/**\n * Create a Transport for the Connect protocol, which makes unary and\n * server-streaming methods available to web browsers. It uses the fetch\n * API to make HTTP requests.\n */\nexport function createConnectTransport(options) {\n    var _a;\n    assertFetchApi();\n    const useBinaryFormat = (_a = options.useBinaryFormat) !== null && _a !== void 0 ? _a : false;\n    return {\n        async unary(service, method, signal, timeoutMs, header, message) {\n            var _a;\n            const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);\n            return await runUnaryCall({\n                interceptors: options.interceptors,\n                signal,\n                timeoutMs,\n                req: {\n                    stream: false,\n                    service,\n                    method,\n                    url: createMethodUrl(options.baseUrl, service, method),\n                    init: {\n                        method: \"POST\",\n                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : \"same-origin\",\n                        redirect: \"error\",\n                        mode: \"cors\",\n                    },\n                    header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),\n                    message,\n                },\n                next: async (req) => {\n                    var _a;\n                    const useGet = options.useHttpGet === true &&\n                        method.idempotency === MethodIdempotency.NoSideEffects;\n                    let body = null;\n                    if (useGet) {\n                        req = transformConnectPostToGetRequest(req, serialize(req.message), useBinaryFormat);\n                    }\n                    else {\n                        body = serialize(req.message);\n                    }\n                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;\n                    const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body }));\n                    const { isUnaryError, unaryError } = validateResponse(method.kind, response.status, response.headers);\n                    if (isUnaryError) {\n                        throw errorFromJson((await response.json()), appendHeaders(...trailerDemux(response.headers)), unaryError);\n                    }\n                    const [demuxedHeader, demuxedTrailer] = trailerDemux(response.headers);\n                    return {\n                        stream: false,\n                        service,\n                        method,\n                        header: demuxedHeader,\n                        message: useBinaryFormat\n                            ? parse(new Uint8Array(await response.arrayBuffer()))\n                            : method.O.fromJson((await response.json()), getJsonOptions(options.jsonOptions)),\n                        trailer: demuxedTrailer,\n                    };\n                },\n            });\n        },\n        async stream(service, method, signal, timeoutMs, header, input) {\n            var _a;\n            const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);\n            function parseResponseBody(body, trailerTarget) {\n                return __asyncGenerator(this, arguments, function* parseResponseBody_1() {\n                    const reader = createEnvelopeReadableStream(body).getReader();\n                    let endStreamReceived = false;\n                    for (;;) {\n                        const result = yield __await(reader.read());\n                        if (result.done) {\n                            break;\n                        }\n                        const { flags, data } = result.value;\n                        if ((flags & endStreamFlag) === endStreamFlag) {\n                            endStreamReceived = true;\n                            const endStream = endStreamFromJson(data);\n                            if (endStream.error) {\n                                throw endStream.error;\n                            }\n                            endStream.metadata.forEach((value, key) => trailerTarget.set(key, value));\n                            continue;\n                        }\n                        yield yield __await(parse(data));\n                    }\n                    if (!endStreamReceived) {\n                        throw \"missing EndStreamResponse\";\n                    }\n                });\n            }\n            async function createRequestBody(input) {\n                if (method.kind != MethodKind.ServerStreaming) {\n                    throw \"The fetch API does not support streaming request bodies\";\n                }\n                const r = await input[Symbol.asyncIterator]().next();\n                if (r.done == true) {\n                    throw \"missing request message\";\n                }\n                return encodeEnvelope(0, serialize(r.value));\n            }\n            return await runStreamingCall({\n                interceptors: options.interceptors,\n                timeoutMs,\n                signal,\n                req: {\n                    stream: true,\n                    service,\n                    method,\n                    url: createMethodUrl(options.baseUrl, service, method),\n                    init: {\n                        method: \"POST\",\n                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : \"same-origin\",\n                        redirect: \"error\",\n                        mode: \"cors\",\n                    },\n                    header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),\n                    message: input,\n                },\n                next: async (req) => {\n                    var _a;\n                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;\n                    const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));\n                    validateResponse(method.kind, fRes.status, fRes.headers);\n                    if (fRes.body === null) {\n                        throw \"missing response body\";\n                    }\n                    const trailer = new Headers();\n                    const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, trailer) });\n                    return res;\n                },\n            });\n        },\n    };\n}\n", "// @generated by protoc-gen-es v1.3.3 with parameter \"target=ts\"\n// @generated from file user/user.proto (package user, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3 } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from message user.GroupInfoRequest\n */\nexport class GroupInfoRequest extends Message<GroupInfoRequest> {\n  /**\n   * @generated from field: string secret = 1;\n   */\n  secret = \"\";\n\n  constructor(data?: PartialMessage<GroupInfoRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.GroupInfoRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"secret\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupInfoRequest {\n    return new GroupInfoRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupInfoRequest {\n    return new GroupInfoRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupInfoRequest {\n    return new GroupInfoRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GroupInfoRequest | PlainMessage<GroupInfoRequest> | undefined, b: GroupInfoRequest | PlainMessage<GroupInfoRequest> | undefined): boolean {\n    return proto3.util.equals(GroupInfoRequest, a, b);\n  }\n}\n\n/**\n * @generated from message user.GroupID\n */\nexport class GroupID extends Message<GroupID> {\n  /**\n   * @generated from field: string group_id = 1;\n   */\n  groupId = \"\";\n\n  constructor(data?: PartialMessage<GroupID>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.GroupID\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"group_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupID {\n    return new GroupID().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupID {\n    return new GroupID().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupID {\n    return new GroupID().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GroupID | PlainMessage<GroupID> | undefined, b: GroupID | PlainMessage<GroupID> | undefined): boolean {\n    return proto3.util.equals(GroupID, a, b);\n  }\n}\n\n/**\n * @generated from message user.ShareRequest\n */\nexport class ShareRequest extends Message<ShareRequest> {\n  /**\n   * @generated from field: string content_id = 1;\n   */\n  contentId = \"\";\n\n  /**\n   * @generated from field: string group_id = 2;\n   */\n  groupId = \"\";\n\n  constructor(data?: PartialMessage<ShareRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.ShareRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"content_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"group_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShareRequest {\n    return new ShareRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShareRequest {\n    return new ShareRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShareRequest {\n    return new ShareRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ShareRequest | PlainMessage<ShareRequest> | undefined, b: ShareRequest | PlainMessage<ShareRequest> | undefined): boolean {\n    return proto3.util.equals(ShareRequest, a, b);\n  }\n}\n\n/**\n * @generated from message user.GroupInvite\n */\nexport class GroupInvite extends Message<GroupInvite> {\n  /**\n   * @generated from field: string secret = 1;\n   */\n  secret = \"\";\n\n  constructor(data?: PartialMessage<GroupInvite>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.GroupInvite\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"secret\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupInvite {\n    return new GroupInvite().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupInvite {\n    return new GroupInvite().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupInvite {\n    return new GroupInvite().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GroupInvite | PlainMessage<GroupInvite> | undefined, b: GroupInvite | PlainMessage<GroupInvite> | undefined): boolean {\n    return proto3.util.equals(GroupInvite, a, b);\n  }\n}\n\n/**\n * @generated from message user.Groups\n */\nexport class Groups extends Message<Groups> {\n  /**\n   * @generated from field: repeated user.Group groups = 1;\n   */\n  groups: Group[] = [];\n\n  constructor(data?: PartialMessage<Groups>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.Groups\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"groups\", kind: \"message\", T: Group, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Groups {\n    return new Groups().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Groups {\n    return new Groups().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Groups {\n    return new Groups().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Groups | PlainMessage<Groups> | undefined, b: Groups | PlainMessage<Groups> | undefined): boolean {\n    return proto3.util.equals(Groups, a, b);\n  }\n}\n\n/**\n * @generated from message user.AnalyzeConversationRequest\n */\nexport class AnalyzeConversationRequest extends Message<AnalyzeConversationRequest> {\n  /**\n   * @generated from field: string text = 1;\n   */\n  text = \"\";\n\n  constructor(data?: PartialMessage<AnalyzeConversationRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.AnalyzeConversationRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeConversationRequest {\n    return new AnalyzeConversationRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeConversationRequest {\n    return new AnalyzeConversationRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeConversationRequest {\n    return new AnalyzeConversationRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: AnalyzeConversationRequest | PlainMessage<AnalyzeConversationRequest> | undefined, b: AnalyzeConversationRequest | PlainMessage<AnalyzeConversationRequest> | undefined): boolean {\n    return proto3.util.equals(AnalyzeConversationRequest, a, b);\n  }\n}\n\n/**\n * @generated from message user.User\n */\nexport class User extends Message<User> {\n  /**\n   * @generated from field: string email = 1;\n   */\n  email = \"\";\n\n  /**\n   * @generated from field: string password = 2;\n   */\n  password = \"\";\n\n  /**\n   * @generated from field: user.Config config = 3;\n   */\n  config?: Config;\n\n  constructor(data?: PartialMessage<User>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.User\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"email\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"password\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"config\", kind: \"message\", T: Config },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {\n    return new User().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {\n    return new User().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {\n    return new User().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {\n    return proto3.util.equals(User, a, b);\n  }\n}\n\n/**\n * @generated from message user.Group\n */\nexport class Group extends Message<Group> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: string name = 2;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: repeated string users = 3;\n   */\n  users: string[] = [];\n\n  constructor(data?: PartialMessage<Group>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.Group\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"users\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Group {\n    return new Group().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Group {\n    return new Group().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Group {\n    return new Group().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Group | PlainMessage<Group> | undefined, b: Group | PlainMessage<Group> | undefined): boolean {\n    return proto3.util.equals(Group, a, b);\n  }\n}\n\n/**\n * @generated from message user.Config\n */\nexport class Config extends Message<Config> {\n  /**\n   * @generated from field: repeated string domain_whitelist = 1;\n   */\n  domainWhitelist: string[] = [];\n\n  constructor(data?: PartialMessage<Config>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.Config\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"domain_whitelist\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config {\n    return new Config().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config {\n    return new Config().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config {\n    return new Config().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean {\n    return proto3.util.equals(Config, a, b);\n  }\n}\n\n/**\n * @generated from message user.LoginResponse\n */\nexport class LoginResponse extends Message<LoginResponse> {\n  constructor(data?: PartialMessage<LoginResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"user.LoginResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {\n    return new LoginResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {\n    return new LoginResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {\n    return new LoginResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean {\n    return proto3.util.equals(LoginResponse, a, b);\n  }\n}\n\n", "// @generated by protoc-gen-es v1.3.3 with parameter \"target=ts\"\n// @generated from file content/content.proto (package content, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3, protoInt64 } from \"@bufbuild/protobuf\";\nimport { User } from \"../user/user_pb.js\";\n\n/**\n * @generated from message content.SetTagsRequest\n */\nexport class SetTagsRequest extends Message<SetTagsRequest> {\n  /**\n   * @generated from field: string content_id = 1;\n   */\n  contentId = \"\";\n\n  /**\n   * @generated from field: repeated string tags = 2;\n   */\n  tags: string[] = [];\n\n  constructor(data?: PartialMessage<SetTagsRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.SetTagsRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"content_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"tags\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTagsRequest {\n    return new SetTagsRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTagsRequest {\n    return new SetTagsRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTagsRequest {\n    return new SetTagsRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SetTagsRequest | PlainMessage<SetTagsRequest> | undefined, b: SetTagsRequest | PlainMessage<SetTagsRequest> | undefined): boolean {\n    return proto3.util.equals(SetTagsRequest, a, b);\n  }\n}\n\n/**\n * @generated from message content.TagRequest\n */\nexport class TagRequest extends Message<TagRequest> {\n  /**\n   * @generated from field: string group_id = 1;\n   */\n  groupId = \"\";\n\n  constructor(data?: PartialMessage<TagRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.TagRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"group_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagRequest {\n    return new TagRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagRequest {\n    return new TagRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagRequest {\n    return new TagRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TagRequest | PlainMessage<TagRequest> | undefined, b: TagRequest | PlainMessage<TagRequest> | undefined): boolean {\n    return proto3.util.equals(TagRequest, a, b);\n  }\n}\n\n/**\n * @generated from message content.Tags\n */\nexport class Tags extends Message<Tags> {\n  /**\n   * @generated from field: repeated content.Tag tags = 1;\n   */\n  tags: Tag[] = [];\n\n  constructor(data?: PartialMessage<Tags>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Tags\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"tags\", kind: \"message\", T: Tag, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tags {\n    return new Tags().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tags {\n    return new Tags().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tags {\n    return new Tags().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Tags | PlainMessage<Tags> | undefined, b: Tags | PlainMessage<Tags> | undefined): boolean {\n    return proto3.util.equals(Tags, a, b);\n  }\n}\n\n/**\n * @generated from message content.Tag\n */\nexport class Tag extends Message<Tag> {\n  /**\n   * @generated from field: string name = 1;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: repeated content.Tag sub_tags = 2;\n   */\n  subTags: Tag[] = [];\n\n  constructor(data?: PartialMessage<Tag>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Tag\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"sub_tags\", kind: \"message\", T: Tag, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tag {\n    return new Tag().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tag {\n    return new Tag().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tag {\n    return new Tag().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Tag | PlainMessage<Tag> | undefined, b: Tag | PlainMessage<Tag> | undefined): boolean {\n    return proto3.util.equals(Tag, a, b);\n  }\n}\n\n/**\n * @generated from message content.ContentIDs\n */\nexport class ContentIDs extends Message<ContentIDs> {\n  /**\n   * @generated from field: repeated string content_ids = 1;\n   */\n  contentIds: string[] = [];\n\n  constructor(data?: PartialMessage<ContentIDs>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.ContentIDs\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"content_ids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContentIDs {\n    return new ContentIDs().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContentIDs {\n    return new ContentIDs().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContentIDs {\n    return new ContentIDs().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ContentIDs | PlainMessage<ContentIDs> | undefined, b: ContentIDs | PlainMessage<ContentIDs> | undefined): boolean {\n    return proto3.util.equals(ContentIDs, a, b);\n  }\n}\n\n/**\n * @generated from message content.Contents\n */\nexport class Contents extends Message<Contents> {\n  /**\n   * @generated from field: content.Content content = 1;\n   */\n  content?: Content;\n\n  /**\n   * @generated from field: repeated content.Content related = 2;\n   */\n  related: Content[] = [];\n\n  /**\n   * @generated from field: repeated string parents = 3;\n   */\n  parents: string[] = [];\n\n  constructor(data?: PartialMessage<Contents>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Contents\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"content\", kind: \"message\", T: Content },\n    { no: 2, name: \"related\", kind: \"message\", T: Content, repeated: true },\n    { no: 3, name: \"parents\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contents {\n    return new Contents().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contents {\n    return new Contents().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contents {\n    return new Contents().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Contents | PlainMessage<Contents> | undefined, b: Contents | PlainMessage<Contents> | undefined): boolean {\n    return proto3.util.equals(Contents, a, b);\n  }\n}\n\n/**\n * @generated from message content.Query\n */\nexport class Query extends Message<Query> {\n  /**\n   * @generated from field: string query = 1;\n   */\n  query = \"\";\n\n  /**\n   * @generated from field: uint32 page = 2;\n   */\n  page = 0;\n\n  /**\n   * @generated from field: string contentID = 3;\n   */\n  contentID = \"\";\n\n  /**\n   * @generated from field: string groupID = 4;\n   */\n  groupID = \"\";\n\n  /**\n   * @generated from field: repeated string tags = 5;\n   */\n  tags: string[] = [];\n\n  constructor(data?: PartialMessage<Query>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Query\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"query\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"page\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"contentID\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"groupID\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"tags\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query {\n    return new Query().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query {\n    return new Query().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query {\n    return new Query().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean {\n    return proto3.util.equals(Query, a, b);\n  }\n}\n\n/**\n * @generated from message content.Results\n */\nexport class Results extends Message<Results> {\n  /**\n   * @generated from field: repeated content.StoredContent storedContent = 1;\n   */\n  storedContent: StoredContent[] = [];\n\n  constructor(data?: PartialMessage<Results>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Results\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"storedContent\", kind: \"message\", T: StoredContent, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Results {\n    return new Results().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Results {\n    return new Results().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Results {\n    return new Results().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Results | PlainMessage<Results> | undefined, b: Results | PlainMessage<Results> | undefined): boolean {\n    return proto3.util.equals(Results, a, b);\n  }\n}\n\n/**\n * @generated from message content.StoredContent\n */\nexport class StoredContent extends Message<StoredContent> {\n  /**\n   * @generated from field: content.Content content = 1;\n   */\n  content?: Content;\n\n  /**\n   * @generated from field: string id = 2;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: repeated content.Content related = 3;\n   */\n  related: Content[] = [];\n\n  /**\n   * @generated from field: string title = 4;\n   */\n  title = \"\";\n\n  /**\n   * @generated from field: string description = 5;\n   */\n  description = \"\";\n\n  /**\n   * @generated from field: string image = 6;\n   */\n  image = \"\";\n\n  /**\n   * @generated from field: string url = 7;\n   */\n  url = \"\";\n\n  /**\n   * @generated from field: user.User user = 9;\n   */\n  user?: User;\n\n  /**\n   * @generated from field: repeated content.Tag tags = 10;\n   */\n  tags: Tag[] = [];\n\n  /**\n   * @generated from field: string preview = 11;\n   */\n  preview = \"\";\n\n  constructor(data?: PartialMessage<StoredContent>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.StoredContent\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"content\", kind: \"message\", T: Content },\n    { no: 2, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"related\", kind: \"message\", T: Content, repeated: true },\n    { no: 4, name: \"title\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"description\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"image\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"user\", kind: \"message\", T: User },\n    { no: 10, name: \"tags\", kind: \"message\", T: Tag, repeated: true },\n    { no: 11, name: \"preview\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoredContent {\n    return new StoredContent().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoredContent {\n    return new StoredContent().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoredContent {\n    return new StoredContent().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: StoredContent | PlainMessage<StoredContent> | undefined, b: StoredContent | PlainMessage<StoredContent> | undefined): boolean {\n    return proto3.util.equals(StoredContent, a, b);\n  }\n}\n\n/**\n * @generated from message content.Edge\n */\nexport class Edge extends Message<Edge> {\n  /**\n   * @generated from field: string from = 1;\n   */\n  from = \"\";\n\n  /**\n   * @generated from field: string to = 2;\n   */\n  to = \"\";\n\n  constructor(data?: PartialMessage<Edge>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Edge\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"from\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"to\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Edge {\n    return new Edge().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Edge {\n    return new Edge().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Edge {\n    return new Edge().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Edge | PlainMessage<Edge> | undefined, b: Edge | PlainMessage<Edge> | undefined): boolean {\n    return proto3.util.equals(Edge, a, b);\n  }\n}\n\n/**\n * Content has data and metadata\n *\n * @generated from message content.Content\n */\nexport class Content extends Message<Content> {\n  /**\n   * @generated from field: repeated string tags = 1;\n   */\n  tags: string[] = [];\n\n  /**\n   * @generated from field: string created_at = 2;\n   */\n  createdAt = \"\";\n\n  /**\n   * @generated from field: string uri = 3;\n   */\n  uri = \"\";\n\n  /**\n   * @generated from field: string id = 4;\n   */\n  id = \"\";\n\n  /**\n   * @generated from oneof content.Content.type\n   */\n  type: {\n    /**\n     * @generated from field: content.Data data = 6;\n     */\n    value: Data;\n    case: \"data\";\n  } | {\n    /**\n     * @generated from field: content.Normalized normalized = 7;\n     */\n    value: Normalized;\n    case: \"normalized\";\n  } | {\n    /**\n     * @generated from field: content.Transformed transformed = 8;\n     */\n    value: Transformed;\n    case: \"transformed\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<Content>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Content\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"tags\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 2, name: \"created_at\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"uri\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"data\", kind: \"message\", T: Data, oneof: \"type\" },\n    { no: 7, name: \"normalized\", kind: \"message\", T: Normalized, oneof: \"type\" },\n    { no: 8, name: \"transformed\", kind: \"message\", T: Transformed, oneof: \"type\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Content {\n    return new Content().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Content {\n    return new Content().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Content {\n    return new Content().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Content | PlainMessage<Content> | undefined, b: Content | PlainMessage<Content> | undefined): boolean {\n    return proto3.util.equals(Content, a, b);\n  }\n}\n\n/**\n * @generated from message content.GitRepo\n */\nexport class GitRepo extends Message<GitRepo> {\n  /**\n   * @generated from field: string url = 1;\n   */\n  url = \"\";\n\n  constructor(data?: PartialMessage<GitRepo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.GitRepo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitRepo {\n    return new GitRepo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitRepo {\n    return new GitRepo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitRepo {\n    return new GitRepo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GitRepo | PlainMessage<GitRepo> | undefined, b: GitRepo | PlainMessage<GitRepo> | undefined): boolean {\n    return proto3.util.equals(GitRepo, a, b);\n  }\n}\n\n/**\n * @generated from message content.Data\n */\nexport class Data extends Message<Data> {\n  /**\n   * @generated from oneof content.Data.type\n   */\n  type: {\n    /**\n     * @generated from field: content.Text text = 4;\n     */\n    value: Text;\n    case: \"text\";\n  } | {\n    /**\n     * @generated from field: content.File file = 5;\n     */\n    value: File;\n    case: \"file\";\n  } | {\n    /**\n     * @generated from field: content.URL url = 6;\n     */\n    value: URL;\n    case: \"url\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<Data>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Data\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 4, name: \"text\", kind: \"message\", T: Text, oneof: \"type\" },\n    { no: 5, name: \"file\", kind: \"message\", T: File, oneof: \"type\" },\n    { no: 6, name: \"url\", kind: \"message\", T: URL, oneof: \"type\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data {\n    return new Data().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data {\n    return new Data().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data {\n    return new Data().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean {\n    return proto3.util.equals(Data, a, b);\n  }\n}\n\n/**\n * @generated from message content.Normalized\n */\nexport class Normalized extends Message<Normalized> {\n  /**\n   * @generated from oneof content.Normalized.type\n   */\n  type: {\n    /**\n     * @generated from field: content.Article article = 3;\n     */\n    value: Article;\n    case: \"article\";\n  } | {\n    /**\n     * @generated from field: content.HTML html = 4;\n     */\n    value: HTML;\n    case: \"html\";\n  } | {\n    /**\n     * @generated from field: content.Transcript transcript = 6;\n     */\n    value: Transcript;\n    case: \"transcript\";\n  } | {\n    /**\n     * @generated from field: content.ReadMe readme = 7;\n     */\n    value: ReadMe;\n    case: \"readme\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<Normalized>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Normalized\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 3, name: \"article\", kind: \"message\", T: Article, oneof: \"type\" },\n    { no: 4, name: \"html\", kind: \"message\", T: HTML, oneof: \"type\" },\n    { no: 6, name: \"transcript\", kind: \"message\", T: Transcript, oneof: \"type\" },\n    { no: 7, name: \"readme\", kind: \"message\", T: ReadMe, oneof: \"type\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Normalized {\n    return new Normalized().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Normalized {\n    return new Normalized().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Normalized {\n    return new Normalized().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Normalized | PlainMessage<Normalized> | undefined, b: Normalized | PlainMessage<Normalized> | undefined): boolean {\n    return proto3.util.equals(Normalized, a, b);\n  }\n}\n\n/**\n * @generated from message content.Transformed\n */\nexport class Transformed extends Message<Transformed> {\n  /**\n   * @generated from oneof content.Transformed.type\n   */\n  type: {\n    /**\n     * @generated from field: content.Summary summary = 1;\n     */\n    value: Summary;\n    case: \"summary\";\n  } | {\n    /**\n     * @generated from field: content.Categories categories = 2;\n     */\n    value: Categories;\n    case: \"categories\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<Transformed>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Transformed\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"summary\", kind: \"message\", T: Summary, oneof: \"type\" },\n    { no: 2, name: \"categories\", kind: \"message\", T: Categories, oneof: \"type\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transformed {\n    return new Transformed().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transformed {\n    return new Transformed().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transformed {\n    return new Transformed().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Transformed | PlainMessage<Transformed> | undefined, b: Transformed | PlainMessage<Transformed> | undefined): boolean {\n    return proto3.util.equals(Transformed, a, b);\n  }\n}\n\n/**\n * @generated from message content.Article\n */\nexport class Article extends Message<Article> {\n  /**\n   * @generated from field: string title = 1;\n   */\n  title = \"\";\n\n  /**\n   * @generated from field: string author = 2;\n   */\n  author = \"\";\n\n  /**\n   * @generated from field: int32 length = 3;\n   */\n  length = 0;\n\n  /**\n   * @generated from field: string excerpt = 4;\n   */\n  excerpt = \"\";\n\n  /**\n   * @generated from field: string site_name = 5;\n   */\n  siteName = \"\";\n\n  /**\n   * @generated from field: string image = 6;\n   */\n  image = \"\";\n\n  /**\n   * @generated from field: string favicon = 7;\n   */\n  favicon = \"\";\n\n  /**\n   * @generated from field: string text = 8;\n   */\n  text = \"\";\n\n  constructor(data?: PartialMessage<Article>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Article\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"title\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"author\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"length\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 4, name: \"excerpt\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"site_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"image\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"favicon\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Article {\n    return new Article().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Article {\n    return new Article().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Article {\n    return new Article().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Article | PlainMessage<Article> | undefined, b: Article | PlainMessage<Article> | undefined): boolean {\n    return proto3.util.equals(Article, a, b);\n  }\n}\n\n/**\n * @generated from message content.HTML\n */\nexport class HTML extends Message<HTML> {\n  /**\n   * @generated from field: string html = 1;\n   */\n  html = \"\";\n\n  constructor(data?: PartialMessage<HTML>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.HTML\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"html\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HTML {\n    return new HTML().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HTML {\n    return new HTML().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HTML {\n    return new HTML().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: HTML | PlainMessage<HTML> | undefined, b: HTML | PlainMessage<HTML> | undefined): boolean {\n    return proto3.util.equals(HTML, a, b);\n  }\n}\n\n/**\n * @generated from message content.ReadMe\n */\nexport class ReadMe extends Message<ReadMe> {\n  /**\n   * @generated from field: string data = 1;\n   */\n  data = \"\";\n\n  constructor(data?: PartialMessage<ReadMe>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.ReadMe\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"data\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadMe {\n    return new ReadMe().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadMe {\n    return new ReadMe().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadMe {\n    return new ReadMe().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadMe | PlainMessage<ReadMe> | undefined, b: ReadMe | PlainMessage<ReadMe> | undefined): boolean {\n    return proto3.util.equals(ReadMe, a, b);\n  }\n}\n\n/**\n * @generated from message content.Summary\n */\nexport class Summary extends Message<Summary> {\n  /**\n   * @generated from field: string summary = 1;\n   */\n  summary = \"\";\n\n  constructor(data?: PartialMessage<Summary>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Summary\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"summary\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Summary {\n    return new Summary().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Summary {\n    return new Summary().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Summary {\n    return new Summary().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Summary | PlainMessage<Summary> | undefined, b: Summary | PlainMessage<Summary> | undefined): boolean {\n    return proto3.util.equals(Summary, a, b);\n  }\n}\n\n/**\n * @generated from message content.Categories\n */\nexport class Categories extends Message<Categories> {\n  /**\n   * @generated from field: repeated string categories = 1;\n   */\n  categories: string[] = [];\n\n  constructor(data?: PartialMessage<Categories>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Categories\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"categories\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Categories {\n    return new Categories().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Categories {\n    return new Categories().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Categories {\n    return new Categories().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Categories | PlainMessage<Categories> | undefined, b: Categories | PlainMessage<Categories> | undefined): boolean {\n    return proto3.util.equals(Categories, a, b);\n  }\n}\n\n/**\n * @generated from message content.File\n */\nexport class File extends Message<File> {\n  /**\n   * @generated from field: string file = 1;\n   */\n  file = \"\";\n\n  /**\n   * @generated from field: bytes data = 2;\n   */\n  data = new Uint8Array(0);\n\n  /**\n   * @generated from field: string url = 3;\n   */\n  url = \"\";\n\n  constructor(data?: PartialMessage<File>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.File\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"file\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"data\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {\n    return new File().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {\n    return new File().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {\n    return new File().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {\n    return proto3.util.equals(File, a, b);\n  }\n}\n\n/**\n * @generated from message content.Text\n */\nexport class Text extends Message<Text> {\n  /**\n   * @generated from field: string data = 1;\n   */\n  data = \"\";\n\n  constructor(data?: PartialMessage<Text>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Text\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"data\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Text {\n    return new Text().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Text {\n    return new Text().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Text {\n    return new Text().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Text | PlainMessage<Text> | undefined, b: Text | PlainMessage<Text> | undefined): boolean {\n    return proto3.util.equals(Text, a, b);\n  }\n}\n\n/**\n * @generated from message content.URL\n */\nexport class URL extends Message<URL> {\n  /**\n   * @generated from field: string url = 1;\n   */\n  url = \"\";\n\n  /**\n   * @generated from field: bool crawl = 2;\n   */\n  crawl = false;\n\n  /**\n   * @generated from field: string title = 3;\n   */\n  title = \"\";\n\n  constructor(data?: PartialMessage<URL>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.URL\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"crawl\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"title\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): URL {\n    return new URL().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): URL {\n    return new URL().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): URL {\n    return new URL().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: URL | PlainMessage<URL> | undefined, b: URL | PlainMessage<URL> | undefined): boolean {\n    return proto3.util.equals(URL, a, b);\n  }\n}\n\n/**\n * @generated from message content.Token\n */\nexport class Token extends Message<Token> {\n  /**\n   * @generated from field: uint32 id = 1;\n   */\n  id = 0;\n\n  /**\n   * @generated from field: uint64 start_time = 2;\n   */\n  startTime = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 end_time = 3;\n   */\n  endTime = protoInt64.zero;\n\n  /**\n   * @generated from field: string text = 4;\n   */\n  text = \"\";\n\n  /**\n   * @generated from field: string p = 5;\n   */\n  p = \"\";\n\n  constructor(data?: PartialMessage<Token>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Token\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"start_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 3, name: \"end_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 4, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"p\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Token {\n    return new Token().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Token {\n    return new Token().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Token {\n    return new Token().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Token | PlainMessage<Token> | undefined, b: Token | PlainMessage<Token> | undefined): boolean {\n    return proto3.util.equals(Token, a, b);\n  }\n}\n\n/**\n * @generated from message content.Segment\n */\nexport class Segment extends Message<Segment> {\n  /**\n   * @generated from field: uint32 num = 1;\n   */\n  num = 0;\n\n  /**\n   * @generated from field: repeated content.Token tokens = 2;\n   */\n  tokens: Token[] = [];\n\n  /**\n   * @generated from field: string text = 3;\n   */\n  text = \"\";\n\n  /**\n   * @generated from field: uint64 start_time = 4;\n   */\n  startTime = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 end_time = 5;\n   */\n  endTime = protoInt64.zero;\n\n  constructor(data?: PartialMessage<Segment>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Segment\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"num\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"tokens\", kind: \"message\", T: Token, repeated: true },\n    { no: 3, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"start_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 5, name: \"end_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Segment {\n    return new Segment().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Segment {\n    return new Segment().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Segment {\n    return new Segment().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Segment | PlainMessage<Segment> | undefined, b: Segment | PlainMessage<Segment> | undefined): boolean {\n    return proto3.util.equals(Segment, a, b);\n  }\n}\n\n/**\n * @generated from message content.Transcript\n */\nexport class Transcript extends Message<Transcript> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: string name = 2;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: repeated content.Segment segments = 3;\n   */\n  segments: Segment[] = [];\n\n  constructor(data?: PartialMessage<Transcript>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"content.Transcript\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"segments\", kind: \"message\", T: Segment, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transcript {\n    return new Transcript().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transcript {\n    return new Transcript().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transcript {\n    return new Transcript().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Transcript | PlainMessage<Transcript> | undefined, b: Transcript | PlainMessage<Transcript> | undefined): boolean {\n    return proto3.util.equals(Transcript, a, b);\n  }\n}\n\n", "// @generated by protoc-gen-es v1.3.3 with parameter \"target=ts\"\n// @generated from file protoflow.proto (package protoflow, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3, protoInt64 } from \"@bufbuild/protobuf\";\nimport { Content, Segment as Segment$1 } from \"./content/content_pb.js\";\n\n/**\n * @generated from message protoflow.AnalyzeConversationRequest\n */\nexport class AnalyzeConversationRequest extends Message<AnalyzeConversationRequest> {\n  /**\n   * @generated from field: string text = 1;\n   */\n  text = \"\";\n\n  constructor(data?: PartialMessage<AnalyzeConversationRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.AnalyzeConversationRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeConversationRequest {\n    return new AnalyzeConversationRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeConversationRequest {\n    return new AnalyzeConversationRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeConversationRequest {\n    return new AnalyzeConversationRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: AnalyzeConversationRequest | PlainMessage<AnalyzeConversationRequest> | undefined, b: AnalyzeConversationRequest | PlainMessage<AnalyzeConversationRequest> | undefined): boolean {\n    return proto3.util.equals(AnalyzeConversationRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.GenerateImagesRequest\n */\nexport class GenerateImagesRequest extends Message<GenerateImagesRequest> {\n  /**\n   * @generated from field: string prompt = 1;\n   */\n  prompt = \"\";\n\n  constructor(data?: PartialMessage<GenerateImagesRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.GenerateImagesRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"prompt\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateImagesRequest {\n    return new GenerateImagesRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateImagesRequest {\n    return new GenerateImagesRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateImagesRequest {\n    return new GenerateImagesRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GenerateImagesRequest | PlainMessage<GenerateImagesRequest> | undefined, b: GenerateImagesRequest | PlainMessage<GenerateImagesRequest> | undefined): boolean {\n    return proto3.util.equals(GenerateImagesRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.GenerateImagesResponse\n */\nexport class GenerateImagesResponse extends Message<GenerateImagesResponse> {\n  /**\n   * @generated from field: repeated string images = 1;\n   */\n  images: string[] = [];\n\n  constructor(data?: PartialMessage<GenerateImagesResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.GenerateImagesResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"images\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateImagesResponse {\n    return new GenerateImagesResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateImagesResponse {\n    return new GenerateImagesResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateImagesResponse {\n    return new GenerateImagesResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GenerateImagesResponse | PlainMessage<GenerateImagesResponse> | undefined, b: GenerateImagesResponse | PlainMessage<GenerateImagesResponse> | undefined): boolean {\n    return proto3.util.equals(GenerateImagesResponse, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.DeleteSessionRequest\n */\nexport class DeleteSessionRequest extends Message<DeleteSessionRequest> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  constructor(data?: PartialMessage<DeleteSessionRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.DeleteSessionRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSessionRequest {\n    return new DeleteSessionRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSessionRequest {\n    return new DeleteSessionRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSessionRequest {\n    return new DeleteSessionRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DeleteSessionRequest | PlainMessage<DeleteSessionRequest> | undefined, b: DeleteSessionRequest | PlainMessage<DeleteSessionRequest> | undefined): boolean {\n    return proto3.util.equals(DeleteSessionRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.Prompt\n */\nexport class Prompt extends Message<Prompt> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: string text = 2;\n   */\n  text = \"\";\n\n  constructor(data?: PartialMessage<Prompt>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.Prompt\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Prompt {\n    return new Prompt().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Prompt {\n    return new Prompt().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Prompt {\n    return new Prompt().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Prompt | PlainMessage<Prompt> | undefined, b: Prompt | PlainMessage<Prompt> | undefined): boolean {\n    return proto3.util.equals(Prompt, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.GetPromptsRequest\n */\nexport class GetPromptsRequest extends Message<GetPromptsRequest> {\n  constructor(data?: PartialMessage<GetPromptsRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.GetPromptsRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPromptsRequest {\n    return new GetPromptsRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPromptsRequest {\n    return new GetPromptsRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPromptsRequest {\n    return new GetPromptsRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetPromptsRequest | PlainMessage<GetPromptsRequest> | undefined, b: GetPromptsRequest | PlainMessage<GetPromptsRequest> | undefined): boolean {\n    return proto3.util.equals(GetPromptsRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.GetPromptsResponse\n */\nexport class GetPromptsResponse extends Message<GetPromptsResponse> {\n  /**\n   * @generated from field: repeated protoflow.Prompt prompts = 1;\n   */\n  prompts: Prompt[] = [];\n\n  constructor(data?: PartialMessage<GetPromptsResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.GetPromptsResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"prompts\", kind: \"message\", T: Prompt, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPromptsResponse {\n    return new GetPromptsResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPromptsResponse {\n    return new GetPromptsResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPromptsResponse {\n    return new GetPromptsResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetPromptsResponse | PlainMessage<GetPromptsResponse> | undefined, b: GetPromptsResponse | PlainMessage<GetPromptsResponse> | undefined): boolean {\n    return proto3.util.equals(GetPromptsResponse, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.InferRequest\n */\nexport class InferRequest extends Message<InferRequest> {\n  /**\n   * @generated from field: string prompt = 1;\n   */\n  prompt = \"\";\n\n  /**\n   * @generated from field: repeated string text = 2;\n   */\n  text: string[] = [];\n\n  constructor(data?: PartialMessage<InferRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.InferRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"prompt\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InferRequest {\n    return new InferRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InferRequest {\n    return new InferRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InferRequest {\n    return new InferRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: InferRequest | PlainMessage<InferRequest> | undefined, b: InferRequest | PlainMessage<InferRequest> | undefined): boolean {\n    return proto3.util.equals(InferRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.InferResponse\n */\nexport class InferResponse extends Message<InferResponse> {\n  /**\n   * @generated from field: string text = 1;\n   */\n  text = \"\";\n\n  constructor(data?: PartialMessage<InferResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.InferResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InferResponse {\n    return new InferResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InferResponse {\n    return new InferResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InferResponse {\n    return new InferResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: InferResponse | PlainMessage<InferResponse> | undefined, b: InferResponse | PlainMessage<InferResponse> | undefined): boolean {\n    return proto3.util.equals(InferResponse, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.UploadContentRequest\n */\nexport class UploadContentRequest extends Message<UploadContentRequest> {\n  /**\n   * @generated from field: content.Content content = 1;\n   */\n  content?: Content;\n\n  constructor(data?: PartialMessage<UploadContentRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.UploadContentRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"content\", kind: \"message\", T: Content },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadContentRequest {\n    return new UploadContentRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadContentRequest {\n    return new UploadContentRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadContentRequest {\n    return new UploadContentRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UploadContentRequest | PlainMessage<UploadContentRequest> | undefined, b: UploadContentRequest | PlainMessage<UploadContentRequest> | undefined): boolean {\n    return proto3.util.equals(UploadContentRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.UploadContentResponse\n */\nexport class UploadContentResponse extends Message<UploadContentResponse> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  constructor(data?: PartialMessage<UploadContentResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.UploadContentResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadContentResponse {\n    return new UploadContentResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadContentResponse {\n    return new UploadContentResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadContentResponse {\n    return new UploadContentResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UploadContentResponse | PlainMessage<UploadContentResponse> | undefined, b: UploadContentResponse | PlainMessage<UploadContentResponse> | undefined): boolean {\n    return proto3.util.equals(UploadContentResponse, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.GetSessionRequest\n */\nexport class GetSessionRequest extends Message<GetSessionRequest> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  constructor(data?: PartialMessage<GetSessionRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.GetSessionRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionRequest {\n    return new GetSessionRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionRequest {\n    return new GetSessionRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionRequest {\n    return new GetSessionRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetSessionRequest | PlainMessage<GetSessionRequest> | undefined, b: GetSessionRequest | PlainMessage<GetSessionRequest> | undefined): boolean {\n    return proto3.util.equals(GetSessionRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.GetSessionResponse\n */\nexport class GetSessionResponse extends Message<GetSessionResponse> {\n  /**\n   * @generated from field: protoflow.Session session = 1;\n   */\n  session?: Session;\n\n  constructor(data?: PartialMessage<GetSessionResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.GetSessionResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"session\", kind: \"message\", T: Session },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionResponse {\n    return new GetSessionResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionResponse {\n    return new GetSessionResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionResponse {\n    return new GetSessionResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetSessionResponse | PlainMessage<GetSessionResponse> | undefined, b: GetSessionResponse | PlainMessage<GetSessionResponse> | undefined): boolean {\n    return proto3.util.equals(GetSessionResponse, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.GetSessionsRequest\n */\nexport class GetSessionsRequest extends Message<GetSessionsRequest> {\n  /**\n   * @generated from field: uint64 page = 1;\n   */\n  page = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 limit = 2;\n   */\n  limit = protoInt64.zero;\n\n  constructor(data?: PartialMessage<GetSessionsRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.GetSessionsRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"page\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 2, name: \"limit\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionsRequest {\n    return new GetSessionsRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionsRequest {\n    return new GetSessionsRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionsRequest {\n    return new GetSessionsRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetSessionsRequest | PlainMessage<GetSessionsRequest> | undefined, b: GetSessionsRequest | PlainMessage<GetSessionsRequest> | undefined): boolean {\n    return proto3.util.equals(GetSessionsRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.GetSessionsResponse\n */\nexport class GetSessionsResponse extends Message<GetSessionsResponse> {\n  /**\n   * @generated from field: repeated protoflow.Session sessions = 1;\n   */\n  sessions: Session[] = [];\n\n  constructor(data?: PartialMessage<GetSessionsResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.GetSessionsResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sessions\", kind: \"message\", T: Session, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionsResponse {\n    return new GetSessionsResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionsResponse {\n    return new GetSessionsResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionsResponse {\n    return new GetSessionsResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetSessionsResponse | PlainMessage<GetSessionsResponse> | undefined, b: GetSessionsResponse | PlainMessage<GetSessionsResponse> | undefined): boolean {\n    return proto3.util.equals(GetSessionsResponse, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.Token\n */\nexport class Token extends Message<Token> {\n  /**\n   * @generated from field: uint32 id = 1;\n   */\n  id = 0;\n\n  /**\n   * @generated from field: uint64 start_time = 2;\n   */\n  startTime = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 end_time = 3;\n   */\n  endTime = protoInt64.zero;\n\n  /**\n   * @generated from field: string text = 4;\n   */\n  text = \"\";\n\n  /**\n   * @generated from field: string p = 5;\n   */\n  p = \"\";\n\n  constructor(data?: PartialMessage<Token>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.Token\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"start_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 3, name: \"end_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 4, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"p\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Token {\n    return new Token().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Token {\n    return new Token().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Token {\n    return new Token().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Token | PlainMessage<Token> | undefined, b: Token | PlainMessage<Token> | undefined): boolean {\n    return proto3.util.equals(Token, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.Segment\n */\nexport class Segment extends Message<Segment> {\n  /**\n   * @generated from field: uint32 num = 1;\n   */\n  num = 0;\n\n  /**\n   * @generated from field: repeated protoflow.Token tokens = 2;\n   */\n  tokens: Token[] = [];\n\n  /**\n   * @generated from field: string text = 3;\n   */\n  text = \"\";\n\n  /**\n   * @generated from field: uint64 start_time = 4;\n   */\n  startTime = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 end_time = 5;\n   */\n  endTime = protoInt64.zero;\n\n  constructor(data?: PartialMessage<Segment>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.Segment\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"num\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"tokens\", kind: \"message\", T: Token, repeated: true },\n    { no: 3, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"start_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 5, name: \"end_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Segment {\n    return new Segment().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Segment {\n    return new Segment().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Segment {\n    return new Segment().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Segment | PlainMessage<Segment> | undefined, b: Segment | PlainMessage<Segment> | undefined): boolean {\n    return proto3.util.equals(Segment, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.Session\n */\nexport class Session extends Message<Session> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: string name = 2;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: repeated protoflow.Segment segments = 3;\n   */\n  segments: Segment[] = [];\n\n  constructor(data?: PartialMessage<Session>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.Session\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"segments\", kind: \"message\", T: Segment, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Session {\n    return new Session().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Session {\n    return new Session().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Session {\n    return new Session().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Session | PlainMessage<Session> | undefined, b: Session | PlainMessage<Session> | undefined): boolean {\n    return proto3.util.equals(Session, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.TranscriptionRequest\n */\nexport class TranscriptionRequest extends Message<TranscriptionRequest> {\n  /**\n   * @generated from field: string file_path = 14;\n   */\n  filePath = \"\";\n\n  /**\n   * Path to the model file\n   *\n   * @generated from field: string model = 1;\n   */\n  model = \"\";\n\n  /**\n   * Spoken language\n   *\n   * @generated from field: string language = 2;\n   */\n  language = \"\";\n\n  /**\n   * Translate from source language to English\n   *\n   * @generated from field: bool translate = 3;\n   */\n  translate = false;\n\n  /**\n   * Time offset in nanoseconds to match Go's time.Duration\n   *\n   * @generated from field: int64 offset = 4;\n   */\n  offset = protoInt64.zero;\n\n  /**\n   * Duration of audio to process in nanoseconds\n   *\n   * @generated from field: int64 duration = 5;\n   */\n  duration = protoInt64.zero;\n\n  /**\n   * Number of threads to use\n   *\n   * @generated from field: uint32 threads = 6;\n   */\n  threads = 0;\n\n  /**\n   * Enable speedup\n   *\n   * @generated from field: bool speedup = 7;\n   */\n  speedup = false;\n\n  /**\n   * Maximum segment length in characters\n   *\n   * @generated from field: uint32 max_len = 8;\n   */\n  maxLen = 0;\n\n  /**\n   * Maximum tokens per segment\n   *\n   * @generated from field: uint32 max_tokens = 9;\n   */\n  maxTokens = 0;\n\n  /**\n   * Maximum segment score\n   *\n   * @generated from field: double word_threshold = 10;\n   */\n  wordThreshold = 0;\n\n  /**\n   * Display tokens\n   *\n   * @generated from field: bool tokens = 11;\n   */\n  tokens = false;\n\n  /**\n   * Colorize tokens\n   *\n   * @generated from field: bool colorize = 12;\n   */\n  colorize = false;\n\n  /**\n   * Output format (srt, none or leave as empty string)\n   *\n   * @generated from field: string out = 13;\n   */\n  out = \"\";\n\n  constructor(data?: PartialMessage<TranscriptionRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.TranscriptionRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 14, name: \"file_path\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 1, name: \"model\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"language\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"translate\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"offset\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 5, name: \"duration\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 6, name: \"threads\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"speedup\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 8, name: \"max_len\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 9, name: \"max_tokens\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 10, name: \"word_threshold\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 11, name: \"tokens\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 12, name: \"colorize\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 13, name: \"out\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TranscriptionRequest {\n    return new TranscriptionRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TranscriptionRequest {\n    return new TranscriptionRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TranscriptionRequest {\n    return new TranscriptionRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TranscriptionRequest | PlainMessage<TranscriptionRequest> | undefined, b: TranscriptionRequest | PlainMessage<TranscriptionRequest> | undefined): boolean {\n    return proto3.util.equals(TranscriptionRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.RegisterFlags\n */\nexport class RegisterFlags extends Message<RegisterFlags> {\n  constructor(data?: PartialMessage<RegisterFlags>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.RegisterFlags\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterFlags {\n    return new RegisterFlags().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterFlags {\n    return new RegisterFlags().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterFlags {\n    return new RegisterFlags().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RegisterFlags | PlainMessage<RegisterFlags> | undefined, b: RegisterFlags | PlainMessage<RegisterFlags> | undefined): boolean {\n    return proto3.util.equals(RegisterFlags, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.OCRText\n */\nexport class OCRText extends Message<OCRText> {\n  /**\n   * @generated from field: string text = 1;\n   */\n  text = \"\";\n\n  constructor(data?: PartialMessage<OCRText>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.OCRText\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OCRText {\n    return new OCRText().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OCRText {\n    return new OCRText().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OCRText {\n    return new OCRText().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: OCRText | PlainMessage<OCRText> | undefined, b: OCRText | PlainMessage<OCRText> | undefined): boolean {\n    return proto3.util.equals(OCRText, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.Image\n */\nexport class Image extends Message<Image> {\n  /**\n   * @generated from field: bytes image = 1;\n   */\n  image = new Uint8Array(0);\n\n  constructor(data?: PartialMessage<Image>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.Image\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"image\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Image {\n    return new Image().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Image {\n    return new Image().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Image {\n    return new Image().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Image | PlainMessage<Image> | undefined, b: Image | PlainMessage<Image> | undefined): boolean {\n    return proto3.util.equals(Image, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.ConvertFileRequest\n */\nexport class ConvertFileRequest extends Message<ConvertFileRequest> {\n  /**\n   * @generated from field: string from = 1;\n   */\n  from = \"\";\n\n  /**\n   * @generated from field: string to = 2;\n   */\n  to = \"\";\n\n  constructor(data?: PartialMessage<ConvertFileRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.ConvertFileRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"from\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"to\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConvertFileRequest {\n    return new ConvertFileRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConvertFileRequest {\n    return new ConvertFileRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConvertFileRequest {\n    return new ConvertFileRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ConvertFileRequest | PlainMessage<ConvertFileRequest> | undefined, b: ConvertFileRequest | PlainMessage<ConvertFileRequest> | undefined): boolean {\n    return proto3.util.equals(ConvertFileRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.ChatRequest\n */\nexport class ChatRequest extends Message<ChatRequest> {\n  /**\n   * @generated from field: int32 capture_device = 1;\n   */\n  captureDevice = 0;\n\n  constructor(data?: PartialMessage<ChatRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.ChatRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"capture_device\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatRequest {\n    return new ChatRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatRequest {\n    return new ChatRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatRequest {\n    return new ChatRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ChatRequest | PlainMessage<ChatRequest> | undefined, b: ChatRequest | PlainMessage<ChatRequest> | undefined): boolean {\n    return proto3.util.equals(ChatRequest, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.ChatResponse\n */\nexport class ChatResponse extends Message<ChatResponse> {\n  /**\n   * @generated from field: protoflow.Segment segment = 1;\n   */\n  segment?: Segment;\n\n  constructor(data?: PartialMessage<ChatResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.ChatResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"segment\", kind: \"message\", T: Segment },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatResponse {\n    return new ChatResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatResponse {\n    return new ChatResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatResponse {\n    return new ChatResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ChatResponse | PlainMessage<ChatResponse> | undefined, b: ChatResponse | PlainMessage<ChatResponse> | undefined): boolean {\n    return proto3.util.equals(ChatResponse, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.YouTubeVideo\n */\nexport class YouTubeVideo extends Message<YouTubeVideo> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: string file = 2;\n   */\n  file = \"\";\n\n  constructor(data?: PartialMessage<YouTubeVideo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.YouTubeVideo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"file\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): YouTubeVideo {\n    return new YouTubeVideo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): YouTubeVideo {\n    return new YouTubeVideo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): YouTubeVideo {\n    return new YouTubeVideo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: YouTubeVideo | PlainMessage<YouTubeVideo> | undefined, b: YouTubeVideo | PlainMessage<YouTubeVideo> | undefined): boolean {\n    return proto3.util.equals(YouTubeVideo, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.FilePath\n */\nexport class FilePath extends Message<FilePath> {\n  /**\n   * @generated from field: string file = 1;\n   */\n  file = \"\";\n\n  constructor(data?: PartialMessage<FilePath>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.FilePath\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"file\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilePath {\n    return new FilePath().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilePath {\n    return new FilePath().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilePath {\n    return new FilePath().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: FilePath | PlainMessage<FilePath> | undefined, b: FilePath | PlainMessage<FilePath> | undefined): boolean {\n    return proto3.util.equals(FilePath, a, b);\n  }\n}\n\n/**\n * @generated from message protoflow.YouTubeVideoResponse\n */\nexport class YouTubeVideoResponse extends Message<YouTubeVideoResponse> {\n  /**\n   * @generated from field: string title = 1;\n   */\n  title = \"\";\n\n  /**\n   * @generated from field: protoflow.FilePath file_path = 2;\n   */\n  filePath?: FilePath;\n\n  /**\n   * @generated from field: repeated content.Segment transcript = 3;\n   */\n  transcript: Segment$1[] = [];\n\n  constructor(data?: PartialMessage<YouTubeVideoResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"protoflow.YouTubeVideoResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"title\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"file_path\", kind: \"message\", T: FilePath },\n    { no: 3, name: \"transcript\", kind: \"message\", T: Segment$1, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): YouTubeVideoResponse {\n    return new YouTubeVideoResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): YouTubeVideoResponse {\n    return new YouTubeVideoResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): YouTubeVideoResponse {\n    return new YouTubeVideoResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: YouTubeVideoResponse | PlainMessage<YouTubeVideoResponse> | undefined, b: YouTubeVideoResponse | PlainMessage<YouTubeVideoResponse> | undefined): boolean {\n    return proto3.util.equals(YouTubeVideoResponse, a, b);\n  }\n}\n\n", "// @generated by protoc-gen-es v1.3.3 with parameter \"target=ts\"\n// @generated from file ai.proto (package ai, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3 } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from message ai.AnalyzeConversationResponse\n */\nexport class AnalyzeConversationResponse extends Message<AnalyzeConversationResponse> {\n  /**\n   * Phone numbers of the participants\n   *\n   * @generated from field: repeated string phone_numbers = 1;\n   */\n  phoneNumbers: string[] = [];\n\n  /**\n   * The summary of the conversation\n   *\n   * @generated from field: string summary = 2;\n   */\n  summary = \"\";\n\n  /**\n   * Based on the content of the conversation, the system will generate a list of questions\n   *\n   * @generated from field: repeated string questions = 3;\n   */\n  questions: string[] = [];\n\n  constructor(data?: PartialMessage<AnalyzeConversationResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"ai.AnalyzeConversationResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"phone_numbers\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 2, name: \"summary\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"questions\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeConversationResponse {\n    return new AnalyzeConversationResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeConversationResponse {\n    return new AnalyzeConversationResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeConversationResponse {\n    return new AnalyzeConversationResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: AnalyzeConversationResponse | PlainMessage<AnalyzeConversationResponse> | undefined, b: AnalyzeConversationResponse | PlainMessage<AnalyzeConversationResponse> | undefined): boolean {\n    return proto3.util.equals(AnalyzeConversationResponse, a, b);\n  }\n}\n\n/**\n * @generated from message ai.AnalyzeContent\n */\nexport class AnalyzeContent extends Message<AnalyzeContent> {\n  /**\n   * Potential categories for the content in the form: category/subcategory/other-category. The category is all lowercase and spaces are replaced with dashes.\n   *\n   * @generated from field: repeated string categories = 1;\n   */\n  categories: string[] = [];\n\n  constructor(data?: PartialMessage<AnalyzeContent>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"ai.AnalyzeContent\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"categories\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyzeContent {\n    return new AnalyzeContent().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyzeContent {\n    return new AnalyzeContent().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyzeContent {\n    return new AnalyzeContent().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: AnalyzeContent | PlainMessage<AnalyzeContent> | undefined, b: AnalyzeContent | PlainMessage<AnalyzeContent> | undefined): boolean {\n    return proto3.util.equals(AnalyzeContent, a, b);\n  }\n}\n\n", "// @generated by protoc-gen-connect-es v0.13.0 with parameter \"target=ts\"\n// @generated from file protoflow.proto (package protoflow, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { AnalyzeConversationRequest, ChatRequest, ChatResponse, ConvertFileRequest, DeleteSessionRequest, FilePath, GenerateImagesRequest, GenerateImagesResponse, GetPromptsRequest, GetPromptsResponse, GetSessionRequest, GetSessionResponse, GetSessionsRequest, GetSessionsResponse, InferRequest, InferResponse, Prompt, UploadContentRequest, YouTubeVideo, YouTubeVideoResponse } from \"./protoflow_pb.js\";\nimport { Empty, MethodKind } from \"@bufbuild/protobuf\";\nimport { AnalyzeConversationResponse } from \"./ai_pb.js\";\n\n/**\n * @generated from service protoflow.ProtoflowService\n */\nexport const ProtoflowService = {\n  typeName: \"protoflow.ProtoflowService\",\n  methods: {\n    /**\n     * @generated from rpc protoflow.ProtoflowService.DownloadYouTubeVideo\n     */\n    downloadYouTubeVideo: {\n      name: \"DownloadYouTubeVideo\",\n      I: YouTubeVideo,\n      O: YouTubeVideoResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.GetSessions\n     */\n    getSessions: {\n      name: \"GetSessions\",\n      I: GetSessionsRequest,\n      O: GetSessionsResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.GetSession\n     */\n    getSession: {\n      name: \"GetSession\",\n      I: GetSessionRequest,\n      O: GetSessionResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.DeleteSession\n     */\n    deleteSession: {\n      name: \"DeleteSession\",\n      I: DeleteSessionRequest,\n      O: Empty,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.GetPrompts\n     */\n    getPrompts: {\n      name: \"GetPrompts\",\n      I: GetPromptsRequest,\n      O: GetPromptsResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.NewPrompt\n     */\n    newPrompt: {\n      name: \"NewPrompt\",\n      I: Prompt,\n      O: Prompt,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.UploadContent\n     */\n    uploadContent: {\n      name: \"UploadContent\",\n      I: UploadContentRequest,\n      O: ChatResponse,\n      kind: MethodKind.ServerStreaming,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.Infer\n     */\n    infer: {\n      name: \"Infer\",\n      I: InferRequest,\n      O: InferResponse,\n      kind: MethodKind.ServerStreaming,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.Chat\n     */\n    chat: {\n      name: \"Chat\",\n      I: ChatRequest,\n      O: ChatResponse,\n      kind: MethodKind.ServerStreaming,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.ConvertFile\n     */\n    convertFile: {\n      name: \"ConvertFile\",\n      I: ConvertFileRequest,\n      O: FilePath,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.GenerateImages\n     */\n    generateImages: {\n      name: \"GenerateImages\",\n      I: GenerateImagesRequest,\n      O: GenerateImagesResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc protoflow.ProtoflowService.AnalyzeConversation\n     */\n    analyzeConversation: {\n      name: \"AnalyzeConversation\",\n      I: AnalyzeConversationRequest,\n      O: AnalyzeConversationResponse,\n      kind: MethodKind.Unary,\n    },\n  }\n} as const;\n\n", "// @generated by protoc-gen-connect-es v0.13.0 with parameter \"target=ts\"\n// @generated from file content/content.proto (package content, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Content, ContentIDs, Contents, Query, Results, SetTagsRequest, TagRequest, Tags } from \"./content_pb.js\";\nimport { Empty, MethodKind } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from service content.ContentService\n */\nexport const ContentService = {\n  typeName: \"content.ContentService\",\n  methods: {\n    /**\n     * @generated from rpc content.ContentService.Save\n     */\n    save: {\n      name: \"Save\",\n      I: Contents,\n      O: ContentIDs,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc content.ContentService.Search\n     */\n    search: {\n      name: \"Search\",\n      I: Query,\n      O: Results,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc content.ContentService.Analyze\n     */\n    analyze: {\n      name: \"Analyze\",\n      I: Content,\n      O: Contents,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc content.ContentService.Delete\n     */\n    delete: {\n      name: \"Delete\",\n      I: ContentIDs,\n      O: ContentIDs,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc content.ContentService.GetTags\n     */\n    getTags: {\n      name: \"GetTags\",\n      I: TagRequest,\n      O: Tags,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc content.ContentService.SetTags\n     */\n    setTags: {\n      name: \"SetTags\",\n      I: SetTagsRequest,\n      O: Empty,\n      kind: MethodKind.Unary,\n    },\n  }\n} as const;\n\n", "// @generated by protoc-gen-connect-es v0.13.0 with parameter \"target=ts\"\n// @generated from file user/user.proto (package user, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Config, Group, GroupID, GroupInfoRequest, GroupInvite, Groups, ShareRequest, User } from \"./user_pb.js\";\nimport { Empty, MethodKind } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from service user.UserService\n */\nexport const UserService = {\n  typeName: \"user.UserService\",\n  methods: {\n    /**\n     * @generated from rpc user.UserService.Register\n     */\n    register: {\n      name: \"Register\",\n      I: User,\n      O: User,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.Login\n     */\n    login: {\n      name: \"Login\",\n      I: User,\n      O: User,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.Logout\n     */\n    logout: {\n      name: \"Logout\",\n      I: Empty,\n      O: Empty,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.UpdateConfig\n     */\n    updateConfig: {\n      name: \"UpdateConfig\",\n      I: Config,\n      O: Empty,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.CreateGroupInvite\n     */\n    createGroupInvite: {\n      name: \"CreateGroupInvite\",\n      I: GroupID,\n      O: GroupInvite,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.JoinGroup\n     */\n    joinGroup: {\n      name: \"JoinGroup\",\n      I: GroupInvite,\n      O: Group,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.GroupInfo\n     */\n    groupInfo: {\n      name: \"GroupInfo\",\n      I: GroupInfoRequest,\n      O: Group,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.CreateGroup\n     */\n    createGroup: {\n      name: \"CreateGroup\",\n      I: Group,\n      O: Group,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.GetGroups\n     */\n    getGroups: {\n      name: \"GetGroups\",\n      I: Empty,\n      O: Groups,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.DeleteGroup\n     */\n    deleteGroup: {\n      name: \"DeleteGroup\",\n      I: Group,\n      O: Empty,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc user.UserService.Share\n     */\n    share: {\n      name: \"Share\",\n      I: ShareRequest,\n      O: Empty,\n      kind: MethodKind.Unary,\n    },\n  }\n} as const;\n\n", "type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: Set<{ listener: TListener }>\n\n  constructor() {\n    this.listeners = new Set()\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    const identity = { listener }\n    this.listeners.add(identity)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners.delete(identity)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.size > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n", "import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in window\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>,\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1) ? [{ ...arg2, queryKey: arg1 }, arg3] : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs<\n  TFilters extends MutationFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1)\n      ? [{ ...arg2, mutationKey: arg1 }, arg3]\n      : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(a, b)\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void) {\n  sleep(0).then(callback)\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n  return\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual?.(prevData, data)) {\n    return prevData as TData\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data)\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n", "import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.focused !== focused\n    if (changed) {\n      this.focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(({ listener }) => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState,\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n", "import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nconst onlineEvents = ['online', 'offline'] as const\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        onlineEvents.forEach((event) => {\n          window.addEventListener(event, listener, false)\n        })\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach((event) => {\n            window.removeEventListener(event, listener)\n          })\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    const changed = this.online !== online\n\n    if (changed) {\n      this.online = online\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(({ listener }) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n", "import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport type { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => boolean) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        const canContinue = isResolved || !shouldPause()\n        if (canContinue) {\n          continueResolve(value)\n        }\n        return canContinue\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n            return\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn?.()\n      return didContinue ? promise : Promise.resolve()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n", "export interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\nexport const defaultLogger: Logger = console\n", "import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends unknown[]> = (...args: T) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends unknown[]>(\n    callback: BatchCallsCallback<T>,\n  ): BatchCallsCallback<T> => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n", "import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n", "import { getAbortController, noop, replaceData, timeUntilStale } from './utils'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type {\n  CancelOptions,\n  FetchStatus,\n  InitialDataFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Logger } from './logger'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some((observer) => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some((observer) => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject(\n          `Missing queryFn for queryKey '${this.options.queryHash}'`,\n        )\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n        this.cache.config.onSettled?.(\n          this.state.data,\n          error,\n          this as Query<any, any, any, any>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.cache.config.onSettled?.(\n          data,\n          this.state.error,\n          this as Query<any, any, any, any>,\n        )\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error as TError,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = typeof data !== 'undefined'\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n", "import { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from './utils'\nimport { Query } from './query'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport type { QueryFilters } from './utils'\nimport type { Action, QueryState } from './query'\nimport type { NotifyEvent, QueryKey, QueryOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSettled?: (\n    data: unknown | undefined,\n    error: unknown | null,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\nexport type QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter((x) => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find((query) => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter((query) => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(({ listener }) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n", "import { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, createRetryer } from './retryer'\nimport type { MutationMeta, MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Logger } from './logger'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.defaultOptions = config.defaultOptions\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options?: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return this.retryer?.continue() ?? this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        await this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      // Notify cache callback\n      await this.mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.mutationCache.config.onSettled?.(\n          undefined,\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n", "import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: unknown | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n  private resuming: Promise<unknown> | undefined\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter((x) => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find((mutation) => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(({ listener }) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    this.resuming = (this.resuming ?? Promise.resolve())\n      .then(() => {\n        const pausedMutations = this.mutations.filter((x) => x.state.isPaused)\n        return notifyManager.batch(() =>\n          pausedMutations.reduce(\n            (promise, mutation) =>\n              promise.then(() => mutation.continue().catch(noop)),\n            Promise.resolve() as Promise<unknown>,\n          ),\n        )\n      })\n      .then(() => {\n        this.resuming = undefined\n      })\n\n    return this.resuming\n  }\n}\n", "import type { QueryBehavior } from './query'\n\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData,\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: (context) => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal?.aborted) {\n                cancelled = true\n              } else {\n                context.signal?.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn ||\n          (() =>\n            Promise.reject(\n              `Missing queryFn for queryKey '${context.options.queryHash}'`,\n            ))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean,\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean,\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then((page) =>\n            buildNewPages(pages, param, page, previous),\n          )\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then((pages) => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i]),\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then((pages) => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n  return\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n  return\n}\n", "import {\n  functionalUpdate,\n  hashQueryKey,\n  hashQueryKeyByOptions,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { defaultLogger } from './logger'\nimport type { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport type { Logger } from './logger'\nimport type { QueryState } from './query'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryClientConfig,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n  WithRequired,\n} from './types'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private mountCount: number\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n    this.mountCount = 0\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\n        `Passing a custom logger has been deprecated and will be removed in the next major version.`,\n      )\n    }\n  }\n\n  mount(): void {\n    this.mountCount++\n    if (this.mountCount !== 1) return\n\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.mountCount--\n    if (this.mountCount !== 0) return\n\n    this.unsubscribeFocus?.()\n    this.unsubscribeFocus = undefined\n\n    this.unsubscribeOnline?.()\n    this.unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): TQueryFnData | undefined {\n    return this.queryCache.find<TQueryFnData>(queryKey, filters)?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: WithRequired<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: Omit<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: Omit<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey' | 'queryFn'\n    >,\n  ): Promise<TData>\n  ensureQueryData<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | WithRequired<\n          FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n          'queryKey'\n        >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const cachedData = this.getQueryData<TData>(parsedOptions.queryKey!)\n\n    return cachedData\n      ? Promise.resolve(cachedData)\n      : this.fetchQuery(parsedOptions)\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): TQueryFnData | undefined {\n    const query = this.queryCache.find<TQueryFnData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.queryCache.find<TQueryFnData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions,\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(cancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          }),\n        ),\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>,\n  ): void {\n    const result = this.queryDefaults.find(\n      (x) => hashQueryKey(queryKey) === hashQueryKey(x.queryKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find((x) =>\n      partialMatchKey(queryKey, x.queryKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter((x) =>\n        partialMatchKey(queryKey, x.queryKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several query defaults match with key '${JSON.stringify(\n            queryKey,\n          )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>,\n  ): void {\n    const result = this.mutationDefaults.find(\n      (x) => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find((x) =>\n      partialMatchKey(mutationKey, x.mutationKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter((x) =>\n        partialMatchKey(mutationKey, x.mutationKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n            mutationKey,\n          )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey,\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n", "import {\n  createConnectTransport,\n} from \"@bufbuild/connect-web\";\nimport {createPromiseClient} from \"@bufbuild/connect\";\nimport { ProtoflowService } from \"@/rpc/protoflow_connect\";\nimport { ContentService } from \"@/rpc/content/content_connect\";\nimport { UserService } from \"./rpc/user/user_connect\";\nimport {QueryClient} from \"@tanstack/react-query\";\n\nexport const baseURL = process.env.BASE_URL;\n\nexport const queryClient = new QueryClient();\nexport const transport = createConnectTransport({\n  baseUrl: `${baseURL}/api` || 'error',\n  // credentials: \"include\",\n});\n\nexport const projectService = createPromiseClient(ProtoflowService, transport);\nexport const contentService = createPromiseClient(ContentService, transport);\nexport const userService = createPromiseClient(UserService, transport);\n", "\nexport type TabContent = {\n    from: string;\n    to: string;\n}\nexport const contentGet = 'content/get';\nexport const contentSave = 'content/save';\n", "/// <reference types=\"chrome\"/>\nimport {contentService, projectService, userService} from \"@/service\";\nimport {urlContent} from \"./util\";\nimport {contentGet, contentSave, TabContent} from \"./shared\";\nimport { Content } from \"@/rpc/content/content_pb\";\n\nlet tabContent: TabContent|undefined = undefined;\n\nconst chromeExt = () => {\n    async function saveContent(content: Content) {\n        try {\n            const resp = await contentService.save({\n                content: content,\n                related: []\n            });\n            console.log(resp);\n        } catch (e) {\n            console.error('failed to save', e)\n        }\n    }\n\n    (\n        async () => {\n            const resp = await userService.login({}, {});\n            // TODO breadchris I think this has the whitelist config in it\n            console.log(resp);\n        }\n    )()\n\n    chrome.runtime.onInstalled.addListener(function() {\n        console.log('Extension Installed');\n    });\n\n    chrome.runtime.onStartup.addListener(function() {\n        console.log('Extension Started');\n    })\n\n    chrome.webNavigation.onCompleted.addListener((details) => {\n        if (details.url && details.frameType === \"outermost_frame\") {\n            // console.log(`Visited URL: ${details.url}`);\n        }\n    });\n\n    function getTabDetails(tabId: number): Promise<chrome.tabs.Tab | undefined> {\n        return new Promise((resolve, reject) => {\n            chrome.tabs.get(tabId, tab => {\n                if (chrome.runtime.lastError) {\n                    // Ignore errors, sometimes tabs might have already closed before we can fetch details\n                    resolve(undefined);\n                } else {\n                    resolve(tab);\n                }\n            });\n        });\n    }\n\n    chrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {\n        // TODO breadchris replace with a typed action\n        if (message.action === contentGet) {\n            sendResponse({ data: tabContent });\n            tabContent = undefined;\n        }\n        if (message.action === contentSave) {\n            const content = Content.fromJson(message.data);\n            try {\n                await saveContent(content);\n            } catch (e) {\n                sendResponse({ data: { error: e } });\n                return;\n            }\n            sendResponse({ data: {} });\n        }\n    });\n\n    chrome.tabs.onCreated.addListener(async (tab) => {\n        if (!tab.id) {\n            return;\n        }\n        // console.log(`Tab with ID ${tab.id} has been created.`);\n        const tabDetails = await getTabDetails(tab.id);\n        if (tabDetails) {\n        }\n    })\n\n    chrome.tabs.onRemoved.addListener(async (tabId, removeInfo) => {\n        // console.log(`Tab with ID ${tabId} has been closed.`);\n        const tabDetails = await getTabDetails(tabId);\n        if (tabDetails) {\n            // console.log(`Tab with URL ${tabDetails.url} has been closed.`);\n        }\n    });\n\n    chrome.webRequest.onBeforeRequest.addListener(\n        (details) => {\n            if (!details.initiator || details.type !== 'main_frame') {\n                return;\n            }\n            const u = new URL(details.initiator);\n            const v = new URL(details.url);\n            if (u.host === v.host) {\n                return;\n            }\n            // TODO breadchris integrate whitelist\n            if (u.host === 'news.ycombinator.com') {\n                tabContent = {\n                    from: details.initiator,\n                    to: details.url\n                }\n                // TODO breadchris auto collecting config\n            }\n        }, { urls: [\"<all_urls>\"] }, [])\n\n    chrome.webRequest.onBeforeSendHeaders.addListener(\n        (details) => {\n            let refererValue = '';\n            if (!details.requestHeaders) {\n                return;\n            }\n            for (let header of details.requestHeaders) {\n                if (header.name.toLowerCase() === \"referer\" && header.value) {\n                    refererValue = header.value;\n                    // console.log(`Visited URL: ${details.url}, Referrer: ${refererValue}`);\n                    break;\n                }\n            }\n            //console.log(`Visited URL: ${details.url}, Referrer: ${refererValue}`);\n        },\n        { urls: [\"<all_urls>\"] }, // Monitor all URLs\n        [\"requestHeaders\"] // Necessary to get the request headers\n    );\n}\n\nchromeExt();\n\nexport {};"],
  "mappings": "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",
  "names": ["ScalarType", "WireType", "makeReadOptions", "makeWriteOptions", "writeScalar", "readScalar", "writeEnum", "writeScalar", "val", "a", "MethodKind", "MethodIdempotency", "Code", "value", "v", "__asyncValues", "v", "__await", "__asyncDelegator", "__asyncGenerator", "transport", "fallback", "__await", "__asyncGenerator", "_a", "input", "URL", "AnalyzeConversationRequest", "Token", "Segment", "AnalyzeConversationRequest", "Subscribable", "constructor", "listeners", "Set", "subscribe", "bind", "listener", "identity", "add", "onSubscribe", "delete", "onUnsubscribe", "hasListeners", "size", "isServer", "window", "noop", "undefined", "functionalUpdate", "updater", "input", "isValidTimeout", "value", "Infinity", "timeUntilStale", "updatedAt", "staleTime", "Math", "max", "Date", "now", "parseQueryArgs", "arg1", "arg2", "arg3", "isQueryKey", "queryKey", "queryFn", "parseFilterArgs", "arg1", "arg2", "arg3", "isQueryKey", "queryKey", "matchQuery", "filters", "query", "type", "exact", "fetchStatus", "predicate", "queryKey", "stale", "isQueryKey", "queryHash", "hashQueryKeyByOptions", "options", "partialMatchKey", "isActive", "isStale", "state", "matchMutation", "mutation", "fetching", "mutationKey", "hashQueryKey", "status", "hashFn", "queryKeyHashFn", "JSON", "stringify", "_", "val", "isPlainObject", "Object", "keys", "sort", "reduce", "result", "key", "a", "b", "partialDeepEqual", "some", "replaceEqualDeep", "array", "isPlainArray", "aSize", "length", "bItems", "bSize", "copy", "equalItems", "i", "isPlainArray", "value", "Array", "isArray", "length", "Object", "keys", "isPlainObject", "o", "hasObjectPrototype", "ctor", "constructor", "prot", "prototype", "hasOwnProperty", "toString", "call", "isQueryKey", "sleep", "timeout", "Promise", "resolve", "setTimeout", "scheduleMicrotask", "callback", "then", "getAbortController", "AbortController", "replaceData", "prevData", "data", "options", "isDataEqual", "structuralSharing", "replaceEqualDeep", "FocusManager", "Subscribable", "constructor", "setup", "onFocus", "isServer", "window", "addEventListener", "listener", "removeEventListener", "onSubscribe", "cleanup", "setEventListener", "onUnsubscribe", "hasListeners", "undefined", "focused", "setFocused", "changed", "listeners", "forEach", "isFocused", "document", "includes", "visibilityState", "focusManager", "onlineEvents", "OnlineManager", "Subscribable", "constructor", "setup", "onOnline", "isServer", "window", "addEventListener", "listener", "forEach", "event", "removeEventListener", "onSubscribe", "cleanup", "setEventListener", "onUnsubscribe", "hasListeners", "undefined", "online", "setOnline", "changed", "listeners", "isOnline", "navigator", "onLine", "onlineManager", "defaultRetryDelay", "failureCount", "Math", "min", "canFetch", "networkMode", "onlineManager", "isOnline", "CancelledError", "constructor", "options", "revert", "silent", "isCancelledError", "value", "createRetryer", "config", "isRetryCancelled", "isResolved", "continueFn", "promiseResolve", "promiseReject", "promise", "Promise", "outerResolve", "outerReject", "cancel", "cancelOptions", "reject", "abort", "cancelRetry", "continueRetry", "shouldPause", "focusManager", "isFocused", "resolve", "onSuccess", "onError", "pause", "continueResolve", "canContinue", "onPause", "then", "undefined", "onContinue", "run", "promiseOrValue", "fn", "error", "catch", "retry", "retryDelay", "delay", "shouldRetry", "onFail", "sleep", "continue", "didContinue", "defaultLogger", "console", "createNotifyManager", "queue", "transactions", "notifyFn", "callback", "batchNotifyFn", "batch", "result", "flush", "schedule", "push", "scheduleMicrotask", "batchCalls", "args", "originalQueue", "length", "forEach", "setNotifyFunction", "fn", "setBatchNotifyFunction", "notifyManager", "Removable", "destroy", "clearGcTimeout", "scheduleGc", "isValidTimeout", "cacheTime", "gcTimeout", "setTimeout", "optionalRemove", "updateCacheTime", "newCacheTime", "Math", "max", "isServer", "Infinity", "clearTimeout", "undefined", "Query", "Removable", "constructor", "config", "abortSignalConsumed", "defaultOptions", "setOptions", "options", "observers", "cache", "logger", "defaultLogger", "queryKey", "queryHash", "initialState", "state", "getDefaultState", "scheduleGc", "meta", "updateCacheTime", "cacheTime", "optionalRemove", "length", "fetchStatus", "remove", "setData", "newData", "data", "replaceData", "dispatch", "type", "dataUpdatedAt", "updatedAt", "manual", "setState", "setStateOptions", "cancel", "promise", "retryer", "then", "noop", "catch", "Promise", "resolve", "destroy", "silent", "reset", "isActive", "some", "observer", "enabled", "isDisabled", "getObserversCount", "isStale", "isInvalidated", "getCurrentResult", "isStaleByTime", "staleTime", "timeUntilStale", "onFocus", "find", "x", "shouldFetchOnWindowFocus", "refetch", "cancelRefetch", "continue", "onOnline", "shouldFetchOnReconnect", "addObserver", "includes", "push", "clearGcTimeout", "notify", "query", "removeObserver", "filter", "revert", "cancelRetry", "invalidate", "fetch", "fetchOptions", "continueRetry", "queryFn", "process", "Array", "isArray", "error", "abortController", "getAbortController", "queryFnContext", "pageParam", "undefined", "addSignalProperty", "object", "Object", "defineProperty", "enumerable", "get", "signal", "fetchFn", "reject", "context", "behavior", "onFetch", "revertState", "fetchMeta", "onError", "isCancelledError", "onSettled", "isFetchingOptimistic", "createRetryer", "fn", "abort", "bind", "onSuccess", "Error", "onFail", "failureCount", "onPause", "onContinue", "retry", "retryDelay", "networkMode", "action", "reducer", "fetchFailureCount", "fetchFailureReason", "canFetch", "status", "dataUpdateCount", "Date", "now", "errorUpdateCount", "errorUpdatedAt", "notifyManager", "batch", "forEach", "onQueryUpdate", "initialData", "hasData", "initialDataUpdatedAt", "QueryCache", "Subscribable", "constructor", "config", "queries", "queriesMap", "build", "client", "options", "state", "queryKey", "queryHash", "hashQueryKeyByOptions", "query", "get", "Query", "cache", "logger", "getLogger", "defaultQueryOptions", "defaultOptions", "getQueryDefaults", "add", "push", "notify", "type", "remove", "queryInMap", "destroy", "filter", "x", "clear", "notifyManager", "batch", "forEach", "getAll", "find", "arg1", "arg2", "filters", "parseFilterArgs", "exact", "matchQuery", "findAll", "Object", "keys", "length", "event", "listeners", "listener", "onFocus", "onOnline", "Mutation", "Removable", "constructor", "config", "defaultOptions", "mutationId", "mutationCache", "logger", "defaultLogger", "observers", "state", "getDefaultState", "setOptions", "options", "scheduleGc", "updateCacheTime", "cacheTime", "meta", "setState", "dispatch", "type", "addObserver", "observer", "includes", "push", "clearGcTimeout", "notify", "mutation", "removeObserver", "filter", "x", "optionalRemove", "length", "status", "remove", "continue", "retryer", "execute", "executeMutation", "createRetryer", "fn", "mutationFn", "Promise", "reject", "variables", "onFail", "failureCount", "error", "onPause", "onContinue", "retry", "retryDelay", "networkMode", "promise", "restored", "onMutate", "context", "data", "onSuccess", "onSettled", "onError", "process", "undefined", "action", "reducer", "failureReason", "isPaused", "canFetch", "notifyManager", "batch", "forEach", "onMutationUpdate", "MutationCache", "Subscribable", "constructor", "config", "mutations", "mutationId", "build", "client", "options", "state", "mutation", "Mutation", "mutationCache", "logger", "getLogger", "defaultMutationOptions", "defaultOptions", "mutationKey", "getMutationDefaults", "undefined", "add", "push", "notify", "type", "remove", "filter", "x", "clear", "notifyManager", "batch", "forEach", "getAll", "find", "filters", "exact", "matchMutation", "findAll", "event", "listeners", "listener", "resumePausedMutations", "resuming", "Promise", "resolve", "then", "pausedMutations", "isPaused", "reduce", "promise", "continue", "catch", "noop", "infiniteQueryBehavior", "onFetch", "context", "fetchFn", "refetchPage", "fetchOptions", "meta", "fetchMore", "pageParam", "isFetchingNextPage", "direction", "isFetchingPreviousPage", "oldPages", "state", "data", "pages", "oldPageParams", "pageParams", "newPageParams", "cancelled", "addSignalProperty", "object", "Object", "defineProperty", "enumerable", "get", "signal", "aborted", "addEventListener", "queryFn", "options", "Promise", "reject", "queryHash", "buildNewPages", "param", "page", "previous", "fetchPage", "manual", "length", "resolve", "queryFnContext", "queryKey", "queryFnResult", "promise", "then", "getNextPageParam", "getPreviousPageParam", "shouldFetchFirstPage", "i", "shouldFetchNextPage", "finalPromise", "QueryClient", "constructor", "config", "queryCache", "QueryCache", "mutationCache", "MutationCache", "logger", "defaultLogger", "defaultOptions", "queryDefaults", "mutationDefaults", "mountCount", "error", "mount", "unsubscribeFocus", "focusManager", "subscribe", "isFocused", "resumePausedMutations", "onFocus", "unsubscribeOnline", "onlineManager", "isOnline", "onOnline", "unmount", "undefined", "isFetching", "arg1", "arg2", "filters", "parseFilterArgs", "fetchStatus", "findAll", "length", "isMutating", "fetching", "getQueryData", "queryKey", "find", "state", "data", "ensureQueryData", "arg3", "parsedOptions", "parseQueryArgs", "cachedData", "Promise", "resolve", "fetchQuery", "getQueriesData", "queryKeyOrFilters", "getQueryCache", "map", "setQueryData", "updater", "options", "query", "prevData", "functionalUpdate", "defaultedOptions", "defaultQueryOptions", "build", "setData", "manual", "setQueriesData", "notifyManager", "batch", "getQueryState", "removeQueries", "forEach", "remove", "resetQueries", "refetchFilters", "type", "reset", "refetchQueries", "cancelQueries", "cancelOptions", "revert", "promises", "cancel", "all", "then", "noop", "catch", "invalidateQueries", "invalidate", "refetchType", "filter", "isDisabled", "fetch", "cancelRefetch", "meta", "refetchPage", "promise", "throwOnError", "retry", "isStaleByTime", "staleTime", "prefetchQuery", "fetchInfiniteQuery", "behavior", "infiniteQueryBehavior", "prefetchInfiniteQuery", "getMutationCache", "getLogger", "getDefaultOptions", "setDefaultOptions", "setQueryDefaults", "result", "x", "hashQueryKey", "push", "getQueryDefaults", "firstMatchingDefaults", "partialMatchKey", "process", "matchingDefaults", "JSON", "stringify", "setMutationDefaults", "mutationKey", "getMutationDefaults", "_defaulted", "queries", "queryHash", "hashQueryKeyByOptions", "refetchOnReconnect", "networkMode", "useErrorBoundary", "suspense", "defaultMutationOptions", "mutations", "clear"]
}

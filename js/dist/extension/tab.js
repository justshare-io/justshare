"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all2) => {
    for (var name in all2)
      __defProp(target, name, { get: all2[name], enumerable: true });
  };
  var __copyProps = (to, from3, except, desc) => {
    if (from3 && typeof from3 === "object" || typeof from3 === "function") {
      for (let key of __getOwnPropNames(from3))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // ../node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack2) {
            {
              currentExtraStackFrame = stack2;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack2) {
              {
                currentExtraStackFrame = stack2;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack2 = "";
              if (currentExtraStackFrame) {
                stack2 += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack2 += impl() || "";
              }
              return stack2;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign3 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign3(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName2 = innerType.displayName || innerType.name || "";
            return functionName2 !== "" ? wrapperName + "(" + functionName2 + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement2(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign3({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray3(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array2.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray3(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator2 = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator2.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState2(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef2(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect3(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create5, deps);
          }
          function useInsertionEffect(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create5, deps);
          }
          function useLayoutEffect(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create5, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create5, deps);
          }
          function useImperativeHandle(ref, create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create5, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct3) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct3) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack2);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray3(node2)) {
              for (var i2 = 0; i2 < node2.length; i2++) {
                var child = node2[i2];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator2 = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator2.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys4 = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys4.length; i2++) {
                var key = keys4[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray3(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement2.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task2) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel2 = new MessageChannel();
                  channel2.port1.onmessage = callback;
                  channel2.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task2);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve3, reject2) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve3, reject2);
                      } else {
                        resolve3(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject2(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve3, reject2) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve3, reject2);
                      } else {
                        resolve3(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve3, reject2) {
                      resolve3(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve3, reject2) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve3(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve3, reject2);
                    }
                  });
                } catch (error2) {
                  reject2(error2);
                }
              } else {
                resolve3(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i2 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$12 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$12;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect3;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef2;
          exports.useState = useState2;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react/index.js
  var require_react = __commonJS({
    "../node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // ../node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push2(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i2) {
            var index = i2;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent2 = heap[parentIndex];
              if (compare(parent2, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent2;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i2) {
            var index = i2;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node2) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node2) < 0) {
                heap[index] = right;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task2, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push2(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task2) {
            task2.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel2 = new MessageChannel();
            var port2 = channel2.port2;
            channel2.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port2.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react-dom/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../node_modules/react-dom/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // ../node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React3 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign3 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct3) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct3) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName2 = innerType.displayName || innerType.name || "";
            return functionName2 !== "" ? wrapperName + "(" + functionName2 + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName2 = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName2 !== "" ? wrapperName + "(" + functionName2 + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString3(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set3 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set3.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign3({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString3(value);
                }
              } else if (node2.value !== toString3(value)) {
                node2.value = toString3(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString3(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString3(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString3(value)) {
                node2.defaultValue = toString3(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React3.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString3(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray3(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString3(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign3({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign3({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString3(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray3(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString3(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString3(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html2) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string2) {
              return string2.replace(hyphenPattern, function(_2, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles) {
            var style2 = node2.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign3({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event2) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event2;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event2) {
            return event2 === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event2) {
                  error2 = event2.error;
                  didSetError = true;
                  if (error2 === null && event2.colno === 0 && event2.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event2.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key) {
            return key._reactInternals;
          }
          function has2(key) {
            return key._reactInternals !== void 0;
          }
          function set2(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now3 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign3({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map3 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map3.set(lane, label);
                lane *= 2;
              }
              return map3;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set3, subset) {
            return (set3 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set3, subset) {
            return set3 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map3) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map3.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent2;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize3 = Interface[_propName];
                if (normalize3) {
                  this[_propName] = normalize3(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign3(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event2 = this.nativeEvent;
                if (!event2) {
                  return;
                }
                if (event2.preventDefault) {
                  event2.preventDefault();
                } else if (typeof event2.returnValue !== "unknown") {
                  event2.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event2 = this.nativeEvent;
                if (!event2) {
                  return;
                }
                if (event2.stopPropagation) {
                  event2.stopPropagation();
                } else if (typeof event2.cancelBubble !== "unknown") {
                  event2.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event2) {
              return event2.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign3({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event2) {
            if (event2 !== lastMouseEvent) {
              if (lastMouseEvent && event2.type === "mousemove") {
                lastMovementX = event2.screenX - lastMouseEvent.screenX;
                lastMovementY = event2.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event2;
            }
          }
          var MouseEventInterface = assign3({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event2) {
              if (event2.relatedTarget === void 0)
                return event2.fromElement === event2.srcElement ? event2.toElement : event2.fromElement;
              return event2.relatedTarget;
            },
            movementX: function(event2) {
              if ("movementX" in event2) {
                return event2.movementX;
              }
              updateMouseMovementPolyfillState(event2);
              return lastMovementX;
            },
            movementY: function(event2) {
              if ("movementY" in event2) {
                return event2.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign3({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign3({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign3({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign3({}, EventInterface, {
            clipboardData: function(event2) {
              return "clipboardData" in event2 ? event2.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign3({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign3({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event2) {
              if (event2.type === "keypress") {
                return getEventCharCode(event2);
              }
              return 0;
            },
            keyCode: function(event2) {
              if (event2.type === "keydown" || event2.type === "keyup") {
                return event2.keyCode;
              }
              return 0;
            },
            which: function(event2) {
              if (event2.type === "keypress") {
                return getEventCharCode(event2);
              }
              if (event2.type === "keydown" || event2.type === "keyup") {
                return event2.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign3({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign3({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign3({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign3({}, MouseEventInterface, {
            deltaX: function(event2) {
              return "deltaX" in event2 ? event2.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event2 ? -event2.wheelDeltaX : 0
              );
            },
            deltaY: function(event2) {
              return "deltaY" in event2 ? event2.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event2 ? -event2.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event2 ? -event2.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event2 = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: event2,
                listeners
              });
              if (fallbackData) {
                event2.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event2.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event2 = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: event2,
                listeners
              });
              event2.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event2 = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event: event2,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win2;
            if (nativeEventTarget.window === nativeEventTarget) {
              win2 = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win2 = doc.defaultView || doc.parentWindow;
              } else {
                win2 = window;
              }
            }
            var from3;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from3 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from3 = null;
              to = targetInst;
            }
            if (from3 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from3 == null ? win2 : getNodeFromInstance(from3);
            var toNode = to == null ? win2 : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from3, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from3, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node2 = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node2,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win2 = ownerDocument && ownerDocument.defaultView || window;
            var selection = win2.getSelection && win2.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win2 = doc && doc.defaultView || window;
            if (!win2.getSelection) {
              return;
            }
            var selection = win2.getSelection();
            var length = node2.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win2 = window;
            var element = getActiveElement();
            while (element instanceof win2.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win2 = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win2.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win2 = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win2.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event2 = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: event2,
                  listeners
                });
                event2.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event2, listener, currentTarget) {
            var type = event2.type || "unknown-event";
            event2.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event2);
            event2.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event2, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event2.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event2, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event2.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event2, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event2 = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event2, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event2, target, common, inCapturePhase) {
            var registrationName = event2._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event: event2,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from3, to) {
            var common = from3 && to ? getLowestCommonAncestor(from3, to) : null;
            if (from3 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from3, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent2, html2) {
              var testElement = parent2.namespaceURI === HTML_NAMESPACE ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement2(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign3({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string2 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement2(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string2 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data2 = nextNode.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_PENDING_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack2;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack2 = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack: stack2
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data2 = node2.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data2 = node2.data;
                if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has3 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has3(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push2(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign3({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node2.type;
                    if (isContextProvider(Component2)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id2 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id2.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id2 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id2;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id2) {
            return 1 << getBitLength(id2) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
              parent2 = parent2.return;
            }
            hydrationParentFiber = parent2;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set3) {
              var array2 = [];
              set3.forEach(function(value) {
                array2.push(value);
              });
              return array2.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign3({}, baseProps);
              var defaultProps = Component2.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent2, renderLanes2, propagationRoot) {
            var node2 = parent2;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent2 = sourceFiber.return;
            while (parent2 !== null) {
              parent2.childLanes = mergeLanes(parent2.childLanes, lane);
              alternate = parent2.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent2.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent2;
              parent2 = parent2.return;
            }
            if (node2.tag === HostRoot) {
              var root3 = node2.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone2 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone2;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone2 = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone2;
                    } else {
                      newLast.next = clone2;
                      newLast = clone2;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign3({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone2 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone2;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React3.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign3({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray3(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set2(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone2 = createWorkInProgress(fiber, pendingProps);
              clone2.index = 0;
              clone2.sibling = null;
              return clone2;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray3(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray3(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray3(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray3(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray3(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone2 = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone2;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone2;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check2 = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check2];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check2];
              } else {
                stores.push(check2);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create5, destroy, deps) {
            var effect = {
              tag,
              create: create5,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create5, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create5, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create5, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create5, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create5, destroy, nextDeps);
          }
          function mountEffect(create5, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create5, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create5, deps);
            }
          }
          function updateEffect(create5, deps) {
            return updateEffectImpl(Passive, Passive$1, create5, deps);
          }
          function mountInsertionEffect(create5, deps) {
            return mountEffectImpl(Update, Insertion, create5, deps);
          }
          function updateInsertionEffect(create5, deps) {
            return updateEffectImpl(Update, Insertion, create5, deps);
          }
          function mountLayoutEffect(create5, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create5, deps);
          }
          function updateLayoutEffect(create5, deps) {
            return updateEffectImpl(Update, Layout, create5, deps);
          }
          function imperativeHandleEffect(create5, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create5();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create5();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create5, deps) {
            {
              if (typeof create5 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create5 !== null ? typeof create5 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create5, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create5, deps) {
            {
              if (typeof create5 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create5 !== null ? typeof create5 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create5, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id2;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id2 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id2 += "H" + localId.toString(32);
              }
              id2 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id2 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id2;
            return id2;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id2 = hook.memoizedState;
            return id2;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$12 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$12();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$12();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$12();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$12() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$12() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$12() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$12();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$12();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack2) {
            return {
              value,
              source: null,
              stack: stack2 != null ? stack2 : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack2 = errorInfo.stack;
                var componentStack = stack2 !== null ? stack2 : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack2 = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack2 !== null ? stack2 : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack2;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack2 = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack2);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray3(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray3(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent2, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now3() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now3() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now3();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create5 = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create5();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id2 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id2, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null) {
              if (isHostParent(parent2)) {
                return parent2;
              }
              parent2 = parent2.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent2 = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent2);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent2);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent2) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent2, stateNode, before);
              } else {
                appendChildToContainer(parent2, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent2) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent2, stateNode, before);
              } else {
                appendChild(parent2, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent2 = returnFiber;
              findParent:
                while (parent2 !== null) {
                  switch (parent2.tag) {
                    case HostComponent: {
                      hostParent = parent2.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent2 = parent2.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent2) {
            var child = parent2.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil2 = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now3() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now3();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now3();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now3());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now3());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now3());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now3();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now3() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check2 = checks[i2];
                      var getSnapshot = check2.getSnapshot;
                      var renderedValue = check2.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now3());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now3());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now3());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now3());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now3();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now3());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now3() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil2(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys4 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys4);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path2, index2) {
              var key = path2[index2];
              var updated = isArray3(obj) ? obj.slice() : assign3({}, obj);
              if (index2 + 1 === path2.length) {
                if (isArray3(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path2, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path2) {
              return copyWithDeleteImpl(obj, path2, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray3(obj) ? obj.slice() : assign3({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray3(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path2, index2, value) {
              if (index2 >= path2.length) {
                return value;
              }
              var key = path2[index2];
              var updated = isArray3(obj) ? obj.slice() : assign3({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path2, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path2, value) {
              return copyWithSetImpl(obj, path2, 0, value);
            };
            var findHook = function(fiber, id2) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id2 > 0) {
                currentHook2 = currentHook2.next;
                id2--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id2, path2, value) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path2, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id2, path2) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path2, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path2) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has2(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // ../node_modules/react-dom/client.js
  var require_client = __commonJS({
    "../node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i2 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i2.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i2.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // ../node_modules/source-map/lib/base64.js
  var require_base64 = __commonJS({
    "../node_modules/source-map/lib/base64.js"(exports) {
      var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      exports.encode = function(number2) {
        if (0 <= number2 && number2 < intToCharMap.length) {
          return intToCharMap[number2];
        }
        throw new TypeError("Must be between 0 and 63: " + number2);
      };
      exports.decode = function(charCode) {
        var bigA = 65;
        var bigZ = 90;
        var littleA = 97;
        var littleZ = 122;
        var zero = 48;
        var nine = 57;
        var plus = 43;
        var slash = 47;
        var littleOffset = 26;
        var numberOffset = 52;
        if (bigA <= charCode && charCode <= bigZ) {
          return charCode - bigA;
        }
        if (littleA <= charCode && charCode <= littleZ) {
          return charCode - littleA + littleOffset;
        }
        if (zero <= charCode && charCode <= nine) {
          return charCode - zero + numberOffset;
        }
        if (charCode == plus) {
          return 62;
        }
        if (charCode == slash) {
          return 63;
        }
        return -1;
      };
    }
  });

  // ../node_modules/source-map/lib/base64-vlq.js
  var require_base64_vlq = __commonJS({
    "../node_modules/source-map/lib/base64-vlq.js"(exports) {
      var base64 = require_base64();
      var VLQ_BASE_SHIFT = 5;
      var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
      var VLQ_BASE_MASK = VLQ_BASE - 1;
      var VLQ_CONTINUATION_BIT = VLQ_BASE;
      function toVLQSigned(aValue) {
        return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
      }
      function fromVLQSigned(aValue) {
        var isNegative = (aValue & 1) === 1;
        var shifted = aValue >> 1;
        return isNegative ? -shifted : shifted;
      }
      exports.encode = function base64VLQ_encode(aValue) {
        var encoded = "";
        var digit;
        var vlq = toVLQSigned(aValue);
        do {
          digit = vlq & VLQ_BASE_MASK;
          vlq >>>= VLQ_BASE_SHIFT;
          if (vlq > 0) {
            digit |= VLQ_CONTINUATION_BIT;
          }
          encoded += base64.encode(digit);
        } while (vlq > 0);
        return encoded;
      };
      exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
        var strLen = aStr.length;
        var result = 0;
        var shift = 0;
        var continuation, digit;
        do {
          if (aIndex >= strLen) {
            throw new Error("Expected more digits in base 64 VLQ value.");
          }
          digit = base64.decode(aStr.charCodeAt(aIndex++));
          if (digit === -1) {
            throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
          }
          continuation = !!(digit & VLQ_CONTINUATION_BIT);
          digit &= VLQ_BASE_MASK;
          result = result + (digit << shift);
          shift += VLQ_BASE_SHIFT;
        } while (continuation);
        aOutParam.value = fromVLQSigned(result);
        aOutParam.rest = aIndex;
      };
    }
  });

  // ../node_modules/source-map/lib/util.js
  var require_util = __commonJS({
    "../node_modules/source-map/lib/util.js"(exports) {
      function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
          return aArgs[aName];
        } else if (arguments.length === 3) {
          return aDefaultValue;
        } else {
          throw new Error('"' + aName + '" is a required argument.');
        }
      }
      exports.getArg = getArg;
      var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
      var dataUrlRegexp = /^data:.+\,.+$/;
      function urlParse(aUrl) {
        var match2 = aUrl.match(urlRegexp);
        if (!match2) {
          return null;
        }
        return {
          scheme: match2[1],
          auth: match2[2],
          host: match2[3],
          port: match2[4],
          path: match2[5]
        };
      }
      exports.urlParse = urlParse;
      function urlGenerate(aParsedUrl) {
        var url = "";
        if (aParsedUrl.scheme) {
          url += aParsedUrl.scheme + ":";
        }
        url += "//";
        if (aParsedUrl.auth) {
          url += aParsedUrl.auth + "@";
        }
        if (aParsedUrl.host) {
          url += aParsedUrl.host;
        }
        if (aParsedUrl.port) {
          url += ":" + aParsedUrl.port;
        }
        if (aParsedUrl.path) {
          url += aParsedUrl.path;
        }
        return url;
      }
      exports.urlGenerate = urlGenerate;
      function normalize3(aPath) {
        var path2 = aPath;
        var url = urlParse(aPath);
        if (url) {
          if (!url.path) {
            return aPath;
          }
          path2 = url.path;
        }
        var isAbsolute2 = exports.isAbsolute(path2);
        var parts = path2.split(/\/+/);
        for (var part, up = 0, i2 = parts.length - 1; i2 >= 0; i2--) {
          part = parts[i2];
          if (part === ".") {
            parts.splice(i2, 1);
          } else if (part === "..") {
            up++;
          } else if (up > 0) {
            if (part === "") {
              parts.splice(i2 + 1, up);
              up = 0;
            } else {
              parts.splice(i2, 2);
              up--;
            }
          }
        }
        path2 = parts.join("/");
        if (path2 === "") {
          path2 = isAbsolute2 ? "/" : ".";
        }
        if (url) {
          url.path = path2;
          return urlGenerate(url);
        }
        return path2;
      }
      exports.normalize = normalize3;
      function join4(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        if (aPath === "") {
          aPath = ".";
        }
        var aPathUrl = urlParse(aPath);
        var aRootUrl = urlParse(aRoot);
        if (aRootUrl) {
          aRoot = aRootUrl.path || "/";
        }
        if (aPathUrl && !aPathUrl.scheme) {
          if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
          }
          return urlGenerate(aPathUrl);
        }
        if (aPathUrl || aPath.match(dataUrlRegexp)) {
          return aPath;
        }
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
          aRootUrl.host = aPath;
          return urlGenerate(aRootUrl);
        }
        var joined = aPath.charAt(0) === "/" ? aPath : normalize3(aRoot.replace(/\/+$/, "") + "/" + aPath);
        if (aRootUrl) {
          aRootUrl.path = joined;
          return urlGenerate(aRootUrl);
        }
        return joined;
      }
      exports.join = join4;
      exports.isAbsolute = function(aPath) {
        return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
      };
      function relative2(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        aRoot = aRoot.replace(/\/$/, "");
        var level = 0;
        while (aPath.indexOf(aRoot + "/") !== 0) {
          var index = aRoot.lastIndexOf("/");
          if (index < 0) {
            return aPath;
          }
          aRoot = aRoot.slice(0, index);
          if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath;
          }
          ++level;
        }
        return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
      }
      exports.relative = relative2;
      var supportsNullProto = function() {
        var obj = /* @__PURE__ */ Object.create(null);
        return !("__proto__" in obj);
      }();
      function identity(s) {
        return s;
      }
      function toSetString(aStr) {
        if (isProtoString(aStr)) {
          return "$" + aStr;
        }
        return aStr;
      }
      exports.toSetString = supportsNullProto ? identity : toSetString;
      function fromSetString(aStr) {
        if (isProtoString(aStr)) {
          return aStr.slice(1);
        }
        return aStr;
      }
      exports.fromSetString = supportsNullProto ? identity : fromSetString;
      function isProtoString(s) {
        if (!s) {
          return false;
        }
        var length = s.length;
        if (length < 9) {
          return false;
        }
        if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
          return false;
        }
        for (var i2 = length - 10; i2 >= 0; i2--) {
          if (s.charCodeAt(i2) !== 36) {
            return false;
          }
        }
        return true;
      }
      function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        var cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByOriginalPositions = compareByOriginalPositions;
      function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
      function strcmp(aStr1, aStr2) {
        if (aStr1 === aStr2) {
          return 0;
        }
        if (aStr1 === null) {
          return 1;
        }
        if (aStr2 === null) {
          return -1;
        }
        if (aStr1 > aStr2) {
          return 1;
        }
        return -1;
      }
      function compareByGeneratedPositionsInflated(mappingA, mappingB) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
      function parseSourceMapInput(str) {
        return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
      }
      exports.parseSourceMapInput = parseSourceMapInput;
      function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
        sourceURL = sourceURL || "";
        if (sourceRoot) {
          if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
            sourceRoot += "/";
          }
          sourceURL = sourceRoot + sourceURL;
        }
        if (sourceMapURL) {
          var parsed = urlParse(sourceMapURL);
          if (!parsed) {
            throw new Error("sourceMapURL could not be parsed");
          }
          if (parsed.path) {
            var index = parsed.path.lastIndexOf("/");
            if (index >= 0) {
              parsed.path = parsed.path.substring(0, index + 1);
            }
          }
          sourceURL = join4(urlGenerate(parsed), sourceURL);
        }
        return normalize3(sourceURL);
      }
      exports.computeSourceURL = computeSourceURL;
    }
  });

  // ../node_modules/source-map/lib/array-set.js
  var require_array_set = __commonJS({
    "../node_modules/source-map/lib/array-set.js"(exports) {
      var util2 = require_util();
      var has2 = Object.prototype.hasOwnProperty;
      var hasNativeMap = typeof Map !== "undefined";
      function ArraySet() {
        this._array = [];
        this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
      }
      ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
        var set2 = new ArraySet();
        for (var i2 = 0, len = aArray.length; i2 < len; i2++) {
          set2.add(aArray[i2], aAllowDuplicates);
        }
        return set2;
      };
      ArraySet.prototype.size = function ArraySet_size() {
        return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
      };
      ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
        var sStr = hasNativeMap ? aStr : util2.toSetString(aStr);
        var isDuplicate = hasNativeMap ? this.has(aStr) : has2.call(this._set, sStr);
        var idx = this._array.length;
        if (!isDuplicate || aAllowDuplicates) {
          this._array.push(aStr);
        }
        if (!isDuplicate) {
          if (hasNativeMap) {
            this._set.set(aStr, idx);
          } else {
            this._set[sStr] = idx;
          }
        }
      };
      ArraySet.prototype.has = function ArraySet_has(aStr) {
        if (hasNativeMap) {
          return this._set.has(aStr);
        } else {
          var sStr = util2.toSetString(aStr);
          return has2.call(this._set, sStr);
        }
      };
      ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
        if (hasNativeMap) {
          var idx = this._set.get(aStr);
          if (idx >= 0) {
            return idx;
          }
        } else {
          var sStr = util2.toSetString(aStr);
          if (has2.call(this._set, sStr)) {
            return this._set[sStr];
          }
        }
        throw new Error('"' + aStr + '" is not in the set.');
      };
      ArraySet.prototype.at = function ArraySet_at(aIdx) {
        if (aIdx >= 0 && aIdx < this._array.length) {
          return this._array[aIdx];
        }
        throw new Error("No element indexed by " + aIdx);
      };
      ArraySet.prototype.toArray = function ArraySet_toArray() {
        return this._array.slice();
      };
      exports.ArraySet = ArraySet;
    }
  });

  // ../node_modules/source-map/lib/mapping-list.js
  var require_mapping_list = __commonJS({
    "../node_modules/source-map/lib/mapping-list.js"(exports) {
      var util2 = require_util();
      function generatedPositionAfter(mappingA, mappingB) {
        var lineA = mappingA.generatedLine;
        var lineB = mappingB.generatedLine;
        var columnA = mappingA.generatedColumn;
        var columnB = mappingB.generatedColumn;
        return lineB > lineA || lineB == lineA && columnB >= columnA || util2.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
      }
      function MappingList() {
        this._array = [];
        this._sorted = true;
        this._last = { generatedLine: -1, generatedColumn: 0 };
      }
      MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
        this._array.forEach(aCallback, aThisArg);
      };
      MappingList.prototype.add = function MappingList_add(aMapping) {
        if (generatedPositionAfter(this._last, aMapping)) {
          this._last = aMapping;
          this._array.push(aMapping);
        } else {
          this._sorted = false;
          this._array.push(aMapping);
        }
      };
      MappingList.prototype.toArray = function MappingList_toArray() {
        if (!this._sorted) {
          this._array.sort(util2.compareByGeneratedPositionsInflated);
          this._sorted = true;
        }
        return this._array;
      };
      exports.MappingList = MappingList;
    }
  });

  // ../node_modules/source-map/lib/source-map-generator.js
  var require_source_map_generator = __commonJS({
    "../node_modules/source-map/lib/source-map-generator.js"(exports) {
      var base64VLQ = require_base64_vlq();
      var util2 = require_util();
      var ArraySet = require_array_set().ArraySet;
      var MappingList = require_mapping_list().MappingList;
      function SourceMapGenerator(aArgs) {
        if (!aArgs) {
          aArgs = {};
        }
        this._file = util2.getArg(aArgs, "file", null);
        this._sourceRoot = util2.getArg(aArgs, "sourceRoot", null);
        this._skipValidation = util2.getArg(aArgs, "skipValidation", false);
        this._sources = new ArraySet();
        this._names = new ArraySet();
        this._mappings = new MappingList();
        this._sourcesContents = null;
      }
      SourceMapGenerator.prototype._version = 3;
      SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
        var sourceRoot = aSourceMapConsumer.sourceRoot;
        var generator = new SourceMapGenerator({
          file: aSourceMapConsumer.file,
          sourceRoot
        });
        aSourceMapConsumer.eachMapping(function(mapping) {
          var newMapping = {
            generated: {
              line: mapping.generatedLine,
              column: mapping.generatedColumn
            }
          };
          if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
              newMapping.source = util2.relative(sourceRoot, newMapping.source);
            }
            newMapping.original = {
              line: mapping.originalLine,
              column: mapping.originalColumn
            };
            if (mapping.name != null) {
              newMapping.name = mapping.name;
            }
          }
          generator.addMapping(newMapping);
        });
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          var sourceRelative = sourceFile;
          if (sourceRoot !== null) {
            sourceRelative = util2.relative(sourceRoot, sourceFile);
          }
          if (!generator._sources.has(sourceRelative)) {
            generator._sources.add(sourceRelative);
          }
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            generator.setSourceContent(sourceFile, content);
          }
        });
        return generator;
      };
      SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
        var generated = util2.getArg(aArgs, "generated");
        var original = util2.getArg(aArgs, "original", null);
        var source = util2.getArg(aArgs, "source", null);
        var name = util2.getArg(aArgs, "name", null);
        if (!this._skipValidation) {
          this._validateMapping(generated, original, source, name);
        }
        if (source != null) {
          source = String(source);
          if (!this._sources.has(source)) {
            this._sources.add(source);
          }
        }
        if (name != null) {
          name = String(name);
          if (!this._names.has(name)) {
            this._names.add(name);
          }
        }
        this._mappings.add({
          generatedLine: generated.line,
          generatedColumn: generated.column,
          originalLine: original != null && original.line,
          originalColumn: original != null && original.column,
          source,
          name
        });
      };
      SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
        var source = aSourceFile;
        if (this._sourceRoot != null) {
          source = util2.relative(this._sourceRoot, source);
        }
        if (aSourceContent != null) {
          if (!this._sourcesContents) {
            this._sourcesContents = /* @__PURE__ */ Object.create(null);
          }
          this._sourcesContents[util2.toSetString(source)] = aSourceContent;
        } else if (this._sourcesContents) {
          delete this._sourcesContents[util2.toSetString(source)];
          if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
          }
        }
      };
      SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
        var sourceFile = aSourceFile;
        if (aSourceFile == null) {
          if (aSourceMapConsumer.file == null) {
            throw new Error(
              `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
            );
          }
          sourceFile = aSourceMapConsumer.file;
        }
        var sourceRoot = this._sourceRoot;
        if (sourceRoot != null) {
          sourceFile = util2.relative(sourceRoot, sourceFile);
        }
        var newSources = new ArraySet();
        var newNames = new ArraySet();
        this._mappings.unsortedForEach(function(mapping) {
          if (mapping.source === sourceFile && mapping.originalLine != null) {
            var original = aSourceMapConsumer.originalPositionFor({
              line: mapping.originalLine,
              column: mapping.originalColumn
            });
            if (original.source != null) {
              mapping.source = original.source;
              if (aSourceMapPath != null) {
                mapping.source = util2.join(aSourceMapPath, mapping.source);
              }
              if (sourceRoot != null) {
                mapping.source = util2.relative(sourceRoot, mapping.source);
              }
              mapping.originalLine = original.line;
              mapping.originalColumn = original.column;
              if (original.name != null) {
                mapping.name = original.name;
              }
            }
          }
          var source = mapping.source;
          if (source != null && !newSources.has(source)) {
            newSources.add(source);
          }
          var name = mapping.name;
          if (name != null && !newNames.has(name)) {
            newNames.add(name);
          }
        }, this);
        this._sources = newSources;
        this._names = newNames;
        aSourceMapConsumer.sources.forEach(function(sourceFile2) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
          if (content != null) {
            if (aSourceMapPath != null) {
              sourceFile2 = util2.join(aSourceMapPath, sourceFile2);
            }
            if (sourceRoot != null) {
              sourceFile2 = util2.relative(sourceRoot, sourceFile2);
            }
            this.setSourceContent(sourceFile2, content);
          }
        }, this);
      };
      SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
        if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
          throw new Error(
            "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
          );
        }
        if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
          return;
        } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
          return;
        } else {
          throw new Error("Invalid mapping: " + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
          }));
        }
      };
      SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
        var previousGeneratedColumn = 0;
        var previousGeneratedLine = 1;
        var previousOriginalColumn = 0;
        var previousOriginalLine = 0;
        var previousName = 0;
        var previousSource = 0;
        var result = "";
        var next2;
        var mapping;
        var nameIdx;
        var sourceIdx;
        var mappings = this._mappings.toArray();
        for (var i2 = 0, len = mappings.length; i2 < len; i2++) {
          mapping = mappings[i2];
          next2 = "";
          if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while (mapping.generatedLine !== previousGeneratedLine) {
              next2 += ";";
              previousGeneratedLine++;
            }
          } else {
            if (i2 > 0) {
              if (!util2.compareByGeneratedPositionsInflated(mapping, mappings[i2 - 1])) {
                continue;
              }
              next2 += ",";
            }
          }
          next2 += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
          previousGeneratedColumn = mapping.generatedColumn;
          if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next2 += base64VLQ.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;
            next2 += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;
            next2 += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;
            if (mapping.name != null) {
              nameIdx = this._names.indexOf(mapping.name);
              next2 += base64VLQ.encode(nameIdx - previousName);
              previousName = nameIdx;
            }
          }
          result += next2;
        }
        return result;
      };
      SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
        return aSources.map(function(source) {
          if (!this._sourcesContents) {
            return null;
          }
          if (aSourceRoot != null) {
            source = util2.relative(aSourceRoot, source);
          }
          var key = util2.toSetString(source);
          return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
        }, this);
      };
      SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
        var map3 = {
          version: this._version,
          sources: this._sources.toArray(),
          names: this._names.toArray(),
          mappings: this._serializeMappings()
        };
        if (this._file != null) {
          map3.file = this._file;
        }
        if (this._sourceRoot != null) {
          map3.sourceRoot = this._sourceRoot;
        }
        if (this._sourcesContents) {
          map3.sourcesContent = this._generateSourcesContent(map3.sources, map3.sourceRoot);
        }
        return map3;
      };
      SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
        return JSON.stringify(this.toJSON());
      };
      exports.SourceMapGenerator = SourceMapGenerator;
    }
  });

  // ../node_modules/source-map/lib/binary-search.js
  var require_binary_search = __commonJS({
    "../node_modules/source-map/lib/binary-search.js"(exports) {
      exports.GREATEST_LOWER_BOUND = 1;
      exports.LEAST_UPPER_BOUND = 2;
      function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
        var cmp = aCompare(aNeedle, aHaystack[mid], true);
        if (cmp === 0) {
          return mid;
        } else if (cmp > 0) {
          if (aHigh - mid > 1) {
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return aHigh < aHaystack.length ? aHigh : -1;
          } else {
            return mid;
          }
        } else {
          if (mid - aLow > 1) {
            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return mid;
          } else {
            return aLow < 0 ? -1 : aLow;
          }
        }
      }
      exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
        if (aHaystack.length === 0) {
          return -1;
        }
        var index = recursiveSearch(
          -1,
          aHaystack.length,
          aNeedle,
          aHaystack,
          aCompare,
          aBias || exports.GREATEST_LOWER_BOUND
        );
        if (index < 0) {
          return -1;
        }
        while (index - 1 >= 0) {
          if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
            break;
          }
          --index;
        }
        return index;
      };
    }
  });

  // ../node_modules/source-map/lib/quick-sort.js
  var require_quick_sort = __commonJS({
    "../node_modules/source-map/lib/quick-sort.js"(exports) {
      function swap(ary, x, y) {
        var temp = ary[x];
        ary[x] = ary[y];
        ary[y] = temp;
      }
      function randomIntInRange(low2, high) {
        return Math.round(low2 + Math.random() * (high - low2));
      }
      function doQuickSort(ary, comparator, p, r) {
        if (p < r) {
          var pivotIndex = randomIntInRange(p, r);
          var i2 = p - 1;
          swap(ary, pivotIndex, r);
          var pivot = ary[r];
          for (var j = p; j < r; j++) {
            if (comparator(ary[j], pivot) <= 0) {
              i2 += 1;
              swap(ary, i2, j);
            }
          }
          swap(ary, i2 + 1, j);
          var q = i2 + 1;
          doQuickSort(ary, comparator, p, q - 1);
          doQuickSort(ary, comparator, q + 1, r);
        }
      }
      exports.quickSort = function(ary, comparator) {
        doQuickSort(ary, comparator, 0, ary.length - 1);
      };
    }
  });

  // ../node_modules/source-map/lib/source-map-consumer.js
  var require_source_map_consumer = __commonJS({
    "../node_modules/source-map/lib/source-map-consumer.js"(exports) {
      var util2 = require_util();
      var binarySearch = require_binary_search();
      var ArraySet = require_array_set().ArraySet;
      var base64VLQ = require_base64_vlq();
      var quickSort = require_quick_sort().quickSort;
      function SourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util2.parseSourceMapInput(aSourceMap);
        }
        return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
      }
      SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
        return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
      };
      SourceMapConsumer.prototype._version = 3;
      SourceMapConsumer.prototype.__generatedMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
        configurable: true,
        enumerable: true,
        get: function() {
          if (!this.__generatedMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__generatedMappings;
        }
      });
      SourceMapConsumer.prototype.__originalMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
        configurable: true,
        enumerable: true,
        get: function() {
          if (!this.__originalMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__originalMappings;
        }
      });
      SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
        var c = aStr.charAt(index);
        return c === ";" || c === ",";
      };
      SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        throw new Error("Subclasses must implement _parseMappings");
      };
      SourceMapConsumer.GENERATED_ORDER = 1;
      SourceMapConsumer.ORIGINAL_ORDER = 2;
      SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
      SourceMapConsumer.LEAST_UPPER_BOUND = 2;
      SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
        var context = aContext || null;
        var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
        var mappings;
        switch (order) {
          case SourceMapConsumer.GENERATED_ORDER:
            mappings = this._generatedMappings;
            break;
          case SourceMapConsumer.ORIGINAL_ORDER:
            mappings = this._originalMappings;
            break;
          default:
            throw new Error("Unknown order of iteration.");
        }
        var sourceRoot = this.sourceRoot;
        mappings.map(function(mapping) {
          var source = mapping.source === null ? null : this._sources.at(mapping.source);
          source = util2.computeSourceURL(sourceRoot, source, this._sourceMapURL);
          return {
            source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name === null ? null : this._names.at(mapping.name)
          };
        }, this).forEach(aCallback, context);
      };
      SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
        var line = util2.getArg(aArgs, "line");
        var needle = {
          source: util2.getArg(aArgs, "source"),
          originalLine: line,
          originalColumn: util2.getArg(aArgs, "column", 0)
        };
        needle.source = this._findSourceIndex(needle.source);
        if (needle.source < 0) {
          return [];
        }
        var mappings = [];
        var index = this._findMapping(
          needle,
          this._originalMappings,
          "originalLine",
          "originalColumn",
          util2.compareByOriginalPositions,
          binarySearch.LEAST_UPPER_BOUND
        );
        if (index >= 0) {
          var mapping = this._originalMappings[index];
          if (aArgs.column === void 0) {
            var originalLine = mapping.originalLine;
            while (mapping && mapping.originalLine === originalLine) {
              mappings.push({
                line: util2.getArg(mapping, "generatedLine", null),
                column: util2.getArg(mapping, "generatedColumn", null),
                lastColumn: util2.getArg(mapping, "lastGeneratedColumn", null)
              });
              mapping = this._originalMappings[++index];
            }
          } else {
            var originalColumn = mapping.originalColumn;
            while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
              mappings.push({
                line: util2.getArg(mapping, "generatedLine", null),
                column: util2.getArg(mapping, "generatedColumn", null),
                lastColumn: util2.getArg(mapping, "lastGeneratedColumn", null)
              });
              mapping = this._originalMappings[++index];
            }
          }
        }
        return mappings;
      };
      exports.SourceMapConsumer = SourceMapConsumer;
      function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util2.parseSourceMapInput(aSourceMap);
        }
        var version2 = util2.getArg(sourceMap, "version");
        var sources = util2.getArg(sourceMap, "sources");
        var names = util2.getArg(sourceMap, "names", []);
        var sourceRoot = util2.getArg(sourceMap, "sourceRoot", null);
        var sourcesContent = util2.getArg(sourceMap, "sourcesContent", null);
        var mappings = util2.getArg(sourceMap, "mappings");
        var file = util2.getArg(sourceMap, "file", null);
        if (version2 != this._version) {
          throw new Error("Unsupported version: " + version2);
        }
        if (sourceRoot) {
          sourceRoot = util2.normalize(sourceRoot);
        }
        sources = sources.map(String).map(util2.normalize).map(function(source) {
          return sourceRoot && util2.isAbsolute(sourceRoot) && util2.isAbsolute(source) ? util2.relative(sourceRoot, source) : source;
        });
        this._names = ArraySet.fromArray(names.map(String), true);
        this._sources = ArraySet.fromArray(sources, true);
        this._absoluteSources = this._sources.toArray().map(function(s) {
          return util2.computeSourceURL(sourceRoot, s, aSourceMapURL);
        });
        this.sourceRoot = sourceRoot;
        this.sourcesContent = sourcesContent;
        this._mappings = mappings;
        this._sourceMapURL = aSourceMapURL;
        this.file = file;
      }
      BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
      BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
        var relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util2.relative(this.sourceRoot, relativeSource);
        }
        if (this._sources.has(relativeSource)) {
          return this._sources.indexOf(relativeSource);
        }
        var i2;
        for (i2 = 0; i2 < this._absoluteSources.length; ++i2) {
          if (this._absoluteSources[i2] == aSource) {
            return i2;
          }
        }
        return -1;
      };
      BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
        var smc = Object.create(BasicSourceMapConsumer.prototype);
        var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
        var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
        smc.sourceRoot = aSourceMap._sourceRoot;
        smc.sourcesContent = aSourceMap._generateSourcesContent(
          smc._sources.toArray(),
          smc.sourceRoot
        );
        smc.file = aSourceMap._file;
        smc._sourceMapURL = aSourceMapURL;
        smc._absoluteSources = smc._sources.toArray().map(function(s) {
          return util2.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
        });
        var generatedMappings = aSourceMap._mappings.toArray().slice();
        var destGeneratedMappings = smc.__generatedMappings = [];
        var destOriginalMappings = smc.__originalMappings = [];
        for (var i2 = 0, length = generatedMappings.length; i2 < length; i2++) {
          var srcMapping = generatedMappings[i2];
          var destMapping = new Mapping();
          destMapping.generatedLine = srcMapping.generatedLine;
          destMapping.generatedColumn = srcMapping.generatedColumn;
          if (srcMapping.source) {
            destMapping.source = sources.indexOf(srcMapping.source);
            destMapping.originalLine = srcMapping.originalLine;
            destMapping.originalColumn = srcMapping.originalColumn;
            if (srcMapping.name) {
              destMapping.name = names.indexOf(srcMapping.name);
            }
            destOriginalMappings.push(destMapping);
          }
          destGeneratedMappings.push(destMapping);
        }
        quickSort(smc.__originalMappings, util2.compareByOriginalPositions);
        return smc;
      };
      BasicSourceMapConsumer.prototype._version = 3;
      Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
        get: function() {
          return this._absoluteSources.slice();
        }
      });
      function Mapping() {
        this.generatedLine = 0;
        this.generatedColumn = 0;
        this.source = null;
        this.originalLine = null;
        this.originalColumn = null;
        this.name = null;
      }
      BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        var generatedLine = 1;
        var previousGeneratedColumn = 0;
        var previousOriginalLine = 0;
        var previousOriginalColumn = 0;
        var previousSource = 0;
        var previousName = 0;
        var length = aStr.length;
        var index = 0;
        var cachedSegments = {};
        var temp = {};
        var originalMappings = [];
        var generatedMappings = [];
        var mapping, str, segment, end, value;
        while (index < length) {
          if (aStr.charAt(index) === ";") {
            generatedLine++;
            index++;
            previousGeneratedColumn = 0;
          } else if (aStr.charAt(index) === ",") {
            index++;
          } else {
            mapping = new Mapping();
            mapping.generatedLine = generatedLine;
            for (end = index; end < length; end++) {
              if (this._charIsMappingSeparator(aStr, end)) {
                break;
              }
            }
            str = aStr.slice(index, end);
            segment = cachedSegments[str];
            if (segment) {
              index += str.length;
            } else {
              segment = [];
              while (index < end) {
                base64VLQ.decode(aStr, index, temp);
                value = temp.value;
                index = temp.rest;
                segment.push(value);
              }
              if (segment.length === 2) {
                throw new Error("Found a source, but no line and column");
              }
              if (segment.length === 3) {
                throw new Error("Found a source and line, but no column");
              }
              cachedSegments[str] = segment;
            }
            mapping.generatedColumn = previousGeneratedColumn + segment[0];
            previousGeneratedColumn = mapping.generatedColumn;
            if (segment.length > 1) {
              mapping.source = previousSource + segment[1];
              previousSource += segment[1];
              mapping.originalLine = previousOriginalLine + segment[2];
              previousOriginalLine = mapping.originalLine;
              mapping.originalLine += 1;
              mapping.originalColumn = previousOriginalColumn + segment[3];
              previousOriginalColumn = mapping.originalColumn;
              if (segment.length > 4) {
                mapping.name = previousName + segment[4];
                previousName += segment[4];
              }
            }
            generatedMappings.push(mapping);
            if (typeof mapping.originalLine === "number") {
              originalMappings.push(mapping);
            }
          }
        }
        quickSort(generatedMappings, util2.compareByGeneratedPositionsDeflated);
        this.__generatedMappings = generatedMappings;
        quickSort(originalMappings, util2.compareByOriginalPositions);
        this.__originalMappings = originalMappings;
      };
      BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
        if (aNeedle[aLineName] <= 0) {
          throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
        }
        if (aNeedle[aColumnName] < 0) {
          throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
        }
        return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
      };
      BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
        for (var index = 0; index < this._generatedMappings.length; ++index) {
          var mapping = this._generatedMappings[index];
          if (index + 1 < this._generatedMappings.length) {
            var nextMapping = this._generatedMappings[index + 1];
            if (mapping.generatedLine === nextMapping.generatedLine) {
              mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
              continue;
            }
          }
          mapping.lastGeneratedColumn = Infinity;
        }
      };
      BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util2.getArg(aArgs, "line"),
          generatedColumn: util2.getArg(aArgs, "column")
        };
        var index = this._findMapping(
          needle,
          this._generatedMappings,
          "generatedLine",
          "generatedColumn",
          util2.compareByGeneratedPositionsDeflated,
          util2.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
        );
        if (index >= 0) {
          var mapping = this._generatedMappings[index];
          if (mapping.generatedLine === needle.generatedLine) {
            var source = util2.getArg(mapping, "source", null);
            if (source !== null) {
              source = this._sources.at(source);
              source = util2.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
            }
            var name = util2.getArg(mapping, "name", null);
            if (name !== null) {
              name = this._names.at(name);
            }
            return {
              source,
              line: util2.getArg(mapping, "originalLine", null),
              column: util2.getArg(mapping, "originalColumn", null),
              name
            };
          }
        }
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      };
      BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
        if (!this.sourcesContent) {
          return false;
        }
        return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
          return sc == null;
        });
      };
      BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        if (!this.sourcesContent) {
          return null;
        }
        var index = this._findSourceIndex(aSource);
        if (index >= 0) {
          return this.sourcesContent[index];
        }
        var relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util2.relative(this.sourceRoot, relativeSource);
        }
        var url;
        if (this.sourceRoot != null && (url = util2.urlParse(this.sourceRoot))) {
          var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
          if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
          }
          if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
            return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
          }
        }
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + relativeSource + '" is not in the SourceMap.');
        }
      };
      BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
        var source = util2.getArg(aArgs, "source");
        source = this._findSourceIndex(source);
        if (source < 0) {
          return {
            line: null,
            column: null,
            lastColumn: null
          };
        }
        var needle = {
          source,
          originalLine: util2.getArg(aArgs, "line"),
          originalColumn: util2.getArg(aArgs, "column")
        };
        var index = this._findMapping(
          needle,
          this._originalMappings,
          "originalLine",
          "originalColumn",
          util2.compareByOriginalPositions,
          util2.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
        );
        if (index >= 0) {
          var mapping = this._originalMappings[index];
          if (mapping.source === needle.source) {
            return {
              line: util2.getArg(mapping, "generatedLine", null),
              column: util2.getArg(mapping, "generatedColumn", null),
              lastColumn: util2.getArg(mapping, "lastGeneratedColumn", null)
            };
          }
        }
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      };
      exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
      function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util2.parseSourceMapInput(aSourceMap);
        }
        var version2 = util2.getArg(sourceMap, "version");
        var sections = util2.getArg(sourceMap, "sections");
        if (version2 != this._version) {
          throw new Error("Unsupported version: " + version2);
        }
        this._sources = new ArraySet();
        this._names = new ArraySet();
        var lastOffset = {
          line: -1,
          column: 0
        };
        this._sections = sections.map(function(s) {
          if (s.url) {
            throw new Error("Support for url field in sections not implemented.");
          }
          var offset = util2.getArg(s, "offset");
          var offsetLine = util2.getArg(offset, "line");
          var offsetColumn = util2.getArg(offset, "column");
          if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
            throw new Error("Section offsets must be ordered and non-overlapping.");
          }
          lastOffset = offset;
          return {
            generatedOffset: {
              // The offset fields are 0-based, but we use 1-based indices when
              // encoding/decoding from VLQ.
              generatedLine: offsetLine + 1,
              generatedColumn: offsetColumn + 1
            },
            consumer: new SourceMapConsumer(util2.getArg(s, "map"), aSourceMapURL)
          };
        });
      }
      IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
      IndexedSourceMapConsumer.prototype._version = 3;
      Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
        get: function() {
          var sources = [];
          for (var i2 = 0; i2 < this._sections.length; i2++) {
            for (var j = 0; j < this._sections[i2].consumer.sources.length; j++) {
              sources.push(this._sections[i2].consumer.sources[j]);
            }
          }
          return sources;
        }
      });
      IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util2.getArg(aArgs, "line"),
          generatedColumn: util2.getArg(aArgs, "column")
        };
        var sectionIndex = binarySearch.search(
          needle,
          this._sections,
          function(needle2, section2) {
            var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
            if (cmp) {
              return cmp;
            }
            return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
          }
        );
        var section = this._sections[sectionIndex];
        if (!section) {
          return {
            source: null,
            line: null,
            column: null,
            name: null
          };
        }
        return section.consumer.originalPositionFor({
          line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
          column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
          bias: aArgs.bias
        });
      };
      IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
        return this._sections.every(function(s) {
          return s.consumer.hasContentsOfAllSources();
        });
      };
      IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        for (var i2 = 0; i2 < this._sections.length; i2++) {
          var section = this._sections[i2];
          var content = section.consumer.sourceContentFor(aSource, true);
          if (content) {
            return content;
          }
        }
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + aSource + '" is not in the SourceMap.');
        }
      };
      IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
        for (var i2 = 0; i2 < this._sections.length; i2++) {
          var section = this._sections[i2];
          if (section.consumer._findSourceIndex(util2.getArg(aArgs, "source")) === -1) {
            continue;
          }
          var generatedPosition = section.consumer.generatedPositionFor(aArgs);
          if (generatedPosition) {
            var ret = {
              line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
              column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
            };
            return ret;
          }
        }
        return {
          line: null,
          column: null
        };
      };
      IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        for (var i2 = 0; i2 < this._sections.length; i2++) {
          var section = this._sections[i2];
          var sectionMappings = section.consumer._generatedMappings;
          for (var j = 0; j < sectionMappings.length; j++) {
            var mapping = sectionMappings[j];
            var source = section.consumer._sources.at(mapping.source);
            source = util2.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
            this._sources.add(source);
            source = this._sources.indexOf(source);
            var name = null;
            if (mapping.name) {
              name = section.consumer._names.at(mapping.name);
              this._names.add(name);
              name = this._names.indexOf(name);
            }
            var adjustedMapping = {
              source,
              generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
              generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
              originalLine: mapping.originalLine,
              originalColumn: mapping.originalColumn,
              name
            };
            this.__generatedMappings.push(adjustedMapping);
            if (typeof adjustedMapping.originalLine === "number") {
              this.__originalMappings.push(adjustedMapping);
            }
          }
        }
        quickSort(this.__generatedMappings, util2.compareByGeneratedPositionsDeflated);
        quickSort(this.__originalMappings, util2.compareByOriginalPositions);
      };
      exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
    }
  });

  // ../node_modules/source-map/lib/source-node.js
  var require_source_node = __commonJS({
    "../node_modules/source-map/lib/source-node.js"(exports) {
      var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
      var util2 = require_util();
      var REGEX_NEWLINE = /(\r?\n)/;
      var NEWLINE_CODE = 10;
      var isSourceNode = "$$$isSourceNode$$$";
      function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
        this.children = [];
        this.sourceContents = {};
        this.line = aLine == null ? null : aLine;
        this.column = aColumn == null ? null : aColumn;
        this.source = aSource == null ? null : aSource;
        this.name = aName == null ? null : aName;
        this[isSourceNode] = true;
        if (aChunks != null)
          this.add(aChunks);
      }
      SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
        var node2 = new SourceNode();
        var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
        var remainingLinesIndex = 0;
        var shiftNextLine = function() {
          var lineContents = getNextLine();
          var newLine = getNextLine() || "";
          return lineContents + newLine;
          function getNextLine() {
            return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
          }
        };
        var lastGeneratedLine = 1, lastGeneratedColumn = 0;
        var lastMapping = null;
        aSourceMapConsumer.eachMapping(function(mapping) {
          if (lastMapping !== null) {
            if (lastGeneratedLine < mapping.generatedLine) {
              addMappingWithCode(lastMapping, shiftNextLine());
              lastGeneratedLine++;
              lastGeneratedColumn = 0;
            } else {
              var nextLine = remainingLines[remainingLinesIndex] || "";
              var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
              remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
              lastGeneratedColumn = mapping.generatedColumn;
              addMappingWithCode(lastMapping, code);
              lastMapping = mapping;
              return;
            }
          }
          while (lastGeneratedLine < mapping.generatedLine) {
            node2.add(shiftNextLine());
            lastGeneratedLine++;
          }
          if (lastGeneratedColumn < mapping.generatedColumn) {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            node2.add(nextLine.substr(0, mapping.generatedColumn));
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
          }
          lastMapping = mapping;
        }, this);
        if (remainingLinesIndex < remainingLines.length) {
          if (lastMapping) {
            addMappingWithCode(lastMapping, shiftNextLine());
          }
          node2.add(remainingLines.splice(remainingLinesIndex).join(""));
        }
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            if (aRelativePath != null) {
              sourceFile = util2.join(aRelativePath, sourceFile);
            }
            node2.setSourceContent(sourceFile, content);
          }
        });
        return node2;
        function addMappingWithCode(mapping, code) {
          if (mapping === null || mapping.source === void 0) {
            node2.add(code);
          } else {
            var source = aRelativePath ? util2.join(aRelativePath, mapping.source) : mapping.source;
            node2.add(new SourceNode(
              mapping.originalLine,
              mapping.originalColumn,
              source,
              code,
              mapping.name
            ));
          }
        }
      };
      SourceNode.prototype.add = function SourceNode_add(aChunk) {
        if (Array.isArray(aChunk)) {
          aChunk.forEach(function(chunk) {
            this.add(chunk);
          }, this);
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          if (aChunk) {
            this.children.push(aChunk);
          }
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      };
      SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
        if (Array.isArray(aChunk)) {
          for (var i2 = aChunk.length - 1; i2 >= 0; i2--) {
            this.prepend(aChunk[i2]);
          }
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          this.children.unshift(aChunk);
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      };
      SourceNode.prototype.walk = function SourceNode_walk(aFn) {
        var chunk;
        for (var i2 = 0, len = this.children.length; i2 < len; i2++) {
          chunk = this.children[i2];
          if (chunk[isSourceNode]) {
            chunk.walk(aFn);
          } else {
            if (chunk !== "") {
              aFn(chunk, {
                source: this.source,
                line: this.line,
                column: this.column,
                name: this.name
              });
            }
          }
        }
      };
      SourceNode.prototype.join = function SourceNode_join(aSep) {
        var newChildren;
        var i2;
        var len = this.children.length;
        if (len > 0) {
          newChildren = [];
          for (i2 = 0; i2 < len - 1; i2++) {
            newChildren.push(this.children[i2]);
            newChildren.push(aSep);
          }
          newChildren.push(this.children[i2]);
          this.children = newChildren;
        }
        return this;
      };
      SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
        var lastChild = this.children[this.children.length - 1];
        if (lastChild[isSourceNode]) {
          lastChild.replaceRight(aPattern, aReplacement);
        } else if (typeof lastChild === "string") {
          this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
        } else {
          this.children.push("".replace(aPattern, aReplacement));
        }
        return this;
      };
      SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
        this.sourceContents[util2.toSetString(aSourceFile)] = aSourceContent;
      };
      SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
        for (var i2 = 0, len = this.children.length; i2 < len; i2++) {
          if (this.children[i2][isSourceNode]) {
            this.children[i2].walkSourceContents(aFn);
          }
        }
        var sources = Object.keys(this.sourceContents);
        for (var i2 = 0, len = sources.length; i2 < len; i2++) {
          aFn(util2.fromSetString(sources[i2]), this.sourceContents[sources[i2]]);
        }
      };
      SourceNode.prototype.toString = function SourceNode_toString() {
        var str = "";
        this.walk(function(chunk) {
          str += chunk;
        });
        return str;
      };
      SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
        var generated = {
          code: "",
          line: 1,
          column: 0
        };
        var map3 = new SourceMapGenerator(aArgs);
        var sourceMappingActive = false;
        var lastOriginalSource = null;
        var lastOriginalLine = null;
        var lastOriginalColumn = null;
        var lastOriginalName = null;
        this.walk(function(chunk, original) {
          generated.code += chunk;
          if (original.source !== null && original.line !== null && original.column !== null) {
            if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
              map3.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
            lastOriginalSource = original.source;
            lastOriginalLine = original.line;
            lastOriginalColumn = original.column;
            lastOriginalName = original.name;
            sourceMappingActive = true;
          } else if (sourceMappingActive) {
            map3.addMapping({
              generated: {
                line: generated.line,
                column: generated.column
              }
            });
            lastOriginalSource = null;
            sourceMappingActive = false;
          }
          for (var idx = 0, length = chunk.length; idx < length; idx++) {
            if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
              generated.line++;
              generated.column = 0;
              if (idx + 1 === length) {
                lastOriginalSource = null;
                sourceMappingActive = false;
              } else if (sourceMappingActive) {
                map3.addMapping({
                  source: original.source,
                  original: {
                    line: original.line,
                    column: original.column
                  },
                  generated: {
                    line: generated.line,
                    column: generated.column
                  },
                  name: original.name
                });
              }
            } else {
              generated.column++;
            }
          }
        });
        this.walkSourceContents(function(sourceFile, sourceContent) {
          map3.setSourceContent(sourceFile, sourceContent);
        });
        return { code: generated.code, map: map3 };
      };
      exports.SourceNode = SourceNode;
    }
  });

  // ../node_modules/source-map/source-map.js
  var require_source_map = __commonJS({
    "../node_modules/source-map/source-map.js"(exports) {
      exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
      exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
      exports.SourceNode = require_source_node().SourceNode;
    }
  });

  // node-modules-polyfills:path
  var path_exports = {};
  __export(path_exports, {
    basename: () => basename,
    default: () => path_default,
    delimiter: () => delimiter,
    dirname: () => dirname,
    extname: () => extname,
    isAbsolute: () => isAbsolute,
    join: () => join,
    normalize: () => normalize,
    relative: () => relative,
    resolve: () => resolve,
    sep: () => sep
  });
  function normalizeArray(parts, allowAboveRoot) {
    var up = 0;
    for (var i2 = parts.length - 1; i2 >= 0; i2--) {
      var last = parts[i2];
      if (last === ".") {
        parts.splice(i2, 1);
      } else if (last === "..") {
        parts.splice(i2, 1);
        up++;
      } else if (up) {
        parts.splice(i2, 1);
        up--;
      }
    }
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift("..");
      }
    }
    return parts;
  }
  function resolve() {
    var resolvedPath = "", resolvedAbsolute = false;
    for (var i2 = arguments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
      var path2 = i2 >= 0 ? arguments[i2] : "/";
      if (typeof path2 !== "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path2) {
        continue;
      }
      resolvedPath = path2 + "/" + resolvedPath;
      resolvedAbsolute = path2.charAt(0) === "/";
    }
    resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
      return !!p;
    }), !resolvedAbsolute).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
  }
  function normalize(path2) {
    var isPathAbsolute = isAbsolute(path2), trailingSlash = substr(path2, -1) === "/";
    path2 = normalizeArray(filter(path2.split("/"), function(p) {
      return !!p;
    }), !isPathAbsolute).join("/");
    if (!path2 && !isPathAbsolute) {
      path2 = ".";
    }
    if (path2 && trailingSlash) {
      path2 += "/";
    }
    return (isPathAbsolute ? "/" : "") + path2;
  }
  function isAbsolute(path2) {
    return path2.charAt(0) === "/";
  }
  function join() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return normalize(filter(paths, function(p, index) {
      if (typeof p !== "string") {
        throw new TypeError("Arguments to path.join must be strings");
      }
      return p;
    }).join("/"));
  }
  function relative(from3, to) {
    from3 = resolve(from3).substr(1);
    to = resolve(to).substr(1);
    function trim3(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== "")
          break;
      }
      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== "")
          break;
      }
      if (start > end)
        return [];
      return arr.slice(start, end - start + 1);
    }
    var fromParts = trim3(from3.split("/"));
    var toParts = trim3(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i2 = 0; i2 < length; i2++) {
      if (fromParts[i2] !== toParts[i2]) {
        samePartsLength = i2;
        break;
      }
    }
    var outputParts = [];
    for (var i2 = samePartsLength; i2 < fromParts.length; i2++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  }
  function dirname(path2) {
    var result = splitPath(path2), root2 = result[0], dir = result[1];
    if (!root2 && !dir) {
      return ".";
    }
    if (dir) {
      dir = dir.substr(0, dir.length - 1);
    }
    return root2 + dir;
  }
  function basename(path2, ext) {
    var f = splitPath(path2)[2];
    if (ext && f.substr(-1 * ext.length) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  }
  function extname(path2) {
    return splitPath(path2)[3];
  }
  function filter(xs, f) {
    if (xs.filter)
      return xs.filter(f);
    var res = [];
    for (var i2 = 0; i2 < xs.length; i2++) {
      if (f(xs[i2], i2, xs))
        res.push(xs[i2]);
    }
    return res;
  }
  var splitPathRe, splitPath, sep, delimiter, path_default, substr;
  var init_path = __esm({
    "node-modules-polyfills:path"() {
      splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
      splitPath = function(filename) {
        return splitPathRe.exec(filename).slice(1);
      };
      sep = "/";
      delimiter = ":";
      path_default = {
        extname,
        basename,
        dirname,
        sep,
        delimiter,
        relative,
        join,
        isAbsolute,
        normalize,
        resolve
      };
      substr = "ab".substr(-1) === "b" ? function(str, start, len) {
        return str.substr(start, len);
      } : function(str, start, len) {
        if (start < 0)
          start = str.length + start;
        return str.substr(start, len);
      };
    }
  });

  // node-modules-polyfills-commonjs:path
  var require_path = __commonJS({
    "node-modules-polyfills-commonjs:path"(exports, module) {
      var polyfill = (init_path(), __toCommonJS(path_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node-modules-polyfills:fs
  var fs_exports = {};
  __export(fs_exports, {
    default: () => fs_default
  });
  var fs_default;
  var init_fs = __esm({
    "node-modules-polyfills:fs"() {
      fs_default = {};
    }
  });

  // node-modules-polyfills-commonjs:fs
  var require_fs = __commonJS({
    "node-modules-polyfills-commonjs:fs"(exports, module) {
      var polyfill = (init_fs(), __toCommonJS(fs_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // ../node_modules/buffer-from/index.js
  var require_buffer_from = __commonJS({
    "../node_modules/buffer-from/index.js"(exports, module) {
      var toString3 = Object.prototype.toString;
      var isModern = typeof Buffer !== "undefined" && typeof Buffer.alloc === "function" && typeof Buffer.allocUnsafe === "function" && typeof Buffer.from === "function";
      function isArrayBuffer(input) {
        return toString3.call(input).slice(8, -1) === "ArrayBuffer";
      }
      function fromArrayBuffer(obj, byteOffset, length) {
        byteOffset >>>= 0;
        var maxLength = obj.byteLength - byteOffset;
        if (maxLength < 0) {
          throw new RangeError("'offset' is out of bounds");
        }
        if (length === void 0) {
          length = maxLength;
        } else {
          length >>>= 0;
          if (length > maxLength) {
            throw new RangeError("'length' is out of bounds");
          }
        }
        return isModern ? Buffer.from(obj.slice(byteOffset, byteOffset + length)) : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)));
      }
      function fromString(string2, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer.isEncoding(encoding)) {
          throw new TypeError('"encoding" must be a valid string encoding');
        }
        return isModern ? Buffer.from(string2, encoding) : new Buffer(string2, encoding);
      }
      function bufferFrom(value, encodingOrOffset, length) {
        if (typeof value === "number") {
          throw new TypeError('"value" argument must not be a number');
        }
        if (isArrayBuffer(value)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        return isModern ? Buffer.from(value) : new Buffer(value);
      }
      module.exports = bufferFrom;
    }
  });

  // ../node_modules/source-map-support/source-map-support.js
  var require_source_map_support = __commonJS({
    "../node_modules/source-map-support/source-map-support.js"(exports, module) {
      var SourceMapConsumer = require_source_map().SourceMapConsumer;
      var path2 = require_path();
      var fs;
      try {
        fs = require_fs();
        if (!fs.existsSync || !fs.readFileSync) {
          fs = null;
        }
      } catch (err) {
      }
      var bufferFrom = require_buffer_from();
      function dynamicRequire(mod, request) {
        return mod.require(request);
      }
      var errorFormatterInstalled = false;
      var uncaughtShimInstalled = false;
      var emptyCacheBetweenOperations = false;
      var environment = "auto";
      var fileContentsCache = {};
      var sourceMapCache = {};
      var reSourceMap = /^data:application\/json[^,]+base64,/;
      var retrieveFileHandlers = [];
      var retrieveMapHandlers = [];
      function isInBrowser() {
        if (environment === "browser")
          return true;
        if (environment === "node")
          return false;
        return typeof window !== "undefined" && typeof XMLHttpRequest === "function" && !(window.require && window.module && window.process && window.process.type === "renderer");
      }
      function hasGlobalProcessEventEmitter() {
        return typeof process === "object" && process !== null && typeof process.on === "function";
      }
      function globalProcessVersion() {
        if (typeof process === "object" && process !== null) {
          return process.version;
        } else {
          return "";
        }
      }
      function globalProcessStderr() {
        if (typeof process === "object" && process !== null) {
          return process.stderr;
        }
      }
      function globalProcessExit(code) {
        if (typeof process === "object" && process !== null && typeof process.exit === "function") {
          return process.exit(code);
        }
      }
      function handlerExec(list) {
        return function(arg) {
          for (var i2 = 0; i2 < list.length; i2++) {
            var ret = list[i2](arg);
            if (ret) {
              return ret;
            }
          }
          return null;
        };
      }
      var retrieveFile = handlerExec(retrieveFileHandlers);
      retrieveFileHandlers.push(function(path3) {
        path3 = path3.trim();
        if (/^file:/.test(path3)) {
          path3 = path3.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
            return drive ? "" : (
              // file:///C:/dir/file -> C:/dir/file
              "/"
            );
          });
        }
        if (path3 in fileContentsCache) {
          return fileContentsCache[path3];
        }
        var contents = "";
        try {
          if (!fs) {
            var xhr = new XMLHttpRequest();
            xhr.open(
              "GET",
              path3,
              /** async */
              false
            );
            xhr.send(null);
            if (xhr.readyState === 4 && xhr.status === 200) {
              contents = xhr.responseText;
            }
          } else if (fs.existsSync(path3)) {
            contents = fs.readFileSync(path3, "utf8");
          }
        } catch (er) {
        }
        return fileContentsCache[path3] = contents;
      });
      function supportRelativeURL(file, url) {
        if (!file)
          return url;
        var dir = path2.dirname(file);
        var match2 = /^\w+:\/\/[^\/]*/.exec(dir);
        var protocol = match2 ? match2[0] : "";
        var startPath = dir.slice(protocol.length);
        if (protocol && /^\/\w\:/.test(startPath)) {
          protocol += "/";
          return protocol + path2.resolve(dir.slice(protocol.length), url).replace(/\\/g, "/");
        }
        return protocol + path2.resolve(dir.slice(protocol.length), url);
      }
      function retrieveSourceMapURL(source) {
        var fileData;
        if (isInBrowser()) {
          try {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", source, false);
            xhr.send(null);
            fileData = xhr.readyState === 4 ? xhr.responseText : null;
            var sourceMapHeader = xhr.getResponseHeader("SourceMap") || xhr.getResponseHeader("X-SourceMap");
            if (sourceMapHeader) {
              return sourceMapHeader;
            }
          } catch (e) {
          }
        }
        fileData = retrieveFile(source);
        var re = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
        var lastMatch, match2;
        while (match2 = re.exec(fileData))
          lastMatch = match2;
        if (!lastMatch)
          return null;
        return lastMatch[1];
      }
      var retrieveSourceMap = handlerExec(retrieveMapHandlers);
      retrieveMapHandlers.push(function(source) {
        var sourceMappingURL = retrieveSourceMapURL(source);
        if (!sourceMappingURL)
          return null;
        var sourceMapData;
        if (reSourceMap.test(sourceMappingURL)) {
          var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1);
          sourceMapData = bufferFrom(rawData, "base64").toString();
          sourceMappingURL = source;
        } else {
          sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
          sourceMapData = retrieveFile(sourceMappingURL);
        }
        if (!sourceMapData) {
          return null;
        }
        return {
          url: sourceMappingURL,
          map: sourceMapData
        };
      });
      function mapSourcePosition(position) {
        var sourceMap = sourceMapCache[position.source];
        if (!sourceMap) {
          var urlAndMap = retrieveSourceMap(position.source);
          if (urlAndMap) {
            sourceMap = sourceMapCache[position.source] = {
              url: urlAndMap.url,
              map: new SourceMapConsumer(urlAndMap.map)
            };
            if (sourceMap.map.sourcesContent) {
              sourceMap.map.sources.forEach(function(source, i2) {
                var contents = sourceMap.map.sourcesContent[i2];
                if (contents) {
                  var url = supportRelativeURL(sourceMap.url, source);
                  fileContentsCache[url] = contents;
                }
              });
            }
          } else {
            sourceMap = sourceMapCache[position.source] = {
              url: null,
              map: null
            };
          }
        }
        if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === "function") {
          var originalPosition = sourceMap.map.originalPositionFor(position);
          if (originalPosition.source !== null) {
            originalPosition.source = supportRelativeURL(
              sourceMap.url,
              originalPosition.source
            );
            return originalPosition;
          }
        }
        return position;
      }
      function mapEvalOrigin(origin) {
        var match2 = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
        if (match2) {
          var position = mapSourcePosition({
            source: match2[2],
            line: +match2[3],
            column: match2[4] - 1
          });
          return "eval at " + match2[1] + " (" + position.source + ":" + position.line + ":" + (position.column + 1) + ")";
        }
        match2 = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
        if (match2) {
          return "eval at " + match2[1] + " (" + mapEvalOrigin(match2[2]) + ")";
        }
        return origin;
      }
      function CallSiteToString() {
        var fileName;
        var fileLocation = "";
        if (this.isNative()) {
          fileLocation = "native";
        } else {
          fileName = this.getScriptNameOrSourceURL();
          if (!fileName && this.isEval()) {
            fileLocation = this.getEvalOrigin();
            fileLocation += ", ";
          }
          if (fileName) {
            fileLocation += fileName;
          } else {
            fileLocation += "<anonymous>";
          }
          var lineNumber = this.getLineNumber();
          if (lineNumber != null) {
            fileLocation += ":" + lineNumber;
            var columnNumber = this.getColumnNumber();
            if (columnNumber) {
              fileLocation += ":" + columnNumber;
            }
          }
        }
        var line = "";
        var functionName2 = this.getFunctionName();
        var addSuffix = true;
        var isConstructor4 = this.isConstructor();
        var isMethodCall = !(this.isToplevel() || isConstructor4);
        if (isMethodCall) {
          var typeName = this.getTypeName();
          if (typeName === "[object Object]") {
            typeName = "null";
          }
          var methodName = this.getMethodName();
          if (functionName2) {
            if (typeName && functionName2.indexOf(typeName) != 0) {
              line += typeName + ".";
            }
            line += functionName2;
            if (methodName && functionName2.indexOf("." + methodName) != functionName2.length - methodName.length - 1) {
              line += " [as " + methodName + "]";
            }
          } else {
            line += typeName + "." + (methodName || "<anonymous>");
          }
        } else if (isConstructor4) {
          line += "new " + (functionName2 || "<anonymous>");
        } else if (functionName2) {
          line += functionName2;
        } else {
          line += fileLocation;
          addSuffix = false;
        }
        if (addSuffix) {
          line += " (" + fileLocation + ")";
        }
        return line;
      }
      function cloneCallSite(frame) {
        var object2 = {};
        Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
          object2[name] = /^(?:is|get)/.test(name) ? function() {
            return frame[name].call(frame);
          } : frame[name];
        });
        object2.toString = CallSiteToString;
        return object2;
      }
      function wrapCallSite(frame, state) {
        if (state === void 0) {
          state = { nextPosition: null, curPosition: null };
        }
        if (frame.isNative()) {
          state.curPosition = null;
          return frame;
        }
        var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
        if (source) {
          var line = frame.getLineNumber();
          var column = frame.getColumnNumber() - 1;
          var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
          var headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;
          if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
            column -= headerLength;
          }
          var position = mapSourcePosition({
            source,
            line,
            column
          });
          state.curPosition = position;
          frame = cloneCallSite(frame);
          var originalFunctionName = frame.getFunctionName;
          frame.getFunctionName = function() {
            if (state.nextPosition == null) {
              return originalFunctionName();
            }
            return state.nextPosition.name || originalFunctionName();
          };
          frame.getFileName = function() {
            return position.source;
          };
          frame.getLineNumber = function() {
            return position.line;
          };
          frame.getColumnNumber = function() {
            return position.column + 1;
          };
          frame.getScriptNameOrSourceURL = function() {
            return position.source;
          };
          return frame;
        }
        var origin = frame.isEval() && frame.getEvalOrigin();
        if (origin) {
          origin = mapEvalOrigin(origin);
          frame = cloneCallSite(frame);
          frame.getEvalOrigin = function() {
            return origin;
          };
          return frame;
        }
        return frame;
      }
      function prepareStackTrace(error, stack2) {
        if (emptyCacheBetweenOperations) {
          fileContentsCache = {};
          sourceMapCache = {};
        }
        var name = error.name || "Error";
        var message = error.message || "";
        var errorString = name + ": " + message;
        var state = { nextPosition: null, curPosition: null };
        var processedStack = [];
        for (var i2 = stack2.length - 1; i2 >= 0; i2--) {
          processedStack.push("\n    at " + wrapCallSite(stack2[i2], state));
          state.nextPosition = state.curPosition;
        }
        state.curPosition = state.nextPosition = null;
        return errorString + processedStack.reverse().join("");
      }
      function getErrorSource(error) {
        var match2 = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
        if (match2) {
          var source = match2[1];
          var line = +match2[2];
          var column = +match2[3];
          var contents = fileContentsCache[source];
          if (!contents && fs && fs.existsSync(source)) {
            try {
              contents = fs.readFileSync(source, "utf8");
            } catch (er) {
              contents = "";
            }
          }
          if (contents) {
            var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
            if (code) {
              return source + ":" + line + "\n" + code + "\n" + new Array(column).join(" ") + "^";
            }
          }
        }
        return null;
      }
      function printErrorAndExit(error) {
        var source = getErrorSource(error);
        var stderr = globalProcessStderr();
        if (stderr && stderr._handle && stderr._handle.setBlocking) {
          stderr._handle.setBlocking(true);
        }
        if (source) {
          console.error();
          console.error(source);
        }
        console.error(error.stack);
        globalProcessExit(1);
      }
      function shimEmitUncaughtException() {
        var origEmit = process.emit;
        process.emit = function(type) {
          if (type === "uncaughtException") {
            var hasStack = arguments[1] && arguments[1].stack;
            var hasListeners = this.listeners(type).length > 0;
            if (hasStack && !hasListeners) {
              return printErrorAndExit(arguments[1]);
            }
          }
          return origEmit.apply(this, arguments);
        };
      }
      var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
      var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);
      exports.wrapCallSite = wrapCallSite;
      exports.getErrorSource = getErrorSource;
      exports.mapSourcePosition = mapSourcePosition;
      exports.retrieveSourceMap = retrieveSourceMap;
      exports.install = function(options) {
        options = options || {};
        if (options.environment) {
          environment = options.environment;
          if (["node", "browser", "auto"].indexOf(environment) === -1) {
            throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}");
          }
        }
        if (options.retrieveFile) {
          if (options.overrideRetrieveFile) {
            retrieveFileHandlers.length = 0;
          }
          retrieveFileHandlers.unshift(options.retrieveFile);
        }
        if (options.retrieveSourceMap) {
          if (options.overrideRetrieveSourceMap) {
            retrieveMapHandlers.length = 0;
          }
          retrieveMapHandlers.unshift(options.retrieveSourceMap);
        }
        if (options.hookRequire && !isInBrowser()) {
          var Module = dynamicRequire(module, "module");
          var $compile = Module.prototype._compile;
          if (!$compile.__sourceMapSupport) {
            Module.prototype._compile = function(content, filename) {
              fileContentsCache[filename] = content;
              sourceMapCache[filename] = void 0;
              return $compile.call(this, content, filename);
            };
            Module.prototype._compile.__sourceMapSupport = true;
          }
        }
        if (!emptyCacheBetweenOperations) {
          emptyCacheBetweenOperations = "emptyCacheBetweenOperations" in options ? options.emptyCacheBetweenOperations : false;
        }
        if (!errorFormatterInstalled) {
          errorFormatterInstalled = true;
          Error.prepareStackTrace = prepareStackTrace;
        }
        if (!uncaughtShimInstalled) {
          var installHandler = "handleUncaughtExceptions" in options ? options.handleUncaughtExceptions : true;
          try {
            var worker_threads = dynamicRequire(module, "worker_threads");
            if (worker_threads.isMainThread === false) {
              installHandler = false;
            }
          } catch (e) {
          }
          if (installHandler && hasGlobalProcessEventEmitter()) {
            uncaughtShimInstalled = true;
            shimEmitUncaughtException();
          }
        }
      };
      exports.resetRetrieveHandlers = function() {
        retrieveFileHandlers.length = 0;
        retrieveMapHandlers.length = 0;
        retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
        retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);
        retrieveSourceMap = handlerExec(retrieveMapHandlers);
        retrieveFile = handlerExec(retrieveFileHandlers);
      };
    }
  });

  // ../node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "../node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React3 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName2 = innerType.displayName || innerType.name || "";
            return functionName2 !== "" ? wrapperName + "(" + functionName2 + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign3 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct3) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct3) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object2) {
            {
              return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray3(node2)) {
                for (var i2 = 0; i2 < node2.length; i2++) {
                  var child = node2[i2];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator2 = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator2.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys4 = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys4.length; i2++) {
                var key = keys4[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray3(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray3(children)) {
                      for (var i2 = 0; i2 < children.length; i2++) {
                        validateChildKeys(children[i2], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx4 = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx4;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // ../node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "../node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // extension/tab.tsx
  var import_react3 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // ../node_modules/source-map-support/register.js
  require_source_map_support().install();

  // extension/History.tsx
  var import_react2 = __toESM(require_react(), 1);

  // extension/Timeline.tsx
  var import_react = __toESM(require_react(), 1);

  // ../node_modules/vis-timeline/standalone/esm/vis-timeline-graph2d.js
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function commonjsRequire(path2) {
    throw new Error('Could not dynamically require "' + path2 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }
  var momentExports$1 = {};
  var moment$4 = {
    get exports() {
      return momentExports$1;
    },
    set exports(v) {
      momentExports$1 = v;
    }
  };
  var hasRequiredMoment;
  function requireMoment() {
    if (hasRequiredMoment)
      return momentExports$1;
    hasRequiredMoment = 1;
    (function(module, exports) {
      (function(global2, factory) {
        module.exports = factory();
      })(commonjsGlobal, function() {
        var hookCallback;
        function hooks() {
          return hookCallback.apply(null, arguments);
        }
        function setHookCallback(callback) {
          hookCallback = callback;
        }
        function isArray3(input) {
          return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
        }
        function isObject2(input) {
          return input != null && Object.prototype.toString.call(input) === "[object Object]";
        }
        function hasOwnProp(a, b) {
          return Object.prototype.hasOwnProperty.call(a, b);
        }
        function isObjectEmpty(obj) {
          if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
          } else {
            var k;
            for (k in obj) {
              if (hasOwnProp(obj, k)) {
                return false;
              }
            }
            return true;
          }
        }
        function isUndefined(input) {
          return input === void 0;
        }
        function isNumber2(input) {
          return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
        }
        function isDate2(input) {
          return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
        }
        function map3(arr, fn) {
          var res = [], i2, arrLen = arr.length;
          for (i2 = 0; i2 < arrLen; ++i2) {
            res.push(fn(arr[i2], i2));
          }
          return res;
        }
        function extend2(a, b) {
          for (var i2 in b) {
            if (hasOwnProp(b, i2)) {
              a[i2] = b[i2];
            }
          }
          if (hasOwnProp(b, "toString")) {
            a.toString = b.toString;
          }
          if (hasOwnProp(b, "valueOf")) {
            a.valueOf = b.valueOf;
          }
          return a;
        }
        function createUTC(input, format2, locale2, strict) {
          return createLocalOrUTC(input, format2, locale2, strict, true).utc();
        }
        function defaultParsingFlags() {
          return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
          };
        }
        function getParsingFlags(m) {
          if (m._pf == null) {
            m._pf = defaultParsingFlags();
          }
          return m._pf;
        }
        var some3;
        if (Array.prototype.some) {
          some3 = Array.prototype.some;
        } else {
          some3 = function(fun) {
            var t = Object(this), len = t.length >>> 0, i2;
            for (i2 = 0; i2 < len; i2++) {
              if (i2 in t && fun.call(this, t[i2], i2, t)) {
                return true;
              }
            }
            return false;
          };
        }
        function isValid(m) {
          if (m._isValid == null) {
            var flags = getParsingFlags(m), parsedParts = some3.call(flags.parsedDateParts, function(i2) {
              return i2 != null;
            }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) {
              isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
            }
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
              m._isValid = isNowValid;
            } else {
              return isNowValid;
            }
          }
          return m._isValid;
        }
        function createInvalid(flags) {
          var m = createUTC(NaN);
          if (flags != null) {
            extend2(getParsingFlags(m), flags);
          } else {
            getParsingFlags(m).userInvalidated = true;
          }
          return m;
        }
        var momentProperties = hooks.momentProperties = [], updateInProgress = false;
        function copyConfig(to2, from4) {
          var i2, prop, val, momentPropertiesLen = momentProperties.length;
          if (!isUndefined(from4._isAMomentObject)) {
            to2._isAMomentObject = from4._isAMomentObject;
          }
          if (!isUndefined(from4._i)) {
            to2._i = from4._i;
          }
          if (!isUndefined(from4._f)) {
            to2._f = from4._f;
          }
          if (!isUndefined(from4._l)) {
            to2._l = from4._l;
          }
          if (!isUndefined(from4._strict)) {
            to2._strict = from4._strict;
          }
          if (!isUndefined(from4._tzm)) {
            to2._tzm = from4._tzm;
          }
          if (!isUndefined(from4._isUTC)) {
            to2._isUTC = from4._isUTC;
          }
          if (!isUndefined(from4._offset)) {
            to2._offset = from4._offset;
          }
          if (!isUndefined(from4._pf)) {
            to2._pf = getParsingFlags(from4);
          }
          if (!isUndefined(from4._locale)) {
            to2._locale = from4._locale;
          }
          if (momentPropertiesLen > 0) {
            for (i2 = 0; i2 < momentPropertiesLen; i2++) {
              prop = momentProperties[i2];
              val = from4[prop];
              if (!isUndefined(val)) {
                to2[prop] = val;
              }
            }
          }
          return to2;
        }
        function Moment(config) {
          copyConfig(this, config);
          this._d = new Date(config._d != null ? config._d.getTime() : NaN);
          if (!this.isValid()) {
            this._d = /* @__PURE__ */ new Date(NaN);
          }
          if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
          }
        }
        function isMoment(obj) {
          return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
        }
        function warn(msg) {
          if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
            console.warn("Deprecation warning: " + msg);
          }
        }
        function deprecate2(msg, fn) {
          var firstTime = true;
          return extend2(function() {
            if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
              var args = [], arg, i2, key, argLen = arguments.length;
              for (i2 = 0; i2 < argLen; i2++) {
                arg = "";
                if (typeof arguments[i2] === "object") {
                  arg += "\n[" + i2 + "] ";
                  for (key in arguments[0]) {
                    if (hasOwnProp(arguments[0], key)) {
                      arg += key + ": " + arguments[0][key] + ", ";
                    }
                  }
                  arg = arg.slice(0, -2);
                } else {
                  arg = arguments[i2];
                }
                args.push(arg);
              }
              warn(
                msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
              );
              firstTime = false;
            }
            return fn.apply(this, arguments);
          }, fn);
        }
        var deprecations = {};
        function deprecateSimple(name, msg) {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
          }
          if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
          }
        }
        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;
        function isFunction(input) {
          return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
        }
        function set2(config) {
          var prop, i2;
          for (i2 in config) {
            if (hasOwnProp(config, i2)) {
              prop = config[i2];
              if (isFunction(prop)) {
                this[i2] = prop;
              } else {
                this["_" + i2] = prop;
              }
            }
          }
          this._config = config;
          this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
          );
        }
        function mergeConfigs(parentConfig, childConfig) {
          var res = extend2({}, parentConfig), prop;
          for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
              if (isObject2(parentConfig[prop]) && isObject2(childConfig[prop])) {
                res[prop] = {};
                extend2(res[prop], parentConfig[prop]);
                extend2(res[prop], childConfig[prop]);
              } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
              } else {
                delete res[prop];
              }
            }
          }
          for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject2(parentConfig[prop])) {
              res[prop] = extend2({}, res[prop]);
            }
          }
          return res;
        }
        function Locale(config) {
          if (config != null) {
            this.set(config);
          }
        }
        var keys4;
        if (Object.keys) {
          keys4 = Object.keys;
        } else {
          keys4 = function(obj) {
            var i2, res = [];
            for (i2 in obj) {
              if (hasOwnProp(obj, i2)) {
                res.push(i2);
              }
            }
            return res;
          };
        }
        var defaultCalendar = {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        };
        function calendar(key, mom, now4) {
          var output = this._calendar[key] || this._calendar["sameElse"];
          return isFunction(output) ? output.call(mom, now4) : output;
        }
        function zeroFill(number2, targetLength, forceSign) {
          var absNumber = "" + Math.abs(number2), zerosToFill = targetLength - absNumber.length, sign2 = number2 >= 0;
          return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
        }
        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
        function addFormatToken(token2, padded, ordinal2, callback) {
          var func = callback;
          if (typeof callback === "string") {
            func = function() {
              return this[callback]();
            };
          }
          if (token2) {
            formatTokenFunctions[token2] = func;
          }
          if (padded) {
            formatTokenFunctions[padded[0]] = function() {
              return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
          }
          if (ordinal2) {
            formatTokenFunctions[ordinal2] = function() {
              return this.localeData().ordinal(
                func.apply(this, arguments),
                token2
              );
            };
          }
        }
        function removeFormattingTokens(input) {
          if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, "");
          }
          return input.replace(/\\/g, "");
        }
        function makeFormatFunction(format2) {
          var array2 = format2.match(formattingTokens), i2, length;
          for (i2 = 0, length = array2.length; i2 < length; i2++) {
            if (formatTokenFunctions[array2[i2]]) {
              array2[i2] = formatTokenFunctions[array2[i2]];
            } else {
              array2[i2] = removeFormattingTokens(array2[i2]);
            }
          }
          return function(mom) {
            var output = "", i3;
            for (i3 = 0; i3 < length; i3++) {
              output += isFunction(array2[i3]) ? array2[i3].call(mom, format2) : array2[i3];
            }
            return output;
          };
        }
        function formatMoment(m, format2) {
          if (!m.isValid()) {
            return m.localeData().invalidDate();
          }
          format2 = expandFormat(format2, m.localeData());
          formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
          return formatFunctions[format2](m);
        }
        function expandFormat(format2, locale2) {
          var i2 = 5;
          function replaceLongDateFormatTokens(input) {
            return locale2.longDateFormat(input) || input;
          }
          localFormattingTokens.lastIndex = 0;
          while (i2 >= 0 && localFormattingTokens.test(format2)) {
            format2 = format2.replace(
              localFormattingTokens,
              replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i2 -= 1;
          }
          return format2;
        }
        var defaultLongDateFormat = {
          LTS: "h:mm:ss A",
          LT: "h:mm A",
          L: "MM/DD/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY h:mm A",
          LLLL: "dddd, MMMM D, YYYY h:mm A"
        };
        function longDateFormat(key) {
          var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
          if (format2 || !formatUpper) {
            return format2;
          }
          this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
            if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
              return tok.slice(1);
            }
            return tok;
          }).join("");
          return this._longDateFormat[key];
        }
        var defaultInvalidDate = "Invalid date";
        function invalidDate() {
          return this._invalidDate;
        }
        var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
        function ordinal(number2) {
          return this._ordinal.replace("%d", number2);
        }
        var defaultRelativeTime = {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          ss: "%d seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          w: "a week",
          ww: "%d weeks",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        };
        function relativeTime(number2, withoutSuffix, string2, isFuture) {
          var output = this._relativeTime[string2];
          return isFunction(output) ? output(number2, withoutSuffix, string2, isFuture) : output.replace(/%d/i, number2);
        }
        function pastFuture(diff2, output) {
          var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
          return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
        }
        var aliases = {};
        function addUnitAlias(unit, shorthand) {
          var lowerCase = unit.toLowerCase();
          aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
        }
        function normalizeUnits(units) {
          return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
        }
        function normalizeObjectUnits(inputObject) {
          var normalizedInput = {}, normalizedProp, prop;
          for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
              normalizedProp = normalizeUnits(prop);
              if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
              }
            }
          }
          return normalizedInput;
        }
        var priorities = {};
        function addUnitPriority(unit, priority) {
          priorities[unit] = priority;
        }
        function getPrioritizedUnits(unitsObj) {
          var units = [], u;
          for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
              units.push({ unit: u, priority: priorities[u] });
            }
          }
          units.sort(function(a, b) {
            return a.priority - b.priority;
          });
          return units;
        }
        function isLeapYear(year) {
          return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }
        function absFloor(number2) {
          if (number2 < 0) {
            return Math.ceil(number2) || 0;
          } else {
            return Math.floor(number2);
          }
        }
        function toInt(argumentForCoercion) {
          var coercedNumber = +argumentForCoercion, value = 0;
          if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
          }
          return value;
        }
        function makeGetSet(unit, keepTime) {
          return function(value) {
            if (value != null) {
              set$12(this, unit, value);
              hooks.updateOffset(this, keepTime);
              return this;
            } else {
              return get3(this, unit);
            }
          };
        }
        function get3(mom, unit) {
          return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
        }
        function set$12(mom, unit, value) {
          if (mom.isValid() && !isNaN(value)) {
            if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
              value = toInt(value);
              mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
                value,
                mom.month(),
                daysInMonth(value, mom.month())
              );
            } else {
              mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
            }
          }
        }
        function stringGet(units) {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units]();
          }
          return this;
        }
        function stringSet(units, value) {
          if (typeof units === "object") {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units), i2, prioritizedLen = prioritized.length;
            for (i2 = 0; i2 < prioritizedLen; i2++) {
              this[prioritized[i2].unit](units[prioritized[i2].unit]);
            }
          } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
              return this[units](value);
            }
          }
          return this;
        }
        var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
        regexes = {};
        function addRegexToken(token2, regex, strictRegex) {
          regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
            return isStrict && strictRegex ? strictRegex : regex;
          };
        }
        function getParseRegexForToken(token2, config) {
          if (!hasOwnProp(regexes, token2)) {
            return new RegExp(unescapeFormat(token2));
          }
          return regexes[token2](config._strict, config._locale);
        }
        function unescapeFormat(s) {
          return regexEscape(
            s.replace("\\", "").replace(
              /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
              function(matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
              }
            )
          );
        }
        function regexEscape(s) {
          return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        }
        var tokens = {};
        function addParseToken(token2, callback) {
          var i2, func = callback, tokenLen;
          if (typeof token2 === "string") {
            token2 = [token2];
          }
          if (isNumber2(callback)) {
            func = function(input, array2) {
              array2[callback] = toInt(input);
            };
          }
          tokenLen = token2.length;
          for (i2 = 0; i2 < tokenLen; i2++) {
            tokens[token2[i2]] = func;
          }
        }
        function addWeekParseToken(token2, callback) {
          addParseToken(token2, function(input, array2, config, token3) {
            config._w = config._w || {};
            callback(input, config._w, config, token3);
          });
        }
        function addTimeToArrayFromToken(token2, input, config) {
          if (input != null && hasOwnProp(tokens, token2)) {
            tokens[token2](input, config._a, config, token2);
          }
        }
        var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
        function mod(n, x) {
          return (n % x + x) % x;
        }
        var indexOf3;
        if (Array.prototype.indexOf) {
          indexOf3 = Array.prototype.indexOf;
        } else {
          indexOf3 = function(o) {
            var i2;
            for (i2 = 0; i2 < this.length; ++i2) {
              if (this[i2] === o) {
                return i2;
              }
            }
            return -1;
          };
        }
        function daysInMonth(year, month) {
          if (isNaN(year) || isNaN(month)) {
            return NaN;
          }
          var modMonth = mod(month, 12);
          year += (month - modMonth) / 12;
          return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
        }
        addFormatToken("M", ["MM", 2], "Mo", function() {
          return this.month() + 1;
        });
        addFormatToken("MMM", 0, 0, function(format2) {
          return this.localeData().monthsShort(this, format2);
        });
        addFormatToken("MMMM", 0, 0, function(format2) {
          return this.localeData().months(this, format2);
        });
        addUnitAlias("month", "M");
        addUnitPriority("month", 8);
        addRegexToken("M", match1to2);
        addRegexToken("MM", match1to2, match2);
        addRegexToken("MMM", function(isStrict, locale2) {
          return locale2.monthsShortRegex(isStrict);
        });
        addRegexToken("MMMM", function(isStrict, locale2) {
          return locale2.monthsRegex(isStrict);
        });
        addParseToken(["M", "MM"], function(input, array2) {
          array2[MONTH] = toInt(input) - 1;
        });
        addParseToken(["MMM", "MMMM"], function(input, array2, config, token2) {
          var month = config._locale.monthsParse(input, token2, config._strict);
          if (month != null) {
            array2[MONTH] = month;
          } else {
            getParsingFlags(config).invalidMonth = input;
          }
        });
        var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
          "_"
        ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
        function localeMonths(m, format2) {
          if (!m) {
            return isArray3(this._months) ? this._months : this._months["standalone"];
          }
          return isArray3(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
        }
        function localeMonthsShort(m, format2) {
          if (!m) {
            return isArray3(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
          }
          return isArray3(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
        }
        function handleStrictParse(monthName, format2, strict) {
          var i2, ii, mom, llc = monthName.toLocaleLowerCase();
          if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i2 = 0; i2 < 12; ++i2) {
              mom = createUTC([2e3, i2]);
              this._shortMonthsParse[i2] = this.monthsShort(
                mom,
                ""
              ).toLocaleLowerCase();
              this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
            }
          }
          if (strict) {
            if (format2 === "MMM") {
              ii = indexOf3.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf3.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
            }
          } else {
            if (format2 === "MMM") {
              ii = indexOf3.call(this._shortMonthsParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf3.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf3.call(this._longMonthsParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf3.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
            }
          }
        }
        function localeMonthsParse(monthName, format2, strict) {
          var i2, mom, regex;
          if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format2, strict);
          }
          if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
          }
          for (i2 = 0; i2 < 12; i2++) {
            mom = createUTC([2e3, i2]);
            if (strict && !this._longMonthsParse[i2]) {
              this._longMonthsParse[i2] = new RegExp(
                "^" + this.months(mom, "").replace(".", "") + "$",
                "i"
              );
              this._shortMonthsParse[i2] = new RegExp(
                "^" + this.monthsShort(mom, "").replace(".", "") + "$",
                "i"
              );
            }
            if (!strict && !this._monthsParse[i2]) {
              regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
              this._monthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
              return i2;
            } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
              return i2;
            } else if (!strict && this._monthsParse[i2].test(monthName)) {
              return i2;
            }
          }
        }
        function setMonth(mom, value) {
          var dayOfMonth;
          if (!mom.isValid()) {
            return mom;
          }
          if (typeof value === "string") {
            if (/^\d+$/.test(value)) {
              value = toInt(value);
            } else {
              value = mom.localeData().monthsParse(value);
              if (!isNumber2(value)) {
                return mom;
              }
            }
          }
          dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
          mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
          return mom;
        }
        function getSetMonth(value) {
          if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
          } else {
            return get3(this, "Month");
          }
        }
        function getDaysInMonth() {
          return daysInMonth(this.year(), this.month());
        }
        function monthsShortRegex(isStrict) {
          if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
              computeMonthsParse.call(this);
            }
            if (isStrict) {
              return this._monthsShortStrictRegex;
            } else {
              return this._monthsShortRegex;
            }
          } else {
            if (!hasOwnProp(this, "_monthsShortRegex")) {
              this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
          }
        }
        function monthsRegex(isStrict) {
          if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
              computeMonthsParse.call(this);
            }
            if (isStrict) {
              return this._monthsStrictRegex;
            } else {
              return this._monthsRegex;
            }
          } else {
            if (!hasOwnProp(this, "_monthsRegex")) {
              this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
          }
        }
        function computeMonthsParse() {
          function cmpLenRev(a, b) {
            return b.length - a.length;
          }
          var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom;
          for (i2 = 0; i2 < 12; i2++) {
            mom = createUTC([2e3, i2]);
            shortPieces.push(this.monthsShort(mom, ""));
            longPieces.push(this.months(mom, ""));
            mixedPieces.push(this.months(mom, ""));
            mixedPieces.push(this.monthsShort(mom, ""));
          }
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          for (i2 = 0; i2 < 12; i2++) {
            shortPieces[i2] = regexEscape(shortPieces[i2]);
            longPieces[i2] = regexEscape(longPieces[i2]);
          }
          for (i2 = 0; i2 < 24; i2++) {
            mixedPieces[i2] = regexEscape(mixedPieces[i2]);
          }
          this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._monthsShortRegex = this._monthsRegex;
          this._monthsStrictRegex = new RegExp(
            "^(" + longPieces.join("|") + ")",
            "i"
          );
          this._monthsShortStrictRegex = new RegExp(
            "^(" + shortPieces.join("|") + ")",
            "i"
          );
        }
        addFormatToken("Y", 0, 0, function() {
          var y = this.year();
          return y <= 9999 ? zeroFill(y, 4) : "+" + y;
        });
        addFormatToken(0, ["YY", 2], 0, function() {
          return this.year() % 100;
        });
        addFormatToken(0, ["YYYY", 4], 0, "year");
        addFormatToken(0, ["YYYYY", 5], 0, "year");
        addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
        addUnitAlias("year", "y");
        addUnitPriority("year", 1);
        addRegexToken("Y", matchSigned);
        addRegexToken("YY", match1to2, match2);
        addRegexToken("YYYY", match1to4, match4);
        addRegexToken("YYYYY", match1to6, match6);
        addRegexToken("YYYYYY", match1to6, match6);
        addParseToken(["YYYYY", "YYYYYY"], YEAR);
        addParseToken("YYYY", function(input, array2) {
          array2[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken("YY", function(input, array2) {
          array2[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken("Y", function(input, array2) {
          array2[YEAR] = parseInt(input, 10);
        });
        function daysInYear(year) {
          return isLeapYear(year) ? 366 : 365;
        }
        hooks.parseTwoDigitYear = function(input) {
          return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
        };
        var getSetYear = makeGetSet("FullYear", true);
        function getIsLeapYear() {
          return isLeapYear(this.year());
        }
        function createDate(y, m, d, h, M, s, ms) {
          var date2;
          if (y < 100 && y >= 0) {
            date2 = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date2.getFullYear())) {
              date2.setFullYear(y);
            }
          } else {
            date2 = new Date(y, m, d, h, M, s, ms);
          }
          return date2;
        }
        function createUTCDate(y) {
          var date2, args;
          if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            args[0] = y + 400;
            date2 = new Date(Date.UTC.apply(null, args));
            if (isFinite(date2.getUTCFullYear())) {
              date2.setUTCFullYear(y);
            }
          } else {
            date2 = new Date(Date.UTC.apply(null, arguments));
          }
          return date2;
        }
        function firstWeekOffset(year, dow, doy) {
          var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
          return -fwdlw + fwd - 1;
        }
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
          var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
          if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
          } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
          } else {
            resYear = year;
            resDayOfYear = dayOfYear;
          }
          return {
            year: resYear,
            dayOfYear: resDayOfYear
          };
        }
        function weekOfYear(mom, dow, doy) {
          var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
          if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
          } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
          } else {
            resYear = mom.year();
            resWeek = week;
          }
          return {
            week: resWeek,
            year: resYear
          };
        }
        function weeksInYear(year, dow, doy) {
          var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
          return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }
        addFormatToken("w", ["ww", 2], "wo", "week");
        addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
        addUnitAlias("week", "w");
        addUnitAlias("isoWeek", "W");
        addUnitPriority("week", 5);
        addUnitPriority("isoWeek", 5);
        addRegexToken("w", match1to2);
        addRegexToken("ww", match1to2, match2);
        addRegexToken("W", match1to2);
        addRegexToken("WW", match1to2, match2);
        addWeekParseToken(
          ["w", "ww", "W", "WW"],
          function(input, week, config, token2) {
            week[token2.substr(0, 1)] = toInt(input);
          }
        );
        function localeWeek(mom) {
          return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }
        var defaultLocaleWeek = {
          dow: 0,
          // Sunday is the first day of the week.
          doy: 6
          // The week that contains Jan 6th is the first week of the year.
        };
        function localeFirstDayOfWeek() {
          return this._week.dow;
        }
        function localeFirstDayOfYear() {
          return this._week.doy;
        }
        function getSetWeek(input) {
          var week = this.localeData().week(this);
          return input == null ? week : this.add((input - week) * 7, "d");
        }
        function getSetISOWeek(input) {
          var week = weekOfYear(this, 1, 4).week;
          return input == null ? week : this.add((input - week) * 7, "d");
        }
        addFormatToken("d", 0, "do", "day");
        addFormatToken("dd", 0, 0, function(format2) {
          return this.localeData().weekdaysMin(this, format2);
        });
        addFormatToken("ddd", 0, 0, function(format2) {
          return this.localeData().weekdaysShort(this, format2);
        });
        addFormatToken("dddd", 0, 0, function(format2) {
          return this.localeData().weekdays(this, format2);
        });
        addFormatToken("e", 0, 0, "weekday");
        addFormatToken("E", 0, 0, "isoWeekday");
        addUnitAlias("day", "d");
        addUnitAlias("weekday", "e");
        addUnitAlias("isoWeekday", "E");
        addUnitPriority("day", 11);
        addUnitPriority("weekday", 11);
        addUnitPriority("isoWeekday", 11);
        addRegexToken("d", match1to2);
        addRegexToken("e", match1to2);
        addRegexToken("E", match1to2);
        addRegexToken("dd", function(isStrict, locale2) {
          return locale2.weekdaysMinRegex(isStrict);
        });
        addRegexToken("ddd", function(isStrict, locale2) {
          return locale2.weekdaysShortRegex(isStrict);
        });
        addRegexToken("dddd", function(isStrict, locale2) {
          return locale2.weekdaysRegex(isStrict);
        });
        addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
          var weekday = config._locale.weekdaysParse(input, token2, config._strict);
          if (weekday != null) {
            week.d = weekday;
          } else {
            getParsingFlags(config).invalidWeekday = input;
          }
        });
        addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
          week[token2] = toInt(input);
        });
        function parseWeekday(input, locale2) {
          if (typeof input !== "string") {
            return input;
          }
          if (!isNaN(input)) {
            return parseInt(input, 10);
          }
          input = locale2.weekdaysParse(input);
          if (typeof input === "number") {
            return input;
          }
          return null;
        }
        function parseIsoWeekday(input, locale2) {
          if (typeof input === "string") {
            return locale2.weekdaysParse(input) % 7 || 7;
          }
          return isNaN(input) ? null : input;
        }
        function shiftWeekdays(ws, n) {
          return ws.slice(n, 7).concat(ws.slice(0, n));
        }
        var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
        function localeWeekdays(m, format2) {
          var weekdays = isArray3(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
          return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
        }
        function localeWeekdaysShort(m) {
          return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
        }
        function localeWeekdaysMin(m) {
          return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
        }
        function handleStrictParse$1(weekdayName, format2, strict) {
          var i2, ii, mom, llc = weekdayName.toLocaleLowerCase();
          if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for (i2 = 0; i2 < 7; ++i2) {
              mom = createUTC([2e3, 1]).day(i2);
              this._minWeekdaysParse[i2] = this.weekdaysMin(
                mom,
                ""
              ).toLocaleLowerCase();
              this._shortWeekdaysParse[i2] = this.weekdaysShort(
                mom,
                ""
              ).toLocaleLowerCase();
              this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
            }
          }
          if (strict) {
            if (format2 === "dddd") {
              ii = indexOf3.call(this._weekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else if (format2 === "ddd") {
              ii = indexOf3.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf3.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            }
          } else {
            if (format2 === "dddd") {
              ii = indexOf3.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf3.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf3.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else if (format2 === "ddd") {
              ii = indexOf3.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf3.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf3.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            } else {
              ii = indexOf3.call(this._minWeekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf3.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                return ii;
              }
              ii = indexOf3.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
            }
          }
        }
        function localeWeekdaysParse(weekdayName, format2, strict) {
          var i2, mom, regex;
          if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format2, strict);
          }
          if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
          }
          for (i2 = 0; i2 < 7; i2++) {
            mom = createUTC([2e3, 1]).day(i2);
            if (strict && !this._fullWeekdaysParse[i2]) {
              this._fullWeekdaysParse[i2] = new RegExp(
                "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
                "i"
              );
              this._shortWeekdaysParse[i2] = new RegExp(
                "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
                "i"
              );
              this._minWeekdaysParse[i2] = new RegExp(
                "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
                "i"
              );
            }
            if (!this._weekdaysParse[i2]) {
              regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
              this._weekdaysParse[i2] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
              return i2;
            } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
              return i2;
            } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
              return i2;
            } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
              return i2;
            }
          }
        }
        function getSetDayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, "d");
          } else {
            return day;
          }
        }
        function getSetLocaleDayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
          return input == null ? weekday : this.add(input - weekday, "d");
        }
        function getSetISODayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
          } else {
            return this.day() || 7;
          }
        }
        function weekdaysRegex(isStrict) {
          if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              computeWeekdaysParse.call(this);
            }
            if (isStrict) {
              return this._weekdaysStrictRegex;
            } else {
              return this._weekdaysRegex;
            }
          } else {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
          }
        }
        function weekdaysShortRegex(isStrict) {
          if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              computeWeekdaysParse.call(this);
            }
            if (isStrict) {
              return this._weekdaysShortStrictRegex;
            } else {
              return this._weekdaysShortRegex;
            }
          } else {
            if (!hasOwnProp(this, "_weekdaysShortRegex")) {
              this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
          }
        }
        function weekdaysMinRegex(isStrict) {
          if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) {
              computeWeekdaysParse.call(this);
            }
            if (isStrict) {
              return this._weekdaysMinStrictRegex;
            } else {
              return this._weekdaysMinRegex;
            }
          } else {
            if (!hasOwnProp(this, "_weekdaysMinRegex")) {
              this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
          }
        }
        function computeWeekdaysParse() {
          function cmpLenRev(a, b) {
            return b.length - a.length;
          }
          var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
          for (i2 = 0; i2 < 7; i2++) {
            mom = createUTC([2e3, 1]).day(i2);
            minp = regexEscape(this.weekdaysMin(mom, ""));
            shortp = regexEscape(this.weekdaysShort(mom, ""));
            longp = regexEscape(this.weekdays(mom, ""));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
          }
          minPieces.sort(cmpLenRev);
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._weekdaysShortRegex = this._weekdaysRegex;
          this._weekdaysMinRegex = this._weekdaysRegex;
          this._weekdaysStrictRegex = new RegExp(
            "^(" + longPieces.join("|") + ")",
            "i"
          );
          this._weekdaysShortStrictRegex = new RegExp(
            "^(" + shortPieces.join("|") + ")",
            "i"
          );
          this._weekdaysMinStrictRegex = new RegExp(
            "^(" + minPieces.join("|") + ")",
            "i"
          );
        }
        function hFormat() {
          return this.hours() % 12 || 12;
        }
        function kFormat() {
          return this.hours() || 24;
        }
        addFormatToken("H", ["HH", 2], 0, "hour");
        addFormatToken("h", ["hh", 2], 0, hFormat);
        addFormatToken("k", ["kk", 2], 0, kFormat);
        addFormatToken("hmm", 0, 0, function() {
          return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });
        addFormatToken("hmmss", 0, 0, function() {
          return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        addFormatToken("Hmm", 0, 0, function() {
          return "" + this.hours() + zeroFill(this.minutes(), 2);
        });
        addFormatToken("Hmmss", 0, 0, function() {
          return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        function meridiem(token2, lowercase) {
          addFormatToken(token2, 0, 0, function() {
            return this.localeData().meridiem(
              this.hours(),
              this.minutes(),
              lowercase
            );
          });
        }
        meridiem("a", true);
        meridiem("A", false);
        addUnitAlias("hour", "h");
        addUnitPriority("hour", 13);
        function matchMeridiem(isStrict, locale2) {
          return locale2._meridiemParse;
        }
        addRegexToken("a", matchMeridiem);
        addRegexToken("A", matchMeridiem);
        addRegexToken("H", match1to2);
        addRegexToken("h", match1to2);
        addRegexToken("k", match1to2);
        addRegexToken("HH", match1to2, match2);
        addRegexToken("hh", match1to2, match2);
        addRegexToken("kk", match1to2, match2);
        addRegexToken("hmm", match3to4);
        addRegexToken("hmmss", match5to6);
        addRegexToken("Hmm", match3to4);
        addRegexToken("Hmmss", match5to6);
        addParseToken(["H", "HH"], HOUR);
        addParseToken(["k", "kk"], function(input, array2, config) {
          var kInput = toInt(input);
          array2[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(["a", "A"], function(input, array2, config) {
          config._isPm = config._locale.isPM(input);
          config._meridiem = input;
        });
        addParseToken(["h", "hh"], function(input, array2, config) {
          array2[HOUR] = toInt(input);
          getParsingFlags(config).bigHour = true;
        });
        addParseToken("hmm", function(input, array2, config) {
          var pos = input.length - 2;
          array2[HOUR] = toInt(input.substr(0, pos));
          array2[MINUTE] = toInt(input.substr(pos));
          getParsingFlags(config).bigHour = true;
        });
        addParseToken("hmmss", function(input, array2, config) {
          var pos1 = input.length - 4, pos2 = input.length - 2;
          array2[HOUR] = toInt(input.substr(0, pos1));
          array2[MINUTE] = toInt(input.substr(pos1, 2));
          array2[SECOND] = toInt(input.substr(pos2));
          getParsingFlags(config).bigHour = true;
        });
        addParseToken("Hmm", function(input, array2, config) {
          var pos = input.length - 2;
          array2[HOUR] = toInt(input.substr(0, pos));
          array2[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken("Hmmss", function(input, array2, config) {
          var pos1 = input.length - 4, pos2 = input.length - 2;
          array2[HOUR] = toInt(input.substr(0, pos1));
          array2[MINUTE] = toInt(input.substr(pos1, 2));
          array2[SECOND] = toInt(input.substr(pos2));
        });
        function localeIsPM(input) {
          return (input + "").toLowerCase().charAt(0) === "p";
        }
        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
        function localeMeridiem(hours2, minutes2, isLower) {
          if (hours2 > 11) {
            return isLower ? "pm" : "PM";
          } else {
            return isLower ? "am" : "AM";
          }
        }
        var baseConfig = {
          calendar: defaultCalendar,
          longDateFormat: defaultLongDateFormat,
          invalidDate: defaultInvalidDate,
          ordinal: defaultOrdinal,
          dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
          relativeTime: defaultRelativeTime,
          months: defaultLocaleMonths,
          monthsShort: defaultLocaleMonthsShort,
          week: defaultLocaleWeek,
          weekdays: defaultLocaleWeekdays,
          weekdaysMin: defaultLocaleWeekdaysMin,
          weekdaysShort: defaultLocaleWeekdaysShort,
          meridiemParse: defaultLocaleMeridiemParse
        };
        var locales2 = {}, localeFamilies = {}, globalLocale;
        function commonPrefix(arr1, arr2) {
          var i2, minl = Math.min(arr1.length, arr2.length);
          for (i2 = 0; i2 < minl; i2 += 1) {
            if (arr1[i2] !== arr2[i2]) {
              return i2;
            }
          }
          return minl;
        }
        function normalizeLocale(key) {
          return key ? key.toLowerCase().replace("_", "-") : key;
        }
        function chooseLocale(names) {
          var i2 = 0, j, next2, locale2, split3;
          while (i2 < names.length) {
            split3 = normalizeLocale(names[i2]).split("-");
            j = split3.length;
            next2 = normalizeLocale(names[i2 + 1]);
            next2 = next2 ? next2.split("-") : null;
            while (j > 0) {
              locale2 = loadLocale(split3.slice(0, j).join("-"));
              if (locale2) {
                return locale2;
              }
              if (next2 && next2.length >= j && commonPrefix(split3, next2) >= j - 1) {
                break;
              }
              j--;
            }
            i2++;
          }
          return globalLocale;
        }
        function isLocaleNameSane(name) {
          return name.match("^[^/\\\\]*$") != null;
        }
        function loadLocale(name) {
          var oldLocale = null, aliasedRequire;
          if (locales2[name] === void 0 && true && module && module.exports && isLocaleNameSane(name)) {
            try {
              oldLocale = globalLocale._abbr;
              aliasedRequire = commonjsRequire;
              aliasedRequire("./locale/" + name);
              getSetGlobalLocale(oldLocale);
            } catch (e) {
              locales2[name] = null;
            }
          }
          return locales2[name];
        }
        function getSetGlobalLocale(key, values3) {
          var data2;
          if (key) {
            if (isUndefined(values3)) {
              data2 = getLocale(key);
            } else {
              data2 = defineLocale(key, values3);
            }
            if (data2) {
              globalLocale = data2;
            } else {
              if (typeof console !== "undefined" && console.warn) {
                console.warn(
                  "Locale " + key + " not found. Did you forget to load it?"
                );
              }
            }
          }
          return globalLocale._abbr;
        }
        function defineLocale(name, config) {
          if (config !== null) {
            var locale2, parentConfig = baseConfig;
            config.abbr = name;
            if (locales2[name] != null) {
              deprecateSimple(
                "defineLocaleOverride",
                "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
              );
              parentConfig = locales2[name]._config;
            } else if (config.parentLocale != null) {
              if (locales2[config.parentLocale] != null) {
                parentConfig = locales2[config.parentLocale]._config;
              } else {
                locale2 = loadLocale(config.parentLocale);
                if (locale2 != null) {
                  parentConfig = locale2._config;
                } else {
                  if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                  }
                  localeFamilies[config.parentLocale].push({
                    name,
                    config
                  });
                  return null;
                }
              }
            }
            locales2[name] = new Locale(mergeConfigs(parentConfig, config));
            if (localeFamilies[name]) {
              localeFamilies[name].forEach(function(x) {
                defineLocale(x.name, x.config);
              });
            }
            getSetGlobalLocale(name);
            return locales2[name];
          } else {
            delete locales2[name];
            return null;
          }
        }
        function updateLocale(name, config) {
          if (config != null) {
            var locale2, tmpLocale, parentConfig = baseConfig;
            if (locales2[name] != null && locales2[name].parentLocale != null) {
              locales2[name].set(mergeConfigs(locales2[name]._config, config));
            } else {
              tmpLocale = loadLocale(name);
              if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
              }
              config = mergeConfigs(parentConfig, config);
              if (tmpLocale == null) {
                config.abbr = name;
              }
              locale2 = new Locale(config);
              locale2.parentLocale = locales2[name];
              locales2[name] = locale2;
            }
            getSetGlobalLocale(name);
          } else {
            if (locales2[name] != null) {
              if (locales2[name].parentLocale != null) {
                locales2[name] = locales2[name].parentLocale;
                if (name === getSetGlobalLocale()) {
                  getSetGlobalLocale(name);
                }
              } else if (locales2[name] != null) {
                delete locales2[name];
              }
            }
          }
          return locales2[name];
        }
        function getLocale(key) {
          var locale2;
          if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
          }
          if (!key) {
            return globalLocale;
          }
          if (!isArray3(key)) {
            locale2 = loadLocale(key);
            if (locale2) {
              return locale2;
            }
            key = [key];
          }
          return chooseLocale(key);
        }
        function listLocales() {
          return keys4(locales2);
        }
        function checkOverflow(m) {
          var overflow, a = m._a;
          if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
              overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
              overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
              overflow = WEEKDAY;
            }
            getParsingFlags(m).overflow = overflow;
          }
          return m;
        }
        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
          ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
          ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
          ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
          ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
          ["YYYY-DDD", /\d{4}-\d{3}/],
          ["YYYY-MM", /\d{4}-\d\d/, false],
          ["YYYYYYMMDD", /[+-]\d{10}/],
          ["YYYYMMDD", /\d{8}/],
          ["GGGG[W]WWE", /\d{4}W\d{3}/],
          ["GGGG[W]WW", /\d{4}W\d{2}/, false],
          ["YYYYDDD", /\d{7}/],
          ["YYYYMM", /\d{6}/, false],
          ["YYYY", /\d{4}/, false]
        ], isoTimes = [
          ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
          ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
          ["HH:mm:ss", /\d\d:\d\d:\d\d/],
          ["HH:mm", /\d\d:\d\d/],
          ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
          ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
          ["HHmmss", /\d\d\d\d\d\d/],
          ["HHmm", /\d\d\d\d/],
          ["HH", /\d\d/]
        ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
          UT: 0,
          GMT: 0,
          EDT: -4 * 60,
          EST: -5 * 60,
          CDT: -5 * 60,
          CST: -6 * 60,
          MDT: -6 * 60,
          MST: -7 * 60,
          PDT: -7 * 60,
          PST: -8 * 60
        };
        function configFromISO(config) {
          var i2, l, string2 = config._i, match5 = extendedIsoRegex.exec(string2) || basicIsoRegex.exec(string2), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
          if (match5) {
            getParsingFlags(config).iso = true;
            for (i2 = 0, l = isoDatesLen; i2 < l; i2++) {
              if (isoDates[i2][1].exec(match5[1])) {
                dateFormat = isoDates[i2][0];
                allowTime = isoDates[i2][2] !== false;
                break;
              }
            }
            if (dateFormat == null) {
              config._isValid = false;
              return;
            }
            if (match5[3]) {
              for (i2 = 0, l = isoTimesLen; i2 < l; i2++) {
                if (isoTimes[i2][1].exec(match5[3])) {
                  timeFormat = (match5[2] || " ") + isoTimes[i2][0];
                  break;
                }
              }
              if (timeFormat == null) {
                config._isValid = false;
                return;
              }
            }
            if (!allowTime && timeFormat != null) {
              config._isValid = false;
              return;
            }
            if (match5[4]) {
              if (tzRegex.exec(match5[4])) {
                tzFormat = "Z";
              } else {
                config._isValid = false;
                return;
              }
            }
            config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
            configFromStringAndFormat(config);
          } else {
            config._isValid = false;
          }
        }
        function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
          var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
          ];
          if (secondStr) {
            result.push(parseInt(secondStr, 10));
          }
          return result;
        }
        function untruncateYear(yearStr) {
          var year = parseInt(yearStr, 10);
          if (year <= 49) {
            return 2e3 + year;
          } else if (year <= 999) {
            return 1900 + year;
          }
          return year;
        }
        function preprocessRFC2822(s) {
          return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
        }
        function checkWeekday(weekdayStr, parsedInput, config) {
          if (weekdayStr) {
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
              parsedInput[0],
              parsedInput[1],
              parsedInput[2]
            ).getDay();
            if (weekdayProvided !== weekdayActual) {
              getParsingFlags(config).weekdayMismatch = true;
              config._isValid = false;
              return false;
            }
          }
          return true;
        }
        function calculateOffset(obsOffset, militaryOffset, numOffset) {
          if (obsOffset) {
            return obsOffsets[obsOffset];
          } else if (militaryOffset) {
            return 0;
          } else {
            var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
          }
        }
        function configFromRFC2822(config) {
          var match5 = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
          if (match5) {
            parsedArray = extractFromRFC2822Strings(
              match5[4],
              match5[3],
              match5[2],
              match5[5],
              match5[6],
              match5[7]
            );
            if (!checkWeekday(match5[1], parsedArray, config)) {
              return;
            }
            config._a = parsedArray;
            config._tzm = calculateOffset(match5[8], match5[9], match5[10]);
            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            getParsingFlags(config).rfc2822 = true;
          } else {
            config._isValid = false;
          }
        }
        function configFromString(config) {
          var matched = aspNetJsonRegex.exec(config._i);
          if (matched !== null) {
            config._d = /* @__PURE__ */ new Date(+matched[1]);
            return;
          }
          configFromISO(config);
          if (config._isValid === false) {
            delete config._isValid;
          } else {
            return;
          }
          configFromRFC2822(config);
          if (config._isValid === false) {
            delete config._isValid;
          } else {
            return;
          }
          if (config._strict) {
            config._isValid = false;
          } else {
            hooks.createFromInputFallback(config);
          }
        }
        hooks.createFromInputFallback = deprecate2(
          "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
          function(config) {
            config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
          }
        );
        function defaults2(a, b, c) {
          if (a != null) {
            return a;
          }
          if (b != null) {
            return b;
          }
          return c;
        }
        function currentDateArray(config) {
          var nowValue = new Date(hooks.now());
          if (config._useUTC) {
            return [
              nowValue.getUTCFullYear(),
              nowValue.getUTCMonth(),
              nowValue.getUTCDate()
            ];
          }
          return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }
        function configFromArray(config) {
          var i2, date2, input = [], currentDate, expectedWeekday, yearToUse;
          if (config._d) {
            return;
          }
          currentDate = currentDateArray(config);
          if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
          }
          if (config._dayOfYear != null) {
            yearToUse = defaults2(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
              getParsingFlags(config)._overflowDayOfYear = true;
            }
            date2 = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date2.getUTCMonth();
            config._a[DATE] = date2.getUTCDate();
          }
          for (i2 = 0; i2 < 3 && config._a[i2] == null; ++i2) {
            config._a[i2] = input[i2] = currentDate[i2];
          }
          for (; i2 < 7; i2++) {
            config._a[i2] = input[i2] = config._a[i2] == null ? i2 === 2 ? 1 : 0 : config._a[i2];
          }
          if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
          }
          config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
          );
          expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
          if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          }
          if (config._nextDay) {
            config._a[HOUR] = 24;
          }
          if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
          }
        }
        function dayOfYearFromWeekInfo(config) {
          var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
          w = config._w;
          if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults2(
              w.GG,
              config._a[YEAR],
              weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults2(w.W, 1);
            weekday = defaults2(w.E, 1);
            if (weekday < 1 || weekday > 7) {
              weekdayOverflow = true;
            }
          } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults2(w.gg, config._a[YEAR], curWeek.year);
            week = defaults2(w.w, curWeek.week);
            if (w.d != null) {
              weekday = w.d;
              if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
              }
            } else if (w.e != null) {
              weekday = w.e + dow;
              if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
              }
            } else {
              weekday = dow;
            }
          }
          if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
          } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
          } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
          }
        }
        hooks.ISO_8601 = function() {
        };
        hooks.RFC_2822 = function() {
        };
        function configFromStringAndFormat(config) {
          if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
          }
          if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
          }
          config._a = [];
          getParsingFlags(config).empty = true;
          var string2 = "" + config._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string2.length, totalParsedInputLength = 0, era, tokenLen;
          tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
          tokenLen = tokens2.length;
          for (i2 = 0; i2 < tokenLen; i2++) {
            token2 = tokens2[i2];
            parsedInput = (string2.match(getParseRegexForToken(token2, config)) || [])[0];
            if (parsedInput) {
              skipped = string2.substr(0, string2.indexOf(parsedInput));
              if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
              }
              string2 = string2.slice(
                string2.indexOf(parsedInput) + parsedInput.length
              );
              totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token2]) {
              if (parsedInput) {
                getParsingFlags(config).empty = false;
              } else {
                getParsingFlags(config).unusedTokens.push(token2);
              }
              addTimeToArrayFromToken(token2, parsedInput, config);
            } else if (config._strict && !parsedInput) {
              getParsingFlags(config).unusedTokens.push(token2);
            }
          }
          getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
          if (string2.length > 0) {
            getParsingFlags(config).unusedInput.push(string2);
          }
          if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = void 0;
          }
          getParsingFlags(config).parsedDateParts = config._a.slice(0);
          getParsingFlags(config).meridiem = config._meridiem;
          config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
          );
          era = getParsingFlags(config).era;
          if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
          }
          configFromArray(config);
          checkOverflow(config);
        }
        function meridiemFixWrap(locale2, hour, meridiem2) {
          var isPm;
          if (meridiem2 == null) {
            return hour;
          }
          if (locale2.meridiemHour != null) {
            return locale2.meridiemHour(hour, meridiem2);
          } else if (locale2.isPM != null) {
            isPm = locale2.isPM(meridiem2);
            if (isPm && hour < 12) {
              hour += 12;
            }
            if (!isPm && hour === 12) {
              hour = 0;
            }
            return hour;
          } else {
            return hour;
          }
        }
        function configFromStringAndArray(config) {
          var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
          if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = /* @__PURE__ */ new Date(NaN);
            return;
          }
          for (i2 = 0; i2 < configfLen; i2++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
              tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i2];
            configFromStringAndFormat(tempConfig);
            if (isValid(tempConfig)) {
              validFormatFound = true;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (!bestFormatIsValid) {
              if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
                if (validFormatFound) {
                  bestFormatIsValid = true;
                }
              }
            } else {
              if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
              }
            }
          }
          extend2(config, bestMoment || tempConfig);
        }
        function configFromObject(config) {
          if (config._d) {
            return;
          }
          var i2 = normalizeObjectUnits(config._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
          config._a = map3(
            [i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond],
            function(obj) {
              return obj && parseInt(obj, 10);
            }
          );
          configFromArray(config);
        }
        function createFromConfig(config) {
          var res = new Moment(checkOverflow(prepareConfig(config)));
          if (res._nextDay) {
            res.add(1, "d");
            res._nextDay = void 0;
          }
          return res;
        }
        function prepareConfig(config) {
          var input = config._i, format2 = config._f;
          config._locale = config._locale || getLocale(config._l);
          if (input === null || format2 === void 0 && input === "") {
            return createInvalid({ nullInput: true });
          }
          if (typeof input === "string") {
            config._i = input = config._locale.preparse(input);
          }
          if (isMoment(input)) {
            return new Moment(checkOverflow(input));
          } else if (isDate2(input)) {
            config._d = input;
          } else if (isArray3(format2)) {
            configFromStringAndArray(config);
          } else if (format2) {
            configFromStringAndFormat(config);
          } else {
            configFromInput(config);
          }
          if (!isValid(config)) {
            config._d = null;
          }
          return config;
        }
        function configFromInput(config) {
          var input = config._i;
          if (isUndefined(input)) {
            config._d = new Date(hooks.now());
          } else if (isDate2(input)) {
            config._d = new Date(input.valueOf());
          } else if (typeof input === "string") {
            configFromString(config);
          } else if (isArray3(input)) {
            config._a = map3(input.slice(0), function(obj) {
              return parseInt(obj, 10);
            });
            configFromArray(config);
          } else if (isObject2(input)) {
            configFromObject(config);
          } else if (isNumber2(input)) {
            config._d = new Date(input);
          } else {
            hooks.createFromInputFallback(config);
          }
        }
        function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
          var c = {};
          if (format2 === true || format2 === false) {
            strict = format2;
            format2 = void 0;
          }
          if (locale2 === true || locale2 === false) {
            strict = locale2;
            locale2 = void 0;
          }
          if (isObject2(input) && isObjectEmpty(input) || isArray3(input) && input.length === 0) {
            input = void 0;
          }
          c._isAMomentObject = true;
          c._useUTC = c._isUTC = isUTC;
          c._l = locale2;
          c._i = input;
          c._f = format2;
          c._strict = strict;
          return createFromConfig(c);
        }
        function createLocal(input, format2, locale2, strict) {
          return createLocalOrUTC(input, format2, locale2, strict, false);
        }
        var prototypeMin = deprecate2(
          "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
          function() {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
            } else {
              return createInvalid();
            }
          }
        ), prototypeMax = deprecate2(
          "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
          function() {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
            } else {
              return createInvalid();
            }
          }
        );
        function pickBy(fn, moments) {
          var res, i2;
          if (moments.length === 1 && isArray3(moments[0])) {
            moments = moments[0];
          }
          if (!moments.length) {
            return createLocal();
          }
          res = moments[0];
          for (i2 = 1; i2 < moments.length; ++i2) {
            if (!moments[i2].isValid() || moments[i2][fn](res)) {
              res = moments[i2];
            }
          }
          return res;
        }
        function min2() {
          var args = [].slice.call(arguments, 0);
          return pickBy("isBefore", args);
        }
        function max2() {
          var args = [].slice.call(arguments, 0);
          return pickBy("isAfter", args);
        }
        var now3 = function() {
          return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
        };
        var ordering = [
          "year",
          "quarter",
          "month",
          "week",
          "day",
          "hour",
          "minute",
          "second",
          "millisecond"
        ];
        function isDurationValid(m) {
          var key, unitHasDecimal = false, i2, orderLen = ordering.length;
          for (key in m) {
            if (hasOwnProp(m, key) && !(indexOf3.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
              return false;
            }
          }
          for (i2 = 0; i2 < orderLen; ++i2) {
            if (m[ordering[i2]]) {
              if (unitHasDecimal) {
                return false;
              }
              if (parseFloat(m[ordering[i2]]) !== toInt(m[ordering[i2]])) {
                unitHasDecimal = true;
              }
            }
          }
          return true;
        }
        function isValid$1() {
          return this._isValid;
        }
        function createInvalid$1() {
          return createDuration(NaN);
        }
        function Duration(duration) {
          var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
          this._isValid = isDurationValid(normalizedInput);
          this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
          minutes2 * 6e4 + // 1000 * 60
          hours2 * 1e3 * 60 * 60;
          this._days = +days2 + weeks2 * 7;
          this._months = +months2 + quarters * 3 + years2 * 12;
          this._data = {};
          this._locale = getLocale();
          this._bubble();
        }
        function isDuration(obj) {
          return obj instanceof Duration;
        }
        function absRound(number2) {
          if (number2 < 0) {
            return Math.round(-1 * number2) * -1;
          } else {
            return Math.round(number2);
          }
        }
        function compareArrays(array1, array2, dontConvert) {
          var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
          for (i2 = 0; i2 < len; i2++) {
            if (dontConvert && array1[i2] !== array2[i2] || !dontConvert && toInt(array1[i2]) !== toInt(array2[i2])) {
              diffs++;
            }
          }
          return diffs + lengthDiff;
        }
        function offset(token2, separator) {
          addFormatToken(token2, 0, 0, function() {
            var offset2 = this.utcOffset(), sign2 = "+";
            if (offset2 < 0) {
              offset2 = -offset2;
              sign2 = "-";
            }
            return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
          });
        }
        offset("Z", ":");
        offset("ZZ", "");
        addRegexToken("Z", matchShortOffset);
        addRegexToken("ZZ", matchShortOffset);
        addParseToken(["Z", "ZZ"], function(input, array2, config) {
          config._useUTC = true;
          config._tzm = offsetFromString(matchShortOffset, input);
        });
        var chunkOffset = /([\+\-]|\d\d)/gi;
        function offsetFromString(matcher, string2) {
          var matches = (string2 || "").match(matcher), chunk, parts, minutes2;
          if (matches === null) {
            return null;
          }
          chunk = matches[matches.length - 1] || [];
          parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
          minutes2 = +(parts[1] * 60) + toInt(parts[2]);
          return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
        }
        function cloneWithOffset(input, model) {
          var res, diff2;
          if (model._isUTC) {
            res = model.clone();
            diff2 = (isMoment(input) || isDate2(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            res._d.setTime(res._d.valueOf() + diff2);
            hooks.updateOffset(res, false);
            return res;
          } else {
            return createLocal(input).local();
          }
        }
        function getDateOffset(m) {
          return -Math.round(m._d.getTimezoneOffset());
        }
        hooks.updateOffset = function() {
        };
        function getSetOffset(input, keepLocalTime, keepMinutes) {
          var offset2 = this._offset || 0, localAdjust;
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          if (input != null) {
            if (typeof input === "string") {
              input = offsetFromString(matchShortOffset, input);
              if (input === null) {
                return this;
              }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
              input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
              localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
              this.add(localAdjust, "m");
            }
            if (offset2 !== input) {
              if (!keepLocalTime || this._changeInProgress) {
                addSubtract(
                  this,
                  createDuration(input - offset2, "m"),
                  1,
                  false
                );
              } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
              }
            }
            return this;
          } else {
            return this._isUTC ? offset2 : getDateOffset(this);
          }
        }
        function getSetZone(input, keepLocalTime) {
          if (input != null) {
            if (typeof input !== "string") {
              input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
          } else {
            return -this.utcOffset();
          }
        }
        function setOffsetToUTC(keepLocalTime) {
          return this.utcOffset(0, keepLocalTime);
        }
        function setOffsetToLocal(keepLocalTime) {
          if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
              this.subtract(getDateOffset(this), "m");
            }
          }
          return this;
        }
        function setOffsetToParsedOffset() {
          if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
          } else if (typeof this._i === "string") {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
              this.utcOffset(tZone);
            } else {
              this.utcOffset(0, true);
            }
          }
          return this;
        }
        function hasAlignedHourOffset(input) {
          if (!this.isValid()) {
            return false;
          }
          input = input ? createLocal(input).utcOffset() : 0;
          return (this.utcOffset() - input) % 60 === 0;
        }
        function isDaylightSavingTime() {
          return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
        }
        function isDaylightSavingTimeShifted() {
          if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
          }
          var c = {}, other;
          copyConfig(c, this);
          c = prepareConfig(c);
          if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
          } else {
            this._isDSTShifted = false;
          }
          return this._isDSTShifted;
        }
        function isLocal() {
          return this.isValid() ? !this._isUTC : false;
        }
        function isUtcOffset() {
          return this.isValid() ? this._isUTC : false;
        }
        function isUtc() {
          return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }
        var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
        function createDuration(input, key) {
          var duration = input, match5 = null, sign2, ret, diffRes;
          if (isDuration(input)) {
            duration = {
              ms: input._milliseconds,
              d: input._days,
              M: input._months
            };
          } else if (isNumber2(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
              duration[key] = +input;
            } else {
              duration.milliseconds = +input;
            }
          } else if (match5 = aspNetRegex.exec(input)) {
            sign2 = match5[1] === "-" ? -1 : 1;
            duration = {
              y: 0,
              d: toInt(match5[DATE]) * sign2,
              h: toInt(match5[HOUR]) * sign2,
              m: toInt(match5[MINUTE]) * sign2,
              s: toInt(match5[SECOND]) * sign2,
              ms: toInt(absRound(match5[MILLISECOND] * 1e3)) * sign2
              // the millisecond decimal point is included in the match
            };
          } else if (match5 = isoRegex.exec(input)) {
            sign2 = match5[1] === "-" ? -1 : 1;
            duration = {
              y: parseIso(match5[2], sign2),
              M: parseIso(match5[3], sign2),
              w: parseIso(match5[4], sign2),
              d: parseIso(match5[5], sign2),
              h: parseIso(match5[6], sign2),
              m: parseIso(match5[7], sign2),
              s: parseIso(match5[8], sign2)
            };
          } else if (duration == null) {
            duration = {};
          } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
            diffRes = momentsDifference(
              createLocal(duration.from),
              createLocal(duration.to)
            );
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
          }
          ret = new Duration(duration);
          if (isDuration(input) && hasOwnProp(input, "_locale")) {
            ret._locale = input._locale;
          }
          if (isDuration(input) && hasOwnProp(input, "_isValid")) {
            ret._isValid = input._isValid;
          }
          return ret;
        }
        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;
        function parseIso(inp, sign2) {
          var res = inp && parseFloat(inp.replace(",", "."));
          return (isNaN(res) ? 0 : res) * sign2;
        }
        function positiveMomentsDifference(base, other) {
          var res = {};
          res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
          if (base.clone().add(res.months, "M").isAfter(other)) {
            --res.months;
          }
          res.milliseconds = +other - +base.clone().add(res.months, "M");
          return res;
        }
        function momentsDifference(base, other) {
          var res;
          if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
          }
          other = cloneWithOffset(other, base);
          if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
          } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
          }
          return res;
        }
        function createAdder(direction, name) {
          return function(val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
              deprecateSimple(
                name,
                "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
              );
              tmp = val;
              val = period;
              period = tmp;
            }
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
          };
        }
        function addSubtract(mom, duration, isAdding, updateOffset) {
          var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
          if (!mom.isValid()) {
            return;
          }
          updateOffset = updateOffset == null ? true : updateOffset;
          if (months2) {
            setMonth(mom, get3(mom, "Month") + months2 * isAdding);
          }
          if (days2) {
            set$12(mom, "Date", get3(mom, "Date") + days2 * isAdding);
          }
          if (milliseconds2) {
            mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
          }
          if (updateOffset) {
            hooks.updateOffset(mom, days2 || months2);
          }
        }
        var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
        function isString2(input) {
          return typeof input === "string" || input instanceof String;
        }
        function isMomentInput(input) {
          return isMoment(input) || isDate2(input) || isString2(input) || isNumber2(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
        }
        function isMomentInputObject(input) {
          var objectTest = isObject2(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "years",
            "year",
            "y",
            "months",
            "month",
            "M",
            "days",
            "day",
            "d",
            "dates",
            "date",
            "D",
            "hours",
            "hour",
            "h",
            "minutes",
            "minute",
            "m",
            "seconds",
            "second",
            "s",
            "milliseconds",
            "millisecond",
            "ms"
          ], i2, property, propertyLen = properties.length;
          for (i2 = 0; i2 < propertyLen; i2 += 1) {
            property = properties[i2];
            propertyTest = propertyTest || hasOwnProp(input, property);
          }
          return objectTest && propertyTest;
        }
        function isNumberOrStringArray(input) {
          var arrayTest = isArray3(input), dataTypeTest = false;
          if (arrayTest) {
            dataTypeTest = input.filter(function(item) {
              return !isNumber2(item) && isString2(input);
            }).length === 0;
          }
          return arrayTest && dataTypeTest;
        }
        function isCalendarSpec(input) {
          var objectTest = isObject2(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "sameDay",
            "nextDay",
            "lastDay",
            "nextWeek",
            "lastWeek",
            "sameElse"
          ], i2, property;
          for (i2 = 0; i2 < properties.length; i2 += 1) {
            property = properties[i2];
            propertyTest = propertyTest || hasOwnProp(input, property);
          }
          return objectTest && propertyTest;
        }
        function getCalendarFormat(myMoment, now4) {
          var diff2 = myMoment.diff(now4, "days", true);
          return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
        }
        function calendar$1(time, formats) {
          if (arguments.length === 1) {
            if (!arguments[0]) {
              time = void 0;
              formats = void 0;
            } else if (isMomentInput(arguments[0])) {
              time = arguments[0];
              formats = void 0;
            } else if (isCalendarSpec(arguments[0])) {
              formats = arguments[0];
              time = void 0;
            }
          }
          var now4 = time || createLocal(), sod = cloneWithOffset(now4, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now4) : formats[format2]);
          return this.format(
            output || this.localeData().calendar(format2, this, createLocal(now4))
          );
        }
        function clone2() {
          return new Moment(this);
        }
        function isAfter(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units) || "millisecond";
          if (units === "millisecond") {
            return this.valueOf() > localInput.valueOf();
          } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
          }
        }
        function isBefore(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units) || "millisecond";
          if (units === "millisecond") {
            return this.valueOf() < localInput.valueOf();
          } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
          }
        }
        function isBetween(from4, to2, units, inclusivity) {
          var localFrom = isMoment(from4) ? from4 : createLocal(from4), localTo = isMoment(to2) ? to2 : createLocal(to2);
          if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
          }
          inclusivity = inclusivity || "()";
          return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
        }
        function isSame(input, units) {
          var localInput = isMoment(input) ? input : createLocal(input), inputMs;
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units) || "millisecond";
          if (units === "millisecond") {
            return this.valueOf() === localInput.valueOf();
          } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
          }
        }
        function isSameOrAfter(input, units) {
          return this.isSame(input, units) || this.isAfter(input, units);
        }
        function isSameOrBefore(input, units) {
          return this.isSame(input, units) || this.isBefore(input, units);
        }
        function diff(input, units, asFloat) {
          var that, zoneDelta, output;
          if (!this.isValid()) {
            return NaN;
          }
          that = cloneWithOffset(input, this);
          if (!that.isValid()) {
            return NaN;
          }
          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
          units = normalizeUnits(units);
          switch (units) {
            case "year":
              output = monthDiff(this, that) / 12;
              break;
            case "month":
              output = monthDiff(this, that);
              break;
            case "quarter":
              output = monthDiff(this, that) / 3;
              break;
            case "second":
              output = (this - that) / 1e3;
              break;
            case "minute":
              output = (this - that) / 6e4;
              break;
            case "hour":
              output = (this - that) / 36e5;
              break;
            case "day":
              output = (this - that - zoneDelta) / 864e5;
              break;
            case "week":
              output = (this - that - zoneDelta) / 6048e5;
              break;
            default:
              output = this - that;
          }
          return asFloat ? output : absFloor(output);
        }
        function monthDiff(a, b) {
          if (a.date() < b.date()) {
            return -monthDiff(b, a);
          }
          var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
          if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
            adjust = (b - anchor) / (anchor - anchor2);
          } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
            adjust = (b - anchor) / (anchor2 - anchor);
          }
          return -(wholeMonthDiff + adjust) || 0;
        }
        hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
        hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
        function toString3() {
          return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        }
        function toISOString(keepOffset) {
          if (!this.isValid()) {
            return null;
          }
          var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
          if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
              m,
              utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
            );
          }
          if (isFunction(Date.prototype.toISOString)) {
            if (utc) {
              return this.toDate().toISOString();
            } else {
              return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
            }
          }
          return formatMoment(
            m,
            utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
          );
        }
        function inspect() {
          if (!this.isValid()) {
            return "moment.invalid(/* " + this._i + " */)";
          }
          var func = "moment", zone = "", prefix, year, datetime, suffix;
          if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
            zone = "Z";
          }
          prefix = "[" + func + '("]';
          year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
          datetime = "-MM-DD[T]HH:mm:ss.SSS";
          suffix = zone + '[")]';
          return this.format(prefix + year + datetime + suffix);
        }
        function format(inputString) {
          if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
          }
          var output = formatMoment(this, inputString);
          return this.localeData().postformat(output);
        }
        function from3(time, withoutSuffix) {
          if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
          } else {
            return this.localeData().invalidDate();
          }
        }
        function fromNow(withoutSuffix) {
          return this.from(createLocal(), withoutSuffix);
        }
        function to(time, withoutSuffix) {
          if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
          } else {
            return this.localeData().invalidDate();
          }
        }
        function toNow(withoutSuffix) {
          return this.to(createLocal(), withoutSuffix);
        }
        function locale(key) {
          var newLocaleData;
          if (key === void 0) {
            return this._locale._abbr;
          } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
              this._locale = newLocaleData;
            }
            return this;
          }
        }
        var lang = deprecate2(
          "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
          function(key) {
            if (key === void 0) {
              return this.localeData();
            } else {
              return this.locale(key);
            }
          }
        );
        function localeData() {
          return this._locale;
        }
        var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
        function mod$1(dividend, divisor) {
          return (dividend % divisor + divisor) % divisor;
        }
        function localStartOfDate(y, m, d) {
          if (y < 100 && y >= 0) {
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
          } else {
            return new Date(y, m, d).valueOf();
          }
        }
        function utcStartOfDate(y, m, d) {
          if (y < 100 && y >= 0) {
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
          } else {
            return Date.UTC(y, m, d);
          }
        }
        function startOf(units) {
          var time, startOfDate;
          units = normalizeUnits(units);
          if (units === void 0 || units === "millisecond" || !this.isValid()) {
            return this;
          }
          startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
          switch (units) {
            case "year":
              time = startOfDate(this.year(), 0, 1);
              break;
            case "quarter":
              time = startOfDate(
                this.year(),
                this.month() - this.month() % 3,
                1
              );
              break;
            case "month":
              time = startOfDate(this.year(), this.month(), 1);
              break;
            case "week":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - this.weekday()
              );
              break;
            case "isoWeek":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - (this.isoWeekday() - 1)
              );
              break;
            case "day":
            case "date":
              time = startOfDate(this.year(), this.month(), this.date());
              break;
            case "hour":
              time = this._d.valueOf();
              time -= mod$1(
                time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                MS_PER_HOUR
              );
              break;
            case "minute":
              time = this._d.valueOf();
              time -= mod$1(time, MS_PER_MINUTE);
              break;
            case "second":
              time = this._d.valueOf();
              time -= mod$1(time, MS_PER_SECOND);
              break;
          }
          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
        }
        function endOf(units) {
          var time, startOfDate;
          units = normalizeUnits(units);
          if (units === void 0 || units === "millisecond" || !this.isValid()) {
            return this;
          }
          startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
          switch (units) {
            case "year":
              time = startOfDate(this.year() + 1, 0, 1) - 1;
              break;
            case "quarter":
              time = startOfDate(
                this.year(),
                this.month() - this.month() % 3 + 3,
                1
              ) - 1;
              break;
            case "month":
              time = startOfDate(this.year(), this.month() + 1, 1) - 1;
              break;
            case "week":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - this.weekday() + 7
              ) - 1;
              break;
            case "isoWeek":
              time = startOfDate(
                this.year(),
                this.month(),
                this.date() - (this.isoWeekday() - 1) + 7
              ) - 1;
              break;
            case "day":
            case "date":
              time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
              break;
            case "hour":
              time = this._d.valueOf();
              time += MS_PER_HOUR - mod$1(
                time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                MS_PER_HOUR
              ) - 1;
              break;
            case "minute":
              time = this._d.valueOf();
              time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
              break;
            case "second":
              time = this._d.valueOf();
              time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
              break;
          }
          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
        }
        function valueOf() {
          return this._d.valueOf() - (this._offset || 0) * 6e4;
        }
        function unix() {
          return Math.floor(this.valueOf() / 1e3);
        }
        function toDate() {
          return new Date(this.valueOf());
        }
        function toArray2() {
          var m = this;
          return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond()
          ];
        }
        function toObject2() {
          var m = this;
          return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
          };
        }
        function toJSON() {
          return this.isValid() ? this.toISOString() : null;
        }
        function isValid$2() {
          return isValid(this);
        }
        function parsingFlags() {
          return extend2({}, getParsingFlags(this));
        }
        function invalidAt() {
          return getParsingFlags(this).overflow;
        }
        function creationData() {
          return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
          };
        }
        addFormatToken("N", 0, 0, "eraAbbr");
        addFormatToken("NN", 0, 0, "eraAbbr");
        addFormatToken("NNN", 0, 0, "eraAbbr");
        addFormatToken("NNNN", 0, 0, "eraName");
        addFormatToken("NNNNN", 0, 0, "eraNarrow");
        addFormatToken("y", ["y", 1], "yo", "eraYear");
        addFormatToken("y", ["yy", 2], 0, "eraYear");
        addFormatToken("y", ["yyy", 3], 0, "eraYear");
        addFormatToken("y", ["yyyy", 4], 0, "eraYear");
        addRegexToken("N", matchEraAbbr);
        addRegexToken("NN", matchEraAbbr);
        addRegexToken("NNN", matchEraAbbr);
        addRegexToken("NNNN", matchEraName);
        addRegexToken("NNNNN", matchEraNarrow);
        addParseToken(
          ["N", "NN", "NNN", "NNNN", "NNNNN"],
          function(input, array2, config, token2) {
            var era = config._locale.erasParse(input, token2, config._strict);
            if (era) {
              getParsingFlags(config).era = era;
            } else {
              getParsingFlags(config).invalidEra = input;
            }
          }
        );
        addRegexToken("y", matchUnsigned);
        addRegexToken("yy", matchUnsigned);
        addRegexToken("yyy", matchUnsigned);
        addRegexToken("yyyy", matchUnsigned);
        addRegexToken("yo", matchEraYearOrdinal);
        addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
        addParseToken(["yo"], function(input, array2, config, token2) {
          var match5;
          if (config._locale._eraYearOrdinalRegex) {
            match5 = input.match(config._locale._eraYearOrdinalRegex);
          }
          if (config._locale.eraYearOrdinalParse) {
            array2[YEAR] = config._locale.eraYearOrdinalParse(input, match5);
          } else {
            array2[YEAR] = parseInt(input, 10);
          }
        });
        function localeEras(m, format2) {
          var i2, l, date2, eras = this._eras || getLocale("en")._eras;
          for (i2 = 0, l = eras.length; i2 < l; ++i2) {
            switch (typeof eras[i2].since) {
              case "string":
                date2 = hooks(eras[i2].since).startOf("day");
                eras[i2].since = date2.valueOf();
                break;
            }
            switch (typeof eras[i2].until) {
              case "undefined":
                eras[i2].until = Infinity;
                break;
              case "string":
                date2 = hooks(eras[i2].until).startOf("day").valueOf();
                eras[i2].until = date2.valueOf();
                break;
            }
          }
          return eras;
        }
        function localeErasParse(eraName, format2, strict) {
          var i2, l, eras = this.eras(), name, abbr, narrow;
          eraName = eraName.toUpperCase();
          for (i2 = 0, l = eras.length; i2 < l; ++i2) {
            name = eras[i2].name.toUpperCase();
            abbr = eras[i2].abbr.toUpperCase();
            narrow = eras[i2].narrow.toUpperCase();
            if (strict) {
              switch (format2) {
                case "N":
                case "NN":
                case "NNN":
                  if (abbr === eraName) {
                    return eras[i2];
                  }
                  break;
                case "NNNN":
                  if (name === eraName) {
                    return eras[i2];
                  }
                  break;
                case "NNNNN":
                  if (narrow === eraName) {
                    return eras[i2];
                  }
                  break;
              }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
              return eras[i2];
            }
          }
        }
        function localeErasConvertYear(era, year) {
          var dir = era.since <= era.until ? 1 : -1;
          if (year === void 0) {
            return hooks(era.since).year();
          } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
          }
        }
        function getEraName() {
          var i2, l, val, eras = this.localeData().eras();
          for (i2 = 0, l = eras.length; i2 < l; ++i2) {
            val = this.clone().startOf("day").valueOf();
            if (eras[i2].since <= val && val <= eras[i2].until) {
              return eras[i2].name;
            }
            if (eras[i2].until <= val && val <= eras[i2].since) {
              return eras[i2].name;
            }
          }
          return "";
        }
        function getEraNarrow() {
          var i2, l, val, eras = this.localeData().eras();
          for (i2 = 0, l = eras.length; i2 < l; ++i2) {
            val = this.clone().startOf("day").valueOf();
            if (eras[i2].since <= val && val <= eras[i2].until) {
              return eras[i2].narrow;
            }
            if (eras[i2].until <= val && val <= eras[i2].since) {
              return eras[i2].narrow;
            }
          }
          return "";
        }
        function getEraAbbr() {
          var i2, l, val, eras = this.localeData().eras();
          for (i2 = 0, l = eras.length; i2 < l; ++i2) {
            val = this.clone().startOf("day").valueOf();
            if (eras[i2].since <= val && val <= eras[i2].until) {
              return eras[i2].abbr;
            }
            if (eras[i2].until <= val && val <= eras[i2].since) {
              return eras[i2].abbr;
            }
          }
          return "";
        }
        function getEraYear() {
          var i2, l, dir, val, eras = this.localeData().eras();
          for (i2 = 0, l = eras.length; i2 < l; ++i2) {
            dir = eras[i2].since <= eras[i2].until ? 1 : -1;
            val = this.clone().startOf("day").valueOf();
            if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
              return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
            }
          }
          return this.year();
        }
        function erasNameRegex(isStrict) {
          if (!hasOwnProp(this, "_erasNameRegex")) {
            computeErasParse.call(this);
          }
          return isStrict ? this._erasNameRegex : this._erasRegex;
        }
        function erasAbbrRegex(isStrict) {
          if (!hasOwnProp(this, "_erasAbbrRegex")) {
            computeErasParse.call(this);
          }
          return isStrict ? this._erasAbbrRegex : this._erasRegex;
        }
        function erasNarrowRegex(isStrict) {
          if (!hasOwnProp(this, "_erasNarrowRegex")) {
            computeErasParse.call(this);
          }
          return isStrict ? this._erasNarrowRegex : this._erasRegex;
        }
        function matchEraAbbr(isStrict, locale2) {
          return locale2.erasAbbrRegex(isStrict);
        }
        function matchEraName(isStrict, locale2) {
          return locale2.erasNameRegex(isStrict);
        }
        function matchEraNarrow(isStrict, locale2) {
          return locale2.erasNarrowRegex(isStrict);
        }
        function matchEraYearOrdinal(isStrict, locale2) {
          return locale2._eraYearOrdinalRegex || matchUnsigned;
        }
        function computeErasParse() {
          var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l, eras = this.eras();
          for (i2 = 0, l = eras.length; i2 < l; ++i2) {
            namePieces.push(regexEscape(eras[i2].name));
            abbrPieces.push(regexEscape(eras[i2].abbr));
            narrowPieces.push(regexEscape(eras[i2].narrow));
            mixedPieces.push(regexEscape(eras[i2].name));
            mixedPieces.push(regexEscape(eras[i2].abbr));
            mixedPieces.push(regexEscape(eras[i2].narrow));
          }
          this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
          this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
          this._erasNarrowRegex = new RegExp(
            "^(" + narrowPieces.join("|") + ")",
            "i"
          );
        }
        addFormatToken(0, ["gg", 2], 0, function() {
          return this.weekYear() % 100;
        });
        addFormatToken(0, ["GG", 2], 0, function() {
          return this.isoWeekYear() % 100;
        });
        function addWeekYearFormatToken(token2, getter) {
          addFormatToken(0, [token2, token2.length], 0, getter);
        }
        addWeekYearFormatToken("gggg", "weekYear");
        addWeekYearFormatToken("ggggg", "weekYear");
        addWeekYearFormatToken("GGGG", "isoWeekYear");
        addWeekYearFormatToken("GGGGG", "isoWeekYear");
        addUnitAlias("weekYear", "gg");
        addUnitAlias("isoWeekYear", "GG");
        addUnitPriority("weekYear", 1);
        addUnitPriority("isoWeekYear", 1);
        addRegexToken("G", matchSigned);
        addRegexToken("g", matchSigned);
        addRegexToken("GG", match1to2, match2);
        addRegexToken("gg", match1to2, match2);
        addRegexToken("GGGG", match1to4, match4);
        addRegexToken("gggg", match1to4, match4);
        addRegexToken("GGGGG", match1to6, match6);
        addRegexToken("ggggg", match1to6, match6);
        addWeekParseToken(
          ["gggg", "ggggg", "GGGG", "GGGGG"],
          function(input, week, config, token2) {
            week[token2.substr(0, 2)] = toInt(input);
          }
        );
        addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
          week[token2] = hooks.parseTwoDigitYear(input);
        });
        function getSetWeekYear(input) {
          return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
          );
        }
        function getSetISOWeekYear(input) {
          return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
          );
        }
        function getISOWeeksInYear() {
          return weeksInYear(this.year(), 1, 4);
        }
        function getISOWeeksInISOWeekYear() {
          return weeksInYear(this.isoWeekYear(), 1, 4);
        }
        function getWeeksInYear() {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }
        function getWeeksInWeekYear() {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
        }
        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
          var weeksTarget;
          if (input == null) {
            return weekOfYear(this, dow, doy).year;
          } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
              week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
          }
        }
        function setWeekAll(weekYear, week, weekday, dow, doy) {
          var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date2 = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
          this.year(date2.getUTCFullYear());
          this.month(date2.getUTCMonth());
          this.date(date2.getUTCDate());
          return this;
        }
        addFormatToken("Q", 0, "Qo", "quarter");
        addUnitAlias("quarter", "Q");
        addUnitPriority("quarter", 7);
        addRegexToken("Q", match1);
        addParseToken("Q", function(input, array2) {
          array2[MONTH] = (toInt(input) - 1) * 3;
        });
        function getSetQuarter(input) {
          return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        }
        addFormatToken("D", ["DD", 2], "Do", "date");
        addUnitAlias("date", "D");
        addUnitPriority("date", 9);
        addRegexToken("D", match1to2);
        addRegexToken("DD", match1to2, match2);
        addRegexToken("Do", function(isStrict, locale2) {
          return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
        });
        addParseToken(["D", "DD"], DATE);
        addParseToken("Do", function(input, array2) {
          array2[DATE] = toInt(input.match(match1to2)[0]);
        });
        var getSetDayOfMonth = makeGetSet("Date", true);
        addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
        addUnitAlias("dayOfYear", "DDD");
        addUnitPriority("dayOfYear", 4);
        addRegexToken("DDD", match1to3);
        addRegexToken("DDDD", match3);
        addParseToken(["DDD", "DDDD"], function(input, array2, config) {
          config._dayOfYear = toInt(input);
        });
        function getSetDayOfYear(input) {
          var dayOfYear = Math.round(
            (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
          ) + 1;
          return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
        }
        addFormatToken("m", ["mm", 2], 0, "minute");
        addUnitAlias("minute", "m");
        addUnitPriority("minute", 14);
        addRegexToken("m", match1to2);
        addRegexToken("mm", match1to2, match2);
        addParseToken(["m", "mm"], MINUTE);
        var getSetMinute = makeGetSet("Minutes", false);
        addFormatToken("s", ["ss", 2], 0, "second");
        addUnitAlias("second", "s");
        addUnitPriority("second", 15);
        addRegexToken("s", match1to2);
        addRegexToken("ss", match1to2, match2);
        addParseToken(["s", "ss"], SECOND);
        var getSetSecond = makeGetSet("Seconds", false);
        addFormatToken("S", 0, 0, function() {
          return ~~(this.millisecond() / 100);
        });
        addFormatToken(0, ["SS", 2], 0, function() {
          return ~~(this.millisecond() / 10);
        });
        addFormatToken(0, ["SSS", 3], 0, "millisecond");
        addFormatToken(0, ["SSSS", 4], 0, function() {
          return this.millisecond() * 10;
        });
        addFormatToken(0, ["SSSSS", 5], 0, function() {
          return this.millisecond() * 100;
        });
        addFormatToken(0, ["SSSSSS", 6], 0, function() {
          return this.millisecond() * 1e3;
        });
        addFormatToken(0, ["SSSSSSS", 7], 0, function() {
          return this.millisecond() * 1e4;
        });
        addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
          return this.millisecond() * 1e5;
        });
        addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
          return this.millisecond() * 1e6;
        });
        addUnitAlias("millisecond", "ms");
        addUnitPriority("millisecond", 16);
        addRegexToken("S", match1to3, match1);
        addRegexToken("SS", match1to3, match2);
        addRegexToken("SSS", match1to3, match3);
        var token, getSetMillisecond;
        for (token = "SSSS"; token.length <= 9; token += "S") {
          addRegexToken(token, matchUnsigned);
        }
        function parseMs(input, array2) {
          array2[MILLISECOND] = toInt(("0." + input) * 1e3);
        }
        for (token = "S"; token.length <= 9; token += "S") {
          addParseToken(token, parseMs);
        }
        getSetMillisecond = makeGetSet("Milliseconds", false);
        addFormatToken("z", 0, 0, "zoneAbbr");
        addFormatToken("zz", 0, 0, "zoneName");
        function getZoneAbbr() {
          return this._isUTC ? "UTC" : "";
        }
        function getZoneName() {
          return this._isUTC ? "Coordinated Universal Time" : "";
        }
        var proto = Moment.prototype;
        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone2;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from3;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray2;
        proto.toObject = toObject2;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        if (typeof Symbol !== "undefined" && Symbol.for != null) {
          proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
            return "Moment<" + this.format() + ">";
          };
        }
        proto.toJSON = toJSON;
        proto.toString = toString3;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.eraName = getEraName;
        proto.eraNarrow = getEraNarrow;
        proto.eraAbbr = getEraAbbr;
        proto.eraYear = getEraYear;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.weeksInWeekYear = getWeeksInWeekYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate2(
          "dates accessor is deprecated. Use date instead.",
          getSetDayOfMonth
        );
        proto.months = deprecate2(
          "months accessor is deprecated. Use month instead",
          getSetMonth
        );
        proto.years = deprecate2(
          "years accessor is deprecated. Use year instead",
          getSetYear
        );
        proto.zone = deprecate2(
          "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
          getSetZone
        );
        proto.isDSTShifted = deprecate2(
          "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
          isDaylightSavingTimeShifted
        );
        function createUnix(input) {
          return createLocal(input * 1e3);
        }
        function createInZone() {
          return createLocal.apply(null, arguments).parseZone();
        }
        function preParsePostFormat(string2) {
          return string2;
        }
        var proto$1 = Locale.prototype;
        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set2;
        proto$1.eras = localeEras;
        proto$1.erasParse = localeErasParse;
        proto$1.erasConvertYear = localeErasConvertYear;
        proto$1.erasAbbrRegex = erasAbbrRegex;
        proto$1.erasNameRegex = erasNameRegex;
        proto$1.erasNarrowRegex = erasNarrowRegex;
        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;
        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;
        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;
        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;
        function get$1(format2, index, field, setter) {
          var locale2 = getLocale(), utc = createUTC().set(setter, index);
          return locale2[field](utc, format2);
        }
        function listMonthsImpl(format2, index, field) {
          if (isNumber2(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
          if (index != null) {
            return get$1(format2, index, field, "month");
          }
          var i2, out = [];
          for (i2 = 0; i2 < 12; i2++) {
            out[i2] = get$1(format2, i2, field, "month");
          }
          return out;
        }
        function listWeekdaysImpl(localeSorted, format2, index, field) {
          if (typeof localeSorted === "boolean") {
            if (isNumber2(format2)) {
              index = format2;
              format2 = void 0;
            }
            format2 = format2 || "";
          } else {
            format2 = localeSorted;
            index = format2;
            localeSorted = false;
            if (isNumber2(format2)) {
              index = format2;
              format2 = void 0;
            }
            format2 = format2 || "";
          }
          var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
          if (index != null) {
            return get$1(format2, (index + shift) % 7, field, "day");
          }
          for (i2 = 0; i2 < 7; i2++) {
            out[i2] = get$1(format2, (i2 + shift) % 7, field, "day");
          }
          return out;
        }
        function listMonths(format2, index) {
          return listMonthsImpl(format2, index, "months");
        }
        function listMonthsShort(format2, index) {
          return listMonthsImpl(format2, index, "monthsShort");
        }
        function listWeekdays(localeSorted, format2, index) {
          return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
        }
        function listWeekdaysShort(localeSorted, format2, index) {
          return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
        }
        function listWeekdaysMin(localeSorted, format2, index) {
          return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
        }
        getSetGlobalLocale("en", {
          eras: [
            {
              since: "0001-01-01",
              until: Infinity,
              offset: 1,
              name: "Anno Domini",
              narrow: "AD",
              abbr: "AD"
            },
            {
              since: "0000-12-31",
              until: -Infinity,
              offset: 1,
              name: "Before Christ",
              narrow: "BC",
              abbr: "BC"
            }
          ],
          dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal: function(number2) {
            var b = number2 % 10, output = toInt(number2 % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
            return number2 + output;
          }
        });
        hooks.lang = deprecate2(
          "moment.lang is deprecated. Use moment.locale instead.",
          getSetGlobalLocale
        );
        hooks.langData = deprecate2(
          "moment.langData is deprecated. Use moment.localeData instead.",
          getLocale
        );
        var mathAbs = Math.abs;
        function abs2() {
          var data2 = this._data;
          this._milliseconds = mathAbs(this._milliseconds);
          this._days = mathAbs(this._days);
          this._months = mathAbs(this._months);
          data2.milliseconds = mathAbs(data2.milliseconds);
          data2.seconds = mathAbs(data2.seconds);
          data2.minutes = mathAbs(data2.minutes);
          data2.hours = mathAbs(data2.hours);
          data2.months = mathAbs(data2.months);
          data2.years = mathAbs(data2.years);
          return this;
        }
        function addSubtract$1(duration, input, value, direction) {
          var other = createDuration(input, value);
          duration._milliseconds += direction * other._milliseconds;
          duration._days += direction * other._days;
          duration._months += direction * other._months;
          return duration._bubble();
        }
        function add$1(input, value) {
          return addSubtract$1(this, input, value, 1);
        }
        function subtract$1(input, value) {
          return addSubtract$1(this, input, value, -1);
        }
        function absCeil(number2) {
          if (number2 < 0) {
            return Math.floor(number2);
          } else {
            return Math.ceil(number2);
          }
        }
        function bubble() {
          var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data2 = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
          if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
            milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
            days2 = 0;
            months2 = 0;
          }
          data2.milliseconds = milliseconds2 % 1e3;
          seconds2 = absFloor(milliseconds2 / 1e3);
          data2.seconds = seconds2 % 60;
          minutes2 = absFloor(seconds2 / 60);
          data2.minutes = minutes2 % 60;
          hours2 = absFloor(minutes2 / 60);
          data2.hours = hours2 % 24;
          days2 += absFloor(hours2 / 24);
          monthsFromDays = absFloor(daysToMonths(days2));
          months2 += monthsFromDays;
          days2 -= absCeil(monthsToDays(monthsFromDays));
          years2 = absFloor(months2 / 12);
          months2 %= 12;
          data2.days = days2;
          data2.months = months2;
          data2.years = years2;
          return this;
        }
        function daysToMonths(days2) {
          return days2 * 4800 / 146097;
        }
        function monthsToDays(months2) {
          return months2 * 146097 / 4800;
        }
        function as(units) {
          if (!this.isValid()) {
            return NaN;
          }
          var days2, months2, milliseconds2 = this._milliseconds;
          units = normalizeUnits(units);
          if (units === "month" || units === "quarter" || units === "year") {
            days2 = this._days + milliseconds2 / 864e5;
            months2 = this._months + daysToMonths(days2);
            switch (units) {
              case "month":
                return months2;
              case "quarter":
                return months2 / 3;
              case "year":
                return months2 / 12;
            }
          } else {
            days2 = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
              case "week":
                return days2 / 7 + milliseconds2 / 6048e5;
              case "day":
                return days2 + milliseconds2 / 864e5;
              case "hour":
                return days2 * 24 + milliseconds2 / 36e5;
              case "minute":
                return days2 * 1440 + milliseconds2 / 6e4;
              case "second":
                return days2 * 86400 + milliseconds2 / 1e3;
              case "millisecond":
                return Math.floor(days2 * 864e5) + milliseconds2;
              default:
                throw new Error("Unknown unit " + units);
            }
          }
        }
        function valueOf$1() {
          if (!this.isValid()) {
            return NaN;
          }
          return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
        }
        function makeAs(alias) {
          return function() {
            return this.as(alias);
          };
        }
        var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
        function clone$1() {
          return createDuration(this);
        }
        function get$2(units) {
          units = normalizeUnits(units);
          return this.isValid() ? this[units + "s"]() : NaN;
        }
        function makeGetter(name) {
          return function() {
            return this.isValid() ? this._data[name] : NaN;
          };
        }
        var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
        function weeks() {
          return absFloor(this.days() / 7);
        }
        var round2 = Math.round, thresholds = {
          ss: 44,
          // a few seconds to seconds
          s: 45,
          // seconds to minute
          m: 45,
          // minutes to hour
          h: 22,
          // hours to day
          d: 26,
          // days to month/week
          w: null,
          // weeks to month
          M: 11
          // months to year
        };
        function substituteTimeAgo(string2, number2, withoutSuffix, isFuture, locale2) {
          return locale2.relativeTime(number2 || 1, !!withoutSuffix, string2, isFuture);
        }
        function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
          var duration = createDuration(posNegDuration).abs(), seconds2 = round2(duration.as("s")), minutes2 = round2(duration.as("m")), hours2 = round2(duration.as("h")), days2 = round2(duration.as("d")), months2 = round2(duration.as("M")), weeks2 = round2(duration.as("w")), years2 = round2(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
          if (thresholds2.w != null) {
            a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
          }
          a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
          a[2] = withoutSuffix;
          a[3] = +posNegDuration > 0;
          a[4] = locale2;
          return substituteTimeAgo.apply(null, a);
        }
        function getSetRelativeTimeRounding(roundingFunction) {
          if (roundingFunction === void 0) {
            return round2;
          }
          if (typeof roundingFunction === "function") {
            round2 = roundingFunction;
            return true;
          }
          return false;
        }
        function getSetRelativeTimeThreshold(threshold, limit) {
          if (thresholds[threshold] === void 0) {
            return false;
          }
          if (limit === void 0) {
            return thresholds[threshold];
          }
          thresholds[threshold] = limit;
          if (threshold === "s") {
            thresholds.ss = limit - 1;
          }
          return true;
        }
        function humanize(argWithSuffix, argThresholds) {
          if (!this.isValid()) {
            return this.localeData().invalidDate();
          }
          var withSuffix = false, th = thresholds, locale2, output;
          if (typeof argWithSuffix === "object") {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
          }
          if (typeof argWithSuffix === "boolean") {
            withSuffix = argWithSuffix;
          }
          if (typeof argThresholds === "object") {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
              th.ss = argThresholds.s - 1;
            }
          }
          locale2 = this.localeData();
          output = relativeTime$1(this, !withSuffix, th, locale2);
          if (withSuffix) {
            output = locale2.pastFuture(+this, output);
          }
          return locale2.postformat(output);
        }
        var abs$1 = Math.abs;
        function sign(x) {
          return (x > 0) - (x < 0) || +x;
        }
        function toISOString$1() {
          if (!this.isValid()) {
            return this.localeData().invalidDate();
          }
          var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
          if (!total) {
            return "P0D";
          }
          minutes2 = absFloor(seconds2 / 60);
          hours2 = absFloor(minutes2 / 60);
          seconds2 %= 60;
          minutes2 %= 60;
          years2 = absFloor(months2 / 12);
          months2 %= 12;
          s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
          totalSign = total < 0 ? "-" : "";
          ymSign = sign(this._months) !== sign(total) ? "-" : "";
          daysSign = sign(this._days) !== sign(total) ? "-" : "";
          hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
          return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
        }
        var proto$2 = Duration.prototype;
        proto$2.isValid = isValid$1;
        proto$2.abs = abs2;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asQuarters = asQuarters;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;
        proto$2.toIsoString = deprecate2(
          "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
          toISOString$1
        );
        proto$2.lang = lang;
        addFormatToken("X", 0, 0, "unix");
        addFormatToken("x", 0, 0, "valueOf");
        addRegexToken("x", matchSigned);
        addRegexToken("X", matchTimestamp);
        addParseToken("X", function(input, array2, config) {
          config._d = new Date(parseFloat(input) * 1e3);
        });
        addParseToken("x", function(input, array2, config) {
          config._d = new Date(toInt(input));
        });
        hooks.version = "2.29.4";
        setHookCallback(createLocal);
        hooks.fn = proto;
        hooks.min = min2;
        hooks.max = max2;
        hooks.now = now3;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate2;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;
        hooks.HTML5_FMT = {
          DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
          // <input type="datetime-local" />
          DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
          // <input type="datetime-local" step="1" />
          DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
          // <input type="datetime-local" step="0.001" />
          DATE: "YYYY-MM-DD",
          // <input type="date" />
          TIME: "HH:mm",
          // <input type="time" />
          TIME_SECONDS: "HH:mm:ss",
          // <input type="time" step="1" />
          TIME_MS: "HH:mm:ss.SSS",
          // <input type="time" step="0.001" />
          WEEK: "GGGG-[W]WW",
          // <input type="week" />
          MONTH: "YYYY-MM"
          // <input type="month" />
        };
        return hooks;
      });
    })(moment$4);
    return momentExports$1;
  }
  (function(module, exports) {
    (function(global2, factory) {
      typeof commonjsRequire === "function" ? factory(requireMoment()) : factory(global2.moment);
    })(commonjsGlobal, function(moment2) {
      function processRelativeTime(number2, withoutSuffix, key, isFuture) {
        var format = {
          m: ["eine Minute", "einer Minute"],
          h: ["eine Stunde", "einer Stunde"],
          d: ["ein Tag", "einem Tag"],
          dd: [number2 + " Tage", number2 + " Tagen"],
          w: ["eine Woche", "einer Woche"],
          M: ["ein Monat", "einem Monat"],
          MM: [number2 + " Monate", number2 + " Monaten"],
          y: ["ein Jahr", "einem Jahr"],
          yy: [number2 + " Jahre", number2 + " Jahren"]
        };
        return withoutSuffix ? format[key][0] : format[key][1];
      }
      var de2 = moment2.defineLocale("de", {
        months: "Januar_Februar_M\xE4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split(
          "_"
        ),
        monthsShort: "Jan._Feb._M\xE4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
        monthsParseExact: true,
        weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split(
          "_"
        ),
        weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY HH:mm",
          LLLL: "dddd, D. MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[heute um] LT [Uhr]",
          sameElse: "L",
          nextDay: "[morgen um] LT [Uhr]",
          nextWeek: "dddd [um] LT [Uhr]",
          lastDay: "[gestern um] LT [Uhr]",
          lastWeek: "[letzten] dddd [um] LT [Uhr]"
        },
        relativeTime: {
          future: "in %s",
          past: "vor %s",
          s: "ein paar Sekunden",
          ss: "%d Sekunden",
          m: processRelativeTime,
          mm: "%d Minuten",
          h: processRelativeTime,
          hh: "%d Stunden",
          d: processRelativeTime,
          dd: processRelativeTime,
          w: processRelativeTime,
          ww: "%d Wochen",
          M: processRelativeTime,
          MM: processRelativeTime,
          y: processRelativeTime,
          yy: processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          // Monday is the first day of the week.
          doy: 4
          // The week that contains Jan 4th is the first week of the year.
        }
      });
      return de2;
    });
  })();
  (function(module, exports) {
    (function(global2, factory) {
      typeof commonjsRequire === "function" ? factory(requireMoment()) : factory(global2.moment);
    })(commonjsGlobal, function(moment2) {
      var monthsShortDot = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split(
        "_"
      ), monthsShort = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), monthsParse = [
        /^ene/i,
        /^feb/i,
        /^mar/i,
        /^abr/i,
        /^may/i,
        /^jun/i,
        /^jul/i,
        /^ago/i,
        /^sep/i,
        /^oct/i,
        /^nov/i,
        /^dic/i
      ], monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
      var es2 = moment2.defineLocale("es", {
        months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split(
          "_"
        ),
        monthsShort: function(m, format) {
          if (!m) {
            return monthsShortDot;
          } else if (/-MMM-/.test(format)) {
            return monthsShort[m.month()];
          } else {
            return monthsShortDot[m.month()];
          }
        },
        monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: "domingo_lunes_martes_mi\xE9rcoles_jueves_viernes_s\xE1bado".split("_"),
        weekdaysShort: "dom._lun._mar._mi\xE9._jue._vie._s\xE1b.".split("_"),
        weekdaysMin: "do_lu_ma_mi_ju_vi_s\xE1".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [de] YYYY",
          LLL: "D [de] MMMM [de] YYYY H:mm",
          LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
        },
        calendar: {
          sameDay: function() {
            return "[hoy a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
          },
          nextDay: function() {
            return "[ma\xF1ana a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
          },
          nextWeek: function() {
            return "dddd [a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
          },
          lastDay: function() {
            return "[ayer a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
          },
          lastWeek: function() {
            return "[el] dddd [pasado a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "en %s",
          past: "hace %s",
          s: "unos segundos",
          ss: "%d segundos",
          m: "un minuto",
          mm: "%d minutos",
          h: "una hora",
          hh: "%d horas",
          d: "un d\xEDa",
          dd: "%d d\xEDas",
          w: "una semana",
          ww: "%d semanas",
          M: "un mes",
          MM: "%d meses",
          y: "un a\xF1o",
          yy: "%d a\xF1os"
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: "%d\xBA",
        week: {
          dow: 1,
          // Monday is the first day of the week.
          doy: 4
          // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: "Fecha inv\xE1lida"
      });
      return es2;
    });
  })();
  (function(module, exports) {
    (function(global2, factory) {
      typeof commonjsRequire === "function" ? factory(requireMoment()) : factory(global2.moment);
    })(commonjsGlobal, function(moment2) {
      var monthsStrictRegex = /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i, monthsShortStrictRegex = /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i, monthsRegex = /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i, monthsParse = [
        /^janv/i,
        /^févr/i,
        /^mars/i,
        /^avr/i,
        /^mai/i,
        /^juin/i,
        /^juil/i,
        /^août/i,
        /^sept/i,
        /^oct/i,
        /^nov/i,
        /^déc/i
      ];
      var fr2 = moment2.defineLocale("fr", {
        months: "janvier_f\xE9vrier_mars_avril_mai_juin_juillet_ao\xFBt_septembre_octobre_novembre_d\xE9cembre".split(
          "_"
        ),
        monthsShort: "janv._f\xE9vr._mars_avr._mai_juin_juil._ao\xFBt_sept._oct._nov._d\xE9c.".split(
          "_"
        ),
        monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex,
        monthsShortStrictRegex,
        monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Aujourd\u2019hui \xE0] LT",
          nextDay: "[Demain \xE0] LT",
          nextWeek: "dddd [\xE0] LT",
          lastDay: "[Hier \xE0] LT",
          lastWeek: "dddd [dernier \xE0] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dans %s",
          past: "il y a %s",
          s: "quelques secondes",
          ss: "%d secondes",
          m: "une minute",
          mm: "%d minutes",
          h: "une heure",
          hh: "%d heures",
          d: "un jour",
          dd: "%d jours",
          w: "une semaine",
          ww: "%d semaines",
          M: "un mois",
          MM: "%d mois",
          y: "un an",
          yy: "%d ans"
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal: function(number2, period) {
          switch (period) {
            case "D":
              return number2 + (number2 === 1 ? "er" : "");
            default:
            case "M":
            case "Q":
            case "DDD":
            case "d":
              return number2 + (number2 === 1 ? "er" : "e");
            case "w":
            case "W":
              return number2 + (number2 === 1 ? "re" : "e");
          }
        },
        week: {
          dow: 1,
          // Monday is the first day of the week.
          doy: 4
          // The week that contains Jan 4th is the first week of the year.
        }
      });
      return fr2;
    });
  })();
  (function(module, exports) {
    (function(global2, factory) {
      typeof commonjsRequire === "function" ? factory(requireMoment()) : factory(global2.moment);
    })(commonjsGlobal, function(moment2) {
      var it2 = moment2.defineLocale("it", {
        months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split(
          "_"
        ),
        monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
        weekdays: "domenica_luned\xEC_marted\xEC_mercoled\xEC_gioved\xEC_venerd\xEC_sabato".split(
          "_"
        ),
        weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"),
        weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: function() {
            return "[Oggi a" + (this.hours() > 1 ? "lle " : this.hours() === 0 ? " " : "ll'") + "]LT";
          },
          nextDay: function() {
            return "[Domani a" + (this.hours() > 1 ? "lle " : this.hours() === 0 ? " " : "ll'") + "]LT";
          },
          nextWeek: function() {
            return "dddd [a" + (this.hours() > 1 ? "lle " : this.hours() === 0 ? " " : "ll'") + "]LT";
          },
          lastDay: function() {
            return "[Ieri a" + (this.hours() > 1 ? "lle " : this.hours() === 0 ? " " : "ll'") + "]LT";
          },
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[La scorsa] dddd [a" + (this.hours() > 1 ? "lle " : this.hours() === 0 ? " " : "ll'") + "]LT";
              default:
                return "[Lo scorso] dddd [a" + (this.hours() > 1 ? "lle " : this.hours() === 0 ? " " : "ll'") + "]LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "tra %s",
          past: "%s fa",
          s: "alcuni secondi",
          ss: "%d secondi",
          m: "un minuto",
          mm: "%d minuti",
          h: "un'ora",
          hh: "%d ore",
          d: "un giorno",
          dd: "%d giorni",
          w: "una settimana",
          ww: "%d settimane",
          M: "un mese",
          MM: "%d mesi",
          y: "un anno",
          yy: "%d anni"
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: "%d\xBA",
        week: {
          dow: 1,
          // Monday is the first day of the week.
          doy: 4
          // The week that contains Jan 4th is the first week of the year.
        }
      });
      return it2;
    });
  })();
  (function(module, exports) {
    (function(global2, factory) {
      typeof commonjsRequire === "function" ? factory(requireMoment()) : factory(global2.moment);
    })(commonjsGlobal, function(moment2) {
      var ja2 = moment2.defineLocale("ja", {
        eras: [
          {
            since: "2019-05-01",
            offset: 1,
            name: "\u4EE4\u548C",
            narrow: "\u32FF",
            abbr: "R"
          },
          {
            since: "1989-01-08",
            until: "2019-04-30",
            offset: 1,
            name: "\u5E73\u6210",
            narrow: "\u337B",
            abbr: "H"
          },
          {
            since: "1926-12-25",
            until: "1989-01-07",
            offset: 1,
            name: "\u662D\u548C",
            narrow: "\u337C",
            abbr: "S"
          },
          {
            since: "1912-07-30",
            until: "1926-12-24",
            offset: 1,
            name: "\u5927\u6B63",
            narrow: "\u337D",
            abbr: "T"
          },
          {
            since: "1873-01-01",
            until: "1912-07-29",
            offset: 6,
            name: "\u660E\u6CBB",
            narrow: "\u337E",
            abbr: "M"
          },
          {
            since: "0001-01-01",
            until: "1873-12-31",
            offset: 1,
            name: "\u897F\u66A6",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "\u7D00\u5143\u524D",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        eraYearOrdinalRegex: /(元|\d+)年/,
        eraYearOrdinalParse: function(input, match2) {
          return match2[1] === "\u5143" ? 1 : parseInt(match2[1] || input, 10);
        },
        months: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),
        monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split(
          "_"
        ),
        weekdays: "\u65E5\u66DC\u65E5_\u6708\u66DC\u65E5_\u706B\u66DC\u65E5_\u6C34\u66DC\u65E5_\u6728\u66DC\u65E5_\u91D1\u66DC\u65E5_\u571F\u66DC\u65E5".split("_"),
        weekdaysShort: "\u65E5_\u6708_\u706B_\u6C34_\u6728_\u91D1_\u571F".split("_"),
        weekdaysMin: "\u65E5_\u6708_\u706B_\u6C34_\u6728_\u91D1_\u571F".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "YYYY/MM/DD",
          LL: "YYYY\u5E74M\u6708D\u65E5",
          LLL: "YYYY\u5E74M\u6708D\u65E5 HH:mm",
          LLLL: "YYYY\u5E74M\u6708D\u65E5 dddd HH:mm",
          l: "YYYY/MM/DD",
          ll: "YYYY\u5E74M\u6708D\u65E5",
          lll: "YYYY\u5E74M\u6708D\u65E5 HH:mm",
          llll: "YYYY\u5E74M\u6708D\u65E5(ddd) HH:mm"
        },
        meridiemParse: /午前|午後/i,
        isPM: function(input) {
          return input === "\u5348\u5F8C";
        },
        meridiem: function(hour, minute, isLower) {
          if (hour < 12) {
            return "\u5348\u524D";
          } else {
            return "\u5348\u5F8C";
          }
        },
        calendar: {
          sameDay: "[\u4ECA\u65E5] LT",
          nextDay: "[\u660E\u65E5] LT",
          nextWeek: function(now3) {
            if (now3.week() !== this.week()) {
              return "[\u6765\u9031]dddd LT";
            } else {
              return "dddd LT";
            }
          },
          lastDay: "[\u6628\u65E5] LT",
          lastWeek: function(now3) {
            if (this.week() !== now3.week()) {
              return "[\u5148\u9031]dddd LT";
            } else {
              return "dddd LT";
            }
          },
          sameElse: "L"
        },
        dayOfMonthOrdinalParse: /\d{1,2}日/,
        ordinal: function(number2, period) {
          switch (period) {
            case "y":
              return number2 === 1 ? "\u5143\u5E74" : number2 + "\u5E74";
            case "d":
            case "D":
            case "DDD":
              return number2 + "\u65E5";
            default:
              return number2;
          }
        },
        relativeTime: {
          future: "%s\u5F8C",
          past: "%s\u524D",
          s: "\u6570\u79D2",
          ss: "%d\u79D2",
          m: "1\u5206",
          mm: "%d\u5206",
          h: "1\u6642\u9593",
          hh: "%d\u6642\u9593",
          d: "1\u65E5",
          dd: "%d\u65E5",
          M: "1\u30F6\u6708",
          MM: "%d\u30F6\u6708",
          y: "1\u5E74",
          yy: "%d\u5E74"
        }
      });
      return ja2;
    });
  })();
  (function(module, exports) {
    (function(global2, factory) {
      typeof commonjsRequire === "function" ? factory(requireMoment()) : factory(global2.moment);
    })(commonjsGlobal, function(moment2) {
      var monthsShortWithDots = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), monthsShortWithoutDots = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), monthsParse = [
        /^jan/i,
        /^feb/i,
        /^maart|mrt.?$/i,
        /^apr/i,
        /^mei$/i,
        /^jun[i.]?$/i,
        /^jul[i.]?$/i,
        /^aug/i,
        /^sep/i,
        /^okt/i,
        /^nov/i,
        /^dec/i
      ], monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
      var nl2 = moment2.defineLocale("nl", {
        months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split(
          "_"
        ),
        monthsShort: function(m, format) {
          if (!m) {
            return monthsShortWithDots;
          } else if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
          } else {
            return monthsShortWithDots[m.month()];
          }
        },
        monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
        monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
        weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
        weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD-MM-YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[vandaag om] LT",
          nextDay: "[morgen om] LT",
          nextWeek: "dddd [om] LT",
          lastDay: "[gisteren om] LT",
          lastWeek: "[afgelopen] dddd [om] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "over %s",
          past: "%s geleden",
          s: "een paar seconden",
          ss: "%d seconden",
          m: "\xE9\xE9n minuut",
          mm: "%d minuten",
          h: "\xE9\xE9n uur",
          hh: "%d uur",
          d: "\xE9\xE9n dag",
          dd: "%d dagen",
          w: "\xE9\xE9n week",
          ww: "%d weken",
          M: "\xE9\xE9n maand",
          MM: "%d maanden",
          y: "\xE9\xE9n jaar",
          yy: "%d jaar"
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(number2) {
          return number2 + (number2 === 1 || number2 === 8 || number2 >= 20 ? "ste" : "de");
        },
        week: {
          dow: 1,
          // Monday is the first day of the week.
          doy: 4
          // The week that contains Jan 4th is the first week of the year.
        }
      });
      return nl2;
    });
  })();
  (function(module, exports) {
    (function(global2, factory) {
      typeof commonjsRequire === "function" ? factory(requireMoment()) : factory(global2.moment);
    })(commonjsGlobal, function(moment2) {
      var monthsNominative = "stycze\u0144_luty_marzec_kwiecie\u0144_maj_czerwiec_lipiec_sierpie\u0144_wrzesie\u0144_pa\u017Adziernik_listopad_grudzie\u0144".split(
        "_"
      ), monthsSubjective = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrze\u015Bnia_pa\u017Adziernika_listopada_grudnia".split(
        "_"
      ), monthsParse = [
        /^sty/i,
        /^lut/i,
        /^mar/i,
        /^kwi/i,
        /^maj/i,
        /^cze/i,
        /^lip/i,
        /^sie/i,
        /^wrz/i,
        /^paź/i,
        /^lis/i,
        /^gru/i
      ];
      function plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
      }
      function translate(number2, withoutSuffix, key) {
        var result = number2 + " ";
        switch (key) {
          case "ss":
            return result + (plural(number2) ? "sekundy" : "sekund");
          case "m":
            return withoutSuffix ? "minuta" : "minut\u0119";
          case "mm":
            return result + (plural(number2) ? "minuty" : "minut");
          case "h":
            return withoutSuffix ? "godzina" : "godzin\u0119";
          case "hh":
            return result + (plural(number2) ? "godziny" : "godzin");
          case "ww":
            return result + (plural(number2) ? "tygodnie" : "tygodni");
          case "MM":
            return result + (plural(number2) ? "miesi\u0105ce" : "miesi\u0119cy");
          case "yy":
            return result + (plural(number2) ? "lata" : "lat");
        }
      }
      var pl2 = moment2.defineLocale("pl", {
        months: function(momentToFormat, format) {
          if (!momentToFormat) {
            return monthsNominative;
          } else if (/D MMMM/.test(format)) {
            return monthsSubjective[momentToFormat.month()];
          } else {
            return monthsNominative[momentToFormat.month()];
          }
        },
        monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_pa\u017A_lis_gru".split("_"),
        monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: "niedziela_poniedzia\u0142ek_wtorek_\u015Broda_czwartek_pi\u0105tek_sobota".split("_"),
        weekdaysShort: "ndz_pon_wt_\u015Br_czw_pt_sob".split("_"),
        weekdaysMin: "Nd_Pn_Wt_\u015Ar_Cz_Pt_So".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Dzi\u015B o] LT",
          nextDay: "[Jutro o] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[W niedziel\u0119 o] LT";
              case 2:
                return "[We wtorek o] LT";
              case 3:
                return "[W \u015Brod\u0119 o] LT";
              case 6:
                return "[W sobot\u0119 o] LT";
              default:
                return "[W] dddd [o] LT";
            }
          },
          lastDay: "[Wczoraj o] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[W zesz\u0142\u0105 niedziel\u0119 o] LT";
              case 3:
                return "[W zesz\u0142\u0105 \u015Brod\u0119 o] LT";
              case 6:
                return "[W zesz\u0142\u0105 sobot\u0119 o] LT";
              default:
                return "[W zesz\u0142y] dddd [o] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "%s temu",
          s: "kilka sekund",
          ss: translate,
          m: translate,
          mm: translate,
          h: translate,
          hh: translate,
          d: "1 dzie\u0144",
          dd: "%d dni",
          w: "tydzie\u0144",
          ww: translate,
          M: "miesi\u0105c",
          MM: translate,
          y: "rok",
          yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          // Monday is the first day of the week.
          doy: 4
          // The week that contains Jan 4th is the first week of the year.
        }
      });
      return pl2;
    });
  })();
  (function(module, exports) {
    (function(global2, factory) {
      typeof commonjsRequire === "function" ? factory(requireMoment()) : factory(global2.moment);
    })(commonjsGlobal, function(moment2) {
      function plural(word, num) {
        var forms = word.split("_");
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
      }
      function relativeTimeWithPlural(number2, withoutSuffix, key) {
        var format = {
          ss: withoutSuffix ? "\u0441\u0435\u043A\u0443\u043D\u0434\u0430_\u0441\u0435\u043A\u0443\u043D\u0434\u044B_\u0441\u0435\u043A\u0443\u043D\u0434" : "\u0441\u0435\u043A\u0443\u043D\u0434\u0443_\u0441\u0435\u043A\u0443\u043D\u0434\u044B_\u0441\u0435\u043A\u0443\u043D\u0434",
          mm: withoutSuffix ? "\u043C\u0438\u043D\u0443\u0442\u0430_\u043C\u0438\u043D\u0443\u0442\u044B_\u043C\u0438\u043D\u0443\u0442" : "\u043C\u0438\u043D\u0443\u0442\u0443_\u043C\u0438\u043D\u0443\u0442\u044B_\u043C\u0438\u043D\u0443\u0442",
          hh: "\u0447\u0430\u0441_\u0447\u0430\u0441\u0430_\u0447\u0430\u0441\u043E\u0432",
          dd: "\u0434\u0435\u043D\u044C_\u0434\u043D\u044F_\u0434\u043D\u0435\u0439",
          ww: "\u043D\u0435\u0434\u0435\u043B\u044F_\u043D\u0435\u0434\u0435\u043B\u0438_\u043D\u0435\u0434\u0435\u043B\u044C",
          MM: "\u043C\u0435\u0441\u044F\u0446_\u043C\u0435\u0441\u044F\u0446\u0430_\u043C\u0435\u0441\u044F\u0446\u0435\u0432",
          yy: "\u0433\u043E\u0434_\u0433\u043E\u0434\u0430_\u043B\u0435\u0442"
        };
        if (key === "m") {
          return withoutSuffix ? "\u043C\u0438\u043D\u0443\u0442\u0430" : "\u043C\u0438\u043D\u0443\u0442\u0443";
        } else {
          return number2 + " " + plural(format[key], +number2);
        }
      }
      var monthsParse = [
        /^янв/i,
        /^фев/i,
        /^мар/i,
        /^апр/i,
        /^ма[йя]/i,
        /^июн/i,
        /^июл/i,
        /^авг/i,
        /^сен/i,
        /^окт/i,
        /^ноя/i,
        /^дек/i
      ];
      var ru2 = moment2.defineLocale("ru", {
        months: {
          format: "\u044F\u043D\u0432\u0430\u0440\u044F_\u0444\u0435\u0432\u0440\u0430\u043B\u044F_\u043C\u0430\u0440\u0442\u0430_\u0430\u043F\u0440\u0435\u043B\u044F_\u043C\u0430\u044F_\u0438\u044E\u043D\u044F_\u0438\u044E\u043B\u044F_\u0430\u0432\u0433\u0443\u0441\u0442\u0430_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F_\u043E\u043A\u0442\u044F\u0431\u0440\u044F_\u043D\u043E\u044F\u0431\u0440\u044F_\u0434\u0435\u043A\u0430\u0431\u0440\u044F".split(
            "_"
          ),
          standalone: "\u044F\u043D\u0432\u0430\u0440\u044C_\u0444\u0435\u0432\u0440\u0430\u043B\u044C_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0435\u043B\u044C_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C_\u043E\u043A\u0442\u044F\u0431\u0440\u044C_\u043D\u043E\u044F\u0431\u0440\u044C_\u0434\u0435\u043A\u0430\u0431\u0440\u044C".split(
            "_"
          )
        },
        monthsShort: {
          // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
          format: "\u044F\u043D\u0432._\u0444\u0435\u0432\u0440._\u043C\u0430\u0440._\u0430\u043F\u0440._\u043C\u0430\u044F_\u0438\u044E\u043D\u044F_\u0438\u044E\u043B\u044F_\u0430\u0432\u0433._\u0441\u0435\u043D\u0442._\u043E\u043A\u0442._\u043D\u043E\u044F\u0431._\u0434\u0435\u043A.".split(
            "_"
          ),
          standalone: "\u044F\u043D\u0432._\u0444\u0435\u0432\u0440._\u043C\u0430\u0440\u0442_\u0430\u043F\u0440._\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433._\u0441\u0435\u043D\u0442._\u043E\u043A\u0442._\u043D\u043E\u044F\u0431._\u0434\u0435\u043A.".split(
            "_"
          )
        },
        weekdays: {
          standalone: "\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043F\u044F\u0442\u043D\u0438\u0446\u0430_\u0441\u0443\u0431\u0431\u043E\u0442\u0430".split(
            "_"
          ),
          format: "\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043F\u044F\u0442\u043D\u0438\u0446\u0443_\u0441\u0443\u0431\u0431\u043E\u0442\u0443".split(
            "_"
          ),
          isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/
        },
        weekdaysShort: "\u0432\u0441_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431".split("_"),
        weekdaysMin: "\u0432\u0441_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431".split("_"),
        monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
        // копия предыдущего
        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
        // полные названия с падежами
        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
        // Выражение, которое соответствует только сокращённым формам
        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY \u0433.",
          LLL: "D MMMM YYYY \u0433., H:mm",
          LLLL: "dddd, D MMMM YYYY \u0433., H:mm"
        },
        calendar: {
          sameDay: "[\u0421\u0435\u0433\u043E\u0434\u043D\u044F, \u0432] LT",
          nextDay: "[\u0417\u0430\u0432\u0442\u0440\u0430, \u0432] LT",
          lastDay: "[\u0412\u0447\u0435\u0440\u0430, \u0432] LT",
          nextWeek: function(now3) {
            if (now3.week() !== this.week()) {
              switch (this.day()) {
                case 0:
                  return "[\u0412 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0435] dddd, [\u0432] LT";
                case 1:
                case 2:
                case 4:
                  return "[\u0412 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439] dddd, [\u0432] LT";
                case 3:
                case 5:
                case 6:
                  return "[\u0412 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E] dddd, [\u0432] LT";
              }
            } else {
              if (this.day() === 2) {
                return "[\u0412\u043E] dddd, [\u0432] LT";
              } else {
                return "[\u0412] dddd, [\u0432] LT";
              }
            }
          },
          lastWeek: function(now3) {
            if (now3.week() !== this.week()) {
              switch (this.day()) {
                case 0:
                  return "[\u0412 \u043F\u0440\u043E\u0448\u043B\u043E\u0435] dddd, [\u0432] LT";
                case 1:
                case 2:
                case 4:
                  return "[\u0412 \u043F\u0440\u043E\u0448\u043B\u044B\u0439] dddd, [\u0432] LT";
                case 3:
                case 5:
                case 6:
                  return "[\u0412 \u043F\u0440\u043E\u0448\u043B\u0443\u044E] dddd, [\u0432] LT";
              }
            } else {
              if (this.day() === 2) {
                return "[\u0412\u043E] dddd, [\u0432] LT";
              } else {
                return "[\u0412] dddd, [\u0432] LT";
              }
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "\u0447\u0435\u0440\u0435\u0437 %s",
          past: "%s \u043D\u0430\u0437\u0430\u0434",
          s: "\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434",
          ss: relativeTimeWithPlural,
          m: relativeTimeWithPlural,
          mm: relativeTimeWithPlural,
          h: "\u0447\u0430\u0441",
          hh: relativeTimeWithPlural,
          d: "\u0434\u0435\u043D\u044C",
          dd: relativeTimeWithPlural,
          w: "\u043D\u0435\u0434\u0435\u043B\u044F",
          ww: relativeTimeWithPlural,
          M: "\u043C\u0435\u0441\u044F\u0446",
          MM: relativeTimeWithPlural,
          y: "\u0433\u043E\u0434",
          yy: relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function(input) {
          return /^(дня|вечера)$/.test(input);
        },
        meridiem: function(hour, minute, isLower) {
          if (hour < 4) {
            return "\u043D\u043E\u0447\u0438";
          } else if (hour < 12) {
            return "\u0443\u0442\u0440\u0430";
          } else if (hour < 17) {
            return "\u0434\u043D\u044F";
          } else {
            return "\u0432\u0435\u0447\u0435\u0440\u0430";
          }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function(number2, period) {
          switch (period) {
            case "M":
            case "d":
            case "DDD":
              return number2 + "-\u0439";
            case "D":
              return number2 + "-\u0433\u043E";
            case "w":
            case "W":
              return number2 + "-\u044F";
            default:
              return number2;
          }
        },
        week: {
          dow: 1,
          // Monday is the first day of the week.
          doy: 4
          // The week that contains Jan 4th is the first week of the year.
        }
      });
      return ru2;
    });
  })();
  (function(module, exports) {
    (function(global2, factory) {
      typeof commonjsRequire === "function" ? factory(requireMoment()) : factory(global2.moment);
    })(commonjsGlobal, function(moment2) {
      function plural(word, num) {
        var forms = word.split("_");
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
      }
      function relativeTimeWithPlural(number2, withoutSuffix, key) {
        var format = {
          ss: withoutSuffix ? "\u0441\u0435\u043A\u0443\u043D\u0434\u0430_\u0441\u0435\u043A\u0443\u043D\u0434\u0438_\u0441\u0435\u043A\u0443\u043D\u0434" : "\u0441\u0435\u043A\u0443\u043D\u0434\u0443_\u0441\u0435\u043A\u0443\u043D\u0434\u0438_\u0441\u0435\u043A\u0443\u043D\u0434",
          mm: withoutSuffix ? "\u0445\u0432\u0438\u043B\u0438\u043D\u0430_\u0445\u0432\u0438\u043B\u0438\u043D\u0438_\u0445\u0432\u0438\u043B\u0438\u043D" : "\u0445\u0432\u0438\u043B\u0438\u043D\u0443_\u0445\u0432\u0438\u043B\u0438\u043D\u0438_\u0445\u0432\u0438\u043B\u0438\u043D",
          hh: withoutSuffix ? "\u0433\u043E\u0434\u0438\u043D\u0430_\u0433\u043E\u0434\u0438\u043D\u0438_\u0433\u043E\u0434\u0438\u043D" : "\u0433\u043E\u0434\u0438\u043D\u0443_\u0433\u043E\u0434\u0438\u043D\u0438_\u0433\u043E\u0434\u0438\u043D",
          dd: "\u0434\u0435\u043D\u044C_\u0434\u043D\u0456_\u0434\u043D\u0456\u0432",
          MM: "\u043C\u0456\u0441\u044F\u0446\u044C_\u043C\u0456\u0441\u044F\u0446\u0456_\u043C\u0456\u0441\u044F\u0446\u0456\u0432",
          yy: "\u0440\u0456\u043A_\u0440\u043E\u043A\u0438_\u0440\u043E\u043A\u0456\u0432"
        };
        if (key === "m") {
          return withoutSuffix ? "\u0445\u0432\u0438\u043B\u0438\u043D\u0430" : "\u0445\u0432\u0438\u043B\u0438\u043D\u0443";
        } else if (key === "h") {
          return withoutSuffix ? "\u0433\u043E\u0434\u0438\u043D\u0430" : "\u0433\u043E\u0434\u0438\u043D\u0443";
        } else {
          return number2 + " " + plural(format[key], +number2);
        }
      }
      function weekdaysCaseReplace(m, format) {
        var weekdays = {
          nominative: "\u043D\u0435\u0434\u0456\u043B\u044F_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0441\u0435\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044F_\u0441\u0443\u0431\u043E\u0442\u0430".split(
            "_"
          ),
          accusative: "\u043D\u0435\u0434\u0456\u043B\u044E_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0441\u0435\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044E_\u0441\u0443\u0431\u043E\u0442\u0443".split(
            "_"
          ),
          genitive: "\u043D\u0435\u0434\u0456\u043B\u0456_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043A\u0430_\u0432\u0456\u0432\u0442\u043E\u0440\u043A\u0430_\u0441\u0435\u0440\u0435\u0434\u0438_\u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u0456_\u0441\u0443\u0431\u043E\u0442\u0438".split(
            "_"
          )
        }, nounCase;
        if (m === true) {
          return weekdays["nominative"].slice(1, 7).concat(weekdays["nominative"].slice(0, 1));
        }
        if (!m) {
          return weekdays["nominative"];
        }
        nounCase = /(\[[ВвУу]\]) ?dddd/.test(format) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format) ? "genitive" : "nominative";
        return weekdays[nounCase][m.day()];
      }
      function processHoursFunction(str) {
        return function() {
          return str + "\u043E" + (this.hours() === 11 ? "\u0431" : "") + "] LT";
        };
      }
      var uk2 = moment2.defineLocale("uk", {
        months: {
          format: "\u0441\u0456\u0447\u043D\u044F_\u043B\u044E\u0442\u043E\u0433\u043E_\u0431\u0435\u0440\u0435\u0437\u043D\u044F_\u043A\u0432\u0456\u0442\u043D\u044F_\u0442\u0440\u0430\u0432\u043D\u044F_\u0447\u0435\u0440\u0432\u043D\u044F_\u043B\u0438\u043F\u043D\u044F_\u0441\u0435\u0440\u043F\u043D\u044F_\u0432\u0435\u0440\u0435\u0441\u043D\u044F_\u0436\u043E\u0432\u0442\u043D\u044F_\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430_\u0433\u0440\u0443\u0434\u043D\u044F".split(
            "_"
          ),
          standalone: "\u0441\u0456\u0447\u0435\u043D\u044C_\u043B\u044E\u0442\u0438\u0439_\u0431\u0435\u0440\u0435\u0437\u0435\u043D\u044C_\u043A\u0432\u0456\u0442\u0435\u043D\u044C_\u0442\u0440\u0430\u0432\u0435\u043D\u044C_\u0447\u0435\u0440\u0432\u0435\u043D\u044C_\u043B\u0438\u043F\u0435\u043D\u044C_\u0441\u0435\u0440\u043F\u0435\u043D\u044C_\u0432\u0435\u0440\u0435\u0441\u0435\u043D\u044C_\u0436\u043E\u0432\u0442\u0435\u043D\u044C_\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434_\u0433\u0440\u0443\u0434\u0435\u043D\u044C".split(
            "_"
          )
        },
        monthsShort: "\u0441\u0456\u0447_\u043B\u044E\u0442_\u0431\u0435\u0440_\u043A\u0432\u0456\u0442_\u0442\u0440\u0430\u0432_\u0447\u0435\u0440\u0432_\u043B\u0438\u043F_\u0441\u0435\u0440\u043F_\u0432\u0435\u0440_\u0436\u043E\u0432\u0442_\u043B\u0438\u0441\u0442_\u0433\u0440\u0443\u0434".split(
          "_"
        ),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: "\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431".split("_"),
        weekdaysMin: "\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY \u0440.",
          LLL: "D MMMM YYYY \u0440., HH:mm",
          LLLL: "dddd, D MMMM YYYY \u0440., HH:mm"
        },
        calendar: {
          sameDay: processHoursFunction("[\u0421\u044C\u043E\u0433\u043E\u0434\u043D\u0456 "),
          nextDay: processHoursFunction("[\u0417\u0430\u0432\u0442\u0440\u0430 "),
          lastDay: processHoursFunction("[\u0412\u0447\u043E\u0440\u0430 "),
          nextWeek: processHoursFunction("[\u0423] dddd ["),
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
              case 5:
              case 6:
                return processHoursFunction("[\u041C\u0438\u043D\u0443\u043B\u043E\u0457] dddd [").call(this);
              case 1:
              case 2:
              case 4:
                return processHoursFunction("[\u041C\u0438\u043D\u0443\u043B\u043E\u0433\u043E] dddd [").call(this);
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "\u0437\u0430 %s",
          past: "%s \u0442\u043E\u043C\u0443",
          s: "\u0434\u0435\u043A\u0456\u043B\u044C\u043A\u0430 \u0441\u0435\u043A\u0443\u043D\u0434",
          ss: relativeTimeWithPlural,
          m: relativeTimeWithPlural,
          mm: relativeTimeWithPlural,
          h: "\u0433\u043E\u0434\u0438\u043D\u0443",
          hh: relativeTimeWithPlural,
          d: "\u0434\u0435\u043D\u044C",
          dd: relativeTimeWithPlural,
          M: "\u043C\u0456\u0441\u044F\u0446\u044C",
          MM: relativeTimeWithPlural,
          y: "\u0440\u0456\u043A",
          yy: relativeTimeWithPlural
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function(input) {
          return /^(дня|вечора)$/.test(input);
        },
        meridiem: function(hour, minute, isLower) {
          if (hour < 4) {
            return "\u043D\u043E\u0447\u0456";
          } else if (hour < 12) {
            return "\u0440\u0430\u043D\u043A\u0443";
          } else if (hour < 17) {
            return "\u0434\u043D\u044F";
          } else {
            return "\u0432\u0435\u0447\u043E\u0440\u0430";
          }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
        ordinal: function(number2, period) {
          switch (period) {
            case "M":
            case "d":
            case "DDD":
            case "w":
            case "W":
              return number2 + "-\u0439";
            case "D":
              return number2 + "-\u0433\u043E";
            default:
              return number2;
          }
        },
        week: {
          dow: 1,
          // Monday is the first day of the week.
          doy: 7
          // The week that contains Jan 7th is the first week of the year.
        }
      });
      return uk2;
    });
  })();
  var fromExports$2 = {};
  var from$7 = {
    get exports() {
      return fromExports$2;
    },
    set exports(v) {
      fromExports$2 = v;
    }
  };
  var fails$x = function(exec2) {
    try {
      return !!exec2();
    } catch (error) {
      return true;
    }
  };
  var fails$w = fails$x;
  var functionBindNative = !fails$w(function() {
    var test2 = function() {
    }.bind();
    return typeof test2 != "function" || test2.hasOwnProperty("prototype");
  });
  var NATIVE_BIND$4 = functionBindNative;
  var FunctionPrototype$3 = Function.prototype;
  var call$k = FunctionPrototype$3.call;
  var uncurryThisWithBind = NATIVE_BIND$4 && FunctionPrototype$3.bind.bind(call$k, call$k);
  var functionUncurryThis = NATIVE_BIND$4 ? uncurryThisWithBind : function(fn) {
    return function() {
      return call$k.apply(fn, arguments);
    };
  };
  var ceil = Math.ceil;
  var floor$1 = Math.floor;
  var mathTrunc = Math.trunc || function trunc(x) {
    var n = +x;
    return (n > 0 ? floor$1 : ceil)(n);
  };
  var trunc2 = mathTrunc;
  var toIntegerOrInfinity$5 = function(argument) {
    var number2 = +argument;
    return number2 !== number2 || number2 === 0 ? 0 : trunc2(number2);
  };
  var check = function(it2) {
    return it2 && it2.Math == Math && it2;
  };
  var global$o = (
    // eslint-disable-next-line es/no-global-this -- safe
    check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    check(typeof self == "object" && self) || check(typeof commonjsGlobal == "object" && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
    function() {
      return this;
    }() || Function("return this")()
  );
  var sharedExports = {};
  var shared$7 = {
    get exports() {
      return sharedExports;
    },
    set exports(v) {
      sharedExports = v;
    }
  };
  var isPure = true;
  var global$n = global$o;
  var defineProperty$f = Object.defineProperty;
  var defineGlobalProperty$1 = function(key, value) {
    try {
      defineProperty$f(global$n, key, { value, configurable: true, writable: true });
    } catch (error) {
      global$n[key] = value;
    }
    return value;
  };
  var global$m = global$o;
  var defineGlobalProperty = defineGlobalProperty$1;
  var SHARED = "__core-js_shared__";
  var store$3 = global$m[SHARED] || defineGlobalProperty(SHARED, {});
  var sharedStore = store$3;
  var store$2 = sharedStore;
  (shared$7.exports = function(key, value) {
    return store$2[key] || (store$2[key] = value !== void 0 ? value : {});
  })("versions", []).push({
    version: "3.29.0",
    mode: "pure",
    copyright: "\xA9 2014-2023 Denis Pushkarev (zloirock.ru)",
    license: "https://github.com/zloirock/core-js/blob/v3.29.0/LICENSE",
    source: "https://github.com/zloirock/core-js"
  });
  var isNullOrUndefined$5 = function(it2) {
    return it2 === null || it2 === void 0;
  };
  var isNullOrUndefined$4 = isNullOrUndefined$5;
  var $TypeError$h = TypeError;
  var requireObjectCoercible$6 = function(it2) {
    if (isNullOrUndefined$4(it2))
      throw $TypeError$h("Can't call method on " + it2);
    return it2;
  };
  var requireObjectCoercible$5 = requireObjectCoercible$6;
  var $Object$4 = Object;
  var toObject$e = function(argument) {
    return $Object$4(requireObjectCoercible$5(argument));
  };
  var uncurryThis$x = functionUncurryThis;
  var toObject$d = toObject$e;
  var hasOwnProperty = uncurryThis$x({}.hasOwnProperty);
  var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it2, key) {
    return hasOwnProperty(toObject$d(it2), key);
  };
  var uncurryThis$w = functionUncurryThis;
  var id$1 = 0;
  var postfix = Math.random();
  var toString$e = uncurryThis$w(1 .toString);
  var uid$4 = function(key) {
    return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString$e(++id$1 + postfix, 36);
  };
  var engineUserAgent = typeof navigator != "undefined" && String(navigator.userAgent) || "";
  var global$l = global$o;
  var userAgent$5 = engineUserAgent;
  var process$4 = global$l.process;
  var Deno$1 = global$l.Deno;
  var versions = process$4 && process$4.versions || Deno$1 && Deno$1.version;
  var v8 = versions && versions.v8;
  var match;
  var version;
  if (v8) {
    match = v8.split(".");
    version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
  }
  if (!version && userAgent$5) {
    match = userAgent$5.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
      match = userAgent$5.match(/Chrome\/(\d+)/);
      if (match)
        version = +match[1];
    }
  }
  var engineV8Version = version;
  var V8_VERSION$3 = engineV8Version;
  var fails$v = fails$x;
  var symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$v(function() {
    var symbol2 = Symbol();
    return !String(symbol2) || !(Object(symbol2) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION$3 && V8_VERSION$3 < 41;
  });
  var NATIVE_SYMBOL$5 = symbolConstructorDetection;
  var useSymbolAsUid = NATIVE_SYMBOL$5 && !Symbol.sham && typeof Symbol.iterator == "symbol";
  var global$k = global$o;
  var shared$6 = sharedExports;
  var hasOwn$j = hasOwnProperty_1;
  var uid$3 = uid$4;
  var NATIVE_SYMBOL$4 = symbolConstructorDetection;
  var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
  var Symbol$5 = global$k.Symbol;
  var WellKnownSymbolsStore$2 = shared$6("wks");
  var createWellKnownSymbol = USE_SYMBOL_AS_UID$1 ? Symbol$5["for"] || Symbol$5 : Symbol$5 && Symbol$5.withoutSetter || uid$3;
  var wellKnownSymbol$o = function(name) {
    if (!hasOwn$j(WellKnownSymbolsStore$2, name)) {
      WellKnownSymbolsStore$2[name] = NATIVE_SYMBOL$4 && hasOwn$j(Symbol$5, name) ? Symbol$5[name] : createWellKnownSymbol("Symbol." + name);
    }
    return WellKnownSymbolsStore$2[name];
  };
  var wellKnownSymbol$n = wellKnownSymbol$o;
  var TO_STRING_TAG$4 = wellKnownSymbol$n("toStringTag");
  var test$2 = {};
  test$2[TO_STRING_TAG$4] = "z";
  var toStringTagSupport = String(test$2) === "[object z]";
  var documentAll$2 = typeof document == "object" && document.all;
  var IS_HTMLDDA = typeof documentAll$2 == "undefined" && documentAll$2 !== void 0;
  var documentAll_1 = {
    all: documentAll$2,
    IS_HTMLDDA
  };
  var $documentAll$1 = documentAll_1;
  var documentAll$1 = $documentAll$1.all;
  var isCallable$m = $documentAll$1.IS_HTMLDDA ? function(argument) {
    return typeof argument == "function" || argument === documentAll$1;
  } : function(argument) {
    return typeof argument == "function";
  };
  var uncurryThis$v = functionUncurryThis;
  var toString$d = uncurryThis$v({}.toString);
  var stringSlice$1 = uncurryThis$v("".slice);
  var classofRaw$2 = function(it2) {
    return stringSlice$1(toString$d(it2), 8, -1);
  };
  var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
  var isCallable$l = isCallable$m;
  var classofRaw$1 = classofRaw$2;
  var wellKnownSymbol$m = wellKnownSymbol$o;
  var TO_STRING_TAG$3 = wellKnownSymbol$m("toStringTag");
  var $Object$3 = Object;
  var CORRECT_ARGUMENTS = classofRaw$1(function() {
    return arguments;
  }()) == "Arguments";
  var tryGet = function(it2, key) {
    try {
      return it2[key];
    } catch (error) {
    }
  };
  var classof$g = TO_STRING_TAG_SUPPORT$2 ? classofRaw$1 : function(it2) {
    var O, tag, result;
    return it2 === void 0 ? "Undefined" : it2 === null ? "Null" : typeof (tag = tryGet(O = $Object$3(it2), TO_STRING_TAG$3)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw$1(O) : (result = classofRaw$1(O)) == "Object" && isCallable$l(O.callee) ? "Arguments" : result;
  };
  var classof$f = classof$g;
  var $String$4 = String;
  var toString$c = function(argument) {
    if (classof$f(argument) === "Symbol")
      throw TypeError("Cannot convert a Symbol value to a string");
    return $String$4(argument);
  };
  var uncurryThis$u = functionUncurryThis;
  var toIntegerOrInfinity$4 = toIntegerOrInfinity$5;
  var toString$b = toString$c;
  var requireObjectCoercible$4 = requireObjectCoercible$6;
  var charAt$3 = uncurryThis$u("".charAt);
  var charCodeAt$1 = uncurryThis$u("".charCodeAt);
  var stringSlice = uncurryThis$u("".slice);
  var createMethod$5 = function(CONVERT_TO_STRING) {
    return function($this, pos) {
      var S = toString$b(requireObjectCoercible$4($this));
      var position = toIntegerOrInfinity$4(pos);
      var size = S.length;
      var first, second;
      if (position < 0 || position >= size)
        return CONVERT_TO_STRING ? "" : void 0;
      first = charCodeAt$1(S, position);
      return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt$1(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt$3(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
    };
  };
  var stringMultibyte = {
    // `String.prototype.codePointAt` method
    // https://tc39.es/ecma262/#sec-string.prototype.codepointat
    codeAt: createMethod$5(false),
    // `String.prototype.at` method
    // https://github.com/mathiasbynens/String.prototype.at
    charAt: createMethod$5(true)
  };
  var global$j = global$o;
  var isCallable$k = isCallable$m;
  var WeakMap$1 = global$j.WeakMap;
  var weakMapBasicDetection = isCallable$k(WeakMap$1) && /native code/.test(String(WeakMap$1));
  var isCallable$j = isCallable$m;
  var $documentAll = documentAll_1;
  var documentAll = $documentAll.all;
  var isObject$j = $documentAll.IS_HTMLDDA ? function(it2) {
    return typeof it2 == "object" ? it2 !== null : isCallable$j(it2) || it2 === documentAll;
  } : function(it2) {
    return typeof it2 == "object" ? it2 !== null : isCallable$j(it2);
  };
  var fails$u = fails$x;
  var descriptors = !fails$u(function() {
    return Object.defineProperty({}, 1, { get: function() {
      return 7;
    } })[1] != 7;
  });
  var objectDefineProperty = {};
  var global$i = global$o;
  var isObject$i = isObject$j;
  var document$3 = global$i.document;
  var EXISTS$1 = isObject$i(document$3) && isObject$i(document$3.createElement);
  var documentCreateElement$1 = function(it2) {
    return EXISTS$1 ? document$3.createElement(it2) : {};
  };
  var DESCRIPTORS$i = descriptors;
  var fails$t = fails$x;
  var createElement$1 = documentCreateElement$1;
  var ie8DomDefine = !DESCRIPTORS$i && !fails$t(function() {
    return Object.defineProperty(createElement$1("div"), "a", {
      get: function() {
        return 7;
      }
    }).a != 7;
  });
  var DESCRIPTORS$h = descriptors;
  var fails$s = fails$x;
  var v8PrototypeDefineBug = DESCRIPTORS$h && fails$s(function() {
    return Object.defineProperty(function() {
    }, "prototype", {
      value: 42,
      writable: false
    }).prototype != 42;
  });
  var isObject$h = isObject$j;
  var $String$3 = String;
  var $TypeError$g = TypeError;
  var anObject$d = function(argument) {
    if (isObject$h(argument))
      return argument;
    throw $TypeError$g($String$3(argument) + " is not an object");
  };
  var NATIVE_BIND$3 = functionBindNative;
  var call$j = Function.prototype.call;
  var functionCall = NATIVE_BIND$3 ? call$j.bind(call$j) : function() {
    return call$j.apply(call$j, arguments);
  };
  var path$t = {};
  var path$s = path$t;
  var global$h = global$o;
  var isCallable$i = isCallable$m;
  var aFunction = function(variable) {
    return isCallable$i(variable) ? variable : void 0;
  };
  var getBuiltIn$f = function(namespace, method2) {
    return arguments.length < 2 ? aFunction(path$s[namespace]) || aFunction(global$h[namespace]) : path$s[namespace] && path$s[namespace][method2] || global$h[namespace] && global$h[namespace][method2];
  };
  var uncurryThis$t = functionUncurryThis;
  var objectIsPrototypeOf = uncurryThis$t({}.isPrototypeOf);
  var getBuiltIn$e = getBuiltIn$f;
  var isCallable$h = isCallable$m;
  var isPrototypeOf$r = objectIsPrototypeOf;
  var USE_SYMBOL_AS_UID = useSymbolAsUid;
  var $Object$2 = Object;
  var isSymbol$5 = USE_SYMBOL_AS_UID ? function(it2) {
    return typeof it2 == "symbol";
  } : function(it2) {
    var $Symbol2 = getBuiltIn$e("Symbol");
    return isCallable$h($Symbol2) && isPrototypeOf$r($Symbol2.prototype, $Object$2(it2));
  };
  var $String$2 = String;
  var tryToString$6 = function(argument) {
    try {
      return $String$2(argument);
    } catch (error) {
      return "Object";
    }
  };
  var isCallable$g = isCallable$m;
  var tryToString$5 = tryToString$6;
  var $TypeError$f = TypeError;
  var aCallable$e = function(argument) {
    if (isCallable$g(argument))
      return argument;
    throw $TypeError$f(tryToString$5(argument) + " is not a function");
  };
  var aCallable$d = aCallable$e;
  var isNullOrUndefined$3 = isNullOrUndefined$5;
  var getMethod$3 = function(V, P) {
    var func = V[P];
    return isNullOrUndefined$3(func) ? void 0 : aCallable$d(func);
  };
  var call$i = functionCall;
  var isCallable$f = isCallable$m;
  var isObject$g = isObject$j;
  var $TypeError$e = TypeError;
  var ordinaryToPrimitive$1 = function(input, pref) {
    var fn, val;
    if (pref === "string" && isCallable$f(fn = input.toString) && !isObject$g(val = call$i(fn, input)))
      return val;
    if (isCallable$f(fn = input.valueOf) && !isObject$g(val = call$i(fn, input)))
      return val;
    if (pref !== "string" && isCallable$f(fn = input.toString) && !isObject$g(val = call$i(fn, input)))
      return val;
    throw $TypeError$e("Can't convert object to primitive value");
  };
  var call$h = functionCall;
  var isObject$f = isObject$j;
  var isSymbol$4 = isSymbol$5;
  var getMethod$2 = getMethod$3;
  var ordinaryToPrimitive = ordinaryToPrimitive$1;
  var wellKnownSymbol$l = wellKnownSymbol$o;
  var $TypeError$d = TypeError;
  var TO_PRIMITIVE = wellKnownSymbol$l("toPrimitive");
  var toPrimitive$7 = function(input, pref) {
    if (!isObject$f(input) || isSymbol$4(input))
      return input;
    var exoticToPrim = getMethod$2(input, TO_PRIMITIVE);
    var result;
    if (exoticToPrim) {
      if (pref === void 0)
        pref = "default";
      result = call$h(exoticToPrim, input, pref);
      if (!isObject$f(result) || isSymbol$4(result))
        return result;
      throw $TypeError$d("Can't convert object to primitive value");
    }
    if (pref === void 0)
      pref = "number";
    return ordinaryToPrimitive(input, pref);
  };
  var toPrimitive$6 = toPrimitive$7;
  var isSymbol$3 = isSymbol$5;
  var toPropertyKey$4 = function(argument) {
    var key = toPrimitive$6(argument, "string");
    return isSymbol$3(key) ? key : key + "";
  };
  var DESCRIPTORS$g = descriptors;
  var IE8_DOM_DEFINE$1 = ie8DomDefine;
  var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
  var anObject$c = anObject$d;
  var toPropertyKey$3 = toPropertyKey$4;
  var $TypeError$c = TypeError;
  var $defineProperty$1 = Object.defineProperty;
  var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
  var ENUMERABLE = "enumerable";
  var CONFIGURABLE$1 = "configurable";
  var WRITABLE = "writable";
  objectDefineProperty.f = DESCRIPTORS$g ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
    anObject$c(O);
    P = toPropertyKey$3(P);
    anObject$c(Attributes);
    if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
      var current = $getOwnPropertyDescriptor$2(O, P);
      if (current && current[WRITABLE]) {
        O[P] = Attributes.value;
        Attributes = {
          configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
          enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
          writable: false
        };
      }
    }
    return $defineProperty$1(O, P, Attributes);
  } : $defineProperty$1 : function defineProperty2(O, P, Attributes) {
    anObject$c(O);
    P = toPropertyKey$3(P);
    anObject$c(Attributes);
    if (IE8_DOM_DEFINE$1)
      try {
        return $defineProperty$1(O, P, Attributes);
      } catch (error) {
      }
    if ("get" in Attributes || "set" in Attributes)
      throw $TypeError$c("Accessors not supported");
    if ("value" in Attributes)
      O[P] = Attributes.value;
    return O;
  };
  var createPropertyDescriptor$7 = function(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value
    };
  };
  var DESCRIPTORS$f = descriptors;
  var definePropertyModule$4 = objectDefineProperty;
  var createPropertyDescriptor$6 = createPropertyDescriptor$7;
  var createNonEnumerableProperty$9 = DESCRIPTORS$f ? function(object2, key, value) {
    return definePropertyModule$4.f(object2, key, createPropertyDescriptor$6(1, value));
  } : function(object2, key, value) {
    object2[key] = value;
    return object2;
  };
  var shared$5 = sharedExports;
  var uid$2 = uid$4;
  var keys$7 = shared$5("keys");
  var sharedKey$4 = function(key) {
    return keys$7[key] || (keys$7[key] = uid$2(key));
  };
  var hiddenKeys$6 = {};
  var NATIVE_WEAK_MAP = weakMapBasicDetection;
  var global$g = global$o;
  var isObject$e = isObject$j;
  var createNonEnumerableProperty$8 = createNonEnumerableProperty$9;
  var hasOwn$i = hasOwnProperty_1;
  var shared$4 = sharedStore;
  var sharedKey$3 = sharedKey$4;
  var hiddenKeys$5 = hiddenKeys$6;
  var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
  var TypeError$3 = global$g.TypeError;
  var WeakMap2 = global$g.WeakMap;
  var set$4;
  var get;
  var has;
  var enforce = function(it2) {
    return has(it2) ? get(it2) : set$4(it2, {});
  };
  var getterFor = function(TYPE) {
    return function(it2) {
      var state;
      if (!isObject$e(it2) || (state = get(it2)).type !== TYPE) {
        throw TypeError$3("Incompatible receiver, " + TYPE + " required");
      }
      return state;
    };
  };
  if (NATIVE_WEAK_MAP || shared$4.state) {
    store$1 = shared$4.state || (shared$4.state = new WeakMap2());
    store$1.get = store$1.get;
    store$1.has = store$1.has;
    store$1.set = store$1.set;
    set$4 = function(it2, metadata) {
      if (store$1.has(it2))
        throw TypeError$3(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it2;
      store$1.set(it2, metadata);
      return metadata;
    };
    get = function(it2) {
      return store$1.get(it2) || {};
    };
    has = function(it2) {
      return store$1.has(it2);
    };
  } else {
    STATE = sharedKey$3("state");
    hiddenKeys$5[STATE] = true;
    set$4 = function(it2, metadata) {
      if (hasOwn$i(it2, STATE))
        throw TypeError$3(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it2;
      createNonEnumerableProperty$8(it2, STATE, metadata);
      return metadata;
    };
    get = function(it2) {
      return hasOwn$i(it2, STATE) ? it2[STATE] : {};
    };
    has = function(it2) {
      return hasOwn$i(it2, STATE);
    };
  }
  var store$1;
  var STATE;
  var internalState = {
    set: set$4,
    get,
    has,
    enforce,
    getterFor
  };
  var NATIVE_BIND$2 = functionBindNative;
  var FunctionPrototype$2 = Function.prototype;
  var apply$6 = FunctionPrototype$2.apply;
  var call$g = FunctionPrototype$2.call;
  var functionApply = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND$2 ? call$g.bind(apply$6) : function() {
    return call$g.apply(apply$6, arguments);
  });
  var classofRaw = classofRaw$2;
  var uncurryThis$s = functionUncurryThis;
  var functionUncurryThisClause = function(fn) {
    if (classofRaw(fn) === "Function")
      return uncurryThis$s(fn);
  };
  var objectGetOwnPropertyDescriptor = {};
  var objectPropertyIsEnumerable = {};
  var $propertyIsEnumerable$2 = {}.propertyIsEnumerable;
  var getOwnPropertyDescriptor$7 = Object.getOwnPropertyDescriptor;
  var NASHORN_BUG = getOwnPropertyDescriptor$7 && !$propertyIsEnumerable$2.call({ 1: 2 }, 1);
  objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor$7(this, V);
    return !!descriptor && descriptor.enumerable;
  } : $propertyIsEnumerable$2;
  var uncurryThis$r = functionUncurryThis;
  var fails$r = fails$x;
  var classof$e = classofRaw$2;
  var $Object$1 = Object;
  var split = uncurryThis$r("".split);
  var indexedObject = fails$r(function() {
    return !$Object$1("z").propertyIsEnumerable(0);
  }) ? function(it2) {
    return classof$e(it2) == "String" ? split(it2, "") : $Object$1(it2);
  } : $Object$1;
  var IndexedObject$3 = indexedObject;
  var requireObjectCoercible$3 = requireObjectCoercible$6;
  var toIndexedObject$b = function(it2) {
    return IndexedObject$3(requireObjectCoercible$3(it2));
  };
  var DESCRIPTORS$e = descriptors;
  var call$f = functionCall;
  var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
  var createPropertyDescriptor$5 = createPropertyDescriptor$7;
  var toIndexedObject$a = toIndexedObject$b;
  var toPropertyKey$2 = toPropertyKey$4;
  var hasOwn$h = hasOwnProperty_1;
  var IE8_DOM_DEFINE = ie8DomDefine;
  var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
  objectGetOwnPropertyDescriptor.f = DESCRIPTORS$e ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject$a(O);
    P = toPropertyKey$2(P);
    if (IE8_DOM_DEFINE)
      try {
        return $getOwnPropertyDescriptor$1(O, P);
      } catch (error) {
      }
    if (hasOwn$h(O, P))
      return createPropertyDescriptor$5(!call$f(propertyIsEnumerableModule$2.f, O, P), O[P]);
  };
  var fails$q = fails$x;
  var isCallable$e = isCallable$m;
  var replacement = /#|\.prototype\./;
  var isForced$2 = function(feature, detection) {
    var value = data[normalize2(feature)];
    return value == POLYFILL ? true : value == NATIVE ? false : isCallable$e(detection) ? fails$q(detection) : !!detection;
  };
  var normalize2 = isForced$2.normalize = function(string2) {
    return String(string2).replace(replacement, ".").toLowerCase();
  };
  var data = isForced$2.data = {};
  var NATIVE = isForced$2.NATIVE = "N";
  var POLYFILL = isForced$2.POLYFILL = "P";
  var isForced_1 = isForced$2;
  var uncurryThis$q = functionUncurryThisClause;
  var aCallable$c = aCallable$e;
  var NATIVE_BIND$1 = functionBindNative;
  var bind$j = uncurryThis$q(uncurryThis$q.bind);
  var functionBindContext = function(fn, that) {
    aCallable$c(fn);
    return that === void 0 ? fn : NATIVE_BIND$1 ? bind$j(fn, that) : function() {
      return fn.apply(that, arguments);
    };
  };
  var global$f = global$o;
  var apply$5 = functionApply;
  var uncurryThis$p = functionUncurryThisClause;
  var isCallable$d = isCallable$m;
  var getOwnPropertyDescriptor$6 = objectGetOwnPropertyDescriptor.f;
  var isForced$1 = isForced_1;
  var path$r = path$t;
  var bind$i = functionBindContext;
  var createNonEnumerableProperty$7 = createNonEnumerableProperty$9;
  var hasOwn$g = hasOwnProperty_1;
  var wrapConstructor = function(NativeConstructor) {
    var Wrapper = function(a, b, c) {
      if (this instanceof Wrapper) {
        switch (arguments.length) {
          case 0:
            return new NativeConstructor();
          case 1:
            return new NativeConstructor(a);
          case 2:
            return new NativeConstructor(a, b);
        }
        return new NativeConstructor(a, b, c);
      }
      return apply$5(NativeConstructor, this, arguments);
    };
    Wrapper.prototype = NativeConstructor.prototype;
    return Wrapper;
  };
  var _export = function(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var PROTO = options.proto;
    var nativeSource = GLOBAL ? global$f : STATIC ? global$f[TARGET] : (global$f[TARGET] || {}).prototype;
    var target = GLOBAL ? path$r : path$r[TARGET] || createNonEnumerableProperty$7(path$r, TARGET, {})[TARGET];
    var targetPrototype = target.prototype;
    var FORCED2, USE_NATIVE, VIRTUAL_PROTOTYPE;
    var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
    for (key in source) {
      FORCED2 = isForced$1(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
      USE_NATIVE = !FORCED2 && nativeSource && hasOwn$g(nativeSource, key);
      targetProperty = target[key];
      if (USE_NATIVE)
        if (options.dontCallGetSet) {
          descriptor = getOwnPropertyDescriptor$6(nativeSource, key);
          nativeProperty = descriptor && descriptor.value;
        } else
          nativeProperty = nativeSource[key];
      sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
      if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
        continue;
      if (options.bind && USE_NATIVE)
        resultProperty = bind$i(sourceProperty, global$f);
      else if (options.wrap && USE_NATIVE)
        resultProperty = wrapConstructor(sourceProperty);
      else if (PROTO && isCallable$d(sourceProperty))
        resultProperty = uncurryThis$p(sourceProperty);
      else
        resultProperty = sourceProperty;
      if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
        createNonEnumerableProperty$7(resultProperty, "sham", true);
      }
      createNonEnumerableProperty$7(target, key, resultProperty);
      if (PROTO) {
        VIRTUAL_PROTOTYPE = TARGET + "Prototype";
        if (!hasOwn$g(path$r, VIRTUAL_PROTOTYPE)) {
          createNonEnumerableProperty$7(path$r, VIRTUAL_PROTOTYPE, {});
        }
        createNonEnumerableProperty$7(path$r[VIRTUAL_PROTOTYPE], key, sourceProperty);
        if (options.real && targetPrototype && (FORCED2 || !targetPrototype[key])) {
          createNonEnumerableProperty$7(targetPrototype, key, sourceProperty);
        }
      }
    }
  };
  var DESCRIPTORS$d = descriptors;
  var hasOwn$f = hasOwnProperty_1;
  var FunctionPrototype$1 = Function.prototype;
  var getDescriptor = DESCRIPTORS$d && Object.getOwnPropertyDescriptor;
  var EXISTS = hasOwn$f(FunctionPrototype$1, "name");
  var PROPER = EXISTS && function something() {
  }.name === "something";
  var CONFIGURABLE = EXISTS && (!DESCRIPTORS$d || DESCRIPTORS$d && getDescriptor(FunctionPrototype$1, "name").configurable);
  var functionName = {
    EXISTS,
    PROPER,
    CONFIGURABLE
  };
  var objectDefineProperties = {};
  var toIntegerOrInfinity$3 = toIntegerOrInfinity$5;
  var max$3 = Math.max;
  var min$2 = Math.min;
  var toAbsoluteIndex$5 = function(index, length) {
    var integer = toIntegerOrInfinity$3(index);
    return integer < 0 ? max$3(integer + length, 0) : min$2(integer, length);
  };
  var toIntegerOrInfinity$2 = toIntegerOrInfinity$5;
  var min$1 = Math.min;
  var toLength$1 = function(argument) {
    return argument > 0 ? min$1(toIntegerOrInfinity$2(argument), 9007199254740991) : 0;
  };
  var toLength = toLength$1;
  var lengthOfArrayLike$d = function(obj) {
    return toLength(obj.length);
  };
  var toIndexedObject$9 = toIndexedObject$b;
  var toAbsoluteIndex$4 = toAbsoluteIndex$5;
  var lengthOfArrayLike$c = lengthOfArrayLike$d;
  var createMethod$4 = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
      var O = toIndexedObject$9($this);
      var length = lengthOfArrayLike$c(O);
      var index = toAbsoluteIndex$4(fromIndex, length);
      var value;
      if (IS_INCLUDES && el != el)
        while (length > index) {
          value = O[index++];
          if (value != value)
            return true;
        }
      else
        for (; length > index; index++) {
          if ((IS_INCLUDES || index in O) && O[index] === el)
            return IS_INCLUDES || index || 0;
        }
      return !IS_INCLUDES && -1;
    };
  };
  var arrayIncludes = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: createMethod$4(true),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod$4(false)
  };
  var uncurryThis$o = functionUncurryThis;
  var hasOwn$e = hasOwnProperty_1;
  var toIndexedObject$8 = toIndexedObject$b;
  var indexOf$4 = arrayIncludes.indexOf;
  var hiddenKeys$4 = hiddenKeys$6;
  var push$7 = uncurryThis$o([].push);
  var objectKeysInternal = function(object2, names) {
    var O = toIndexedObject$8(object2);
    var i2 = 0;
    var result = [];
    var key;
    for (key in O)
      !hasOwn$e(hiddenKeys$4, key) && hasOwn$e(O, key) && push$7(result, key);
    while (names.length > i2)
      if (hasOwn$e(O, key = names[i2++])) {
        ~indexOf$4(result, key) || push$7(result, key);
      }
    return result;
  };
  var enumBugKeys$3 = [
    "constructor",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf"
  ];
  var internalObjectKeys$1 = objectKeysInternal;
  var enumBugKeys$2 = enumBugKeys$3;
  var objectKeys$4 = Object.keys || function keys(O) {
    return internalObjectKeys$1(O, enumBugKeys$2);
  };
  var DESCRIPTORS$c = descriptors;
  var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
  var definePropertyModule$3 = objectDefineProperty;
  var anObject$b = anObject$d;
  var toIndexedObject$7 = toIndexedObject$b;
  var objectKeys$3 = objectKeys$4;
  objectDefineProperties.f = DESCRIPTORS$c && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject$b(O);
    var props = toIndexedObject$7(Properties);
    var keys4 = objectKeys$3(Properties);
    var length = keys4.length;
    var index = 0;
    var key;
    while (length > index)
      definePropertyModule$3.f(O, key = keys4[index++], props[key]);
    return O;
  };
  var getBuiltIn$d = getBuiltIn$f;
  var html$2 = getBuiltIn$d("document", "documentElement");
  var anObject$a = anObject$d;
  var definePropertiesModule$1 = objectDefineProperties;
  var enumBugKeys$1 = enumBugKeys$3;
  var hiddenKeys$3 = hiddenKeys$6;
  var html$1 = html$2;
  var documentCreateElement = documentCreateElement$1;
  var sharedKey$2 = sharedKey$4;
  var GT = ">";
  var LT = "<";
  var PROTOTYPE$1 = "prototype";
  var SCRIPT = "script";
  var IE_PROTO$1 = sharedKey$2("IE_PROTO");
  var EmptyConstructor = function() {
  };
  var scriptTag = function(content) {
    return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
  };
  var NullProtoObjectViaActiveX = function(activeXDocument2) {
    activeXDocument2.write(scriptTag(""));
    activeXDocument2.close();
    var temp = activeXDocument2.parentWindow.Object;
    activeXDocument2 = null;
    return temp;
  };
  var NullProtoObjectViaIFrame = function() {
    var iframe = documentCreateElement("iframe");
    var JS = "java" + SCRIPT + ":";
    var iframeDocument;
    iframe.style.display = "none";
    html$1.appendChild(iframe);
    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag("document.F=Object"));
    iframeDocument.close();
    return iframeDocument.F;
  };
  var activeXDocument;
  var NullProtoObject = function() {
    try {
      activeXDocument = new ActiveXObject("htmlfile");
    } catch (error) {
    }
    NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
    var length = enumBugKeys$1.length;
    while (length--)
      delete NullProtoObject[PROTOTYPE$1][enumBugKeys$1[length]];
    return NullProtoObject();
  };
  hiddenKeys$3[IE_PROTO$1] = true;
  var objectCreate = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      EmptyConstructor[PROTOTYPE$1] = anObject$a(O);
      result = new EmptyConstructor();
      EmptyConstructor[PROTOTYPE$1] = null;
      result[IE_PROTO$1] = O;
    } else
      result = NullProtoObject();
    return Properties === void 0 ? result : definePropertiesModule$1.f(result, Properties);
  };
  var fails$p = fails$x;
  var correctPrototypeGetter = !fails$p(function() {
    function F() {
    }
    F.prototype.constructor = null;
    return Object.getPrototypeOf(new F()) !== F.prototype;
  });
  var hasOwn$d = hasOwnProperty_1;
  var isCallable$c = isCallable$m;
  var toObject$c = toObject$e;
  var sharedKey$1 = sharedKey$4;
  var CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;
  var IE_PROTO = sharedKey$1("IE_PROTO");
  var $Object = Object;
  var ObjectPrototype$2 = $Object.prototype;
  var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER$1 ? $Object.getPrototypeOf : function(O) {
    var object2 = toObject$c(O);
    if (hasOwn$d(object2, IE_PROTO))
      return object2[IE_PROTO];
    var constructor = object2.constructor;
    if (isCallable$c(constructor) && object2 instanceof constructor) {
      return constructor.prototype;
    }
    return object2 instanceof $Object ? ObjectPrototype$2 : null;
  };
  var createNonEnumerableProperty$6 = createNonEnumerableProperty$9;
  var defineBuiltIn$6 = function(target, key, value, options) {
    if (options && options.enumerable)
      target[key] = value;
    else
      createNonEnumerableProperty$6(target, key, value);
    return target;
  };
  var fails$o = fails$x;
  var isCallable$b = isCallable$m;
  var isObject$d = isObject$j;
  var create$c = objectCreate;
  var getPrototypeOf$9 = objectGetPrototypeOf;
  var defineBuiltIn$5 = defineBuiltIn$6;
  var wellKnownSymbol$k = wellKnownSymbol$o;
  var ITERATOR$6 = wellKnownSymbol$k("iterator");
  var BUGGY_SAFARI_ITERATORS$1 = false;
  var IteratorPrototype$1;
  var PrototypeOfArrayIteratorPrototype;
  var arrayIterator;
  if ([].keys) {
    arrayIterator = [].keys();
    if (!("next" in arrayIterator))
      BUGGY_SAFARI_ITERATORS$1 = true;
    else {
      PrototypeOfArrayIteratorPrototype = getPrototypeOf$9(getPrototypeOf$9(arrayIterator));
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
        IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;
    }
  }
  var NEW_ITERATOR_PROTOTYPE = !isObject$d(IteratorPrototype$1) || fails$o(function() {
    var test2 = {};
    return IteratorPrototype$1[ITERATOR$6].call(test2) !== test2;
  });
  if (NEW_ITERATOR_PROTOTYPE)
    IteratorPrototype$1 = {};
  else
    IteratorPrototype$1 = create$c(IteratorPrototype$1);
  if (!isCallable$b(IteratorPrototype$1[ITERATOR$6])) {
    defineBuiltIn$5(IteratorPrototype$1, ITERATOR$6, function() {
      return this;
    });
  }
  var iteratorsCore = {
    IteratorPrototype: IteratorPrototype$1,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
  };
  var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
  var classof$d = classof$g;
  var objectToString = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {
    return "[object " + classof$d(this) + "]";
  };
  var TO_STRING_TAG_SUPPORT = toStringTagSupport;
  var defineProperty$e = objectDefineProperty.f;
  var createNonEnumerableProperty$5 = createNonEnumerableProperty$9;
  var hasOwn$c = hasOwnProperty_1;
  var toString$a = objectToString;
  var wellKnownSymbol$j = wellKnownSymbol$o;
  var TO_STRING_TAG$2 = wellKnownSymbol$j("toStringTag");
  var setToStringTag$7 = function(it2, TAG, STATIC, SET_METHOD) {
    if (it2) {
      var target = STATIC ? it2 : it2.prototype;
      if (!hasOwn$c(target, TO_STRING_TAG$2)) {
        defineProperty$e(target, TO_STRING_TAG$2, { configurable: true, value: TAG });
      }
      if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
        createNonEnumerableProperty$5(target, "toString", toString$a);
      }
    }
  };
  var iterators = {};
  var IteratorPrototype = iteratorsCore.IteratorPrototype;
  var create$b = objectCreate;
  var createPropertyDescriptor$4 = createPropertyDescriptor$7;
  var setToStringTag$6 = setToStringTag$7;
  var Iterators$5 = iterators;
  var returnThis$1 = function() {
    return this;
  };
  var iteratorCreateConstructor = function(IteratorConstructor, NAME, next2, ENUMERABLE_NEXT) {
    var TO_STRING_TAG2 = NAME + " Iterator";
    IteratorConstructor.prototype = create$b(IteratorPrototype, { next: createPropertyDescriptor$4(+!ENUMERABLE_NEXT, next2) });
    setToStringTag$6(IteratorConstructor, TO_STRING_TAG2, false, true);
    Iterators$5[TO_STRING_TAG2] = returnThis$1;
    return IteratorConstructor;
  };
  var uncurryThis$n = functionUncurryThis;
  var aCallable$b = aCallable$e;
  var functionUncurryThisAccessor = function(object2, key, method2) {
    try {
      return uncurryThis$n(aCallable$b(Object.getOwnPropertyDescriptor(object2, key)[method2]));
    } catch (error) {
    }
  };
  var isCallable$a = isCallable$m;
  var $String$1 = String;
  var $TypeError$b = TypeError;
  var aPossiblePrototype$1 = function(argument) {
    if (typeof argument == "object" || isCallable$a(argument))
      return argument;
    throw $TypeError$b("Can't set " + $String$1(argument) + " as a prototype");
  };
  var uncurryThisAccessor = functionUncurryThisAccessor;
  var anObject$9 = anObject$d;
  var aPossiblePrototype = aPossiblePrototype$1;
  var objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function() {
    var CORRECT_SETTER = false;
    var test2 = {};
    var setter;
    try {
      setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
      setter(test2, []);
      CORRECT_SETTER = test2 instanceof Array;
    } catch (error) {
    }
    return function setPrototypeOf2(O, proto) {
      anObject$9(O);
      aPossiblePrototype(proto);
      if (CORRECT_SETTER)
        setter(O, proto);
      else
        O.__proto__ = proto;
      return O;
    };
  }() : void 0);
  var $$Y = _export;
  var call$e = functionCall;
  var FunctionName = functionName;
  var createIteratorConstructor = iteratorCreateConstructor;
  var getPrototypeOf$8 = objectGetPrototypeOf;
  var setToStringTag$5 = setToStringTag$7;
  var defineBuiltIn$4 = defineBuiltIn$6;
  var wellKnownSymbol$i = wellKnownSymbol$o;
  var Iterators$4 = iterators;
  var IteratorsCore = iteratorsCore;
  var PROPER_FUNCTION_NAME$1 = FunctionName.PROPER;
  var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
  var ITERATOR$5 = wellKnownSymbol$i("iterator");
  var KEYS = "keys";
  var VALUES = "values";
  var ENTRIES = "entries";
  var returnThis = function() {
    return this;
  };
  var iteratorDefine = function(Iterable, NAME, IteratorConstructor, next2, DEFAULT2, IS_SET, FORCED2) {
    createIteratorConstructor(IteratorConstructor, NAME, next2);
    var getIterationMethod = function(KIND) {
      if (KIND === DEFAULT2 && defaultIterator)
        return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
        return IterablePrototype[KIND];
      switch (KIND) {
        case KEYS:
          return function keys4() {
            return new IteratorConstructor(this, KIND);
          };
        case VALUES:
          return function values3() {
            return new IteratorConstructor(this, KIND);
          };
        case ENTRIES:
          return function entries2() {
            return new IteratorConstructor(this, KIND);
          };
      }
      return function() {
        return new IteratorConstructor(this);
      };
    };
    var TO_STRING_TAG2 = NAME + " Iterator";
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR$5] || IterablePrototype["@@iterator"] || DEFAULT2 && IterablePrototype[DEFAULT2];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT2);
    var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY;
    if (anyNativeIterator) {
      CurrentIteratorPrototype = getPrototypeOf$8(anyNativeIterator.call(new Iterable()));
      if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
        setToStringTag$5(CurrentIteratorPrototype, TO_STRING_TAG2, true, true);
        Iterators$4[TO_STRING_TAG2] = returnThis;
      }
    }
    if (PROPER_FUNCTION_NAME$1 && DEFAULT2 == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
      {
        INCORRECT_VALUES_NAME = true;
        defaultIterator = function values3() {
          return call$e(nativeIterator, this);
        };
      }
    }
    if (DEFAULT2) {
      methods = {
        values: getIterationMethod(VALUES),
        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
        entries: getIterationMethod(ENTRIES)
      };
      if (FORCED2)
        for (KEY in methods) {
          if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
            defineBuiltIn$4(IterablePrototype, KEY, methods[KEY]);
          }
        }
      else
        $$Y({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
    }
    if (FORCED2 && IterablePrototype[ITERATOR$5] !== defaultIterator) {
      defineBuiltIn$4(IterablePrototype, ITERATOR$5, defaultIterator, { name: DEFAULT2 });
    }
    Iterators$4[NAME] = defaultIterator;
    return methods;
  };
  var createIterResultObject$3 = function(value, done) {
    return { value, done };
  };
  var charAt$2 = stringMultibyte.charAt;
  var toString$9 = toString$c;
  var InternalStateModule$5 = internalState;
  var defineIterator$2 = iteratorDefine;
  var createIterResultObject$2 = createIterResultObject$3;
  var STRING_ITERATOR = "String Iterator";
  var setInternalState$5 = InternalStateModule$5.set;
  var getInternalState$2 = InternalStateModule$5.getterFor(STRING_ITERATOR);
  defineIterator$2(String, "String", function(iterated) {
    setInternalState$5(this, {
      type: STRING_ITERATOR,
      string: toString$9(iterated),
      index: 0
    });
  }, function next() {
    var state = getInternalState$2(this);
    var string2 = state.string;
    var index = state.index;
    var point;
    if (index >= string2.length)
      return createIterResultObject$2(void 0, true);
    point = charAt$2(string2, index);
    state.index += point.length;
    return createIterResultObject$2(point, false);
  });
  var call$d = functionCall;
  var anObject$8 = anObject$d;
  var getMethod$1 = getMethod$3;
  var iteratorClose$2 = function(iterator2, kind, value) {
    var innerResult, innerError;
    anObject$8(iterator2);
    try {
      innerResult = getMethod$1(iterator2, "return");
      if (!innerResult) {
        if (kind === "throw")
          throw value;
        return value;
      }
      innerResult = call$d(innerResult, iterator2);
    } catch (error) {
      innerError = true;
      innerResult = error;
    }
    if (kind === "throw")
      throw value;
    if (innerError)
      throw innerResult;
    anObject$8(innerResult);
    return value;
  };
  var anObject$7 = anObject$d;
  var iteratorClose$1 = iteratorClose$2;
  var callWithSafeIterationClosing$1 = function(iterator2, fn, value, ENTRIES2) {
    try {
      return ENTRIES2 ? fn(anObject$7(value)[0], value[1]) : fn(value);
    } catch (error) {
      iteratorClose$1(iterator2, "throw", error);
    }
  };
  var wellKnownSymbol$h = wellKnownSymbol$o;
  var Iterators$3 = iterators;
  var ITERATOR$4 = wellKnownSymbol$h("iterator");
  var ArrayPrototype$k = Array.prototype;
  var isArrayIteratorMethod$2 = function(it2) {
    return it2 !== void 0 && (Iterators$3.Array === it2 || ArrayPrototype$k[ITERATOR$4] === it2);
  };
  var uncurryThis$m = functionUncurryThis;
  var isCallable$9 = isCallable$m;
  var store = sharedStore;
  var functionToString = uncurryThis$m(Function.toString);
  if (!isCallable$9(store.inspectSource)) {
    store.inspectSource = function(it2) {
      return functionToString(it2);
    };
  }
  var inspectSource$2 = store.inspectSource;
  var uncurryThis$l = functionUncurryThis;
  var fails$n = fails$x;
  var isCallable$8 = isCallable$m;
  var classof$c = classof$g;
  var getBuiltIn$c = getBuiltIn$f;
  var inspectSource$1 = inspectSource$2;
  var noop = function() {
  };
  var empty = [];
  var construct$4 = getBuiltIn$c("Reflect", "construct");
  var constructorRegExp = /^\s*(?:class|function)\b/;
  var exec$2 = uncurryThis$l(constructorRegExp.exec);
  var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
  var isConstructorModern = function isConstructor(argument) {
    if (!isCallable$8(argument))
      return false;
    try {
      construct$4(noop, empty, argument);
      return true;
    } catch (error) {
      return false;
    }
  };
  var isConstructorLegacy = function isConstructor2(argument) {
    if (!isCallable$8(argument))
      return false;
    switch (classof$c(argument)) {
      case "AsyncFunction":
      case "GeneratorFunction":
      case "AsyncGeneratorFunction":
        return false;
    }
    try {
      return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource$1(argument));
    } catch (error) {
      return true;
    }
  };
  isConstructorLegacy.sham = true;
  var isConstructor$4 = !construct$4 || fails$n(function() {
    var called;
    return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
      called = true;
    }) || called;
  }) ? isConstructorLegacy : isConstructorModern;
  var toPropertyKey$1 = toPropertyKey$4;
  var definePropertyModule$2 = objectDefineProperty;
  var createPropertyDescriptor$3 = createPropertyDescriptor$7;
  var createProperty$6 = function(object2, key, value) {
    var propertyKey = toPropertyKey$1(key);
    if (propertyKey in object2)
      definePropertyModule$2.f(object2, propertyKey, createPropertyDescriptor$3(0, value));
    else
      object2[propertyKey] = value;
  };
  var classof$b = classof$g;
  var getMethod = getMethod$3;
  var isNullOrUndefined$2 = isNullOrUndefined$5;
  var Iterators$2 = iterators;
  var wellKnownSymbol$g = wellKnownSymbol$o;
  var ITERATOR$3 = wellKnownSymbol$g("iterator");
  var getIteratorMethod$9 = function(it2) {
    if (!isNullOrUndefined$2(it2))
      return getMethod(it2, ITERATOR$3) || getMethod(it2, "@@iterator") || Iterators$2[classof$b(it2)];
  };
  var call$c = functionCall;
  var aCallable$a = aCallable$e;
  var anObject$6 = anObject$d;
  var tryToString$4 = tryToString$6;
  var getIteratorMethod$8 = getIteratorMethod$9;
  var $TypeError$a = TypeError;
  var getIterator$8 = function(argument, usingIterator) {
    var iteratorMethod = arguments.length < 2 ? getIteratorMethod$8(argument) : usingIterator;
    if (aCallable$a(iteratorMethod))
      return anObject$6(call$c(iteratorMethod, argument));
    throw $TypeError$a(tryToString$4(argument) + " is not iterable");
  };
  var bind$h = functionBindContext;
  var call$b = functionCall;
  var toObject$b = toObject$e;
  var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
  var isArrayIteratorMethod$1 = isArrayIteratorMethod$2;
  var isConstructor$3 = isConstructor$4;
  var lengthOfArrayLike$b = lengthOfArrayLike$d;
  var createProperty$5 = createProperty$6;
  var getIterator$7 = getIterator$8;
  var getIteratorMethod$7 = getIteratorMethod$9;
  var $Array$3 = Array;
  var arrayFrom = function from(arrayLike) {
    var O = toObject$b(arrayLike);
    var IS_CONSTRUCTOR = isConstructor$3(this);
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
    var mapping = mapfn !== void 0;
    if (mapping)
      mapfn = bind$h(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
    var iteratorMethod = getIteratorMethod$7(O);
    var index = 0;
    var length, result, step, iterator2, next2, value;
    if (iteratorMethod && !(this === $Array$3 && isArrayIteratorMethod$1(iteratorMethod))) {
      iterator2 = getIterator$7(O, iteratorMethod);
      next2 = iterator2.next;
      result = IS_CONSTRUCTOR ? new this() : [];
      for (; !(step = call$b(next2, iterator2)).done; index++) {
        value = mapping ? callWithSafeIterationClosing(iterator2, mapfn, [step.value, index], true) : step.value;
        createProperty$5(result, index, value);
      }
    } else {
      length = lengthOfArrayLike$b(O);
      result = IS_CONSTRUCTOR ? new this(length) : $Array$3(length);
      for (; length > index; index++) {
        value = mapping ? mapfn(O[index], index) : O[index];
        createProperty$5(result, index, value);
      }
    }
    result.length = index;
    return result;
  };
  var wellKnownSymbol$f = wellKnownSymbol$o;
  var ITERATOR$2 = wellKnownSymbol$f("iterator");
  var SAFE_CLOSING = false;
  try {
    called = 0;
    iteratorWithReturn = {
      next: function() {
        return { done: !!called++ };
      },
      "return": function() {
        SAFE_CLOSING = true;
      }
    };
    iteratorWithReturn[ITERATOR$2] = function() {
      return this;
    };
    Array.from(iteratorWithReturn, function() {
      throw 2;
    });
  } catch (error) {
  }
  var called;
  var iteratorWithReturn;
  var checkCorrectnessOfIteration$2 = function(exec2, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING)
      return false;
    var ITERATION_SUPPORT = false;
    try {
      var object2 = {};
      object2[ITERATOR$2] = function() {
        return {
          next: function() {
            return { done: ITERATION_SUPPORT = true };
          }
        };
      };
      exec2(object2);
    } catch (error) {
    }
    return ITERATION_SUPPORT;
  };
  var $$X = _export;
  var from$6 = arrayFrom;
  var checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$2;
  var INCORRECT_ITERATION = !checkCorrectnessOfIteration$1(function(iterable) {
    Array.from(iterable);
  });
  $$X({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
    from: from$6
  });
  var path$q = path$t;
  var from$5 = path$q.Array.from;
  var parent$1h = from$5;
  var from$4 = parent$1h;
  (function(module) {
    module.exports = from$4;
  })(from$7);
  var _Array$from$1 = /* @__PURE__ */ getDefaultExportFromCjs(fromExports$2);
  var getIteratorMethodExports$1 = {};
  var getIteratorMethod$6 = {
    get exports() {
      return getIteratorMethodExports$1;
    },
    set exports(v) {
      getIteratorMethodExports$1 = v;
    }
  };
  var getIteratorMethodExports = {};
  var getIteratorMethod$5 = {
    get exports() {
      return getIteratorMethodExports;
    },
    set exports(v) {
      getIteratorMethodExports = v;
    }
  };
  var toIndexedObject$6 = toIndexedObject$b;
  var Iterators$1 = iterators;
  var InternalStateModule$4 = internalState;
  objectDefineProperty.f;
  var defineIterator$1 = iteratorDefine;
  var createIterResultObject$1 = createIterResultObject$3;
  var ARRAY_ITERATOR = "Array Iterator";
  var setInternalState$4 = InternalStateModule$4.set;
  var getInternalState$1 = InternalStateModule$4.getterFor(ARRAY_ITERATOR);
  defineIterator$1(Array, "Array", function(iterated, kind) {
    setInternalState$4(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject$6(iterated),
      // target
      index: 0,
      // next index
      kind
      // kind
    });
  }, function() {
    var state = getInternalState$1(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;
    if (!target || index >= target.length) {
      state.target = void 0;
      return createIterResultObject$1(void 0, true);
    }
    if (kind == "keys")
      return createIterResultObject$1(index, false);
    if (kind == "values")
      return createIterResultObject$1(target[index], false);
    return createIterResultObject$1([index, target[index]], false);
  }, "values");
  Iterators$1.Arguments = Iterators$1.Array;
  var getIteratorMethod$4 = getIteratorMethod$9;
  var getIteratorMethod_1 = getIteratorMethod$4;
  var domIterables = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };
  var DOMIterables$4 = domIterables;
  var global$e = global$o;
  var classof$a = classof$g;
  var createNonEnumerableProperty$4 = createNonEnumerableProperty$9;
  var Iterators = iterators;
  var wellKnownSymbol$e = wellKnownSymbol$o;
  var TO_STRING_TAG$1 = wellKnownSymbol$e("toStringTag");
  for (COLLECTION_NAME in DOMIterables$4) {
    Collection = global$e[COLLECTION_NAME];
    CollectionPrototype = Collection && Collection.prototype;
    if (CollectionPrototype && classof$a(CollectionPrototype) !== TO_STRING_TAG$1) {
      createNonEnumerableProperty$4(CollectionPrototype, TO_STRING_TAG$1, COLLECTION_NAME);
    }
    Iterators[COLLECTION_NAME] = Iterators.Array;
  }
  var Collection;
  var CollectionPrototype;
  var COLLECTION_NAME;
  var parent$1g = getIteratorMethod_1;
  var getIteratorMethod$3 = parent$1g;
  var parent$1f = getIteratorMethod$3;
  var getIteratorMethod$2 = parent$1f;
  var parent$1e = getIteratorMethod$2;
  var getIteratorMethod$1 = parent$1e;
  (function(module) {
    module.exports = getIteratorMethod$1;
  })(getIteratorMethod$5);
  (function(module) {
    module.exports = getIteratorMethodExports;
  })(getIteratorMethod$6);
  var _getIteratorMethod = /* @__PURE__ */ getDefaultExportFromCjs(getIteratorMethodExports$1);
  var getOwnPropertySymbolsExports = {};
  var getOwnPropertySymbols$2 = {
    get exports() {
      return getOwnPropertySymbolsExports;
    },
    set exports(v) {
      getOwnPropertySymbolsExports = v;
    }
  };
  var objectGetOwnPropertyNames = {};
  var internalObjectKeys = objectKeysInternal;
  var enumBugKeys = enumBugKeys$3;
  var hiddenKeys$2 = enumBugKeys.concat("length", "prototype");
  objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return internalObjectKeys(O, hiddenKeys$2);
  };
  var objectGetOwnPropertyNamesExternal = {};
  var toAbsoluteIndex$3 = toAbsoluteIndex$5;
  var lengthOfArrayLike$a = lengthOfArrayLike$d;
  var createProperty$4 = createProperty$6;
  var $Array$2 = Array;
  var max$2 = Math.max;
  var arraySliceSimple = function(O, start, end) {
    var length = lengthOfArrayLike$a(O);
    var k = toAbsoluteIndex$3(start, length);
    var fin = toAbsoluteIndex$3(end === void 0 ? length : end, length);
    var result = $Array$2(max$2(fin - k, 0));
    for (var n = 0; k < fin; k++, n++)
      createProperty$4(result, n, O[k]);
    result.length = n;
    return result;
  };
  var classof$9 = classofRaw$2;
  var toIndexedObject$5 = toIndexedObject$b;
  var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
  var arraySlice$6 = arraySliceSimple;
  var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
  var getWindowNames = function(it2) {
    try {
      return $getOwnPropertyNames$1(it2);
    } catch (error) {
      return arraySlice$6(windowNames);
    }
  };
  objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames2(it2) {
    return windowNames && classof$9(it2) == "Window" ? getWindowNames(it2) : $getOwnPropertyNames$1(toIndexedObject$5(it2));
  };
  var objectGetOwnPropertySymbols = {};
  objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;
  var defineProperty$d = objectDefineProperty;
  var defineBuiltInAccessor$3 = function(target, name, descriptor) {
    return defineProperty$d.f(target, name, descriptor);
  };
  var wellKnownSymbolWrapped = {};
  var wellKnownSymbol$d = wellKnownSymbol$o;
  wellKnownSymbolWrapped.f = wellKnownSymbol$d;
  var path$p = path$t;
  var hasOwn$b = hasOwnProperty_1;
  var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
  var defineProperty$c = objectDefineProperty.f;
  var wellKnownSymbolDefine = function(NAME) {
    var Symbol2 = path$p.Symbol || (path$p.Symbol = {});
    if (!hasOwn$b(Symbol2, NAME))
      defineProperty$c(Symbol2, NAME, {
        value: wrappedWellKnownSymbolModule$1.f(NAME)
      });
  };
  var call$a = functionCall;
  var getBuiltIn$b = getBuiltIn$f;
  var wellKnownSymbol$c = wellKnownSymbol$o;
  var defineBuiltIn$3 = defineBuiltIn$6;
  var symbolDefineToPrimitive = function() {
    var Symbol2 = getBuiltIn$b("Symbol");
    var SymbolPrototype2 = Symbol2 && Symbol2.prototype;
    var valueOf = SymbolPrototype2 && SymbolPrototype2.valueOf;
    var TO_PRIMITIVE2 = wellKnownSymbol$c("toPrimitive");
    if (SymbolPrototype2 && !SymbolPrototype2[TO_PRIMITIVE2]) {
      defineBuiltIn$3(SymbolPrototype2, TO_PRIMITIVE2, function(hint) {
        return call$a(valueOf, this);
      }, { arity: 1 });
    }
  };
  var classof$8 = classofRaw$2;
  var isArray$f = Array.isArray || function isArray(argument) {
    return classof$8(argument) == "Array";
  };
  var isArray$e = isArray$f;
  var isConstructor$2 = isConstructor$4;
  var isObject$c = isObject$j;
  var wellKnownSymbol$b = wellKnownSymbol$o;
  var SPECIES$5 = wellKnownSymbol$b("species");
  var $Array$1 = Array;
  var arraySpeciesConstructor$1 = function(originalArray) {
    var C;
    if (isArray$e(originalArray)) {
      C = originalArray.constructor;
      if (isConstructor$2(C) && (C === $Array$1 || isArray$e(C.prototype)))
        C = void 0;
      else if (isObject$c(C)) {
        C = C[SPECIES$5];
        if (C === null)
          C = void 0;
      }
    }
    return C === void 0 ? $Array$1 : C;
  };
  var arraySpeciesConstructor = arraySpeciesConstructor$1;
  var arraySpeciesCreate$4 = function(originalArray, length) {
    return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
  };
  var bind$g = functionBindContext;
  var uncurryThis$k = functionUncurryThis;
  var IndexedObject$2 = indexedObject;
  var toObject$a = toObject$e;
  var lengthOfArrayLike$9 = lengthOfArrayLike$d;
  var arraySpeciesCreate$3 = arraySpeciesCreate$4;
  var push$6 = uncurryThis$k([].push);
  var createMethod$3 = function(TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var IS_FILTER_REJECT = TYPE == 7;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function($this, callbackfn, that, specificCreate) {
      var O = toObject$a($this);
      var self2 = IndexedObject$2(O);
      var boundFunction = bind$g(callbackfn, that);
      var length = lengthOfArrayLike$9(self2);
      var index = 0;
      var create5 = specificCreate || arraySpeciesCreate$3;
      var target = IS_MAP ? create5($this, length) : IS_FILTER || IS_FILTER_REJECT ? create5($this, 0) : void 0;
      var value, result;
      for (; length > index; index++)
        if (NO_HOLES || index in self2) {
          value = self2[index];
          result = boundFunction(value, index, O);
          if (TYPE) {
            if (IS_MAP)
              target[index] = result;
            else if (result)
              switch (TYPE) {
                case 3:
                  return true;
                case 5:
                  return value;
                case 6:
                  return index;
                case 2:
                  push$6(target, value);
              }
            else
              switch (TYPE) {
                case 4:
                  return false;
                case 7:
                  push$6(target, value);
              }
          }
        }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };
  var arrayIteration = {
    // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    forEach: createMethod$3(0),
    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    map: createMethod$3(1),
    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    filter: createMethod$3(2),
    // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    some: createMethod$3(3),
    // `Array.prototype.every` method
    // https://tc39.es/ecma262/#sec-array.prototype.every
    every: createMethod$3(4),
    // `Array.prototype.find` method
    // https://tc39.es/ecma262/#sec-array.prototype.find
    find: createMethod$3(5),
    // `Array.prototype.findIndex` method
    // https://tc39.es/ecma262/#sec-array.prototype.findIndex
    findIndex: createMethod$3(6),
    // `Array.prototype.filterReject` method
    // https://github.com/tc39/proposal-array-filtering
    filterReject: createMethod$3(7)
  };
  var $$W = _export;
  var global$d = global$o;
  var call$9 = functionCall;
  var uncurryThis$j = functionUncurryThis;
  var DESCRIPTORS$b = descriptors;
  var NATIVE_SYMBOL$3 = symbolConstructorDetection;
  var fails$m = fails$x;
  var hasOwn$a = hasOwnProperty_1;
  var isPrototypeOf$q = objectIsPrototypeOf;
  var anObject$5 = anObject$d;
  var toIndexedObject$4 = toIndexedObject$b;
  var toPropertyKey = toPropertyKey$4;
  var $toString = toString$c;
  var createPropertyDescriptor$2 = createPropertyDescriptor$7;
  var nativeObjectCreate = objectCreate;
  var objectKeys$2 = objectKeys$4;
  var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
  var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
  var getOwnPropertySymbolsModule$3 = objectGetOwnPropertySymbols;
  var getOwnPropertyDescriptorModule$2 = objectGetOwnPropertyDescriptor;
  var definePropertyModule$1 = objectDefineProperty;
  var definePropertiesModule = objectDefineProperties;
  var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
  var defineBuiltIn$2 = defineBuiltIn$6;
  var defineBuiltInAccessor$2 = defineBuiltInAccessor$3;
  var shared$3 = sharedExports;
  var sharedKey = sharedKey$4;
  var hiddenKeys$1 = hiddenKeys$6;
  var uid$1 = uid$4;
  var wellKnownSymbol$a = wellKnownSymbol$o;
  var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
  var defineWellKnownSymbol$l = wellKnownSymbolDefine;
  var defineSymbolToPrimitive$1 = symbolDefineToPrimitive;
  var setToStringTag$4 = setToStringTag$7;
  var InternalStateModule$3 = internalState;
  var $forEach$1 = arrayIteration.forEach;
  var HIDDEN = sharedKey("hidden");
  var SYMBOL = "Symbol";
  var PROTOTYPE = "prototype";
  var setInternalState$3 = InternalStateModule$3.set;
  var getInternalState = InternalStateModule$3.getterFor(SYMBOL);
  var ObjectPrototype$1 = Object[PROTOTYPE];
  var $Symbol = global$d.Symbol;
  var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
  var TypeError$2 = global$d.TypeError;
  var QObject = global$d.QObject;
  var nativeGetOwnPropertyDescriptor$1 = getOwnPropertyDescriptorModule$2.f;
  var nativeDefineProperty = definePropertyModule$1.f;
  var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
  var nativePropertyIsEnumerable = propertyIsEnumerableModule$1.f;
  var push$5 = uncurryThis$j([].push);
  var AllSymbols = shared$3("symbols");
  var ObjectPrototypeSymbols = shared$3("op-symbols");
  var WellKnownSymbolsStore$1 = shared$3("wks");
  var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
  var setSymbolDescriptor = DESCRIPTORS$b && fails$m(function() {
    return nativeObjectCreate(nativeDefineProperty({}, "a", {
      get: function() {
        return nativeDefineProperty(this, "a", { value: 7 }).a;
      }
    })).a != 7;
  }) ? function(O, P, Attributes) {
    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$1, P);
    if (ObjectPrototypeDescriptor)
      delete ObjectPrototype$1[P];
    nativeDefineProperty(O, P, Attributes);
    if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
      nativeDefineProperty(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
    }
  } : nativeDefineProperty;
  var wrap = function(tag, description) {
    var symbol2 = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
    setInternalState$3(symbol2, {
      type: SYMBOL,
      tag,
      description
    });
    if (!DESCRIPTORS$b)
      symbol2.description = description;
    return symbol2;
  };
  var $defineProperty = function defineProperty3(O, P, Attributes) {
    if (O === ObjectPrototype$1)
      $defineProperty(ObjectPrototypeSymbols, P, Attributes);
    anObject$5(O);
    var key = toPropertyKey(P);
    anObject$5(Attributes);
    if (hasOwn$a(AllSymbols, key)) {
      if (!Attributes.enumerable) {
        if (!hasOwn$a(O, HIDDEN))
          nativeDefineProperty(O, HIDDEN, createPropertyDescriptor$2(1, {}));
        O[HIDDEN][key] = true;
      } else {
        if (hasOwn$a(O, HIDDEN) && O[HIDDEN][key])
          O[HIDDEN][key] = false;
        Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor$2(0, false) });
      }
      return setSymbolDescriptor(O, key, Attributes);
    }
    return nativeDefineProperty(O, key, Attributes);
  };
  var $defineProperties = function defineProperties2(O, Properties) {
    anObject$5(O);
    var properties = toIndexedObject$4(Properties);
    var keys4 = objectKeys$2(properties).concat($getOwnPropertySymbols(properties));
    $forEach$1(keys4, function(key) {
      if (!DESCRIPTORS$b || call$9($propertyIsEnumerable$1, properties, key))
        $defineProperty(O, key, properties[key]);
    });
    return O;
  };
  var $create = function create2(O, Properties) {
    return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
  };
  var $propertyIsEnumerable$1 = function propertyIsEnumerable2(V) {
    var P = toPropertyKey(V);
    var enumerable = call$9(nativePropertyIsEnumerable, this, P);
    if (this === ObjectPrototype$1 && hasOwn$a(AllSymbols, P) && !hasOwn$a(ObjectPrototypeSymbols, P))
      return false;
    return enumerable || !hasOwn$a(this, P) || !hasOwn$a(AllSymbols, P) || hasOwn$a(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor2(O, P) {
    var it2 = toIndexedObject$4(O);
    var key = toPropertyKey(P);
    if (it2 === ObjectPrototype$1 && hasOwn$a(AllSymbols, key) && !hasOwn$a(ObjectPrototypeSymbols, key))
      return;
    var descriptor = nativeGetOwnPropertyDescriptor$1(it2, key);
    if (descriptor && hasOwn$a(AllSymbols, key) && !(hasOwn$a(it2, HIDDEN) && it2[HIDDEN][key])) {
      descriptor.enumerable = true;
    }
    return descriptor;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames3(O) {
    var names = nativeGetOwnPropertyNames(toIndexedObject$4(O));
    var result = [];
    $forEach$1(names, function(key) {
      if (!hasOwn$a(AllSymbols, key) && !hasOwn$a(hiddenKeys$1, key))
        push$5(result, key);
    });
    return result;
  };
  var $getOwnPropertySymbols = function(O) {
    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
    var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$4(O));
    var result = [];
    $forEach$1(names, function(key) {
      if (hasOwn$a(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$a(ObjectPrototype$1, key))) {
        push$5(result, AllSymbols[key]);
      }
    });
    return result;
  };
  if (!NATIVE_SYMBOL$3) {
    $Symbol = function Symbol2() {
      if (isPrototypeOf$q(SymbolPrototype, this))
        throw TypeError$2("Symbol is not a constructor");
      var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
      var tag = uid$1(description);
      var setter = function(value) {
        if (this === ObjectPrototype$1)
          call$9(setter, ObjectPrototypeSymbols, value);
        if (hasOwn$a(this, HIDDEN) && hasOwn$a(this[HIDDEN], tag))
          this[HIDDEN][tag] = false;
        setSymbolDescriptor(this, tag, createPropertyDescriptor$2(1, value));
      };
      if (DESCRIPTORS$b && USE_SETTER)
        setSymbolDescriptor(ObjectPrototype$1, tag, { configurable: true, set: setter });
      return wrap(tag, description);
    };
    SymbolPrototype = $Symbol[PROTOTYPE];
    defineBuiltIn$2(SymbolPrototype, "toString", function toString3() {
      return getInternalState(this).tag;
    });
    defineBuiltIn$2($Symbol, "withoutSetter", function(description) {
      return wrap(uid$1(description), description);
    });
    propertyIsEnumerableModule$1.f = $propertyIsEnumerable$1;
    definePropertyModule$1.f = $defineProperty;
    definePropertiesModule.f = $defineProperties;
    getOwnPropertyDescriptorModule$2.f = $getOwnPropertyDescriptor;
    getOwnPropertyNamesModule$2.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
    getOwnPropertySymbolsModule$3.f = $getOwnPropertySymbols;
    wrappedWellKnownSymbolModule.f = function(name) {
      return wrap(wellKnownSymbol$a(name), name);
    };
    if (DESCRIPTORS$b) {
      defineBuiltInAccessor$2(SymbolPrototype, "description", {
        configurable: true,
        get: function description() {
          return getInternalState(this).description;
        }
      });
    }
  }
  $$W({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL$3, sham: !NATIVE_SYMBOL$3 }, {
    Symbol: $Symbol
  });
  $forEach$1(objectKeys$2(WellKnownSymbolsStore$1), function(name) {
    defineWellKnownSymbol$l(name);
  });
  $$W({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL$3 }, {
    useSetter: function() {
      USE_SETTER = true;
    },
    useSimple: function() {
      USE_SETTER = false;
    }
  });
  $$W({ target: "Object", stat: true, forced: !NATIVE_SYMBOL$3, sham: !DESCRIPTORS$b }, {
    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    create: $create,
    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    defineProperty: $defineProperty,
    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    defineProperties: $defineProperties,
    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor
  });
  $$W({ target: "Object", stat: true, forced: !NATIVE_SYMBOL$3 }, {
    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    getOwnPropertyNames: $getOwnPropertyNames
  });
  defineSymbolToPrimitive$1();
  setToStringTag$4($Symbol, SYMBOL);
  hiddenKeys$1[HIDDEN] = true;
  var NATIVE_SYMBOL$2 = symbolConstructorDetection;
  var symbolRegistryDetection = NATIVE_SYMBOL$2 && !!Symbol["for"] && !!Symbol.keyFor;
  var $$V = _export;
  var getBuiltIn$a = getBuiltIn$f;
  var hasOwn$9 = hasOwnProperty_1;
  var toString$8 = toString$c;
  var shared$2 = sharedExports;
  var NATIVE_SYMBOL_REGISTRY$1 = symbolRegistryDetection;
  var StringToSymbolRegistry = shared$2("string-to-symbol-registry");
  var SymbolToStringRegistry$1 = shared$2("symbol-to-string-registry");
  $$V({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY$1 }, {
    "for": function(key) {
      var string2 = toString$8(key);
      if (hasOwn$9(StringToSymbolRegistry, string2))
        return StringToSymbolRegistry[string2];
      var symbol2 = getBuiltIn$a("Symbol")(string2);
      StringToSymbolRegistry[string2] = symbol2;
      SymbolToStringRegistry$1[symbol2] = string2;
      return symbol2;
    }
  });
  var $$U = _export;
  var hasOwn$8 = hasOwnProperty_1;
  var isSymbol$2 = isSymbol$5;
  var tryToString$3 = tryToString$6;
  var shared$1 = sharedExports;
  var NATIVE_SYMBOL_REGISTRY = symbolRegistryDetection;
  var SymbolToStringRegistry = shared$1("symbol-to-string-registry");
  $$U({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
    keyFor: function keyFor(sym) {
      if (!isSymbol$2(sym))
        throw TypeError(tryToString$3(sym) + " is not a symbol");
      if (hasOwn$8(SymbolToStringRegistry, sym))
        return SymbolToStringRegistry[sym];
    }
  });
  var uncurryThis$i = functionUncurryThis;
  var arraySlice$5 = uncurryThis$i([].slice);
  var uncurryThis$h = functionUncurryThis;
  var isArray$d = isArray$f;
  var isCallable$7 = isCallable$m;
  var classof$7 = classofRaw$2;
  var toString$7 = toString$c;
  var push$4 = uncurryThis$h([].push);
  var getJsonReplacerFunction = function(replacer) {
    if (isCallable$7(replacer))
      return replacer;
    if (!isArray$d(replacer))
      return;
    var rawLength = replacer.length;
    var keys4 = [];
    for (var i2 = 0; i2 < rawLength; i2++) {
      var element = replacer[i2];
      if (typeof element == "string")
        push$4(keys4, element);
      else if (typeof element == "number" || classof$7(element) == "Number" || classof$7(element) == "String")
        push$4(keys4, toString$7(element));
    }
    var keysLength = keys4.length;
    var root2 = true;
    return function(key, value) {
      if (root2) {
        root2 = false;
        return value;
      }
      if (isArray$d(this))
        return value;
      for (var j = 0; j < keysLength; j++)
        if (keys4[j] === key)
          return value;
    };
  };
  var $$T = _export;
  var getBuiltIn$9 = getBuiltIn$f;
  var apply$4 = functionApply;
  var call$8 = functionCall;
  var uncurryThis$g = functionUncurryThis;
  var fails$l = fails$x;
  var isCallable$6 = isCallable$m;
  var isSymbol$1 = isSymbol$5;
  var arraySlice$4 = arraySlice$5;
  var getReplacerFunction = getJsonReplacerFunction;
  var NATIVE_SYMBOL$1 = symbolConstructorDetection;
  var $String = String;
  var $stringify = getBuiltIn$9("JSON", "stringify");
  var exec$1 = uncurryThis$g(/./.exec);
  var charAt$1 = uncurryThis$g("".charAt);
  var charCodeAt = uncurryThis$g("".charCodeAt);
  var replace$2 = uncurryThis$g("".replace);
  var numberToString = uncurryThis$g(1 .toString);
  var tester = /[\uD800-\uDFFF]/g;
  var low = /^[\uD800-\uDBFF]$/;
  var hi = /^[\uDC00-\uDFFF]$/;
  var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL$1 || fails$l(function() {
    var symbol2 = getBuiltIn$9("Symbol")();
    return $stringify([symbol2]) != "[null]" || $stringify({ a: symbol2 }) != "{}" || $stringify(Object(symbol2)) != "{}";
  });
  var ILL_FORMED_UNICODE = fails$l(function() {
    return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
  });
  var stringifyWithSymbolsFix = function(it2, replacer) {
    var args = arraySlice$4(arguments);
    var $replacer = getReplacerFunction(replacer);
    if (!isCallable$6($replacer) && (it2 === void 0 || isSymbol$1(it2)))
      return;
    args[1] = function(key, value) {
      if (isCallable$6($replacer))
        value = call$8($replacer, this, $String(key), value);
      if (!isSymbol$1(value))
        return value;
    };
    return apply$4($stringify, null, args);
  };
  var fixIllFormed = function(match2, offset, string2) {
    var prev = charAt$1(string2, offset - 1);
    var next2 = charAt$1(string2, offset + 1);
    if (exec$1(low, match2) && !exec$1(hi, next2) || exec$1(hi, match2) && !exec$1(low, prev)) {
      return "\\u" + numberToString(charCodeAt(match2, 0), 16);
    }
    return match2;
  };
  if ($stringify) {
    $$T({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
      // eslint-disable-next-line no-unused-vars -- required for `.length`
      stringify: function stringify3(it2, replacer, space) {
        var args = arraySlice$4(arguments);
        var result = apply$4(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
        return ILL_FORMED_UNICODE && typeof result == "string" ? replace$2(result, tester, fixIllFormed) : result;
      }
    });
  }
  var $$S = _export;
  var NATIVE_SYMBOL = symbolConstructorDetection;
  var fails$k = fails$x;
  var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
  var toObject$9 = toObject$e;
  var FORCED$8 = !NATIVE_SYMBOL || fails$k(function() {
    getOwnPropertySymbolsModule$2.f(1);
  });
  $$S({ target: "Object", stat: true, forced: FORCED$8 }, {
    getOwnPropertySymbols: function getOwnPropertySymbols(it2) {
      var $getOwnPropertySymbols2 = getOwnPropertySymbolsModule$2.f;
      return $getOwnPropertySymbols2 ? $getOwnPropertySymbols2(toObject$9(it2)) : [];
    }
  });
  var path$o = path$t;
  var getOwnPropertySymbols$1 = path$o.Object.getOwnPropertySymbols;
  var parent$1d = getOwnPropertySymbols$1;
  var getOwnPropertySymbols2 = parent$1d;
  (function(module) {
    module.exports = getOwnPropertySymbols2;
  })(getOwnPropertySymbols$2);
  var _Object$getOwnPropertySymbols = /* @__PURE__ */ getDefaultExportFromCjs(getOwnPropertySymbolsExports);
  var getOwnPropertyDescriptorExports$1 = {};
  var getOwnPropertyDescriptor$5 = {
    get exports() {
      return getOwnPropertyDescriptorExports$1;
    },
    set exports(v) {
      getOwnPropertyDescriptorExports$1 = v;
    }
  };
  var getOwnPropertyDescriptorExports = {};
  var getOwnPropertyDescriptor$4 = {
    get exports() {
      return getOwnPropertyDescriptorExports;
    },
    set exports(v) {
      getOwnPropertyDescriptorExports = v;
    }
  };
  var $$R = _export;
  var fails$j = fails$x;
  var toIndexedObject$3 = toIndexedObject$b;
  var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
  var DESCRIPTORS$a = descriptors;
  var FORCED$7 = !DESCRIPTORS$a || fails$j(function() {
    nativeGetOwnPropertyDescriptor(1);
  });
  $$R({ target: "Object", stat: true, forced: FORCED$7, sham: !DESCRIPTORS$a }, {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor3(it2, key) {
      return nativeGetOwnPropertyDescriptor(toIndexedObject$3(it2), key);
    }
  });
  var path$n = path$t;
  var Object$4 = path$n.Object;
  var getOwnPropertyDescriptor$3 = getOwnPropertyDescriptor$4.exports = function getOwnPropertyDescriptor4(it2, key) {
    return Object$4.getOwnPropertyDescriptor(it2, key);
  };
  if (Object$4.getOwnPropertyDescriptor.sham)
    getOwnPropertyDescriptor$3.sham = true;
  var parent$1c = getOwnPropertyDescriptorExports;
  var getOwnPropertyDescriptor$2 = parent$1c;
  (function(module) {
    module.exports = getOwnPropertyDescriptor$2;
  })(getOwnPropertyDescriptor$5);
  var _Object$getOwnPropertyDescriptor = /* @__PURE__ */ getDefaultExportFromCjs(getOwnPropertyDescriptorExports$1);
  var getOwnPropertyDescriptorsExports = {};
  var getOwnPropertyDescriptors$2 = {
    get exports() {
      return getOwnPropertyDescriptorsExports;
    },
    set exports(v) {
      getOwnPropertyDescriptorsExports = v;
    }
  };
  var getBuiltIn$8 = getBuiltIn$f;
  var uncurryThis$f = functionUncurryThis;
  var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
  var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
  var anObject$4 = anObject$d;
  var concat$6 = uncurryThis$f([].concat);
  var ownKeys$9 = getBuiltIn$8("Reflect", "ownKeys") || function ownKeys(it2) {
    var keys4 = getOwnPropertyNamesModule$1.f(anObject$4(it2));
    var getOwnPropertySymbols3 = getOwnPropertySymbolsModule$1.f;
    return getOwnPropertySymbols3 ? concat$6(keys4, getOwnPropertySymbols3(it2)) : keys4;
  };
  var $$Q = _export;
  var DESCRIPTORS$9 = descriptors;
  var ownKeys$8 = ownKeys$9;
  var toIndexedObject$2 = toIndexedObject$b;
  var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
  var createProperty$3 = createProperty$6;
  $$Q({ target: "Object", stat: true, sham: !DESCRIPTORS$9 }, {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object2) {
      var O = toIndexedObject$2(object2);
      var getOwnPropertyDescriptor6 = getOwnPropertyDescriptorModule$1.f;
      var keys4 = ownKeys$8(O);
      var result = {};
      var index = 0;
      var key, descriptor;
      while (keys4.length > index) {
        descriptor = getOwnPropertyDescriptor6(O, key = keys4[index++]);
        if (descriptor !== void 0)
          createProperty$3(result, key, descriptor);
      }
      return result;
    }
  });
  var path$m = path$t;
  var getOwnPropertyDescriptors$1 = path$m.Object.getOwnPropertyDescriptors;
  var parent$1b = getOwnPropertyDescriptors$1;
  var getOwnPropertyDescriptors2 = parent$1b;
  (function(module) {
    module.exports = getOwnPropertyDescriptors2;
  })(getOwnPropertyDescriptors$2);
  var _Object$getOwnPropertyDescriptors = /* @__PURE__ */ getDefaultExportFromCjs(getOwnPropertyDescriptorsExports);
  var definePropertiesExports$1 = {};
  var defineProperties$4 = {
    get exports() {
      return definePropertiesExports$1;
    },
    set exports(v) {
      definePropertiesExports$1 = v;
    }
  };
  var definePropertiesExports = {};
  var defineProperties$3 = {
    get exports() {
      return definePropertiesExports;
    },
    set exports(v) {
      definePropertiesExports = v;
    }
  };
  var $$P = _export;
  var DESCRIPTORS$8 = descriptors;
  var defineProperties$2 = objectDefineProperties.f;
  $$P({ target: "Object", stat: true, forced: Object.defineProperties !== defineProperties$2, sham: !DESCRIPTORS$8 }, {
    defineProperties: defineProperties$2
  });
  var path$l = path$t;
  var Object$3 = path$l.Object;
  var defineProperties$1 = defineProperties$3.exports = function defineProperties3(T, D) {
    return Object$3.defineProperties(T, D);
  };
  if (Object$3.defineProperties.sham)
    defineProperties$1.sham = true;
  var parent$1a = definePropertiesExports;
  var defineProperties4 = parent$1a;
  (function(module) {
    module.exports = defineProperties4;
  })(defineProperties$4);
  var _Object$defineProperties = /* @__PURE__ */ getDefaultExportFromCjs(definePropertiesExports$1);
  var definePropertyExports$3 = {};
  var defineProperty$b = {
    get exports() {
      return definePropertyExports$3;
    },
    set exports(v) {
      definePropertyExports$3 = v;
    }
  };
  var definePropertyExports$2 = {};
  var defineProperty$a = {
    get exports() {
      return definePropertyExports$2;
    },
    set exports(v) {
      definePropertyExports$2 = v;
    }
  };
  var $$O = _export;
  var DESCRIPTORS$7 = descriptors;
  var defineProperty$9 = objectDefineProperty.f;
  $$O({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty$9, sham: !DESCRIPTORS$7 }, {
    defineProperty: defineProperty$9
  });
  var path$k = path$t;
  var Object$2 = path$k.Object;
  var defineProperty$8 = defineProperty$a.exports = function defineProperty4(it2, key, desc) {
    return Object$2.defineProperty(it2, key, desc);
  };
  if (Object$2.defineProperty.sham)
    defineProperty$8.sham = true;
  var parent$19 = definePropertyExports$2;
  var defineProperty$7 = parent$19;
  (function(module) {
    module.exports = defineProperty$7;
  })(defineProperty$b);
  var _Object$defineProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs(definePropertyExports$3);
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var definePropertyExports$1 = {};
  var defineProperty$6 = {
    get exports() {
      return definePropertyExports$1;
    },
    set exports(v) {
      definePropertyExports$1 = v;
    }
  };
  var definePropertyExports = {};
  var defineProperty$5 = {
    get exports() {
      return definePropertyExports;
    },
    set exports(v) {
      definePropertyExports = v;
    }
  };
  var parent$18 = defineProperty$7;
  var defineProperty$4 = parent$18;
  var parent$17 = defineProperty$4;
  var defineProperty$3 = parent$17;
  (function(module) {
    module.exports = defineProperty$3;
  })(defineProperty$5);
  (function(module) {
    module.exports = definePropertyExports;
  })(defineProperty$6);
  var _Object$defineProperty = /* @__PURE__ */ getDefaultExportFromCjs(definePropertyExports$1);
  var symbolExports$2 = {};
  var symbol$6 = {
    get exports() {
      return symbolExports$2;
    },
    set exports(v) {
      symbolExports$2 = v;
    }
  };
  var symbolExports$1 = {};
  var symbol$5 = {
    get exports() {
      return symbolExports$1;
    },
    set exports(v) {
      symbolExports$1 = v;
    }
  };
  var $TypeError$9 = TypeError;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var doesNotExceedSafeInteger$3 = function(it2) {
    if (it2 > MAX_SAFE_INTEGER)
      throw $TypeError$9("Maximum allowed index exceeded");
    return it2;
  };
  var fails$i = fails$x;
  var wellKnownSymbol$9 = wellKnownSymbol$o;
  var V8_VERSION$2 = engineV8Version;
  var SPECIES$4 = wellKnownSymbol$9("species");
  var arrayMethodHasSpeciesSupport$5 = function(METHOD_NAME) {
    return V8_VERSION$2 >= 51 || !fails$i(function() {
      var array2 = [];
      var constructor = array2.constructor = {};
      constructor[SPECIES$4] = function() {
        return { foo: 1 };
      };
      return array2[METHOD_NAME](Boolean).foo !== 1;
    });
  };
  var $$N = _export;
  var fails$h = fails$x;
  var isArray$c = isArray$f;
  var isObject$b = isObject$j;
  var toObject$8 = toObject$e;
  var lengthOfArrayLike$8 = lengthOfArrayLike$d;
  var doesNotExceedSafeInteger$2 = doesNotExceedSafeInteger$3;
  var createProperty$2 = createProperty$6;
  var arraySpeciesCreate$2 = arraySpeciesCreate$4;
  var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;
  var wellKnownSymbol$8 = wellKnownSymbol$o;
  var V8_VERSION$1 = engineV8Version;
  var IS_CONCAT_SPREADABLE = wellKnownSymbol$8("isConcatSpreadable");
  var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION$1 >= 51 || !fails$h(function() {
    var array2 = [];
    array2[IS_CONCAT_SPREADABLE] = false;
    return array2.concat()[0] !== array2;
  });
  var isConcatSpreadable = function(O) {
    if (!isObject$b(O))
      return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== void 0 ? !!spreadable : isArray$c(O);
  };
  var FORCED$6 = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport$4("concat");
  $$N({ target: "Array", proto: true, arity: 1, forced: FORCED$6 }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    concat: function concat(arg) {
      var O = toObject$8(this);
      var A = arraySpeciesCreate$2(O, 0);
      var n = 0;
      var i2, k, length, len, E;
      for (i2 = -1, length = arguments.length; i2 < length; i2++) {
        E = i2 === -1 ? O : arguments[i2];
        if (isConcatSpreadable(E)) {
          len = lengthOfArrayLike$8(E);
          doesNotExceedSafeInteger$2(n + len);
          for (k = 0; k < len; k++, n++)
            if (k in E)
              createProperty$2(A, n, E[k]);
        } else {
          doesNotExceedSafeInteger$2(n + 1);
          createProperty$2(A, n++, E);
        }
      }
      A.length = n;
      return A;
    }
  });
  var defineWellKnownSymbol$k = wellKnownSymbolDefine;
  defineWellKnownSymbol$k("asyncIterator");
  var defineWellKnownSymbol$j = wellKnownSymbolDefine;
  defineWellKnownSymbol$j("hasInstance");
  var defineWellKnownSymbol$i = wellKnownSymbolDefine;
  defineWellKnownSymbol$i("isConcatSpreadable");
  var defineWellKnownSymbol$h = wellKnownSymbolDefine;
  defineWellKnownSymbol$h("iterator");
  var defineWellKnownSymbol$g = wellKnownSymbolDefine;
  defineWellKnownSymbol$g("match");
  var defineWellKnownSymbol$f = wellKnownSymbolDefine;
  defineWellKnownSymbol$f("matchAll");
  var defineWellKnownSymbol$e = wellKnownSymbolDefine;
  defineWellKnownSymbol$e("replace");
  var defineWellKnownSymbol$d = wellKnownSymbolDefine;
  defineWellKnownSymbol$d("search");
  var defineWellKnownSymbol$c = wellKnownSymbolDefine;
  defineWellKnownSymbol$c("species");
  var defineWellKnownSymbol$b = wellKnownSymbolDefine;
  defineWellKnownSymbol$b("split");
  var defineWellKnownSymbol$a = wellKnownSymbolDefine;
  var defineSymbolToPrimitive = symbolDefineToPrimitive;
  defineWellKnownSymbol$a("toPrimitive");
  defineSymbolToPrimitive();
  var getBuiltIn$7 = getBuiltIn$f;
  var defineWellKnownSymbol$9 = wellKnownSymbolDefine;
  var setToStringTag$3 = setToStringTag$7;
  defineWellKnownSymbol$9("toStringTag");
  setToStringTag$3(getBuiltIn$7("Symbol"), "Symbol");
  var defineWellKnownSymbol$8 = wellKnownSymbolDefine;
  defineWellKnownSymbol$8("unscopables");
  var global$c = global$o;
  var setToStringTag$2 = setToStringTag$7;
  setToStringTag$2(global$c.JSON, "JSON", true);
  var path$j = path$t;
  var symbol$4 = path$j.Symbol;
  var parent$16 = symbol$4;
  var symbol$3 = parent$16;
  var defineWellKnownSymbol$7 = wellKnownSymbolDefine;
  defineWellKnownSymbol$7("dispose");
  var parent$15 = symbol$3;
  var symbol$2 = parent$15;
  var defineWellKnownSymbol$6 = wellKnownSymbolDefine;
  defineWellKnownSymbol$6("asyncDispose");
  var $$M = _export;
  var getBuiltIn$6 = getBuiltIn$f;
  var uncurryThis$e = functionUncurryThis;
  var Symbol$4 = getBuiltIn$6("Symbol");
  var keyFor2 = Symbol$4.keyFor;
  var thisSymbolValue$1 = uncurryThis$e(Symbol$4.prototype.valueOf);
  $$M({ target: "Symbol", stat: true }, {
    isRegistered: function isRegistered(value) {
      try {
        return keyFor2(thisSymbolValue$1(value)) !== void 0;
      } catch (error) {
        return false;
      }
    }
  });
  var $$L = _export;
  var shared = sharedExports;
  var getBuiltIn$5 = getBuiltIn$f;
  var uncurryThis$d = functionUncurryThis;
  var isSymbol = isSymbol$5;
  var wellKnownSymbol$7 = wellKnownSymbol$o;
  var Symbol$3 = getBuiltIn$5("Symbol");
  var $isWellKnown = Symbol$3.isWellKnown;
  var getOwnPropertyNames4 = getBuiltIn$5("Object", "getOwnPropertyNames");
  var thisSymbolValue = uncurryThis$d(Symbol$3.prototype.valueOf);
  var WellKnownSymbolsStore = shared("wks");
  for (i$1 = 0, symbolKeys = getOwnPropertyNames4(Symbol$3), symbolKeysLength = symbolKeys.length; i$1 < symbolKeysLength; i$1++) {
    try {
      symbolKey = symbolKeys[i$1];
      if (isSymbol(Symbol$3[symbolKey]))
        wellKnownSymbol$7(symbolKey);
    } catch (error) {
    }
  }
  var symbolKey;
  var i$1;
  var symbolKeys;
  var symbolKeysLength;
  $$L({ target: "Symbol", stat: true, forced: true }, {
    isWellKnown: function isWellKnown(value) {
      if ($isWellKnown && $isWellKnown(value))
        return true;
      try {
        var symbol2 = thisSymbolValue(value);
        for (var j = 0, keys4 = getOwnPropertyNames4(WellKnownSymbolsStore), keysLength = keys4.length; j < keysLength; j++) {
          if (WellKnownSymbolsStore[keys4[j]] == symbol2)
            return true;
        }
      } catch (error) {
      }
      return false;
    }
  });
  var defineWellKnownSymbol$5 = wellKnownSymbolDefine;
  defineWellKnownSymbol$5("matcher");
  var defineWellKnownSymbol$4 = wellKnownSymbolDefine;
  defineWellKnownSymbol$4("metadataKey");
  var defineWellKnownSymbol$3 = wellKnownSymbolDefine;
  defineWellKnownSymbol$3("observable");
  var defineWellKnownSymbol$2 = wellKnownSymbolDefine;
  defineWellKnownSymbol$2("metadata");
  var defineWellKnownSymbol$1 = wellKnownSymbolDefine;
  defineWellKnownSymbol$1("patternMatch");
  var defineWellKnownSymbol = wellKnownSymbolDefine;
  defineWellKnownSymbol("replaceAll");
  var parent$14 = symbol$2;
  var symbol$1 = parent$14;
  (function(module) {
    module.exports = symbol$1;
  })(symbol$5);
  (function(module) {
    module.exports = symbolExports$1;
  })(symbol$6);
  var _Symbol$1 = /* @__PURE__ */ getDefaultExportFromCjs(symbolExports$2);
  var iteratorExports$2 = {};
  var iterator$6 = {
    get exports() {
      return iteratorExports$2;
    },
    set exports(v) {
      iteratorExports$2 = v;
    }
  };
  var iteratorExports$1 = {};
  var iterator$5 = {
    get exports() {
      return iteratorExports$1;
    },
    set exports(v) {
      iteratorExports$1 = v;
    }
  };
  var WrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
  var iterator$4 = WrappedWellKnownSymbolModule$1.f("iterator");
  var parent$13 = iterator$4;
  var iterator$3 = parent$13;
  var parent$12 = iterator$3;
  var iterator$2 = parent$12;
  var parent$11 = iterator$2;
  var iterator$1 = parent$11;
  (function(module) {
    module.exports = iterator$1;
  })(iterator$5);
  (function(module) {
    module.exports = iteratorExports$1;
  })(iterator$6);
  var _Symbol$iterator$1 = /* @__PURE__ */ getDefaultExportFromCjs(iteratorExports$2);
  function _typeof$1(obj) {
    "@babel/helpers - typeof";
    return _typeof$1 = "function" == typeof _Symbol$1 && "symbol" == typeof _Symbol$iterator$1 ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof _Symbol$1 && obj2.constructor === _Symbol$1 && obj2 !== _Symbol$1.prototype ? "symbol" : typeof obj2;
    }, _typeof$1(obj);
  }
  var toPrimitiveExports$1 = {};
  var toPrimitive$5 = {
    get exports() {
      return toPrimitiveExports$1;
    },
    set exports(v) {
      toPrimitiveExports$1 = v;
    }
  };
  var toPrimitiveExports = {};
  var toPrimitive$4 = {
    get exports() {
      return toPrimitiveExports;
    },
    set exports(v) {
      toPrimitiveExports = v;
    }
  };
  var WrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
  var toPrimitive$3 = WrappedWellKnownSymbolModule.f("toPrimitive");
  var parent$10 = toPrimitive$3;
  var toPrimitive$2 = parent$10;
  var parent$$ = toPrimitive$2;
  var toPrimitive$1 = parent$$;
  var parent$_ = toPrimitive$1;
  var toPrimitive = parent$_;
  (function(module) {
    module.exports = toPrimitive;
  })(toPrimitive$4);
  (function(module) {
    module.exports = toPrimitiveExports;
  })(toPrimitive$5);
  var _Symbol$toPrimitive = /* @__PURE__ */ getDefaultExportFromCjs(toPrimitiveExports$1);
  function _toPrimitive(input, hint) {
    if (_typeof$1(input) !== "object" || input === null)
      return input;
    var prim = input[_Symbol$toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$1(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof$1(key) === "symbol" ? key : String(key);
  }
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      _Object$defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    _Object$defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      _Object$defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var isArrayExports$2 = {};
  var isArray$b = {
    get exports() {
      return isArrayExports$2;
    },
    set exports(v) {
      isArrayExports$2 = v;
    }
  };
  var isArrayExports$1 = {};
  var isArray$a = {
    get exports() {
      return isArrayExports$1;
    },
    set exports(v) {
      isArrayExports$1 = v;
    }
  };
  var $$K = _export;
  var isArray$9 = isArray$f;
  $$K({ target: "Array", stat: true }, {
    isArray: isArray$9
  });
  var path$i = path$t;
  var isArray$8 = path$i.Array.isArray;
  var parent$Z = isArray$8;
  var isArray$7 = parent$Z;
  var parent$Y = isArray$7;
  var isArray$6 = parent$Y;
  var parent$X = isArray$6;
  var isArray$5 = parent$X;
  (function(module) {
    module.exports = isArray$5;
  })(isArray$a);
  (function(module) {
    module.exports = isArrayExports$1;
  })(isArray$b);
  var _Array$isArray$1 = /* @__PURE__ */ getDefaultExportFromCjs(isArrayExports$2);
  function _arrayWithHoles(arr) {
    if (_Array$isArray$1(arr))
      return arr;
  }
  function _iterableToArrayLimit(arr, i2) {
    var _i = null == arr ? null : "undefined" != typeof _Symbol$1 && _getIteratorMethod(arr) || arr["@@iterator"];
    if (null != _i) {
      var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i2) {
          if (Object(_i) !== _i)
            return;
          _n = false;
        } else
          for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i2); _n = true)
            ;
      } catch (err) {
        _d = true, _e = err;
      } finally {
        try {
          if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
            return;
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
  }
  var sliceExports$2 = {};
  var slice$7 = {
    get exports() {
      return sliceExports$2;
    },
    set exports(v) {
      sliceExports$2 = v;
    }
  };
  var sliceExports$1 = {};
  var slice$6 = {
    get exports() {
      return sliceExports$1;
    },
    set exports(v) {
      sliceExports$1 = v;
    }
  };
  var $$J = _export;
  var isArray$4 = isArray$f;
  var isConstructor$1 = isConstructor$4;
  var isObject$a = isObject$j;
  var toAbsoluteIndex$2 = toAbsoluteIndex$5;
  var lengthOfArrayLike$7 = lengthOfArrayLike$d;
  var toIndexedObject$1 = toIndexedObject$b;
  var createProperty$1 = createProperty$6;
  var wellKnownSymbol$6 = wellKnownSymbol$o;
  var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;
  var nativeSlice = arraySlice$5;
  var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$3("slice");
  var SPECIES$3 = wellKnownSymbol$6("species");
  var $Array = Array;
  var max$1 = Math.max;
  $$J({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$3 }, {
    slice: function slice(start, end) {
      var O = toIndexedObject$1(this);
      var length = lengthOfArrayLike$7(O);
      var k = toAbsoluteIndex$2(start, length);
      var fin = toAbsoluteIndex$2(end === void 0 ? length : end, length);
      var Constructor, result, n;
      if (isArray$4(O)) {
        Constructor = O.constructor;
        if (isConstructor$1(Constructor) && (Constructor === $Array || isArray$4(Constructor.prototype))) {
          Constructor = void 0;
        } else if (isObject$a(Constructor)) {
          Constructor = Constructor[SPECIES$3];
          if (Constructor === null)
            Constructor = void 0;
        }
        if (Constructor === $Array || Constructor === void 0) {
          return nativeSlice(O, k, fin);
        }
      }
      result = new (Constructor === void 0 ? $Array : Constructor)(max$1(fin - k, 0));
      for (n = 0; k < fin; k++, n++)
        if (k in O)
          createProperty$1(result, n, O[k]);
      result.length = n;
      return result;
    }
  });
  var path$h = path$t;
  var entryVirtual$o = function(CONSTRUCTOR) {
    return path$h[CONSTRUCTOR + "Prototype"];
  };
  var entryVirtual$n = entryVirtual$o;
  var slice$5 = entryVirtual$n("Array").slice;
  var isPrototypeOf$p = objectIsPrototypeOf;
  var method$l = slice$5;
  var ArrayPrototype$j = Array.prototype;
  var slice$4 = function(it2) {
    var own = it2.slice;
    return it2 === ArrayPrototype$j || isPrototypeOf$p(ArrayPrototype$j, it2) && own === ArrayPrototype$j.slice ? method$l : own;
  };
  var parent$W = slice$4;
  var slice$3 = parent$W;
  var parent$V = slice$3;
  var slice$2 = parent$V;
  var parent$U = slice$2;
  var slice$1 = parent$U;
  (function(module) {
    module.exports = slice$1;
  })(slice$6);
  (function(module) {
    module.exports = sliceExports$1;
  })(slice$7);
  var _sliceInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs(sliceExports$2);
  var fromExports$1 = {};
  var from$3 = {
    get exports() {
      return fromExports$1;
    },
    set exports(v) {
      fromExports$1 = v;
    }
  };
  var fromExports = {};
  var from$2 = {
    get exports() {
      return fromExports;
    },
    set exports(v) {
      fromExports = v;
    }
  };
  var parent$T = from$4;
  var from$1 = parent$T;
  var parent$S = from$1;
  var from2 = parent$S;
  (function(module) {
    module.exports = from2;
  })(from$2);
  (function(module) {
    module.exports = fromExports;
  })(from$3);
  var _Array$from = /* @__PURE__ */ getDefaultExportFromCjs(fromExports$1);
  function _arrayLikeToArray$8(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  function _unsupportedIterableToArray$8(o, minLen) {
    var _context;
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray$8(o, minLen);
    var n = _sliceInstanceProperty$1(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray$8(o, minLen);
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray$8(arr, i2) || _nonIterableRest();
  }
  function _arrayWithoutHoles(arr) {
    if (_Array$isArray$1(arr))
      return _arrayLikeToArray$8(arr);
  }
  function _iterableToArray(iter) {
    if (typeof _Symbol$1 !== "undefined" && _getIteratorMethod(iter) != null || iter["@@iterator"] != null)
      return _Array$from(iter);
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$8(arr) || _nonIterableSpread();
  }
  var symbolExports = {};
  var symbol = {
    get exports() {
      return symbolExports;
    },
    set exports(v) {
      symbolExports = v;
    }
  };
  (function(module) {
    module.exports = symbol$3;
  })(symbol);
  var _Symbol = /* @__PURE__ */ getDefaultExportFromCjs(symbolExports);
  var concatExports = {};
  var concat$5 = {
    get exports() {
      return concatExports;
    },
    set exports(v) {
      concatExports = v;
    }
  };
  var entryVirtual$m = entryVirtual$o;
  var concat$4 = entryVirtual$m("Array").concat;
  var isPrototypeOf$o = objectIsPrototypeOf;
  var method$k = concat$4;
  var ArrayPrototype$i = Array.prototype;
  var concat$3 = function(it2) {
    var own = it2.concat;
    return it2 === ArrayPrototype$i || isPrototypeOf$o(ArrayPrototype$i, it2) && own === ArrayPrototype$i.concat ? method$k : own;
  };
  var parent$R = concat$3;
  var concat$2 = parent$R;
  (function(module) {
    module.exports = concat$2;
  })(concat$5);
  var _concatInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(concatExports);
  var sliceExports = {};
  var slice2 = {
    get exports() {
      return sliceExports;
    },
    set exports(v) {
      sliceExports = v;
    }
  };
  (function(module) {
    module.exports = slice$3;
  })(slice2);
  var _sliceInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(sliceExports);
  var ownKeysExports = {};
  var ownKeys$7 = {
    get exports() {
      return ownKeysExports;
    },
    set exports(v) {
      ownKeysExports = v;
    }
  };
  var $$I = _export;
  var ownKeys$6 = ownKeys$9;
  $$I({ target: "Reflect", stat: true }, {
    ownKeys: ownKeys$6
  });
  var path$g = path$t;
  var ownKeys$5 = path$g.Reflect.ownKeys;
  var parent$Q = ownKeys$5;
  var ownKeys$4 = parent$Q;
  (function(module) {
    module.exports = ownKeys$4;
  })(ownKeys$7);
  var _Reflect$ownKeys = /* @__PURE__ */ getDefaultExportFromCjs(ownKeysExports);
  var isArrayExports = {};
  var isArray$3 = {
    get exports() {
      return isArrayExports;
    },
    set exports(v) {
      isArrayExports = v;
    }
  };
  (function(module) {
    module.exports = isArray$7;
  })(isArray$3);
  var _Array$isArray = /* @__PURE__ */ getDefaultExportFromCjs(isArrayExports);
  var mapExports$1 = {};
  var map$6 = {
    get exports() {
      return mapExports$1;
    },
    set exports(v) {
      mapExports$1 = v;
    }
  };
  var $$H = _export;
  var $map = arrayIteration.map;
  var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;
  var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$2("map");
  $$H({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {
    map: function map(callbackfn) {
      return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var entryVirtual$l = entryVirtual$o;
  var map$5 = entryVirtual$l("Array").map;
  var isPrototypeOf$n = objectIsPrototypeOf;
  var method$j = map$5;
  var ArrayPrototype$h = Array.prototype;
  var map$4 = function(it2) {
    var own = it2.map;
    return it2 === ArrayPrototype$h || isPrototypeOf$n(ArrayPrototype$h, it2) && own === ArrayPrototype$h.map ? method$j : own;
  };
  var parent$P = map$4;
  var map$3 = parent$P;
  (function(module) {
    module.exports = map$3;
  })(map$6);
  var _mapInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(mapExports$1);
  var keysExports$1 = {};
  var keys$6 = {
    get exports() {
      return keysExports$1;
    },
    set exports(v) {
      keysExports$1 = v;
    }
  };
  var $$G = _export;
  var toObject$7 = toObject$e;
  var nativeKeys = objectKeys$4;
  var fails$g = fails$x;
  var FAILS_ON_PRIMITIVES$2 = fails$g(function() {
    nativeKeys(1);
  });
  $$G({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES$2 }, {
    keys: function keys2(it2) {
      return nativeKeys(toObject$7(it2));
    }
  });
  var path$f = path$t;
  var keys$5 = path$f.Object.keys;
  var parent$O = keys$5;
  var keys$4 = parent$O;
  (function(module) {
    module.exports = keys$4;
  })(keys$6);
  var _Object$keys = /* @__PURE__ */ getDefaultExportFromCjs(keysExports$1);
  var nowExports = {};
  var now$3 = {
    get exports() {
      return nowExports;
    },
    set exports(v) {
      nowExports = v;
    }
  };
  var $$F = _export;
  var uncurryThis$c = functionUncurryThis;
  var $Date = Date;
  var thisTimeValue = uncurryThis$c($Date.prototype.getTime);
  $$F({ target: "Date", stat: true }, {
    now: function now() {
      return thisTimeValue(new $Date());
    }
  });
  var path$e = path$t;
  var now$2 = path$e.Date.now;
  var parent$N = now$2;
  var now$1 = parent$N;
  (function(module) {
    module.exports = now$1;
  })(now$3);
  var _Date$now = /* @__PURE__ */ getDefaultExportFromCjs(nowExports);
  var bindExports$2 = {};
  var bind$f = {
    get exports() {
      return bindExports$2;
    },
    set exports(v) {
      bindExports$2 = v;
    }
  };
  var uncurryThis$b = functionUncurryThis;
  var aCallable$9 = aCallable$e;
  var isObject$9 = isObject$j;
  var hasOwn$7 = hasOwnProperty_1;
  var arraySlice$3 = arraySlice$5;
  var NATIVE_BIND = functionBindNative;
  var $Function = Function;
  var concat$1 = uncurryThis$b([].concat);
  var join2 = uncurryThis$b([].join);
  var factories = {};
  var construct$3 = function(C, argsLength, args) {
    if (!hasOwn$7(factories, argsLength)) {
      for (var list = [], i2 = 0; i2 < argsLength; i2++)
        list[i2] = "a[" + i2 + "]";
      factories[argsLength] = $Function("C,a", "return new C(" + join2(list, ",") + ")");
    }
    return factories[argsLength](C, args);
  };
  var functionBind = NATIVE_BIND ? $Function.bind : function bind(that) {
    var F = aCallable$9(this);
    var Prototype = F.prototype;
    var partArgs = arraySlice$3(arguments, 1);
    var boundFunction = function bound() {
      var args = concat$1(partArgs, arraySlice$3(arguments));
      return this instanceof boundFunction ? construct$3(F, args.length, args) : F.apply(that, args);
    };
    if (isObject$9(Prototype))
      boundFunction.prototype = Prototype;
    return boundFunction;
  };
  var $$E = _export;
  var bind$e = functionBind;
  $$E({ target: "Function", proto: true, forced: Function.bind !== bind$e }, {
    bind: bind$e
  });
  var entryVirtual$k = entryVirtual$o;
  var bind$d = entryVirtual$k("Function").bind;
  var isPrototypeOf$m = objectIsPrototypeOf;
  var method$i = bind$d;
  var FunctionPrototype = Function.prototype;
  var bind$c = function(it2) {
    var own = it2.bind;
    return it2 === FunctionPrototype || isPrototypeOf$m(FunctionPrototype, it2) && own === FunctionPrototype.bind ? method$i : own;
  };
  var parent$M = bind$c;
  var bind$b = parent$M;
  (function(module) {
    module.exports = bind$b;
  })(bind$f);
  var _bindInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs(bindExports$2);
  var forEachExports$2 = {};
  var forEach$a = {
    get exports() {
      return forEachExports$2;
    },
    set exports(v) {
      forEachExports$2 = v;
    }
  };
  var fails$f = fails$x;
  var arrayMethodIsStrict$6 = function(METHOD_NAME, argument) {
    var method2 = [][METHOD_NAME];
    return !!method2 && fails$f(function() {
      method2.call(null, argument || function() {
        return 1;
      }, 1);
    });
  };
  var $forEach = arrayIteration.forEach;
  var arrayMethodIsStrict$5 = arrayMethodIsStrict$6;
  var STRICT_METHOD$3 = arrayMethodIsStrict$5("forEach");
  var arrayForEach = !STRICT_METHOD$3 ? function forEach(callbackfn) {
    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  } : [].forEach;
  var $$D = _export;
  var forEach$9 = arrayForEach;
  $$D({ target: "Array", proto: true, forced: [].forEach != forEach$9 }, {
    forEach: forEach$9
  });
  var entryVirtual$j = entryVirtual$o;
  var forEach$8 = entryVirtual$j("Array").forEach;
  var parent$L = forEach$8;
  var forEach$7 = parent$L;
  var classof$6 = classof$g;
  var hasOwn$6 = hasOwnProperty_1;
  var isPrototypeOf$l = objectIsPrototypeOf;
  var method$h = forEach$7;
  var ArrayPrototype$g = Array.prototype;
  var DOMIterables$3 = {
    DOMTokenList: true,
    NodeList: true
  };
  var forEach$6 = function(it2) {
    var own = it2.forEach;
    return it2 === ArrayPrototype$g || isPrototypeOf$l(ArrayPrototype$g, it2) && own === ArrayPrototype$g.forEach || hasOwn$6(DOMIterables$3, classof$6(it2)) ? method$h : own;
  };
  (function(module) {
    module.exports = forEach$6;
  })(forEach$a);
  var _forEachInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(forEachExports$2);
  var reverseExports$2 = {};
  var reverse$7 = {
    get exports() {
      return reverseExports$2;
    },
    set exports(v) {
      reverseExports$2 = v;
    }
  };
  var $$C = _export;
  var uncurryThis$a = functionUncurryThis;
  var isArray$2 = isArray$f;
  var nativeReverse = uncurryThis$a([].reverse);
  var test$1 = [1, 2];
  $$C({ target: "Array", proto: true, forced: String(test$1) === String(test$1.reverse()) }, {
    reverse: function reverse() {
      if (isArray$2(this))
        this.length = this.length;
      return nativeReverse(this);
    }
  });
  var entryVirtual$i = entryVirtual$o;
  var reverse$6 = entryVirtual$i("Array").reverse;
  var isPrototypeOf$k = objectIsPrototypeOf;
  var method$g = reverse$6;
  var ArrayPrototype$f = Array.prototype;
  var reverse$5 = function(it2) {
    var own = it2.reverse;
    return it2 === ArrayPrototype$f || isPrototypeOf$k(ArrayPrototype$f, it2) && own === ArrayPrototype$f.reverse ? method$g : own;
  };
  var parent$K = reverse$5;
  var reverse$4 = parent$K;
  (function(module) {
    module.exports = reverse$4;
  })(reverse$7);
  var _reverseInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(reverseExports$2);
  var spliceExports = {};
  var splice$3 = {
    get exports() {
      return spliceExports;
    },
    set exports(v) {
      spliceExports = v;
    }
  };
  var DESCRIPTORS$6 = descriptors;
  var isArray$1 = isArray$f;
  var $TypeError$8 = TypeError;
  var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
  var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS$6 && !function() {
    if (this !== void 0)
      return true;
    try {
      Object.defineProperty([], "length", { writable: false }).length = 1;
    } catch (error) {
      return error instanceof TypeError;
    }
  }();
  var arraySetLength = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function(O, length) {
    if (isArray$1(O) && !getOwnPropertyDescriptor$1(O, "length").writable) {
      throw $TypeError$8("Cannot set read only .length");
    }
    return O.length = length;
  } : function(O, length) {
    return O.length = length;
  };
  var tryToString$2 = tryToString$6;
  var $TypeError$7 = TypeError;
  var deletePropertyOrThrow$2 = function(O, P) {
    if (!delete O[P])
      throw $TypeError$7("Cannot delete property " + tryToString$2(P) + " of " + tryToString$2(O));
  };
  var $$B = _export;
  var toObject$6 = toObject$e;
  var toAbsoluteIndex$1 = toAbsoluteIndex$5;
  var toIntegerOrInfinity$1 = toIntegerOrInfinity$5;
  var lengthOfArrayLike$6 = lengthOfArrayLike$d;
  var setArrayLength = arraySetLength;
  var doesNotExceedSafeInteger$1 = doesNotExceedSafeInteger$3;
  var arraySpeciesCreate$1 = arraySpeciesCreate$4;
  var createProperty = createProperty$6;
  var deletePropertyOrThrow$1 = deletePropertyOrThrow$2;
  var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
  var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1("splice");
  var max = Math.max;
  var min = Math.min;
  $$B({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {
    splice: function splice(start, deleteCount) {
      var O = toObject$6(this);
      var len = lengthOfArrayLike$6(O);
      var actualStart = toAbsoluteIndex$1(start, len);
      var argumentsLength = arguments.length;
      var insertCount, actualDeleteCount, A, k, from3, to;
      if (argumentsLength === 0) {
        insertCount = actualDeleteCount = 0;
      } else if (argumentsLength === 1) {
        insertCount = 0;
        actualDeleteCount = len - actualStart;
      } else {
        insertCount = argumentsLength - 2;
        actualDeleteCount = min(max(toIntegerOrInfinity$1(deleteCount), 0), len - actualStart);
      }
      doesNotExceedSafeInteger$1(len + insertCount - actualDeleteCount);
      A = arraySpeciesCreate$1(O, actualDeleteCount);
      for (k = 0; k < actualDeleteCount; k++) {
        from3 = actualStart + k;
        if (from3 in O)
          createProperty(A, k, O[from3]);
      }
      A.length = actualDeleteCount;
      if (insertCount < actualDeleteCount) {
        for (k = actualStart; k < len - actualDeleteCount; k++) {
          from3 = k + actualDeleteCount;
          to = k + insertCount;
          if (from3 in O)
            O[to] = O[from3];
          else
            deletePropertyOrThrow$1(O, to);
        }
        for (k = len; k > len - actualDeleteCount + insertCount; k--)
          deletePropertyOrThrow$1(O, k - 1);
      } else if (insertCount > actualDeleteCount) {
        for (k = len - actualDeleteCount; k > actualStart; k--) {
          from3 = k + actualDeleteCount - 1;
          to = k + insertCount - 1;
          if (from3 in O)
            O[to] = O[from3];
          else
            deletePropertyOrThrow$1(O, to);
        }
      }
      for (k = 0; k < insertCount; k++) {
        O[k + actualStart] = arguments[k + 2];
      }
      setArrayLength(O, len - actualDeleteCount + insertCount);
      return A;
    }
  });
  var entryVirtual$h = entryVirtual$o;
  var splice$2 = entryVirtual$h("Array").splice;
  var isPrototypeOf$j = objectIsPrototypeOf;
  var method$f = splice$2;
  var ArrayPrototype$e = Array.prototype;
  var splice$1 = function(it2) {
    var own = it2.splice;
    return it2 === ArrayPrototype$e || isPrototypeOf$j(ArrayPrototype$e, it2) && own === ArrayPrototype$e.splice ? method$f : own;
  };
  var parent$J = splice$1;
  var splice2 = parent$J;
  (function(module) {
    module.exports = splice2;
  })(splice$3);
  var _spliceInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(spliceExports);
  var assignExports = {};
  var assign$5 = {
    get exports() {
      return assignExports;
    },
    set exports(v) {
      assignExports = v;
    }
  };
  var DESCRIPTORS$5 = descriptors;
  var uncurryThis$9 = functionUncurryThis;
  var call$7 = functionCall;
  var fails$e = fails$x;
  var objectKeys$1 = objectKeys$4;
  var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
  var propertyIsEnumerableModule = objectPropertyIsEnumerable;
  var toObject$5 = toObject$e;
  var IndexedObject$1 = indexedObject;
  var $assign = Object.assign;
  var defineProperty$2 = Object.defineProperty;
  var concat2 = uncurryThis$9([].concat);
  var objectAssign = !$assign || fails$e(function() {
    if (DESCRIPTORS$5 && $assign({ b: 1 }, $assign(defineProperty$2({}, "a", {
      enumerable: true,
      get: function() {
        defineProperty$2(this, "b", {
          value: 3,
          enumerable: false
        });
      }
    }), { b: 2 })).b !== 1)
      return true;
    var A = {};
    var B = {};
    var symbol2 = Symbol();
    var alphabet = "abcdefghijklmnopqrst";
    A[symbol2] = 7;
    alphabet.split("").forEach(function(chr) {
      B[chr] = chr;
    });
    return $assign({}, A)[symbol2] != 7 || objectKeys$1($assign({}, B)).join("") != alphabet;
  }) ? function assign(target, source) {
    var T = toObject$5(target);
    var argumentsLength = arguments.length;
    var index = 1;
    var getOwnPropertySymbols3 = getOwnPropertySymbolsModule.f;
    var propertyIsEnumerable4 = propertyIsEnumerableModule.f;
    while (argumentsLength > index) {
      var S = IndexedObject$1(arguments[index++]);
      var keys4 = getOwnPropertySymbols3 ? concat2(objectKeys$1(S), getOwnPropertySymbols3(S)) : objectKeys$1(S);
      var length = keys4.length;
      var j = 0;
      var key;
      while (length > j) {
        key = keys4[j++];
        if (!DESCRIPTORS$5 || call$7(propertyIsEnumerable4, S, key))
          T[key] = S[key];
      }
    }
    return T;
  } : $assign;
  var $$A = _export;
  var assign$4 = objectAssign;
  $$A({ target: "Object", stat: true, arity: 2, forced: Object.assign !== assign$4 }, {
    assign: assign$4
  });
  var path$d = path$t;
  var assign$3 = path$d.Object.assign;
  var parent$I = assign$3;
  var assign$2 = parent$I;
  (function(module) {
    module.exports = assign$2;
  })(assign$5);
  var _Object$assign = /* @__PURE__ */ getDefaultExportFromCjs(assignExports);
  var includesExports = {};
  var includes$4 = {
    get exports() {
      return includesExports;
    },
    set exports(v) {
      includesExports = v;
    }
  };
  var $$z = _export;
  var $includes = arrayIncludes.includes;
  var fails$d = fails$x;
  var BROKEN_ON_SPARSE = fails$d(function() {
    return !Array(1).includes();
  });
  $$z({ target: "Array", proto: true, forced: BROKEN_ON_SPARSE }, {
    includes: function includes(el) {
      return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var entryVirtual$g = entryVirtual$o;
  var includes$3 = entryVirtual$g("Array").includes;
  var isObject$8 = isObject$j;
  var classof$5 = classofRaw$2;
  var wellKnownSymbol$5 = wellKnownSymbol$o;
  var MATCH$1 = wellKnownSymbol$5("match");
  var isRegexp = function(it2) {
    var isRegExp2;
    return isObject$8(it2) && ((isRegExp2 = it2[MATCH$1]) !== void 0 ? !!isRegExp2 : classof$5(it2) == "RegExp");
  };
  var isRegExp = isRegexp;
  var $TypeError$6 = TypeError;
  var notARegexp = function(it2) {
    if (isRegExp(it2)) {
      throw $TypeError$6("The method doesn't accept regular expressions");
    }
    return it2;
  };
  var wellKnownSymbol$4 = wellKnownSymbol$o;
  var MATCH = wellKnownSymbol$4("match");
  var correctIsRegexpLogic = function(METHOD_NAME) {
    var regexp = /./;
    try {
      "/./"[METHOD_NAME](regexp);
    } catch (error1) {
      try {
        regexp[MATCH] = false;
        return "/./"[METHOD_NAME](regexp);
      } catch (error2) {
      }
    }
    return false;
  };
  var $$y = _export;
  var uncurryThis$8 = functionUncurryThis;
  var notARegExp = notARegexp;
  var requireObjectCoercible$2 = requireObjectCoercible$6;
  var toString$6 = toString$c;
  var correctIsRegExpLogic = correctIsRegexpLogic;
  var stringIndexOf = uncurryThis$8("".indexOf);
  $$y({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
    includes: function includes2(searchString) {
      return !!~stringIndexOf(
        toString$6(requireObjectCoercible$2(this)),
        toString$6(notARegExp(searchString)),
        arguments.length > 1 ? arguments[1] : void 0
      );
    }
  });
  var entryVirtual$f = entryVirtual$o;
  var includes$2 = entryVirtual$f("String").includes;
  var isPrototypeOf$i = objectIsPrototypeOf;
  var arrayMethod = includes$3;
  var stringMethod = includes$2;
  var ArrayPrototype$d = Array.prototype;
  var StringPrototype$2 = String.prototype;
  var includes$1 = function(it2) {
    var own = it2.includes;
    if (it2 === ArrayPrototype$d || isPrototypeOf$i(ArrayPrototype$d, it2) && own === ArrayPrototype$d.includes)
      return arrayMethod;
    if (typeof it2 == "string" || it2 === StringPrototype$2 || isPrototypeOf$i(StringPrototype$2, it2) && own === StringPrototype$2.includes) {
      return stringMethod;
    }
    return own;
  };
  var parent$H = includes$1;
  var includes3 = parent$H;
  (function(module) {
    module.exports = includes3;
  })(includes$4);
  var _includesInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(includesExports);
  var getPrototypeOfExports$2 = {};
  var getPrototypeOf$7 = {
    get exports() {
      return getPrototypeOfExports$2;
    },
    set exports(v) {
      getPrototypeOfExports$2 = v;
    }
  };
  var $$x = _export;
  var fails$c = fails$x;
  var toObject$4 = toObject$e;
  var nativeGetPrototypeOf = objectGetPrototypeOf;
  var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;
  var FAILS_ON_PRIMITIVES$1 = fails$c(function() {
    nativeGetPrototypeOf(1);
  });
  $$x({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES$1, sham: !CORRECT_PROTOTYPE_GETTER }, {
    getPrototypeOf: function getPrototypeOf(it2) {
      return nativeGetPrototypeOf(toObject$4(it2));
    }
  });
  var path$c = path$t;
  var getPrototypeOf$6 = path$c.Object.getPrototypeOf;
  var parent$G = getPrototypeOf$6;
  var getPrototypeOf$5 = parent$G;
  (function(module) {
    module.exports = getPrototypeOf$5;
  })(getPrototypeOf$7);
  var _Object$getPrototypeOf$1 = /* @__PURE__ */ getDefaultExportFromCjs(getPrototypeOfExports$2);
  var filterExports = {};
  var filter$3 = {
    get exports() {
      return filterExports;
    },
    set exports(v) {
      filterExports = v;
    }
  };
  var $$w = _export;
  var $filter = arrayIteration.filter;
  var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;
  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
  $$w({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
    filter: function filter2(callbackfn) {
      return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var entryVirtual$e = entryVirtual$o;
  var filter$2 = entryVirtual$e("Array").filter;
  var isPrototypeOf$h = objectIsPrototypeOf;
  var method$e = filter$2;
  var ArrayPrototype$c = Array.prototype;
  var filter$1 = function(it2) {
    var own = it2.filter;
    return it2 === ArrayPrototype$c || isPrototypeOf$h(ArrayPrototype$c, it2) && own === ArrayPrototype$c.filter ? method$e : own;
  };
  var parent$F = filter$1;
  var filter3 = parent$F;
  (function(module) {
    module.exports = filter3;
  })(filter$3);
  var _filterInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(filterExports);
  var valuesExports$1 = {};
  var values$6 = {
    get exports() {
      return valuesExports$1;
    },
    set exports(v) {
      valuesExports$1 = v;
    }
  };
  var DESCRIPTORS$4 = descriptors;
  var uncurryThis$7 = functionUncurryThis;
  var objectKeys = objectKeys$4;
  var toIndexedObject = toIndexedObject$b;
  var $propertyIsEnumerable = objectPropertyIsEnumerable.f;
  var propertyIsEnumerable3 = uncurryThis$7($propertyIsEnumerable);
  var push$3 = uncurryThis$7([].push);
  var createMethod$2 = function(TO_ENTRIES) {
    return function(it2) {
      var O = toIndexedObject(it2);
      var keys4 = objectKeys(O);
      var length = keys4.length;
      var i2 = 0;
      var result = [];
      var key;
      while (length > i2) {
        key = keys4[i2++];
        if (!DESCRIPTORS$4 || propertyIsEnumerable3(O, key)) {
          push$3(result, TO_ENTRIES ? [key, O[key]] : O[key]);
        }
      }
      return result;
    };
  };
  var objectToArray = {
    // `Object.entries` method
    // https://tc39.es/ecma262/#sec-object.entries
    entries: createMethod$2(true),
    // `Object.values` method
    // https://tc39.es/ecma262/#sec-object.values
    values: createMethod$2(false)
  };
  var $$v = _export;
  var $values = objectToArray.values;
  $$v({ target: "Object", stat: true }, {
    values: function values(O) {
      return $values(O);
    }
  });
  var path$b = path$t;
  var values$5 = path$b.Object.values;
  var parent$E = values$5;
  var values$4 = parent$E;
  (function(module) {
    module.exports = values$4;
  })(values$6);
  var _Object$values2 = /* @__PURE__ */ getDefaultExportFromCjs(valuesExports$1);
  var _parseIntExports = {};
  var _parseInt$3 = {
    get exports() {
      return _parseIntExports;
    },
    set exports(v) {
      _parseIntExports = v;
    }
  };
  var whitespaces$4 = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
  var uncurryThis$6 = functionUncurryThis;
  var requireObjectCoercible$1 = requireObjectCoercible$6;
  var toString$5 = toString$c;
  var whitespaces$3 = whitespaces$4;
  var replace$1 = uncurryThis$6("".replace);
  var ltrim = RegExp("^[" + whitespaces$3 + "]+");
  var rtrim = RegExp("(^|[^" + whitespaces$3 + "])[" + whitespaces$3 + "]+$");
  var createMethod$1 = function(TYPE) {
    return function($this) {
      var string2 = toString$5(requireObjectCoercible$1($this));
      if (TYPE & 1)
        string2 = replace$1(string2, ltrim, "");
      if (TYPE & 2)
        string2 = replace$1(string2, rtrim, "$1");
      return string2;
    };
  };
  var stringTrim = {
    // `String.prototype.{ trimLeft, trimStart }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimstart
    start: createMethod$1(1),
    // `String.prototype.{ trimRight, trimEnd }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimend
    end: createMethod$1(2),
    // `String.prototype.trim` method
    // https://tc39.es/ecma262/#sec-string.prototype.trim
    trim: createMethod$1(3)
  };
  var global$b = global$o;
  var fails$b = fails$x;
  var uncurryThis$5 = functionUncurryThis;
  var toString$4 = toString$c;
  var trim$5 = stringTrim.trim;
  var whitespaces$2 = whitespaces$4;
  var $parseInt$1 = global$b.parseInt;
  var Symbol$2 = global$b.Symbol;
  var ITERATOR$1 = Symbol$2 && Symbol$2.iterator;
  var hex = /^[+-]?0x/i;
  var exec = uncurryThis$5(hex.exec);
  var FORCED$5 = $parseInt$1(whitespaces$2 + "08") !== 8 || $parseInt$1(whitespaces$2 + "0x16") !== 22 || ITERATOR$1 && !fails$b(function() {
    $parseInt$1(Object(ITERATOR$1));
  });
  var numberParseInt = FORCED$5 ? function parseInt2(string2, radix) {
    var S = trim$5(toString$4(string2));
    return $parseInt$1(S, radix >>> 0 || (exec(hex, S) ? 16 : 10));
  } : $parseInt$1;
  var $$u = _export;
  var $parseInt = numberParseInt;
  $$u({ global: true, forced: parseInt != $parseInt }, {
    parseInt: $parseInt
  });
  var path$a = path$t;
  var _parseInt$2 = path$a.parseInt;
  var parent$D = _parseInt$2;
  var _parseInt$1 = parent$D;
  (function(module) {
    module.exports = _parseInt$1;
  })(_parseInt$3);
  var _parseInt = /* @__PURE__ */ getDefaultExportFromCjs(_parseIntExports);
  var indexOfExports = {};
  var indexOf$3 = {
    get exports() {
      return indexOfExports;
    },
    set exports(v) {
      indexOfExports = v;
    }
  };
  var $$t = _export;
  var uncurryThis$4 = functionUncurryThisClause;
  var $indexOf = arrayIncludes.indexOf;
  var arrayMethodIsStrict$4 = arrayMethodIsStrict$6;
  var nativeIndexOf = uncurryThis$4([].indexOf);
  var NEGATIVE_ZERO = !!nativeIndexOf && 1 / nativeIndexOf([1], 1, -0) < 0;
  var FORCED$4 = NEGATIVE_ZERO || !arrayMethodIsStrict$4("indexOf");
  $$t({ target: "Array", proto: true, forced: FORCED$4 }, {
    indexOf: function indexOf(searchElement) {
      var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
      return NEGATIVE_ZERO ? nativeIndexOf(this, searchElement, fromIndex) || 0 : $indexOf(this, searchElement, fromIndex);
    }
  });
  var entryVirtual$d = entryVirtual$o;
  var indexOf$2 = entryVirtual$d("Array").indexOf;
  var isPrototypeOf$g = objectIsPrototypeOf;
  var method$d = indexOf$2;
  var ArrayPrototype$b = Array.prototype;
  var indexOf$1 = function(it2) {
    var own = it2.indexOf;
    return it2 === ArrayPrototype$b || isPrototypeOf$g(ArrayPrototype$b, it2) && own === ArrayPrototype$b.indexOf ? method$d : own;
  };
  var parent$C = indexOf$1;
  var indexOf2 = parent$C;
  (function(module) {
    module.exports = indexOf2;
  })(indexOf$3);
  var _indexOfInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(indexOfExports);
  var trimExports = {};
  var trim$4 = {
    get exports() {
      return trimExports;
    },
    set exports(v) {
      trimExports = v;
    }
  };
  var PROPER_FUNCTION_NAME = functionName.PROPER;
  var fails$a = fails$x;
  var whitespaces$1 = whitespaces$4;
  var non = "\u200B\x85\u180E";
  var stringTrimForced = function(METHOD_NAME) {
    return fails$a(function() {
      return !!whitespaces$1[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces$1[METHOD_NAME].name !== METHOD_NAME;
    });
  };
  var $$s = _export;
  var $trim = stringTrim.trim;
  var forcedStringTrimMethod = stringTrimForced;
  $$s({ target: "String", proto: true, forced: forcedStringTrimMethod("trim") }, {
    trim: function trim() {
      return $trim(this);
    }
  });
  var entryVirtual$c = entryVirtual$o;
  var trim$3 = entryVirtual$c("String").trim;
  var isPrototypeOf$f = objectIsPrototypeOf;
  var method$c = trim$3;
  var StringPrototype$1 = String.prototype;
  var trim$2 = function(it2) {
    var own = it2.trim;
    return typeof it2 == "string" || it2 === StringPrototype$1 || isPrototypeOf$f(StringPrototype$1, it2) && own === StringPrototype$1.trim ? method$c : own;
  };
  var parent$B = trim$2;
  var trim$1 = parent$B;
  (function(module) {
    module.exports = trim$1;
  })(trim$4);
  var _trimInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(trimExports);
  var createExports$2 = {};
  var create$a = {
    get exports() {
      return createExports$2;
    },
    set exports(v) {
      createExports$2 = v;
    }
  };
  var $$r = _export;
  var DESCRIPTORS$3 = descriptors;
  var create$9 = objectCreate;
  $$r({ target: "Object", stat: true, sham: !DESCRIPTORS$3 }, {
    create: create$9
  });
  var path$9 = path$t;
  var Object$1 = path$9.Object;
  var create$8 = function create3(P, D) {
    return Object$1.create(P, D);
  };
  var parent$A = create$8;
  var create$7 = parent$A;
  (function(module) {
    module.exports = create$7;
  })(create$a);
  var _Object$create$1 = /* @__PURE__ */ getDefaultExportFromCjs(createExports$2);
  var stringifyExports = {};
  var stringify$2 = {
    get exports() {
      return stringifyExports;
    },
    set exports(v) {
      stringifyExports = v;
    }
  };
  var path$8 = path$t;
  var apply$3 = functionApply;
  if (!path$8.JSON)
    path$8.JSON = { stringify: JSON.stringify };
  var stringify$1 = function stringify(it2, replacer, space) {
    return apply$3(path$8.JSON.stringify, null, arguments);
  };
  var parent$z = stringify$1;
  var stringify2 = parent$z;
  (function(module) {
    module.exports = stringify2;
  })(stringify$2);
  var _JSON$stringify = /* @__PURE__ */ getDefaultExportFromCjs(stringifyExports);
  var setTimeoutExports = {};
  var setTimeout$3 = {
    get exports() {
      return setTimeoutExports;
    },
    set exports(v) {
      setTimeoutExports = v;
    }
  };
  var engineIsBun = typeof Bun == "function" && Bun && typeof Bun.version == "string";
  var $TypeError$5 = TypeError;
  var validateArgumentsLength$2 = function(passed, required) {
    if (passed < required)
      throw $TypeError$5("Not enough arguments");
    return passed;
  };
  var global$a = global$o;
  var apply$2 = functionApply;
  var isCallable$5 = isCallable$m;
  var ENGINE_IS_BUN = engineIsBun;
  var USER_AGENT = engineUserAgent;
  var arraySlice$2 = arraySlice$5;
  var validateArgumentsLength$1 = validateArgumentsLength$2;
  var Function$2 = global$a.Function;
  var WRAP = /MSIE .\./.test(USER_AGENT) || ENGINE_IS_BUN && function() {
    var version2 = global$a.Bun.version.split(".");
    return version2.length < 3 || version2[0] == 0 && (version2[1] < 3 || version2[1] == 3 && version2[2] == 0);
  }();
  var schedulersFix$2 = function(scheduler, hasTimeArg) {
    var firstParamIndex = hasTimeArg ? 2 : 1;
    return WRAP ? function(handler, timeout) {
      var boundArgs = validateArgumentsLength$1(arguments.length, 1) > firstParamIndex;
      var fn = isCallable$5(handler) ? handler : Function$2(handler);
      var params = boundArgs ? arraySlice$2(arguments, firstParamIndex) : [];
      var callback = boundArgs ? function() {
        apply$2(fn, this, params);
      } : fn;
      return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);
    } : scheduler;
  };
  var $$q = _export;
  var global$9 = global$o;
  var schedulersFix$1 = schedulersFix$2;
  var setInterval$2 = schedulersFix$1(global$9.setInterval, true);
  $$q({ global: true, bind: true, forced: global$9.setInterval !== setInterval$2 }, {
    setInterval: setInterval$2
  });
  var $$p = _export;
  var global$8 = global$o;
  var schedulersFix = schedulersFix$2;
  var setTimeout$2 = schedulersFix(global$8.setTimeout, true);
  $$p({ global: true, bind: true, forced: global$8.setTimeout !== setTimeout$2 }, {
    setTimeout: setTimeout$2
  });
  var path$7 = path$t;
  var setTimeout$1 = path$7.setTimeout;
  (function(module) {
    module.exports = setTimeout$1;
  })(setTimeout$3);
  var _setTimeout = /* @__PURE__ */ getDefaultExportFromCjs(setTimeoutExports);
  var fillExports = {};
  var fill$4 = {
    get exports() {
      return fillExports;
    },
    set exports(v) {
      fillExports = v;
    }
  };
  var toObject$3 = toObject$e;
  var toAbsoluteIndex = toAbsoluteIndex$5;
  var lengthOfArrayLike$5 = lengthOfArrayLike$d;
  var arrayFill = function fill(value) {
    var O = toObject$3(this);
    var length = lengthOfArrayLike$5(O);
    var argumentsLength = arguments.length;
    var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0, length);
    var end = argumentsLength > 2 ? arguments[2] : void 0;
    var endPos = end === void 0 ? length : toAbsoluteIndex(end, length);
    while (endPos > index)
      O[index++] = value;
    return O;
  };
  var $$o = _export;
  var fill$3 = arrayFill;
  $$o({ target: "Array", proto: true }, {
    fill: fill$3
  });
  var entryVirtual$b = entryVirtual$o;
  var fill$2 = entryVirtual$b("Array").fill;
  var isPrototypeOf$e = objectIsPrototypeOf;
  var method$b = fill$2;
  var ArrayPrototype$a = Array.prototype;
  var fill$1 = function(it2) {
    var own = it2.fill;
    return it2 === ArrayPrototype$a || isPrototypeOf$e(ArrayPrototype$a, it2) && own === ArrayPrototype$a.fill ? method$b : own;
  };
  var parent$y = fill$1;
  var fill2 = parent$y;
  (function(module) {
    module.exports = fill2;
  })(fill$4);
  var _fillInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(fillExports);
  var componentEmitterExports = {};
  var componentEmitter = {
    get exports() {
      return componentEmitterExports;
    },
    set exports(v) {
      componentEmitterExports = v;
    }
  };
  (function(module) {
    {
      module.exports = Emitter2;
    }
    function Emitter2(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in Emitter2.prototype) {
        obj[key] = Emitter2.prototype[key];
      }
      return obj;
    }
    Emitter2.prototype.on = Emitter2.prototype.addEventListener = function(event2, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks["$" + event2] = this._callbacks["$" + event2] || []).push(fn);
      return this;
    };
    Emitter2.prototype.once = function(event2, fn) {
      function on() {
        this.off(event2, on);
        fn.apply(this, arguments);
      }
      on.fn = fn;
      this.on(event2, on);
      return this;
    };
    Emitter2.prototype.off = Emitter2.prototype.removeListener = Emitter2.prototype.removeAllListeners = Emitter2.prototype.removeEventListener = function(event2, fn) {
      this._callbacks = this._callbacks || {};
      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      }
      var callbacks = this._callbacks["$" + event2];
      if (!callbacks)
        return this;
      if (1 == arguments.length) {
        delete this._callbacks["$" + event2];
        return this;
      }
      var cb;
      for (var i2 = 0; i2 < callbacks.length; i2++) {
        cb = callbacks[i2];
        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i2, 1);
          break;
        }
      }
      if (callbacks.length === 0) {
        delete this._callbacks["$" + event2];
      }
      return this;
    };
    Emitter2.prototype.emit = function(event2) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event2];
      for (var i2 = 1; i2 < arguments.length; i2++) {
        args[i2 - 1] = arguments[i2];
      }
      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i2 = 0, len = callbacks.length; i2 < len; ++i2) {
          callbacks[i2].apply(this, args);
        }
      }
      return this;
    };
    Emitter2.prototype.listeners = function(event2) {
      this._callbacks = this._callbacks || {};
      return this._callbacks["$" + event2] || [];
    };
    Emitter2.prototype.hasListeners = function(event2) {
      return !!this.listeners(event2).length;
    };
  })(componentEmitter);
  var Emitter = componentEmitterExports;
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  function _assertThisInitialized$1(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  var assign2;
  if (typeof Object.assign !== "function") {
    assign2 = function assign3(target) {
      if (target === void 0 || target === null) {
        throw new TypeError("Cannot convert undefined or null to object");
      }
      var output = Object(target);
      for (var index = 1; index < arguments.length; index++) {
        var source = arguments[index];
        if (source !== void 0 && source !== null) {
          for (var nextKey in source) {
            if (source.hasOwnProperty(nextKey)) {
              output[nextKey] = source[nextKey];
            }
          }
        }
      }
      return output;
    };
  } else {
    assign2 = Object.assign;
  }
  var assign$1 = assign2;
  var VENDOR_PREFIXES = ["", "webkit", "Moz", "MS", "ms", "o"];
  var TEST_ELEMENT = typeof document === "undefined" ? {
    style: {}
  } : document.createElement("div");
  var TYPE_FUNCTION = "function";
  var round = Math.round;
  var abs = Math.abs;
  var now2 = Date.now;
  function prefixed(obj, property) {
    var prefix;
    var prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);
    var i2 = 0;
    while (i2 < VENDOR_PREFIXES.length) {
      prefix = VENDOR_PREFIXES[i2];
      prop = prefix ? prefix + camelProp : property;
      if (prop in obj) {
        return prop;
      }
      i2++;
    }
    return void 0;
  }
  var win;
  if (typeof window === "undefined") {
    win = {};
  } else {
    win = window;
  }
  var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
  var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== void 0;
  function getTouchActionProps() {
    if (!NATIVE_TOUCH_ACTION) {
      return false;
    }
    var touchMap = {};
    var cssSupports = win.CSS && win.CSS.supports;
    ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function(val) {
      return touchMap[val] = cssSupports ? win.CSS.supports("touch-action", val) : true;
    });
    return touchMap;
  }
  var TOUCH_ACTION_COMPUTE = "compute";
  var TOUCH_ACTION_AUTO = "auto";
  var TOUCH_ACTION_MANIPULATION = "manipulation";
  var TOUCH_ACTION_NONE = "none";
  var TOUCH_ACTION_PAN_X = "pan-x";
  var TOUCH_ACTION_PAN_Y = "pan-y";
  var TOUCH_ACTION_MAP = getTouchActionProps();
  var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
  var SUPPORT_TOUCH = "ontouchstart" in win;
  var SUPPORT_POINTER_EVENTS = prefixed(win, "PointerEvent") !== void 0;
  var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
  var INPUT_TYPE_TOUCH = "touch";
  var INPUT_TYPE_PEN = "pen";
  var INPUT_TYPE_MOUSE = "mouse";
  var INPUT_TYPE_KINECT = "kinect";
  var COMPUTE_INTERVAL = 25;
  var INPUT_START = 1;
  var INPUT_MOVE = 2;
  var INPUT_END = 4;
  var INPUT_CANCEL = 8;
  var DIRECTION_NONE = 1;
  var DIRECTION_LEFT = 2;
  var DIRECTION_RIGHT = 4;
  var DIRECTION_UP = 8;
  var DIRECTION_DOWN = 16;
  var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
  var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
  var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
  var PROPS_XY = ["x", "y"];
  var PROPS_CLIENT_XY = ["clientX", "clientY"];
  function each(obj, iterator2, context) {
    var i2;
    if (!obj) {
      return;
    }
    if (obj.forEach) {
      obj.forEach(iterator2, context);
    } else if (obj.length !== void 0) {
      i2 = 0;
      while (i2 < obj.length) {
        iterator2.call(context, obj[i2], i2, obj);
        i2++;
      }
    } else {
      for (i2 in obj) {
        obj.hasOwnProperty(i2) && iterator2.call(context, obj[i2], i2, obj);
      }
    }
  }
  function boolOrFn(val, args) {
    if (typeof val === TYPE_FUNCTION) {
      return val.apply(args ? args[0] || void 0 : void 0, args);
    }
    return val;
  }
  function inStr(str, find3) {
    return str.indexOf(find3) > -1;
  }
  function cleanTouchActions(actions) {
    if (inStr(actions, TOUCH_ACTION_NONE)) {
      return TOUCH_ACTION_NONE;
    }
    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
    if (hasPanX && hasPanY) {
      return TOUCH_ACTION_NONE;
    }
    if (hasPanX || hasPanY) {
      return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
      return TOUCH_ACTION_MANIPULATION;
    }
    return TOUCH_ACTION_AUTO;
  }
  var TouchAction = /* @__PURE__ */ function() {
    function TouchAction2(manager, value) {
      this.manager = manager;
      this.set(value);
    }
    var _proto = TouchAction2.prototype;
    _proto.set = function set2(value) {
      if (value === TOUCH_ACTION_COMPUTE) {
        value = this.compute();
      }
      if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
      }
      this.actions = value.toLowerCase().trim();
    };
    _proto.update = function update() {
      this.set(this.manager.options.touchAction);
    };
    _proto.compute = function compute() {
      var actions = [];
      each(this.manager.recognizers, function(recognizer) {
        if (boolOrFn(recognizer.options.enable, [recognizer])) {
          actions = actions.concat(recognizer.getTouchAction());
        }
      });
      return cleanTouchActions(actions.join(" "));
    };
    _proto.preventDefaults = function preventDefaults(input) {
      var srcEvent = input.srcEvent;
      var direction = input.offsetDirection;
      if (this.manager.session.prevented) {
        srcEvent.preventDefault();
        return;
      }
      var actions = this.actions;
      var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
      if (hasNone) {
        var isTapPointer = input.pointers.length === 1;
        var isTapMovement = input.distance < 2;
        var isTapTouchTime = input.deltaTime < 250;
        if (isTapPointer && isTapMovement && isTapTouchTime) {
          return;
        }
      }
      if (hasPanX && hasPanY) {
        return;
      }
      if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
        return this.preventSrc(srcEvent);
      }
    };
    _proto.preventSrc = function preventSrc(srcEvent) {
      this.manager.session.prevented = true;
      srcEvent.preventDefault();
    };
    return TouchAction2;
  }();
  function hasParent$1(node2, parent2) {
    while (node2) {
      if (node2 === parent2) {
        return true;
      }
      node2 = node2.parentNode;
    }
    return false;
  }
  function getCenter(pointers) {
    var pointersLength = pointers.length;
    if (pointersLength === 1) {
      return {
        x: round(pointers[0].clientX),
        y: round(pointers[0].clientY)
      };
    }
    var x = 0;
    var y = 0;
    var i2 = 0;
    while (i2 < pointersLength) {
      x += pointers[i2].clientX;
      y += pointers[i2].clientY;
      i2++;
    }
    return {
      x: round(x / pointersLength),
      y: round(y / pointersLength)
    };
  }
  function simpleCloneInputData(input) {
    var pointers = [];
    var i2 = 0;
    while (i2 < input.pointers.length) {
      pointers[i2] = {
        clientX: round(input.pointers[i2].clientX),
        clientY: round(input.pointers[i2].clientY)
      };
      i2++;
    }
    return {
      timeStamp: now2(),
      pointers,
      center: getCenter(pointers),
      deltaX: input.deltaX,
      deltaY: input.deltaY
    };
  }
  function getDistance(p1, p2, props) {
    if (!props) {
      props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]];
    var y = p2[props[1]] - p1[props[1]];
    return Math.sqrt(x * x + y * y);
  }
  function getAngle(p1, p2, props) {
    if (!props) {
      props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]];
    var y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
  }
  function getDirection(x, y) {
    if (x === y) {
      return DIRECTION_NONE;
    }
    if (abs(x) >= abs(y)) {
      return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
  }
  function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};
    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
      prevDelta = session.prevDelta = {
        x: prevInput.deltaX || 0,
        y: prevInput.deltaY || 0
      };
      offset = session.offsetDelta = {
        x: center.x,
        y: center.y
      };
    }
    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
  }
  function getVelocity(deltaTime, x, y) {
    return {
      x: x / deltaTime || 0,
      y: y / deltaTime || 0
    };
  }
  function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
  }
  function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
  }
  function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input;
    var deltaTime = input.timeStamp - last.timeStamp;
    var velocity;
    var velocityX;
    var velocityY;
    var direction;
    if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === void 0)) {
      var deltaX = input.deltaX - last.deltaX;
      var deltaY = input.deltaY - last.deltaY;
      var v = getVelocity(deltaTime, deltaX, deltaY);
      velocityX = v.x;
      velocityY = v.y;
      velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
      direction = getDirection(deltaX, deltaY);
      session.lastInterval = input;
    } else {
      velocity = last.velocity;
      velocityX = last.velocityX;
      velocityY = last.velocityY;
      direction = last.direction;
    }
    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
  }
  function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;
    if (!session.firstInput) {
      session.firstInput = simpleCloneInputData(input);
    }
    if (pointersLength > 1 && !session.firstMultiple) {
      session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
      session.firstMultiple = false;
    }
    var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
    var center = input.center = getCenter(pointers);
    input.timeStamp = now2();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;
    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);
    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
    computeIntervalInputData(session, input);
    var target = manager.element;
    var srcEvent = input.srcEvent;
    var srcEventTarget;
    if (srcEvent.composedPath) {
      srcEventTarget = srcEvent.composedPath()[0];
    } else if (srcEvent.path) {
      srcEventTarget = srcEvent.path[0];
    } else {
      srcEventTarget = srcEvent.target;
    }
    if (hasParent$1(srcEventTarget, target)) {
      target = srcEventTarget;
    }
    input.target = target;
  }
  function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;
    if (isFirst) {
      manager.session = {};
    }
    input.eventType = eventType;
    computeInputData(manager, input);
    manager.emit("hammer.input", input);
    manager.recognize(input);
    manager.session.prevInput = input;
  }
  function splitStr(str) {
    return str.trim().split(/\s+/g);
  }
  function addEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
      target.addEventListener(type, handler, false);
    });
  }
  function removeEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
      target.removeEventListener(type, handler, false);
    });
  }
  function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return doc.defaultView || doc.parentWindow || window;
  }
  var Input = /* @__PURE__ */ function() {
    function Input2(manager, callback) {
      var self2 = this;
      this.manager = manager;
      this.callback = callback;
      this.element = manager.element;
      this.target = manager.options.inputTarget;
      this.domHandler = function(ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
          self2.handler(ev);
        }
      };
      this.init();
    }
    var _proto = Input2.prototype;
    _proto.handler = function handler() {
    };
    _proto.init = function init() {
      this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
      this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
      this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    };
    _proto.destroy = function destroy() {
      this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
      this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
      this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    };
    return Input2;
  }();
  function inArray(src, find3, findByKey) {
    if (src.indexOf && !findByKey) {
      return src.indexOf(find3);
    } else {
      var i2 = 0;
      while (i2 < src.length) {
        if (findByKey && src[i2][findByKey] == find3 || !findByKey && src[i2] === find3) {
          return i2;
        }
        i2++;
      }
      return -1;
    }
  }
  var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
  };
  var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT
    // see https://twitter.com/jacobrossi/status/480596438489890816
  };
  var POINTER_ELEMENT_EVENTS = "pointerdown";
  var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
  if (win.MSPointerEvent && !win.PointerEvent) {
    POINTER_ELEMENT_EVENTS = "MSPointerDown";
    POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
  }
  var PointerEventInput = /* @__PURE__ */ function(_Input) {
    _inheritsLoose(PointerEventInput2, _Input);
    function PointerEventInput2() {
      var _this;
      var proto = PointerEventInput2.prototype;
      proto.evEl = POINTER_ELEMENT_EVENTS;
      proto.evWin = POINTER_WINDOW_EVENTS;
      _this = _Input.apply(this, arguments) || this;
      _this.store = _this.manager.session.pointerEvents = [];
      return _this;
    }
    var _proto = PointerEventInput2.prototype;
    _proto.handler = function handler(ev) {
      var store2 = this.store;
      var removePointer = false;
      var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
      var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
      var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
      var isTouch = pointerType === INPUT_TYPE_TOUCH;
      var storeIndex = inArray(store2, ev.pointerId, "pointerId");
      if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
        if (storeIndex < 0) {
          store2.push(ev);
          storeIndex = store2.length - 1;
        }
      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        removePointer = true;
      }
      if (storeIndex < 0) {
        return;
      }
      store2[storeIndex] = ev;
      this.callback(this.manager, eventType, {
        pointers: store2,
        changedPointers: [ev],
        pointerType,
        srcEvent: ev
      });
      if (removePointer) {
        store2.splice(storeIndex, 1);
      }
    };
    return PointerEventInput2;
  }(Input);
  function toArray$1(obj) {
    return Array.prototype.slice.call(obj, 0);
  }
  function uniqueArray(src, key, sort3) {
    var results = [];
    var values3 = [];
    var i2 = 0;
    while (i2 < src.length) {
      var val = key ? src[i2][key] : src[i2];
      if (inArray(values3, val) < 0) {
        results.push(src[i2]);
      }
      values3[i2] = val;
      i2++;
    }
    if (sort3) {
      if (!key) {
        results = results.sort();
      } else {
        results = results.sort(function(a, b) {
          return a[key] > b[key];
        });
      }
    }
    return results;
  }
  var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
  };
  var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
  var TouchInput = /* @__PURE__ */ function(_Input) {
    _inheritsLoose(TouchInput2, _Input);
    function TouchInput2() {
      var _this;
      TouchInput2.prototype.evTarget = TOUCH_TARGET_EVENTS;
      _this = _Input.apply(this, arguments) || this;
      _this.targetIds = {};
      return _this;
    }
    var _proto = TouchInput2.prototype;
    _proto.handler = function handler(ev) {
      var type = TOUCH_INPUT_MAP[ev.type];
      var touches = getTouches.call(this, ev, type);
      if (!touches) {
        return;
      }
      this.callback(this.manager, type, {
        pointers: touches[0],
        changedPointers: touches[1],
        pointerType: INPUT_TYPE_TOUCH,
        srcEvent: ev
      });
    };
    return TouchInput2;
  }(Input);
  function getTouches(ev, type) {
    var allTouches = toArray$1(ev.touches);
    var targetIds = this.targetIds;
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
      targetIds[allTouches[0].identifier] = true;
      return [allTouches, allTouches];
    }
    var i2;
    var targetTouches;
    var changedTouches = toArray$1(ev.changedTouches);
    var changedTargetTouches = [];
    var target = this.target;
    targetTouches = allTouches.filter(function(touch) {
      return hasParent$1(touch.target, target);
    });
    if (type === INPUT_START) {
      i2 = 0;
      while (i2 < targetTouches.length) {
        targetIds[targetTouches[i2].identifier] = true;
        i2++;
      }
    }
    i2 = 0;
    while (i2 < changedTouches.length) {
      if (targetIds[changedTouches[i2].identifier]) {
        changedTargetTouches.push(changedTouches[i2]);
      }
      if (type & (INPUT_END | INPUT_CANCEL)) {
        delete targetIds[changedTouches[i2].identifier];
      }
      i2++;
    }
    if (!changedTargetTouches.length) {
      return;
    }
    return [
      // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
      uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true),
      changedTargetTouches
    ];
  }
  var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
  };
  var MOUSE_ELEMENT_EVENTS = "mousedown";
  var MOUSE_WINDOW_EVENTS = "mousemove mouseup";
  var MouseInput = /* @__PURE__ */ function(_Input) {
    _inheritsLoose(MouseInput2, _Input);
    function MouseInput2() {
      var _this;
      var proto = MouseInput2.prototype;
      proto.evEl = MOUSE_ELEMENT_EVENTS;
      proto.evWin = MOUSE_WINDOW_EVENTS;
      _this = _Input.apply(this, arguments) || this;
      _this.pressed = false;
      return _this;
    }
    var _proto = MouseInput2.prototype;
    _proto.handler = function handler(ev) {
      var eventType = MOUSE_INPUT_MAP[ev.type];
      if (eventType & INPUT_START && ev.button === 0) {
        this.pressed = true;
      }
      if (eventType & INPUT_MOVE && ev.which !== 1) {
        eventType = INPUT_END;
      }
      if (!this.pressed) {
        return;
      }
      if (eventType & INPUT_END) {
        this.pressed = false;
      }
      this.callback(this.manager, eventType, {
        pointers: [ev],
        changedPointers: [ev],
        pointerType: INPUT_TYPE_MOUSE,
        srcEvent: ev
      });
    };
    return MouseInput2;
  }(Input);
  var DEDUP_TIMEOUT = 2500;
  var DEDUP_DISTANCE = 25;
  function setLastTouch(eventData) {
    var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
    if (touch.identifier === this.primaryTouch) {
      var lastTouch = {
        x: touch.clientX,
        y: touch.clientY
      };
      var lts = this.lastTouches;
      this.lastTouches.push(lastTouch);
      var removeLastTouch = function removeLastTouch2() {
        var i2 = lts.indexOf(lastTouch);
        if (i2 > -1) {
          lts.splice(i2, 1);
        }
      };
      setTimeout(removeLastTouch, DEDUP_TIMEOUT);
    }
  }
  function recordTouches(eventType, eventData) {
    if (eventType & INPUT_START) {
      this.primaryTouch = eventData.changedPointers[0].identifier;
      setLastTouch.call(this, eventData);
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
      setLastTouch.call(this, eventData);
    }
  }
  function isSyntheticEvent(eventData) {
    var x = eventData.srcEvent.clientX;
    var y = eventData.srcEvent.clientY;
    for (var i2 = 0; i2 < this.lastTouches.length; i2++) {
      var t = this.lastTouches[i2];
      var dx = Math.abs(x - t.x);
      var dy = Math.abs(y - t.y);
      if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
        return true;
      }
    }
    return false;
  }
  var TouchMouseInput = /* @__PURE__ */ function() {
    var TouchMouseInput2 = /* @__PURE__ */ function(_Input) {
      _inheritsLoose(TouchMouseInput3, _Input);
      function TouchMouseInput3(_manager, callback) {
        var _this;
        _this = _Input.call(this, _manager, callback) || this;
        _this.handler = function(manager, inputEvent, inputData) {
          var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;
          var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;
          if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
          }
          if (isTouch) {
            recordTouches.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputEvent, inputData);
          } else if (isMouse && isSyntheticEvent.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputData)) {
            return;
          }
          _this.callback(manager, inputEvent, inputData);
        };
        _this.touch = new TouchInput(_this.manager, _this.handler);
        _this.mouse = new MouseInput(_this.manager, _this.handler);
        _this.primaryTouch = null;
        _this.lastTouches = [];
        return _this;
      }
      var _proto = TouchMouseInput3.prototype;
      _proto.destroy = function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
      };
      return TouchMouseInput3;
    }(Input);
    return TouchMouseInput2;
  }();
  function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;
    if (inputClass) {
      Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
      Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
      Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
      Type = MouseInput;
    } else {
      Type = TouchMouseInput;
    }
    return new Type(manager, inputHandler);
  }
  function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
      each(arg, context[fn], context);
      return true;
    }
    return false;
  }
  var STATE_POSSIBLE = 1;
  var STATE_BEGAN = 2;
  var STATE_CHANGED = 4;
  var STATE_ENDED = 8;
  var STATE_RECOGNIZED = STATE_ENDED;
  var STATE_CANCELLED = 16;
  var STATE_FAILED = 32;
  var _uniqueId = 1;
  function uniqueId() {
    return _uniqueId++;
  }
  function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
      return manager.get(otherRecognizer);
    }
    return otherRecognizer;
  }
  function stateStr(state) {
    if (state & STATE_CANCELLED) {
      return "cancel";
    } else if (state & STATE_ENDED) {
      return "end";
    } else if (state & STATE_CHANGED) {
      return "move";
    } else if (state & STATE_BEGAN) {
      return "start";
    }
    return "";
  }
  var Recognizer = /* @__PURE__ */ function() {
    function Recognizer2(options) {
      if (options === void 0) {
        options = {};
      }
      this.options = _extends({
        enable: true
      }, options);
      this.id = uniqueId();
      this.manager = null;
      this.state = STATE_POSSIBLE;
      this.simultaneous = {};
      this.requireFail = [];
    }
    var _proto = Recognizer2.prototype;
    _proto.set = function set2(options) {
      assign$1(this.options, options);
      this.manager && this.manager.touchAction.update();
      return this;
    };
    _proto.recognizeWith = function recognizeWith(otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) {
        return this;
      }
      var simultaneous = this.simultaneous;
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      if (!simultaneous[otherRecognizer.id]) {
        simultaneous[otherRecognizer.id] = otherRecognizer;
        otherRecognizer.recognizeWith(this);
      }
      return this;
    };
    _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) {
        return this;
      }
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      delete this.simultaneous[otherRecognizer.id];
      return this;
    };
    _proto.requireFailure = function requireFailure(otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, "requireFailure", this)) {
        return this;
      }
      var requireFail = this.requireFail;
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      if (inArray(requireFail, otherRecognizer) === -1) {
        requireFail.push(otherRecognizer);
        otherRecognizer.requireFailure(this);
      }
      return this;
    };
    _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) {
        return this;
      }
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      var index = inArray(this.requireFail, otherRecognizer);
      if (index > -1) {
        this.requireFail.splice(index, 1);
      }
      return this;
    };
    _proto.hasRequireFailures = function hasRequireFailures() {
      return this.requireFail.length > 0;
    };
    _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
      return !!this.simultaneous[otherRecognizer.id];
    };
    _proto.emit = function emit(input) {
      var self2 = this;
      var state = this.state;
      function emit2(event2) {
        self2.manager.emit(event2, input);
      }
      if (state < STATE_ENDED) {
        emit2(self2.options.event + stateStr(state));
      }
      emit2(self2.options.event);
      if (input.additionalEvent) {
        emit2(input.additionalEvent);
      }
      if (state >= STATE_ENDED) {
        emit2(self2.options.event + stateStr(state));
      }
    };
    _proto.tryEmit = function tryEmit(input) {
      if (this.canEmit()) {
        return this.emit(input);
      }
      this.state = STATE_FAILED;
    };
    _proto.canEmit = function canEmit() {
      var i2 = 0;
      while (i2 < this.requireFail.length) {
        if (!(this.requireFail[i2].state & (STATE_FAILED | STATE_POSSIBLE))) {
          return false;
        }
        i2++;
      }
      return true;
    };
    _proto.recognize = function recognize(inputData) {
      var inputDataClone = assign$1({}, inputData);
      if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
        this.reset();
        this.state = STATE_FAILED;
        return;
      }
      if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
        this.state = STATE_POSSIBLE;
      }
      this.state = this.process(inputDataClone);
      if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
        this.tryEmit(inputDataClone);
      }
    };
    _proto.process = function process2(inputData) {
    };
    _proto.getTouchAction = function getTouchAction() {
    };
    _proto.reset = function reset() {
    };
    return Recognizer2;
  }();
  var TapRecognizer = /* @__PURE__ */ function(_Recognizer) {
    _inheritsLoose(TapRecognizer2, _Recognizer);
    function TapRecognizer2(options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _Recognizer.call(this, _extends({
        event: "tap",
        pointers: 1,
        taps: 1,
        interval: 300,
        // max time between the multi-tap taps
        time: 250,
        // max time of the pointer to be down (like finger on the screen)
        threshold: 9,
        // a minimal movement is ok, but keep it low
        posThreshold: 10
      }, options)) || this;
      _this.pTime = false;
      _this.pCenter = false;
      _this._timer = null;
      _this._input = null;
      _this.count = 0;
      return _this;
    }
    var _proto = TapRecognizer2.prototype;
    _proto.getTouchAction = function getTouchAction() {
      return [TOUCH_ACTION_MANIPULATION];
    };
    _proto.process = function process2(input) {
      var _this2 = this;
      var options = this.options;
      var validPointers = input.pointers.length === options.pointers;
      var validMovement = input.distance < options.threshold;
      var validTouchTime = input.deltaTime < options.time;
      this.reset();
      if (input.eventType & INPUT_START && this.count === 0) {
        return this.failTimeout();
      }
      if (validMovement && validTouchTime && validPointers) {
        if (input.eventType !== INPUT_END) {
          return this.failTimeout();
        }
        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
        this.pTime = input.timeStamp;
        this.pCenter = input.center;
        if (!validMultiTap || !validInterval) {
          this.count = 1;
        } else {
          this.count += 1;
        }
        this._input = input;
        var tapCount = this.count % options.taps;
        if (tapCount === 0) {
          if (!this.hasRequireFailures()) {
            return STATE_RECOGNIZED;
          } else {
            this._timer = setTimeout(function() {
              _this2.state = STATE_RECOGNIZED;
              _this2.tryEmit();
            }, options.interval);
            return STATE_BEGAN;
          }
        }
      }
      return STATE_FAILED;
    };
    _proto.failTimeout = function failTimeout() {
      var _this3 = this;
      this._timer = setTimeout(function() {
        _this3.state = STATE_FAILED;
      }, this.options.interval);
      return STATE_FAILED;
    };
    _proto.reset = function reset() {
      clearTimeout(this._timer);
    };
    _proto.emit = function emit() {
      if (this.state === STATE_RECOGNIZED) {
        this._input.tapCount = this.count;
        this.manager.emit(this.options.event, this._input);
      }
    };
    return TapRecognizer2;
  }(Recognizer);
  var AttrRecognizer = /* @__PURE__ */ function(_Recognizer) {
    _inheritsLoose(AttrRecognizer2, _Recognizer);
    function AttrRecognizer2(options) {
      if (options === void 0) {
        options = {};
      }
      return _Recognizer.call(this, _extends({
        pointers: 1
      }, options)) || this;
    }
    var _proto = AttrRecognizer2.prototype;
    _proto.attrTest = function attrTest(input) {
      var optionPointers = this.options.pointers;
      return optionPointers === 0 || input.pointers.length === optionPointers;
    };
    _proto.process = function process2(input) {
      var state = this.state;
      var eventType = input.eventType;
      var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
      var isValid = this.attrTest(input);
      if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
        return state | STATE_CANCELLED;
      } else if (isRecognized || isValid) {
        if (eventType & INPUT_END) {
          return state | STATE_ENDED;
        } else if (!(state & STATE_BEGAN)) {
          return STATE_BEGAN;
        }
        return state | STATE_CHANGED;
      }
      return STATE_FAILED;
    };
    return AttrRecognizer2;
  }(Recognizer);
  function directionStr(direction) {
    if (direction === DIRECTION_DOWN) {
      return "down";
    } else if (direction === DIRECTION_UP) {
      return "up";
    } else if (direction === DIRECTION_LEFT) {
      return "left";
    } else if (direction === DIRECTION_RIGHT) {
      return "right";
    }
    return "";
  }
  var PanRecognizer = /* @__PURE__ */ function(_AttrRecognizer) {
    _inheritsLoose(PanRecognizer2, _AttrRecognizer);
    function PanRecognizer2(options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _AttrRecognizer.call(this, _extends({
        event: "pan",
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
      }, options)) || this;
      _this.pX = null;
      _this.pY = null;
      return _this;
    }
    var _proto = PanRecognizer2.prototype;
    _proto.getTouchAction = function getTouchAction() {
      var direction = this.options.direction;
      var actions = [];
      if (direction & DIRECTION_HORIZONTAL) {
        actions.push(TOUCH_ACTION_PAN_Y);
      }
      if (direction & DIRECTION_VERTICAL) {
        actions.push(TOUCH_ACTION_PAN_X);
      }
      return actions;
    };
    _proto.directionTest = function directionTest(input) {
      var options = this.options;
      var hasMoved = true;
      var distance = input.distance;
      var direction = input.direction;
      var x = input.deltaX;
      var y = input.deltaY;
      if (!(direction & options.direction)) {
        if (options.direction & DIRECTION_HORIZONTAL) {
          direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
          hasMoved = x !== this.pX;
          distance = Math.abs(input.deltaX);
        } else {
          direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
          hasMoved = y !== this.pY;
          distance = Math.abs(input.deltaY);
        }
      }
      input.direction = direction;
      return hasMoved && distance > options.threshold && direction & options.direction;
    };
    _proto.attrTest = function attrTest(input) {
      return AttrRecognizer.prototype.attrTest.call(this, input) && // replace with a super call
      (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
    };
    _proto.emit = function emit(input) {
      this.pX = input.deltaX;
      this.pY = input.deltaY;
      var direction = directionStr(input.direction);
      if (direction) {
        input.additionalEvent = this.options.event + direction;
      }
      _AttrRecognizer.prototype.emit.call(this, input);
    };
    return PanRecognizer2;
  }(AttrRecognizer);
  var SwipeRecognizer = /* @__PURE__ */ function(_AttrRecognizer) {
    _inheritsLoose(SwipeRecognizer2, _AttrRecognizer);
    function SwipeRecognizer2(options) {
      if (options === void 0) {
        options = {};
      }
      return _AttrRecognizer.call(this, _extends({
        event: "swipe",
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
      }, options)) || this;
    }
    var _proto = SwipeRecognizer2.prototype;
    _proto.getTouchAction = function getTouchAction() {
      return PanRecognizer.prototype.getTouchAction.call(this);
    };
    _proto.attrTest = function attrTest(input) {
      var direction = this.options.direction;
      var velocity;
      if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
        velocity = input.overallVelocity;
      } else if (direction & DIRECTION_HORIZONTAL) {
        velocity = input.overallVelocityX;
      } else if (direction & DIRECTION_VERTICAL) {
        velocity = input.overallVelocityY;
      }
      return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    };
    _proto.emit = function emit(input) {
      var direction = directionStr(input.offsetDirection);
      if (direction) {
        this.manager.emit(this.options.event + direction, input);
      }
      this.manager.emit(this.options.event, input);
    };
    return SwipeRecognizer2;
  }(AttrRecognizer);
  var PinchRecognizer = /* @__PURE__ */ function(_AttrRecognizer) {
    _inheritsLoose(PinchRecognizer2, _AttrRecognizer);
    function PinchRecognizer2(options) {
      if (options === void 0) {
        options = {};
      }
      return _AttrRecognizer.call(this, _extends({
        event: "pinch",
        threshold: 0,
        pointers: 2
      }, options)) || this;
    }
    var _proto = PinchRecognizer2.prototype;
    _proto.getTouchAction = function getTouchAction() {
      return [TOUCH_ACTION_NONE];
    };
    _proto.attrTest = function attrTest(input) {
      return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    };
    _proto.emit = function emit(input) {
      if (input.scale !== 1) {
        var inOut = input.scale < 1 ? "in" : "out";
        input.additionalEvent = this.options.event + inOut;
      }
      _AttrRecognizer.prototype.emit.call(this, input);
    };
    return PinchRecognizer2;
  }(AttrRecognizer);
  var RotateRecognizer = /* @__PURE__ */ function(_AttrRecognizer) {
    _inheritsLoose(RotateRecognizer2, _AttrRecognizer);
    function RotateRecognizer2(options) {
      if (options === void 0) {
        options = {};
      }
      return _AttrRecognizer.call(this, _extends({
        event: "rotate",
        threshold: 0,
        pointers: 2
      }, options)) || this;
    }
    var _proto = RotateRecognizer2.prototype;
    _proto.getTouchAction = function getTouchAction() {
      return [TOUCH_ACTION_NONE];
    };
    _proto.attrTest = function attrTest(input) {
      return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    };
    return RotateRecognizer2;
  }(AttrRecognizer);
  var PressRecognizer = /* @__PURE__ */ function(_Recognizer) {
    _inheritsLoose(PressRecognizer2, _Recognizer);
    function PressRecognizer2(options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _Recognizer.call(this, _extends({
        event: "press",
        pointers: 1,
        time: 251,
        // minimal time of the pointer to be pressed
        threshold: 9
      }, options)) || this;
      _this._timer = null;
      _this._input = null;
      return _this;
    }
    var _proto = PressRecognizer2.prototype;
    _proto.getTouchAction = function getTouchAction() {
      return [TOUCH_ACTION_AUTO];
    };
    _proto.process = function process2(input) {
      var _this2 = this;
      var options = this.options;
      var validPointers = input.pointers.length === options.pointers;
      var validMovement = input.distance < options.threshold;
      var validTime = input.deltaTime > options.time;
      this._input = input;
      if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
        this.reset();
      } else if (input.eventType & INPUT_START) {
        this.reset();
        this._timer = setTimeout(function() {
          _this2.state = STATE_RECOGNIZED;
          _this2.tryEmit();
        }, options.time);
      } else if (input.eventType & INPUT_END) {
        return STATE_RECOGNIZED;
      }
      return STATE_FAILED;
    };
    _proto.reset = function reset() {
      clearTimeout(this._timer);
    };
    _proto.emit = function emit(input) {
      if (this.state !== STATE_RECOGNIZED) {
        return;
      }
      if (input && input.eventType & INPUT_END) {
        this.manager.emit(this.options.event + "up", input);
      } else {
        this._input.timeStamp = now2();
        this.manager.emit(this.options.event, this._input);
      }
    };
    return PressRecognizer2;
  }(Recognizer);
  var defaults = {
    /**
     * @private
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,
    /**
     * @private
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,
    /**
     * @private
     * @type {Boolean}
     * @default true
     */
    enable: true,
    /**
     * @private
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,
    /**
     * @private
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,
    /**
     * @private
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
      /**
       * @private
       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */
      userSelect: "none",
      /**
       * @private
       * Disable the Windows Phone grippers when pressing an element.
       * @type {String}
       * @default 'none'
       */
      touchSelect: "none",
      /**
       * @private
       * Disables the default callout shown when you touch and hold a touch target.
       * On iOS, when you touch and hold a touch target such as a link, Safari displays
       * a callout containing information about the link. This property allows you to disable that callout.
       * @type {String}
       * @default 'none'
       */
      touchCallout: "none",
      /**
       * @private
       * Specifies whether zooming is enabled. Used by IE10>
       * @type {String}
       * @default 'none'
       */
      contentZooming: "none",
      /**
       * @private
       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */
      userDrag: "none",
      /**
       * @private
       * Overrides the highlight color shown when the user taps a link or a JavaScript
       * clickable element in iOS. This property obeys the alpha value, if specified.
       * @type {String}
       * @default 'rgba(0,0,0,0)'
       */
      tapHighlightColor: "rgba(0,0,0,0)"
    }
  };
  var preset = [[RotateRecognizer, {
    enable: false
  }], [PinchRecognizer, {
    enable: false
  }, ["rotate"]], [SwipeRecognizer, {
    direction: DIRECTION_HORIZONTAL
  }], [PanRecognizer, {
    direction: DIRECTION_HORIZONTAL
  }, ["swipe"]], [TapRecognizer], [TapRecognizer, {
    event: "doubletap",
    taps: 2
  }, ["tap"]], [PressRecognizer]];
  var STOP = 1;
  var FORCED_STOP = 2;
  function toggleCssProps(manager, add) {
    var element = manager.element;
    if (!element.style) {
      return;
    }
    var prop;
    each(manager.options.cssProps, function(value, name) {
      prop = prefixed(element.style, name);
      if (add) {
        manager.oldCssProps[prop] = element.style[prop];
        element.style[prop] = value;
      } else {
        element.style[prop] = manager.oldCssProps[prop] || "";
      }
    });
    if (!add) {
      manager.oldCssProps = {};
    }
  }
  function triggerDomEvent(event2, data2) {
    var gestureEvent = document.createEvent("Event");
    gestureEvent.initEvent(event2, true, true);
    gestureEvent.gesture = data2;
    data2.target.dispatchEvent(gestureEvent);
  }
  var Manager = /* @__PURE__ */ function() {
    function Manager2(element, options) {
      var _this = this;
      this.options = assign$1({}, defaults, options || {});
      this.options.inputTarget = this.options.inputTarget || element;
      this.handlers = {};
      this.session = {};
      this.recognizers = [];
      this.oldCssProps = {};
      this.element = element;
      this.input = createInputInstance(this);
      this.touchAction = new TouchAction(this, this.options.touchAction);
      toggleCssProps(this, true);
      each(this.options.recognizers, function(item) {
        var recognizer = _this.add(new item[0](item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
      }, this);
    }
    var _proto = Manager2.prototype;
    _proto.set = function set2(options) {
      assign$1(this.options, options);
      if (options.touchAction) {
        this.touchAction.update();
      }
      if (options.inputTarget) {
        this.input.destroy();
        this.input.target = options.inputTarget;
        this.input.init();
      }
      return this;
    };
    _proto.stop = function stop(force) {
      this.session.stopped = force ? FORCED_STOP : STOP;
    };
    _proto.recognize = function recognize(inputData) {
      var session = this.session;
      if (session.stopped) {
        return;
      }
      this.touchAction.preventDefaults(inputData);
      var recognizer;
      var recognizers = this.recognizers;
      var curRecognizer = session.curRecognizer;
      if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
        session.curRecognizer = null;
        curRecognizer = null;
      }
      var i2 = 0;
      while (i2 < recognizers.length) {
        recognizer = recognizers[i2];
        if (session.stopped !== FORCED_STOP && // 1
        (!curRecognizer || recognizer === curRecognizer || // 2
        recognizer.canRecognizeWith(curRecognizer))) {
          recognizer.recognize(inputData);
        } else {
          recognizer.reset();
        }
        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
          session.curRecognizer = recognizer;
          curRecognizer = recognizer;
        }
        i2++;
      }
    };
    _proto.get = function get3(recognizer) {
      if (recognizer instanceof Recognizer) {
        return recognizer;
      }
      var recognizers = this.recognizers;
      for (var i2 = 0; i2 < recognizers.length; i2++) {
        if (recognizers[i2].options.event === recognizer) {
          return recognizers[i2];
        }
      }
      return null;
    };
    _proto.add = function add(recognizer) {
      if (invokeArrayArg(recognizer, "add", this)) {
        return this;
      }
      var existing = this.get(recognizer.options.event);
      if (existing) {
        this.remove(existing);
      }
      this.recognizers.push(recognizer);
      recognizer.manager = this;
      this.touchAction.update();
      return recognizer;
    };
    _proto.remove = function remove(recognizer) {
      if (invokeArrayArg(recognizer, "remove", this)) {
        return this;
      }
      var targetRecognizer = this.get(recognizer);
      if (recognizer) {
        var recognizers = this.recognizers;
        var index = inArray(recognizers, targetRecognizer);
        if (index !== -1) {
          recognizers.splice(index, 1);
          this.touchAction.update();
        }
      }
      return this;
    };
    _proto.on = function on(events, handler) {
      if (events === void 0 || handler === void 0) {
        return this;
      }
      var handlers = this.handlers;
      each(splitStr(events), function(event2) {
        handlers[event2] = handlers[event2] || [];
        handlers[event2].push(handler);
      });
      return this;
    };
    _proto.off = function off(events, handler) {
      if (events === void 0) {
        return this;
      }
      var handlers = this.handlers;
      each(splitStr(events), function(event2) {
        if (!handler) {
          delete handlers[event2];
        } else {
          handlers[event2] && handlers[event2].splice(inArray(handlers[event2], handler), 1);
        }
      });
      return this;
    };
    _proto.emit = function emit(event2, data2) {
      if (this.options.domEvents) {
        triggerDomEvent(event2, data2);
      }
      var handlers = this.handlers[event2] && this.handlers[event2].slice();
      if (!handlers || !handlers.length) {
        return;
      }
      data2.type = event2;
      data2.preventDefault = function() {
        data2.srcEvent.preventDefault();
      };
      var i2 = 0;
      while (i2 < handlers.length) {
        handlers[i2](data2);
        i2++;
      }
    };
    _proto.destroy = function destroy() {
      this.element && toggleCssProps(this, false);
      this.handlers = {};
      this.session = {};
      this.input.destroy();
      this.element = null;
    };
    return Manager2;
  }();
  var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
  };
  var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
  var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
  var SingleTouchInput = /* @__PURE__ */ function(_Input) {
    _inheritsLoose(SingleTouchInput2, _Input);
    function SingleTouchInput2() {
      var _this;
      var proto = SingleTouchInput2.prototype;
      proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
      proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
      _this = _Input.apply(this, arguments) || this;
      _this.started = false;
      return _this;
    }
    var _proto = SingleTouchInput2.prototype;
    _proto.handler = function handler(ev) {
      var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
      if (type === INPUT_START) {
        this.started = true;
      }
      if (!this.started) {
        return;
      }
      var touches = normalizeSingleTouches.call(this, ev, type);
      if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
        this.started = false;
      }
      this.callback(this.manager, type, {
        pointers: touches[0],
        changedPointers: touches[1],
        pointerType: INPUT_TYPE_TOUCH,
        srcEvent: ev
      });
    };
    return SingleTouchInput2;
  }(Input);
  function normalizeSingleTouches(ev, type) {
    var all2 = toArray$1(ev.touches);
    var changed = toArray$1(ev.changedTouches);
    if (type & (INPUT_END | INPUT_CANCEL)) {
      all2 = uniqueArray(all2.concat(changed), "identifier", true);
    }
    return [all2, changed];
  }
  function deprecate(method2, name, message) {
    var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
    return function() {
      var e = new Error("get-stack-trace");
      var stack2 = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
      var log = window.console && (window.console.warn || window.console.log);
      if (log) {
        log.call(window.console, deprecationMessage, stack2);
      }
      return method2.apply(this, arguments);
    };
  }
  var extend$1 = deprecate(function(dest, src, merge2) {
    var keys4 = Object.keys(src);
    var i2 = 0;
    while (i2 < keys4.length) {
      if (!merge2 || merge2 && dest[keys4[i2]] === void 0) {
        dest[keys4[i2]] = src[keys4[i2]];
      }
      i2++;
    }
    return dest;
  }, "extend", "Use `assign`.");
  var merge$1 = deprecate(function(dest, src) {
    return extend$1(dest, src, true);
  }, "merge", "Use `assign`.");
  function inherit(child, base, properties) {
    var baseP = base.prototype;
    var childP;
    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;
    if (properties) {
      assign$1(childP, properties);
    }
  }
  function bindFn(fn, context) {
    return function boundFn() {
      return fn.apply(context, arguments);
    };
  }
  var Hammer$3 = /* @__PURE__ */ function() {
    var Hammer2 = (
      /**
        * @private
        * @const {string}
        */
      function Hammer3(element, options) {
        if (options === void 0) {
          options = {};
        }
        return new Manager(element, _extends({
          recognizers: preset.concat()
        }, options));
      }
    );
    Hammer2.VERSION = "2.0.17-rc";
    Hammer2.DIRECTION_ALL = DIRECTION_ALL;
    Hammer2.DIRECTION_DOWN = DIRECTION_DOWN;
    Hammer2.DIRECTION_LEFT = DIRECTION_LEFT;
    Hammer2.DIRECTION_RIGHT = DIRECTION_RIGHT;
    Hammer2.DIRECTION_UP = DIRECTION_UP;
    Hammer2.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;
    Hammer2.DIRECTION_VERTICAL = DIRECTION_VERTICAL;
    Hammer2.DIRECTION_NONE = DIRECTION_NONE;
    Hammer2.DIRECTION_DOWN = DIRECTION_DOWN;
    Hammer2.INPUT_START = INPUT_START;
    Hammer2.INPUT_MOVE = INPUT_MOVE;
    Hammer2.INPUT_END = INPUT_END;
    Hammer2.INPUT_CANCEL = INPUT_CANCEL;
    Hammer2.STATE_POSSIBLE = STATE_POSSIBLE;
    Hammer2.STATE_BEGAN = STATE_BEGAN;
    Hammer2.STATE_CHANGED = STATE_CHANGED;
    Hammer2.STATE_ENDED = STATE_ENDED;
    Hammer2.STATE_RECOGNIZED = STATE_RECOGNIZED;
    Hammer2.STATE_CANCELLED = STATE_CANCELLED;
    Hammer2.STATE_FAILED = STATE_FAILED;
    Hammer2.Manager = Manager;
    Hammer2.Input = Input;
    Hammer2.TouchAction = TouchAction;
    Hammer2.TouchInput = TouchInput;
    Hammer2.MouseInput = MouseInput;
    Hammer2.PointerEventInput = PointerEventInput;
    Hammer2.TouchMouseInput = TouchMouseInput;
    Hammer2.SingleTouchInput = SingleTouchInput;
    Hammer2.Recognizer = Recognizer;
    Hammer2.AttrRecognizer = AttrRecognizer;
    Hammer2.Tap = TapRecognizer;
    Hammer2.Pan = PanRecognizer;
    Hammer2.Swipe = SwipeRecognizer;
    Hammer2.Pinch = PinchRecognizer;
    Hammer2.Rotate = RotateRecognizer;
    Hammer2.Press = PressRecognizer;
    Hammer2.on = addEventListeners;
    Hammer2.off = removeEventListeners;
    Hammer2.each = each;
    Hammer2.merge = merge$1;
    Hammer2.extend = extend$1;
    Hammer2.bindFn = bindFn;
    Hammer2.assign = assign$1;
    Hammer2.inherit = inherit;
    Hammer2.bindFn = bindFn;
    Hammer2.prefixed = prefixed;
    Hammer2.toArray = toArray$1;
    Hammer2.inArray = inArray;
    Hammer2.uniqueArray = uniqueArray;
    Hammer2.splitStr = splitStr;
    Hammer2.boolOrFn = boolOrFn;
    Hammer2.hasParent = hasParent$1;
    Hammer2.addEventListeners = addEventListeners;
    Hammer2.removeEventListeners = removeEventListeners;
    Hammer2.defaults = assign$1({}, defaults, {
      preset
    });
    return Hammer2;
  }();
  Hammer$3.defaults;
  var Hammer$4 = Hammer$3;
  function ownKeys$3(object2, enumerableOnly) {
    var keys4 = _Object$keys(object2);
    if (_Object$getOwnPropertySymbols) {
      var symbols = _Object$getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
        return _Object$getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys4.push.apply(keys4, symbols);
    }
    return keys4;
  }
  function _objectSpread$2(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var _context22, _context23;
      var source = null != arguments[i2] ? arguments[i2] : {};
      i2 % 2 ? _forEachInstanceProperty(_context22 = ownKeys$3(Object(source), true)).call(_context22, function(key) {
        _defineProperty(target, key, source[key]);
      }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context23 = ownKeys$3(Object(source))).call(_context23, function(key) {
        _Object$defineProperty$1(target, key, _Object$getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createForOfIteratorHelper$7(o, allowArrayLike) {
    var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
    if (!it2) {
      if (_Array$isArray(o) || (it2 = _unsupportedIterableToArray$7(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it2)
          o = it2;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n() {
          if (i2 >= o.length)
            return { done: true };
          return { done: false, value: o[i2++] };
        }, e: function e(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it2 = it2.call(o);
    }, n: function n() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it2.return != null)
          it2.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray$7(o, minLen) {
    var _context21;
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray$7(o, minLen);
    var n = _sliceInstanceProperty(_context21 = Object.prototype.toString.call(o)).call(_context21, 8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from$1(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray$7(o, minLen);
  }
  function _arrayLikeToArray$7(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  var DELETE = _Symbol("DELETE");
  function pureDeepObjectAssign(base) {
    var _context;
    for (var _len = arguments.length, updates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      updates[_key - 1] = arguments[_key];
    }
    return deepObjectAssign.apply(void 0, _concatInstanceProperty(_context = [{}, base]).call(_context, updates));
  }
  function deepObjectAssign() {
    var merged = deepObjectAssignNonentry.apply(void 0, arguments);
    stripDelete(merged);
    return merged;
  }
  function deepObjectAssignNonentry() {
    for (var _len2 = arguments.length, values3 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      values3[_key2] = arguments[_key2];
    }
    if (values3.length < 2) {
      return values3[0];
    } else if (values3.length > 2) {
      var _context2;
      return deepObjectAssignNonentry.apply(void 0, _concatInstanceProperty(_context2 = [deepObjectAssign(values3[0], values3[1])]).call(_context2, _toConsumableArray(_sliceInstanceProperty(values3).call(values3, 2))));
    }
    var a = values3[0];
    var b = values3[1];
    var _iterator = _createForOfIteratorHelper$7(_Reflect$ownKeys(b)), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var prop = _step.value;
        if (!Object.prototype.propertyIsEnumerable.call(b, prop))
          ;
        else if (b[prop] === DELETE) {
          delete a[prop];
        } else if (a[prop] !== null && b[prop] !== null && _typeof$1(a[prop]) === "object" && _typeof$1(b[prop]) === "object" && !_Array$isArray(a[prop]) && !_Array$isArray(b[prop])) {
          a[prop] = deepObjectAssignNonentry(a[prop], b[prop]);
        } else {
          a[prop] = clone(b[prop]);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return a;
  }
  function clone(a) {
    if (_Array$isArray(a)) {
      return _mapInstanceProperty(a).call(a, function(value) {
        return clone(value);
      });
    } else if (_typeof$1(a) === "object" && a !== null) {
      return deepObjectAssignNonentry({}, a);
    } else {
      return a;
    }
  }
  function stripDelete(a) {
    for (var _i = 0, _Object$keys$1 = _Object$keys(a); _i < _Object$keys$1.length; _i++) {
      var prop = _Object$keys$1[_i];
      if (a[prop] === DELETE) {
        delete a[prop];
      } else if (_typeof$1(a[prop]) === "object" && a[prop] !== null) {
        stripDelete(a[prop]);
      }
    }
  }
  function Alea() {
    for (var _len3 = arguments.length, seed = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      seed[_key3] = arguments[_key3];
    }
    return AleaImplementation(seed.length ? seed : [_Date$now()]);
  }
  function AleaImplementation(seed) {
    var _mashSeed = mashSeed(seed), _mashSeed2 = _slicedToArray(_mashSeed, 3), s0 = _mashSeed2[0], s1 = _mashSeed2[1], s2 = _mashSeed2[2];
    var c = 1;
    var random = function random2() {
      var t = 2091639 * s0 + c * 23283064365386963e-26;
      s0 = s1;
      s1 = s2;
      return s2 = t - (c = t | 0);
    };
    random.uint32 = function() {
      return random() * 4294967296;
    };
    random.fract53 = function() {
      return random() + (random() * 2097152 | 0) * 11102230246251565e-32;
    };
    random.algorithm = "Alea";
    random.seed = seed;
    random.version = "0.9";
    return random;
  }
  function mashSeed() {
    var mash = Mash();
    var s0 = mash(" ");
    var s1 = mash(" ");
    var s2 = mash(" ");
    for (var i2 = 0; i2 < arguments.length; i2++) {
      s0 -= mash(i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]);
      if (s0 < 0) {
        s0 += 1;
      }
      s1 -= mash(i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]);
      if (s1 < 0) {
        s1 += 1;
      }
      s2 -= mash(i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]);
      if (s2 < 0) {
        s2 += 1;
      }
    }
    return [s0, s1, s2];
  }
  function Mash() {
    var n = 4022871197;
    return function(data2) {
      var string2 = data2.toString();
      for (var i2 = 0; i2 < string2.length; i2++) {
        n += string2.charCodeAt(i2);
        var h = 0.02519603282416938 * n;
        n = h >>> 0;
        h -= n;
        h *= n;
        n = h >>> 0;
        h -= n;
        n += h * 4294967296;
      }
      return (n >>> 0) * 23283064365386963e-26;
    };
  }
  function hammerMock$1() {
    var noop2 = function noop3() {
    };
    return {
      on: noop2,
      off: noop2,
      destroy: noop2,
      emit: noop2,
      get: function get3() {
        return {
          set: noop2
        };
      }
    };
  }
  var Hammer$1 = typeof window !== "undefined" ? window.Hammer || Hammer$4 : function() {
    return hammerMock$1();
  };
  function Activator$1(container) {
    var _this = this, _context3;
    this._cleanupQueue = [];
    this.active = false;
    this._dom = {
      container,
      overlay: document.createElement("div")
    };
    this._dom.overlay.classList.add("vis-overlay");
    this._dom.container.appendChild(this._dom.overlay);
    this._cleanupQueue.push(function() {
      _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
    });
    var hammer = Hammer$1(this._dom.overlay);
    hammer.on("tap", _bindInstanceProperty$1(_context3 = this._onTapOverlay).call(_context3, this));
    this._cleanupQueue.push(function() {
      hammer.destroy();
    });
    var events = ["tap", "doubletap", "press", "pinch", "pan", "panstart", "panmove", "panend"];
    _forEachInstanceProperty(events).call(events, function(event2) {
      hammer.on(event2, function(event3) {
        event3.srcEvent.stopPropagation();
      });
    });
    if (document && document.body) {
      this._onClick = function(event2) {
        if (!_hasParent$1(event2.target, container)) {
          _this.deactivate();
        }
      };
      document.body.addEventListener("click", this._onClick);
      this._cleanupQueue.push(function() {
        document.body.removeEventListener("click", _this._onClick);
      });
    }
    this._escListener = function(event2) {
      if ("key" in event2 ? event2.key === "Escape" : event2.keyCode === 27) {
        _this.deactivate();
      }
    };
  }
  Emitter(Activator$1.prototype);
  Activator$1.current = null;
  Activator$1.prototype.destroy = function() {
    var _context4, _context5;
    this.deactivate();
    var _iterator2 = _createForOfIteratorHelper$7(_reverseInstanceProperty(_context4 = _spliceInstanceProperty(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)), _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
        var callback = _step2.value;
        callback();
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  };
  Activator$1.prototype.activate = function() {
    if (Activator$1.current) {
      Activator$1.current.deactivate();
    }
    Activator$1.current = this;
    this.active = true;
    this._dom.overlay.style.display = "none";
    this._dom.container.classList.add("vis-active");
    this.emit("change");
    this.emit("activate");
    document.body.addEventListener("keydown", this._escListener);
  };
  Activator$1.prototype.deactivate = function() {
    this.active = false;
    this._dom.overlay.style.display = "block";
    this._dom.container.classList.remove("vis-active");
    document.body.removeEventListener("keydown", this._escListener);
    this.emit("change");
    this.emit("deactivate");
  };
  Activator$1.prototype._onTapOverlay = function(event2) {
    this.activate();
    event2.srcEvent.stopPropagation();
  };
  function _hasParent$1(element, parent2) {
    while (element) {
      if (element === parent2) {
        return true;
      }
      element = element.parentNode;
    }
    return false;
  }
  var ASPDateRegex$1 = /^\/?Date\((-?\d+)/i;
  var fullHexRE = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
  var shortHexRE = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  var rgbRE = /^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i;
  var rgbaRE = /^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;
  function isNumber(value) {
    return value instanceof Number || typeof value === "number";
  }
  function recursiveDOMDelete(DOMobject) {
    if (DOMobject) {
      while (DOMobject.hasChildNodes() === true) {
        var child = DOMobject.firstChild;
        if (child) {
          recursiveDOMDelete(child);
          DOMobject.removeChild(child);
        }
      }
    }
  }
  function isString(value) {
    return value instanceof String || typeof value === "string";
  }
  function isObject$7(value) {
    return _typeof$1(value) === "object" && value !== null;
  }
  function isDate(value) {
    if (value instanceof Date) {
      return true;
    } else if (isString(value)) {
      var match2 = ASPDateRegex$1.exec(value);
      if (match2) {
        return true;
      } else if (!isNaN(Date.parse(value))) {
        return true;
      }
    }
    return false;
  }
  function copyOrDelete(a, b, prop, allowDeletion) {
    var doDeletion = false;
    if (allowDeletion === true) {
      doDeletion = b[prop] === null && a[prop] !== void 0;
    }
    if (doDeletion) {
      delete a[prop];
    } else {
      a[prop] = b[prop];
    }
  }
  function fillIfDefined(a, b) {
    var allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    for (var prop in a) {
      if (b[prop] !== void 0) {
        if (b[prop] === null || _typeof$1(b[prop]) !== "object") {
          copyOrDelete(a, b, prop, allowDeletion);
        } else {
          var aProp = a[prop];
          var bProp = b[prop];
          if (isObject$7(aProp) && isObject$7(bProp)) {
            fillIfDefined(aProp, bProp, allowDeletion);
          }
        }
      }
    }
  }
  var extend = _Object$assign;
  function selectiveExtend(props, a) {
    if (!_Array$isArray(props)) {
      throw new Error("Array with property names expected as first argument");
    }
    for (var _len4 = arguments.length, others = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
      others[_key4 - 2] = arguments[_key4];
    }
    for (var _i2 = 0, _others = others; _i2 < _others.length; _i2++) {
      var other = _others[_i2];
      for (var p = 0; p < props.length; p++) {
        var prop = props[p];
        if (other && Object.prototype.hasOwnProperty.call(other, prop)) {
          a[prop] = other[prop];
        }
      }
    }
    return a;
  }
  function selectiveDeepExtend(props, a, b) {
    var allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (_Array$isArray(b)) {
      throw new TypeError("Arrays are not supported by deepExtend");
    }
    for (var p = 0; p < props.length; p++) {
      var prop = props[p];
      if (Object.prototype.hasOwnProperty.call(b, prop)) {
        if (b[prop] && b[prop].constructor === Object) {
          if (a[prop] === void 0) {
            a[prop] = {};
          }
          if (a[prop].constructor === Object) {
            deepExtend(a[prop], b[prop], false, allowDeletion);
          } else {
            copyOrDelete(a, b, prop, allowDeletion);
          }
        } else if (_Array$isArray(b[prop])) {
          throw new TypeError("Arrays are not supported by deepExtend");
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      }
    }
    return a;
  }
  function selectiveNotDeepExtend(propsToExclude, a, b) {
    var allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (_Array$isArray(b)) {
      throw new TypeError("Arrays are not supported by deepExtend");
    }
    for (var prop in b) {
      if (!Object.prototype.hasOwnProperty.call(b, prop)) {
        continue;
      }
      if (_includesInstanceProperty(propsToExclude).call(propsToExclude, prop)) {
        continue;
      }
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === void 0) {
          a[prop] = {};
        }
        if (a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop]);
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      } else if (_Array$isArray(b[prop])) {
        a[prop] = [];
        for (var i2 = 0; i2 < b[prop].length; i2++) {
          a[prop].push(b[prop][i2]);
        }
      } else {
        copyOrDelete(a, b, prop, allowDeletion);
      }
    }
    return a;
  }
  function deepExtend(a, b) {
    var protoExtend = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    for (var prop in b) {
      if (Object.prototype.hasOwnProperty.call(b, prop) || protoExtend === true) {
        if (_typeof$1(b[prop]) === "object" && b[prop] !== null && _Object$getPrototypeOf$1(b[prop]) === Object.prototype) {
          if (a[prop] === void 0) {
            a[prop] = deepExtend({}, b[prop], protoExtend);
          } else if (_typeof$1(a[prop]) === "object" && a[prop] !== null && _Object$getPrototypeOf$1(a[prop]) === Object.prototype) {
            deepExtend(a[prop], b[prop], protoExtend);
          } else {
            copyOrDelete(a, b, prop, allowDeletion);
          }
        } else if (_Array$isArray(b[prop])) {
          var _context6;
          a[prop] = _sliceInstanceProperty(_context6 = b[prop]).call(_context6);
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      }
    }
    return a;
  }
  function equalArray(a, b) {
    if (a.length !== b.length) {
      return false;
    }
    for (var i2 = 0, len = a.length; i2 < len; i2++) {
      if (a[i2] != b[i2]) {
        return false;
      }
    }
    return true;
  }
  function getType(object2) {
    var type = _typeof$1(object2);
    if (type === "object") {
      if (object2 === null) {
        return "null";
      }
      if (object2 instanceof Boolean) {
        return "Boolean";
      }
      if (object2 instanceof Number) {
        return "Number";
      }
      if (object2 instanceof String) {
        return "String";
      }
      if (_Array$isArray(object2)) {
        return "Array";
      }
      if (object2 instanceof Date) {
        return "Date";
      }
      return "Object";
    }
    if (type === "number") {
      return "Number";
    }
    if (type === "boolean") {
      return "Boolean";
    }
    if (type === "string") {
      return "String";
    }
    if (type === void 0) {
      return "undefined";
    }
    return type;
  }
  function copyAndExtendArray(arr, newValue) {
    var _context7;
    return _concatInstanceProperty(_context7 = []).call(_context7, _toConsumableArray(arr), [newValue]);
  }
  function copyArray(arr) {
    return _sliceInstanceProperty(arr).call(arr);
  }
  function getAbsoluteLeft(elem) {
    return elem.getBoundingClientRect().left;
  }
  function getAbsoluteRight(elem) {
    return elem.getBoundingClientRect().right;
  }
  function getAbsoluteTop(elem) {
    return elem.getBoundingClientRect().top;
  }
  function addClassName(elem, classNames) {
    var classes = elem.className.split(" ");
    var newClasses = classNames.split(" ");
    classes = _concatInstanceProperty(classes).call(classes, _filterInstanceProperty(newClasses).call(newClasses, function(className) {
      return !_includesInstanceProperty(classes).call(classes, className);
    }));
    elem.className = classes.join(" ");
  }
  function removeClassName(elem, classNames) {
    var classes = elem.className.split(" ");
    var oldClasses = classNames.split(" ");
    classes = _filterInstanceProperty(classes).call(classes, function(className) {
      return !_includesInstanceProperty(oldClasses).call(oldClasses, className);
    });
    elem.className = classes.join(" ");
  }
  function forEach$5(object2, callback) {
    if (_Array$isArray(object2)) {
      var len = object2.length;
      for (var i2 = 0; i2 < len; i2++) {
        callback(object2[i2], i2, object2);
      }
    } else {
      for (var key in object2) {
        if (Object.prototype.hasOwnProperty.call(object2, key)) {
          callback(object2[key], key, object2);
        }
      }
    }
  }
  var toArray = _Object$values2;
  function updateProperty(object2, key, value) {
    if (object2[key] !== value) {
      object2[key] = value;
      return true;
    } else {
      return false;
    }
  }
  function throttle(fn) {
    var scheduled = false;
    return function() {
      if (!scheduled) {
        scheduled = true;
        requestAnimationFrame(function() {
          scheduled = false;
          fn();
        });
      }
    };
  }
  function addEventListener(element, action, listener, useCapture) {
    if (element.addEventListener) {
      var _context8;
      if (useCapture === void 0) {
        useCapture = false;
      }
      if (action === "mousewheel" && _includesInstanceProperty(_context8 = navigator.userAgent).call(_context8, "Firefox")) {
        action = "DOMMouseScroll";
      }
      element.addEventListener(action, listener, useCapture);
    } else {
      element.attachEvent("on" + action, listener);
    }
  }
  function removeEventListener(element, action, listener, useCapture) {
    if (element.removeEventListener) {
      var _context9;
      if (useCapture === void 0) {
        useCapture = false;
      }
      if (action === "mousewheel" && _includesInstanceProperty(_context9 = navigator.userAgent).call(_context9, "Firefox")) {
        action = "DOMMouseScroll";
      }
      element.removeEventListener(action, listener, useCapture);
    } else {
      element.detachEvent("on" + action, listener);
    }
  }
  function preventDefault(event2) {
    if (!event2) {
      event2 = window.event;
    }
    if (!event2)
      ;
    else if (event2.preventDefault) {
      event2.preventDefault();
    } else {
      event2.returnValue = false;
    }
  }
  function getTarget() {
    var event2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.event;
    var target = null;
    if (!event2)
      ;
    else if (event2.target) {
      target = event2.target;
    } else if (event2.srcElement) {
      target = event2.srcElement;
    }
    if (!(target instanceof Element)) {
      return null;
    }
    if (target.nodeType != null && target.nodeType == 3) {
      target = target.parentNode;
      if (!(target instanceof Element)) {
        return null;
      }
    }
    return target;
  }
  function hasParent(element, parent2) {
    var elem = element;
    while (elem) {
      if (elem === parent2) {
        return true;
      } else if (elem.parentNode) {
        elem = elem.parentNode;
      } else {
        return false;
      }
    }
    return false;
  }
  var option = {
    /**
     * Convert a value into a boolean.
     *
     * @param value - Value to be converted intoboolean, a function will be executed as `(() => unknown)`.
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     * @returns Corresponding boolean value, if none then the default value, if none then null.
     */
    asBoolean: function asBoolean(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }
      if (value != null) {
        return value != false;
      }
      return defaultValue || null;
    },
    /**
     * Convert a value into a number.
     *
     * @param value - Value to be converted intonumber, a function will be executed as `(() => unknown)`.
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     * @returns Corresponding **boxed** number value, if none then the default value, if none then null.
     */
    asNumber: function asNumber(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }
      if (value != null) {
        return Number(value) || defaultValue || null;
      }
      return defaultValue || null;
    },
    /**
     * Convert a value into a string.
     *
     * @param value - Value to be converted intostring, a function will be executed as `(() => unknown)`.
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     * @returns Corresponding **boxed** string value, if none then the default value, if none then null.
     */
    asString: function asString(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }
      if (value != null) {
        return String(value);
      }
      return defaultValue || null;
    },
    /**
     * Convert a value into a size.
     *
     * @param value - Value to be converted intosize, a function will be executed as `(() => unknown)`.
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     * @returns Corresponding string value (number + 'px'), if none then the default value, if none then null.
     */
    asSize: function asSize(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }
      if (isString(value)) {
        return value;
      } else if (isNumber(value)) {
        return value + "px";
      } else {
        return defaultValue || null;
      }
    },
    /**
     * Convert a value into a DOM Element.
     *
     * @param value - Value to be converted into DOM Element, a function will be executed as `(() => unknown)`.
     * @param defaultValue - If the value or the return value of the function == null then this will be returned.
     * @returns The DOM Element, if none then the default value, if none then null.
     */
    asElement: function asElement(value, defaultValue) {
      if (typeof value == "function") {
        value = value();
      }
      return value || defaultValue || null;
    }
  };
  function hexToRGB(hex2) {
    var result;
    switch (hex2.length) {
      case 3:
      case 4:
        result = shortHexRE.exec(hex2);
        return result ? {
          r: _parseInt(result[1] + result[1], 16),
          g: _parseInt(result[2] + result[2], 16),
          b: _parseInt(result[3] + result[3], 16)
        } : null;
      case 6:
      case 7:
        result = fullHexRE.exec(hex2);
        return result ? {
          r: _parseInt(result[1], 16),
          g: _parseInt(result[2], 16),
          b: _parseInt(result[3], 16)
        } : null;
      default:
        return null;
    }
  }
  function overrideOpacity(color, opacity) {
    if (_includesInstanceProperty(color).call(color, "rgba")) {
      return color;
    } else if (_includesInstanceProperty(color).call(color, "rgb")) {
      var rgb = color.substr(_indexOfInstanceProperty(color).call(color, "(") + 1).replace(")", "").split(",");
      return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + opacity + ")";
    } else {
      var _rgb = hexToRGB(color);
      if (_rgb == null) {
        return color;
      } else {
        return "rgba(" + _rgb.r + "," + _rgb.g + "," + _rgb.b + "," + opacity + ")";
      }
    }
  }
  function RGBToHex(red, green, blue) {
    var _context10;
    return "#" + _sliceInstanceProperty(_context10 = ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16)).call(_context10, 1);
  }
  function parseColor(inputColor, defaultColor) {
    if (isString(inputColor)) {
      var colorStr = inputColor;
      if (isValidRGB(colorStr)) {
        var _context11;
        var rgb = _mapInstanceProperty(_context11 = colorStr.substr(4).substr(0, colorStr.length - 5).split(",")).call(_context11, function(value) {
          return _parseInt(value);
        });
        colorStr = RGBToHex(rgb[0], rgb[1], rgb[2]);
      }
      if (isValidHex(colorStr) === true) {
        var hsv = hexToHSV(colorStr);
        var lighterColorHSV = {
          h: hsv.h,
          s: hsv.s * 0.8,
          v: Math.min(1, hsv.v * 1.02)
        };
        var darkerColorHSV = {
          h: hsv.h,
          s: Math.min(1, hsv.s * 1.25),
          v: hsv.v * 0.8
        };
        var darkerColorHex = HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);
        var lighterColorHex = HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);
        return {
          background: colorStr,
          border: darkerColorHex,
          highlight: {
            background: lighterColorHex,
            border: darkerColorHex
          },
          hover: {
            background: lighterColorHex,
            border: darkerColorHex
          }
        };
      } else {
        return {
          background: colorStr,
          border: colorStr,
          highlight: {
            background: colorStr,
            border: colorStr
          },
          hover: {
            background: colorStr,
            border: colorStr
          }
        };
      }
    } else {
      if (defaultColor) {
        var color = {
          background: inputColor.background || defaultColor.background,
          border: inputColor.border || defaultColor.border,
          highlight: isString(inputColor.highlight) ? {
            border: inputColor.highlight,
            background: inputColor.highlight
          } : {
            background: inputColor.highlight && inputColor.highlight.background || defaultColor.highlight.background,
            border: inputColor.highlight && inputColor.highlight.border || defaultColor.highlight.border
          },
          hover: isString(inputColor.hover) ? {
            border: inputColor.hover,
            background: inputColor.hover
          } : {
            border: inputColor.hover && inputColor.hover.border || defaultColor.hover.border,
            background: inputColor.hover && inputColor.hover.background || defaultColor.hover.background
          }
        };
        return color;
      } else {
        var _color = {
          background: inputColor.background || void 0,
          border: inputColor.border || void 0,
          highlight: isString(inputColor.highlight) ? {
            border: inputColor.highlight,
            background: inputColor.highlight
          } : {
            background: inputColor.highlight && inputColor.highlight.background || void 0,
            border: inputColor.highlight && inputColor.highlight.border || void 0
          },
          hover: isString(inputColor.hover) ? {
            border: inputColor.hover,
            background: inputColor.hover
          } : {
            border: inputColor.hover && inputColor.hover.border || void 0,
            background: inputColor.hover && inputColor.hover.background || void 0
          }
        };
        return _color;
      }
    }
  }
  function RGBToHSV(red, green, blue) {
    red = red / 255;
    green = green / 255;
    blue = blue / 255;
    var minRGB = Math.min(red, Math.min(green, blue));
    var maxRGB = Math.max(red, Math.max(green, blue));
    if (minRGB === maxRGB) {
      return {
        h: 0,
        s: 0,
        v: minRGB
      };
    }
    var d = red === minRGB ? green - blue : blue === minRGB ? red - green : blue - red;
    var h = red === minRGB ? 3 : blue === minRGB ? 1 : 5;
    var hue = 60 * (h - d / (maxRGB - minRGB)) / 360;
    var saturation = (maxRGB - minRGB) / maxRGB;
    var value = maxRGB;
    return {
      h: hue,
      s: saturation,
      v: value
    };
  }
  var cssUtil = {
    // split a string with css styles into an object with key/values
    split: function split2(cssText) {
      var _context12;
      var styles = {};
      _forEachInstanceProperty(_context12 = cssText.split(";")).call(_context12, function(style) {
        if (_trimInstanceProperty(style).call(style) != "") {
          var _context13, _context14;
          var parts = style.split(":");
          var key = _trimInstanceProperty(_context13 = parts[0]).call(_context13);
          var value = _trimInstanceProperty(_context14 = parts[1]).call(_context14);
          styles[key] = value;
        }
      });
      return styles;
    },
    // build a css text string from an object with key/values
    join: function join3(styles) {
      var _context15;
      return _mapInstanceProperty(_context15 = _Object$keys(styles)).call(_context15, function(key) {
        return key + ": " + styles[key];
      }).join("; ");
    }
  };
  function addCssText(element, cssText) {
    var currentStyles = cssUtil.split(element.style.cssText);
    var newStyles = cssUtil.split(cssText);
    var styles = _objectSpread$2(_objectSpread$2({}, currentStyles), newStyles);
    element.style.cssText = cssUtil.join(styles);
  }
  function removeCssText(element, cssText) {
    var styles = cssUtil.split(element.style.cssText);
    var removeStyles = cssUtil.split(cssText);
    for (var key in removeStyles) {
      if (Object.prototype.hasOwnProperty.call(removeStyles, key)) {
        delete styles[key];
      }
    }
    element.style.cssText = cssUtil.join(styles);
  }
  function HSVToRGB(h, s, v) {
    var r;
    var g;
    var b;
    var i2 = Math.floor(h * 6);
    var f = h * 6 - i2;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);
    switch (i2 % 6) {
      case 0:
        r = v, g = t, b = p;
        break;
      case 1:
        r = q, g = v, b = p;
        break;
      case 2:
        r = p, g = v, b = t;
        break;
      case 3:
        r = p, g = q, b = v;
        break;
      case 4:
        r = t, g = p, b = v;
        break;
      case 5:
        r = v, g = p, b = q;
        break;
    }
    return {
      r: Math.floor(r * 255),
      g: Math.floor(g * 255),
      b: Math.floor(b * 255)
    };
  }
  function HSVToHex(h, s, v) {
    var rgb = HSVToRGB(h, s, v);
    return RGBToHex(rgb.r, rgb.g, rgb.b);
  }
  function hexToHSV(hex2) {
    var rgb = hexToRGB(hex2);
    if (!rgb) {
      throw new TypeError("'".concat(hex2, "' is not a valid color."));
    }
    return RGBToHSV(rgb.r, rgb.g, rgb.b);
  }
  function isValidHex(hex2) {
    var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex2);
    return isOk;
  }
  function isValidRGB(rgb) {
    return rgbRE.test(rgb);
  }
  function isValidRGBA(rgba) {
    return rgbaRE.test(rgba);
  }
  function selectiveBridgeObject(fields, referenceObject) {
    if (referenceObject !== null && _typeof$1(referenceObject) === "object") {
      var objectTo = _Object$create$1(referenceObject);
      for (var i2 = 0; i2 < fields.length; i2++) {
        if (Object.prototype.hasOwnProperty.call(referenceObject, fields[i2])) {
          if (_typeof$1(referenceObject[fields[i2]]) == "object") {
            objectTo[fields[i2]] = bridgeObject(referenceObject[fields[i2]]);
          }
        }
      }
      return objectTo;
    } else {
      return null;
    }
  }
  function bridgeObject(referenceObject) {
    if (referenceObject === null || _typeof$1(referenceObject) !== "object") {
      return null;
    }
    if (referenceObject instanceof Element) {
      return referenceObject;
    }
    var objectTo = _Object$create$1(referenceObject);
    for (var i2 in referenceObject) {
      if (Object.prototype.hasOwnProperty.call(referenceObject, i2)) {
        if (_typeof$1(referenceObject[i2]) == "object") {
          objectTo[i2] = bridgeObject(referenceObject[i2]);
        }
      }
    }
    return objectTo;
  }
  function insertSort(a, compare) {
    for (var i2 = 0; i2 < a.length; i2++) {
      var k = a[i2];
      var j = void 0;
      for (j = i2; j > 0 && compare(k, a[j - 1]) < 0; j--) {
        a[j] = a[j - 1];
      }
      a[j] = k;
    }
    return a;
  }
  function mergeOptions(mergeTarget, options, option2) {
    var globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    var isPresent = function isPresent2(obj) {
      return obj !== null && obj !== void 0;
    };
    var isObject2 = function isObject3(obj) {
      return obj !== null && _typeof$1(obj) === "object";
    };
    var isEmpty = function isEmpty2(obj) {
      for (var x in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, x)) {
          return false;
        }
      }
      return true;
    };
    if (!isObject2(mergeTarget)) {
      throw new Error("Parameter mergeTarget must be an object");
    }
    if (!isObject2(options)) {
      throw new Error("Parameter options must be an object");
    }
    if (!isPresent(option2)) {
      throw new Error("Parameter option must have a value");
    }
    if (!isObject2(globalOptions)) {
      throw new Error("Parameter globalOptions must be an object");
    }
    var doMerge = function doMerge2(target, options2, option3) {
      if (!isObject2(target[option3])) {
        target[option3] = {};
      }
      var src = options2[option3];
      var dst = target[option3];
      for (var prop in src) {
        if (Object.prototype.hasOwnProperty.call(src, prop)) {
          dst[prop] = src[prop];
        }
      }
    };
    var srcOption = options[option2];
    var globalPassed = isObject2(globalOptions) && !isEmpty(globalOptions);
    var globalOption = globalPassed ? globalOptions[option2] : void 0;
    var globalEnabled = globalOption ? globalOption.enabled : void 0;
    if (srcOption === void 0) {
      return;
    }
    if (typeof srcOption === "boolean") {
      if (!isObject2(mergeTarget[option2])) {
        mergeTarget[option2] = {};
      }
      mergeTarget[option2].enabled = srcOption;
      return;
    }
    if (srcOption === null && !isObject2(mergeTarget[option2])) {
      if (isPresent(globalOption)) {
        mergeTarget[option2] = _Object$create$1(globalOption);
      } else {
        return;
      }
    }
    if (!isObject2(srcOption)) {
      return;
    }
    var enabled = true;
    if (srcOption.enabled !== void 0) {
      enabled = srcOption.enabled;
    } else {
      if (globalEnabled !== void 0) {
        enabled = globalOption.enabled;
      }
    }
    doMerge(mergeTarget, options, option2);
    mergeTarget[option2].enabled = enabled;
  }
  function binarySearchCustom(orderedItems, comparator, field, field2) {
    var maxIterations = 1e4;
    var iteration = 0;
    var low2 = 0;
    var high = orderedItems.length - 1;
    while (low2 <= high && iteration < maxIterations) {
      var middle = Math.floor((low2 + high) / 2);
      var item = orderedItems[middle];
      var value = field2 === void 0 ? item[field] : item[field][field2];
      var searchResult = comparator(value);
      if (searchResult == 0) {
        return middle;
      } else if (searchResult == -1) {
        low2 = middle + 1;
      } else {
        high = middle - 1;
      }
      iteration++;
    }
    return -1;
  }
  function binarySearchValue(orderedItems, target, field, sidePreference, comparator) {
    var maxIterations = 1e4;
    var iteration = 0;
    var low2 = 0;
    var high = orderedItems.length - 1;
    var prevValue;
    var value;
    var nextValue;
    var middle;
    comparator = comparator != void 0 ? comparator : function(a, b) {
      return a == b ? 0 : a < b ? -1 : 1;
    };
    while (low2 <= high && iteration < maxIterations) {
      middle = Math.floor(0.5 * (high + low2));
      prevValue = orderedItems[Math.max(0, middle - 1)][field];
      value = orderedItems[middle][field];
      nextValue = orderedItems[Math.min(orderedItems.length - 1, middle + 1)][field];
      if (comparator(value, target) == 0) {
        return middle;
      } else if (comparator(prevValue, target) < 0 && comparator(value, target) > 0) {
        return sidePreference == "before" ? Math.max(0, middle - 1) : middle;
      } else if (comparator(value, target) < 0 && comparator(nextValue, target) > 0) {
        return sidePreference == "before" ? middle : Math.min(orderedItems.length - 1, middle + 1);
      } else {
        if (comparator(value, target) < 0) {
          low2 = middle + 1;
        } else {
          high = middle - 1;
        }
      }
      iteration++;
    }
    return -1;
  }
  var easingFunctions = {
    /**
     * Provides no easing and no acceleration.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    linear: function linear(t) {
      return t;
    },
    /**
     * Accelerate from zero velocity.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeInQuad: function easeInQuad(t) {
      return t * t;
    },
    /**
     * Decelerate to zero velocity.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeOutQuad: function easeOutQuad(t) {
      return t * (2 - t);
    },
    /**
     * Accelerate until halfway, then decelerate.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeInOutQuad: function easeInOutQuad(t) {
      return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    },
    /**
     * Accelerate from zero velocity.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeInCubic: function easeInCubic(t) {
      return t * t * t;
    },
    /**
     * Decelerate to zero velocity.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeOutCubic: function easeOutCubic(t) {
      return --t * t * t + 1;
    },
    /**
     * Accelerate until halfway, then decelerate.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeInOutCubic: function easeInOutCubic(t) {
      return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    },
    /**
     * Accelerate from zero velocity.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeInQuart: function easeInQuart(t) {
      return t * t * t * t;
    },
    /**
     * Decelerate to zero velocity.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeOutQuart: function easeOutQuart(t) {
      return 1 - --t * t * t * t;
    },
    /**
     * Accelerate until halfway, then decelerate.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeInOutQuart: function easeInOutQuart(t) {
      return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
    },
    /**
     * Accelerate from zero velocity.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeInQuint: function easeInQuint(t) {
      return t * t * t * t * t;
    },
    /**
     * Decelerate to zero velocity.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeOutQuint: function easeOutQuint(t) {
      return 1 + --t * t * t * t * t;
    },
    /**
     * Accelerate until halfway, then decelerate.
     *
     * @param t - Time.
     * @returns Value at time t.
     */
    easeInOutQuint: function easeInOutQuint(t) {
      return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    }
  };
  function getScrollBarWidth() {
    var inner = document.createElement("p");
    inner.style.width = "100%";
    inner.style.height = "200px";
    var outer = document.createElement("div");
    outer.style.position = "absolute";
    outer.style.top = "0px";
    outer.style.left = "0px";
    outer.style.visibility = "hidden";
    outer.style.width = "200px";
    outer.style.height = "150px";
    outer.style.overflow = "hidden";
    outer.appendChild(inner);
    document.body.appendChild(outer);
    var w1 = inner.offsetWidth;
    outer.style.overflow = "scroll";
    var w2 = inner.offsetWidth;
    if (w1 == w2) {
      w2 = outer.clientWidth;
    }
    document.body.removeChild(outer);
    return w1 - w2;
  }
  function topMost(pile, accessors) {
    var candidate;
    if (!_Array$isArray(accessors)) {
      accessors = [accessors];
    }
    var _iterator3 = _createForOfIteratorHelper$7(pile), _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
        var member = _step3.value;
        if (member) {
          candidate = member[accessors[0]];
          for (var i2 = 1; i2 < accessors.length; i2++) {
            if (candidate) {
              candidate = candidate[accessors[i2]];
            }
          }
          if (typeof candidate !== "undefined") {
            break;
          }
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return candidate;
  }
  var htmlColors$1 = {
    black: "#000000",
    navy: "#000080",
    darkblue: "#00008B",
    mediumblue: "#0000CD",
    blue: "#0000FF",
    darkgreen: "#006400",
    green: "#008000",
    teal: "#008080",
    darkcyan: "#008B8B",
    deepskyblue: "#00BFFF",
    darkturquoise: "#00CED1",
    mediumspringgreen: "#00FA9A",
    lime: "#00FF00",
    springgreen: "#00FF7F",
    aqua: "#00FFFF",
    cyan: "#00FFFF",
    midnightblue: "#191970",
    dodgerblue: "#1E90FF",
    lightseagreen: "#20B2AA",
    forestgreen: "#228B22",
    seagreen: "#2E8B57",
    darkslategray: "#2F4F4F",
    limegreen: "#32CD32",
    mediumseagreen: "#3CB371",
    turquoise: "#40E0D0",
    royalblue: "#4169E1",
    steelblue: "#4682B4",
    darkslateblue: "#483D8B",
    mediumturquoise: "#48D1CC",
    indigo: "#4B0082",
    darkolivegreen: "#556B2F",
    cadetblue: "#5F9EA0",
    cornflowerblue: "#6495ED",
    mediumaquamarine: "#66CDAA",
    dimgray: "#696969",
    slateblue: "#6A5ACD",
    olivedrab: "#6B8E23",
    slategray: "#708090",
    lightslategray: "#778899",
    mediumslateblue: "#7B68EE",
    lawngreen: "#7CFC00",
    chartreuse: "#7FFF00",
    aquamarine: "#7FFFD4",
    maroon: "#800000",
    purple: "#800080",
    olive: "#808000",
    gray: "#808080",
    skyblue: "#87CEEB",
    lightskyblue: "#87CEFA",
    blueviolet: "#8A2BE2",
    darkred: "#8B0000",
    darkmagenta: "#8B008B",
    saddlebrown: "#8B4513",
    darkseagreen: "#8FBC8F",
    lightgreen: "#90EE90",
    mediumpurple: "#9370D8",
    darkviolet: "#9400D3",
    palegreen: "#98FB98",
    darkorchid: "#9932CC",
    yellowgreen: "#9ACD32",
    sienna: "#A0522D",
    brown: "#A52A2A",
    darkgray: "#A9A9A9",
    lightblue: "#ADD8E6",
    greenyellow: "#ADFF2F",
    paleturquoise: "#AFEEEE",
    lightsteelblue: "#B0C4DE",
    powderblue: "#B0E0E6",
    firebrick: "#B22222",
    darkgoldenrod: "#B8860B",
    mediumorchid: "#BA55D3",
    rosybrown: "#BC8F8F",
    darkkhaki: "#BDB76B",
    silver: "#C0C0C0",
    mediumvioletred: "#C71585",
    indianred: "#CD5C5C",
    peru: "#CD853F",
    chocolate: "#D2691E",
    tan: "#D2B48C",
    lightgrey: "#D3D3D3",
    palevioletred: "#D87093",
    thistle: "#D8BFD8",
    orchid: "#DA70D6",
    goldenrod: "#DAA520",
    crimson: "#DC143C",
    gainsboro: "#DCDCDC",
    plum: "#DDA0DD",
    burlywood: "#DEB887",
    lightcyan: "#E0FFFF",
    lavender: "#E6E6FA",
    darksalmon: "#E9967A",
    violet: "#EE82EE",
    palegoldenrod: "#EEE8AA",
    lightcoral: "#F08080",
    khaki: "#F0E68C",
    aliceblue: "#F0F8FF",
    honeydew: "#F0FFF0",
    azure: "#F0FFFF",
    sandybrown: "#F4A460",
    wheat: "#F5DEB3",
    beige: "#F5F5DC",
    whitesmoke: "#F5F5F5",
    mintcream: "#F5FFFA",
    ghostwhite: "#F8F8FF",
    salmon: "#FA8072",
    antiquewhite: "#FAEBD7",
    linen: "#FAF0E6",
    lightgoldenrodyellow: "#FAFAD2",
    oldlace: "#FDF5E6",
    red: "#FF0000",
    fuchsia: "#FF00FF",
    magenta: "#FF00FF",
    deeppink: "#FF1493",
    orangered: "#FF4500",
    tomato: "#FF6347",
    hotpink: "#FF69B4",
    coral: "#FF7F50",
    darkorange: "#FF8C00",
    lightsalmon: "#FFA07A",
    orange: "#FFA500",
    lightpink: "#FFB6C1",
    pink: "#FFC0CB",
    gold: "#FFD700",
    peachpuff: "#FFDAB9",
    navajowhite: "#FFDEAD",
    moccasin: "#FFE4B5",
    bisque: "#FFE4C4",
    mistyrose: "#FFE4E1",
    blanchedalmond: "#FFEBCD",
    papayawhip: "#FFEFD5",
    lavenderblush: "#FFF0F5",
    seashell: "#FFF5EE",
    cornsilk: "#FFF8DC",
    lemonchiffon: "#FFFACD",
    floralwhite: "#FFFAF0",
    snow: "#FFFAFA",
    yellow: "#FFFF00",
    lightyellow: "#FFFFE0",
    ivory: "#FFFFF0",
    white: "#FFFFFF"
  };
  var ColorPicker$1 = /* @__PURE__ */ function() {
    function ColorPicker$12() {
      var pixelRatio = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
      _classCallCheck(this, ColorPicker$12);
      this.pixelRatio = pixelRatio;
      this.generated = false;
      this.centerCoordinates = {
        x: 289 / 2,
        y: 289 / 2
      };
      this.r = 289 * 0.49;
      this.color = {
        r: 255,
        g: 255,
        b: 255,
        a: 1
      };
      this.hueCircle = void 0;
      this.initialColor = {
        r: 255,
        g: 255,
        b: 255,
        a: 1
      };
      this.previousColor = void 0;
      this.applied = false;
      this.updateCallback = function() {
      };
      this.closeCallback = function() {
      };
      this._create();
    }
    _createClass(ColorPicker$12, [{
      key: "insertTo",
      value: function insertTo(container) {
        if (this.hammer !== void 0) {
          this.hammer.destroy();
          this.hammer = void 0;
        }
        this.container = container;
        this.container.appendChild(this.frame);
        this._bindHammer();
        this._setSize();
      }
      /**
       * the callback is executed on apply and save. Bind it to the application
       *
       * @param {Function} callback
       */
    }, {
      key: "setUpdateCallback",
      value: function setUpdateCallback(callback) {
        if (typeof callback === "function") {
          this.updateCallback = callback;
        } else {
          throw new Error("Function attempted to set as colorPicker update callback is not a function.");
        }
      }
      /**
       * the callback is executed on apply and save. Bind it to the application
       *
       * @param {Function} callback
       */
    }, {
      key: "setCloseCallback",
      value: function setCloseCallback(callback) {
        if (typeof callback === "function") {
          this.closeCallback = callback;
        } else {
          throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
        }
      }
      /**
       *
       * @param {string} color
       * @returns {string}
       * @private
       */
    }, {
      key: "_isColorString",
      value: function _isColorString(color) {
        if (typeof color === "string") {
          return htmlColors$1[color];
        }
      }
      /**
       * Set the color of the colorPicker
       * Supported formats:
       * 'red'                   --> HTML color string
       * '#ffffff'               --> hex string
       * 'rgb(255,255,255)'      --> rgb string
       * 'rgba(255,255,255,1.0)' --> rgba string
       * {r:255,g:255,b:255}     --> rgb object
       * {r:255,g:255,b:255,a:1.0} --> rgba object
       *
       * @param {string | object} color
       * @param {boolean} [setInitial=true]
       */
    }, {
      key: "setColor",
      value: function setColor(color) {
        var setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        if (color === "none") {
          return;
        }
        var rgba;
        var htmlColor = this._isColorString(color);
        if (htmlColor !== void 0) {
          color = htmlColor;
        }
        if (isString(color) === true) {
          if (isValidRGB(color) === true) {
            var rgbaArray = color.substr(4).substr(0, color.length - 5).split(",");
            rgba = {
              r: rgbaArray[0],
              g: rgbaArray[1],
              b: rgbaArray[2],
              a: 1
            };
          } else if (isValidRGBA(color) === true) {
            var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(",");
            rgba = {
              r: _rgbaArray[0],
              g: _rgbaArray[1],
              b: _rgbaArray[2],
              a: _rgbaArray[3]
            };
          } else if (isValidHex(color) === true) {
            var rgbObj = hexToRGB(color);
            rgba = {
              r: rgbObj.r,
              g: rgbObj.g,
              b: rgbObj.b,
              a: 1
            };
          }
        } else {
          if (color instanceof Object) {
            if (color.r !== void 0 && color.g !== void 0 && color.b !== void 0) {
              var alpha = color.a !== void 0 ? color.a : "1.0";
              rgba = {
                r: color.r,
                g: color.g,
                b: color.b,
                a: alpha
              };
            }
          }
        }
        if (rgba === void 0) {
          throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + _JSON$stringify(color));
        } else {
          this._setColor(rgba, setInitial);
        }
      }
      /**
       * this shows the color picker.
       * The hue circle is constructed once and stored.
       */
    }, {
      key: "show",
      value: function show() {
        if (this.closeCallback !== void 0) {
          this.closeCallback();
          this.closeCallback = void 0;
        }
        this.applied = false;
        this.frame.style.display = "block";
        this._generateHueCircle();
      }
      // ------------------------------------------ PRIVATE ----------------------------- //
      /**
       * Hide the picker. Is called by the cancel button.
       * Optional boolean to store the previous color for easy access later on.
       *
       * @param {boolean} [storePrevious=true]
       * @private
       */
    }, {
      key: "_hide",
      value: function _hide() {
        var _this2 = this;
        var storePrevious = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
        if (storePrevious === true) {
          this.previousColor = _Object$assign({}, this.color);
        }
        if (this.applied === true) {
          this.updateCallback(this.initialColor);
        }
        this.frame.style.display = "none";
        _setTimeout(function() {
          if (_this2.closeCallback !== void 0) {
            _this2.closeCallback();
            _this2.closeCallback = void 0;
          }
        }, 0);
      }
      /**
       * bound to the save button. Saves and hides.
       *
       * @private
       */
    }, {
      key: "_save",
      value: function _save() {
        this.updateCallback(this.color);
        this.applied = false;
        this._hide();
      }
      /**
       * Bound to apply button. Saves but does not close. Is undone by the cancel button.
       *
       * @private
       */
    }, {
      key: "_apply",
      value: function _apply() {
        this.applied = true;
        this.updateCallback(this.color);
        this._updatePicker(this.color);
      }
      /**
       * load the color from the previous session.
       *
       * @private
       */
    }, {
      key: "_loadLast",
      value: function _loadLast() {
        if (this.previousColor !== void 0) {
          this.setColor(this.previousColor, false);
        } else {
          alert("There is no last color to load...");
        }
      }
      /**
       * set the color, place the picker
       *
       * @param {object} rgba
       * @param {boolean} [setInitial=true]
       * @private
       */
    }, {
      key: "_setColor",
      value: function _setColor(rgba) {
        var setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        if (setInitial === true) {
          this.initialColor = _Object$assign({}, rgba);
        }
        this.color = rgba;
        var hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);
        var angleConvert = 2 * Math.PI;
        var radius = this.r * hsv.s;
        var x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
        var y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);
        this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + "px";
        this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + "px";
        this._updatePicker(rgba);
      }
      /**
       * bound to opacity control
       *
       * @param {number} value
       * @private
       */
    }, {
      key: "_setOpacity",
      value: function _setOpacity(value) {
        this.color.a = value / 100;
        this._updatePicker(this.color);
      }
      /**
       * bound to brightness control
       *
       * @param {number} value
       * @private
       */
    }, {
      key: "_setBrightness",
      value: function _setBrightness(value) {
        var hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);
        hsv.v = value / 100;
        var rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);
        rgba["a"] = this.color.a;
        this.color = rgba;
        this._updatePicker();
      }
      /**
       * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
       *
       * @param {object} rgba
       * @private
       */
    }, {
      key: "_updatePicker",
      value: function _updatePicker() {
        var rgba = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.color;
        var hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);
        var ctx = this.colorPickerCanvas.getContext("2d");
        if (this.pixelRation === void 0) {
          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
        }
        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
        var w = this.colorPickerCanvas.clientWidth;
        var h = this.colorPickerCanvas.clientHeight;
        ctx.clearRect(0, 0, w, h);
        ctx.putImageData(this.hueCircle, 0, 0);
        ctx.fillStyle = "rgba(0,0,0," + (1 - hsv.v) + ")";
        ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
        _fillInstanceProperty(ctx).call(ctx);
        this.brightnessRange.value = 100 * hsv.v;
        this.opacityRange.value = 100 * rgba.a;
        this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
        this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
      }
      /**
       * used by create to set the size of the canvas.
       *
       * @private
       */
    }, {
      key: "_setSize",
      value: function _setSize() {
        this.colorPickerCanvas.style.width = "100%";
        this.colorPickerCanvas.style.height = "100%";
        this.colorPickerCanvas.width = 289 * this.pixelRatio;
        this.colorPickerCanvas.height = 289 * this.pixelRatio;
      }
      /**
       * create all dom elements
       * TODO: cleanup, lots of similar dom elements
       *
       * @private
       */
    }, {
      key: "_create",
      value: function _create() {
        var _context16, _context17, _context18, _context19;
        this.frame = document.createElement("div");
        this.frame.className = "vis-color-picker";
        this.colorPickerDiv = document.createElement("div");
        this.colorPickerSelector = document.createElement("div");
        this.colorPickerSelector.className = "vis-selector";
        this.colorPickerDiv.appendChild(this.colorPickerSelector);
        this.colorPickerCanvas = document.createElement("canvas");
        this.colorPickerDiv.appendChild(this.colorPickerCanvas);
        if (!this.colorPickerCanvas.getContext) {
          var noCanvas = document.createElement("DIV");
          noCanvas.style.color = "red";
          noCanvas.style.fontWeight = "bold";
          noCanvas.style.padding = "10px";
          noCanvas.innerText = "Error: your browser does not support HTML canvas";
          this.colorPickerCanvas.appendChild(noCanvas);
        } else {
          var ctx = this.colorPickerCanvas.getContext("2d");
          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
          this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
        }
        this.colorPickerDiv.className = "vis-color";
        this.opacityDiv = document.createElement("div");
        this.opacityDiv.className = "vis-opacity";
        this.brightnessDiv = document.createElement("div");
        this.brightnessDiv.className = "vis-brightness";
        this.arrowDiv = document.createElement("div");
        this.arrowDiv.className = "vis-arrow";
        this.opacityRange = document.createElement("input");
        try {
          this.opacityRange.type = "range";
          this.opacityRange.min = "0";
          this.opacityRange.max = "100";
        } catch (err) {
        }
        this.opacityRange.value = "100";
        this.opacityRange.className = "vis-range";
        this.brightnessRange = document.createElement("input");
        try {
          this.brightnessRange.type = "range";
          this.brightnessRange.min = "0";
          this.brightnessRange.max = "100";
        } catch (err) {
        }
        this.brightnessRange.value = "100";
        this.brightnessRange.className = "vis-range";
        this.opacityDiv.appendChild(this.opacityRange);
        this.brightnessDiv.appendChild(this.brightnessRange);
        var me = this;
        this.opacityRange.onchange = function() {
          me._setOpacity(this.value);
        };
        this.opacityRange.oninput = function() {
          me._setOpacity(this.value);
        };
        this.brightnessRange.onchange = function() {
          me._setBrightness(this.value);
        };
        this.brightnessRange.oninput = function() {
          me._setBrightness(this.value);
        };
        this.brightnessLabel = document.createElement("div");
        this.brightnessLabel.className = "vis-label vis-brightness";
        this.brightnessLabel.innerText = "brightness:";
        this.opacityLabel = document.createElement("div");
        this.opacityLabel.className = "vis-label vis-opacity";
        this.opacityLabel.innerText = "opacity:";
        this.newColorDiv = document.createElement("div");
        this.newColorDiv.className = "vis-new-color";
        this.newColorDiv.innerText = "new";
        this.initialColorDiv = document.createElement("div");
        this.initialColorDiv.className = "vis-initial-color";
        this.initialColorDiv.innerText = "initial";
        this.cancelButton = document.createElement("div");
        this.cancelButton.className = "vis-button vis-cancel";
        this.cancelButton.innerText = "cancel";
        this.cancelButton.onclick = _bindInstanceProperty$1(_context16 = this._hide).call(_context16, this, false);
        this.applyButton = document.createElement("div");
        this.applyButton.className = "vis-button vis-apply";
        this.applyButton.innerText = "apply";
        this.applyButton.onclick = _bindInstanceProperty$1(_context17 = this._apply).call(_context17, this);
        this.saveButton = document.createElement("div");
        this.saveButton.className = "vis-button vis-save";
        this.saveButton.innerText = "save";
        this.saveButton.onclick = _bindInstanceProperty$1(_context18 = this._save).call(_context18, this);
        this.loadButton = document.createElement("div");
        this.loadButton.className = "vis-button vis-load";
        this.loadButton.innerText = "load last";
        this.loadButton.onclick = _bindInstanceProperty$1(_context19 = this._loadLast).call(_context19, this);
        this.frame.appendChild(this.colorPickerDiv);
        this.frame.appendChild(this.arrowDiv);
        this.frame.appendChild(this.brightnessLabel);
        this.frame.appendChild(this.brightnessDiv);
        this.frame.appendChild(this.opacityLabel);
        this.frame.appendChild(this.opacityDiv);
        this.frame.appendChild(this.newColorDiv);
        this.frame.appendChild(this.initialColorDiv);
        this.frame.appendChild(this.cancelButton);
        this.frame.appendChild(this.applyButton);
        this.frame.appendChild(this.saveButton);
        this.frame.appendChild(this.loadButton);
      }
      /**
       * bind hammer to the color picker
       *
       * @private
       */
    }, {
      key: "_bindHammer",
      value: function _bindHammer() {
        var _this3 = this;
        this.drag = {};
        this.pinch = {};
        this.hammer = new Hammer$1(this.colorPickerCanvas);
        this.hammer.get("pinch").set({
          enable: true
        });
        this.hammer.on("hammer.input", function(event2) {
          if (event2.isFirst) {
            _this3._moveSelector(event2);
          }
        });
        this.hammer.on("tap", function(event2) {
          _this3._moveSelector(event2);
        });
        this.hammer.on("panstart", function(event2) {
          _this3._moveSelector(event2);
        });
        this.hammer.on("panmove", function(event2) {
          _this3._moveSelector(event2);
        });
        this.hammer.on("panend", function(event2) {
          _this3._moveSelector(event2);
        });
      }
      /**
       * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
       *
       * @private
       */
    }, {
      key: "_generateHueCircle",
      value: function _generateHueCircle() {
        if (this.generated === false) {
          var ctx = this.colorPickerCanvas.getContext("2d");
          if (this.pixelRation === void 0) {
            this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
          }
          ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
          var w = this.colorPickerCanvas.clientWidth;
          var h = this.colorPickerCanvas.clientHeight;
          ctx.clearRect(0, 0, w, h);
          var x, y, hue, sat;
          this.centerCoordinates = {
            x: w * 0.5,
            y: h * 0.5
          };
          this.r = 0.49 * w;
          var angleConvert = 2 * Math.PI / 360;
          var hfac = 1 / 360;
          var sfac = 1 / this.r;
          var rgb;
          for (hue = 0; hue < 360; hue++) {
            for (sat = 0; sat < this.r; sat++) {
              x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
              y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
              rgb = HSVToRGB(hue * hfac, sat * sfac, 1);
              ctx.fillStyle = "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
              ctx.fillRect(x - 0.5, y - 0.5, 2, 2);
            }
          }
          ctx.strokeStyle = "rgba(0,0,0,1)";
          ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
          ctx.stroke();
          this.hueCircle = ctx.getImageData(0, 0, w, h);
        }
        this.generated = true;
      }
      /**
       * move the selector. This is called by hammer functions.
       *
       * @param {Event}  event   The event
       * @private
       */
    }, {
      key: "_moveSelector",
      value: function _moveSelector(event2) {
        var rect = this.colorPickerDiv.getBoundingClientRect();
        var left = event2.center.x - rect.left;
        var top = event2.center.y - rect.top;
        var centerY = 0.5 * this.colorPickerDiv.clientHeight;
        var centerX = 0.5 * this.colorPickerDiv.clientWidth;
        var x = left - centerX;
        var y = top - centerY;
        var angle = Math.atan2(x, y);
        var radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);
        var newTop = Math.cos(angle) * radius + centerY;
        var newLeft = Math.sin(angle) * radius + centerX;
        this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + "px";
        this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + "px";
        var h = angle / (2 * Math.PI);
        h = h < 0 ? h + 1 : h;
        var s = radius / this.r;
        var hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);
        hsv.h = h;
        hsv.s = s;
        var rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);
        rgba["a"] = this.color.a;
        this.color = rgba;
        this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
        this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
      }
    }]);
    return ColorPicker$12;
  }();
  function wrapInTag() {
    for (var _len5 = arguments.length, rest = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      rest[_key5] = arguments[_key5];
    }
    if (rest.length < 1) {
      throw new TypeError("Invalid arguments.");
    } else if (rest.length === 1) {
      return document.createTextNode(rest[0]);
    } else {
      var element = document.createElement(rest[0]);
      element.appendChild(wrapInTag.apply(void 0, _toConsumableArray(_sliceInstanceProperty(rest).call(rest, 1))));
      return element;
    }
  }
  var Configurator$1 = /* @__PURE__ */ function() {
    function Configurator$12(parentModule, defaultContainer, configureOptions2) {
      var pixelRatio = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
      var hideOption = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : function() {
        return false;
      };
      _classCallCheck(this, Configurator$12);
      this.parent = parentModule;
      this.changedOptions = [];
      this.container = defaultContainer;
      this.allowCreation = false;
      this.hideOption = hideOption;
      this.options = {};
      this.initialized = false;
      this.popupCounter = 0;
      this.defaultOptions = {
        enabled: false,
        filter: true,
        container: void 0,
        showButton: true
      };
      _Object$assign(this.options, this.defaultOptions);
      this.configureOptions = configureOptions2;
      this.moduleOptions = {};
      this.domElements = [];
      this.popupDiv = {};
      this.popupLimit = 5;
      this.popupHistory = {};
      this.colorPicker = new ColorPicker$1(pixelRatio);
      this.wrapper = void 0;
    }
    _createClass(Configurator$12, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options !== void 0) {
          this.popupHistory = {};
          this._removePopup();
          var enabled = true;
          if (typeof options === "string") {
            this.options.filter = options;
          } else if (_Array$isArray(options)) {
            this.options.filter = options.join();
          } else if (_typeof$1(options) === "object") {
            if (options == null) {
              throw new TypeError("options cannot be null");
            }
            if (options.container !== void 0) {
              this.options.container = options.container;
            }
            if (_filterInstanceProperty(options) !== void 0) {
              this.options.filter = _filterInstanceProperty(options);
            }
            if (options.showButton !== void 0) {
              this.options.showButton = options.showButton;
            }
            if (options.enabled !== void 0) {
              enabled = options.enabled;
            }
          } else if (typeof options === "boolean") {
            this.options.filter = true;
            enabled = options;
          } else if (typeof options === "function") {
            this.options.filter = options;
            enabled = true;
          }
          if (_filterInstanceProperty(this.options) === false) {
            enabled = false;
          }
          this.options.enabled = enabled;
        }
        this._clean();
      }
      /**
       *
       * @param {object} moduleOptions
       */
    }, {
      key: "setModuleOptions",
      value: function setModuleOptions(moduleOptions) {
        this.moduleOptions = moduleOptions;
        if (this.options.enabled === true) {
          this._clean();
          if (this.options.container !== void 0) {
            this.container = this.options.container;
          }
          this._create();
        }
      }
      /**
       * Create all DOM elements
       *
       * @private
       */
    }, {
      key: "_create",
      value: function _create() {
        this._clean();
        this.changedOptions = [];
        var filter4 = _filterInstanceProperty(this.options);
        var counter2 = 0;
        var show = false;
        for (var _option in this.configureOptions) {
          if (Object.prototype.hasOwnProperty.call(this.configureOptions, _option)) {
            this.allowCreation = false;
            show = false;
            if (typeof filter4 === "function") {
              show = filter4(_option, []);
              show = show || this._handleObject(this.configureOptions[_option], [_option], true);
            } else if (filter4 === true || _indexOfInstanceProperty(filter4).call(filter4, _option) !== -1) {
              show = true;
            }
            if (show !== false) {
              this.allowCreation = true;
              if (counter2 > 0) {
                this._makeItem([]);
              }
              this._makeHeader(_option);
              this._handleObject(this.configureOptions[_option], [_option]);
            }
            counter2++;
          }
        }
        this._makeButton();
        this._push();
      }
      /**
       * draw all DOM elements on the screen
       *
       * @private
       */
    }, {
      key: "_push",
      value: function _push() {
        this.wrapper = document.createElement("div");
        this.wrapper.className = "vis-configuration-wrapper";
        this.container.appendChild(this.wrapper);
        for (var i2 = 0; i2 < this.domElements.length; i2++) {
          this.wrapper.appendChild(this.domElements[i2]);
        }
        this._showPopupIfNeeded();
      }
      /**
       * delete all DOM elements
       *
       * @private
       */
    }, {
      key: "_clean",
      value: function _clean() {
        for (var i2 = 0; i2 < this.domElements.length; i2++) {
          this.wrapper.removeChild(this.domElements[i2]);
        }
        if (this.wrapper !== void 0) {
          this.container.removeChild(this.wrapper);
          this.wrapper = void 0;
        }
        this.domElements = [];
        this._removePopup();
      }
      /**
       * get the value from the actualOptions if it exists
       *
       * @param {Array} path    | where to look for the actual option
       * @returns {*}
       * @private
       */
    }, {
      key: "_getValue",
      value: function _getValue(path2) {
        var base = this.moduleOptions;
        for (var i2 = 0; i2 < path2.length; i2++) {
          if (base[path2[i2]] !== void 0) {
            base = base[path2[i2]];
          } else {
            base = void 0;
            break;
          }
        }
        return base;
      }
      /**
       * all option elements are wrapped in an item
       *
       * @param {Array} path    | where to look for the actual option
       * @param {Array.<Element>} domElements
       * @returns {number}
       * @private
       */
    }, {
      key: "_makeItem",
      value: function _makeItem(path2) {
        if (this.allowCreation === true) {
          var item = document.createElement("div");
          item.className = "vis-configuration vis-config-item vis-config-s" + path2.length;
          for (var _len6 = arguments.length, domElements = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
            domElements[_key6 - 1] = arguments[_key6];
          }
          _forEachInstanceProperty(domElements).call(domElements, function(element) {
            item.appendChild(element);
          });
          this.domElements.push(item);
          return this.domElements.length;
        }
        return 0;
      }
      /**
       * header for major subjects
       *
       * @param {string} name
       * @private
       */
    }, {
      key: "_makeHeader",
      value: function _makeHeader(name) {
        var div = document.createElement("div");
        div.className = "vis-configuration vis-config-header";
        div.innerText = name;
        this._makeItem([], div);
      }
      /**
       * make a label, if it is an object label, it gets different styling.
       *
       * @param {string} name
       * @param {Array} path    | where to look for the actual option
       * @param {string} objectLabel
       * @returns {HTMLElement}
       * @private
       */
    }, {
      key: "_makeLabel",
      value: function _makeLabel(name, path2) {
        var objectLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var div = document.createElement("div");
        div.className = "vis-configuration vis-config-label vis-config-s" + path2.length;
        if (objectLabel === true) {
          while (div.firstChild) {
            div.removeChild(div.firstChild);
          }
          div.appendChild(wrapInTag("i", "b", name));
        } else {
          div.innerText = name + ":";
        }
        return div;
      }
      /**
       * make a dropdown list for multiple possible string optoins
       *
       * @param {Array.<number>} arr
       * @param {number} value
       * @param {Array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeDropdown",
      value: function _makeDropdown(arr, value, path2) {
        var select = document.createElement("select");
        select.className = "vis-configuration vis-config-select";
        var selectedValue = 0;
        if (value !== void 0) {
          if (_indexOfInstanceProperty(arr).call(arr, value) !== -1) {
            selectedValue = _indexOfInstanceProperty(arr).call(arr, value);
          }
        }
        for (var i2 = 0; i2 < arr.length; i2++) {
          var _option2 = document.createElement("option");
          _option2.value = arr[i2];
          if (i2 === selectedValue) {
            _option2.selected = "selected";
          }
          _option2.innerText = arr[i2];
          select.appendChild(_option2);
        }
        var me = this;
        select.onchange = function() {
          me._update(this.value, path2);
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        this._makeItem(path2, label, select);
      }
      /**
       * make a range object for numeric options
       *
       * @param {Array.<number>} arr
       * @param {number} value
       * @param {Array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeRange",
      value: function _makeRange(arr, value, path2) {
        var defaultValue = arr[0];
        var min2 = arr[1];
        var max2 = arr[2];
        var step = arr[3];
        var range = document.createElement("input");
        range.className = "vis-configuration vis-config-range";
        try {
          range.type = "range";
          range.min = min2;
          range.max = max2;
        } catch (err) {
        }
        range.step = step;
        var popupString = "";
        var popupValue = 0;
        if (value !== void 0) {
          var factor = 1.2;
          if (value < 0 && value * factor < min2) {
            range.min = Math.ceil(value * factor);
            popupValue = range.min;
            popupString = "range increased";
          } else if (value / factor < min2) {
            range.min = Math.ceil(value / factor);
            popupValue = range.min;
            popupString = "range increased";
          }
          if (value * factor > max2 && max2 !== 1) {
            range.max = Math.ceil(value * factor);
            popupValue = range.max;
            popupString = "range increased";
          }
          range.value = value;
        } else {
          range.value = defaultValue;
        }
        var input = document.createElement("input");
        input.className = "vis-configuration vis-config-rangeinput";
        input.value = range.value;
        var me = this;
        range.onchange = function() {
          input.value = this.value;
          me._update(Number(this.value), path2);
        };
        range.oninput = function() {
          input.value = this.value;
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        var itemIndex = this._makeItem(path2, label, range, input);
        if (popupString !== "" && this.popupHistory[itemIndex] !== popupValue) {
          this.popupHistory[itemIndex] = popupValue;
          this._setupPopup(popupString, itemIndex);
        }
      }
      /**
       * make a button object
       *
       * @private
       */
    }, {
      key: "_makeButton",
      value: function _makeButton() {
        var _this4 = this;
        if (this.options.showButton === true) {
          var generateButton = document.createElement("div");
          generateButton.className = "vis-configuration vis-config-button";
          generateButton.innerText = "generate options";
          generateButton.onclick = function() {
            _this4._printOptions();
          };
          generateButton.onmouseover = function() {
            generateButton.className = "vis-configuration vis-config-button hover";
          };
          generateButton.onmouseout = function() {
            generateButton.className = "vis-configuration vis-config-button";
          };
          this.optionsContainer = document.createElement("div");
          this.optionsContainer.className = "vis-configuration vis-config-option-container";
          this.domElements.push(this.optionsContainer);
          this.domElements.push(generateButton);
        }
      }
      /**
       * prepare the popup
       *
       * @param {string} string
       * @param {number} index
       * @private
       */
    }, {
      key: "_setupPopup",
      value: function _setupPopup(string2, index) {
        var _this5 = this;
        if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
          var div = document.createElement("div");
          div.id = "vis-configuration-popup";
          div.className = "vis-configuration-popup";
          div.innerText = string2;
          div.onclick = function() {
            _this5._removePopup();
          };
          this.popupCounter += 1;
          this.popupDiv = {
            html: div,
            index
          };
        }
      }
      /**
       * remove the popup from the dom
       *
       * @private
       */
    }, {
      key: "_removePopup",
      value: function _removePopup() {
        if (this.popupDiv.html !== void 0) {
          this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
          clearTimeout(this.popupDiv.hideTimeout);
          clearTimeout(this.popupDiv.deleteTimeout);
          this.popupDiv = {};
        }
      }
      /**
       * Show the popup if it is needed.
       *
       * @private
       */
    }, {
      key: "_showPopupIfNeeded",
      value: function _showPopupIfNeeded() {
        var _this6 = this;
        if (this.popupDiv.html !== void 0) {
          var correspondingElement = this.domElements[this.popupDiv.index];
          var rect = correspondingElement.getBoundingClientRect();
          this.popupDiv.html.style.left = rect.left + "px";
          this.popupDiv.html.style.top = rect.top - 30 + "px";
          document.body.appendChild(this.popupDiv.html);
          this.popupDiv.hideTimeout = _setTimeout(function() {
            _this6.popupDiv.html.style.opacity = 0;
          }, 1500);
          this.popupDiv.deleteTimeout = _setTimeout(function() {
            _this6._removePopup();
          }, 1800);
        }
      }
      /**
       * make a checkbox for boolean options.
       *
       * @param {number} defaultValue
       * @param {number} value
       * @param {Array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeCheckbox",
      value: function _makeCheckbox(defaultValue, value, path2) {
        var checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.className = "vis-configuration vis-config-checkbox";
        checkbox.checked = defaultValue;
        if (value !== void 0) {
          checkbox.checked = value;
          if (value !== defaultValue) {
            if (_typeof$1(defaultValue) === "object") {
              if (value !== defaultValue.enabled) {
                this.changedOptions.push({
                  path: path2,
                  value
                });
              }
            } else {
              this.changedOptions.push({
                path: path2,
                value
              });
            }
          }
        }
        var me = this;
        checkbox.onchange = function() {
          me._update(this.checked, path2);
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        this._makeItem(path2, label, checkbox);
      }
      /**
       * make a text input field for string options.
       *
       * @param {number} defaultValue
       * @param {number} value
       * @param {Array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeTextInput",
      value: function _makeTextInput(defaultValue, value, path2) {
        var checkbox = document.createElement("input");
        checkbox.type = "text";
        checkbox.className = "vis-configuration vis-config-text";
        checkbox.value = value;
        if (value !== defaultValue) {
          this.changedOptions.push({
            path: path2,
            value
          });
        }
        var me = this;
        checkbox.onchange = function() {
          me._update(this.value, path2);
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        this._makeItem(path2, label, checkbox);
      }
      /**
       * make a color field with a color picker for color fields
       *
       * @param {Array.<number>} arr
       * @param {number} value
       * @param {Array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeColorField",
      value: function _makeColorField(arr, value, path2) {
        var _this7 = this;
        var defaultColor = arr[1];
        var div = document.createElement("div");
        value = value === void 0 ? defaultColor : value;
        if (value !== "none") {
          div.className = "vis-configuration vis-config-colorBlock";
          div.style.backgroundColor = value;
        } else {
          div.className = "vis-configuration vis-config-colorBlock none";
        }
        value = value === void 0 ? defaultColor : value;
        div.onclick = function() {
          _this7._showColorPicker(value, div, path2);
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        this._makeItem(path2, label, div);
      }
      /**
       * used by the color buttons to call the color picker.
       *
       * @param {number} value
       * @param {HTMLElement} div
       * @param {Array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_showColorPicker",
      value: function _showColorPicker(value, div, path2) {
        var _this8 = this;
        div.onclick = function() {
        };
        this.colorPicker.insertTo(div);
        this.colorPicker.show();
        this.colorPicker.setColor(value);
        this.colorPicker.setUpdateCallback(function(color) {
          var colorString = "rgba(" + color.r + "," + color.g + "," + color.b + "," + color.a + ")";
          div.style.backgroundColor = colorString;
          _this8._update(colorString, path2);
        });
        this.colorPicker.setCloseCallback(function() {
          div.onclick = function() {
            _this8._showColorPicker(value, div, path2);
          };
        });
      }
      /**
       * parse an object and draw the correct items
       *
       * @param {object} obj
       * @param {Array} [path=[]]    | where to look for the actual option
       * @param {boolean} [checkOnly=false]
       * @returns {boolean}
       * @private
       */
    }, {
      key: "_handleObject",
      value: function _handleObject(obj) {
        var path2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        var checkOnly = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var show = false;
        var filter4 = _filterInstanceProperty(this.options);
        var visibleInSet = false;
        for (var subObj in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, subObj)) {
            show = true;
            var item = obj[subObj];
            var newPath = copyAndExtendArray(path2, subObj);
            if (typeof filter4 === "function") {
              show = filter4(subObj, path2);
              if (show === false) {
                if (!_Array$isArray(item) && typeof item !== "string" && typeof item !== "boolean" && item instanceof Object) {
                  this.allowCreation = false;
                  show = this._handleObject(item, newPath, true);
                  this.allowCreation = checkOnly === false;
                }
              }
            }
            if (show !== false) {
              visibleInSet = true;
              var value = this._getValue(newPath);
              if (_Array$isArray(item)) {
                this._handleArray(item, value, newPath);
              } else if (typeof item === "string") {
                this._makeTextInput(item, value, newPath);
              } else if (typeof item === "boolean") {
                this._makeCheckbox(item, value, newPath);
              } else if (item instanceof Object) {
                if (!this.hideOption(path2, subObj, this.moduleOptions)) {
                  if (item.enabled !== void 0) {
                    var enabledPath = copyAndExtendArray(newPath, "enabled");
                    var enabledValue = this._getValue(enabledPath);
                    if (enabledValue === true) {
                      var label = this._makeLabel(subObj, newPath, true);
                      this._makeItem(newPath, label);
                      visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                    } else {
                      this._makeCheckbox(item, enabledValue, newPath);
                    }
                  } else {
                    var _label = this._makeLabel(subObj, newPath, true);
                    this._makeItem(newPath, _label);
                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                  }
                }
              } else {
                console.error("dont know how to handle", item, subObj, newPath);
              }
            }
          }
        }
        return visibleInSet;
      }
      /**
       * handle the array type of option
       *
       * @param {Array.<number>} arr
       * @param {number} value
       * @param {Array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_handleArray",
      value: function _handleArray(arr, value, path2) {
        if (typeof arr[0] === "string" && arr[0] === "color") {
          this._makeColorField(arr, value, path2);
          if (arr[1] !== value) {
            this.changedOptions.push({
              path: path2,
              value
            });
          }
        } else if (typeof arr[0] === "string") {
          this._makeDropdown(arr, value, path2);
          if (arr[0] !== value) {
            this.changedOptions.push({
              path: path2,
              value
            });
          }
        } else if (typeof arr[0] === "number") {
          this._makeRange(arr, value, path2);
          if (arr[0] !== value) {
            this.changedOptions.push({
              path: path2,
              value: Number(value)
            });
          }
        }
      }
      /**
       * called to update the network with the new settings.
       *
       * @param {number} value
       * @param {Array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_update",
      value: function _update(value, path2) {
        var options = this._constructOptions(value, path2);
        if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
          this.parent.body.emitter.emit("configChange", options);
        }
        this.initialized = true;
        this.parent.setOptions(options);
      }
      /**
       *
       * @param {string | boolean} value
       * @param {Array.<string>} path
       * @param {{}} optionsObj
       * @returns {{}}
       * @private
       */
    }, {
      key: "_constructOptions",
      value: function _constructOptions(value, path2) {
        var optionsObj = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var pointer = optionsObj;
        value = value === "true" ? true : value;
        value = value === "false" ? false : value;
        for (var i2 = 0; i2 < path2.length; i2++) {
          if (path2[i2] !== "global") {
            if (pointer[path2[i2]] === void 0) {
              pointer[path2[i2]] = {};
            }
            if (i2 !== path2.length - 1) {
              pointer = pointer[path2[i2]];
            } else {
              pointer[path2[i2]] = value;
            }
          }
        }
        return optionsObj;
      }
      /**
       * @private
       */
    }, {
      key: "_printOptions",
      value: function _printOptions() {
        var options = this.getOptions();
        while (this.optionsContainer.firstChild) {
          this.optionsContainer.removeChild(this.optionsContainer.firstChild);
        }
        this.optionsContainer.appendChild(wrapInTag("pre", "const options = " + _JSON$stringify(options, null, 2)));
      }
      /**
       *
       * @returns {{}} options
       */
    }, {
      key: "getOptions",
      value: function getOptions() {
        var options = {};
        for (var i2 = 0; i2 < this.changedOptions.length; i2++) {
          this._constructOptions(this.changedOptions[i2].value, this.changedOptions[i2].path, options);
        }
        return options;
      }
    }]);
    return Configurator$12;
  }();
  var Popup$1 = /* @__PURE__ */ function() {
    function Popup$12(container, overflowMethod) {
      _classCallCheck(this, Popup$12);
      this.container = container;
      this.overflowMethod = overflowMethod || "cap";
      this.x = 0;
      this.y = 0;
      this.padding = 5;
      this.hidden = false;
      this.frame = document.createElement("div");
      this.frame.className = "vis-tooltip";
      this.container.appendChild(this.frame);
    }
    _createClass(Popup$12, [{
      key: "setPosition",
      value: function setPosition(x, y) {
        this.x = _parseInt(x);
        this.y = _parseInt(y);
      }
      /**
       * Set the content for the popup window. This can be HTML code or text.
       *
       * @param {string | Element} content
       */
    }, {
      key: "setText",
      value: function setText(content) {
        if (content instanceof Element) {
          while (this.frame.firstChild) {
            this.frame.removeChild(this.frame.firstChild);
          }
          this.frame.appendChild(content);
        } else {
          this.frame.innerText = content;
        }
      }
      /**
       * Show the popup window
       *
       * @param {boolean} [doShow]    Show or hide the window
       */
    }, {
      key: "show",
      value: function show(doShow) {
        if (doShow === void 0) {
          doShow = true;
        }
        if (doShow === true) {
          var height = this.frame.clientHeight;
          var width = this.frame.clientWidth;
          var maxHeight = this.frame.parentNode.clientHeight;
          var maxWidth = this.frame.parentNode.clientWidth;
          var left = 0, top = 0;
          if (this.overflowMethod == "flip") {
            var isLeft = false, isTop = true;
            if (this.y - height < this.padding) {
              isTop = false;
            }
            if (this.x + width > maxWidth - this.padding) {
              isLeft = true;
            }
            if (isLeft) {
              left = this.x - width;
            } else {
              left = this.x;
            }
            if (isTop) {
              top = this.y - height;
            } else {
              top = this.y;
            }
          } else {
            top = this.y - height;
            if (top + height + this.padding > maxHeight) {
              top = maxHeight - height - this.padding;
            }
            if (top < this.padding) {
              top = this.padding;
            }
            left = this.x;
            if (left + width + this.padding > maxWidth) {
              left = maxWidth - width - this.padding;
            }
            if (left < this.padding) {
              left = this.padding;
            }
          }
          this.frame.style.left = left + "px";
          this.frame.style.top = top + "px";
          this.frame.style.visibility = "visible";
          this.hidden = false;
        } else {
          this.hide();
        }
      }
      /**
       * Hide the popup window
       */
    }, {
      key: "hide",
      value: function hide() {
        this.hidden = true;
        this.frame.style.left = "0";
        this.frame.style.top = "0";
        this.frame.style.visibility = "hidden";
      }
      /**
       * Remove the popup window
       */
    }, {
      key: "destroy",
      value: function destroy() {
        this.frame.parentNode.removeChild(this.frame);
      }
    }]);
    return Popup$12;
  }();
  var errorFound$1 = false;
  var allOptions$3;
  var VALIDATOR_PRINT_STYLE$1 = "background: #FFeeee; color: #dd0000";
  var Validator$1 = /* @__PURE__ */ function() {
    function Validator$12() {
      _classCallCheck(this, Validator$12);
    }
    _createClass(Validator$12, null, [{
      key: "validate",
      value: (
        /**
         * Main function to be called
         *
         * @param {object} options
         * @param {object} referenceOptions
         * @param {object} subObject
         * @returns {boolean}
         * @static
         */
        function validate(options, referenceOptions, subObject) {
          errorFound$1 = false;
          allOptions$3 = referenceOptions;
          var usedOptions = referenceOptions;
          if (subObject !== void 0) {
            usedOptions = referenceOptions[subObject];
          }
          Validator$12.parse(options, usedOptions, []);
          return errorFound$1;
        }
      )
      /**
       * Will traverse an object recursively and check every value
       *
       * @param {object} options
       * @param {object} referenceOptions
       * @param {Array} path    | where to look for the actual option
       * @static
       */
    }, {
      key: "parse",
      value: function parse(options, referenceOptions, path2) {
        for (var _option3 in options) {
          if (Object.prototype.hasOwnProperty.call(options, _option3)) {
            Validator$12.check(_option3, options, referenceOptions, path2);
          }
        }
      }
      /**
       * Check every value. If the value is an object, call the parse function on that object.
       *
       * @param {string} option
       * @param {object} options
       * @param {object} referenceOptions
       * @param {Array} path    | where to look for the actual option
       * @static
       */
    }, {
      key: "check",
      value: function check2(option2, options, referenceOptions, path2) {
        if (referenceOptions[option2] === void 0 && referenceOptions.__any__ === void 0) {
          Validator$12.getSuggestion(option2, referenceOptions, path2);
          return;
        }
        var referenceOption = option2;
        var is_object = true;
        if (referenceOptions[option2] === void 0 && referenceOptions.__any__ !== void 0) {
          referenceOption = "__any__";
          is_object = Validator$12.getType(options[option2]) === "object";
        }
        var refOptionObj = referenceOptions[referenceOption];
        if (is_object && refOptionObj.__type__ !== void 0) {
          refOptionObj = refOptionObj.__type__;
        }
        Validator$12.checkFields(option2, options, referenceOptions, referenceOption, refOptionObj, path2);
      }
      /**
       *
       * @param {string}  option           | the option property
       * @param {object}  options          | The supplied options object
       * @param {object}  referenceOptions | The reference options containing all options and their allowed formats
       * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.
       * @param {string}  refOptionObj     | This is the type object from the reference options
       * @param {Array}   path             | where in the object is the option
       * @static
       */
    }, {
      key: "checkFields",
      value: function checkFields(option2, options, referenceOptions, referenceOption, refOptionObj, path2) {
        var log = function log2(message) {
          console.error("%c" + message + Validator$12.printLocation(path2, option2), VALIDATOR_PRINT_STYLE$1);
        };
        var optionType = Validator$12.getType(options[option2]);
        var refOptionType = refOptionObj[optionType];
        if (refOptionType !== void 0) {
          if (Validator$12.getType(refOptionType) === "array" && _indexOfInstanceProperty(refOptionType).call(refOptionType, options[option2]) === -1) {
            log('Invalid option detected in "' + option2 + '". Allowed values are:' + Validator$12.print(refOptionType) + ' not "' + options[option2] + '". ');
            errorFound$1 = true;
          } else if (optionType === "object" && referenceOption !== "__any__") {
            path2 = copyAndExtendArray(path2, option2);
            Validator$12.parse(options[option2], referenceOptions[referenceOption], path2);
          }
        } else if (refOptionObj["any"] === void 0) {
          log('Invalid type received for "' + option2 + '". Expected: ' + Validator$12.print(_Object$keys(refOptionObj)) + ". Received [" + optionType + '] "' + options[option2] + '"');
          errorFound$1 = true;
        }
      }
      /**
       *
       * @param {object | boolean | number | string | Array.<number> | Date | Node | Moment | undefined | null} object
       * @returns {string}
       * @static
       */
    }, {
      key: "getType",
      value: function getType2(object2) {
        var type = _typeof$1(object2);
        if (type === "object") {
          if (object2 === null) {
            return "null";
          }
          if (object2 instanceof Boolean) {
            return "boolean";
          }
          if (object2 instanceof Number) {
            return "number";
          }
          if (object2 instanceof String) {
            return "string";
          }
          if (_Array$isArray(object2)) {
            return "array";
          }
          if (object2 instanceof Date) {
            return "date";
          }
          if (object2.nodeType !== void 0) {
            return "dom";
          }
          if (object2._isAMomentObject === true) {
            return "moment";
          }
          return "object";
        } else if (type === "number") {
          return "number";
        } else if (type === "boolean") {
          return "boolean";
        } else if (type === "string") {
          return "string";
        } else if (type === void 0) {
          return "undefined";
        }
        return type;
      }
      /**
       * @param {string} option
       * @param {object} options
       * @param {Array.<string>} path
       * @static
       */
    }, {
      key: "getSuggestion",
      value: function getSuggestion(option2, options, path2) {
        var localSearch = Validator$12.findInOptions(option2, options, path2, false);
        var globalSearch = Validator$12.findInOptions(option2, allOptions$3, [], true);
        var localSearchThreshold = 8;
        var globalSearchThreshold = 4;
        var msg;
        if (localSearch.indexMatch !== void 0) {
          msg = " in " + Validator$12.printLocation(localSearch.path, option2, "") + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n';
        } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
          msg = " in " + Validator$12.printLocation(localSearch.path, option2, "") + "Perhaps it was misplaced? Matching option found at: " + Validator$12.printLocation(globalSearch.path, globalSearch.closestMatch, "");
        } else if (localSearch.distance <= localSearchThreshold) {
          msg = '. Did you mean "' + localSearch.closestMatch + '"?' + Validator$12.printLocation(localSearch.path, option2);
        } else {
          msg = ". Did you mean one of these: " + Validator$12.print(_Object$keys(options)) + Validator$12.printLocation(path2, option2);
        }
        console.error('%cUnknown option detected: "' + option2 + '"' + msg, VALIDATOR_PRINT_STYLE$1);
        errorFound$1 = true;
      }
      /**
       * traverse the options in search for a match.
       *
       * @param {string} option
       * @param {object} options
       * @param {Array} path    | where to look for the actual option
       * @param {boolean} [recursive=false]
       * @returns {{closestMatch: string, path: Array, distance: number}}
       * @static
       */
    }, {
      key: "findInOptions",
      value: function findInOptions(option2, options, path2) {
        var recursive = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
        var min2 = 1e9;
        var closestMatch = "";
        var closestMatchPath = [];
        var lowerCaseOption = option2.toLowerCase();
        var indexMatch = void 0;
        for (var op in options) {
          var distance = void 0;
          if (options[op].__type__ !== void 0 && recursive === true) {
            var result = Validator$12.findInOptions(option2, options[op], copyAndExtendArray(path2, op));
            if (min2 > result.distance) {
              closestMatch = result.closestMatch;
              closestMatchPath = result.path;
              min2 = result.distance;
              indexMatch = result.indexMatch;
            }
          } else {
            var _context20;
            if (_indexOfInstanceProperty(_context20 = op.toLowerCase()).call(_context20, lowerCaseOption) !== -1) {
              indexMatch = op;
            }
            distance = Validator$12.levenshteinDistance(option2, op);
            if (min2 > distance) {
              closestMatch = op;
              closestMatchPath = copyArray(path2);
              min2 = distance;
            }
          }
        }
        return {
          closestMatch,
          path: closestMatchPath,
          distance: min2,
          indexMatch
        };
      }
      /**
       * @param {Array.<string>} path
       * @param {object} option
       * @param {string} prefix
       * @returns {string}
       * @static
       */
    }, {
      key: "printLocation",
      value: function printLocation(path2, option2) {
        var prefix = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "Problem value found at: \n";
        var str = "\n\n" + prefix + "options = {\n";
        for (var i2 = 0; i2 < path2.length; i2++) {
          for (var j = 0; j < i2 + 1; j++) {
            str += "  ";
          }
          str += path2[i2] + ": {\n";
        }
        for (var _j = 0; _j < path2.length + 1; _j++) {
          str += "  ";
        }
        str += option2 + "\n";
        for (var _i3 = 0; _i3 < path2.length + 1; _i3++) {
          for (var _j2 = 0; _j2 < path2.length - _i3; _j2++) {
            str += "  ";
          }
          str += "}\n";
        }
        return str + "\n\n";
      }
      /**
       * @param {object} options
       * @returns {string}
       * @static
       */
    }, {
      key: "print",
      value: function print(options) {
        return _JSON$stringify(options).replace(/(")|(\[)|(\])|(,"__type__")/g, "").replace(/(,)/g, ", ");
      }
      /**
       *  Compute the edit distance between the two given strings
       * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
       *
       * Copyright (c) 2011 Andrei Mackenzie
       *
       * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
       *
       * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
       *
       * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
       *
       * @param {string} a
       * @param {string} b
       * @returns {Array.<Array.<number>>}}
       * @static
       */
    }, {
      key: "levenshteinDistance",
      value: function levenshteinDistance(a, b) {
        if (a.length === 0)
          return b.length;
        if (b.length === 0)
          return a.length;
        var matrix = [];
        var i2;
        for (i2 = 0; i2 <= b.length; i2++) {
          matrix[i2] = [i2];
        }
        var j;
        for (j = 0; j <= a.length; j++) {
          matrix[0][j] = j;
        }
        for (i2 = 1; i2 <= b.length; i2++) {
          for (j = 1; j <= a.length; j++) {
            if (b.charAt(i2 - 1) == a.charAt(j - 1)) {
              matrix[i2][j] = matrix[i2 - 1][j - 1];
            } else {
              matrix[i2][j] = Math.min(
                matrix[i2 - 1][j - 1] + 1,
                // substitution
                Math.min(
                  matrix[i2][j - 1] + 1,
                  // insertion
                  matrix[i2 - 1][j] + 1
                )
              );
            }
          }
        }
        return matrix[b.length][a.length];
      }
    }]);
    return Validator$12;
  }();
  var Activator$2 = Activator$1;
  var ColorPicker$2 = ColorPicker$1;
  var Configurator$2 = Configurator$1;
  var Hammer$2 = Hammer$1;
  var Popup$2 = Popup$1;
  var VALIDATOR_PRINT_STYLE = VALIDATOR_PRINT_STYLE$1;
  var Validator$2 = Validator$1;
  var util$2 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    Activator: Activator$2,
    Alea,
    ColorPicker: ColorPicker$2,
    Configurator: Configurator$2,
    DELETE,
    HSVToHex,
    HSVToRGB,
    Hammer: Hammer$2,
    Popup: Popup$2,
    RGBToHSV,
    RGBToHex,
    VALIDATOR_PRINT_STYLE,
    Validator: Validator$2,
    addClassName,
    addCssText,
    addEventListener,
    binarySearchCustom,
    binarySearchValue,
    bridgeObject,
    copyAndExtendArray,
    copyArray,
    deepExtend,
    deepObjectAssign,
    easingFunctions,
    equalArray,
    extend,
    fillIfDefined,
    forEach: forEach$5,
    getAbsoluteLeft,
    getAbsoluteRight,
    getAbsoluteTop,
    getScrollBarWidth,
    getTarget,
    getType,
    hasParent,
    hexToHSV,
    hexToRGB,
    insertSort,
    isDate,
    isNumber,
    isObject: isObject$7,
    isString,
    isValidHex,
    isValidRGB,
    isValidRGBA,
    mergeOptions,
    option,
    overrideOpacity,
    parseColor,
    preventDefault,
    pureDeepObjectAssign,
    recursiveDOMDelete,
    removeClassName,
    removeCssText,
    removeEventListener,
    selectiveBridgeObject,
    selectiveDeepExtend,
    selectiveExtend,
    selectiveNotDeepExtend,
    throttle,
    toArray,
    topMost,
    updateProperty
  });
  function prepareElements(JSONcontainer) {
    for (var elementType in JSONcontainer) {
      if (JSONcontainer.hasOwnProperty(elementType)) {
        JSONcontainer[elementType].redundant = JSONcontainer[elementType].used;
        JSONcontainer[elementType].used = [];
      }
    }
  }
  function cleanupElements(JSONcontainer) {
    for (var elementType in JSONcontainer) {
      if (JSONcontainer.hasOwnProperty(elementType)) {
        if (JSONcontainer[elementType].redundant) {
          for (var i2 = 0; i2 < JSONcontainer[elementType].redundant.length; i2++) {
            JSONcontainer[elementType].redundant[i2].parentNode.removeChild(JSONcontainer[elementType].redundant[i2]);
          }
          JSONcontainer[elementType].redundant = [];
        }
      }
    }
  }
  function resetElements(JSONcontainer) {
    prepareElements(JSONcontainer);
    cleanupElements(JSONcontainer);
    prepareElements(JSONcontainer);
  }
  function getSVGElement(elementType, JSONcontainer, svgContainer) {
    var element;
    if (JSONcontainer.hasOwnProperty(elementType)) {
      if (JSONcontainer[elementType].redundant.length > 0) {
        element = JSONcontainer[elementType].redundant[0];
        JSONcontainer[elementType].redundant.shift();
      } else {
        element = document.createElementNS("http://www.w3.org/2000/svg", elementType);
        svgContainer.appendChild(element);
      }
    } else {
      element = document.createElementNS("http://www.w3.org/2000/svg", elementType);
      JSONcontainer[elementType] = {
        used: [],
        redundant: []
      };
      svgContainer.appendChild(element);
    }
    JSONcontainer[elementType].used.push(element);
    return element;
  }
  function getDOMElement(elementType, JSONcontainer, DOMContainer, insertBefore) {
    var element;
    if (JSONcontainer.hasOwnProperty(elementType)) {
      if (JSONcontainer[elementType].redundant.length > 0) {
        element = JSONcontainer[elementType].redundant[0];
        JSONcontainer[elementType].redundant.shift();
      } else {
        element = document.createElement(elementType);
        if (insertBefore !== void 0) {
          DOMContainer.insertBefore(element, insertBefore);
        } else {
          DOMContainer.appendChild(element);
        }
      }
    } else {
      element = document.createElement(elementType);
      JSONcontainer[elementType] = {
        used: [],
        redundant: []
      };
      if (insertBefore !== void 0) {
        DOMContainer.insertBefore(element, insertBefore);
      } else {
        DOMContainer.appendChild(element);
      }
    }
    JSONcontainer[elementType].used.push(element);
    return element;
  }
  function drawPoint(x, y, groupTemplate, JSONcontainer, svgContainer, labelObj) {
    var point;
    if (groupTemplate.style == "circle") {
      point = getSVGElement("circle", JSONcontainer, svgContainer);
      point.setAttributeNS(null, "cx", x);
      point.setAttributeNS(null, "cy", y);
      point.setAttributeNS(null, "r", 0.5 * groupTemplate.size);
    } else {
      point = getSVGElement("rect", JSONcontainer, svgContainer);
      point.setAttributeNS(null, "x", x - 0.5 * groupTemplate.size);
      point.setAttributeNS(null, "y", y - 0.5 * groupTemplate.size);
      point.setAttributeNS(null, "width", groupTemplate.size);
      point.setAttributeNS(null, "height", groupTemplate.size);
    }
    if (groupTemplate.styles !== void 0) {
      point.setAttributeNS(null, "style", groupTemplate.styles);
    }
    point.setAttributeNS(null, "class", groupTemplate.className + " vis-point");
    if (labelObj) {
      var label = getSVGElement("text", JSONcontainer, svgContainer);
      if (labelObj.xOffset) {
        x = x + labelObj.xOffset;
      }
      if (labelObj.yOffset) {
        y = y + labelObj.yOffset;
      }
      if (labelObj.content) {
        label.textContent = labelObj.content;
      }
      if (labelObj.className) {
        label.setAttributeNS(null, "class", labelObj.className + " vis-label");
      }
      label.setAttributeNS(null, "x", x);
      label.setAttributeNS(null, "y", y);
    }
    return point;
  }
  function drawBar(x, y, width, height, className, JSONcontainer, svgContainer, style) {
    if (height != 0) {
      if (height < 0) {
        height *= -1;
        y -= height;
      }
      var rect = getSVGElement("rect", JSONcontainer, svgContainer);
      rect.setAttributeNS(null, "x", x - 0.5 * width);
      rect.setAttributeNS(null, "y", y);
      rect.setAttributeNS(null, "width", width);
      rect.setAttributeNS(null, "height", height);
      rect.setAttributeNS(null, "class", className);
      if (style) {
        rect.setAttributeNS(null, "style", style);
      }
    }
  }
  function getNavigatorLanguage() {
    try {
      if (!navigator)
        return "en";
      if (navigator.languages && navigator.languages.length) {
        return navigator.languages;
      } else {
        return navigator.userLanguage || navigator.language || navigator.browserLanguage || "en";
      }
    } catch (error) {
      return "en";
    }
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  var createExports$1 = {};
  var create$6 = {
    get exports() {
      return createExports$1;
    },
    set exports(v) {
      createExports$1 = v;
    }
  };
  var createExports = {};
  var create$5 = {
    get exports() {
      return createExports;
    },
    set exports(v) {
      createExports = v;
    }
  };
  var parent$x = create$7;
  var create$4 = parent$x;
  var parent$w = create$4;
  var create$3 = parent$w;
  (function(module) {
    module.exports = create$3;
  })(create$5);
  (function(module) {
    module.exports = createExports;
  })(create$6);
  var _Object$create = /* @__PURE__ */ getDefaultExportFromCjs(createExports$1);
  var setPrototypeOfExports$1 = {};
  var setPrototypeOf$7 = {
    get exports() {
      return setPrototypeOfExports$1;
    },
    set exports(v) {
      setPrototypeOfExports$1 = v;
    }
  };
  var setPrototypeOfExports = {};
  var setPrototypeOf$6 = {
    get exports() {
      return setPrototypeOfExports;
    },
    set exports(v) {
      setPrototypeOfExports = v;
    }
  };
  var $$n = _export;
  var setPrototypeOf$5 = objectSetPrototypeOf;
  $$n({ target: "Object", stat: true }, {
    setPrototypeOf: setPrototypeOf$5
  });
  var path$6 = path$t;
  var setPrototypeOf$4 = path$6.Object.setPrototypeOf;
  var parent$v = setPrototypeOf$4;
  var setPrototypeOf$3 = parent$v;
  var parent$u = setPrototypeOf$3;
  var setPrototypeOf$2 = parent$u;
  var parent$t = setPrototypeOf$2;
  var setPrototypeOf$1 = parent$t;
  (function(module) {
    module.exports = setPrototypeOf$1;
  })(setPrototypeOf$6);
  (function(module) {
    module.exports = setPrototypeOfExports;
  })(setPrototypeOf$7);
  var _Object$setPrototypeOf = /* @__PURE__ */ getDefaultExportFromCjs(setPrototypeOfExports$1);
  var bindExports$1 = {};
  var bind$a = {
    get exports() {
      return bindExports$1;
    },
    set exports(v) {
      bindExports$1 = v;
    }
  };
  var bindExports = {};
  var bind$9 = {
    get exports() {
      return bindExports;
    },
    set exports(v) {
      bindExports = v;
    }
  };
  var parent$s = bind$b;
  var bind$8 = parent$s;
  var parent$r = bind$8;
  var bind$7 = parent$r;
  (function(module) {
    module.exports = bind$7;
  })(bind$9);
  (function(module) {
    module.exports = bindExports;
  })(bind$a);
  var _bindInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(bindExports$1);
  function _setPrototypeOf(o, p) {
    var _context;
    _setPrototypeOf = _Object$setPrototypeOf ? _bindInstanceProperty(_context = _Object$setPrototypeOf).call(_context) : function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = _Object$create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    _Object$defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  function _possibleConstructorReturn(self2, call2) {
    if (call2 && (_typeof$1(call2) === "object" || typeof call2 === "function")) {
      return call2;
    } else if (call2 !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
  }
  var getPrototypeOfExports$1 = {};
  var getPrototypeOf$4 = {
    get exports() {
      return getPrototypeOfExports$1;
    },
    set exports(v) {
      getPrototypeOfExports$1 = v;
    }
  };
  var getPrototypeOfExports = {};
  var getPrototypeOf$3 = {
    get exports() {
      return getPrototypeOfExports;
    },
    set exports(v) {
      getPrototypeOfExports = v;
    }
  };
  var parent$q = getPrototypeOf$5;
  var getPrototypeOf$2 = parent$q;
  var parent$p = getPrototypeOf$2;
  var getPrototypeOf$1 = parent$p;
  (function(module) {
    module.exports = getPrototypeOf$1;
  })(getPrototypeOf$3);
  (function(module) {
    module.exports = getPrototypeOfExports;
  })(getPrototypeOf$4);
  var _Object$getPrototypeOf = /* @__PURE__ */ getDefaultExportFromCjs(getPrototypeOfExports$1);
  function _getPrototypeOf(o) {
    var _context;
    _getPrototypeOf = _Object$setPrototypeOf ? _bindInstanceProperty(_context = _Object$getPrototypeOf).call(_context) : function _getPrototypeOf2(o2) {
      return o2.__proto__ || _Object$getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
  }
  var regeneratorRuntimeExports = {};
  var regeneratorRuntime$1 = {
    get exports() {
      return regeneratorRuntimeExports;
    },
    set exports(v) {
      regeneratorRuntimeExports = v;
    }
  };
  var _typeofExports = {};
  var _typeof = {
    get exports() {
      return _typeofExports;
    },
    set exports(v) {
      _typeofExports = v;
    }
  };
  (function(module) {
    var _Symbol2 = symbolExports$2;
    var _Symbol$iterator3 = iteratorExports$2;
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = "function" == typeof _Symbol2 && "symbol" == typeof _Symbol$iterator3 ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof _Symbol2 && obj2.constructor === _Symbol2 && obj2 !== _Symbol2.prototype ? "symbol" : typeof obj2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(obj);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(_typeof);
  var forEachExports$1 = {};
  var forEach$4 = {
    get exports() {
      return forEachExports$1;
    },
    set exports(v) {
      forEachExports$1 = v;
    }
  };
  var forEachExports = {};
  var forEach$3 = {
    get exports() {
      return forEachExports;
    },
    set exports(v) {
      forEachExports = v;
    }
  };
  var parent$o = forEach$6;
  var forEach$2 = parent$o;
  var parent$n = forEach$2;
  var forEach$1 = parent$n;
  (function(module) {
    module.exports = forEach$1;
  })(forEach$3);
  (function(module) {
    module.exports = forEachExports;
  })(forEach$4);
  var promiseExports$1 = {};
  var promise$6 = {
    get exports() {
      return promiseExports$1;
    },
    set exports(v) {
      promiseExports$1 = v;
    }
  };
  var promiseExports = {};
  var promise$5 = {
    get exports() {
      return promiseExports;
    },
    set exports(v) {
      promiseExports = v;
    }
  };
  var hasOwn$5 = hasOwnProperty_1;
  var ownKeys$2 = ownKeys$9;
  var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
  var definePropertyModule = objectDefineProperty;
  var copyConstructorProperties$1 = function(target, source, exceptions) {
    var keys4 = ownKeys$2(source);
    var defineProperty6 = definePropertyModule.f;
    var getOwnPropertyDescriptor6 = getOwnPropertyDescriptorModule.f;
    for (var i2 = 0; i2 < keys4.length; i2++) {
      var key = keys4[i2];
      if (!hasOwn$5(target, key) && !(exceptions && hasOwn$5(exceptions, key))) {
        defineProperty6(target, key, getOwnPropertyDescriptor6(source, key));
      }
    }
  };
  var isObject$6 = isObject$j;
  var createNonEnumerableProperty$3 = createNonEnumerableProperty$9;
  var installErrorCause$1 = function(O, options) {
    if (isObject$6(options) && "cause" in options) {
      createNonEnumerableProperty$3(O, "cause", options.cause);
    }
  };
  var uncurryThis$3 = functionUncurryThis;
  var $Error$1 = Error;
  var replace = uncurryThis$3("".replace);
  var TEST = function(arg) {
    return String($Error$1(arg).stack);
  }("zxcasd");
  var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
  var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
  var errorStackClear = function(stack2, dropEntries) {
    if (IS_V8_OR_CHAKRA_STACK && typeof stack2 == "string" && !$Error$1.prepareStackTrace) {
      while (dropEntries--)
        stack2 = replace(stack2, V8_OR_CHAKRA_STACK_ENTRY, "");
    }
    return stack2;
  };
  var fails$9 = fails$x;
  var createPropertyDescriptor$1 = createPropertyDescriptor$7;
  var errorStackInstallable = !fails$9(function() {
    var error = Error("a");
    if (!("stack" in error))
      return true;
    Object.defineProperty(error, "stack", createPropertyDescriptor$1(1, 7));
    return error.stack !== 7;
  });
  var createNonEnumerableProperty$2 = createNonEnumerableProperty$9;
  var clearErrorStack = errorStackClear;
  var ERROR_STACK_INSTALLABLE = errorStackInstallable;
  var captureStackTrace = Error.captureStackTrace;
  var errorStackInstall = function(error, C, stack2, dropEntries) {
    if (ERROR_STACK_INSTALLABLE) {
      if (captureStackTrace)
        captureStackTrace(error, C);
      else
        createNonEnumerableProperty$2(error, "stack", clearErrorStack(stack2, dropEntries));
    }
  };
  var bind$6 = functionBindContext;
  var call$6 = functionCall;
  var anObject$3 = anObject$d;
  var tryToString$1 = tryToString$6;
  var isArrayIteratorMethod = isArrayIteratorMethod$2;
  var lengthOfArrayLike$4 = lengthOfArrayLike$d;
  var isPrototypeOf$d = objectIsPrototypeOf;
  var getIterator$6 = getIterator$8;
  var getIteratorMethod = getIteratorMethod$9;
  var iteratorClose = iteratorClose$2;
  var $TypeError$4 = TypeError;
  var Result = function(stopped, result) {
    this.stopped = stopped;
    this.result = result;
  };
  var ResultPrototype = Result.prototype;
  var iterate$7 = function(iterable, unboundFunction, options) {
    var that = options && options.that;
    var AS_ENTRIES = !!(options && options.AS_ENTRIES);
    var IS_RECORD = !!(options && options.IS_RECORD);
    var IS_ITERATOR = !!(options && options.IS_ITERATOR);
    var INTERRUPTED = !!(options && options.INTERRUPTED);
    var fn = bind$6(unboundFunction, that);
    var iterator2, iterFn, index, length, result, next2, step;
    var stop = function(condition) {
      if (iterator2)
        iteratorClose(iterator2, "normal", condition);
      return new Result(true, condition);
    };
    var callFn = function(value) {
      if (AS_ENTRIES) {
        anObject$3(value);
        return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
      }
      return INTERRUPTED ? fn(value, stop) : fn(value);
    };
    if (IS_RECORD) {
      iterator2 = iterable.iterator;
    } else if (IS_ITERATOR) {
      iterator2 = iterable;
    } else {
      iterFn = getIteratorMethod(iterable);
      if (!iterFn)
        throw $TypeError$4(tryToString$1(iterable) + " is not iterable");
      if (isArrayIteratorMethod(iterFn)) {
        for (index = 0, length = lengthOfArrayLike$4(iterable); length > index; index++) {
          result = callFn(iterable[index]);
          if (result && isPrototypeOf$d(ResultPrototype, result))
            return result;
        }
        return new Result(false);
      }
      iterator2 = getIterator$6(iterable, iterFn);
    }
    next2 = IS_RECORD ? iterable.next : iterator2.next;
    while (!(step = call$6(next2, iterator2)).done) {
      try {
        result = callFn(step.value);
      } catch (error) {
        iteratorClose(iterator2, "throw", error);
      }
      if (typeof result == "object" && result && isPrototypeOf$d(ResultPrototype, result))
        return result;
    }
    return new Result(false);
  };
  var toString$3 = toString$c;
  var normalizeStringArgument$1 = function(argument, $default) {
    return argument === void 0 ? arguments.length < 2 ? "" : $default : toString$3(argument);
  };
  var $$m = _export;
  var isPrototypeOf$c = objectIsPrototypeOf;
  var getPrototypeOf2 = objectGetPrototypeOf;
  var setPrototypeOf = objectSetPrototypeOf;
  var copyConstructorProperties = copyConstructorProperties$1;
  var create$2 = objectCreate;
  var createNonEnumerableProperty$1 = createNonEnumerableProperty$9;
  var createPropertyDescriptor = createPropertyDescriptor$7;
  var installErrorCause = installErrorCause$1;
  var installErrorStack = errorStackInstall;
  var iterate$6 = iterate$7;
  var normalizeStringArgument = normalizeStringArgument$1;
  var wellKnownSymbol$3 = wellKnownSymbol$o;
  var TO_STRING_TAG = wellKnownSymbol$3("toStringTag");
  var $Error = Error;
  var push$2 = [].push;
  var $AggregateError = function AggregateError(errors, message) {
    var isInstance = isPrototypeOf$c(AggregateErrorPrototype, this);
    var that;
    if (setPrototypeOf) {
      that = setPrototypeOf($Error(), isInstance ? getPrototypeOf2(this) : AggregateErrorPrototype);
    } else {
      that = isInstance ? this : create$2(AggregateErrorPrototype);
      createNonEnumerableProperty$1(that, TO_STRING_TAG, "Error");
    }
    if (message !== void 0)
      createNonEnumerableProperty$1(that, "message", normalizeStringArgument(message));
    installErrorStack(that, $AggregateError, that.stack, 1);
    if (arguments.length > 2)
      installErrorCause(that, arguments[2]);
    var errorsArray = [];
    iterate$6(errors, push$2, { that: errorsArray });
    createNonEnumerableProperty$1(that, "errors", errorsArray);
    return that;
  };
  if (setPrototypeOf)
    setPrototypeOf($AggregateError, $Error);
  else
    copyConstructorProperties($AggregateError, $Error, { name: true });
  var AggregateErrorPrototype = $AggregateError.prototype = create$2($Error.prototype, {
    constructor: createPropertyDescriptor(1, $AggregateError),
    message: createPropertyDescriptor(1, ""),
    name: createPropertyDescriptor(1, "AggregateError")
  });
  $$m({ global: true, constructor: true, arity: 2 }, {
    AggregateError: $AggregateError
  });
  var classof$4 = classofRaw$2;
  var engineIsNode = typeof process != "undefined" && classof$4(process) == "process";
  var getBuiltIn$4 = getBuiltIn$f;
  var defineBuiltInAccessor$1 = defineBuiltInAccessor$3;
  var wellKnownSymbol$2 = wellKnownSymbol$o;
  var DESCRIPTORS$2 = descriptors;
  var SPECIES$2 = wellKnownSymbol$2("species");
  var setSpecies$2 = function(CONSTRUCTOR_NAME) {
    var Constructor = getBuiltIn$4(CONSTRUCTOR_NAME);
    if (DESCRIPTORS$2 && Constructor && !Constructor[SPECIES$2]) {
      defineBuiltInAccessor$1(Constructor, SPECIES$2, {
        configurable: true,
        get: function() {
          return this;
        }
      });
    }
  };
  var isPrototypeOf$b = objectIsPrototypeOf;
  var $TypeError$3 = TypeError;
  var anInstance$3 = function(it2, Prototype) {
    if (isPrototypeOf$b(Prototype, it2))
      return it2;
    throw $TypeError$3("Incorrect invocation");
  };
  var isConstructor3 = isConstructor$4;
  var tryToString = tryToString$6;
  var $TypeError$2 = TypeError;
  var aConstructor$2 = function(argument) {
    if (isConstructor3(argument))
      return argument;
    throw $TypeError$2(tryToString(argument) + " is not a constructor");
  };
  var anObject$2 = anObject$d;
  var aConstructor$1 = aConstructor$2;
  var isNullOrUndefined$1 = isNullOrUndefined$5;
  var wellKnownSymbol$1 = wellKnownSymbol$o;
  var SPECIES$1 = wellKnownSymbol$1("species");
  var speciesConstructor$2 = function(O, defaultConstructor) {
    var C = anObject$2(O).constructor;
    var S;
    return C === void 0 || isNullOrUndefined$1(S = anObject$2(C)[SPECIES$1]) ? defaultConstructor : aConstructor$1(S);
  };
  var userAgent$4 = engineUserAgent;
  var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$4);
  var global$7 = global$o;
  var apply$1 = functionApply;
  var bind$5 = functionBindContext;
  var isCallable$4 = isCallable$m;
  var hasOwn$4 = hasOwnProperty_1;
  var fails$8 = fails$x;
  var html = html$2;
  var arraySlice$1 = arraySlice$5;
  var createElement = documentCreateElement$1;
  var validateArgumentsLength = validateArgumentsLength$2;
  var IS_IOS$1 = engineIsIos;
  var IS_NODE$4 = engineIsNode;
  var set$3 = global$7.setImmediate;
  var clear = global$7.clearImmediate;
  var process$3 = global$7.process;
  var Dispatch = global$7.Dispatch;
  var Function$1 = global$7.Function;
  var MessageChannel2 = global$7.MessageChannel;
  var String$1 = global$7.String;
  var counter = 0;
  var queue$2 = {};
  var ONREADYSTATECHANGE = "onreadystatechange";
  var $location;
  var defer;
  var channel;
  var port;
  fails$8(function() {
    $location = global$7.location;
  });
  var run = function(id2) {
    if (hasOwn$4(queue$2, id2)) {
      var fn = queue$2[id2];
      delete queue$2[id2];
      fn();
    }
  };
  var runner = function(id2) {
    return function() {
      run(id2);
    };
  };
  var eventListener = function(event2) {
    run(event2.data);
  };
  var globalPostMessageDefer = function(id2) {
    global$7.postMessage(String$1(id2), $location.protocol + "//" + $location.host);
  };
  if (!set$3 || !clear) {
    set$3 = function setImmediate2(handler) {
      validateArgumentsLength(arguments.length, 1);
      var fn = isCallable$4(handler) ? handler : Function$1(handler);
      var args = arraySlice$1(arguments, 1);
      queue$2[++counter] = function() {
        apply$1(fn, void 0, args);
      };
      defer(counter);
      return counter;
    };
    clear = function clearImmediate(id2) {
      delete queue$2[id2];
    };
    if (IS_NODE$4) {
      defer = function(id2) {
        process$3.nextTick(runner(id2));
      };
    } else if (Dispatch && Dispatch.now) {
      defer = function(id2) {
        Dispatch.now(runner(id2));
      };
    } else if (MessageChannel2 && !IS_IOS$1) {
      channel = new MessageChannel2();
      port = channel.port2;
      channel.port1.onmessage = eventListener;
      defer = bind$5(port.postMessage, port);
    } else if (global$7.addEventListener && isCallable$4(global$7.postMessage) && !global$7.importScripts && $location && $location.protocol !== "file:" && !fails$8(globalPostMessageDefer)) {
      defer = globalPostMessageDefer;
      global$7.addEventListener("message", eventListener, false);
    } else if (ONREADYSTATECHANGE in createElement("script")) {
      defer = function(id2) {
        html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
          html.removeChild(this);
          run(id2);
        };
      };
    } else {
      defer = function(id2) {
        setTimeout(runner(id2), 0);
      };
    }
  }
  var task$1 = {
    set: set$3,
    clear
  };
  var Queue$3 = function() {
    this.head = null;
    this.tail = null;
  };
  Queue$3.prototype = {
    add: function(item) {
      var entry = { item, next: null };
      var tail = this.tail;
      if (tail)
        tail.next = entry;
      else
        this.head = entry;
      this.tail = entry;
    },
    get: function() {
      var entry = this.head;
      if (entry) {
        var next2 = this.head = entry.next;
        if (next2 === null)
          this.tail = null;
        return entry.item;
      }
    }
  };
  var queue$1 = Queue$3;
  var userAgent$3 = engineUserAgent;
  var engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$3) && typeof Pebble != "undefined";
  var userAgent$2 = engineUserAgent;
  var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2);
  var global$6 = global$o;
  var bind$4 = functionBindContext;
  var getOwnPropertyDescriptor5 = objectGetOwnPropertyDescriptor.f;
  var macrotask = task$1.set;
  var Queue$2 = queue$1;
  var IS_IOS = engineIsIos;
  var IS_IOS_PEBBLE = engineIsIosPebble;
  var IS_WEBOS_WEBKIT = engineIsWebosWebkit;
  var IS_NODE$3 = engineIsNode;
  var MutationObserver = global$6.MutationObserver || global$6.WebKitMutationObserver;
  var document$2 = global$6.document;
  var process$2 = global$6.process;
  var Promise$1 = global$6.Promise;
  var queueMicrotaskDescriptor = getOwnPropertyDescriptor5(global$6, "queueMicrotask");
  var microtask$1 = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
  var notify$1;
  var toggle;
  var node;
  var promise$4;
  var then;
  if (!microtask$1) {
    queue = new Queue$2();
    flush = function() {
      var parent2, fn;
      if (IS_NODE$3 && (parent2 = process$2.domain))
        parent2.exit();
      while (fn = queue.get())
        try {
          fn();
        } catch (error) {
          if (queue.head)
            notify$1();
          throw error;
        }
      if (parent2)
        parent2.enter();
    };
    if (!IS_IOS && !IS_NODE$3 && !IS_WEBOS_WEBKIT && MutationObserver && document$2) {
      toggle = true;
      node = document$2.createTextNode("");
      new MutationObserver(flush).observe(node, { characterData: true });
      notify$1 = function() {
        node.data = toggle = !toggle;
      };
    } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {
      promise$4 = Promise$1.resolve(void 0);
      promise$4.constructor = Promise$1;
      then = bind$4(promise$4.then, promise$4);
      notify$1 = function() {
        then(flush);
      };
    } else if (IS_NODE$3) {
      notify$1 = function() {
        process$2.nextTick(flush);
      };
    } else {
      macrotask = bind$4(macrotask, global$6);
      notify$1 = function() {
        macrotask(flush);
      };
    }
    microtask$1 = function(fn) {
      if (!queue.head)
        notify$1();
      queue.add(fn);
    };
  }
  var queue;
  var flush;
  var microtask_1 = microtask$1;
  var hostReportErrors$1 = function(a, b) {
    try {
      arguments.length == 1 ? console.error(a) : console.error(a, b);
    } catch (error) {
    }
  };
  var perform$6 = function(exec2) {
    try {
      return { error: false, value: exec2() };
    } catch (error) {
      return { error: true, value: error };
    }
  };
  var global$5 = global$o;
  var promiseNativeConstructor = global$5.Promise;
  var engineIsDeno = typeof Deno == "object" && Deno && typeof Deno.version == "object";
  var IS_DENO$1 = engineIsDeno;
  var IS_NODE$2 = engineIsNode;
  var engineIsBrowser = !IS_DENO$1 && !IS_NODE$2 && typeof window == "object" && typeof document == "object";
  var global$4 = global$o;
  var NativePromiseConstructor$5 = promiseNativeConstructor;
  var isCallable$3 = isCallable$m;
  var isForced = isForced_1;
  var inspectSource = inspectSource$2;
  var wellKnownSymbol = wellKnownSymbol$o;
  var IS_BROWSER = engineIsBrowser;
  var IS_DENO = engineIsDeno;
  var V8_VERSION = engineV8Version;
  var NativePromisePrototype$2 = NativePromiseConstructor$5 && NativePromiseConstructor$5.prototype;
  var SPECIES = wellKnownSymbol("species");
  var SUBCLASSING = false;
  var NATIVE_PROMISE_REJECTION_EVENT$1 = isCallable$3(global$4.PromiseRejectionEvent);
  var FORCED_PROMISE_CONSTRUCTOR$5 = isForced("Promise", function() {
    var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor$5);
    var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor$5);
    if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
      return true;
    if (!(NativePromisePrototype$2["catch"] && NativePromisePrototype$2["finally"]))
      return true;
    if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
      var promise2 = new NativePromiseConstructor$5(function(resolve3) {
        resolve3(1);
      });
      var FakePromise = function(exec2) {
        exec2(function() {
        }, function() {
        });
      };
      var constructor = promise2.constructor = {};
      constructor[SPECIES] = FakePromise;
      SUBCLASSING = promise2.then(function() {
      }) instanceof FakePromise;
      if (!SUBCLASSING)
        return true;
    }
    return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT$1;
  });
  var promiseConstructorDetection = {
    CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR$5,
    REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT$1,
    SUBCLASSING
  };
  var newPromiseCapability$2 = {};
  var aCallable$8 = aCallable$e;
  var $TypeError$1 = TypeError;
  var PromiseCapability = function(C) {
    var resolve3, reject2;
    this.promise = new C(function($$resolve, $$reject) {
      if (resolve3 !== void 0 || reject2 !== void 0)
        throw $TypeError$1("Bad Promise constructor");
      resolve3 = $$resolve;
      reject2 = $$reject;
    });
    this.resolve = aCallable$8(resolve3);
    this.reject = aCallable$8(reject2);
  };
  newPromiseCapability$2.f = function(C) {
    return new PromiseCapability(C);
  };
  var $$l = _export;
  var IS_NODE$1 = engineIsNode;
  var global$3 = global$o;
  var call$5 = functionCall;
  var defineBuiltIn$1 = defineBuiltIn$6;
  var setToStringTag$1 = setToStringTag$7;
  var setSpecies$1 = setSpecies$2;
  var aCallable$7 = aCallable$e;
  var isCallable$2 = isCallable$m;
  var isObject$5 = isObject$j;
  var anInstance$2 = anInstance$3;
  var speciesConstructor$1 = speciesConstructor$2;
  var task = task$1.set;
  var microtask = microtask_1;
  var hostReportErrors = hostReportErrors$1;
  var perform$5 = perform$6;
  var Queue$1 = queue$1;
  var InternalStateModule$2 = internalState;
  var NativePromiseConstructor$4 = promiseNativeConstructor;
  var PromiseConstructorDetection = promiseConstructorDetection;
  var newPromiseCapabilityModule$6 = newPromiseCapability$2;
  var PROMISE = "Promise";
  var FORCED_PROMISE_CONSTRUCTOR$4 = PromiseConstructorDetection.CONSTRUCTOR;
  var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
  var getInternalPromiseState = InternalStateModule$2.getterFor(PROMISE);
  var setInternalState$2 = InternalStateModule$2.set;
  var NativePromisePrototype$1 = NativePromiseConstructor$4 && NativePromiseConstructor$4.prototype;
  var PromiseConstructor = NativePromiseConstructor$4;
  var PromisePrototype = NativePromisePrototype$1;
  var TypeError$1 = global$3.TypeError;
  var document$1 = global$3.document;
  var process$1 = global$3.process;
  var newPromiseCapability$1 = newPromiseCapabilityModule$6.f;
  var newGenericPromiseCapability = newPromiseCapability$1;
  var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$3.dispatchEvent);
  var UNHANDLED_REJECTION = "unhandledrejection";
  var REJECTION_HANDLED = "rejectionhandled";
  var PENDING = 0;
  var FULFILLED = 1;
  var REJECTED = 2;
  var HANDLED = 1;
  var UNHANDLED = 2;
  var Internal;
  var OwnPromiseCapability;
  var PromiseWrapper;
  var isThenable = function(it2) {
    var then2;
    return isObject$5(it2) && isCallable$2(then2 = it2.then) ? then2 : false;
  };
  var callReaction = function(reaction, state) {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var handler = ok ? reaction.ok : reaction.fail;
    var resolve3 = reaction.resolve;
    var reject2 = reaction.reject;
    var domain = reaction.domain;
    var result, then2, exited;
    try {
      if (handler) {
        if (!ok) {
          if (state.rejection === UNHANDLED)
            onHandleUnhandled(state);
          state.rejection = HANDLED;
        }
        if (handler === true)
          result = value;
        else {
          if (domain)
            domain.enter();
          result = handler(value);
          if (domain) {
            domain.exit();
            exited = true;
          }
        }
        if (result === reaction.promise) {
          reject2(TypeError$1("Promise-chain cycle"));
        } else if (then2 = isThenable(result)) {
          call$5(then2, result, resolve3, reject2);
        } else
          resolve3(result);
      } else
        reject2(value);
    } catch (error) {
      if (domain && !exited)
        domain.exit();
      reject2(error);
    }
  };
  var notify = function(state, isReject) {
    if (state.notified)
      return;
    state.notified = true;
    microtask(function() {
      var reactions = state.reactions;
      var reaction;
      while (reaction = reactions.get()) {
        callReaction(reaction, state);
      }
      state.notified = false;
      if (isReject && !state.rejection)
        onUnhandled(state);
    });
  };
  var dispatchEvent = function(name, promise2, reason) {
    var event2, handler;
    if (DISPATCH_EVENT) {
      event2 = document$1.createEvent("Event");
      event2.promise = promise2;
      event2.reason = reason;
      event2.initEvent(name, false, true);
      global$3.dispatchEvent(event2);
    } else
      event2 = { promise: promise2, reason };
    if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global$3["on" + name]))
      handler(event2);
    else if (name === UNHANDLED_REJECTION)
      hostReportErrors("Unhandled promise rejection", reason);
  };
  var onUnhandled = function(state) {
    call$5(task, global$3, function() {
      var promise2 = state.facade;
      var value = state.value;
      var IS_UNHANDLED = isUnhandled(state);
      var result;
      if (IS_UNHANDLED) {
        result = perform$5(function() {
          if (IS_NODE$1) {
            process$1.emit("unhandledRejection", value, promise2);
          } else
            dispatchEvent(UNHANDLED_REJECTION, promise2, value);
        });
        state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
        if (result.error)
          throw result.value;
      }
    });
  };
  var isUnhandled = function(state) {
    return state.rejection !== HANDLED && !state.parent;
  };
  var onHandleUnhandled = function(state) {
    call$5(task, global$3, function() {
      var promise2 = state.facade;
      if (IS_NODE$1) {
        process$1.emit("rejectionHandled", promise2);
      } else
        dispatchEvent(REJECTION_HANDLED, promise2, state.value);
    });
  };
  var bind$3 = function(fn, state, unwrap) {
    return function(value) {
      fn(state, value, unwrap);
    };
  };
  var internalReject = function(state, value, unwrap) {
    if (state.done)
      return;
    state.done = true;
    if (unwrap)
      state = unwrap;
    state.value = value;
    state.state = REJECTED;
    notify(state, true);
  };
  var internalResolve = function(state, value, unwrap) {
    if (state.done)
      return;
    state.done = true;
    if (unwrap)
      state = unwrap;
    try {
      if (state.facade === value)
        throw TypeError$1("Promise can't be resolved itself");
      var then2 = isThenable(value);
      if (then2) {
        microtask(function() {
          var wrapper = { done: false };
          try {
            call$5(
              then2,
              value,
              bind$3(internalResolve, wrapper, state),
              bind$3(internalReject, wrapper, state)
            );
          } catch (error) {
            internalReject(wrapper, error, state);
          }
        });
      } else {
        state.value = value;
        state.state = FULFILLED;
        notify(state, false);
      }
    } catch (error) {
      internalReject({ done: false }, error, state);
    }
  };
  if (FORCED_PROMISE_CONSTRUCTOR$4) {
    PromiseConstructor = function Promise2(executor) {
      anInstance$2(this, PromisePrototype);
      aCallable$7(executor);
      call$5(Internal, this);
      var state = getInternalPromiseState(this);
      try {
        executor(bind$3(internalResolve, state), bind$3(internalReject, state));
      } catch (error) {
        internalReject(state, error);
      }
    };
    PromisePrototype = PromiseConstructor.prototype;
    Internal = function Promise2(executor) {
      setInternalState$2(this, {
        type: PROMISE,
        done: false,
        notified: false,
        parent: false,
        reactions: new Queue$1(),
        rejection: false,
        state: PENDING,
        value: void 0
      });
    };
    Internal.prototype = defineBuiltIn$1(PromisePrototype, "then", function then2(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability$1(speciesConstructor$1(this, PromiseConstructor));
      state.parent = true;
      reaction.ok = isCallable$2(onFulfilled) ? onFulfilled : true;
      reaction.fail = isCallable$2(onRejected) && onRejected;
      reaction.domain = IS_NODE$1 ? process$1.domain : void 0;
      if (state.state == PENDING)
        state.reactions.add(reaction);
      else
        microtask(function() {
          callReaction(reaction, state);
        });
      return reaction.promise;
    });
    OwnPromiseCapability = function() {
      var promise2 = new Internal();
      var state = getInternalPromiseState(promise2);
      this.promise = promise2;
      this.resolve = bind$3(internalResolve, state);
      this.reject = bind$3(internalReject, state);
    };
    newPromiseCapabilityModule$6.f = newPromiseCapability$1 = function(C) {
      return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
    };
  }
  $$l({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR$4 }, {
    Promise: PromiseConstructor
  });
  setToStringTag$1(PromiseConstructor, PROMISE, false, true);
  setSpecies$1(PROMISE);
  var NativePromiseConstructor$3 = promiseNativeConstructor;
  var checkCorrectnessOfIteration = checkCorrectnessOfIteration$2;
  var FORCED_PROMISE_CONSTRUCTOR$3 = promiseConstructorDetection.CONSTRUCTOR;
  var promiseStaticsIncorrectIteration = FORCED_PROMISE_CONSTRUCTOR$3 || !checkCorrectnessOfIteration(function(iterable) {
    NativePromiseConstructor$3.all(iterable).then(void 0, function() {
    });
  });
  var $$k = _export;
  var call$4 = functionCall;
  var aCallable$6 = aCallable$e;
  var newPromiseCapabilityModule$5 = newPromiseCapability$2;
  var perform$4 = perform$6;
  var iterate$5 = iterate$7;
  var PROMISE_STATICS_INCORRECT_ITERATION$3 = promiseStaticsIncorrectIteration;
  $$k({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$3 }, {
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapabilityModule$5.f(C);
      var resolve3 = capability.resolve;
      var reject2 = capability.reject;
      var result = perform$4(function() {
        var $promiseResolve = aCallable$6(C.resolve);
        var values3 = [];
        var counter2 = 0;
        var remaining = 1;
        iterate$5(iterable, function(promise2) {
          var index = counter2++;
          var alreadyCalled = false;
          remaining++;
          call$4($promiseResolve, C, promise2).then(function(value) {
            if (alreadyCalled)
              return;
            alreadyCalled = true;
            values3[index] = value;
            --remaining || resolve3(values3);
          }, reject2);
        });
        --remaining || resolve3(values3);
      });
      if (result.error)
        reject2(result.value);
      return capability.promise;
    }
  });
  var $$j = _export;
  var FORCED_PROMISE_CONSTRUCTOR$2 = promiseConstructorDetection.CONSTRUCTOR;
  var NativePromiseConstructor$2 = promiseNativeConstructor;
  NativePromiseConstructor$2 && NativePromiseConstructor$2.prototype;
  $$j({ target: "Promise", proto: true, forced: FORCED_PROMISE_CONSTRUCTOR$2, real: true }, {
    "catch": function(onRejected) {
      return this.then(void 0, onRejected);
    }
  });
  var $$i = _export;
  var call$3 = functionCall;
  var aCallable$5 = aCallable$e;
  var newPromiseCapabilityModule$4 = newPromiseCapability$2;
  var perform$3 = perform$6;
  var iterate$4 = iterate$7;
  var PROMISE_STATICS_INCORRECT_ITERATION$2 = promiseStaticsIncorrectIteration;
  $$i({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$2 }, {
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapabilityModule$4.f(C);
      var reject2 = capability.reject;
      var result = perform$3(function() {
        var $promiseResolve = aCallable$5(C.resolve);
        iterate$4(iterable, function(promise2) {
          call$3($promiseResolve, C, promise2).then(capability.resolve, reject2);
        });
      });
      if (result.error)
        reject2(result.value);
      return capability.promise;
    }
  });
  var $$h = _export;
  var call$2 = functionCall;
  var newPromiseCapabilityModule$3 = newPromiseCapability$2;
  var FORCED_PROMISE_CONSTRUCTOR$1 = promiseConstructorDetection.CONSTRUCTOR;
  $$h({ target: "Promise", stat: true, forced: FORCED_PROMISE_CONSTRUCTOR$1 }, {
    reject: function reject(r) {
      var capability = newPromiseCapabilityModule$3.f(this);
      call$2(capability.reject, void 0, r);
      return capability.promise;
    }
  });
  var anObject$1 = anObject$d;
  var isObject$4 = isObject$j;
  var newPromiseCapability = newPromiseCapability$2;
  var promiseResolve$2 = function(C, x) {
    anObject$1(C);
    if (isObject$4(x) && x.constructor === C)
      return x;
    var promiseCapability = newPromiseCapability.f(C);
    var resolve3 = promiseCapability.resolve;
    resolve3(x);
    return promiseCapability.promise;
  };
  var $$g = _export;
  var getBuiltIn$3 = getBuiltIn$f;
  var IS_PURE = isPure;
  var NativePromiseConstructor$1 = promiseNativeConstructor;
  var FORCED_PROMISE_CONSTRUCTOR = promiseConstructorDetection.CONSTRUCTOR;
  var promiseResolve$1 = promiseResolve$2;
  var PromiseConstructorWrapper = getBuiltIn$3("Promise");
  var CHECK_WRAPPER = !FORCED_PROMISE_CONSTRUCTOR;
  $$g({ target: "Promise", stat: true, forced: IS_PURE }, {
    resolve: function resolve2(x) {
      return promiseResolve$1(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor$1 : this, x);
    }
  });
  var $$f = _export;
  var call$1 = functionCall;
  var aCallable$4 = aCallable$e;
  var newPromiseCapabilityModule$2 = newPromiseCapability$2;
  var perform$2 = perform$6;
  var iterate$3 = iterate$7;
  var PROMISE_STATICS_INCORRECT_ITERATION$1 = promiseStaticsIncorrectIteration;
  $$f({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$1 }, {
    allSettled: function allSettled(iterable) {
      var C = this;
      var capability = newPromiseCapabilityModule$2.f(C);
      var resolve3 = capability.resolve;
      var reject2 = capability.reject;
      var result = perform$2(function() {
        var promiseResolve2 = aCallable$4(C.resolve);
        var values3 = [];
        var counter2 = 0;
        var remaining = 1;
        iterate$3(iterable, function(promise2) {
          var index = counter2++;
          var alreadyCalled = false;
          remaining++;
          call$1(promiseResolve2, C, promise2).then(function(value) {
            if (alreadyCalled)
              return;
            alreadyCalled = true;
            values3[index] = { status: "fulfilled", value };
            --remaining || resolve3(values3);
          }, function(error) {
            if (alreadyCalled)
              return;
            alreadyCalled = true;
            values3[index] = { status: "rejected", reason: error };
            --remaining || resolve3(values3);
          });
        });
        --remaining || resolve3(values3);
      });
      if (result.error)
        reject2(result.value);
      return capability.promise;
    }
  });
  var $$e = _export;
  var call = functionCall;
  var aCallable$3 = aCallable$e;
  var getBuiltIn$2 = getBuiltIn$f;
  var newPromiseCapabilityModule$1 = newPromiseCapability$2;
  var perform$1 = perform$6;
  var iterate$2 = iterate$7;
  var PROMISE_STATICS_INCORRECT_ITERATION = promiseStaticsIncorrectIteration;
  var PROMISE_ANY_ERROR = "No one promise resolved";
  $$e({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
    any: function any(iterable) {
      var C = this;
      var AggregateError2 = getBuiltIn$2("AggregateError");
      var capability = newPromiseCapabilityModule$1.f(C);
      var resolve3 = capability.resolve;
      var reject2 = capability.reject;
      var result = perform$1(function() {
        var promiseResolve2 = aCallable$3(C.resolve);
        var errors = [];
        var counter2 = 0;
        var remaining = 1;
        var alreadyResolved = false;
        iterate$2(iterable, function(promise2) {
          var index = counter2++;
          var alreadyRejected = false;
          remaining++;
          call(promiseResolve2, C, promise2).then(function(value) {
            if (alreadyRejected || alreadyResolved)
              return;
            alreadyResolved = true;
            resolve3(value);
          }, function(error) {
            if (alreadyRejected || alreadyResolved)
              return;
            alreadyRejected = true;
            errors[index] = error;
            --remaining || reject2(new AggregateError2(errors, PROMISE_ANY_ERROR));
          });
        });
        --remaining || reject2(new AggregateError2(errors, PROMISE_ANY_ERROR));
      });
      if (result.error)
        reject2(result.value);
      return capability.promise;
    }
  });
  var $$d = _export;
  var NativePromiseConstructor = promiseNativeConstructor;
  var fails$7 = fails$x;
  var getBuiltIn$1 = getBuiltIn$f;
  var isCallable$1 = isCallable$m;
  var speciesConstructor = speciesConstructor$2;
  var promiseResolve = promiseResolve$2;
  var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
  var NON_GENERIC = !!NativePromiseConstructor && fails$7(function() {
    NativePromisePrototype["finally"].call({ then: function() {
    } }, function() {
    });
  });
  $$d({ target: "Promise", proto: true, real: true, forced: NON_GENERIC }, {
    "finally": function(onFinally) {
      var C = speciesConstructor(this, getBuiltIn$1("Promise"));
      var isFunction = isCallable$1(onFinally);
      return this.then(
        isFunction ? function(x) {
          return promiseResolve(C, onFinally()).then(function() {
            return x;
          });
        } : onFinally,
        isFunction ? function(e) {
          return promiseResolve(C, onFinally()).then(function() {
            throw e;
          });
        } : onFinally
      );
    }
  });
  var path$5 = path$t;
  var promise$3 = path$5.Promise;
  var parent$m = promise$3;
  var promise$2 = parent$m;
  var parent$l = promise$2;
  var promise$1 = parent$l;
  var $$c = _export;
  var newPromiseCapabilityModule = newPromiseCapability$2;
  var perform = perform$6;
  $$c({ target: "Promise", stat: true, forced: true }, {
    "try": function(callbackfn) {
      var promiseCapability = newPromiseCapabilityModule.f(this);
      var result = perform(callbackfn);
      (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
      return promiseCapability.promise;
    }
  });
  var parent$k = promise$1;
  var promise = parent$k;
  (function(module) {
    module.exports = promise;
  })(promise$5);
  (function(module) {
    module.exports = promiseExports;
  })(promise$6);
  var reverseExports$1 = {};
  var reverse$3 = {
    get exports() {
      return reverseExports$1;
    },
    set exports(v) {
      reverseExports$1 = v;
    }
  };
  var reverseExports = {};
  var reverse$2 = {
    get exports() {
      return reverseExports;
    },
    set exports(v) {
      reverseExports = v;
    }
  };
  var parent$j = reverse$4;
  var reverse$1 = parent$j;
  var parent$i = reverse$1;
  var reverse2 = parent$i;
  (function(module) {
    module.exports = reverse2;
  })(reverse$2);
  (function(module) {
    module.exports = reverseExports;
  })(reverse$3);
  (function(module) {
    var _typeof2 = _typeofExports["default"];
    var _Object$defineProperty2 = definePropertyExports$1;
    var _Symbol2 = symbolExports$2;
    var _Object$create2 = createExports$1;
    var _Object$getPrototypeOf2 = getPrototypeOfExports$1;
    var _forEachInstanceProperty2 = forEachExports$1;
    var _Object$setPrototypeOf2 = setPrototypeOfExports$1;
    var _Promise = promiseExports$1;
    var _reverseInstanceProperty2 = reverseExports$1;
    var _sliceInstanceProperty2 = sliceExports$2;
    function _regeneratorRuntime() {
      module.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
        return exports;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var exports = {}, Op = Object.prototype, hasOwn3 = Op.hasOwnProperty, defineProperty6 = _Object$defineProperty2 || function(obj, key, desc) {
        obj[key] = desc.value;
      }, $Symbol2 = "function" == typeof _Symbol2 ? _Symbol2 : {}, iteratorSymbol = $Symbol2.iterator || "@@iterator", asyncIteratorSymbol = $Symbol2.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol2.toStringTag || "@@toStringTag";
      function define(obj, key, value) {
        return _Object$defineProperty2(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        }), obj[key];
      }
      try {
        define({}, "");
      } catch (err) {
        define = function define2(obj, key, value) {
          return obj[key] = value;
        };
      }
      function wrap2(innerFn, outerFn, self2, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = _Object$create2(protoGenerator.prototype), context = new Context(tryLocsList || []);
        return defineProperty6(generator, "_invoke", {
          value: makeInvokeMethod(innerFn, self2, context)
        }), generator;
      }
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      exports.wrap = wrap2;
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype2 = {};
      define(IteratorPrototype2, iteratorSymbol, function() {
        return this;
      });
      var getProto = _Object$getPrototypeOf2, NativeIteratorPrototype = getProto && getProto(getProto(values3([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn3.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype2 = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = _Object$create2(IteratorPrototype2);
      function defineIteratorMethods(prototype) {
        var _context;
        _forEachInstanceProperty2(_context = ["next", "throw", "return"]).call(_context, function(method2) {
          define(prototype, method2, function(arg) {
            return this._invoke(method2, arg);
          });
        });
      }
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method2, arg, resolve3, reject2) {
          var record = tryCatch(generator[method2], generator, arg);
          if ("throw" !== record.type) {
            var result = record.arg, value = result.value;
            return value && "object" == _typeof2(value) && hasOwn3.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
              invoke("next", value2, resolve3, reject2);
            }, function(err) {
              invoke("throw", err, resolve3, reject2);
            }) : PromiseImpl.resolve(value).then(function(unwrapped) {
              result.value = unwrapped, resolve3(result);
            }, function(error) {
              return invoke("throw", error, resolve3, reject2);
            });
          }
          reject2(record.arg);
        }
        var previousPromise;
        defineProperty6(this, "_invoke", {
          value: function value(method2, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve3, reject2) {
                invoke(method2, arg, resolve3, reject2);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(innerFn, self2, context) {
        var state = "suspendedStart";
        return function(method2, arg) {
          if ("executing" === state)
            throw new Error("Generator is already running");
          if ("completed" === state) {
            if ("throw" === method2)
              throw arg;
            return doneResult();
          }
          for (context.method = method2, context.arg = arg; ; ) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel)
                  continue;
                return delegateResult;
              }
            }
            if ("next" === context.method)
              context.sent = context._sent = context.arg;
            else if ("throw" === context.method) {
              if ("suspendedStart" === state)
                throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else
              "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self2, context);
            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                continue;
              return {
                value: record.arg,
                done: context.done
              };
            }
            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method, method2 = delegate.iterator[methodName];
        if (void 0 === method2)
          return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
        var record = tryCatch(method2, delegate.iterator, context.arg);
        if ("throw" === record.type)
          return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }
      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], _forEachInstanceProperty2(tryLocsList).call(tryLocsList, pushTryEntry, this), this.reset(true);
      }
      function values3(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod)
            return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next)
            return iterable;
          if (!isNaN(iterable.length)) {
            var i2 = -1, next2 = function next3() {
              for (; ++i2 < iterable.length; )
                if (hasOwn3.call(iterable, i2))
                  return next3.value = iterable[i2], next3.done = false, next3;
              return next3.value = void 0, next3.done = true, next3;
            };
            return next2.next = next2;
          }
        }
        return {
          next: doneResult
        };
      }
      function doneResult() {
        return {
          value: void 0,
          done: true
        };
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty6(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), defineProperty6(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function(genFun) {
        return _Object$setPrototypeOf2 ? _Object$setPrototypeOf2(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = _Object$create2(Gp), genFun;
      }, exports.awrap = function(arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = _Promise);
        var iter = new AsyncIterator(wrap2(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
      }), define(Gp, "toString", function() {
        return "[object Generator]";
      }), exports.keys = function(val) {
        var object2 = Object(val), keys4 = [];
        for (var key in object2)
          keys4.push(key);
        return _reverseInstanceProperty2(keys4).call(keys4), function next2() {
          for (; keys4.length; ) {
            var key2 = keys4.pop();
            if (key2 in object2)
              return next2.value = key2, next2.done = false, next2;
          }
          return next2.done = true, next2;
        };
      }, exports.values = values3, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          var _context2;
          if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, _forEachInstanceProperty2(_context2 = this.tryEntries).call(_context2, resetTryEntry), !skipTempReset)
            for (var name in this)
              "t" === name.charAt(0) && hasOwn3.call(this, name) && !isNaN(+_sliceInstanceProperty2(name).call(name, 1)) && (this[name] = void 0);
        },
        stop: function stop() {
          this.done = true;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type)
            throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done)
            throw exception;
          var context = this;
          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
          }
          for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
            var entry = this.tryEntries[i2], record = entry.completion;
            if ("root" === entry.tryLoc)
              return handle("end");
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn3.call(entry, "catchLoc"), hasFinally = hasOwn3.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
              } else {
                if (!hasFinally)
                  throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
            var entry = this.tryEntries[i2];
            if (entry.tryLoc <= this.prev && hasOwn3.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type)
            throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
            var entry = this.tryEntries[i2];
            if (entry.finallyLoc === finallyLoc)
              return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
            var entry = this.tryEntries[i2];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values3(iterable),
            resultName,
            nextLoc
          }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
        }
      }, exports;
    }
    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorRuntime$1);
  var runtime = regeneratorRuntimeExports();
  var regenerator = runtime;
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  var reduceExports = {};
  var reduce$3 = {
    get exports() {
      return reduceExports;
    },
    set exports(v) {
      reduceExports = v;
    }
  };
  var aCallable$2 = aCallable$e;
  var toObject$2 = toObject$e;
  var IndexedObject = indexedObject;
  var lengthOfArrayLike$3 = lengthOfArrayLike$d;
  var $TypeError = TypeError;
  var createMethod = function(IS_RIGHT) {
    return function(that, callbackfn, argumentsLength, memo) {
      aCallable$2(callbackfn);
      var O = toObject$2(that);
      var self2 = IndexedObject(O);
      var length = lengthOfArrayLike$3(O);
      var index = IS_RIGHT ? length - 1 : 0;
      var i2 = IS_RIGHT ? -1 : 1;
      if (argumentsLength < 2)
        while (true) {
          if (index in self2) {
            memo = self2[index];
            index += i2;
            break;
          }
          index += i2;
          if (IS_RIGHT ? index < 0 : length <= index) {
            throw $TypeError("Reduce of empty array with no initial value");
          }
        }
      for (; IS_RIGHT ? index >= 0 : length > index; index += i2)
        if (index in self2) {
          memo = callbackfn(memo, self2[index], index, O);
        }
      return memo;
    };
  };
  var arrayReduce = {
    // `Array.prototype.reduce` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduce
    left: createMethod(false),
    // `Array.prototype.reduceRight` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduceright
    right: createMethod(true)
  };
  var $$b = _export;
  var $reduce = arrayReduce.left;
  var arrayMethodIsStrict$3 = arrayMethodIsStrict$6;
  var CHROME_VERSION = engineV8Version;
  var IS_NODE = engineIsNode;
  var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
  var FORCED$3 = CHROME_BUG || !arrayMethodIsStrict$3("reduce");
  $$b({ target: "Array", proto: true, forced: FORCED$3 }, {
    reduce: function reduce(callbackfn) {
      var length = arguments.length;
      return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
    }
  });
  var entryVirtual$a = entryVirtual$o;
  var reduce$2 = entryVirtual$a("Array").reduce;
  var isPrototypeOf$a = objectIsPrototypeOf;
  var method$a = reduce$2;
  var ArrayPrototype$9 = Array.prototype;
  var reduce$1 = function(it2) {
    var own = it2.reduce;
    return it2 === ArrayPrototype$9 || isPrototypeOf$a(ArrayPrototype$9, it2) && own === ArrayPrototype$9.reduce ? method$a : own;
  };
  var parent$h = reduce$1;
  var reduce2 = parent$h;
  (function(module) {
    module.exports = reduce2;
  })(reduce$3);
  var _reduceInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(reduceExports);
  var flatMapExports = {};
  var flatMap$3 = {
    get exports() {
      return flatMapExports;
    },
    set exports(v) {
      flatMapExports = v;
    }
  };
  var isArray2 = isArray$f;
  var lengthOfArrayLike$2 = lengthOfArrayLike$d;
  var doesNotExceedSafeInteger = doesNotExceedSafeInteger$3;
  var bind$2 = functionBindContext;
  var flattenIntoArray$1 = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
    var targetIndex = start;
    var sourceIndex = 0;
    var mapFn = mapper ? bind$2(mapper, thisArg) : false;
    var element, elementLen;
    while (sourceIndex < sourceLen) {
      if (sourceIndex in source) {
        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
        if (depth > 0 && isArray2(element)) {
          elementLen = lengthOfArrayLike$2(element);
          targetIndex = flattenIntoArray$1(target, original, element, elementLen, targetIndex, depth - 1) - 1;
        } else {
          doesNotExceedSafeInteger(targetIndex + 1);
          target[targetIndex] = element;
        }
        targetIndex++;
      }
      sourceIndex++;
    }
    return targetIndex;
  };
  var flattenIntoArray_1 = flattenIntoArray$1;
  var $$a = _export;
  var flattenIntoArray = flattenIntoArray_1;
  var aCallable$1 = aCallable$e;
  var toObject$1 = toObject$e;
  var lengthOfArrayLike$1 = lengthOfArrayLike$d;
  var arraySpeciesCreate = arraySpeciesCreate$4;
  $$a({ target: "Array", proto: true }, {
    flatMap: function flatMap(callbackfn) {
      var O = toObject$1(this);
      var sourceLen = lengthOfArrayLike$1(O);
      var A;
      aCallable$1(callbackfn);
      A = arraySpeciesCreate(O, 0);
      A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      return A;
    }
  });
  var entryVirtual$9 = entryVirtual$o;
  var flatMap$2 = entryVirtual$9("Array").flatMap;
  var isPrototypeOf$9 = objectIsPrototypeOf;
  var method$9 = flatMap$2;
  var ArrayPrototype$8 = Array.prototype;
  var flatMap$1 = function(it2) {
    var own = it2.flatMap;
    return it2 === ArrayPrototype$8 || isPrototypeOf$9(ArrayPrototype$8, it2) && own === ArrayPrototype$8.flatMap ? method$9 : own;
  };
  var parent$g = flatMap$1;
  var flatMap2 = parent$g;
  (function(module) {
    module.exports = flatMap2;
  })(flatMap$3);
  var _flatMapInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(flatMapExports);
  var mapExports = {};
  var map$2 = {
    get exports() {
      return mapExports;
    },
    set exports(v) {
      mapExports = v;
    }
  };
  var internalMetadataExports = {};
  var internalMetadata = {
    get exports() {
      return internalMetadataExports;
    },
    set exports(v) {
      internalMetadataExports = v;
    }
  };
  var fails$6 = fails$x;
  var arrayBufferNonExtensible = fails$6(function() {
    if (typeof ArrayBuffer == "function") {
      var buffer = new ArrayBuffer(8);
      if (Object.isExtensible(buffer))
        Object.defineProperty(buffer, "a", { value: 8 });
    }
  });
  var fails$5 = fails$x;
  var isObject$3 = isObject$j;
  var classof$3 = classofRaw$2;
  var ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible;
  var $isExtensible = Object.isExtensible;
  var FAILS_ON_PRIMITIVES = fails$5(function() {
    $isExtensible(1);
  });
  var objectIsExtensible = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it2) {
    if (!isObject$3(it2))
      return false;
    if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$3(it2) == "ArrayBuffer")
      return false;
    return $isExtensible ? $isExtensible(it2) : true;
  } : $isExtensible;
  var fails$4 = fails$x;
  var freezing = !fails$4(function() {
    return Object.isExtensible(Object.preventExtensions({}));
  });
  var $$9 = _export;
  var uncurryThis$2 = functionUncurryThis;
  var hiddenKeys = hiddenKeys$6;
  var isObject$2 = isObject$j;
  var hasOwn$3 = hasOwnProperty_1;
  var defineProperty$1 = objectDefineProperty.f;
  var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
  var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
  var isExtensible2 = objectIsExtensible;
  var uid = uid$4;
  var FREEZING = freezing;
  var REQUIRED = false;
  var METADATA = uid("meta");
  var id = 0;
  var setMetadata = function(it2) {
    defineProperty$1(it2, METADATA, { value: {
      objectID: "O" + id++,
      // object ID
      weakData: {}
      // weak collections IDs
    } });
  };
  var fastKey$1 = function(it2, create5) {
    if (!isObject$2(it2))
      return typeof it2 == "symbol" ? it2 : (typeof it2 == "string" ? "S" : "P") + it2;
    if (!hasOwn$3(it2, METADATA)) {
      if (!isExtensible2(it2))
        return "F";
      if (!create5)
        return "E";
      setMetadata(it2);
    }
    return it2[METADATA].objectID;
  };
  var getWeakData = function(it2, create5) {
    if (!hasOwn$3(it2, METADATA)) {
      if (!isExtensible2(it2))
        return true;
      if (!create5)
        return false;
      setMetadata(it2);
    }
    return it2[METADATA].weakData;
  };
  var onFreeze = function(it2) {
    if (FREEZING && REQUIRED && isExtensible2(it2) && !hasOwn$3(it2, METADATA))
      setMetadata(it2);
    return it2;
  };
  var enable = function() {
    meta.enable = function() {
    };
    REQUIRED = true;
    var getOwnPropertyNames5 = getOwnPropertyNamesModule.f;
    var splice3 = uncurryThis$2([].splice);
    var test2 = {};
    test2[METADATA] = 1;
    if (getOwnPropertyNames5(test2).length) {
      getOwnPropertyNamesModule.f = function(it2) {
        var result = getOwnPropertyNames5(it2);
        for (var i2 = 0, length = result.length; i2 < length; i2++) {
          if (result[i2] === METADATA) {
            splice3(result, i2, 1);
            break;
          }
        }
        return result;
      };
      $$9({ target: "Object", stat: true, forced: true }, {
        getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
      });
    }
  };
  var meta = internalMetadata.exports = {
    enable,
    fastKey: fastKey$1,
    getWeakData,
    onFreeze
  };
  hiddenKeys[METADATA] = true;
  var $$8 = _export;
  var global$2 = global$o;
  var InternalMetadataModule = internalMetadataExports;
  var fails$3 = fails$x;
  var createNonEnumerableProperty = createNonEnumerableProperty$9;
  var iterate$1 = iterate$7;
  var anInstance$1 = anInstance$3;
  var isCallable = isCallable$m;
  var isObject$1 = isObject$j;
  var setToStringTag = setToStringTag$7;
  var defineProperty5 = objectDefineProperty.f;
  var forEach2 = arrayIteration.forEach;
  var DESCRIPTORS$1 = descriptors;
  var InternalStateModule$1 = internalState;
  var setInternalState$1 = InternalStateModule$1.set;
  var internalStateGetterFor$1 = InternalStateModule$1.getterFor;
  var collection$2 = function(CONSTRUCTOR_NAME, wrapper, common) {
    var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
    var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
    var ADDER = IS_MAP ? "set" : "add";
    var NativeConstructor = global$2[CONSTRUCTOR_NAME];
    var NativePrototype = NativeConstructor && NativeConstructor.prototype;
    var exported = {};
    var Constructor;
    if (!DESCRIPTORS$1 || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$3(function() {
      new NativeConstructor().entries().next();
    }))) {
      Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
      InternalMetadataModule.enable();
    } else {
      Constructor = wrapper(function(target, iterable) {
        setInternalState$1(anInstance$1(target, Prototype), {
          type: CONSTRUCTOR_NAME,
          collection: new NativeConstructor()
        });
        if (iterable != void 0)
          iterate$1(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
      });
      var Prototype = Constructor.prototype;
      var getInternalState2 = internalStateGetterFor$1(CONSTRUCTOR_NAME);
      forEach2(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
        var IS_ADDER = KEY == "add" || KEY == "set";
        if (KEY in NativePrototype && !(IS_WEAK && KEY == "clear")) {
          createNonEnumerableProperty(Prototype, KEY, function(a, b) {
            var collection2 = getInternalState2(this).collection;
            if (!IS_ADDER && IS_WEAK && !isObject$1(a))
              return KEY == "get" ? void 0 : false;
            var result = collection2[KEY](a === 0 ? 0 : a, b);
            return IS_ADDER ? this : result;
          });
        }
      });
      IS_WEAK || defineProperty5(Prototype, "size", {
        configurable: true,
        get: function() {
          return getInternalState2(this).collection.size;
        }
      });
    }
    setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
    exported[CONSTRUCTOR_NAME] = Constructor;
    $$8({ global: true, forced: true }, exported);
    if (!IS_WEAK)
      common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
    return Constructor;
  };
  var defineBuiltIn = defineBuiltIn$6;
  var defineBuiltIns$1 = function(target, src, options) {
    for (var key in src) {
      if (options && options.unsafe && target[key])
        target[key] = src[key];
      else
        defineBuiltIn(target, key, src[key], options);
    }
    return target;
  };
  var create$1 = objectCreate;
  var defineBuiltInAccessor = defineBuiltInAccessor$3;
  var defineBuiltIns = defineBuiltIns$1;
  var bind$1 = functionBindContext;
  var anInstance = anInstance$3;
  var isNullOrUndefined = isNullOrUndefined$5;
  var iterate = iterate$7;
  var defineIterator = iteratorDefine;
  var createIterResultObject = createIterResultObject$3;
  var setSpecies = setSpecies$2;
  var DESCRIPTORS = descriptors;
  var fastKey = internalMetadataExports.fastKey;
  var InternalStateModule = internalState;
  var setInternalState = InternalStateModule.set;
  var internalStateGetterFor = InternalStateModule.getterFor;
  var collectionStrong$2 = {
    getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
      var Constructor = wrapper(function(that, iterable) {
        anInstance(that, Prototype);
        setInternalState(that, {
          type: CONSTRUCTOR_NAME,
          index: create$1(null),
          first: void 0,
          last: void 0,
          size: 0
        });
        if (!DESCRIPTORS)
          that.size = 0;
        if (!isNullOrUndefined(iterable))
          iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
      });
      var Prototype = Constructor.prototype;
      var getInternalState2 = internalStateGetterFor(CONSTRUCTOR_NAME);
      var define = function(that, key, value) {
        var state = getInternalState2(that);
        var entry = getEntry(that, key);
        var previous, index;
        if (entry) {
          entry.value = value;
        } else {
          state.last = entry = {
            index: index = fastKey(key, true),
            key,
            value,
            previous: previous = state.last,
            next: void 0,
            removed: false
          };
          if (!state.first)
            state.first = entry;
          if (previous)
            previous.next = entry;
          if (DESCRIPTORS)
            state.size++;
          else
            that.size++;
          if (index !== "F")
            state.index[index] = entry;
        }
        return that;
      };
      var getEntry = function(that, key) {
        var state = getInternalState2(that);
        var index = fastKey(key);
        var entry;
        if (index !== "F")
          return state.index[index];
        for (entry = state.first; entry; entry = entry.next) {
          if (entry.key == key)
            return entry;
        }
      };
      defineBuiltIns(Prototype, {
        // `{ Map, Set }.prototype.clear()` methods
        // https://tc39.es/ecma262/#sec-map.prototype.clear
        // https://tc39.es/ecma262/#sec-set.prototype.clear
        clear: function clear2() {
          var that = this;
          var state = getInternalState2(that);
          var data2 = state.index;
          var entry = state.first;
          while (entry) {
            entry.removed = true;
            if (entry.previous)
              entry.previous = entry.previous.next = void 0;
            delete data2[entry.index];
            entry = entry.next;
          }
          state.first = state.last = void 0;
          if (DESCRIPTORS)
            state.size = 0;
          else
            that.size = 0;
        },
        // `{ Map, Set }.prototype.delete(key)` methods
        // https://tc39.es/ecma262/#sec-map.prototype.delete
        // https://tc39.es/ecma262/#sec-set.prototype.delete
        "delete": function(key) {
          var that = this;
          var state = getInternalState2(that);
          var entry = getEntry(that, key);
          if (entry) {
            var next2 = entry.next;
            var prev = entry.previous;
            delete state.index[entry.index];
            entry.removed = true;
            if (prev)
              prev.next = next2;
            if (next2)
              next2.previous = prev;
            if (state.first == entry)
              state.first = next2;
            if (state.last == entry)
              state.last = prev;
            if (DESCRIPTORS)
              state.size--;
            else
              that.size--;
          }
          return !!entry;
        },
        // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
        // https://tc39.es/ecma262/#sec-map.prototype.foreach
        // https://tc39.es/ecma262/#sec-set.prototype.foreach
        forEach: function forEach3(callbackfn) {
          var state = getInternalState2(this);
          var boundFunction = bind$1(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          var entry;
          while (entry = entry ? entry.next : state.first) {
            boundFunction(entry.value, entry.key, this);
            while (entry && entry.removed)
              entry = entry.previous;
          }
        },
        // `{ Map, Set}.prototype.has(key)` methods
        // https://tc39.es/ecma262/#sec-map.prototype.has
        // https://tc39.es/ecma262/#sec-set.prototype.has
        has: function has2(key) {
          return !!getEntry(this, key);
        }
      });
      defineBuiltIns(Prototype, IS_MAP ? {
        // `Map.prototype.get(key)` method
        // https://tc39.es/ecma262/#sec-map.prototype.get
        get: function get3(key) {
          var entry = getEntry(this, key);
          return entry && entry.value;
        },
        // `Map.prototype.set(key, value)` method
        // https://tc39.es/ecma262/#sec-map.prototype.set
        set: function set2(key, value) {
          return define(this, key === 0 ? 0 : key, value);
        }
      } : {
        // `Set.prototype.add(value)` method
        // https://tc39.es/ecma262/#sec-set.prototype.add
        add: function add(value) {
          return define(this, value = value === 0 ? 0 : value, value);
        }
      });
      if (DESCRIPTORS)
        defineBuiltInAccessor(Prototype, "size", {
          configurable: true,
          get: function() {
            return getInternalState2(this).size;
          }
        });
      return Constructor;
    },
    setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
      var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
      var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
      var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
      defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
        setInternalState(this, {
          type: ITERATOR_NAME,
          target: iterated,
          state: getInternalCollectionState(iterated),
          kind,
          last: void 0
        });
      }, function() {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var entry = state.last;
        while (entry && entry.removed)
          entry = entry.previous;
        if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
          state.target = void 0;
          return createIterResultObject(void 0, true);
        }
        if (kind == "keys")
          return createIterResultObject(entry.key, false);
        if (kind == "values")
          return createIterResultObject(entry.value, false);
        return createIterResultObject([entry.key, entry.value], false);
      }, IS_MAP ? "entries" : "values", !IS_MAP, true);
      setSpecies(CONSTRUCTOR_NAME);
    }
  };
  var collection$1 = collection$2;
  var collectionStrong$1 = collectionStrong$2;
  collection$1("Map", function(init) {
    return function Map2() {
      return init(this, arguments.length ? arguments[0] : void 0);
    };
  }, collectionStrong$1);
  var path$4 = path$t;
  var map$1 = path$4.Map;
  var parent$f = map$1;
  var map2 = parent$f;
  (function(module) {
    module.exports = map2;
  })(map$2);
  var _Map = /* @__PURE__ */ getDefaultExportFromCjs(mapExports);
  var setExports = {};
  var set$2 = {
    get exports() {
      return setExports;
    },
    set exports(v) {
      setExports = v;
    }
  };
  var collection = collection$2;
  var collectionStrong = collectionStrong$2;
  collection("Set", function(init) {
    return function Set2() {
      return init(this, arguments.length ? arguments[0] : void 0);
    };
  }, collectionStrong);
  var path$3 = path$t;
  var set$1 = path$3.Set;
  var parent$e = set$1;
  var set = parent$e;
  (function(module) {
    module.exports = set;
  })(set$2);
  var _Set = /* @__PURE__ */ getDefaultExportFromCjs(setExports);
  var iteratorExports = {};
  var iterator = {
    get exports() {
      return iteratorExports;
    },
    set exports(v) {
      iteratorExports = v;
    }
  };
  (function(module) {
    module.exports = iterator$3;
  })(iterator);
  var _Symbol$iterator2 = /* @__PURE__ */ getDefaultExportFromCjs(iteratorExports);
  var getIteratorExports$1 = {};
  var getIterator$5 = {
    get exports() {
      return getIteratorExports$1;
    },
    set exports(v) {
      getIteratorExports$1 = v;
    }
  };
  var getIteratorExports = {};
  var getIterator$4 = {
    get exports() {
      return getIteratorExports;
    },
    set exports(v) {
      getIteratorExports = v;
    }
  };
  var getIterator$3 = getIterator$8;
  var getIterator_1 = getIterator$3;
  var parent$d = getIterator_1;
  var getIterator$2 = parent$d;
  var parent$c = getIterator$2;
  var getIterator$1 = parent$c;
  var parent$b = getIterator$1;
  var getIterator = parent$b;
  (function(module) {
    module.exports = getIterator;
  })(getIterator$4);
  (function(module) {
    module.exports = getIteratorExports;
  })(getIterator$5);
  var _getIterator = /* @__PURE__ */ getDefaultExportFromCjs(getIteratorExports$1);
  var sortExports = {};
  var sort$3 = {
    get exports() {
      return sortExports;
    },
    set exports(v) {
      sortExports = v;
    }
  };
  var arraySlice = arraySliceSimple;
  var floor = Math.floor;
  var mergeSort = function(array2, comparefn) {
    var length = array2.length;
    var middle = floor(length / 2);
    return length < 8 ? insertionSort(array2, comparefn) : merge(
      array2,
      mergeSort(arraySlice(array2, 0, middle), comparefn),
      mergeSort(arraySlice(array2, middle), comparefn),
      comparefn
    );
  };
  var insertionSort = function(array2, comparefn) {
    var length = array2.length;
    var i2 = 1;
    var element, j;
    while (i2 < length) {
      j = i2;
      element = array2[i2];
      while (j && comparefn(array2[j - 1], element) > 0) {
        array2[j] = array2[--j];
      }
      if (j !== i2++)
        array2[j] = element;
    }
    return array2;
  };
  var merge = function(array2, left, right, comparefn) {
    var llength = left.length;
    var rlength = right.length;
    var lindex = 0;
    var rindex = 0;
    while (lindex < llength || rindex < rlength) {
      array2[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
    }
    return array2;
  };
  var arraySort = mergeSort;
  var userAgent$1 = engineUserAgent;
  var firefox = userAgent$1.match(/firefox\/(\d+)/i);
  var engineFfVersion = !!firefox && +firefox[1];
  var UA = engineUserAgent;
  var engineIsIeOrEdge = /MSIE|Trident/.test(UA);
  var userAgent = engineUserAgent;
  var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
  var engineWebkitVersion = !!webkit && +webkit[1];
  var $$7 = _export;
  var uncurryThis$1 = functionUncurryThis;
  var aCallable = aCallable$e;
  var toObject = toObject$e;
  var lengthOfArrayLike = lengthOfArrayLike$d;
  var deletePropertyOrThrow = deletePropertyOrThrow$2;
  var toString$2 = toString$c;
  var fails$2 = fails$x;
  var internalSort = arraySort;
  var arrayMethodIsStrict$2 = arrayMethodIsStrict$6;
  var FF = engineFfVersion;
  var IE_OR_EDGE = engineIsIeOrEdge;
  var V8 = engineV8Version;
  var WEBKIT = engineWebkitVersion;
  var test = [];
  var nativeSort = uncurryThis$1(test.sort);
  var push$1 = uncurryThis$1(test.push);
  var FAILS_ON_UNDEFINED = fails$2(function() {
    test.sort(void 0);
  });
  var FAILS_ON_NULL = fails$2(function() {
    test.sort(null);
  });
  var STRICT_METHOD$2 = arrayMethodIsStrict$2("sort");
  var STABLE_SORT = !fails$2(function() {
    if (V8)
      return V8 < 70;
    if (FF && FF > 3)
      return;
    if (IE_OR_EDGE)
      return true;
    if (WEBKIT)
      return WEBKIT < 603;
    var result = "";
    var code, chr, value, index;
    for (code = 65; code < 76; code++) {
      chr = String.fromCharCode(code);
      switch (code) {
        case 66:
        case 69:
        case 70:
        case 72:
          value = 3;
          break;
        case 68:
        case 71:
          value = 4;
          break;
        default:
          value = 2;
      }
      for (index = 0; index < 47; index++) {
        test.push({ k: chr + index, v: value });
      }
    }
    test.sort(function(a, b) {
      return b.v - a.v;
    });
    for (index = 0; index < test.length; index++) {
      chr = test[index].k.charAt(0);
      if (result.charAt(result.length - 1) !== chr)
        result += chr;
    }
    return result !== "DGBEFHACIJK";
  });
  var FORCED$2 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$2 || !STABLE_SORT;
  var getSortCompare = function(comparefn) {
    return function(x, y) {
      if (y === void 0)
        return -1;
      if (x === void 0)
        return 1;
      if (comparefn !== void 0)
        return +comparefn(x, y) || 0;
      return toString$2(x) > toString$2(y) ? 1 : -1;
    };
  };
  $$7({ target: "Array", proto: true, forced: FORCED$2 }, {
    sort: function sort(comparefn) {
      if (comparefn !== void 0)
        aCallable(comparefn);
      var array2 = toObject(this);
      if (STABLE_SORT)
        return comparefn === void 0 ? nativeSort(array2) : nativeSort(array2, comparefn);
      var items = [];
      var arrayLength = lengthOfArrayLike(array2);
      var itemsLength, index;
      for (index = 0; index < arrayLength; index++) {
        if (index in array2)
          push$1(items, array2[index]);
      }
      internalSort(items, getSortCompare(comparefn));
      itemsLength = lengthOfArrayLike(items);
      index = 0;
      while (index < itemsLength)
        array2[index] = items[index++];
      while (index < arrayLength)
        deletePropertyOrThrow(array2, index++);
      return array2;
    }
  });
  var entryVirtual$8 = entryVirtual$o;
  var sort$2 = entryVirtual$8("Array").sort;
  var isPrototypeOf$8 = objectIsPrototypeOf;
  var method$8 = sort$2;
  var ArrayPrototype$7 = Array.prototype;
  var sort$1 = function(it2) {
    var own = it2.sort;
    return it2 === ArrayPrototype$7 || isPrototypeOf$8(ArrayPrototype$7, it2) && own === ArrayPrototype$7.sort ? method$8 : own;
  };
  var parent$a = sort$1;
  var sort2 = parent$a;
  (function(module) {
    module.exports = sort2;
  })(sort$3);
  var _sortInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(sortExports);
  var someExports = {};
  var some$3 = {
    get exports() {
      return someExports;
    },
    set exports(v) {
      someExports = v;
    }
  };
  var $$6 = _export;
  var $some = arrayIteration.some;
  var arrayMethodIsStrict$1 = arrayMethodIsStrict$6;
  var STRICT_METHOD$1 = arrayMethodIsStrict$1("some");
  $$6({ target: "Array", proto: true, forced: !STRICT_METHOD$1 }, {
    some: function some(callbackfn) {
      return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var entryVirtual$7 = entryVirtual$o;
  var some$2 = entryVirtual$7("Array").some;
  var isPrototypeOf$7 = objectIsPrototypeOf;
  var method$7 = some$2;
  var ArrayPrototype$6 = Array.prototype;
  var some$1 = function(it2) {
    var own = it2.some;
    return it2 === ArrayPrototype$6 || isPrototypeOf$7(ArrayPrototype$6, it2) && own === ArrayPrototype$6.some ? method$7 : own;
  };
  var parent$9 = some$1;
  var some2 = parent$9;
  (function(module) {
    module.exports = some2;
  })(some$3);
  var _someInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(someExports);
  var keysExports = {};
  var keys$3 = {
    get exports() {
      return keysExports;
    },
    set exports(v) {
      keysExports = v;
    }
  };
  var entryVirtual$6 = entryVirtual$o;
  var keys$2 = entryVirtual$6("Array").keys;
  var parent$8 = keys$2;
  var keys$1 = parent$8;
  var classof$2 = classof$g;
  var hasOwn$2 = hasOwnProperty_1;
  var isPrototypeOf$6 = objectIsPrototypeOf;
  var method$6 = keys$1;
  var ArrayPrototype$5 = Array.prototype;
  var DOMIterables$2 = {
    DOMTokenList: true,
    NodeList: true
  };
  var keys3 = function(it2) {
    var own = it2.keys;
    return it2 === ArrayPrototype$5 || isPrototypeOf$6(ArrayPrototype$5, it2) && own === ArrayPrototype$5.keys || hasOwn$2(DOMIterables$2, classof$2(it2)) ? method$6 : own;
  };
  (function(module) {
    module.exports = keys3;
  })(keys$3);
  var _keysInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(keysExports);
  var valuesExports = {};
  var values$3 = {
    get exports() {
      return valuesExports;
    },
    set exports(v) {
      valuesExports = v;
    }
  };
  var entryVirtual$5 = entryVirtual$o;
  var values$2 = entryVirtual$5("Array").values;
  var parent$7 = values$2;
  var values$1 = parent$7;
  var classof$1 = classof$g;
  var hasOwn$1 = hasOwnProperty_1;
  var isPrototypeOf$5 = objectIsPrototypeOf;
  var method$5 = values$1;
  var ArrayPrototype$4 = Array.prototype;
  var DOMIterables$1 = {
    DOMTokenList: true,
    NodeList: true
  };
  var values2 = function(it2) {
    var own = it2.values;
    return it2 === ArrayPrototype$4 || isPrototypeOf$5(ArrayPrototype$4, it2) && own === ArrayPrototype$4.values || hasOwn$1(DOMIterables$1, classof$1(it2)) ? method$5 : own;
  };
  (function(module) {
    module.exports = values2;
  })(values$3);
  var _valuesInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(valuesExports);
  var entriesExports = {};
  var entries$3 = {
    get exports() {
      return entriesExports;
    },
    set exports(v) {
      entriesExports = v;
    }
  };
  var entryVirtual$4 = entryVirtual$o;
  var entries$2 = entryVirtual$4("Array").entries;
  var parent$6 = entries$2;
  var entries$1 = parent$6;
  var classof = classof$g;
  var hasOwn2 = hasOwnProperty_1;
  var isPrototypeOf$4 = objectIsPrototypeOf;
  var method$4 = entries$1;
  var ArrayPrototype$3 = Array.prototype;
  var DOMIterables = {
    DOMTokenList: true,
    NodeList: true
  };
  var entries = function(it2) {
    var own = it2.entries;
    return it2 === ArrayPrototype$3 || isPrototypeOf$4(ArrayPrototype$3, it2) && own === ArrayPrototype$3.entries || hasOwn2(DOMIterables, classof(it2)) ? method$4 : own;
  };
  (function(module) {
    module.exports = entries;
  })(entries$3);
  var _entriesInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(entriesExports);
  var constructExports = {};
  var construct$2 = {
    get exports() {
      return constructExports;
    },
    set exports(v) {
      constructExports = v;
    }
  };
  var $$5 = _export;
  var getBuiltIn = getBuiltIn$f;
  var apply = functionApply;
  var bind2 = functionBind;
  var aConstructor = aConstructor$2;
  var anObject = anObject$d;
  var isObject = isObject$j;
  var create4 = objectCreate;
  var fails$1 = fails$x;
  var nativeConstruct = getBuiltIn("Reflect", "construct");
  var ObjectPrototype = Object.prototype;
  var push = [].push;
  var NEW_TARGET_BUG = fails$1(function() {
    function F() {
    }
    return !(nativeConstruct(function() {
    }, [], F) instanceof F);
  });
  var ARGS_BUG = !fails$1(function() {
    nativeConstruct(function() {
    });
  });
  var FORCED$1 = NEW_TARGET_BUG || ARGS_BUG;
  $$5({ target: "Reflect", stat: true, forced: FORCED$1, sham: FORCED$1 }, {
    construct: function construct(Target, args) {
      aConstructor(Target);
      anObject(args);
      var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
      if (ARGS_BUG && !NEW_TARGET_BUG)
        return nativeConstruct(Target, args, newTarget);
      if (Target == newTarget) {
        switch (args.length) {
          case 0:
            return new Target();
          case 1:
            return new Target(args[0]);
          case 2:
            return new Target(args[0], args[1]);
          case 3:
            return new Target(args[0], args[1], args[2]);
          case 4:
            return new Target(args[0], args[1], args[2], args[3]);
        }
        var $args = [null];
        apply(push, $args, args);
        return new (apply(bind2, Target, $args))();
      }
      var proto = newTarget.prototype;
      var instance = create4(isObject(proto) ? proto : ObjectPrototype);
      var result = apply(Target, instance, args);
      return isObject(result) ? result : instance;
    }
  });
  var path$2 = path$t;
  var construct$1 = path$2.Reflect.construct;
  var parent$5 = construct$1;
  var construct2 = parent$5;
  (function(module) {
    module.exports = construct2;
  })(construct$2);
  var _Reflect$construct = /* @__PURE__ */ getDefaultExportFromCjs(constructExports);
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }
  var byteToHex = [];
  for (let i2 = 0; i2 < 256; ++i2) {
    byteToHex.push((i2 + 256).toString(16).slice(1));
  }
  function unsafeStringify(arr, offset = 0) {
    return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  }
  var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
  var native = {
    randomUUID
  };
  function v4(options, buf, offset) {
    if (native.randomUUID && !buf && !options) {
      return native.randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i2 = 0; i2 < 16; ++i2) {
        buf[offset + i2] = rnds[i2];
      }
      return buf;
    }
    return unsafeStringify(rnds);
  }
  var _Symbol$iterator;
  function ownKeys$1(object2, enumerableOnly) {
    var keys4 = _Object$keys(object2);
    if (_Object$getOwnPropertySymbols) {
      var symbols = _Object$getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
        return _Object$getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys4.push.apply(keys4, symbols);
    }
    return keys4;
  }
  function _objectSpread$1(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var _context32, _context33;
      var source = null != arguments[i2] ? arguments[i2] : {};
      i2 % 2 ? _forEachInstanceProperty(_context32 = ownKeys$1(Object(source), true)).call(_context32, function(key) {
        _defineProperty(target, key, source[key]);
      }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context33 = ownKeys$1(Object(source))).call(_context33, function(key) {
        _Object$defineProperty$1(target, key, _Object$getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper$d(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$d() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _createForOfIteratorHelper$6(o, allowArrayLike) {
    var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
    if (!it2) {
      if (_Array$isArray(o) || (it2 = _unsupportedIterableToArray$6(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it2)
          o = it2;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n() {
          if (i2 >= o.length)
            return { done: true };
          return { done: false, value: o[i2++] };
        }, e: function e(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it2 = it2.call(o);
    }, n: function n() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it2.return != null)
          it2.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray$6(o, minLen) {
    var _context31;
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray$6(o, minLen);
    var n = _sliceInstanceProperty(_context31 = Object.prototype.toString.call(o)).call(_context31, 8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from$1(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray$6(o, minLen);
  }
  function _arrayLikeToArray$6(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  function createNewDataPipeFrom(from3) {
    return new DataPipeUnderConstruction(from3);
  }
  var SimpleDataPipe = /* @__PURE__ */ function() {
    function SimpleDataPipe2(_source, _transformers, _target) {
      var _context, _context2, _context3;
      _classCallCheck(this, SimpleDataPipe2);
      _defineProperty(this, "_source", void 0);
      _defineProperty(this, "_transformers", void 0);
      _defineProperty(this, "_target", void 0);
      _defineProperty(this, "_listeners", {
        add: _bindInstanceProperty$1(_context = this._add).call(_context, this),
        remove: _bindInstanceProperty$1(_context2 = this._remove).call(_context2, this),
        update: _bindInstanceProperty$1(_context3 = this._update).call(_context3, this)
      });
      this._source = _source;
      this._transformers = _transformers;
      this._target = _target;
    }
    _createClass(SimpleDataPipe2, [{
      key: "all",
      value: function all2() {
        this._target.update(this._transformItems(this._source.get()));
        return this;
      }
      /** @inheritDoc */
    }, {
      key: "start",
      value: function start() {
        this._source.on("add", this._listeners.add);
        this._source.on("remove", this._listeners.remove);
        this._source.on("update", this._listeners.update);
        return this;
      }
      /** @inheritDoc */
    }, {
      key: "stop",
      value: function stop() {
        this._source.off("add", this._listeners.add);
        this._source.off("remove", this._listeners.remove);
        this._source.off("update", this._listeners.update);
        return this;
      }
      /**
       * Apply the transformers to the items.
       *
       * @param items - The items to be transformed.
       * @returns The transformed items.
       */
    }, {
      key: "_transformItems",
      value: function _transformItems(items) {
        var _context4;
        return _reduceInstanceProperty(_context4 = this._transformers).call(_context4, function(items2, transform) {
          return transform(items2);
        }, items);
      }
      /**
       * Handle an add event.
       *
       * @param _name - Ignored.
       * @param payload - The payload containing the ids of the added items.
       */
    }, {
      key: "_add",
      value: function _add(_name, payload) {
        if (payload == null) {
          return;
        }
        this._target.add(this._transformItems(this._source.get(payload.items)));
      }
      /**
       * Handle an update event.
       *
       * @param _name - Ignored.
       * @param payload - The payload containing the ids of the updated items.
       */
    }, {
      key: "_update",
      value: function _update(_name, payload) {
        if (payload == null) {
          return;
        }
        this._target.update(this._transformItems(this._source.get(payload.items)));
      }
      /**
       * Handle a remove event.
       *
       * @param _name - Ignored.
       * @param payload - The payload containing the data of the removed items.
       */
    }, {
      key: "_remove",
      value: function _remove(_name, payload) {
        if (payload == null) {
          return;
        }
        this._target.remove(this._transformItems(payload.oldData));
      }
    }]);
    return SimpleDataPipe2;
  }();
  var DataPipeUnderConstruction = /* @__PURE__ */ function() {
    function DataPipeUnderConstruction2(_source) {
      _classCallCheck(this, DataPipeUnderConstruction2);
      _defineProperty(this, "_source", void 0);
      _defineProperty(this, "_transformers", []);
      this._source = _source;
    }
    _createClass(DataPipeUnderConstruction2, [{
      key: "filter",
      value: function filter4(callback) {
        this._transformers.push(function(input) {
          return _filterInstanceProperty(input).call(input, callback);
        });
        return this;
      }
      /**
       * Map each source item to a new type.
       *
       * @param callback - A mapping function that takes a source item and returns
       * corresponding mapped item.
       * @typeParam TI - Target item type.
       * @typeParam TP - Target item type's id property name.
       * @returns This factory for further configuration.
       */
    }, {
      key: "map",
      value: function map3(callback) {
        this._transformers.push(function(input) {
          return _mapInstanceProperty(input).call(input, callback);
        });
        return this;
      }
      /**
       * Map each source item to zero or more items of a new type.
       *
       * @param callback - A mapping function that takes a source item and returns
       * an array of corresponding mapped items.
       * @typeParam TI - Target item type.
       * @typeParam TP - Target item type's id property name.
       * @returns This factory for further configuration.
       */
    }, {
      key: "flatMap",
      value: function flatMap3(callback) {
        this._transformers.push(function(input) {
          return _flatMapInstanceProperty(input).call(input, callback);
        });
        return this;
      }
      /**
       * Connect this pipe to given data set.
       *
       * @param target - The data set that will receive the items from this pipe.
       * @returns The pipe connected between given data sets and performing
       * configured transformation on the processed items.
       */
    }, {
      key: "to",
      value: function to(target) {
        return new SimpleDataPipe(this._source, this._transformers, target);
      }
    }]);
    return DataPipeUnderConstruction2;
  }();
  function isId(value) {
    return typeof value === "string" || typeof value === "number";
  }
  var Queue = /* @__PURE__ */ function() {
    function Queue2(options) {
      _classCallCheck(this, Queue2);
      _defineProperty(this, "delay", void 0);
      _defineProperty(this, "max", void 0);
      _defineProperty(this, "_queue", []);
      _defineProperty(this, "_timeout", null);
      _defineProperty(this, "_extended", null);
      this.delay = null;
      this.max = Infinity;
      this.setOptions(options);
    }
    _createClass(Queue2, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options && typeof options.delay !== "undefined") {
          this.delay = options.delay;
        }
        if (options && typeof options.max !== "undefined") {
          this.max = options.max;
        }
        this._flushIfNeeded();
      }
      /**
       * Extend an object with queuing functionality.
       * The object will be extended with a function flush, and the methods provided in options.replace will be replaced with queued ones.
       *
       * @param object - The object to be extended.
       * @param options - Additional options.
       * @returns The created queue.
       */
    }, {
      key: "destroy",
      value: (
        /**
         * Destroy the queue. The queue will first flush all queued actions, and in case it has extended an object, will restore the original object.
         */
        function destroy() {
          this.flush();
          if (this._extended) {
            var object2 = this._extended.object;
            var methods = this._extended.methods;
            for (var i2 = 0; i2 < methods.length; i2++) {
              var method2 = methods[i2];
              if (method2.original) {
                object2[method2.name] = method2.original;
              } else {
                delete object2[method2.name];
              }
            }
            this._extended = null;
          }
        }
      )
      /**
       * Replace a method on an object with a queued version.
       *
       * @param object - Object having the method.
       * @param method - The method name.
       */
    }, {
      key: "replace",
      value: function replace2(object2, method2) {
        var me = this;
        var original = object2[method2];
        if (!original) {
          throw new Error("Method " + method2 + " undefined");
        }
        object2[method2] = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          me.queue({
            args,
            fn: original,
            context: this
          });
        };
      }
      /**
       * Queue a call.
       *
       * @param entry - The function or entry to be queued.
       */
    }, {
      key: "queue",
      value: function queue(entry) {
        if (typeof entry === "function") {
          this._queue.push({
            fn: entry
          });
        } else {
          this._queue.push(entry);
        }
        this._flushIfNeeded();
      }
      /**
       * Check whether the queue needs to be flushed.
       */
    }, {
      key: "_flushIfNeeded",
      value: function _flushIfNeeded() {
        var _this = this;
        if (this._queue.length > this.max) {
          this.flush();
        }
        if (this._timeout != null) {
          clearTimeout(this._timeout);
          this._timeout = null;
        }
        if (this.queue.length > 0 && typeof this.delay === "number") {
          this._timeout = _setTimeout(function() {
            _this.flush();
          }, this.delay);
        }
      }
      /**
       * Flush all queued calls
       */
    }, {
      key: "flush",
      value: function flush() {
        var _context5, _context6;
        _forEachInstanceProperty(_context5 = _spliceInstanceProperty(_context6 = this._queue).call(_context6, 0)).call(_context5, function(entry) {
          entry.fn.apply(entry.context || entry.fn, entry.args || []);
        });
      }
    }], [{
      key: "extend",
      value: function extend2(object2, options) {
        var queue = new Queue2(options);
        if (object2.flush !== void 0) {
          throw new Error("Target object already has a property flush");
        }
        object2.flush = function() {
          queue.flush();
        };
        var methods = [{
          name: "flush",
          original: void 0
        }];
        if (options && options.replace) {
          for (var i2 = 0; i2 < options.replace.length; i2++) {
            var name = options.replace[i2];
            methods.push({
              name,
              // @TODO: better solution?
              original: object2[name]
            });
            queue.replace(object2, name);
          }
        }
        queue._extended = {
          object: object2,
          methods
        };
        return queue;
      }
    }]);
    return Queue2;
  }();
  var DataSetPart = /* @__PURE__ */ function() {
    function DataSetPart2() {
      _classCallCheck(this, DataSetPart2);
      _defineProperty(this, "_subscribers", {
        "*": [],
        add: [],
        remove: [],
        update: []
      });
      _defineProperty(this, "subscribe", DataSetPart2.prototype.on);
      _defineProperty(this, "unsubscribe", DataSetPart2.prototype.off);
    }
    _createClass(DataSetPart2, [{
      key: "_trigger",
      value: (
        /**
         * Trigger an event
         *
         * @param event - Event name.
         * @param payload - Event payload.
         * @param senderId - Id of the sender.
         */
        function _trigger(event2, payload, senderId) {
          var _context7, _context8;
          if (event2 === "*") {
            throw new Error("Cannot trigger event *");
          }
          _forEachInstanceProperty(_context7 = _concatInstanceProperty(_context8 = []).call(_context8, _toConsumableArray(this._subscribers[event2]), _toConsumableArray(this._subscribers["*"]))).call(_context7, function(subscriber) {
            subscriber(event2, payload, senderId != null ? senderId : null);
          });
        }
      )
      /**
       * Subscribe to an event, add an event listener.
       *
       * @remarks Non-function callbacks are ignored.
       * @param event - Event name.
       * @param callback - Callback method.
       */
    }, {
      key: "on",
      value: function on(event2, callback) {
        if (typeof callback === "function") {
          this._subscribers[event2].push(callback);
        }
      }
      /**
       * Unsubscribe from an event, remove an event listener.
       *
       * @remarks If the same callback was subscribed more than once **all** occurences will be removed.
       * @param event - Event name.
       * @param callback - Callback method.
       */
    }, {
      key: "off",
      value: function off(event2, callback) {
        var _context9;
        this._subscribers[event2] = _filterInstanceProperty(_context9 = this._subscribers[event2]).call(_context9, function(subscriber) {
          return subscriber !== callback;
        });
      }
    }]);
    return DataSetPart2;
  }();
  _Symbol$iterator = _Symbol$iterator2;
  var DataStream = /* @__PURE__ */ function() {
    function DataStream2(pairs) {
      _classCallCheck(this, DataStream2);
      _defineProperty(this, "_pairs", void 0);
      this._pairs = pairs;
    }
    _createClass(DataStream2, [{
      key: _Symbol$iterator,
      value: /* @__PURE__ */ regenerator.mark(function value() {
        var _iterator, _step, _step$value, id2, item;
        return regenerator.wrap(function value$(_context10) {
          while (1)
            switch (_context10.prev = _context10.next) {
              case 0:
                _iterator = _createForOfIteratorHelper$6(this._pairs);
                _context10.prev = 1;
                _iterator.s();
              case 3:
                if ((_step = _iterator.n()).done) {
                  _context10.next = 9;
                  break;
                }
                _step$value = _slicedToArray(_step.value, 2), id2 = _step$value[0], item = _step$value[1];
                _context10.next = 7;
                return [id2, item];
              case 7:
                _context10.next = 3;
                break;
              case 9:
                _context10.next = 14;
                break;
              case 11:
                _context10.prev = 11;
                _context10.t0 = _context10["catch"](1);
                _iterator.e(_context10.t0);
              case 14:
                _context10.prev = 14;
                _iterator.f();
                return _context10.finish(14);
              case 17:
              case "end":
                return _context10.stop();
            }
        }, value, this, [[1, 11, 14, 17]]);
      })
      /**
       * Return an iterable of key, value pairs for every entry in the stream.
       */
    }, {
      key: "entries",
      value: /* @__PURE__ */ regenerator.mark(function entries2() {
        var _iterator2, _step2, _step2$value, id2, item;
        return regenerator.wrap(function entries$(_context11) {
          while (1)
            switch (_context11.prev = _context11.next) {
              case 0:
                _iterator2 = _createForOfIteratorHelper$6(this._pairs);
                _context11.prev = 1;
                _iterator2.s();
              case 3:
                if ((_step2 = _iterator2.n()).done) {
                  _context11.next = 9;
                  break;
                }
                _step2$value = _slicedToArray(_step2.value, 2), id2 = _step2$value[0], item = _step2$value[1];
                _context11.next = 7;
                return [id2, item];
              case 7:
                _context11.next = 3;
                break;
              case 9:
                _context11.next = 14;
                break;
              case 11:
                _context11.prev = 11;
                _context11.t0 = _context11["catch"](1);
                _iterator2.e(_context11.t0);
              case 14:
                _context11.prev = 14;
                _iterator2.f();
                return _context11.finish(14);
              case 17:
              case "end":
                return _context11.stop();
            }
        }, entries2, this, [[1, 11, 14, 17]]);
      })
      /**
       * Return an iterable of keys in the stream.
       */
    }, {
      key: "keys",
      value: /* @__PURE__ */ regenerator.mark(function keys4() {
        var _iterator3, _step3, _step3$value, id2;
        return regenerator.wrap(function keys$(_context12) {
          while (1)
            switch (_context12.prev = _context12.next) {
              case 0:
                _iterator3 = _createForOfIteratorHelper$6(this._pairs);
                _context12.prev = 1;
                _iterator3.s();
              case 3:
                if ((_step3 = _iterator3.n()).done) {
                  _context12.next = 9;
                  break;
                }
                _step3$value = _slicedToArray(_step3.value, 1), id2 = _step3$value[0];
                _context12.next = 7;
                return id2;
              case 7:
                _context12.next = 3;
                break;
              case 9:
                _context12.next = 14;
                break;
              case 11:
                _context12.prev = 11;
                _context12.t0 = _context12["catch"](1);
                _iterator3.e(_context12.t0);
              case 14:
                _context12.prev = 14;
                _iterator3.f();
                return _context12.finish(14);
              case 17:
              case "end":
                return _context12.stop();
            }
        }, keys4, this, [[1, 11, 14, 17]]);
      })
      /**
       * Return an iterable of values in the stream.
       */
    }, {
      key: "values",
      value: /* @__PURE__ */ regenerator.mark(function values3() {
        var _iterator4, _step4, _step4$value, item;
        return regenerator.wrap(function values$(_context13) {
          while (1)
            switch (_context13.prev = _context13.next) {
              case 0:
                _iterator4 = _createForOfIteratorHelper$6(this._pairs);
                _context13.prev = 1;
                _iterator4.s();
              case 3:
                if ((_step4 = _iterator4.n()).done) {
                  _context13.next = 9;
                  break;
                }
                _step4$value = _slicedToArray(_step4.value, 2), item = _step4$value[1];
                _context13.next = 7;
                return item;
              case 7:
                _context13.next = 3;
                break;
              case 9:
                _context13.next = 14;
                break;
              case 11:
                _context13.prev = 11;
                _context13.t0 = _context13["catch"](1);
                _iterator4.e(_context13.t0);
              case 14:
                _context13.prev = 14;
                _iterator4.f();
                return _context13.finish(14);
              case 17:
              case "end":
                return _context13.stop();
            }
        }, values3, this, [[1, 11, 14, 17]]);
      })
      /**
       * Return an array containing all the ids in this stream.
       *
       * @remarks
       * The array may contain duplicities.
       * @returns The array with all ids from this stream.
       */
    }, {
      key: "toIdArray",
      value: function toIdArray() {
        var _context14;
        return _mapInstanceProperty(_context14 = _toConsumableArray(this._pairs)).call(_context14, function(pair) {
          return pair[0];
        });
      }
      /**
       * Return an array containing all the items in this stream.
       *
       * @remarks
       * The array may contain duplicities.
       * @returns The array with all items from this stream.
       */
    }, {
      key: "toItemArray",
      value: function toItemArray() {
        var _context15;
        return _mapInstanceProperty(_context15 = _toConsumableArray(this._pairs)).call(_context15, function(pair) {
          return pair[1];
        });
      }
      /**
       * Return an array containing all the entries in this stream.
       *
       * @remarks
       * The array may contain duplicities.
       * @returns The array with all entries from this stream.
       */
    }, {
      key: "toEntryArray",
      value: function toEntryArray() {
        return _toConsumableArray(this._pairs);
      }
      /**
       * Return an object map containing all the items in this stream accessible by ids.
       *
       * @remarks
       * In case of duplicate ids (coerced to string so `7 == '7'`) the last encoutered appears in the returned object.
       * @returns The object map of all id → item pairs from this stream.
       */
    }, {
      key: "toObjectMap",
      value: function toObjectMap() {
        var map3 = _Object$create$1(null);
        var _iterator5 = _createForOfIteratorHelper$6(this._pairs), _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
            var _step5$value = _slicedToArray(_step5.value, 2), id2 = _step5$value[0], item = _step5$value[1];
            map3[id2] = item;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        return map3;
      }
      /**
       * Return a map containing all the items in this stream accessible by ids.
       *
       * @returns The map of all id → item pairs from this stream.
       */
    }, {
      key: "toMap",
      value: function toMap() {
        return new _Map(this._pairs);
      }
      /**
       * Return a set containing all the (unique) ids in this stream.
       *
       * @returns The set of all ids from this stream.
       */
    }, {
      key: "toIdSet",
      value: function toIdSet() {
        return new _Set(this.toIdArray());
      }
      /**
       * Return a set containing all the (unique) items in this stream.
       *
       * @returns The set of all items from this stream.
       */
    }, {
      key: "toItemSet",
      value: function toItemSet() {
        return new _Set(this.toItemArray());
      }
      /**
       * Cache the items from this stream.
       *
       * @remarks
       * This method allows for items to be fetched immediatelly and used (possibly multiple times) later.
       * It can also be used to optimize performance as {@link DataStream} would otherwise reevaluate everything upon each iteration.
       *
       * ## Example
       * ```javascript
       * const ds = new DataSet([…])
       *
       * const cachedStream = ds.stream()
       *   .filter(…)
       *   .sort(…)
       *   .map(…)
       *   .cached(…) // Data are fetched, processed and cached here.
       *
       * ds.clear()
       * chachedStream // Still has all the items.
       * ```
       * @returns A new {@link DataStream} with cached items (detached from the original {@link DataSet}).
       */
    }, {
      key: "cache",
      value: function cache() {
        return new DataStream2(_toConsumableArray(this._pairs));
      }
      /**
       * Get the distinct values of given property.
       *
       * @param callback - The function that picks and possibly converts the property.
       * @typeParam T - The type of the distinct value.
       * @returns A set of all distinct properties.
       */
    }, {
      key: "distinct",
      value: function distinct(callback) {
        var set2 = new _Set();
        var _iterator6 = _createForOfIteratorHelper$6(this._pairs), _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
            var _step6$value = _slicedToArray(_step6.value, 2), id2 = _step6$value[0], item = _step6$value[1];
            set2.add(callback(item, id2));
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        return set2;
      }
      /**
       * Filter the items of the stream.
       *
       * @param callback - The function that decides whether an item will be included.
       * @returns A new data stream with the filtered items.
       */
    }, {
      key: "filter",
      value: function filter4(callback) {
        var pairs = this._pairs;
        return new DataStream2(_defineProperty({}, _Symbol$iterator2, /* @__PURE__ */ regenerator.mark(function _callee() {
          var _iterator7, _step7, _step7$value, id2, item;
          return regenerator.wrap(function _callee$(_context16) {
            while (1)
              switch (_context16.prev = _context16.next) {
                case 0:
                  _iterator7 = _createForOfIteratorHelper$6(pairs);
                  _context16.prev = 1;
                  _iterator7.s();
                case 3:
                  if ((_step7 = _iterator7.n()).done) {
                    _context16.next = 10;
                    break;
                  }
                  _step7$value = _slicedToArray(_step7.value, 2), id2 = _step7$value[0], item = _step7$value[1];
                  if (!callback(item, id2)) {
                    _context16.next = 8;
                    break;
                  }
                  _context16.next = 8;
                  return [id2, item];
                case 8:
                  _context16.next = 3;
                  break;
                case 10:
                  _context16.next = 15;
                  break;
                case 12:
                  _context16.prev = 12;
                  _context16.t0 = _context16["catch"](1);
                  _iterator7.e(_context16.t0);
                case 15:
                  _context16.prev = 15;
                  _iterator7.f();
                  return _context16.finish(15);
                case 18:
                case "end":
                  return _context16.stop();
              }
          }, _callee, null, [[1, 12, 15, 18]]);
        })));
      }
      /**
       * Execute a callback for each item of the stream.
       *
       * @param callback - The function that will be invoked for each item.
       */
    }, {
      key: "forEach",
      value: function forEach3(callback) {
        var _iterator8 = _createForOfIteratorHelper$6(this._pairs), _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
            var _step8$value = _slicedToArray(_step8.value, 2), id2 = _step8$value[0], item = _step8$value[1];
            callback(item, id2);
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
      }
      /**
       * Map the items into a different type.
       *
       * @param callback - The function that does the conversion.
       * @typeParam Mapped - The type of the item after mapping.
       * @returns A new data stream with the mapped items.
       */
    }, {
      key: "map",
      value: function map3(callback) {
        var pairs = this._pairs;
        return new DataStream2(_defineProperty({}, _Symbol$iterator2, /* @__PURE__ */ regenerator.mark(function _callee2() {
          var _iterator9, _step9, _step9$value, id2, item;
          return regenerator.wrap(function _callee2$(_context17) {
            while (1)
              switch (_context17.prev = _context17.next) {
                case 0:
                  _iterator9 = _createForOfIteratorHelper$6(pairs);
                  _context17.prev = 1;
                  _iterator9.s();
                case 3:
                  if ((_step9 = _iterator9.n()).done) {
                    _context17.next = 9;
                    break;
                  }
                  _step9$value = _slicedToArray(_step9.value, 2), id2 = _step9$value[0], item = _step9$value[1];
                  _context17.next = 7;
                  return [id2, callback(item, id2)];
                case 7:
                  _context17.next = 3;
                  break;
                case 9:
                  _context17.next = 14;
                  break;
                case 11:
                  _context17.prev = 11;
                  _context17.t0 = _context17["catch"](1);
                  _iterator9.e(_context17.t0);
                case 14:
                  _context17.prev = 14;
                  _iterator9.f();
                  return _context17.finish(14);
                case 17:
                case "end":
                  return _context17.stop();
              }
          }, _callee2, null, [[1, 11, 14, 17]]);
        })));
      }
      /**
       * Get the item with the maximum value of given property.
       *
       * @param callback - The function that picks and possibly converts the property.
       * @returns The item with the maximum if found otherwise null.
       */
    }, {
      key: "max",
      value: function max2(callback) {
        var iter = _getIterator(this._pairs);
        var curr = iter.next();
        if (curr.done) {
          return null;
        }
        var maxItem = curr.value[1];
        var maxValue = callback(curr.value[1], curr.value[0]);
        while (!(curr = iter.next()).done) {
          var _curr$value = _slicedToArray(curr.value, 2), id2 = _curr$value[0], item = _curr$value[1];
          var _value = callback(item, id2);
          if (_value > maxValue) {
            maxValue = _value;
            maxItem = item;
          }
        }
        return maxItem;
      }
      /**
       * Get the item with the minimum value of given property.
       *
       * @param callback - The function that picks and possibly converts the property.
       * @returns The item with the minimum if found otherwise null.
       */
    }, {
      key: "min",
      value: function min2(callback) {
        var iter = _getIterator(this._pairs);
        var curr = iter.next();
        if (curr.done) {
          return null;
        }
        var minItem = curr.value[1];
        var minValue = callback(curr.value[1], curr.value[0]);
        while (!(curr = iter.next()).done) {
          var _curr$value2 = _slicedToArray(curr.value, 2), id2 = _curr$value2[0], item = _curr$value2[1];
          var _value2 = callback(item, id2);
          if (_value2 < minValue) {
            minValue = _value2;
            minItem = item;
          }
        }
        return minItem;
      }
      /**
       * Reduce the items into a single value.
       *
       * @param callback - The function that does the reduction.
       * @param accumulator - The initial value of the accumulator.
       * @typeParam T - The type of the accumulated value.
       * @returns The reduced value.
       */
    }, {
      key: "reduce",
      value: function reduce3(callback, accumulator) {
        var _iterator10 = _createForOfIteratorHelper$6(this._pairs), _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
            var _step10$value = _slicedToArray(_step10.value, 2), id2 = _step10$value[0], item = _step10$value[1];
            accumulator = callback(accumulator, item, id2);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
        return accumulator;
      }
      /**
       * Sort the items.
       *
       * @param callback - Item comparator.
       * @returns A new stream with sorted items.
       */
    }, {
      key: "sort",
      value: function sort3(callback) {
        var _this2 = this;
        return new DataStream2(_defineProperty({}, _Symbol$iterator2, function() {
          var _context18;
          return _getIterator(_sortInstanceProperty(_context18 = _toConsumableArray(_this2._pairs)).call(_context18, function(_ref, _ref2) {
            var _ref3 = _slicedToArray(_ref, 2), idA = _ref3[0], itemA = _ref3[1];
            var _ref4 = _slicedToArray(_ref2, 2), idB = _ref4[0], itemB = _ref4[1];
            return callback(itemA, itemB, idA, idB);
          }));
        }));
      }
    }]);
    return DataStream2;
  }();
  function ensureFullItem(item, idProp) {
    if (item[idProp] == null) {
      item[idProp] = v4();
    }
    return item;
  }
  var DataSet = /* @__PURE__ */ function(_DataSetPart) {
    _inherits(DataSet2, _DataSetPart);
    var _super = _createSuper$d(DataSet2);
    function DataSet2(data2, options) {
      var _this3;
      _classCallCheck(this, DataSet2);
      _this3 = _super.call(this);
      _defineProperty(_assertThisInitialized(_this3), "flush", void 0);
      _defineProperty(_assertThisInitialized(_this3), "length", void 0);
      _defineProperty(_assertThisInitialized(_this3), "_options", void 0);
      _defineProperty(_assertThisInitialized(_this3), "_data", void 0);
      _defineProperty(_assertThisInitialized(_this3), "_idProp", void 0);
      _defineProperty(_assertThisInitialized(_this3), "_queue", null);
      if (data2 && !_Array$isArray(data2)) {
        options = data2;
        data2 = [];
      }
      _this3._options = options || {};
      _this3._data = new _Map();
      _this3.length = 0;
      _this3._idProp = _this3._options.fieldId || "id";
      if (data2 && data2.length) {
        _this3.add(data2);
      }
      _this3.setOptions(options);
      return _this3;
    }
    _createClass(DataSet2, [{
      key: "idProp",
      get: (
        /** @inheritDoc */
        function get3() {
          return this._idProp;
        }
      )
    }, {
      key: "setOptions",
      value: function setOptions(options) {
        if (options && options.queue !== void 0) {
          if (options.queue === false) {
            if (this._queue) {
              this._queue.destroy();
              this._queue = null;
            }
          } else {
            if (!this._queue) {
              this._queue = Queue.extend(this, {
                replace: ["add", "update", "remove"]
              });
            }
            if (options.queue && _typeof$1(options.queue) === "object") {
              this._queue.setOptions(options.queue);
            }
          }
        }
      }
      /**
       * Add a data item or an array with items.
       *
       * After the items are added to the DataSet, the DataSet will trigger an event `add`. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       *
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet()
       *
       * // add items
       * const ids = data.add([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { text: 'item without an id' }
       * ])
       *
       * console.log(ids) // [1, 2, '<UUIDv4>']
       * ```
       *
       * @param data - Items to be added (ids will be generated if missing).
       * @param senderId - Sender id.
       * @returns addedIds - Array with the ids (generated if not present) of the added items.
       * @throws When an item with the same id as any of the added items already exists.
       */
    }, {
      key: "add",
      value: function add(data2, senderId) {
        var _this4 = this;
        var addedIds = [];
        var id2;
        if (_Array$isArray(data2)) {
          var idsToAdd = _mapInstanceProperty(data2).call(data2, function(d) {
            return d[_this4._idProp];
          });
          if (_someInstanceProperty(idsToAdd).call(idsToAdd, function(id3) {
            return _this4._data.has(id3);
          })) {
            throw new Error("A duplicate id was found in the parameter array.");
          }
          for (var i2 = 0, len = data2.length; i2 < len; i2++) {
            id2 = this._addItem(data2[i2]);
            addedIds.push(id2);
          }
        } else if (data2 && _typeof$1(data2) === "object") {
          id2 = this._addItem(data2);
          addedIds.push(id2);
        } else {
          throw new Error("Unknown dataType");
        }
        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          }, senderId);
        }
        return addedIds;
      }
      /**
       * Update existing items. When an item does not exist, it will be created.
       *
       * @remarks
       * The provided properties will be merged in the existing item. When an item does not exist, it will be created.
       *
       * After the items are updated, the DataSet will trigger an event `add` for the added items, and an event `update`. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       *
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { id: 3, text: 'item 3' }
       * ])
       *
       * // update items
       * const ids = data.update([
       *   { id: 2, text: 'item 2 (updated)' },
       *   { id: 4, text: 'item 4 (new)' }
       * ])
       *
       * console.log(ids) // [2, 4]
       * ```
       *
       * ## Warning for TypeScript users
       * This method may introduce partial items into the data set. Use add or updateOnly instead for better type safety.
       * @param data - Items to be updated (if the id is already present) or added (if the id is missing).
       * @param senderId - Sender id.
       * @returns updatedIds - The ids of the added (these may be newly generated if there was no id in the item from the data) or updated items.
       * @throws When the supplied data is neither an item nor an array of items.
       */
    }, {
      key: "update",
      value: function update(data2, senderId) {
        var _this5 = this;
        var addedIds = [];
        var updatedIds = [];
        var oldData = [];
        var updatedData = [];
        var idProp = this._idProp;
        var addOrUpdate = function addOrUpdate2(item) {
          var origId = item[idProp];
          if (origId != null && _this5._data.has(origId)) {
            var fullItem = item;
            var oldItem = _Object$assign({}, _this5._data.get(origId));
            var id2 = _this5._updateItem(fullItem);
            updatedIds.push(id2);
            updatedData.push(fullItem);
            oldData.push(oldItem);
          } else {
            var _id = _this5._addItem(item);
            addedIds.push(_id);
          }
        };
        if (_Array$isArray(data2)) {
          for (var i2 = 0, len = data2.length; i2 < len; i2++) {
            if (data2[i2] && _typeof$1(data2[i2]) === "object") {
              addOrUpdate(data2[i2]);
            } else {
              console.warn("Ignoring input item, which is not an object at index " + i2);
            }
          }
        } else if (data2 && _typeof$1(data2) === "object") {
          addOrUpdate(data2);
        } else {
          throw new Error("Unknown dataType");
        }
        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          }, senderId);
        }
        if (updatedIds.length) {
          var props = {
            items: updatedIds,
            oldData,
            data: updatedData
          };
          this._trigger("update", props, senderId);
        }
        return _concatInstanceProperty(addedIds).call(addedIds, updatedIds);
      }
      /**
       * Update existing items. When an item does not exist, an error will be thrown.
       *
       * @remarks
       * The provided properties will be deeply merged into the existing item.
       * When an item does not exist (id not present in the data set or absent), an error will be thrown and nothing will be changed.
       *
       * After the items are updated, the DataSet will trigger an event `update`.
       * When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       *
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { id: 3, text: 'item 3' },
       * ])
       *
       * // update items
       * const ids = data.update([
       *   { id: 2, text: 'item 2 (updated)' }, // works
       *   // { id: 4, text: 'item 4 (new)' }, // would throw
       *   // { text: 'item 4 (new)' }, // would also throw
       * ])
       *
       * console.log(ids) // [2]
       * ```
       * @param data - Updates (the id and optionally other props) to the items in this data set.
       * @param senderId - Sender id.
       * @returns updatedIds - The ids of the updated items.
       * @throws When the supplied data is neither an item nor an array of items, when the ids are missing.
       */
    }, {
      key: "updateOnly",
      value: function updateOnly(data2, senderId) {
        var _context19, _this6 = this;
        if (!_Array$isArray(data2)) {
          data2 = [data2];
        }
        var updateEventData = _mapInstanceProperty(_context19 = _mapInstanceProperty(data2).call(data2, function(update) {
          var oldData = _this6._data.get(update[_this6._idProp]);
          if (oldData == null) {
            throw new Error("Updating non-existent items is not allowed.");
          }
          return {
            oldData,
            update
          };
        })).call(_context19, function(_ref5) {
          var oldData = _ref5.oldData, update = _ref5.update;
          var id2 = oldData[_this6._idProp];
          var updatedData = pureDeepObjectAssign(oldData, update);
          _this6._data.set(id2, updatedData);
          return {
            id: id2,
            oldData,
            updatedData
          };
        });
        if (updateEventData.length) {
          var props = {
            items: _mapInstanceProperty(updateEventData).call(updateEventData, function(value) {
              return value.id;
            }),
            oldData: _mapInstanceProperty(updateEventData).call(updateEventData, function(value) {
              return value.oldData;
            }),
            data: _mapInstanceProperty(updateEventData).call(updateEventData, function(value) {
              return value.updatedData;
            })
          };
          this._trigger("update", props, senderId);
          return props.items;
        } else {
          return [];
        }
      }
      /** @inheritDoc */
    }, {
      key: "get",
      value: function get3(first, second) {
        var id2 = void 0;
        var ids = void 0;
        var options = void 0;
        if (isId(first)) {
          id2 = first;
          options = second;
        } else if (_Array$isArray(first)) {
          ids = first;
          options = second;
        } else {
          options = first;
        }
        var returnType = options && options.returnType === "Object" ? "Object" : "Array";
        var filter4 = options && _filterInstanceProperty(options);
        var items = [];
        var item = void 0;
        var itemIds = void 0;
        var itemId = void 0;
        if (id2 != null) {
          item = this._data.get(id2);
          if (item && filter4 && !filter4(item)) {
            item = void 0;
          }
        } else if (ids != null) {
          for (var i2 = 0, len = ids.length; i2 < len; i2++) {
            item = this._data.get(ids[i2]);
            if (item != null && (!filter4 || filter4(item))) {
              items.push(item);
            }
          }
        } else {
          var _context20;
          itemIds = _toConsumableArray(_keysInstanceProperty(_context20 = this._data).call(_context20));
          for (var _i = 0, _len2 = itemIds.length; _i < _len2; _i++) {
            itemId = itemIds[_i];
            item = this._data.get(itemId);
            if (item != null && (!filter4 || filter4(item))) {
              items.push(item);
            }
          }
        }
        if (options && options.order && id2 == void 0) {
          this._sort(items, options.order);
        }
        if (options && options.fields) {
          var fields = options.fields;
          if (id2 != void 0 && item != null) {
            item = this._filterFields(item, fields);
          } else {
            for (var _i2 = 0, _len3 = items.length; _i2 < _len3; _i2++) {
              items[_i2] = this._filterFields(items[_i2], fields);
            }
          }
        }
        if (returnType == "Object") {
          var result = {};
          for (var _i3 = 0, _len4 = items.length; _i3 < _len4; _i3++) {
            var resultant = items[_i3];
            var _id2 = resultant[this._idProp];
            result[_id2] = resultant;
          }
          return result;
        } else {
          if (id2 != null) {
            var _item;
            return (_item = item) !== null && _item !== void 0 ? _item : null;
          } else {
            return items;
          }
        }
      }
      /** @inheritDoc */
    }, {
      key: "getIds",
      value: function getIds(options) {
        var data2 = this._data;
        var filter4 = options && _filterInstanceProperty(options);
        var order = options && options.order;
        var itemIds = _toConsumableArray(_keysInstanceProperty(data2).call(data2));
        var ids = [];
        if (filter4) {
          if (order) {
            var items = [];
            for (var i2 = 0, len = itemIds.length; i2 < len; i2++) {
              var id2 = itemIds[i2];
              var item = this._data.get(id2);
              if (item != null && filter4(item)) {
                items.push(item);
              }
            }
            this._sort(items, order);
            for (var _i4 = 0, _len5 = items.length; _i4 < _len5; _i4++) {
              ids.push(items[_i4][this._idProp]);
            }
          } else {
            for (var _i5 = 0, _len6 = itemIds.length; _i5 < _len6; _i5++) {
              var _id3 = itemIds[_i5];
              var _item2 = this._data.get(_id3);
              if (_item2 != null && filter4(_item2)) {
                ids.push(_item2[this._idProp]);
              }
            }
          }
        } else {
          if (order) {
            var _items = [];
            for (var _i6 = 0, _len7 = itemIds.length; _i6 < _len7; _i6++) {
              var _id4 = itemIds[_i6];
              _items.push(data2.get(_id4));
            }
            this._sort(_items, order);
            for (var _i7 = 0, _len8 = _items.length; _i7 < _len8; _i7++) {
              ids.push(_items[_i7][this._idProp]);
            }
          } else {
            for (var _i8 = 0, _len9 = itemIds.length; _i8 < _len9; _i8++) {
              var _id5 = itemIds[_i8];
              var _item3 = data2.get(_id5);
              if (_item3 != null) {
                ids.push(_item3[this._idProp]);
              }
            }
          }
        }
        return ids;
      }
      /** @inheritDoc */
    }, {
      key: "getDataSet",
      value: function getDataSet() {
        return this;
      }
      /** @inheritDoc */
    }, {
      key: "forEach",
      value: function forEach3(callback, options) {
        var filter4 = options && _filterInstanceProperty(options);
        var data2 = this._data;
        var itemIds = _toConsumableArray(_keysInstanceProperty(data2).call(data2));
        if (options && options.order) {
          var items = this.get(options);
          for (var i2 = 0, len = items.length; i2 < len; i2++) {
            var item = items[i2];
            var id2 = item[this._idProp];
            callback(item, id2);
          }
        } else {
          for (var _i9 = 0, _len10 = itemIds.length; _i9 < _len10; _i9++) {
            var _id6 = itemIds[_i9];
            var _item4 = this._data.get(_id6);
            if (_item4 != null && (!filter4 || filter4(_item4))) {
              callback(_item4, _id6);
            }
          }
        }
      }
      /** @inheritDoc */
    }, {
      key: "map",
      value: function map3(callback, options) {
        var filter4 = options && _filterInstanceProperty(options);
        var mappedItems = [];
        var data2 = this._data;
        var itemIds = _toConsumableArray(_keysInstanceProperty(data2).call(data2));
        for (var i2 = 0, len = itemIds.length; i2 < len; i2++) {
          var id2 = itemIds[i2];
          var item = this._data.get(id2);
          if (item != null && (!filter4 || filter4(item))) {
            mappedItems.push(callback(item, id2));
          }
        }
        if (options && options.order) {
          this._sort(mappedItems, options.order);
        }
        return mappedItems;
      }
      /**
       * Filter the fields of an item.
       *
       * @param item - The item whose fields should be filtered.
       * @param fields - The names of the fields that will be kept.
       * @typeParam K - Field name type.
       * @returns The item without any additional fields.
       */
    }, {
      key: "_filterFields",
      value: function _filterFields(item, fields) {
        var _context21;
        if (!item) {
          return item;
        }
        return _reduceInstanceProperty(_context21 = _Array$isArray(fields) ? (
          // Use the supplied array
          fields
        ) : (
          // Use the keys of the supplied object
          _Object$keys(fields)
        )).call(_context21, function(filteredItem, field) {
          filteredItem[field] = item[field];
          return filteredItem;
        }, {});
      }
      /**
       * Sort the provided array with items.
       *
       * @param items - Items to be sorted in place.
       * @param order - A field name or custom sort function.
       * @typeParam T - The type of the items in the items array.
       */
    }, {
      key: "_sort",
      value: function _sort(items, order) {
        if (typeof order === "string") {
          var name = order;
          _sortInstanceProperty(items).call(items, function(a, b) {
            var av = a[name];
            var bv = b[name];
            return av > bv ? 1 : av < bv ? -1 : 0;
          });
        } else if (typeof order === "function") {
          _sortInstanceProperty(items).call(items, order);
        } else {
          throw new TypeError("Order must be a function or a string");
        }
      }
      /**
       * Remove an item or multiple items by “reference” (only the id is used) or by id.
       *
       * The method ignores removal of non-existing items, and returns an array containing the ids of the items which are actually removed from the DataSet.
       *
       * After the items are removed, the DataSet will trigger an event `remove` for the removed items. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { id: 3, text: 'item 3' }
       * ])
       *
       * // remove items
       * const ids = data.remove([2, { id: 3 }, 4])
       *
       * console.log(ids) // [2, 3]
       * ```
       *
       * @param id - One or more items or ids of items to be removed.
       * @param senderId - Sender id.
       * @returns The ids of the removed items.
       */
    }, {
      key: "remove",
      value: function remove(id2, senderId) {
        var removedIds = [];
        var removedItems = [];
        var ids = _Array$isArray(id2) ? id2 : [id2];
        for (var i2 = 0, len = ids.length; i2 < len; i2++) {
          var item = this._remove(ids[i2]);
          if (item) {
            var itemId = item[this._idProp];
            if (itemId != null) {
              removedIds.push(itemId);
              removedItems.push(item);
            }
          }
        }
        if (removedIds.length) {
          this._trigger("remove", {
            items: removedIds,
            oldData: removedItems
          }, senderId);
        }
        return removedIds;
      }
      /**
       * Remove an item by its id or reference.
       *
       * @param id - Id of an item or the item itself.
       * @returns The removed item if removed, null otherwise.
       */
    }, {
      key: "_remove",
      value: function _remove(id2) {
        var ident;
        if (isId(id2)) {
          ident = id2;
        } else if (id2 && _typeof$1(id2) === "object") {
          ident = id2[this._idProp];
        }
        if (ident != null && this._data.has(ident)) {
          var item = this._data.get(ident) || null;
          this._data.delete(ident);
          --this.length;
          return item;
        }
        return null;
      }
      /**
       * Clear the entire data set.
       *
       * After the items are removed, the {@link DataSet} will trigger an event `remove` for all removed items. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * @param senderId - Sender id.
       * @returns removedIds - The ids of all removed items.
       */
    }, {
      key: "clear",
      value: function clear2(senderId) {
        var _context22;
        var ids = _toConsumableArray(_keysInstanceProperty(_context22 = this._data).call(_context22));
        var items = [];
        for (var i2 = 0, len = ids.length; i2 < len; i2++) {
          items.push(this._data.get(ids[i2]));
        }
        this._data.clear();
        this.length = 0;
        this._trigger("remove", {
          items: ids,
          oldData: items
        }, senderId);
        return ids;
      }
      /**
       * Find the item with maximum value of a specified field.
       *
       * @param field - Name of the property that should be searched for max value.
       * @returns Item containing max value, or null if no items.
       */
    }, {
      key: "max",
      value: function max2(field) {
        var _context23;
        var max3 = null;
        var maxField = null;
        var _iterator11 = _createForOfIteratorHelper$6(_valuesInstanceProperty(_context23 = this._data).call(_context23)), _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
            var item = _step11.value;
            var itemField = item[field];
            if (typeof itemField === "number" && (maxField == null || itemField > maxField)) {
              max3 = item;
              maxField = itemField;
            }
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
        return max3 || null;
      }
      /**
       * Find the item with minimum value of a specified field.
       *
       * @param field - Name of the property that should be searched for min value.
       * @returns Item containing min value, or null if no items.
       */
    }, {
      key: "min",
      value: function min2(field) {
        var _context24;
        var min3 = null;
        var minField = null;
        var _iterator12 = _createForOfIteratorHelper$6(_valuesInstanceProperty(_context24 = this._data).call(_context24)), _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
            var item = _step12.value;
            var itemField = item[field];
            if (typeof itemField === "number" && (minField == null || itemField < minField)) {
              min3 = item;
              minField = itemField;
            }
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
        return min3 || null;
      }
      /**
       * Find all distinct values of a specified field
       *
       * @param prop - The property name whose distinct values should be returned.
       * @returns Unordered array containing all distinct values. Items without specified property are ignored.
       */
    }, {
      key: "distinct",
      value: function distinct(prop) {
        var data2 = this._data;
        var itemIds = _toConsumableArray(_keysInstanceProperty(data2).call(data2));
        var values3 = [];
        var count = 0;
        for (var i2 = 0, len = itemIds.length; i2 < len; i2++) {
          var id2 = itemIds[i2];
          var item = data2.get(id2);
          var _value3 = item[prop];
          var exists = false;
          for (var j = 0; j < count; j++) {
            if (values3[j] == _value3) {
              exists = true;
              break;
            }
          }
          if (!exists && _value3 !== void 0) {
            values3[count] = _value3;
            count++;
          }
        }
        return values3;
      }
      /**
       * Add a single item. Will fail when an item with the same id already exists.
       *
       * @param item - A new item to be added.
       * @returns Added item's id. An id is generated when it is not present in the item.
       */
    }, {
      key: "_addItem",
      value: function _addItem(item) {
        var fullItem = ensureFullItem(item, this._idProp);
        var id2 = fullItem[this._idProp];
        if (this._data.has(id2)) {
          throw new Error("Cannot add item: item with id " + id2 + " already exists");
        }
        this._data.set(id2, fullItem);
        ++this.length;
        return id2;
      }
      /**
       * Update a single item: merge with existing item.
       * Will fail when the item has no id, or when there does not exist an item with the same id.
       *
       * @param update - The new item
       * @returns The id of the updated item.
       */
    }, {
      key: "_updateItem",
      value: function _updateItem(update) {
        var id2 = update[this._idProp];
        if (id2 == null) {
          throw new Error("Cannot update item: item has no id (item: " + _JSON$stringify(update) + ")");
        }
        var item = this._data.get(id2);
        if (!item) {
          throw new Error("Cannot update item: no item with id " + id2 + " found");
        }
        this._data.set(id2, _objectSpread$1(_objectSpread$1({}, item), update));
        return id2;
      }
      /** @inheritDoc */
    }, {
      key: "stream",
      value: function stream(ids) {
        if (ids) {
          var data2 = this._data;
          return new DataStream(_defineProperty({}, _Symbol$iterator2, /* @__PURE__ */ regenerator.mark(function _callee3() {
            var _iterator13, _step13, id2, item;
            return regenerator.wrap(function _callee3$(_context25) {
              while (1)
                switch (_context25.prev = _context25.next) {
                  case 0:
                    _iterator13 = _createForOfIteratorHelper$6(ids);
                    _context25.prev = 1;
                    _iterator13.s();
                  case 3:
                    if ((_step13 = _iterator13.n()).done) {
                      _context25.next = 11;
                      break;
                    }
                    id2 = _step13.value;
                    item = data2.get(id2);
                    if (!(item != null)) {
                      _context25.next = 9;
                      break;
                    }
                    _context25.next = 9;
                    return [id2, item];
                  case 9:
                    _context25.next = 3;
                    break;
                  case 11:
                    _context25.next = 16;
                    break;
                  case 13:
                    _context25.prev = 13;
                    _context25.t0 = _context25["catch"](1);
                    _iterator13.e(_context25.t0);
                  case 16:
                    _context25.prev = 16;
                    _iterator13.f();
                    return _context25.finish(16);
                  case 19:
                  case "end":
                    return _context25.stop();
                }
            }, _callee3, null, [[1, 13, 16, 19]]);
          })));
        } else {
          var _context26;
          return new DataStream(_defineProperty({}, _Symbol$iterator2, _bindInstanceProperty$1(_context26 = _entriesInstanceProperty(this._data)).call(_context26, this._data)));
        }
      }
    }]);
    return DataSet2;
  }(DataSetPart);
  var DataView = /* @__PURE__ */ function(_DataSetPart2) {
    _inherits(DataView2, _DataSetPart2);
    var _super2 = _createSuper$d(DataView2);
    function DataView2(data2, options) {
      var _context27;
      var _this7;
      _classCallCheck(this, DataView2);
      _this7 = _super2.call(this);
      _defineProperty(_assertThisInitialized(_this7), "length", 0);
      _defineProperty(_assertThisInitialized(_this7), "_listener", void 0);
      _defineProperty(_assertThisInitialized(_this7), "_data", void 0);
      _defineProperty(_assertThisInitialized(_this7), "_ids", new _Set());
      _defineProperty(_assertThisInitialized(_this7), "_options", void 0);
      _this7._options = options || {};
      _this7._listener = _bindInstanceProperty$1(_context27 = _this7._onEvent).call(_context27, _assertThisInitialized(_this7));
      _this7.setData(data2);
      return _this7;
    }
    _createClass(DataView2, [{
      key: "idProp",
      get: (
        /** @inheritDoc */
        function get3() {
          return this.getDataSet().idProp;
        }
      )
    }, {
      key: "setData",
      value: function setData(data2) {
        if (this._data) {
          if (this._data.off) {
            this._data.off("*", this._listener);
          }
          var ids = this._data.getIds({
            filter: _filterInstanceProperty(this._options)
          });
          var items = this._data.get(ids);
          this._ids.clear();
          this.length = 0;
          this._trigger("remove", {
            items: ids,
            oldData: items
          });
        }
        if (data2 != null) {
          this._data = data2;
          var _ids = this._data.getIds({
            filter: _filterInstanceProperty(this._options)
          });
          for (var i2 = 0, len = _ids.length; i2 < len; i2++) {
            var id2 = _ids[i2];
            this._ids.add(id2);
          }
          this.length = _ids.length;
          this._trigger("add", {
            items: _ids
          });
        } else {
          this._data = new DataSet();
        }
        if (this._data.on) {
          this._data.on("*", this._listener);
        }
      }
      /**
       * Refresh the DataView.
       * Useful when the DataView has a filter function containing a variable parameter.
       */
    }, {
      key: "refresh",
      value: function refresh() {
        var ids = this._data.getIds({
          filter: _filterInstanceProperty(this._options)
        });
        var oldIds = _toConsumableArray(this._ids);
        var newIds = {};
        var addedIds = [];
        var removedIds = [];
        var removedItems = [];
        for (var i2 = 0, len = ids.length; i2 < len; i2++) {
          var id2 = ids[i2];
          newIds[id2] = true;
          if (!this._ids.has(id2)) {
            addedIds.push(id2);
            this._ids.add(id2);
          }
        }
        for (var _i10 = 0, _len11 = oldIds.length; _i10 < _len11; _i10++) {
          var _id7 = oldIds[_i10];
          var item = this._data.get(_id7);
          if (item == null) {
            console.error("If you see this, report it please.");
          } else if (!newIds[_id7]) {
            removedIds.push(_id7);
            removedItems.push(item);
            this._ids.delete(_id7);
          }
        }
        this.length += addedIds.length - removedIds.length;
        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          });
        }
        if (removedIds.length) {
          this._trigger("remove", {
            items: removedIds,
            oldData: removedItems
          });
        }
      }
      /** @inheritDoc */
    }, {
      key: "get",
      value: function get3(first, second) {
        if (this._data == null) {
          return null;
        }
        var ids = null;
        var options;
        if (isId(first) || _Array$isArray(first)) {
          ids = first;
          options = second;
        } else {
          options = first;
        }
        var viewOptions = _Object$assign({}, this._options, options);
        var thisFilter = _filterInstanceProperty(this._options);
        var optionsFilter = options && _filterInstanceProperty(options);
        if (thisFilter && optionsFilter) {
          viewOptions.filter = function(item) {
            return thisFilter(item) && optionsFilter(item);
          };
        }
        if (ids == null) {
          return this._data.get(viewOptions);
        } else {
          return this._data.get(ids, viewOptions);
        }
      }
      /** @inheritDoc */
    }, {
      key: "getIds",
      value: function getIds(options) {
        if (this._data.length) {
          var defaultFilter = _filterInstanceProperty(this._options);
          var optionsFilter = options != null ? _filterInstanceProperty(options) : null;
          var filter4;
          if (optionsFilter) {
            if (defaultFilter) {
              filter4 = function filter5(item) {
                return defaultFilter(item) && optionsFilter(item);
              };
            } else {
              filter4 = optionsFilter;
            }
          } else {
            filter4 = defaultFilter;
          }
          return this._data.getIds({
            filter: filter4,
            order: options && options.order
          });
        } else {
          return [];
        }
      }
      /** @inheritDoc */
    }, {
      key: "forEach",
      value: function forEach3(callback, options) {
        if (this._data) {
          var _context28;
          var defaultFilter = _filterInstanceProperty(this._options);
          var optionsFilter = options && _filterInstanceProperty(options);
          var filter4;
          if (optionsFilter) {
            if (defaultFilter) {
              filter4 = function filter5(item) {
                return defaultFilter(item) && optionsFilter(item);
              };
            } else {
              filter4 = optionsFilter;
            }
          } else {
            filter4 = defaultFilter;
          }
          _forEachInstanceProperty(_context28 = this._data).call(_context28, callback, {
            filter: filter4,
            order: options && options.order
          });
        }
      }
      /** @inheritDoc */
    }, {
      key: "map",
      value: function map3(callback, options) {
        if (this._data) {
          var _context29;
          var defaultFilter = _filterInstanceProperty(this._options);
          var optionsFilter = options && _filterInstanceProperty(options);
          var filter4;
          if (optionsFilter) {
            if (defaultFilter) {
              filter4 = function filter5(item) {
                return defaultFilter(item) && optionsFilter(item);
              };
            } else {
              filter4 = optionsFilter;
            }
          } else {
            filter4 = defaultFilter;
          }
          return _mapInstanceProperty(_context29 = this._data).call(_context29, callback, {
            filter: filter4,
            order: options && options.order
          });
        } else {
          return [];
        }
      }
      /** @inheritDoc */
    }, {
      key: "getDataSet",
      value: function getDataSet() {
        return this._data.getDataSet();
      }
      /** @inheritDoc */
    }, {
      key: "stream",
      value: function stream(ids) {
        var _context30;
        return this._data.stream(ids || _defineProperty({}, _Symbol$iterator2, _bindInstanceProperty$1(_context30 = _keysInstanceProperty(this._ids)).call(_context30, this._ids)));
      }
      /**
       * Render the instance unusable prior to garbage collection.
       *
       * @remarks
       * The intention of this method is to help discover scenarios where the data
       * view is being used when the programmer thinks it has been garbage collected
       * already. It's stricter version of `dataView.setData(null)`.
       */
    }, {
      key: "dispose",
      value: function dispose() {
        var _this$_data;
        if ((_this$_data = this._data) !== null && _this$_data !== void 0 && _this$_data.off) {
          this._data.off("*", this._listener);
        }
        var message = "This data view has already been disposed of.";
        var replacement2 = {
          get: function get3() {
            throw new Error(message);
          },
          set: function set2() {
            throw new Error(message);
          },
          configurable: false
        };
        var _iterator14 = _createForOfIteratorHelper$6(_Reflect$ownKeys(DataView2.prototype)), _step14;
        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
            var key = _step14.value;
            _Object$defineProperty$1(this, key, replacement2);
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
      }
      /**
       * Event listener. Will propagate all events from the connected data set to the subscribers of the DataView, but will filter the items and only trigger when there are changes in the filtered data set.
       *
       * @param event - The name of the event.
       * @param params - Parameters of the event.
       * @param senderId - Id supplied by the sender.
       */
    }, {
      key: "_onEvent",
      value: function _onEvent(event2, params, senderId) {
        if (!params || !params.items || !this._data) {
          return;
        }
        var ids = params.items;
        var addedIds = [];
        var updatedIds = [];
        var removedIds = [];
        var oldItems = [];
        var updatedItems = [];
        var removedItems = [];
        switch (event2) {
          case "add":
            for (var i2 = 0, len = ids.length; i2 < len; i2++) {
              var id2 = ids[i2];
              var item = this.get(id2);
              if (item) {
                this._ids.add(id2);
                addedIds.push(id2);
              }
            }
            break;
          case "update":
            for (var _i11 = 0, _len12 = ids.length; _i11 < _len12; _i11++) {
              var _id8 = ids[_i11];
              var _item5 = this.get(_id8);
              if (_item5) {
                if (this._ids.has(_id8)) {
                  updatedIds.push(_id8);
                  updatedItems.push(params.data[_i11]);
                  oldItems.push(params.oldData[_i11]);
                } else {
                  this._ids.add(_id8);
                  addedIds.push(_id8);
                }
              } else {
                if (this._ids.has(_id8)) {
                  this._ids.delete(_id8);
                  removedIds.push(_id8);
                  removedItems.push(params.oldData[_i11]);
                }
              }
            }
            break;
          case "remove":
            for (var _i12 = 0, _len13 = ids.length; _i12 < _len13; _i12++) {
              var _id9 = ids[_i12];
              if (this._ids.has(_id9)) {
                this._ids.delete(_id9);
                removedIds.push(_id9);
                removedItems.push(params.oldData[_i12]);
              }
            }
            break;
        }
        this.length += addedIds.length - removedIds.length;
        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          }, senderId);
        }
        if (updatedIds.length) {
          this._trigger("update", {
            items: updatedIds,
            oldData: oldItems,
            data: updatedItems
          }, senderId);
        }
        if (removedIds.length) {
          this._trigger("remove", {
            items: removedIds,
            oldData: removedItems
          }, senderId);
        }
      }
    }]);
    return DataView2;
  }(DataSetPart);
  function isDataSetLike(idProp, v) {
    return _typeof$1(v) === "object" && v !== null && idProp === v.idProp && typeof v.add === "function" && typeof v.clear === "function" && typeof v.distinct === "function" && typeof _forEachInstanceProperty(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof _mapInstanceProperty(v) === "function" && typeof v.max === "function" && typeof v.min === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.remove === "function" && typeof v.setOptions === "function" && typeof v.stream === "function" && typeof v.update === "function" && typeof v.updateOnly === "function";
  }
  function isDataViewLike$1(idProp, v) {
    return _typeof$1(v) === "object" && v !== null && idProp === v.idProp && typeof _forEachInstanceProperty(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof _mapInstanceProperty(v) === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.stream === "function" && isDataSetLike(idProp, v.getDataSet());
  }
  var moment$3 = typeof window !== "undefined" && window["moment"] || requireMoment();
  var momentExports = requireMoment();
  var moment$2 = /* @__PURE__ */ getDefaultExportFromCjs(momentExports);
  var libExports$1 = {};
  var lib$1 = {
    get exports() {
      return libExports$1;
    },
    set exports(v) {
      libExports$1 = v;
    }
  };
  var _default$1 = {};
  var libExports = {};
  var lib = {
    get exports() {
      return libExports;
    },
    set exports(v) {
      libExports = v;
    }
  };
  var _default = {};
  function getDefaultWhiteList$1() {
    var whiteList = {};
    whiteList["align-content"] = false;
    whiteList["align-items"] = false;
    whiteList["align-self"] = false;
    whiteList["alignment-adjust"] = false;
    whiteList["alignment-baseline"] = false;
    whiteList["all"] = false;
    whiteList["anchor-point"] = false;
    whiteList["animation"] = false;
    whiteList["animation-delay"] = false;
    whiteList["animation-direction"] = false;
    whiteList["animation-duration"] = false;
    whiteList["animation-fill-mode"] = false;
    whiteList["animation-iteration-count"] = false;
    whiteList["animation-name"] = false;
    whiteList["animation-play-state"] = false;
    whiteList["animation-timing-function"] = false;
    whiteList["azimuth"] = false;
    whiteList["backface-visibility"] = false;
    whiteList["background"] = true;
    whiteList["background-attachment"] = true;
    whiteList["background-clip"] = true;
    whiteList["background-color"] = true;
    whiteList["background-image"] = true;
    whiteList["background-origin"] = true;
    whiteList["background-position"] = true;
    whiteList["background-repeat"] = true;
    whiteList["background-size"] = true;
    whiteList["baseline-shift"] = false;
    whiteList["binding"] = false;
    whiteList["bleed"] = false;
    whiteList["bookmark-label"] = false;
    whiteList["bookmark-level"] = false;
    whiteList["bookmark-state"] = false;
    whiteList["border"] = true;
    whiteList["border-bottom"] = true;
    whiteList["border-bottom-color"] = true;
    whiteList["border-bottom-left-radius"] = true;
    whiteList["border-bottom-right-radius"] = true;
    whiteList["border-bottom-style"] = true;
    whiteList["border-bottom-width"] = true;
    whiteList["border-collapse"] = true;
    whiteList["border-color"] = true;
    whiteList["border-image"] = true;
    whiteList["border-image-outset"] = true;
    whiteList["border-image-repeat"] = true;
    whiteList["border-image-slice"] = true;
    whiteList["border-image-source"] = true;
    whiteList["border-image-width"] = true;
    whiteList["border-left"] = true;
    whiteList["border-left-color"] = true;
    whiteList["border-left-style"] = true;
    whiteList["border-left-width"] = true;
    whiteList["border-radius"] = true;
    whiteList["border-right"] = true;
    whiteList["border-right-color"] = true;
    whiteList["border-right-style"] = true;
    whiteList["border-right-width"] = true;
    whiteList["border-spacing"] = true;
    whiteList["border-style"] = true;
    whiteList["border-top"] = true;
    whiteList["border-top-color"] = true;
    whiteList["border-top-left-radius"] = true;
    whiteList["border-top-right-radius"] = true;
    whiteList["border-top-style"] = true;
    whiteList["border-top-width"] = true;
    whiteList["border-width"] = true;
    whiteList["bottom"] = false;
    whiteList["box-decoration-break"] = true;
    whiteList["box-shadow"] = true;
    whiteList["box-sizing"] = true;
    whiteList["box-snap"] = true;
    whiteList["box-suppress"] = true;
    whiteList["break-after"] = true;
    whiteList["break-before"] = true;
    whiteList["break-inside"] = true;
    whiteList["caption-side"] = false;
    whiteList["chains"] = false;
    whiteList["clear"] = true;
    whiteList["clip"] = false;
    whiteList["clip-path"] = false;
    whiteList["clip-rule"] = false;
    whiteList["color"] = true;
    whiteList["color-interpolation-filters"] = true;
    whiteList["column-count"] = false;
    whiteList["column-fill"] = false;
    whiteList["column-gap"] = false;
    whiteList["column-rule"] = false;
    whiteList["column-rule-color"] = false;
    whiteList["column-rule-style"] = false;
    whiteList["column-rule-width"] = false;
    whiteList["column-span"] = false;
    whiteList["column-width"] = false;
    whiteList["columns"] = false;
    whiteList["contain"] = false;
    whiteList["content"] = false;
    whiteList["counter-increment"] = false;
    whiteList["counter-reset"] = false;
    whiteList["counter-set"] = false;
    whiteList["crop"] = false;
    whiteList["cue"] = false;
    whiteList["cue-after"] = false;
    whiteList["cue-before"] = false;
    whiteList["cursor"] = false;
    whiteList["direction"] = false;
    whiteList["display"] = true;
    whiteList["display-inside"] = true;
    whiteList["display-list"] = true;
    whiteList["display-outside"] = true;
    whiteList["dominant-baseline"] = false;
    whiteList["elevation"] = false;
    whiteList["empty-cells"] = false;
    whiteList["filter"] = false;
    whiteList["flex"] = false;
    whiteList["flex-basis"] = false;
    whiteList["flex-direction"] = false;
    whiteList["flex-flow"] = false;
    whiteList["flex-grow"] = false;
    whiteList["flex-shrink"] = false;
    whiteList["flex-wrap"] = false;
    whiteList["float"] = false;
    whiteList["float-offset"] = false;
    whiteList["flood-color"] = false;
    whiteList["flood-opacity"] = false;
    whiteList["flow-from"] = false;
    whiteList["flow-into"] = false;
    whiteList["font"] = true;
    whiteList["font-family"] = true;
    whiteList["font-feature-settings"] = true;
    whiteList["font-kerning"] = true;
    whiteList["font-language-override"] = true;
    whiteList["font-size"] = true;
    whiteList["font-size-adjust"] = true;
    whiteList["font-stretch"] = true;
    whiteList["font-style"] = true;
    whiteList["font-synthesis"] = true;
    whiteList["font-variant"] = true;
    whiteList["font-variant-alternates"] = true;
    whiteList["font-variant-caps"] = true;
    whiteList["font-variant-east-asian"] = true;
    whiteList["font-variant-ligatures"] = true;
    whiteList["font-variant-numeric"] = true;
    whiteList["font-variant-position"] = true;
    whiteList["font-weight"] = true;
    whiteList["grid"] = false;
    whiteList["grid-area"] = false;
    whiteList["grid-auto-columns"] = false;
    whiteList["grid-auto-flow"] = false;
    whiteList["grid-auto-rows"] = false;
    whiteList["grid-column"] = false;
    whiteList["grid-column-end"] = false;
    whiteList["grid-column-start"] = false;
    whiteList["grid-row"] = false;
    whiteList["grid-row-end"] = false;
    whiteList["grid-row-start"] = false;
    whiteList["grid-template"] = false;
    whiteList["grid-template-areas"] = false;
    whiteList["grid-template-columns"] = false;
    whiteList["grid-template-rows"] = false;
    whiteList["hanging-punctuation"] = false;
    whiteList["height"] = true;
    whiteList["hyphens"] = false;
    whiteList["icon"] = false;
    whiteList["image-orientation"] = false;
    whiteList["image-resolution"] = false;
    whiteList["ime-mode"] = false;
    whiteList["initial-letters"] = false;
    whiteList["inline-box-align"] = false;
    whiteList["justify-content"] = false;
    whiteList["justify-items"] = false;
    whiteList["justify-self"] = false;
    whiteList["left"] = false;
    whiteList["letter-spacing"] = true;
    whiteList["lighting-color"] = true;
    whiteList["line-box-contain"] = false;
    whiteList["line-break"] = false;
    whiteList["line-grid"] = false;
    whiteList["line-height"] = false;
    whiteList["line-snap"] = false;
    whiteList["line-stacking"] = false;
    whiteList["line-stacking-ruby"] = false;
    whiteList["line-stacking-shift"] = false;
    whiteList["line-stacking-strategy"] = false;
    whiteList["list-style"] = true;
    whiteList["list-style-image"] = true;
    whiteList["list-style-position"] = true;
    whiteList["list-style-type"] = true;
    whiteList["margin"] = true;
    whiteList["margin-bottom"] = true;
    whiteList["margin-left"] = true;
    whiteList["margin-right"] = true;
    whiteList["margin-top"] = true;
    whiteList["marker-offset"] = false;
    whiteList["marker-side"] = false;
    whiteList["marks"] = false;
    whiteList["mask"] = false;
    whiteList["mask-box"] = false;
    whiteList["mask-box-outset"] = false;
    whiteList["mask-box-repeat"] = false;
    whiteList["mask-box-slice"] = false;
    whiteList["mask-box-source"] = false;
    whiteList["mask-box-width"] = false;
    whiteList["mask-clip"] = false;
    whiteList["mask-image"] = false;
    whiteList["mask-origin"] = false;
    whiteList["mask-position"] = false;
    whiteList["mask-repeat"] = false;
    whiteList["mask-size"] = false;
    whiteList["mask-source-type"] = false;
    whiteList["mask-type"] = false;
    whiteList["max-height"] = true;
    whiteList["max-lines"] = false;
    whiteList["max-width"] = true;
    whiteList["min-height"] = true;
    whiteList["min-width"] = true;
    whiteList["move-to"] = false;
    whiteList["nav-down"] = false;
    whiteList["nav-index"] = false;
    whiteList["nav-left"] = false;
    whiteList["nav-right"] = false;
    whiteList["nav-up"] = false;
    whiteList["object-fit"] = false;
    whiteList["object-position"] = false;
    whiteList["opacity"] = false;
    whiteList["order"] = false;
    whiteList["orphans"] = false;
    whiteList["outline"] = false;
    whiteList["outline-color"] = false;
    whiteList["outline-offset"] = false;
    whiteList["outline-style"] = false;
    whiteList["outline-width"] = false;
    whiteList["overflow"] = false;
    whiteList["overflow-wrap"] = false;
    whiteList["overflow-x"] = false;
    whiteList["overflow-y"] = false;
    whiteList["padding"] = true;
    whiteList["padding-bottom"] = true;
    whiteList["padding-left"] = true;
    whiteList["padding-right"] = true;
    whiteList["padding-top"] = true;
    whiteList["page"] = false;
    whiteList["page-break-after"] = false;
    whiteList["page-break-before"] = false;
    whiteList["page-break-inside"] = false;
    whiteList["page-policy"] = false;
    whiteList["pause"] = false;
    whiteList["pause-after"] = false;
    whiteList["pause-before"] = false;
    whiteList["perspective"] = false;
    whiteList["perspective-origin"] = false;
    whiteList["pitch"] = false;
    whiteList["pitch-range"] = false;
    whiteList["play-during"] = false;
    whiteList["position"] = false;
    whiteList["presentation-level"] = false;
    whiteList["quotes"] = false;
    whiteList["region-fragment"] = false;
    whiteList["resize"] = false;
    whiteList["rest"] = false;
    whiteList["rest-after"] = false;
    whiteList["rest-before"] = false;
    whiteList["richness"] = false;
    whiteList["right"] = false;
    whiteList["rotation"] = false;
    whiteList["rotation-point"] = false;
    whiteList["ruby-align"] = false;
    whiteList["ruby-merge"] = false;
    whiteList["ruby-position"] = false;
    whiteList["shape-image-threshold"] = false;
    whiteList["shape-outside"] = false;
    whiteList["shape-margin"] = false;
    whiteList["size"] = false;
    whiteList["speak"] = false;
    whiteList["speak-as"] = false;
    whiteList["speak-header"] = false;
    whiteList["speak-numeral"] = false;
    whiteList["speak-punctuation"] = false;
    whiteList["speech-rate"] = false;
    whiteList["stress"] = false;
    whiteList["string-set"] = false;
    whiteList["tab-size"] = false;
    whiteList["table-layout"] = false;
    whiteList["text-align"] = true;
    whiteList["text-align-last"] = true;
    whiteList["text-combine-upright"] = true;
    whiteList["text-decoration"] = true;
    whiteList["text-decoration-color"] = true;
    whiteList["text-decoration-line"] = true;
    whiteList["text-decoration-skip"] = true;
    whiteList["text-decoration-style"] = true;
    whiteList["text-emphasis"] = true;
    whiteList["text-emphasis-color"] = true;
    whiteList["text-emphasis-position"] = true;
    whiteList["text-emphasis-style"] = true;
    whiteList["text-height"] = true;
    whiteList["text-indent"] = true;
    whiteList["text-justify"] = true;
    whiteList["text-orientation"] = true;
    whiteList["text-overflow"] = true;
    whiteList["text-shadow"] = true;
    whiteList["text-space-collapse"] = true;
    whiteList["text-transform"] = true;
    whiteList["text-underline-position"] = true;
    whiteList["text-wrap"] = true;
    whiteList["top"] = false;
    whiteList["transform"] = false;
    whiteList["transform-origin"] = false;
    whiteList["transform-style"] = false;
    whiteList["transition"] = false;
    whiteList["transition-delay"] = false;
    whiteList["transition-duration"] = false;
    whiteList["transition-property"] = false;
    whiteList["transition-timing-function"] = false;
    whiteList["unicode-bidi"] = false;
    whiteList["vertical-align"] = false;
    whiteList["visibility"] = false;
    whiteList["voice-balance"] = false;
    whiteList["voice-duration"] = false;
    whiteList["voice-family"] = false;
    whiteList["voice-pitch"] = false;
    whiteList["voice-range"] = false;
    whiteList["voice-rate"] = false;
    whiteList["voice-stress"] = false;
    whiteList["voice-volume"] = false;
    whiteList["volume"] = false;
    whiteList["white-space"] = false;
    whiteList["widows"] = false;
    whiteList["width"] = true;
    whiteList["will-change"] = false;
    whiteList["word-break"] = true;
    whiteList["word-spacing"] = true;
    whiteList["word-wrap"] = true;
    whiteList["wrap-flow"] = false;
    whiteList["wrap-through"] = false;
    whiteList["writing-mode"] = false;
    whiteList["z-index"] = false;
    return whiteList;
  }
  function onAttr(name, value, options) {
  }
  function onIgnoreAttr(name, value, options) {
  }
  var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;
  function safeAttrValue$1(name, value) {
    if (REGEXP_URL_JAVASCRIPT.test(value))
      return "";
    return value;
  }
  _default.whiteList = getDefaultWhiteList$1();
  _default.getDefaultWhiteList = getDefaultWhiteList$1;
  _default.onAttr = onAttr;
  _default.onIgnoreAttr = onIgnoreAttr;
  _default.safeAttrValue = safeAttrValue$1;
  var util$1 = {
    indexOf: function(arr, item) {
      var i2, j;
      if (Array.prototype.indexOf) {
        return arr.indexOf(item);
      }
      for (i2 = 0, j = arr.length; i2 < j; i2++) {
        if (arr[i2] === item) {
          return i2;
        }
      }
      return -1;
    },
    forEach: function(arr, fn, scope) {
      var i2, j;
      if (Array.prototype.forEach) {
        return arr.forEach(fn, scope);
      }
      for (i2 = 0, j = arr.length; i2 < j; i2++) {
        fn.call(scope, arr[i2], i2, arr);
      }
    },
    trim: function(str) {
      if (String.prototype.trim) {
        return str.trim();
      }
      return str.replace(/(^\s*)|(\s*$)/g, "");
    },
    trimRight: function(str) {
      if (String.prototype.trimRight) {
        return str.trimRight();
      }
      return str.replace(/(\s*$)/g, "");
    }
  };
  var _$3 = util$1;
  function parseStyle$1(css2, onAttr2) {
    css2 = _$3.trimRight(css2);
    if (css2[css2.length - 1] !== ";")
      css2 += ";";
    var cssLength = css2.length;
    var isParenthesisOpen = false;
    var lastPos = 0;
    var i2 = 0;
    var retCSS = "";
    function addNewAttr() {
      if (!isParenthesisOpen) {
        var source = _$3.trim(css2.slice(lastPos, i2));
        var j2 = source.indexOf(":");
        if (j2 !== -1) {
          var name = _$3.trim(source.slice(0, j2));
          var value = _$3.trim(source.slice(j2 + 1));
          if (name) {
            var ret = onAttr2(lastPos, retCSS.length, name, value, source);
            if (ret)
              retCSS += ret + "; ";
          }
        }
      }
      lastPos = i2 + 1;
    }
    for (; i2 < cssLength; i2++) {
      var c = css2[i2];
      if (c === "/" && css2[i2 + 1] === "*") {
        var j = css2.indexOf("*/", i2 + 2);
        if (j === -1)
          break;
        i2 = j + 1;
        lastPos = i2 + 1;
        isParenthesisOpen = false;
      } else if (c === "(") {
        isParenthesisOpen = true;
      } else if (c === ")") {
        isParenthesisOpen = false;
      } else if (c === ";") {
        if (isParenthesisOpen)
          ;
        else {
          addNewAttr();
        }
      } else if (c === "\n") {
        addNewAttr();
      }
    }
    return _$3.trim(retCSS);
  }
  var parser$2 = parseStyle$1;
  var DEFAULT$1 = _default;
  var parseStyle = parser$2;
  function isNull$1(obj) {
    return obj === void 0 || obj === null;
  }
  function shallowCopyObject$1(obj) {
    var ret = {};
    for (var i2 in obj) {
      ret[i2] = obj[i2];
    }
    return ret;
  }
  function FilterCSS$2(options) {
    options = shallowCopyObject$1(options || {});
    options.whiteList = options.whiteList || DEFAULT$1.whiteList;
    options.onAttr = options.onAttr || DEFAULT$1.onAttr;
    options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT$1.onIgnoreAttr;
    options.safeAttrValue = options.safeAttrValue || DEFAULT$1.safeAttrValue;
    this.options = options;
  }
  FilterCSS$2.prototype.process = function(css2) {
    css2 = css2 || "";
    css2 = css2.toString();
    if (!css2)
      return "";
    var me = this;
    var options = me.options;
    var whiteList = options.whiteList;
    var onAttr2 = options.onAttr;
    var onIgnoreAttr2 = options.onIgnoreAttr;
    var safeAttrValue2 = options.safeAttrValue;
    var retCSS = parseStyle(css2, function(sourcePosition, position, name, value, source) {
      var check2 = whiteList[name];
      var isWhite = false;
      if (check2 === true)
        isWhite = check2;
      else if (typeof check2 === "function")
        isWhite = check2(value);
      else if (check2 instanceof RegExp)
        isWhite = check2.test(value);
      if (isWhite !== true)
        isWhite = false;
      value = safeAttrValue2(name, value);
      if (!value)
        return;
      var opts = {
        position,
        sourcePosition,
        source,
        isWhite
      };
      if (isWhite) {
        var ret = onAttr2(name, value, opts);
        if (isNull$1(ret)) {
          return name + ":" + value;
        } else {
          return ret;
        }
      } else {
        var ret = onIgnoreAttr2(name, value, opts);
        if (!isNull$1(ret)) {
          return ret;
        }
      }
    });
    return retCSS;
  };
  var css = FilterCSS$2;
  (function(module, exports) {
    var DEFAULT2 = _default;
    var FilterCSS2 = css;
    function filterCSS(html2, options) {
      var xss2 = new FilterCSS2(options);
      return xss2.process(html2);
    }
    exports = module.exports = filterCSS;
    exports.FilterCSS = FilterCSS2;
    for (var i2 in DEFAULT2)
      exports[i2] = DEFAULT2[i2];
    if (typeof window !== "undefined") {
      window.filterCSS = module.exports;
    }
  })(lib, libExports);
  var util = {
    indexOf: function(arr, item) {
      var i2, j;
      if (Array.prototype.indexOf) {
        return arr.indexOf(item);
      }
      for (i2 = 0, j = arr.length; i2 < j; i2++) {
        if (arr[i2] === item) {
          return i2;
        }
      }
      return -1;
    },
    forEach: function(arr, fn, scope) {
      var i2, j;
      if (Array.prototype.forEach) {
        return arr.forEach(fn, scope);
      }
      for (i2 = 0, j = arr.length; i2 < j; i2++) {
        fn.call(scope, arr[i2], i2, arr);
      }
    },
    trim: function(str) {
      if (String.prototype.trim) {
        return str.trim();
      }
      return str.replace(/(^\s*)|(\s*$)/g, "");
    },
    spaceIndex: function(str) {
      var reg = /\s|\n|\t/;
      var match2 = reg.exec(str);
      return match2 ? match2.index : -1;
    }
  };
  var FilterCSS$1 = libExports.FilterCSS;
  var getDefaultCSSWhiteList = libExports.getDefaultWhiteList;
  var _$2 = util;
  function getDefaultWhiteList() {
    return {
      a: ["target", "href", "title"],
      abbr: ["title"],
      address: [],
      area: ["shape", "coords", "href", "alt"],
      article: [],
      aside: [],
      audio: [
        "autoplay",
        "controls",
        "crossorigin",
        "loop",
        "muted",
        "preload",
        "src"
      ],
      b: [],
      bdi: ["dir"],
      bdo: ["dir"],
      big: [],
      blockquote: ["cite"],
      br: [],
      caption: [],
      center: [],
      cite: [],
      code: [],
      col: ["align", "valign", "span", "width"],
      colgroup: ["align", "valign", "span", "width"],
      dd: [],
      del: ["datetime"],
      details: ["open"],
      div: [],
      dl: [],
      dt: [],
      em: [],
      figcaption: [],
      figure: [],
      font: ["color", "size", "face"],
      footer: [],
      h1: [],
      h2: [],
      h3: [],
      h4: [],
      h5: [],
      h6: [],
      header: [],
      hr: [],
      i: [],
      img: ["src", "alt", "title", "width", "height"],
      ins: ["datetime"],
      li: [],
      mark: [],
      nav: [],
      ol: [],
      p: [],
      pre: [],
      s: [],
      section: [],
      small: [],
      span: [],
      sub: [],
      summary: [],
      sup: [],
      strong: [],
      strike: [],
      table: ["width", "border", "align", "valign"],
      tbody: ["align", "valign"],
      td: ["width", "rowspan", "colspan", "align", "valign"],
      tfoot: ["align", "valign"],
      th: ["width", "rowspan", "colspan", "align", "valign"],
      thead: ["align", "valign"],
      tr: ["rowspan", "align", "valign"],
      tt: [],
      u: [],
      ul: [],
      video: [
        "autoplay",
        "controls",
        "crossorigin",
        "loop",
        "muted",
        "playsinline",
        "poster",
        "preload",
        "src",
        "height",
        "width"
      ]
    };
  }
  var defaultCSSFilter = new FilterCSS$1();
  function onTag(tag, html2, options) {
  }
  function onIgnoreTag(tag, html2, options) {
  }
  function onTagAttr(tag, name, value) {
  }
  function onIgnoreTagAttr(tag, name, value) {
  }
  function escapeHtml(html2) {
    return html2.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
  }
  function safeAttrValue(tag, name, value, cssFilter) {
    value = friendlyAttrValue(value);
    if (name === "href" || name === "src") {
      value = _$2.trim(value);
      if (value === "#")
        return "#";
      if (!(value.substr(0, 7) === "http://" || value.substr(0, 8) === "https://" || value.substr(0, 7) === "mailto:" || value.substr(0, 4) === "tel:" || value.substr(0, 11) === "data:image/" || value.substr(0, 6) === "ftp://" || value.substr(0, 2) === "./" || value.substr(0, 3) === "../" || value[0] === "#" || value[0] === "/")) {
        return "";
      }
    } else if (name === "background") {
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return "";
      }
    } else if (name === "style") {
      REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
        return "";
      }
      REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
        REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
        if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
          return "";
        }
      }
      if (cssFilter !== false) {
        cssFilter = cssFilter || defaultCSSFilter;
        value = cssFilter.process(value);
      }
    }
    value = escapeAttrValue(value);
    return value;
  }
  var REGEXP_LT = /</g;
  var REGEXP_GT = />/g;
  var REGEXP_QUOTE = /"/g;
  var REGEXP_QUOTE_2 = /&quot;/g;
  var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
  var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
  var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
  var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a):/gi;
  var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
  var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;
  function escapeQuote(str) {
    return str.replace(REGEXP_QUOTE, "&quot;");
  }
  function unescapeQuote(str) {
    return str.replace(REGEXP_QUOTE_2, '"');
  }
  function escapeHtmlEntities(str) {
    return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str2, code) {
      return code[0] === "x" || code[0] === "X" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));
    });
  }
  function escapeDangerHtml5Entities(str) {
    return str.replace(REGEXP_ATTR_VALUE_COLON, ":").replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
  }
  function clearNonPrintableCharacter(str) {
    var str2 = "";
    for (var i2 = 0, len = str.length; i2 < len; i2++) {
      str2 += str.charCodeAt(i2) < 32 ? " " : str.charAt(i2);
    }
    return _$2.trim(str2);
  }
  function friendlyAttrValue(str) {
    str = unescapeQuote(str);
    str = escapeHtmlEntities(str);
    str = escapeDangerHtml5Entities(str);
    str = clearNonPrintableCharacter(str);
    return str;
  }
  function escapeAttrValue(str) {
    str = escapeQuote(str);
    str = escapeHtml(str);
    return str;
  }
  function onIgnoreTagStripAll() {
    return "";
  }
  function StripTagBody(tags, next2) {
    if (typeof next2 !== "function") {
      next2 = function() {
      };
    }
    var isRemoveAllTag = !Array.isArray(tags);
    function isRemoveTag(tag) {
      if (isRemoveAllTag)
        return true;
      return _$2.indexOf(tags, tag) !== -1;
    }
    var removeList = [];
    var posStart = false;
    return {
      onIgnoreTag: function(tag, html2, options) {
        if (isRemoveTag(tag)) {
          if (options.isClosing) {
            var ret = "[/removed]";
            var end = options.position + ret.length;
            removeList.push([
              posStart !== false ? posStart : options.position,
              end
            ]);
            posStart = false;
            return ret;
          } else {
            if (!posStart) {
              posStart = options.position;
            }
            return "[removed]";
          }
        } else {
          return next2(tag, html2, options);
        }
      },
      remove: function(html2) {
        var rethtml = "";
        var lastPos = 0;
        _$2.forEach(removeList, function(pos) {
          rethtml += html2.slice(lastPos, pos[0]);
          lastPos = pos[1];
        });
        rethtml += html2.slice(lastPos);
        return rethtml;
      }
    };
  }
  function stripCommentTag(html2) {
    var retHtml = "";
    var lastPos = 0;
    while (lastPos < html2.length) {
      var i2 = html2.indexOf("<!--", lastPos);
      if (i2 === -1) {
        retHtml += html2.slice(lastPos);
        break;
      }
      retHtml += html2.slice(lastPos, i2);
      var j = html2.indexOf("-->", i2);
      if (j === -1) {
        break;
      }
      lastPos = j + 3;
    }
    return retHtml;
  }
  function stripBlankChar(html2) {
    var chars = html2.split("");
    chars = chars.filter(function(char) {
      var c = char.charCodeAt(0);
      if (c === 127)
        return false;
      if (c <= 31) {
        if (c === 10 || c === 13)
          return true;
        return false;
      }
      return true;
    });
    return chars.join("");
  }
  _default$1.whiteList = getDefaultWhiteList();
  _default$1.getDefaultWhiteList = getDefaultWhiteList;
  _default$1.onTag = onTag;
  _default$1.onIgnoreTag = onIgnoreTag;
  _default$1.onTagAttr = onTagAttr;
  _default$1.onIgnoreTagAttr = onIgnoreTagAttr;
  _default$1.safeAttrValue = safeAttrValue;
  _default$1.escapeHtml = escapeHtml;
  _default$1.escapeQuote = escapeQuote;
  _default$1.unescapeQuote = unescapeQuote;
  _default$1.escapeHtmlEntities = escapeHtmlEntities;
  _default$1.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
  _default$1.clearNonPrintableCharacter = clearNonPrintableCharacter;
  _default$1.friendlyAttrValue = friendlyAttrValue;
  _default$1.escapeAttrValue = escapeAttrValue;
  _default$1.onIgnoreTagStripAll = onIgnoreTagStripAll;
  _default$1.StripTagBody = StripTagBody;
  _default$1.stripCommentTag = stripCommentTag;
  _default$1.stripBlankChar = stripBlankChar;
  _default$1.cssFilter = defaultCSSFilter;
  _default$1.getDefaultCSSWhiteList = getDefaultCSSWhiteList;
  var parser$1 = {};
  var _$1 = util;
  function getTagName(html2) {
    var i2 = _$1.spaceIndex(html2);
    var tagName;
    if (i2 === -1) {
      tagName = html2.slice(1, -1);
    } else {
      tagName = html2.slice(1, i2 + 1);
    }
    tagName = _$1.trim(tagName).toLowerCase();
    if (tagName.slice(0, 1) === "/")
      tagName = tagName.slice(1);
    if (tagName.slice(-1) === "/")
      tagName = tagName.slice(0, -1);
    return tagName;
  }
  function isClosing(html2) {
    return html2.slice(0, 2) === "</";
  }
  function parseTag$1(html2, onTag2, escapeHtml2) {
    var rethtml = "";
    var lastPos = 0;
    var tagStart = false;
    var quoteStart = false;
    var currentPos = 0;
    var len = html2.length;
    var currentTagName = "";
    var currentHtml = "";
    chariterator:
      for (currentPos = 0; currentPos < len; currentPos++) {
        var c = html2.charAt(currentPos);
        if (tagStart === false) {
          if (c === "<") {
            tagStart = currentPos;
            continue;
          }
        } else {
          if (quoteStart === false) {
            if (c === "<") {
              rethtml += escapeHtml2(html2.slice(lastPos, currentPos));
              tagStart = currentPos;
              lastPos = currentPos;
              continue;
            }
            if (c === ">" || currentPos === len - 1) {
              rethtml += escapeHtml2(html2.slice(lastPos, tagStart));
              currentHtml = html2.slice(tagStart, currentPos + 1);
              currentTagName = getTagName(currentHtml);
              rethtml += onTag2(
                tagStart,
                rethtml.length,
                currentTagName,
                currentHtml,
                isClosing(currentHtml)
              );
              lastPos = currentPos + 1;
              tagStart = false;
              continue;
            }
            if (c === '"' || c === "'") {
              var i2 = 1;
              var ic = html2.charAt(currentPos - i2);
              while (ic.trim() === "" || ic === "=") {
                if (ic === "=") {
                  quoteStart = c;
                  continue chariterator;
                }
                ic = html2.charAt(currentPos - ++i2);
              }
            }
          } else {
            if (c === quoteStart) {
              quoteStart = false;
              continue;
            }
          }
        }
      }
    if (lastPos < len) {
      rethtml += escapeHtml2(html2.substr(lastPos));
    }
    return rethtml;
  }
  var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\_:.-]/gim;
  function parseAttr$1(html2, onAttr2) {
    var lastPos = 0;
    var lastMarkPos = 0;
    var retAttrs = [];
    var tmpName = false;
    var len = html2.length;
    function addAttr(name, value) {
      name = _$1.trim(name);
      name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
      if (name.length < 1)
        return;
      var ret = onAttr2(name, value || "");
      if (ret)
        retAttrs.push(ret);
    }
    for (var i2 = 0; i2 < len; i2++) {
      var c = html2.charAt(i2);
      var v, j;
      if (tmpName === false && c === "=") {
        tmpName = html2.slice(lastPos, i2);
        lastPos = i2 + 1;
        lastMarkPos = html2.charAt(lastPos) === '"' || html2.charAt(lastPos) === "'" ? lastPos : findNextQuotationMark(html2, i2 + 1);
        continue;
      }
      if (tmpName !== false) {
        if (i2 === lastMarkPos) {
          j = html2.indexOf(c, i2 + 1);
          if (j === -1) {
            break;
          } else {
            v = _$1.trim(html2.slice(lastMarkPos + 1, j));
            addAttr(tmpName, v);
            tmpName = false;
            i2 = j;
            lastPos = i2 + 1;
            continue;
          }
        }
      }
      if (/\s|\n|\t/.test(c)) {
        html2 = html2.replace(/\s|\n|\t/g, " ");
        if (tmpName === false) {
          j = findNextEqual(html2, i2);
          if (j === -1) {
            v = _$1.trim(html2.slice(lastPos, i2));
            addAttr(v);
            tmpName = false;
            lastPos = i2 + 1;
            continue;
          } else {
            i2 = j - 1;
            continue;
          }
        } else {
          j = findBeforeEqual(html2, i2 - 1);
          if (j === -1) {
            v = _$1.trim(html2.slice(lastPos, i2));
            v = stripQuoteWrap(v);
            addAttr(tmpName, v);
            tmpName = false;
            lastPos = i2 + 1;
            continue;
          } else {
            continue;
          }
        }
      }
    }
    if (lastPos < html2.length) {
      if (tmpName === false) {
        addAttr(html2.slice(lastPos));
      } else {
        addAttr(tmpName, stripQuoteWrap(_$1.trim(html2.slice(lastPos))));
      }
    }
    return _$1.trim(retAttrs.join(" "));
  }
  function findNextEqual(str, i2) {
    for (; i2 < str.length; i2++) {
      var c = str[i2];
      if (c === " ")
        continue;
      if (c === "=")
        return i2;
      return -1;
    }
  }
  function findNextQuotationMark(str, i2) {
    for (; i2 < str.length; i2++) {
      var c = str[i2];
      if (c === " ")
        continue;
      if (c === "'" || c === '"')
        return i2;
      return -1;
    }
  }
  function findBeforeEqual(str, i2) {
    for (; i2 > 0; i2--) {
      var c = str[i2];
      if (c === " ")
        continue;
      if (c === "=")
        return i2;
      return -1;
    }
  }
  function isQuoteWrapString(text) {
    if (text[0] === '"' && text[text.length - 1] === '"' || text[0] === "'" && text[text.length - 1] === "'") {
      return true;
    } else {
      return false;
    }
  }
  function stripQuoteWrap(text) {
    if (isQuoteWrapString(text)) {
      return text.substr(1, text.length - 2);
    } else {
      return text;
    }
  }
  parser$1.parseTag = parseTag$1;
  parser$1.parseAttr = parseAttr$1;
  var FilterCSS = libExports.FilterCSS;
  var DEFAULT = _default$1;
  var parser = parser$1;
  var parseTag = parser.parseTag;
  var parseAttr = parser.parseAttr;
  var _ = util;
  function isNull(obj) {
    return obj === void 0 || obj === null;
  }
  function getAttrs(html2) {
    var i2 = _.spaceIndex(html2);
    if (i2 === -1) {
      return {
        html: "",
        closing: html2[html2.length - 2] === "/"
      };
    }
    html2 = _.trim(html2.slice(i2 + 1, -1));
    var isClosing2 = html2[html2.length - 1] === "/";
    if (isClosing2)
      html2 = _.trim(html2.slice(0, -1));
    return {
      html: html2,
      closing: isClosing2
    };
  }
  function shallowCopyObject(obj) {
    var ret = {};
    for (var i2 in obj) {
      ret[i2] = obj[i2];
    }
    return ret;
  }
  function keysToLowerCase(obj) {
    var ret = {};
    for (var i2 in obj) {
      if (Array.isArray(obj[i2])) {
        ret[i2.toLowerCase()] = obj[i2].map(function(item) {
          return item.toLowerCase();
        });
      } else {
        ret[i2.toLowerCase()] = obj[i2];
      }
    }
    return ret;
  }
  function FilterXSS(options) {
    options = shallowCopyObject(options || {});
    if (options.stripIgnoreTag) {
      if (options.onIgnoreTag) {
        console.error(
          'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
        );
      }
      options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
    }
    if (options.whiteList || options.allowList) {
      options.whiteList = keysToLowerCase(options.whiteList || options.allowList);
    } else {
      options.whiteList = DEFAULT.whiteList;
    }
    options.onTag = options.onTag || DEFAULT.onTag;
    options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
    options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
    options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
    options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
    options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
    this.options = options;
    if (options.css === false) {
      this.cssFilter = false;
    } else {
      options.css = options.css || {};
      this.cssFilter = new FilterCSS(options.css);
    }
  }
  FilterXSS.prototype.process = function(html2) {
    html2 = html2 || "";
    html2 = html2.toString();
    if (!html2)
      return "";
    var me = this;
    var options = me.options;
    var whiteList = options.whiteList;
    var onTag2 = options.onTag;
    var onIgnoreTag2 = options.onIgnoreTag;
    var onTagAttr2 = options.onTagAttr;
    var onIgnoreTagAttr2 = options.onIgnoreTagAttr;
    var safeAttrValue2 = options.safeAttrValue;
    var escapeHtml2 = options.escapeHtml;
    var cssFilter = me.cssFilter;
    if (options.stripBlankChar) {
      html2 = DEFAULT.stripBlankChar(html2);
    }
    if (!options.allowCommentTag) {
      html2 = DEFAULT.stripCommentTag(html2);
    }
    var stripIgnoreTagBody = false;
    if (options.stripIgnoreTagBody) {
      stripIgnoreTagBody = DEFAULT.StripTagBody(
        options.stripIgnoreTagBody,
        onIgnoreTag2
      );
      onIgnoreTag2 = stripIgnoreTagBody.onIgnoreTag;
    }
    var retHtml = parseTag(
      html2,
      function(sourcePosition, position, tag, html3, isClosing2) {
        var info = {
          sourcePosition,
          position,
          isClosing: isClosing2,
          isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag)
        };
        var ret = onTag2(tag, html3, info);
        if (!isNull(ret))
          return ret;
        if (info.isWhite) {
          if (info.isClosing) {
            return "</" + tag + ">";
          }
          var attrs = getAttrs(html3);
          var whiteAttrList = whiteList[tag];
          var attrsHtml = parseAttr(attrs.html, function(name, value) {
            var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
            var ret2 = onTagAttr2(tag, name, value, isWhiteAttr);
            if (!isNull(ret2))
              return ret2;
            if (isWhiteAttr) {
              value = safeAttrValue2(tag, name, value, cssFilter);
              if (value) {
                return name + '="' + value + '"';
              } else {
                return name;
              }
            } else {
              ret2 = onIgnoreTagAttr2(tag, name, value, isWhiteAttr);
              if (!isNull(ret2))
                return ret2;
              return;
            }
          });
          html3 = "<" + tag;
          if (attrsHtml)
            html3 += " " + attrsHtml;
          if (attrs.closing)
            html3 += " /";
          html3 += ">";
          return html3;
        } else {
          ret = onIgnoreTag2(tag, html3, info);
          if (!isNull(ret))
            return ret;
          return escapeHtml2(html3);
        }
      },
      escapeHtml2
    );
    if (stripIgnoreTagBody) {
      retHtml = stripIgnoreTagBody.remove(retHtml);
    }
    return retHtml;
  };
  var xss = FilterXSS;
  (function(module, exports) {
    var DEFAULT2 = _default$1;
    var parser2 = parser$1;
    var FilterXSS2 = xss;
    function filterXSS(html2, options) {
      var xss2 = new FilterXSS2(options);
      return xss2.process(html2);
    }
    exports = module.exports = filterXSS;
    exports.filterXSS = filterXSS;
    exports.FilterXSS = FilterXSS2;
    (function() {
      for (var i2 in DEFAULT2) {
        exports[i2] = DEFAULT2[i2];
      }
      for (var j in parser2) {
        exports[j] = parser2[j];
      }
    })();
    if (typeof window !== "undefined") {
      window.filterXSS = module.exports;
    }
    function isWorkerEnv() {
      return typeof self !== "undefined" && typeof DedicatedWorkerGlobalScope !== "undefined" && self instanceof DedicatedWorkerGlobalScope;
    }
    if (isWorkerEnv()) {
      self.filterXSS = module.exports;
    }
  })(lib$1, libExports$1);
  var xssFilter = libExports$1;
  function ownKeys2(object2, enumerableOnly) {
    var keys4 = _Object$keys(object2);
    if (_Object$getOwnPropertySymbols) {
      var symbols = _Object$getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
        return _Object$getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys4.push.apply(keys4, symbols);
    }
    return keys4;
  }
  function _objectSpread(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var _context8, _context9;
      var source = null != arguments[i2] ? arguments[i2] : {};
      i2 % 2 ? _forEachInstanceProperty(_context8 = ownKeys2(Object(source), true)).call(_context8, function(key) {
        _defineProperty(target, key, source[key]);
      }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context9 = ownKeys2(Object(source))).call(_context9, function(key) {
        _Object$defineProperty$1(target, key, _Object$getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function isDataViewLike(obj) {
    var _obj$idProp;
    if (!obj) {
      return false;
    }
    var idProp = (_obj$idProp = obj.idProp) !== null && _obj$idProp !== void 0 ? _obj$idProp : obj._idProp;
    if (!idProp) {
      return false;
    }
    return isDataViewLike$1(idProp, obj);
  }
  var ASPDateRegex = /^\/?Date\((-?\d+)/i;
  var NumericRegex = /^\d+$/;
  function convert(object2, type) {
    var match2;
    if (object2 === void 0) {
      return void 0;
    }
    if (object2 === null) {
      return null;
    }
    if (!type) {
      return object2;
    }
    if (!(typeof type === "string") && !(type instanceof String)) {
      throw new Error("Type must be a string");
    }
    switch (type) {
      case "boolean":
      case "Boolean":
        return Boolean(object2);
      case "number":
      case "Number":
        if (isString(object2) && !isNaN(Date.parse(object2))) {
          return moment$2(object2).valueOf();
        } else {
          return Number(object2.valueOf());
        }
      case "string":
      case "String":
        return String(object2);
      case "Date":
        try {
          return convert(object2, "Moment").toDate();
        } catch (e) {
          if (e instanceof TypeError) {
            throw new TypeError("Cannot convert object of type " + getType(object2) + " to type " + type);
          } else {
            throw e;
          }
        }
      case "Moment":
        if (isNumber(object2)) {
          return moment$2(object2);
        }
        if (object2 instanceof Date) {
          return moment$2(object2.valueOf());
        } else if (moment$2.isMoment(object2)) {
          return moment$2(object2);
        }
        if (isString(object2)) {
          match2 = ASPDateRegex.exec(object2);
          if (match2) {
            return moment$2(Number(match2[1]));
          }
          match2 = NumericRegex.exec(object2);
          if (match2) {
            return moment$2(Number(object2));
          }
          return moment$2(object2);
        } else {
          throw new TypeError("Cannot convert object of type " + getType(object2) + " to type " + type);
        }
      case "ISODate":
        if (isNumber(object2)) {
          return new Date(object2);
        } else if (object2 instanceof Date) {
          return object2.toISOString();
        } else if (moment$2.isMoment(object2)) {
          return object2.toDate().toISOString();
        } else if (isString(object2)) {
          match2 = ASPDateRegex.exec(object2);
          if (match2) {
            return new Date(Number(match2[1])).toISOString();
          } else {
            return moment$2(object2).format();
          }
        } else {
          throw new Error("Cannot convert object of type " + getType(object2) + " to type ISODate");
        }
      case "ASPDate":
        if (isNumber(object2)) {
          return "/Date(" + object2 + ")/";
        } else if (object2 instanceof Date || moment$2.isMoment(object2)) {
          return "/Date(" + object2.valueOf() + ")/";
        } else if (isString(object2)) {
          match2 = ASPDateRegex.exec(object2);
          var value;
          if (match2) {
            value = new Date(Number(match2[1])).valueOf();
          } else {
            value = new Date(object2).valueOf();
          }
          return "/Date(" + value + ")/";
        } else {
          throw new Error("Cannot convert object of type " + getType(object2) + " to type ASPDate");
        }
      default:
        throw new Error("Unknown type ".concat(type));
    }
  }
  function typeCoerceDataSet(rawDS) {
    var _context, _context3, _context4, _context5, _context6, _context7;
    var type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      start: "Date",
      end: "Date"
    };
    var idProp = rawDS._idProp;
    var coercedDS = new DataSet({
      fieldId: idProp
    });
    var pipe = _mapInstanceProperty(_context = createNewDataPipeFrom(rawDS)).call(_context, function(item) {
      var _context2;
      return _reduceInstanceProperty(_context2 = _Object$keys(item)).call(_context2, function(acc, key) {
        acc[key] = convert(item[key], type[key]);
        return acc;
      }, {});
    }).to(coercedDS);
    pipe.all().start();
    return {
      // Write only.
      add: function add() {
        var _rawDS$getDataSet;
        return (_rawDS$getDataSet = rawDS.getDataSet()).add.apply(_rawDS$getDataSet, arguments);
      },
      remove: function remove() {
        var _rawDS$getDataSet2;
        return (_rawDS$getDataSet2 = rawDS.getDataSet()).remove.apply(_rawDS$getDataSet2, arguments);
      },
      update: function update() {
        var _rawDS$getDataSet3;
        return (_rawDS$getDataSet3 = rawDS.getDataSet()).update.apply(_rawDS$getDataSet3, arguments);
      },
      updateOnly: function updateOnly() {
        var _rawDS$getDataSet4;
        return (_rawDS$getDataSet4 = rawDS.getDataSet()).updateOnly.apply(_rawDS$getDataSet4, arguments);
      },
      clear: function clear2() {
        var _rawDS$getDataSet5;
        return (_rawDS$getDataSet5 = rawDS.getDataSet()).clear.apply(_rawDS$getDataSet5, arguments);
      },
      // Read only.
      forEach: _bindInstanceProperty$1(_context3 = _forEachInstanceProperty(coercedDS)).call(_context3, coercedDS),
      get: _bindInstanceProperty$1(_context4 = coercedDS.get).call(_context4, coercedDS),
      getIds: _bindInstanceProperty$1(_context5 = coercedDS.getIds).call(_context5, coercedDS),
      off: _bindInstanceProperty$1(_context6 = coercedDS.off).call(_context6, coercedDS),
      on: _bindInstanceProperty$1(_context7 = coercedDS.on).call(_context7, coercedDS),
      get length() {
        return coercedDS.length;
      },
      // Non standard.
      idProp,
      type,
      rawDS,
      coercedDS,
      dispose: function dispose() {
        return pipe.stop();
      }
    };
  }
  var setupXSSCleaner = function setupXSSCleaner2(options) {
    var customXSS = new xssFilter.FilterXSS(options);
    return function(string2) {
      return customXSS.process(string2);
    };
  };
  var setupNoOpCleaner = function setupNoOpCleaner2(string2) {
    return string2;
  };
  var configuredXSSProtection = setupXSSCleaner();
  var setupXSSProtection = function setupXSSProtection2(options) {
    if (!options) {
      return;
    }
    if (options.disabled === true) {
      configuredXSSProtection = setupNoOpCleaner;
      console.warn("You disabled XSS protection for vis-Timeline. I sure hope you know what you're doing!");
    } else {
      if (options.filterOptions) {
        configuredXSSProtection = setupXSSCleaner(options.filterOptions);
      }
    }
  };
  var availableUtils = _objectSpread(_objectSpread({}, util$2), {}, {
    convert,
    setupXSSProtection
  });
  _Object$defineProperty$1(availableUtils, "xss", {
    get: function get2() {
      return configuredXSSProtection;
    }
  });
  var _parseFloatExports = {};
  var _parseFloat$3 = {
    get exports() {
      return _parseFloatExports;
    },
    set exports(v) {
      _parseFloatExports = v;
    }
  };
  var global$1 = global$o;
  var fails = fails$x;
  var uncurryThis = functionUncurryThis;
  var toString$1 = toString$c;
  var trim2 = stringTrim.trim;
  var whitespaces = whitespaces$4;
  var charAt = uncurryThis("".charAt);
  var $parseFloat$1 = global$1.parseFloat;
  var Symbol$1 = global$1.Symbol;
  var ITERATOR = Symbol$1 && Symbol$1.iterator;
  var FORCED = 1 / $parseFloat$1(whitespaces + "-0") !== -Infinity || ITERATOR && !fails(function() {
    $parseFloat$1(Object(ITERATOR));
  });
  var numberParseFloat = FORCED ? function parseFloat2(string2) {
    var trimmedString = trim2(toString$1(string2));
    var result = $parseFloat$1(trimmedString);
    return result === 0 && charAt(trimmedString, 0) == "-" ? -0 : result;
  } : $parseFloat$1;
  var $$4 = _export;
  var $parseFloat = numberParseFloat;
  $$4({ global: true, forced: parseFloat != $parseFloat }, {
    parseFloat: $parseFloat
  });
  var path$1 = path$t;
  var _parseFloat$2 = path$1.parseFloat;
  var parent$4 = _parseFloat$2;
  var _parseFloat$1 = parent$4;
  (function(module) {
    module.exports = _parseFloat$1;
  })(_parseFloat$3);
  var _parseFloat = /* @__PURE__ */ getDefaultExportFromCjs(_parseFloatExports);
  var Component = /* @__PURE__ */ function() {
    function Component2(body, options) {
      _classCallCheck(this, Component2);
      this.options = null;
      this.props = null;
    }
    _createClass(Component2, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options) {
          availableUtils.extend(this.options, options);
        }
      }
      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
    }, {
      key: "redraw",
      value: function redraw() {
        return false;
      }
      /**
       * Destroy the component. Cleanup DOM and event listeners
       */
    }, {
      key: "destroy",
      value: function destroy() {
      }
      /**
       * Test whether the component is resized since the last time _isResized() was
       * called.
       * @return {Boolean} Returns true if the component is resized
       * @protected
       */
    }, {
      key: "_isResized",
      value: function _isResized() {
        var resized = this.props._previousWidth !== this.props.width || this.props._previousHeight !== this.props.height;
        this.props._previousWidth = this.props.width;
        this.props._previousHeight = this.props.height;
        return resized;
      }
    }]);
    return Component2;
  }();
  var repeatExports = {};
  var repeat$4 = {
    get exports() {
      return repeatExports;
    },
    set exports(v) {
      repeatExports = v;
    }
  };
  var toIntegerOrInfinity = toIntegerOrInfinity$5;
  var toString2 = toString$c;
  var requireObjectCoercible = requireObjectCoercible$6;
  var $RangeError = RangeError;
  var stringRepeat = function repeat(count) {
    var str = toString2(requireObjectCoercible(this));
    var result = "";
    var n = toIntegerOrInfinity(count);
    if (n < 0 || n == Infinity)
      throw $RangeError("Wrong number of repetitions");
    for (; n > 0; (n >>>= 1) && (str += str))
      if (n & 1)
        result += str;
    return result;
  };
  var $$3 = _export;
  var repeat$3 = stringRepeat;
  $$3({ target: "String", proto: true }, {
    repeat: repeat$3
  });
  var entryVirtual$3 = entryVirtual$o;
  var repeat$2 = entryVirtual$3("String").repeat;
  var isPrototypeOf$3 = objectIsPrototypeOf;
  var method$3 = repeat$2;
  var StringPrototype = String.prototype;
  var repeat$1 = function(it2) {
    var own = it2.repeat;
    return typeof it2 == "string" || it2 === StringPrototype || isPrototypeOf$3(StringPrototype, it2) && own === StringPrototype.repeat ? method$3 : own;
  };
  var parent$3 = repeat$1;
  var repeat2 = parent$3;
  (function(module) {
    module.exports = repeat2;
  })(repeat$4);
  var _repeatInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(repeatExports);
  function convertHiddenOptions(moment2, body, hiddenDates) {
    if (hiddenDates && !_Array$isArray(hiddenDates)) {
      return convertHiddenOptions(moment2, body, [hiddenDates]);
    }
    body.hiddenDates = [];
    if (hiddenDates) {
      if (_Array$isArray(hiddenDates) == true) {
        var _context;
        for (var i2 = 0; i2 < hiddenDates.length; i2++) {
          if (_repeatInstanceProperty(hiddenDates[i2]) === void 0) {
            var dateItem = {};
            dateItem.start = moment2(hiddenDates[i2].start).toDate().valueOf();
            dateItem.end = moment2(hiddenDates[i2].end).toDate().valueOf();
            body.hiddenDates.push(dateItem);
          }
        }
        _sortInstanceProperty(_context = body.hiddenDates).call(_context, function(a, b) {
          return a.start - b.start;
        });
      }
    }
  }
  function updateHiddenDates(moment2, body, hiddenDates) {
    if (hiddenDates && !_Array$isArray(hiddenDates)) {
      return updateHiddenDates(moment2, body, [hiddenDates]);
    }
    if (hiddenDates && body.domProps.centerContainer.width !== void 0) {
      convertHiddenOptions(moment2, body, hiddenDates);
      var start = moment2(body.range.start);
      var end = moment2(body.range.end);
      var totalRange = body.range.end - body.range.start;
      var pixelTime = totalRange / body.domProps.centerContainer.width;
      for (var i2 = 0; i2 < hiddenDates.length; i2++) {
        if (_repeatInstanceProperty(hiddenDates[i2]) !== void 0) {
          var startDate = moment2(hiddenDates[i2].start);
          var endDate = moment2(hiddenDates[i2].end);
          if (startDate._d == "Invalid Date") {
            throw new Error("Supplied start date is not valid: ".concat(hiddenDates[i2].start));
          }
          if (endDate._d == "Invalid Date") {
            throw new Error("Supplied end date is not valid: ".concat(hiddenDates[i2].end));
          }
          var duration = endDate - startDate;
          if (duration >= 4 * pixelTime) {
            var offset = 0;
            var runUntil = end.clone();
            switch (_repeatInstanceProperty(hiddenDates[i2])) {
              case "daily":
                if (startDate.day() != endDate.day()) {
                  offset = 1;
                }
                startDate.dayOfYear(start.dayOfYear());
                startDate.year(start.year());
                startDate.subtract(7, "days");
                endDate.dayOfYear(start.dayOfYear());
                endDate.year(start.year());
                endDate.subtract(7 - offset, "days");
                runUntil.add(1, "weeks");
                break;
              case "weekly": {
                var dayOffset = endDate.diff(startDate, "days");
                var day = startDate.day();
                startDate.date(start.date());
                startDate.month(start.month());
                startDate.year(start.year());
                endDate = startDate.clone();
                startDate.day(day);
                endDate.day(day);
                endDate.add(dayOffset, "days");
                startDate.subtract(1, "weeks");
                endDate.subtract(1, "weeks");
                runUntil.add(1, "weeks");
                break;
              }
              case "monthly":
                if (startDate.month() != endDate.month()) {
                  offset = 1;
                }
                startDate.month(start.month());
                startDate.year(start.year());
                startDate.subtract(1, "months");
                endDate.month(start.month());
                endDate.year(start.year());
                endDate.subtract(1, "months");
                endDate.add(offset, "months");
                runUntil.add(1, "months");
                break;
              case "yearly":
                if (startDate.year() != endDate.year()) {
                  offset = 1;
                }
                startDate.year(start.year());
                startDate.subtract(1, "years");
                endDate.year(start.year());
                endDate.subtract(1, "years");
                endDate.add(offset, "years");
                runUntil.add(1, "years");
                break;
              default:
                console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", _repeatInstanceProperty(hiddenDates[i2]));
                return;
            }
            while (startDate < runUntil) {
              body.hiddenDates.push({
                start: startDate.valueOf(),
                end: endDate.valueOf()
              });
              switch (_repeatInstanceProperty(hiddenDates[i2])) {
                case "daily":
                  startDate.add(1, "days");
                  endDate.add(1, "days");
                  break;
                case "weekly":
                  startDate.add(1, "weeks");
                  endDate.add(1, "weeks");
                  break;
                case "monthly":
                  startDate.add(1, "months");
                  endDate.add(1, "months");
                  break;
                case "yearly":
                  startDate.add(1, "y");
                  endDate.add(1, "y");
                  break;
                default:
                  console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", _repeatInstanceProperty(hiddenDates[i2]));
                  return;
              }
            }
            body.hiddenDates.push({
              start: startDate.valueOf(),
              end: endDate.valueOf()
            });
          }
        }
      }
      removeDuplicates(body);
      var startHidden = getIsHidden(body.range.start, body.hiddenDates);
      var endHidden = getIsHidden(body.range.end, body.hiddenDates);
      var rangeStart = body.range.start;
      var rangeEnd = body.range.end;
      if (startHidden.hidden == true) {
        rangeStart = body.range.startToFront == true ? startHidden.startDate - 1 : startHidden.endDate + 1;
      }
      if (endHidden.hidden == true) {
        rangeEnd = body.range.endToFront == true ? endHidden.startDate - 1 : endHidden.endDate + 1;
      }
      if (startHidden.hidden == true || endHidden.hidden == true) {
        body.range._applyRange(rangeStart, rangeEnd);
      }
    }
  }
  function removeDuplicates(body) {
    var _context2;
    var hiddenDates = body.hiddenDates;
    var safeDates = [];
    for (var i2 = 0; i2 < hiddenDates.length; i2++) {
      for (var j = 0; j < hiddenDates.length; j++) {
        if (i2 != j && hiddenDates[j].remove != true && hiddenDates[i2].remove != true) {
          if (hiddenDates[j].start >= hiddenDates[i2].start && hiddenDates[j].end <= hiddenDates[i2].end) {
            hiddenDates[j].remove = true;
          } else if (hiddenDates[j].start >= hiddenDates[i2].start && hiddenDates[j].start <= hiddenDates[i2].end) {
            hiddenDates[i2].end = hiddenDates[j].end;
            hiddenDates[j].remove = true;
          } else if (hiddenDates[j].end >= hiddenDates[i2].start && hiddenDates[j].end <= hiddenDates[i2].end) {
            hiddenDates[i2].start = hiddenDates[j].start;
            hiddenDates[j].remove = true;
          }
        }
      }
    }
    for (i2 = 0; i2 < hiddenDates.length; i2++) {
      if (hiddenDates[i2].remove !== true) {
        safeDates.push(hiddenDates[i2]);
      }
    }
    body.hiddenDates = safeDates;
    _sortInstanceProperty(_context2 = body.hiddenDates).call(_context2, function(a, b) {
      return a.start - b.start;
    });
  }
  function stepOverHiddenDates(moment2, timeStep, previousTime) {
    var stepInHidden = false;
    var currentValue = timeStep.current.valueOf();
    for (var i2 = 0; i2 < timeStep.hiddenDates.length; i2++) {
      var startDate = timeStep.hiddenDates[i2].start;
      var endDate = timeStep.hiddenDates[i2].end;
      if (currentValue >= startDate && currentValue < endDate) {
        stepInHidden = true;
        break;
      }
    }
    if (stepInHidden == true && currentValue < timeStep._end.valueOf() && currentValue != previousTime) {
      var prevValue = moment2(previousTime);
      var newValue = moment2(endDate);
      if (prevValue.year() != newValue.year()) {
        timeStep.switchedYear = true;
      } else if (prevValue.month() != newValue.month()) {
        timeStep.switchedMonth = true;
      } else if (prevValue.dayOfYear() != newValue.dayOfYear()) {
        timeStep.switchedDay = true;
      }
      timeStep.current = newValue;
    }
  }
  function toScreen(Core2, time, width) {
    var conversion;
    if (Core2.body.hiddenDates.length == 0) {
      conversion = Core2.range.conversion(width);
      return (time.valueOf() - conversion.offset) * conversion.scale;
    } else {
      var hidden = getIsHidden(time, Core2.body.hiddenDates);
      if (hidden.hidden == true) {
        time = hidden.startDate;
      }
      var duration = getHiddenDurationBetween(Core2.body.hiddenDates, Core2.range.start, Core2.range.end);
      if (time < Core2.range.start) {
        conversion = Core2.range.conversion(width, duration);
        var hiddenBeforeStart = getHiddenDurationBeforeStart(Core2.body.hiddenDates, time, conversion.offset);
        time = Core2.options.moment(time).toDate().valueOf();
        time = time + hiddenBeforeStart;
        return -(conversion.offset - time.valueOf()) * conversion.scale;
      } else if (time > Core2.range.end) {
        var rangeAfterEnd = {
          start: Core2.range.start,
          end: time
        };
        time = correctTimeForHidden(Core2.options.moment, Core2.body.hiddenDates, rangeAfterEnd, time);
        conversion = Core2.range.conversion(width, duration);
        return (time.valueOf() - conversion.offset) * conversion.scale;
      } else {
        time = correctTimeForHidden(Core2.options.moment, Core2.body.hiddenDates, Core2.range, time);
        conversion = Core2.range.conversion(width, duration);
        return (time.valueOf() - conversion.offset) * conversion.scale;
      }
    }
  }
  function toTime(Core2, x, width) {
    if (Core2.body.hiddenDates.length == 0) {
      var conversion = Core2.range.conversion(width);
      return new Date(x / conversion.scale + conversion.offset);
    } else {
      var hiddenDuration = getHiddenDurationBetween(Core2.body.hiddenDates, Core2.range.start, Core2.range.end);
      var totalDuration = Core2.range.end - Core2.range.start - hiddenDuration;
      var partialDuration = totalDuration * x / width;
      var accumulatedHiddenDuration = getAccumulatedHiddenDuration(Core2.body.hiddenDates, Core2.range, partialDuration);
      return new Date(accumulatedHiddenDuration + partialDuration + Core2.range.start);
    }
  }
  function getHiddenDurationBetween(hiddenDates, start, end) {
    var duration = 0;
    for (var i2 = 0; i2 < hiddenDates.length; i2++) {
      var startDate = hiddenDates[i2].start;
      var endDate = hiddenDates[i2].end;
      if (startDate >= start && endDate < end) {
        duration += endDate - startDate;
      }
    }
    return duration;
  }
  function getHiddenDurationBeforeStart(hiddenDates, start, end) {
    var duration = 0;
    for (var i2 = 0; i2 < hiddenDates.length; i2++) {
      var startDate = hiddenDates[i2].start;
      var endDate = hiddenDates[i2].end;
      if (startDate >= start && endDate <= end) {
        duration += endDate - startDate;
      }
    }
    return duration;
  }
  function correctTimeForHidden(moment2, hiddenDates, range, time) {
    time = moment2(time).toDate().valueOf();
    time -= getHiddenDurationBefore(moment2, hiddenDates, range, time);
    return time;
  }
  function getHiddenDurationBefore(moment2, hiddenDates, range, time) {
    var timeOffset = 0;
    time = moment2(time).toDate().valueOf();
    for (var i2 = 0; i2 < hiddenDates.length; i2++) {
      var startDate = hiddenDates[i2].start;
      var endDate = hiddenDates[i2].end;
      if (startDate >= range.start && endDate < range.end) {
        if (time >= endDate) {
          timeOffset += endDate - startDate;
        }
      }
    }
    return timeOffset;
  }
  function getAccumulatedHiddenDuration(hiddenDates, range, requiredDuration) {
    var hiddenDuration = 0;
    var duration = 0;
    var previousPoint = range.start;
    for (var i2 = 0; i2 < hiddenDates.length; i2++) {
      var startDate = hiddenDates[i2].start;
      var endDate = hiddenDates[i2].end;
      if (startDate >= range.start && endDate < range.end) {
        duration += startDate - previousPoint;
        previousPoint = endDate;
        if (duration >= requiredDuration) {
          break;
        } else {
          hiddenDuration += endDate - startDate;
        }
      }
    }
    return hiddenDuration;
  }
  function snapAwayFromHidden(hiddenDates, time, direction, correctionEnabled) {
    var isHidden = getIsHidden(time, hiddenDates);
    if (isHidden.hidden == true) {
      if (direction < 0) {
        if (correctionEnabled == true) {
          return isHidden.startDate - (isHidden.endDate - time) - 1;
        } else {
          return isHidden.startDate - 1;
        }
      } else {
        if (correctionEnabled == true) {
          return isHidden.endDate + (time - isHidden.startDate) + 1;
        } else {
          return isHidden.endDate + 1;
        }
      }
    } else {
      return time;
    }
  }
  function getIsHidden(time, hiddenDates) {
    for (var i2 = 0; i2 < hiddenDates.length; i2++) {
      var startDate = hiddenDates[i2].start;
      var endDate = hiddenDates[i2].end;
      if (time >= startDate && time < endDate) {
        return {
          hidden: true,
          startDate,
          endDate
        };
      }
    }
    return {
      hidden: false,
      startDate,
      endDate
    };
  }
  function _createSuper$c(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$c() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var Range = /* @__PURE__ */ function(_Component) {
    _inherits(Range2, _Component);
    var _super = _createSuper$c(Range2);
    function Range2(body, options) {
      var _context, _context2, _context3, _context4, _context5, _context6, _context7;
      var _this;
      _classCallCheck(this, Range2);
      _this = _super.call(this);
      var now3 = moment$3().hours(0).minutes(0).seconds(0).milliseconds(0);
      var start = now3.clone().add(-3, "days").valueOf();
      var end = now3.clone().add(3, "days").valueOf();
      _this.millisecondsPerPixelCache = void 0;
      if (options === void 0) {
        _this.start = start;
        _this.end = end;
      } else {
        _this.start = options.start || start;
        _this.end = options.end || end;
      }
      _this.rolling = false;
      _this.body = body;
      _this.deltaDifference = 0;
      _this.scaleOffset = 0;
      _this.startToFront = false;
      _this.endToFront = true;
      _this.defaultOptions = {
        rtl: false,
        start: null,
        end: null,
        moment: moment$3,
        direction: "horizontal",
        // 'horizontal' or 'vertical'
        moveable: true,
        zoomable: true,
        min: null,
        max: null,
        zoomMin: 10,
        // milliseconds
        zoomMax: 1e3 * 60 * 60 * 24 * 365 * 1e4,
        // milliseconds
        rollingMode: {
          follow: false,
          offset: 0.5
        }
      };
      _this.options = availableUtils.extend({}, _this.defaultOptions);
      _this.props = {
        touch: {}
      };
      _this.animationTimer = null;
      _this.body.emitter.on("panstart", _bindInstanceProperty$1(_context = _this._onDragStart).call(_context, _assertThisInitialized(_this)));
      _this.body.emitter.on("panmove", _bindInstanceProperty$1(_context2 = _this._onDrag).call(_context2, _assertThisInitialized(_this)));
      _this.body.emitter.on("panend", _bindInstanceProperty$1(_context3 = _this._onDragEnd).call(_context3, _assertThisInitialized(_this)));
      _this.body.emitter.on("mousewheel", _bindInstanceProperty$1(_context4 = _this._onMouseWheel).call(_context4, _assertThisInitialized(_this)));
      _this.body.emitter.on("touch", _bindInstanceProperty$1(_context5 = _this._onTouch).call(_context5, _assertThisInitialized(_this)));
      _this.body.emitter.on("pinch", _bindInstanceProperty$1(_context6 = _this._onPinch).call(_context6, _assertThisInitialized(_this)));
      _this.body.dom.rollingModeBtn.addEventListener("click", _bindInstanceProperty$1(_context7 = _this.startRolling).call(_context7, _assertThisInitialized(_this)));
      _this.setOptions(options);
      return _this;
    }
    _createClass(Range2, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options) {
          var fields = ["animation", "direction", "min", "max", "zoomMin", "zoomMax", "moveable", "zoomable", "moment", "activate", "hiddenDates", "zoomKey", "zoomFriction", "rtl", "showCurrentTime", "rollingMode", "horizontalScroll"];
          availableUtils.selectiveExtend(fields, this.options, options);
          if (options.rollingMode && options.rollingMode.follow) {
            this.startRolling();
          }
          if ("start" in options || "end" in options) {
            this.setRange(options.start, options.end);
          }
        }
      }
      /**
       * Start auto refreshing the current time bar
       */
    }, {
      key: "startRolling",
      value: function startRolling() {
        var me = this;
        function update() {
          me.stopRolling();
          me.rolling = true;
          var interval = me.end - me.start;
          var t = availableUtils.convert(/* @__PURE__ */ new Date(), "Date").valueOf();
          var rollingModeOffset = me.options.rollingMode && me.options.rollingMode.offset || 0.5;
          var start = t - interval * rollingModeOffset;
          var end = t + interval * (1 - rollingModeOffset);
          var options = {
            animation: false
          };
          me.setRange(start, end, options);
          var scale = me.conversion(me.body.domProps.center.width).scale;
          interval = 1 / scale / 10;
          if (interval < 30)
            interval = 30;
          if (interval > 1e3)
            interval = 1e3;
          me.body.dom.rollingModeBtn.style.visibility = "hidden";
          me.currentTimeTimer = _setTimeout(update, interval);
        }
        update();
      }
      /**
       * Stop auto refreshing the current time bar
       */
    }, {
      key: "stopRolling",
      value: function stopRolling() {
        if (this.currentTimeTimer !== void 0) {
          clearTimeout(this.currentTimeTimer);
          this.rolling = false;
          this.body.dom.rollingModeBtn.style.visibility = "visible";
        }
      }
      /**
       * Set a new start and end range
       * @param {Date | number | string} start
       * @param {Date | number | string} end
       * @param {Object} options      Available options:
       *                              {boolean | {duration: number, easingFunction: string}} [animation=false]
       *                                    If true, the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       *                              {boolean} [byUser=false]
       *                              {Event}  event  Mouse event
       * @param {Function} callback     a callback function to be executed at the end of this function  
       * @param {Function} frameCallback    a callback function executed each frame of the range animation.
       *                                    The callback will be passed three parameters:
       *                                    {number} easeCoefficient    an easing coefficent
       *                                    {boolean} willDraw          If true the caller will redraw after the callback completes
       *                                    {boolean} done              If true then animation is ending after the current frame
       * @return {void}
       */
    }, {
      key: "setRange",
      value: function setRange(start, end, options, callback, frameCallback) {
        if (!options) {
          options = {};
        }
        if (options.byUser !== true) {
          options.byUser = false;
        }
        var me = this;
        var finalStart = start != void 0 ? availableUtils.convert(start, "Date").valueOf() : null;
        var finalEnd = end != void 0 ? availableUtils.convert(end, "Date").valueOf() : null;
        this._cancelAnimation();
        this.millisecondsPerPixelCache = void 0;
        if (options.animation) {
          var initStart = this.start;
          var initEnd = this.end;
          var duration = _typeof$1(options.animation) === "object" && "duration" in options.animation ? options.animation.duration : 500;
          var easingName = _typeof$1(options.animation) === "object" && "easingFunction" in options.animation ? options.animation.easingFunction : "easeInOutQuad";
          var easingFunction = availableUtils.easingFunctions[easingName];
          if (!easingFunction) {
            var _context8;
            throw new Error(_concatInstanceProperty(_context8 = "Unknown easing function ".concat(_JSON$stringify(easingName), ". Choose from: ")).call(_context8, _Object$keys(availableUtils.easingFunctions).join(", ")));
          }
          var initTime = _Date$now();
          var anyChanged = false;
          var next2 = function next3() {
            if (!me.props.touch.dragging) {
              var now3 = _Date$now();
              var time = now3 - initTime;
              var ease = easingFunction(time / duration);
              var done = time > duration;
              var s = done || finalStart === null ? finalStart : initStart + (finalStart - initStart) * ease;
              var e = done || finalEnd === null ? finalEnd : initEnd + (finalEnd - initEnd) * ease;
              changed = me._applyRange(s, e);
              updateHiddenDates(me.options.moment, me.body, me.options.hiddenDates);
              anyChanged = anyChanged || changed;
              var params2 = {
                start: new Date(me.start),
                end: new Date(me.end),
                byUser: options.byUser,
                event: options.event
              };
              if (frameCallback) {
                frameCallback(ease, changed, done);
              }
              if (changed) {
                me.body.emitter.emit("rangechange", params2);
              }
              if (done) {
                if (anyChanged) {
                  me.body.emitter.emit("rangechanged", params2);
                  if (callback) {
                    return callback();
                  }
                }
              } else {
                me.animationTimer = _setTimeout(next3, 20);
              }
            }
          };
          return next2();
        } else {
          var changed = this._applyRange(finalStart, finalEnd);
          updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);
          if (changed) {
            var params = {
              start: new Date(this.start),
              end: new Date(this.end),
              byUser: options.byUser,
              event: options.event
            };
            this.body.emitter.emit("rangechange", params);
            clearTimeout(me.timeoutID);
            me.timeoutID = _setTimeout(function() {
              me.body.emitter.emit("rangechanged", params);
            }, 200);
            if (callback) {
              return callback();
            }
          }
        }
      }
      /**
       * Get the number of milliseconds per pixel.
       *
       * @returns {undefined|number}
       */
    }, {
      key: "getMillisecondsPerPixel",
      value: function getMillisecondsPerPixel() {
        if (this.millisecondsPerPixelCache === void 0) {
          this.millisecondsPerPixelCache = (this.end - this.start) / this.body.dom.center.clientWidth;
        }
        return this.millisecondsPerPixelCache;
      }
      /**
       * Stop an animation
       * @private
       */
    }, {
      key: "_cancelAnimation",
      value: function _cancelAnimation() {
        if (this.animationTimer) {
          clearTimeout(this.animationTimer);
          this.animationTimer = null;
        }
      }
      /**
       * Set a new start and end range. This method is the same as setRange, but
       * does not trigger a range change and range changed event, and it returns
       * true when the range is changed
       * @param {number} [start]
       * @param {number} [end]
       * @return {boolean} changed
       * @private
       */
    }, {
      key: "_applyRange",
      value: function _applyRange(start, end) {
        var newStart = start != null ? availableUtils.convert(start, "Date").valueOf() : this.start;
        var newEnd = end != null ? availableUtils.convert(end, "Date").valueOf() : this.end;
        var max2 = this.options.max != null ? availableUtils.convert(this.options.max, "Date").valueOf() : null;
        var min2 = this.options.min != null ? availableUtils.convert(this.options.min, "Date").valueOf() : null;
        var diff;
        if (isNaN(newStart) || newStart === null) {
          throw new Error('Invalid start "'.concat(start, '"'));
        }
        if (isNaN(newEnd) || newEnd === null) {
          throw new Error('Invalid end "'.concat(end, '"'));
        }
        if (newEnd < newStart) {
          newEnd = newStart;
        }
        if (min2 !== null) {
          if (newStart < min2) {
            diff = min2 - newStart;
            newStart += diff;
            newEnd += diff;
            if (max2 != null) {
              if (newEnd > max2) {
                newEnd = max2;
              }
            }
          }
        }
        if (max2 !== null) {
          if (newEnd > max2) {
            diff = newEnd - max2;
            newStart -= diff;
            newEnd -= diff;
            if (min2 != null) {
              if (newStart < min2) {
                newStart = min2;
              }
            }
          }
        }
        if (this.options.zoomMin !== null) {
          var zoomMin = _parseFloat(this.options.zoomMin);
          if (zoomMin < 0) {
            zoomMin = 0;
          }
          if (newEnd - newStart < zoomMin) {
            var compensation = 0.5;
            if (this.end - this.start === zoomMin && newStart >= this.start - compensation && newEnd <= this.end) {
              newStart = this.start;
              newEnd = this.end;
            } else {
              diff = zoomMin - (newEnd - newStart);
              newStart -= diff / 2;
              newEnd += diff / 2;
            }
          }
        }
        if (this.options.zoomMax !== null) {
          var zoomMax = _parseFloat(this.options.zoomMax);
          if (zoomMax < 0) {
            zoomMax = 0;
          }
          if (newEnd - newStart > zoomMax) {
            if (this.end - this.start === zoomMax && newStart < this.start && newEnd > this.end) {
              newStart = this.start;
              newEnd = this.end;
            } else {
              diff = newEnd - newStart - zoomMax;
              newStart += diff / 2;
              newEnd -= diff / 2;
            }
          }
        }
        var changed = this.start != newStart || this.end != newEnd;
        if (!(newStart >= this.start && newStart <= this.end || newEnd >= this.start && newEnd <= this.end) && !(this.start >= newStart && this.start <= newEnd || this.end >= newStart && this.end <= newEnd)) {
          this.body.emitter.emit("checkRangedItems");
        }
        this.start = newStart;
        this.end = newEnd;
        return changed;
      }
      /**
       * Retrieve the current range.
       * @return {Object} An object with start and end properties
       */
    }, {
      key: "getRange",
      value: function getRange() {
        return {
          start: this.start,
          end: this.end
        };
      }
      /**
       * Calculate the conversion offset and scale for current range, based on
       * the provided width
       * @param {number} width
       * @param {number} [totalHidden=0]
       * @returns {{offset: number, scale: number}} conversion
       */
    }, {
      key: "conversion",
      value: function conversion(width, totalHidden) {
        return Range2.conversion(this.start, this.end, width, totalHidden);
      }
      /**
       * Static method to calculate the conversion offset and scale for a range,
       * based on the provided start, end, and width
       * @param {number} start
       * @param {number} end
       * @param {number} width
       * @param {number} [totalHidden=0]
       * @returns {{offset: number, scale: number}} conversion
       */
    }, {
      key: "_onDragStart",
      value: (
        /**
         * Start dragging horizontally or vertically
         * @param {Event} event
         * @private
         */
        function _onDragStart(event2) {
          this.deltaDifference = 0;
          this.previousDelta = 0;
          if (!this.options.moveable)
            return;
          if (!this._isInsideRange(event2))
            return;
          if (!this.props.touch.allowDragging)
            return;
          this.stopRolling();
          this.props.touch.start = this.start;
          this.props.touch.end = this.end;
          this.props.touch.dragging = true;
          if (this.body.dom.root) {
            this.body.dom.root.style.cursor = "move";
          }
        }
      )
      /**
       * Perform dragging operation
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onDrag",
      value: function _onDrag(event2) {
        if (!event2)
          return;
        if (!this.props.touch.dragging)
          return;
        if (!this.options.moveable)
          return;
        if (!this.props.touch.allowDragging)
          return;
        var direction = this.options.direction;
        validateDirection(direction);
        var delta = direction == "horizontal" ? event2.deltaX : event2.deltaY;
        delta -= this.deltaDifference;
        var interval = this.props.touch.end - this.props.touch.start;
        var duration = getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
        interval -= duration;
        var width = direction == "horizontal" ? this.body.domProps.center.width : this.body.domProps.center.height;
        var diffRange;
        if (this.options.rtl) {
          diffRange = delta / width * interval;
        } else {
          diffRange = -delta / width * interval;
        }
        var newStart = this.props.touch.start + diffRange;
        var newEnd = this.props.touch.end + diffRange;
        var safeStart = snapAwayFromHidden(this.body.hiddenDates, newStart, this.previousDelta - delta, true);
        var safeEnd = snapAwayFromHidden(this.body.hiddenDates, newEnd, this.previousDelta - delta, true);
        if (safeStart != newStart || safeEnd != newEnd) {
          this.deltaDifference += delta;
          this.props.touch.start = safeStart;
          this.props.touch.end = safeEnd;
          this._onDrag(event2);
          return;
        }
        this.previousDelta = delta;
        this._applyRange(newStart, newEnd);
        var startDate = new Date(this.start);
        var endDate = new Date(this.end);
        this.body.emitter.emit("rangechange", {
          start: startDate,
          end: endDate,
          byUser: true,
          event: event2
        });
        this.body.emitter.emit("panmove");
      }
      /**
       * Stop dragging operation
       * @param {event} event
       * @private
       */
    }, {
      key: "_onDragEnd",
      value: function _onDragEnd(event2) {
        if (!this.props.touch.dragging)
          return;
        if (!this.options.moveable)
          return;
        if (!this.props.touch.allowDragging)
          return;
        this.props.touch.dragging = false;
        if (this.body.dom.root) {
          this.body.dom.root.style.cursor = "auto";
        }
        this.body.emitter.emit("rangechanged", {
          start: new Date(this.start),
          end: new Date(this.end),
          byUser: true,
          event: event2
        });
      }
      /**
       * Event handler for mouse wheel event, used to zoom
       * Code from http://adomas.org/javascript-mouse-wheel/
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onMouseWheel",
      value: function _onMouseWheel(event2) {
        var delta = 0;
        if (event2.wheelDelta) {
          delta = event2.wheelDelta / 120;
        } else if (event2.detail) {
          delta = -event2.detail / 3;
        } else if (event2.deltaY) {
          delta = -event2.deltaY / 3;
        }
        if (this.options.zoomKey && !event2[this.options.zoomKey] && this.options.zoomable || !this.options.zoomable && this.options.moveable) {
          return;
        }
        if (!(this.options.zoomable && this.options.moveable))
          return;
        if (!this._isInsideRange(event2))
          return;
        if (delta) {
          var zoomFriction = this.options.zoomFriction || 5;
          var scale;
          if (delta < 0) {
            scale = 1 - delta / zoomFriction;
          } else {
            scale = 1 / (1 + delta / zoomFriction);
          }
          var pointerDate;
          if (this.rolling) {
            var rollingModeOffset = this.options.rollingMode && this.options.rollingMode.offset || 0.5;
            pointerDate = this.start + (this.end - this.start) * rollingModeOffset;
          } else {
            var pointer = this.getPointer({
              x: event2.clientX,
              y: event2.clientY
            }, this.body.dom.center);
            pointerDate = this._pointerToDate(pointer);
          }
          this.zoom(scale, pointerDate, delta, event2);
          event2.preventDefault();
        }
      }
      /**
       * Start of a touch gesture
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onTouch",
      value: function _onTouch(event2) {
        this.props.touch.start = this.start;
        this.props.touch.end = this.end;
        this.props.touch.allowDragging = true;
        this.props.touch.center = null;
        this.props.touch.centerDate = null;
        this.scaleOffset = 0;
        this.deltaDifference = 0;
        availableUtils.preventDefault(event2);
      }
      /**
       * Handle pinch event
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onPinch",
      value: function _onPinch(event2) {
        if (!(this.options.zoomable && this.options.moveable))
          return;
        availableUtils.preventDefault(event2);
        this.props.touch.allowDragging = false;
        if (!this.props.touch.center) {
          this.props.touch.center = this.getPointer(event2.center, this.body.dom.center);
          this.props.touch.centerDate = this._pointerToDate(this.props.touch.center);
        }
        this.stopRolling();
        var scale = 1 / (event2.scale + this.scaleOffset);
        var centerDate = this.props.touch.centerDate;
        var hiddenDuration = getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
        var hiddenDurationBefore = getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, centerDate);
        var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;
        var newStart = centerDate - hiddenDurationBefore + (this.props.touch.start - (centerDate - hiddenDurationBefore)) * scale;
        var newEnd = centerDate + hiddenDurationAfter + (this.props.touch.end - (centerDate + hiddenDurationAfter)) * scale;
        this.startToFront = 1 - scale <= 0;
        this.endToFront = scale - 1 <= 0;
        var safeStart = snapAwayFromHidden(this.body.hiddenDates, newStart, 1 - scale, true);
        var safeEnd = snapAwayFromHidden(this.body.hiddenDates, newEnd, scale - 1, true);
        if (safeStart != newStart || safeEnd != newEnd) {
          this.props.touch.start = safeStart;
          this.props.touch.end = safeEnd;
          this.scaleOffset = 1 - event2.scale;
          newStart = safeStart;
          newEnd = safeEnd;
        }
        var options = {
          animation: false,
          byUser: true,
          event: event2
        };
        this.setRange(newStart, newEnd, options);
        this.startToFront = false;
        this.endToFront = true;
      }
      /**
       * Test whether the mouse from a mouse event is inside the visible window,
       * between the current start and end date
       * @param {Object} event
       * @return {boolean} Returns true when inside the visible window
       * @private
       */
    }, {
      key: "_isInsideRange",
      value: function _isInsideRange(event2) {
        var clientX = event2.center ? event2.center.x : event2.clientX;
        var centerContainerRect = this.body.dom.centerContainer.getBoundingClientRect();
        var x = this.options.rtl ? clientX - centerContainerRect.left : centerContainerRect.right - clientX;
        var time = this.body.util.toTime(x);
        return time >= this.start && time <= this.end;
      }
      /**
       * Helper function to calculate the center date for zooming
       * @param {{x: number, y: number}} pointer
       * @return {number} date
       * @private
       */
    }, {
      key: "_pointerToDate",
      value: function _pointerToDate(pointer) {
        var conversion;
        var direction = this.options.direction;
        validateDirection(direction);
        if (direction == "horizontal") {
          return this.body.util.toTime(pointer.x).valueOf();
        } else {
          var height = this.body.domProps.center.height;
          conversion = this.conversion(height);
          return pointer.y / conversion.scale + conversion.offset;
        }
      }
      /**
       * Get the pointer location relative to the location of the dom element
       * @param {{x: number, y: number}} touch
       * @param {Element} element   HTML DOM element
       * @return {{x: number, y: number}} pointer
       * @private
       */
    }, {
      key: "getPointer",
      value: function getPointer(touch, element) {
        var elementRect = element.getBoundingClientRect();
        if (this.options.rtl) {
          return {
            x: elementRect.right - touch.x,
            y: touch.y - elementRect.top
          };
        } else {
          return {
            x: touch.x - elementRect.left,
            y: touch.y - elementRect.top
          };
        }
      }
      /**
       * Zoom the range the given scale in or out. Start and end date will
       * be adjusted, and the timeline will be redrawn. You can optionally give a
       * date around which to zoom.
       * For example, try scale = 0.9 or 1.1
       * @param {number} scale      Scaling factor. Values above 1 will zoom out,
       *                            values below 1 will zoom in.
       * @param {number} [center]   Value representing a date around which will
       *                            be zoomed.
       * @param {number} delta
       * @param {Event} event
       */
    }, {
      key: "zoom",
      value: function zoom(scale, center, delta, event2) {
        if (center == null) {
          center = (this.start + this.end) / 2;
        }
        var hiddenDuration = getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
        var hiddenDurationBefore = getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, center);
        var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;
        var newStart = center - hiddenDurationBefore + (this.start - (center - hiddenDurationBefore)) * scale;
        var newEnd = center + hiddenDurationAfter + (this.end - (center + hiddenDurationAfter)) * scale;
        this.startToFront = delta > 0 ? false : true;
        this.endToFront = -delta > 0 ? false : true;
        var safeStart = snapAwayFromHidden(this.body.hiddenDates, newStart, delta, true);
        var safeEnd = snapAwayFromHidden(this.body.hiddenDates, newEnd, -delta, true);
        if (safeStart != newStart || safeEnd != newEnd) {
          newStart = safeStart;
          newEnd = safeEnd;
        }
        var options = {
          animation: false,
          byUser: true,
          event: event2
        };
        this.setRange(newStart, newEnd, options);
        this.startToFront = false;
        this.endToFront = true;
      }
      /**
       * Move the range with a given delta to the left or right. Start and end
       * value will be adjusted. For example, try delta = 0.1 or -0.1
       * @param {number}  delta     Moving amount. Positive value will move right,
       *                            negative value will move left
       */
    }, {
      key: "move",
      value: function move(delta) {
        var diff = this.end - this.start;
        var newStart = this.start + diff * delta;
        var newEnd = this.end + diff * delta;
        this.start = newStart;
        this.end = newEnd;
      }
      /**
       * Move the range to a new center point
       * @param {number} moveTo      New center point of the range
       */
    }, {
      key: "moveTo",
      value: function moveTo(_moveTo) {
        var center = (this.start + this.end) / 2;
        var diff = center - _moveTo;
        var newStart = this.start - diff;
        var newEnd = this.end - diff;
        var options = {
          animation: false,
          byUser: true,
          event: null
        };
        this.setRange(newStart, newEnd, options);
      }
    }], [{
      key: "conversion",
      value: function conversion(start, end, width, totalHidden) {
        if (totalHidden === void 0) {
          totalHidden = 0;
        }
        if (width != 0 && end - start != 0) {
          return {
            offset: start,
            scale: width / (end - start - totalHidden)
          };
        } else {
          return {
            offset: 0,
            scale: 1
          };
        }
      }
    }]);
    return Range2;
  }(Component);
  function validateDirection(direction) {
    if (direction != "horizontal" && direction != "vertical") {
      throw new TypeError('Unknown direction "'.concat(direction, '". Choose "horizontal" or "vertical".'));
    }
  }
  var setIntervalExports = {};
  var setInterval$1 = {
    get exports() {
      return setIntervalExports;
    },
    set exports(v) {
      setIntervalExports = v;
    }
  };
  var path = path$t;
  var setInterval = path.setInterval;
  (function(module) {
    module.exports = setInterval;
  })(setInterval$1);
  var _setInterval = /* @__PURE__ */ getDefaultExportFromCjs(setIntervalExports);
  var _firstTarget = null;
  function propagating(hammer, options) {
    var _options = options || {
      preventDefault: false
    };
    if (hammer.Manager) {
      var Hammer2 = hammer;
      var PropagatingHammer = function(element2, options2) {
        var o = Object.create(_options);
        if (options2)
          Hammer2.assign(o, options2);
        return propagating(new Hammer2(element2, o), o);
      };
      Hammer2.assign(PropagatingHammer, Hammer2);
      PropagatingHammer.Manager = function(element2, options2) {
        var o = Object.create(_options);
        if (options2)
          Hammer2.assign(o, options2);
        return propagating(new Hammer2.Manager(element2, o), o);
      };
      return PropagatingHammer;
    }
    var wrapper = Object.create(hammer);
    var element = hammer.element;
    if (!element.hammer)
      element.hammer = [];
    element.hammer.push(wrapper);
    hammer.on("hammer.input", function(event2) {
      if (_options.preventDefault === true || _options.preventDefault === event2.pointerType) {
        event2.preventDefault();
      }
      if (event2.isFirst) {
        _firstTarget = event2.target;
      }
    });
    wrapper._handlers = {};
    wrapper.on = function(events, handler) {
      split3(events).forEach(function(event2) {
        var _handlers = wrapper._handlers[event2];
        if (!_handlers) {
          wrapper._handlers[event2] = _handlers = [];
          hammer.on(event2, propagatedHandler);
        }
        _handlers.push(handler);
      });
      return wrapper;
    };
    wrapper.off = function(events, handler) {
      split3(events).forEach(function(event2) {
        var _handlers = wrapper._handlers[event2];
        if (_handlers) {
          _handlers = handler ? _handlers.filter(function(h) {
            return h !== handler;
          }) : [];
          if (_handlers.length > 0) {
            wrapper._handlers[event2] = _handlers;
          } else {
            hammer.off(event2, propagatedHandler);
            delete wrapper._handlers[event2];
          }
        }
      });
      return wrapper;
    };
    wrapper.emit = function(eventType, event2) {
      _firstTarget = event2.target;
      hammer.emit(eventType, event2);
    };
    wrapper.destroy = function() {
      var hammers = hammer.element.hammer;
      var idx = hammers.indexOf(wrapper);
      if (idx !== -1)
        hammers.splice(idx, 1);
      if (!hammers.length)
        delete hammer.element.hammer;
      wrapper._handlers = {};
      hammer.destroy();
    };
    function split3(events) {
      return events.match(/[^ ]+/g);
    }
    function propagatedHandler(event2) {
      if (event2.type !== "hammer.input") {
        if (!event2.srcEvent._handled) {
          event2.srcEvent._handled = {};
        }
        if (event2.srcEvent._handled[event2.type]) {
          return;
        } else {
          event2.srcEvent._handled[event2.type] = true;
        }
      }
      var stopped = false;
      event2.stopPropagation = function() {
        stopped = true;
      };
      var srcStop = event2.srcEvent.stopPropagation.bind(event2.srcEvent);
      if (typeof srcStop == "function") {
        event2.srcEvent.stopPropagation = function() {
          srcStop();
          event2.stopPropagation();
        };
      }
      event2.firstTarget = _firstTarget;
      var elem = _firstTarget;
      while (elem && !stopped) {
        var elemHammer = elem.hammer;
        if (elemHammer) {
          var _handlers;
          for (var k = 0; k < elemHammer.length; k++) {
            _handlers = elemHammer[k]._handlers[event2.type];
            if (_handlers)
              for (var i2 = 0; i2 < _handlers.length && !stopped; i2++) {
                _handlers[i2](event2);
              }
          }
        }
        elem = elem.parentNode;
      }
    }
    return wrapper;
  }
  function hammerMock() {
    var noop2 = function noop3() {
    };
    return {
      on: noop2,
      off: noop2,
      destroy: noop2,
      emit: noop2,
      get: function get3(m) {
        return {
          set: noop2
        };
      }
    };
  }
  var modifiedHammer;
  if (typeof window !== "undefined") {
    OurHammer = window["Hammer"] || Hammer$4;
    modifiedHammer = propagating(OurHammer, {
      preventDefault: "mouse"
    });
  } else {
    modifiedHammer = function modifiedHammer2() {
      return (
        // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
        hammerMock()
      );
    };
  }
  var OurHammer;
  var Hammer = modifiedHammer;
  function onTouch(hammer, callback) {
    callback.inputHandler = function(event2) {
      if (event2.isFirst) {
        callback(event2);
      }
    };
    hammer.on("hammer.input", callback.inputHandler);
  }
  function onRelease(hammer, callback) {
    callback.inputHandler = function(event2) {
      if (event2.isFinal) {
        callback(event2);
      }
    };
    return hammer.on("hammer.input", callback.inputHandler);
  }
  function disablePreventDefaultVertically(pinchRecognizer) {
    var TOUCH_ACTION_PAN_Y2 = "pan-y";
    pinchRecognizer.getTouchAction = function() {
      return [TOUCH_ACTION_PAN_Y2];
    };
    return pinchRecognizer;
  }
  var TimeStep = /* @__PURE__ */ function() {
    function TimeStep2(start, end, minimumStep, hiddenDates, options) {
      _classCallCheck(this, TimeStep2);
      this.moment = options && options.moment || moment$3;
      this.options = options ? options : {};
      this.current = this.moment();
      this._start = this.moment();
      this._end = this.moment();
      this.autoScale = true;
      this.scale = "day";
      this.step = 1;
      this.setRange(start, end, minimumStep);
      this.switchedDay = false;
      this.switchedMonth = false;
      this.switchedYear = false;
      if (_Array$isArray(hiddenDates)) {
        this.hiddenDates = hiddenDates;
      } else if (hiddenDates != void 0) {
        this.hiddenDates = [hiddenDates];
      } else {
        this.hiddenDates = [];
      }
      this.format = TimeStep2.FORMAT;
    }
    _createClass(TimeStep2, [{
      key: "setMoment",
      value: function setMoment(moment2) {
        this.moment = moment2;
        this.current = this.moment(this.current.valueOf());
        this._start = this.moment(this._start.valueOf());
        this._end = this.moment(this._end.valueOf());
      }
      /**
       * Set custom formatting for the minor an major labels of the TimeStep.
       * Both `minorLabels` and `majorLabels` are an Object with properties:
       * 'millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'.
       * @param {{minorLabels: Object, majorLabels: Object}} format
       */
    }, {
      key: "setFormat",
      value: function setFormat(format) {
        var defaultFormat = availableUtils.deepExtend({}, TimeStep2.FORMAT);
        this.format = availableUtils.deepExtend(defaultFormat, format);
      }
      /**
       * Set a new range
       * If minimumStep is provided, the step size is chosen as close as possible
       * to the minimumStep but larger than minimumStep. If minimumStep is not
       * provided, the scale is set to 1 DAY.
       * The minimumStep should correspond with the onscreen size of about 6 characters
       * @param {Date} [start]      The start date and time.
       * @param {Date} [end]        The end date and time.
       * @param {int} [minimumStep] Optional. Minimum step size in milliseconds
       */
    }, {
      key: "setRange",
      value: function setRange(start, end, minimumStep) {
        if (!(start instanceof Date) || !(end instanceof Date)) {
          throw "No legal start or end date in method setRange";
        }
        this._start = start != void 0 ? this.moment(start.valueOf()) : _Date$now();
        this._end = end != void 0 ? this.moment(end.valueOf()) : _Date$now();
        if (this.autoScale) {
          this.setMinimumStep(minimumStep);
        }
      }
      /**
       * Set the range iterator to the start date.
       */
    }, {
      key: "start",
      value: function start() {
        this.current = this._start.clone();
        this.roundToMinor();
      }
      /**
       * Round the current date to the first minor date value
       * This must be executed once when the current date is set to start Date
       */
    }, {
      key: "roundToMinor",
      value: function roundToMinor() {
        if (this.scale == "week") {
          this.current.weekday(0);
        }
        switch (this.scale) {
          case "year":
            this.current.year(this.step * Math.floor(this.current.year() / this.step));
            this.current.month(0);
          case "month":
            this.current.date(1);
          case "week":
          case "day":
          case "weekday":
            this.current.hours(0);
          case "hour":
            this.current.minutes(0);
          case "minute":
            this.current.seconds(0);
          case "second":
            this.current.milliseconds(0);
        }
        if (this.step != 1) {
          var priorCurrent = this.current.clone();
          switch (this.scale) {
            case "millisecond":
              this.current.subtract(this.current.milliseconds() % this.step, "milliseconds");
              break;
            case "second":
              this.current.subtract(this.current.seconds() % this.step, "seconds");
              break;
            case "minute":
              this.current.subtract(this.current.minutes() % this.step, "minutes");
              break;
            case "hour":
              this.current.subtract(this.current.hours() % this.step, "hours");
              break;
            case "weekday":
            case "day":
              this.current.subtract((this.current.date() - 1) % this.step, "day");
              break;
            case "week":
              this.current.subtract(this.current.week() % this.step, "week");
              break;
            case "month":
              this.current.subtract(this.current.month() % this.step, "month");
              break;
            case "year":
              this.current.subtract(this.current.year() % this.step, "year");
              break;
          }
          if (!priorCurrent.isSame(this.current)) {
            this.current = this.moment(snapAwayFromHidden(this.hiddenDates, this.current.valueOf(), -1, true));
          }
        }
      }
      /**
       * Check if the there is a next step
       * @return {boolean}  true if the current date has not passed the end date
       */
    }, {
      key: "hasNext",
      value: function hasNext() {
        return this.current.valueOf() <= this._end.valueOf();
      }
      /**
       * Do the next step
       */
    }, {
      key: "next",
      value: function next2() {
        var prev = this.current.valueOf();
        switch (this.scale) {
          case "millisecond":
            this.current.add(this.step, "millisecond");
            break;
          case "second":
            this.current.add(this.step, "second");
            break;
          case "minute":
            this.current.add(this.step, "minute");
            break;
          case "hour":
            this.current.add(this.step, "hour");
            if (this.current.month() < 6) {
              this.current.subtract(this.current.hours() % this.step, "hour");
            } else {
              if (this.current.hours() % this.step !== 0) {
                this.current.add(this.step - this.current.hours() % this.step, "hour");
              }
            }
            break;
          case "weekday":
          case "day":
            this.current.add(this.step, "day");
            break;
          case "week":
            if (this.current.weekday() !== 0) {
              this.current.weekday(0);
              this.current.add(this.step, "week");
            } else if (this.options.showMajorLabels === false) {
              this.current.add(this.step, "week");
            } else {
              var nextWeek = this.current.clone();
              nextWeek.add(1, "week");
              if (nextWeek.isSame(this.current, "month")) {
                this.current.add(this.step, "week");
              } else {
                this.current.add(this.step, "week");
                this.current.date(1);
              }
            }
            break;
          case "month":
            this.current.add(this.step, "month");
            break;
          case "year":
            this.current.add(this.step, "year");
            break;
        }
        if (this.step != 1) {
          switch (this.scale) {
            case "millisecond":
              if (this.current.milliseconds() > 0 && this.current.milliseconds() < this.step)
                this.current.milliseconds(0);
              break;
            case "second":
              if (this.current.seconds() > 0 && this.current.seconds() < this.step)
                this.current.seconds(0);
              break;
            case "minute":
              if (this.current.minutes() > 0 && this.current.minutes() < this.step)
                this.current.minutes(0);
              break;
            case "hour":
              if (this.current.hours() > 0 && this.current.hours() < this.step)
                this.current.hours(0);
              break;
            case "weekday":
            case "day":
              if (this.current.date() < this.step + 1)
                this.current.date(1);
              break;
            case "week":
              if (this.current.week() < this.step)
                this.current.week(1);
              break;
            case "month":
              if (this.current.month() < this.step)
                this.current.month(0);
              break;
          }
        }
        if (this.current.valueOf() == prev) {
          this.current = this._end.clone();
        }
        this.switchedDay = false;
        this.switchedMonth = false;
        this.switchedYear = false;
        stepOverHiddenDates(this.moment, this, prev);
      }
      /**
       * Get the current datetime
       * @return {Moment}  current The current date
       */
    }, {
      key: "getCurrent",
      value: function getCurrent() {
        return this.current.clone();
      }
      /**
       * Set a custom scale. Autoscaling will be disabled.
       * For example setScale('minute', 5) will result
       * in minor steps of 5 minutes, and major steps of an hour.
       *
       * @param {{scale: string, step: number}} params
       *                               An object containing two properties:
       *                               - A string 'scale'. Choose from 'millisecond', 'second',
       *                                 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'.
       *                               - A number 'step'. A step size, by default 1.
       *                                 Choose for example 1, 2, 5, or 10.
       */
    }, {
      key: "setScale",
      value: function setScale(params) {
        if (params && typeof params.scale == "string") {
          this.scale = params.scale;
          this.step = params.step > 0 ? params.step : 1;
          this.autoScale = false;
        }
      }
      /**
       * Enable or disable autoscaling
       * @param {boolean} enable  If true, autoascaling is set true
       */
    }, {
      key: "setAutoScale",
      value: function setAutoScale(enable2) {
        this.autoScale = enable2;
      }
      /**
       * Automatically determine the scale that bests fits the provided minimum step
       * @param {number} [minimumStep]  The minimum step size in milliseconds
       */
    }, {
      key: "setMinimumStep",
      value: function setMinimumStep(minimumStep) {
        if (minimumStep == void 0) {
          return;
        }
        var stepYear = 1e3 * 60 * 60 * 24 * 30 * 12;
        var stepMonth = 1e3 * 60 * 60 * 24 * 30;
        var stepDay = 1e3 * 60 * 60 * 24;
        var stepHour = 1e3 * 60 * 60;
        var stepMinute = 1e3 * 60;
        var stepSecond = 1e3;
        var stepMillisecond = 1;
        if (stepYear * 1e3 > minimumStep) {
          this.scale = "year";
          this.step = 1e3;
        }
        if (stepYear * 500 > minimumStep) {
          this.scale = "year";
          this.step = 500;
        }
        if (stepYear * 100 > minimumStep) {
          this.scale = "year";
          this.step = 100;
        }
        if (stepYear * 50 > minimumStep) {
          this.scale = "year";
          this.step = 50;
        }
        if (stepYear * 10 > minimumStep) {
          this.scale = "year";
          this.step = 10;
        }
        if (stepYear * 5 > minimumStep) {
          this.scale = "year";
          this.step = 5;
        }
        if (stepYear > minimumStep) {
          this.scale = "year";
          this.step = 1;
        }
        if (stepMonth * 3 > minimumStep) {
          this.scale = "month";
          this.step = 3;
        }
        if (stepMonth > minimumStep) {
          this.scale = "month";
          this.step = 1;
        }
        if (stepDay * 7 > minimumStep && this.options.showWeekScale) {
          this.scale = "week";
          this.step = 1;
        }
        if (stepDay * 2 > minimumStep) {
          this.scale = "day";
          this.step = 2;
        }
        if (stepDay > minimumStep) {
          this.scale = "day";
          this.step = 1;
        }
        if (stepDay / 2 > minimumStep) {
          this.scale = "weekday";
          this.step = 1;
        }
        if (stepHour * 4 > minimumStep) {
          this.scale = "hour";
          this.step = 4;
        }
        if (stepHour > minimumStep) {
          this.scale = "hour";
          this.step = 1;
        }
        if (stepMinute * 15 > minimumStep) {
          this.scale = "minute";
          this.step = 15;
        }
        if (stepMinute * 10 > minimumStep) {
          this.scale = "minute";
          this.step = 10;
        }
        if (stepMinute * 5 > minimumStep) {
          this.scale = "minute";
          this.step = 5;
        }
        if (stepMinute > minimumStep) {
          this.scale = "minute";
          this.step = 1;
        }
        if (stepSecond * 15 > minimumStep) {
          this.scale = "second";
          this.step = 15;
        }
        if (stepSecond * 10 > minimumStep) {
          this.scale = "second";
          this.step = 10;
        }
        if (stepSecond * 5 > minimumStep) {
          this.scale = "second";
          this.step = 5;
        }
        if (stepSecond > minimumStep) {
          this.scale = "second";
          this.step = 1;
        }
        if (stepMillisecond * 200 > minimumStep) {
          this.scale = "millisecond";
          this.step = 200;
        }
        if (stepMillisecond * 100 > minimumStep) {
          this.scale = "millisecond";
          this.step = 100;
        }
        if (stepMillisecond * 50 > minimumStep) {
          this.scale = "millisecond";
          this.step = 50;
        }
        if (stepMillisecond * 10 > minimumStep) {
          this.scale = "millisecond";
          this.step = 10;
        }
        if (stepMillisecond * 5 > minimumStep) {
          this.scale = "millisecond";
          this.step = 5;
        }
        if (stepMillisecond > minimumStep) {
          this.scale = "millisecond";
          this.step = 1;
        }
      }
      /**
       * Snap a date to a rounded value.
       * The snap intervals are dependent on the current scale and step.
       * Static function
       * @param {Date} date    the date to be snapped.
       * @param {string} scale Current scale, can be 'millisecond', 'second',
       *                       'minute', 'hour', 'weekday, 'day', 'week', 'month', 'year'.
       * @param {number} step  Current step (1, 2, 4, 5, ...
       * @return {Date} snappedDate
       */
    }, {
      key: "isMajor",
      value: (
        /**
         * Check if the current value is a major value (for example when the step
         * is DAY, a major value is each first day of the MONTH)
         * @return {boolean} true if current date is major, else false.
         */
        function isMajor() {
          if (this.switchedYear == true) {
            switch (this.scale) {
              case "year":
              case "month":
              case "week":
              case "weekday":
              case "day":
              case "hour":
              case "minute":
              case "second":
              case "millisecond":
                return true;
              default:
                return false;
            }
          } else if (this.switchedMonth == true) {
            switch (this.scale) {
              case "week":
              case "weekday":
              case "day":
              case "hour":
              case "minute":
              case "second":
              case "millisecond":
                return true;
              default:
                return false;
            }
          } else if (this.switchedDay == true) {
            switch (this.scale) {
              case "millisecond":
              case "second":
              case "minute":
              case "hour":
                return true;
              default:
                return false;
            }
          }
          var date2 = this.moment(this.current);
          switch (this.scale) {
            case "millisecond":
              return date2.milliseconds() == 0;
            case "second":
              return date2.seconds() == 0;
            case "minute":
              return date2.hours() == 0 && date2.minutes() == 0;
            case "hour":
              return date2.hours() == 0;
            case "weekday":
            case "day":
              return this.options.showWeekScale ? date2.isoWeekday() == 1 : date2.date() == 1;
            case "week":
              return date2.date() == 1;
            case "month":
              return date2.month() == 0;
            case "year":
              return false;
            default:
              return false;
          }
        }
      )
      /**
       * Returns formatted text for the minor axislabel, depending on the current
       * date and the scale. For example when scale is MINUTE, the current time is
       * formatted as "hh:mm".
       * @param {Date} [date=this.current] custom date. if not provided, current date is taken
       * @returns {String}
       */
    }, {
      key: "getLabelMinor",
      value: function getLabelMinor(date2) {
        if (date2 == void 0) {
          date2 = this.current;
        }
        if (date2 instanceof Date) {
          date2 = this.moment(date2);
        }
        if (typeof this.format.minorLabels === "function") {
          return this.format.minorLabels(date2, this.scale, this.step);
        }
        var format = this.format.minorLabels[this.scale];
        switch (this.scale) {
          case "week":
            if (date2.date() === 1 && date2.weekday() !== 0) {
              return "";
            }
          default:
            return format && format.length > 0 ? this.moment(date2).format(format) : "";
        }
      }
      /**
       * Returns formatted text for the major axis label, depending on the current
       * date and the scale. For example when scale is MINUTE, the major scale is
       * hours, and the hour will be formatted as "hh".
       * @param {Date} [date=this.current] custom date. if not provided, current date is taken
       * @returns {String}
       */
    }, {
      key: "getLabelMajor",
      value: function getLabelMajor(date2) {
        if (date2 == void 0) {
          date2 = this.current;
        }
        if (date2 instanceof Date) {
          date2 = this.moment(date2);
        }
        if (typeof this.format.majorLabels === "function") {
          return this.format.majorLabels(date2, this.scale, this.step);
        }
        var format = this.format.majorLabels[this.scale];
        return format && format.length > 0 ? this.moment(date2).format(format) : "";
      }
      /**
       * get class name
       * @return {string} class name
       */
    }, {
      key: "getClassName",
      value: function getClassName() {
        var _context;
        var _moment = this.moment;
        var m = this.moment(this.current);
        var current = m.locale ? m.locale("en") : m.lang("en");
        var step = this.step;
        var classNames = [];
        function even(value) {
          return value / step % 2 == 0 ? " vis-even" : " vis-odd";
        }
        function today(date2) {
          if (date2.isSame(_Date$now(), "day")) {
            return " vis-today";
          }
          if (date2.isSame(_moment().add(1, "day"), "day")) {
            return " vis-tomorrow";
          }
          if (date2.isSame(_moment().add(-1, "day"), "day")) {
            return " vis-yesterday";
          }
          return "";
        }
        function currentWeek(date2) {
          return date2.isSame(_Date$now(), "week") ? " vis-current-week" : "";
        }
        function currentMonth(date2) {
          return date2.isSame(_Date$now(), "month") ? " vis-current-month" : "";
        }
        function currentYear(date2) {
          return date2.isSame(_Date$now(), "year") ? " vis-current-year" : "";
        }
        switch (this.scale) {
          case "millisecond":
            classNames.push(today(current));
            classNames.push(even(current.milliseconds()));
            break;
          case "second":
            classNames.push(today(current));
            classNames.push(even(current.seconds()));
            break;
          case "minute":
            classNames.push(today(current));
            classNames.push(even(current.minutes()));
            break;
          case "hour":
            classNames.push(_concatInstanceProperty(_context = "vis-h".concat(current.hours())).call(_context, this.step == 4 ? "-h" + (current.hours() + 4) : ""));
            classNames.push(today(current));
            classNames.push(even(current.hours()));
            break;
          case "weekday":
            classNames.push("vis-".concat(current.format("dddd").toLowerCase()));
            classNames.push(today(current));
            classNames.push(currentWeek(current));
            classNames.push(even(current.date()));
            break;
          case "day":
            classNames.push("vis-day".concat(current.date()));
            classNames.push("vis-".concat(current.format("MMMM").toLowerCase()));
            classNames.push(today(current));
            classNames.push(currentMonth(current));
            classNames.push(this.step <= 2 ? today(current) : "");
            classNames.push(this.step <= 2 ? "vis-".concat(current.format("dddd").toLowerCase()) : "");
            classNames.push(even(current.date() - 1));
            break;
          case "week":
            classNames.push("vis-week".concat(current.format("w")));
            classNames.push(currentWeek(current));
            classNames.push(even(current.week()));
            break;
          case "month":
            classNames.push("vis-".concat(current.format("MMMM").toLowerCase()));
            classNames.push(currentMonth(current));
            classNames.push(even(current.month()));
            break;
          case "year":
            classNames.push("vis-year".concat(current.year()));
            classNames.push(currentYear(current));
            classNames.push(even(current.year()));
            break;
        }
        return _filterInstanceProperty(classNames).call(classNames, String).join(" ");
      }
    }], [{
      key: "snap",
      value: function snap(date2, scale, step) {
        var clone2 = moment$3(date2);
        if (scale == "year") {
          var year = clone2.year() + Math.round(clone2.month() / 12);
          clone2.year(Math.round(year / step) * step);
          clone2.month(0);
          clone2.date(0);
          clone2.hours(0);
          clone2.minutes(0);
          clone2.seconds(0);
          clone2.milliseconds(0);
        } else if (scale == "month") {
          if (clone2.date() > 15) {
            clone2.date(1);
            clone2.add(1, "month");
          } else {
            clone2.date(1);
          }
          clone2.hours(0);
          clone2.minutes(0);
          clone2.seconds(0);
          clone2.milliseconds(0);
        } else if (scale == "week") {
          if (clone2.weekday() > 2) {
            clone2.weekday(0);
            clone2.add(1, "week");
          } else {
            clone2.weekday(0);
          }
          clone2.hours(0);
          clone2.minutes(0);
          clone2.seconds(0);
          clone2.milliseconds(0);
        } else if (scale == "day") {
          switch (step) {
            case 5:
            case 2:
              clone2.hours(Math.round(clone2.hours() / 24) * 24);
              break;
            default:
              clone2.hours(Math.round(clone2.hours() / 12) * 12);
              break;
          }
          clone2.minutes(0);
          clone2.seconds(0);
          clone2.milliseconds(0);
        } else if (scale == "weekday") {
          switch (step) {
            case 5:
            case 2:
              clone2.hours(Math.round(clone2.hours() / 12) * 12);
              break;
            default:
              clone2.hours(Math.round(clone2.hours() / 6) * 6);
              break;
          }
          clone2.minutes(0);
          clone2.seconds(0);
          clone2.milliseconds(0);
        } else if (scale == "hour") {
          switch (step) {
            case 4:
              clone2.minutes(Math.round(clone2.minutes() / 60) * 60);
              break;
            default:
              clone2.minutes(Math.round(clone2.minutes() / 30) * 30);
              break;
          }
          clone2.seconds(0);
          clone2.milliseconds(0);
        } else if (scale == "minute") {
          switch (step) {
            case 15:
            case 10:
              clone2.minutes(Math.round(clone2.minutes() / 5) * 5);
              clone2.seconds(0);
              break;
            case 5:
              clone2.seconds(Math.round(clone2.seconds() / 60) * 60);
              break;
            default:
              clone2.seconds(Math.round(clone2.seconds() / 30) * 30);
              break;
          }
          clone2.milliseconds(0);
        } else if (scale == "second") {
          switch (step) {
            case 15:
            case 10:
              clone2.seconds(Math.round(clone2.seconds() / 5) * 5);
              clone2.milliseconds(0);
              break;
            case 5:
              clone2.milliseconds(Math.round(clone2.milliseconds() / 1e3) * 1e3);
              break;
            default:
              clone2.milliseconds(Math.round(clone2.milliseconds() / 500) * 500);
              break;
          }
        } else if (scale == "millisecond") {
          var _step = step > 5 ? step / 2 : 1;
          clone2.milliseconds(Math.round(clone2.milliseconds() / _step) * _step);
        }
        return clone2;
      }
    }]);
    return TimeStep2;
  }();
  TimeStep.FORMAT = {
    minorLabels: {
      millisecond: "SSS",
      second: "s",
      minute: "HH:mm",
      hour: "HH:mm",
      weekday: "ddd D",
      day: "D",
      week: "w",
      month: "MMM",
      year: "YYYY"
    },
    majorLabels: {
      millisecond: "HH:mm:ss",
      second: "D MMMM HH:mm",
      minute: "ddd D MMMM",
      hour: "ddd D MMMM",
      weekday: "MMMM YYYY",
      day: "MMMM YYYY",
      week: "MMMM YYYY",
      month: "YYYY",
      year: ""
    }
  };
  function styleInject(css2, ref) {
    if (ref === void 0)
      ref = {};
    var insertAt = ref.insertAt;
    if (!css2 || typeof document === "undefined") {
      return;
    }
    var head = document.head || document.getElementsByTagName("head")[0];
    var style = document.createElement("style");
    style.type = "text/css";
    if (insertAt === "top") {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }
    if (style.styleSheet) {
      style.styleSheet.cssText = css2;
    } else {
      style.appendChild(document.createTextNode(css2));
    }
  }
  var css_248z$e = ".vis-time-axis {\n  position: relative;\n  overflow: hidden;\n}\n\n.vis-time-axis.vis-foreground {\n  top: 0;\n  left: 0;\n  width: 100%;\n}\n\n.vis-time-axis.vis-background {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.vis-time-axis .vis-text {\n  position: absolute;\n  color: #4d4d4d;\n  padding: 3px;\n  overflow: hidden;\n  box-sizing: border-box;\n\n  white-space: nowrap;\n}\n\n.vis-time-axis .vis-text.vis-measure {\n  position: absolute;\n  padding-left: 0;\n  padding-right: 0;\n  margin-left: 0;\n  margin-right: 0;\n  visibility: hidden;\n}\n\n.vis-time-axis .vis-grid.vis-vertical {\n  position: absolute;\n  border-left: 1px solid;\n}\n\n.vis-time-axis .vis-grid.vis-vertical-rtl {\n  position: absolute;\n  border-right: 1px solid;\n}\n\n.vis-time-axis .vis-grid.vis-minor {\n  border-color: #e5e5e5;\n}\n\n.vis-time-axis .vis-grid.vis-major {\n  border-color: #bfbfbf;\n}\n";
  styleInject(css_248z$e);
  function _createSuper$b(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$b() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var TimeAxis = /* @__PURE__ */ function(_Component) {
    _inherits(TimeAxis2, _Component);
    var _super = _createSuper$b(TimeAxis2);
    function TimeAxis2(body, options) {
      var _this;
      _classCallCheck(this, TimeAxis2);
      _this = _super.call(this);
      _this.dom = {
        foreground: null,
        lines: [],
        majorTexts: [],
        minorTexts: [],
        redundant: {
          lines: [],
          majorTexts: [],
          minorTexts: []
        }
      };
      _this.props = {
        range: {
          start: 0,
          end: 0,
          minimumStep: 0
        },
        lineTop: 0
      };
      _this.defaultOptions = {
        orientation: {
          axis: "bottom"
        },
        // axis orientation: 'top' or 'bottom'
        showMinorLabels: true,
        showMajorLabels: true,
        showWeekScale: false,
        maxMinorChars: 7,
        format: availableUtils.extend({}, TimeStep.FORMAT),
        moment: moment$3,
        timeAxis: null
      };
      _this.options = availableUtils.extend({}, _this.defaultOptions);
      _this.body = body;
      _this._create();
      _this.setOptions(options);
      return _this;
    }
    _createClass(TimeAxis2, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options) {
          availableUtils.selectiveExtend(["showMinorLabels", "showMajorLabels", "showWeekScale", "maxMinorChars", "hiddenDates", "timeAxis", "moment", "rtl"], this.options, options);
          availableUtils.selectiveDeepExtend(["format"], this.options, options);
          if ("orientation" in options) {
            if (typeof options.orientation === "string") {
              this.options.orientation.axis = options.orientation;
            } else if (_typeof$1(options.orientation) === "object" && "axis" in options.orientation) {
              this.options.orientation.axis = options.orientation.axis;
            }
          }
          if ("locale" in options) {
            if (typeof moment$3.locale === "function") {
              moment$3.locale(options.locale);
            } else {
              moment$3.lang(options.locale);
            }
          }
        }
      }
      /**
       * Create the HTML DOM for the TimeAxis
       */
    }, {
      key: "_create",
      value: function _create() {
        this.dom.foreground = document.createElement("div");
        this.dom.background = document.createElement("div");
        this.dom.foreground.className = "vis-time-axis vis-foreground";
        this.dom.background.className = "vis-time-axis vis-background";
      }
      /**
       * Destroy the TimeAxis
       */
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.dom.foreground.parentNode) {
          this.dom.foreground.parentNode.removeChild(this.dom.foreground);
        }
        if (this.dom.background.parentNode) {
          this.dom.background.parentNode.removeChild(this.dom.background);
        }
        this.body = null;
      }
      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
    }, {
      key: "redraw",
      value: function redraw() {
        var props = this.props;
        var foreground = this.dom.foreground;
        var background = this.dom.background;
        var parent2 = this.options.orientation.axis == "top" ? this.body.dom.top : this.body.dom.bottom;
        var parentChanged = foreground.parentNode !== parent2;
        this._calculateCharSize();
        var showMinorLabels = this.options.showMinorLabels && this.options.orientation.axis !== "none";
        var showMajorLabels = this.options.showMajorLabels && this.options.orientation.axis !== "none";
        props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
        props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;
        props.height = props.minorLabelHeight + props.majorLabelHeight;
        props.width = foreground.offsetWidth;
        props.minorLineHeight = this.body.domProps.root.height - props.majorLabelHeight - (this.options.orientation.axis == "top" ? this.body.domProps.bottom.height : this.body.domProps.top.height);
        props.minorLineWidth = 1;
        props.majorLineHeight = props.minorLineHeight + props.majorLabelHeight;
        props.majorLineWidth = 1;
        var foregroundNextSibling = foreground.nextSibling;
        var backgroundNextSibling = background.nextSibling;
        foreground.parentNode && foreground.parentNode.removeChild(foreground);
        background.parentNode && background.parentNode.removeChild(background);
        foreground.style.height = "".concat(this.props.height, "px");
        this._repaintLabels();
        if (foregroundNextSibling) {
          parent2.insertBefore(foreground, foregroundNextSibling);
        } else {
          parent2.appendChild(foreground);
        }
        if (backgroundNextSibling) {
          this.body.dom.backgroundVertical.insertBefore(background, backgroundNextSibling);
        } else {
          this.body.dom.backgroundVertical.appendChild(background);
        }
        return this._isResized() || parentChanged;
      }
      /**
       * Repaint major and minor text labels and vertical grid lines
       * @private
       */
    }, {
      key: "_repaintLabels",
      value: function _repaintLabels() {
        var orientation = this.options.orientation.axis;
        var start = availableUtils.convert(this.body.range.start, "Number");
        var end = availableUtils.convert(this.body.range.end, "Number");
        var timeLabelsize = this.body.util.toTime((this.props.minorCharWidth || 10) * this.options.maxMinorChars).valueOf();
        var minimumStep = timeLabelsize - getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this.body.range, timeLabelsize);
        minimumStep -= this.body.util.toTime(0).valueOf();
        var step = new TimeStep(new Date(start), new Date(end), minimumStep, this.body.hiddenDates, this.options);
        step.setMoment(this.options.moment);
        if (this.options.format) {
          step.setFormat(this.options.format);
        }
        if (this.options.timeAxis) {
          step.setScale(this.options.timeAxis);
        }
        this.step = step;
        var dom2 = this.dom;
        dom2.redundant.lines = dom2.lines;
        dom2.redundant.majorTexts = dom2.majorTexts;
        dom2.redundant.minorTexts = dom2.minorTexts;
        dom2.lines = [];
        dom2.majorTexts = [];
        dom2.minorTexts = [];
        var current;
        var next2;
        var x;
        var xNext;
        var isMajor;
        var showMinorGrid;
        var width = 0;
        var prevWidth;
        var line;
        var xFirstMajorLabel = void 0;
        var count = 0;
        var MAX = 1e3;
        var className;
        step.start();
        next2 = step.getCurrent();
        xNext = this.body.util.toScreen(next2);
        while (step.hasNext() && count < MAX) {
          count++;
          isMajor = step.isMajor();
          className = step.getClassName();
          current = next2;
          x = xNext;
          step.next();
          next2 = step.getCurrent();
          xNext = this.body.util.toScreen(next2);
          prevWidth = width;
          width = xNext - x;
          switch (step.scale) {
            case "week":
              showMinorGrid = true;
              break;
            default:
              showMinorGrid = width >= prevWidth * 0.4;
              break;
          }
          if (this.options.showMinorLabels && showMinorGrid) {
            var label = this._repaintMinorText(x, step.getLabelMinor(current), orientation, className);
            label.style.width = "".concat(width, "px");
          }
          if (isMajor && this.options.showMajorLabels) {
            if (x > 0) {
              if (xFirstMajorLabel == void 0) {
                xFirstMajorLabel = x;
              }
              label = this._repaintMajorText(x, step.getLabelMajor(current), orientation, className);
            }
            line = this._repaintMajorLine(x, width, orientation, className);
          } else {
            if (showMinorGrid) {
              line = this._repaintMinorLine(x, width, orientation, className);
            } else {
              if (line) {
                line.style.width = "".concat(_parseInt(line.style.width) + width, "px");
              }
            }
          }
        }
        if (count === MAX && !warnedForOverflow) {
          console.warn("Something is wrong with the Timeline scale. Limited drawing of grid lines to ".concat(MAX, " lines."));
          warnedForOverflow = true;
        }
        if (this.options.showMajorLabels) {
          var leftTime = this.body.util.toTime(0);
          var leftText = step.getLabelMajor(leftTime);
          var widthText = leftText.length * (this.props.majorCharWidth || 10) + 10;
          if (xFirstMajorLabel == void 0 || widthText < xFirstMajorLabel) {
            this._repaintMajorText(0, leftText, orientation, className);
          }
        }
        _forEachInstanceProperty(availableUtils).call(availableUtils, this.dom.redundant, function(arr) {
          while (arr.length) {
            var elem = arr.pop();
            if (elem && elem.parentNode) {
              elem.parentNode.removeChild(elem);
            }
          }
        });
      }
      /**
       * Create a minor label for the axis at position x
       * @param {number} x
       * @param {string} text
       * @param {string} orientation   "top" or "bottom" (default)
       * @param {string} className
       * @return {Element} Returns the HTML element of the created label
       * @private
       */
    }, {
      key: "_repaintMinorText",
      value: function _repaintMinorText(x, text, orientation, className) {
        var label = this.dom.redundant.minorTexts.shift();
        if (!label) {
          var content = document.createTextNode("");
          label = document.createElement("div");
          label.appendChild(content);
          this.dom.foreground.appendChild(label);
        }
        this.dom.minorTexts.push(label);
        label.innerHTML = availableUtils.xss(text);
        var y = orientation == "top" ? this.props.majorLabelHeight : 0;
        this._setXY(label, x, y);
        label.className = "vis-text vis-minor ".concat(className);
        return label;
      }
      /**
       * Create a Major label for the axis at position x
       * @param {number} x
       * @param {string} text
       * @param {string} orientation   "top" or "bottom" (default)
       * @param {string} className
       * @return {Element} Returns the HTML element of the created label
       * @private
       */
    }, {
      key: "_repaintMajorText",
      value: function _repaintMajorText(x, text, orientation, className) {
        var label = this.dom.redundant.majorTexts.shift();
        if (!label) {
          var content = document.createElement("div");
          label = document.createElement("div");
          label.appendChild(content);
          this.dom.foreground.appendChild(label);
        }
        label.childNodes[0].innerHTML = availableUtils.xss(text);
        label.className = "vis-text vis-major ".concat(className);
        var y = orientation == "top" ? 0 : this.props.minorLabelHeight;
        this._setXY(label, x, y);
        this.dom.majorTexts.push(label);
        return label;
      }
      /**
       * sets xy
       * @param {string} label
       * @param {number} x
       * @param {number} y
       * @private
       */
    }, {
      key: "_setXY",
      value: function _setXY(label, x, y) {
        var _context;
        var directionX = this.options.rtl ? x * -1 : x;
        label.style.transform = _concatInstanceProperty(_context = "translate(".concat(directionX, "px, ")).call(_context, y, "px)");
      }
      /**
       * Create a minor line for the axis at position x
       * @param {number} left
       * @param {number} width
       * @param {string} orientation   "top" or "bottom" (default)
       * @param {string} className
       * @return {Element} Returns the created line
       * @private
       */
    }, {
      key: "_repaintMinorLine",
      value: function _repaintMinorLine(left, width, orientation, className) {
        var _context2;
        var line = this.dom.redundant.lines.shift();
        if (!line) {
          line = document.createElement("div");
          this.dom.background.appendChild(line);
        }
        this.dom.lines.push(line);
        var props = this.props;
        line.style.width = "".concat(width, "px");
        line.style.height = "".concat(props.minorLineHeight, "px");
        var y = orientation == "top" ? props.majorLabelHeight : this.body.domProps.top.height;
        var x = left - props.minorLineWidth / 2;
        this._setXY(line, x, y);
        line.className = _concatInstanceProperty(_context2 = "vis-grid ".concat(this.options.rtl ? "vis-vertical-rtl" : "vis-vertical", " vis-minor ")).call(_context2, className);
        return line;
      }
      /**
       * Create a Major line for the axis at position x
       * @param {number} left
       * @param {number} width
       * @param {string} orientation   "top" or "bottom" (default)
       * @param {string} className
       * @return {Element} Returns the created line
       * @private
       */
    }, {
      key: "_repaintMajorLine",
      value: function _repaintMajorLine(left, width, orientation, className) {
        var _context3;
        var line = this.dom.redundant.lines.shift();
        if (!line) {
          line = document.createElement("div");
          this.dom.background.appendChild(line);
        }
        this.dom.lines.push(line);
        var props = this.props;
        line.style.width = "".concat(width, "px");
        line.style.height = "".concat(props.majorLineHeight, "px");
        var y = orientation == "top" ? 0 : this.body.domProps.top.height;
        var x = left - props.majorLineWidth / 2;
        this._setXY(line, x, y);
        line.className = _concatInstanceProperty(_context3 = "vis-grid ".concat(this.options.rtl ? "vis-vertical-rtl" : "vis-vertical", " vis-major ")).call(_context3, className);
        return line;
      }
      /**
       * Determine the size of text on the axis (both major and minor axis).
       * The size is calculated only once and then cached in this.props.
       * @private
       */
    }, {
      key: "_calculateCharSize",
      value: function _calculateCharSize() {
        if (!this.dom.measureCharMinor) {
          this.dom.measureCharMinor = document.createElement("DIV");
          this.dom.measureCharMinor.className = "vis-text vis-minor vis-measure";
          this.dom.measureCharMinor.style.position = "absolute";
          this.dom.measureCharMinor.appendChild(document.createTextNode("0"));
          this.dom.foreground.appendChild(this.dom.measureCharMinor);
        }
        this.props.minorCharHeight = this.dom.measureCharMinor.clientHeight;
        this.props.minorCharWidth = this.dom.measureCharMinor.clientWidth;
        if (!this.dom.measureCharMajor) {
          this.dom.measureCharMajor = document.createElement("DIV");
          this.dom.measureCharMajor.className = "vis-text vis-major vis-measure";
          this.dom.measureCharMajor.style.position = "absolute";
          this.dom.measureCharMajor.appendChild(document.createTextNode("0"));
          this.dom.foreground.appendChild(this.dom.measureCharMajor);
        }
        this.props.majorCharHeight = this.dom.measureCharMajor.clientHeight;
        this.props.majorCharWidth = this.dom.measureCharMajor.clientWidth;
      }
    }]);
    return TimeAxis2;
  }(Component);
  var warnedForOverflow = false;
  function keycharm(options) {
    var preventDefault2 = options && options.preventDefault || false;
    var container = options && options.container || window;
    var _exportFunctions = {};
    var _bound = { keydown: {}, keyup: {} };
    var _keys = {};
    var i2;
    for (i2 = 97; i2 <= 122; i2++) {
      _keys[String.fromCharCode(i2)] = { code: 65 + (i2 - 97), shift: false };
    }
    for (i2 = 65; i2 <= 90; i2++) {
      _keys[String.fromCharCode(i2)] = { code: i2, shift: true };
    }
    for (i2 = 0; i2 <= 9; i2++) {
      _keys["" + i2] = { code: 48 + i2, shift: false };
    }
    for (i2 = 1; i2 <= 12; i2++) {
      _keys["F" + i2] = { code: 111 + i2, shift: false };
    }
    for (i2 = 0; i2 <= 9; i2++) {
      _keys["num" + i2] = { code: 96 + i2, shift: false };
    }
    _keys["num*"] = { code: 106, shift: false };
    _keys["num+"] = { code: 107, shift: false };
    _keys["num-"] = { code: 109, shift: false };
    _keys["num/"] = { code: 111, shift: false };
    _keys["num."] = { code: 110, shift: false };
    _keys["left"] = { code: 37, shift: false };
    _keys["up"] = { code: 38, shift: false };
    _keys["right"] = { code: 39, shift: false };
    _keys["down"] = { code: 40, shift: false };
    _keys["space"] = { code: 32, shift: false };
    _keys["enter"] = { code: 13, shift: false };
    _keys["shift"] = { code: 16, shift: void 0 };
    _keys["esc"] = { code: 27, shift: false };
    _keys["backspace"] = { code: 8, shift: false };
    _keys["tab"] = { code: 9, shift: false };
    _keys["ctrl"] = { code: 17, shift: false };
    _keys["alt"] = { code: 18, shift: false };
    _keys["delete"] = { code: 46, shift: false };
    _keys["pageup"] = { code: 33, shift: false };
    _keys["pagedown"] = { code: 34, shift: false };
    _keys["="] = { code: 187, shift: false };
    _keys["-"] = { code: 189, shift: false };
    _keys["]"] = { code: 221, shift: false };
    _keys["["] = { code: 219, shift: false };
    var down = function(event2) {
      handleEvent(event2, "keydown");
    };
    var up = function(event2) {
      handleEvent(event2, "keyup");
    };
    var handleEvent = function(event2, type) {
      if (_bound[type][event2.keyCode] !== void 0) {
        var bound = _bound[type][event2.keyCode];
        for (var i3 = 0; i3 < bound.length; i3++) {
          if (bound[i3].shift === void 0) {
            bound[i3].fn(event2);
          } else if (bound[i3].shift == true && event2.shiftKey == true) {
            bound[i3].fn(event2);
          } else if (bound[i3].shift == false && event2.shiftKey == false) {
            bound[i3].fn(event2);
          }
        }
        if (preventDefault2 == true) {
          event2.preventDefault();
        }
      }
    };
    _exportFunctions.bind = function(key, callback, type) {
      if (type === void 0) {
        type = "keydown";
      }
      if (_keys[key] === void 0) {
        throw new Error("unsupported key: " + key);
      }
      if (_bound[type][_keys[key].code] === void 0) {
        _bound[type][_keys[key].code] = [];
      }
      _bound[type][_keys[key].code].push({ fn: callback, shift: _keys[key].shift });
    };
    _exportFunctions.bindAll = function(callback, type) {
      if (type === void 0) {
        type = "keydown";
      }
      for (var key in _keys) {
        if (_keys.hasOwnProperty(key)) {
          _exportFunctions.bind(key, callback, type);
        }
      }
    };
    _exportFunctions.getKey = function(event2) {
      for (var key in _keys) {
        if (_keys.hasOwnProperty(key)) {
          if (event2.shiftKey == true && _keys[key].shift == true && event2.keyCode == _keys[key].code) {
            return key;
          } else if (event2.shiftKey == false && _keys[key].shift == false && event2.keyCode == _keys[key].code) {
            return key;
          } else if (event2.keyCode == _keys[key].code && key == "shift") {
            return key;
          }
        }
      }
      return "unknown key, currently not supported";
    };
    _exportFunctions.unbind = function(key, callback, type) {
      if (type === void 0) {
        type = "keydown";
      }
      if (_keys[key] === void 0) {
        throw new Error("unsupported key: " + key);
      }
      if (callback !== void 0) {
        var newBindings = [];
        var bound = _bound[type][_keys[key].code];
        if (bound !== void 0) {
          for (var i3 = 0; i3 < bound.length; i3++) {
            if (!(bound[i3].fn == callback && bound[i3].shift == _keys[key].shift)) {
              newBindings.push(_bound[type][_keys[key].code][i3]);
            }
          }
        }
        _bound[type][_keys[key].code] = newBindings;
      } else {
        _bound[type][_keys[key].code] = [];
      }
    };
    _exportFunctions.reset = function() {
      _bound = { keydown: {}, keyup: {} };
    };
    _exportFunctions.destroy = function() {
      _bound = { keydown: {}, keyup: {} };
      container.removeEventListener("keydown", down, true);
      container.removeEventListener("keyup", up, true);
    };
    container.addEventListener("keydown", down, true);
    container.addEventListener("keyup", up, true);
    return _exportFunctions;
  }
  var css_248z$d = ".vis .overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n\n  /* Must be displayed above for example selected Timeline items */\n  z-index: 10;\n}\n\n.vis-active {\n  box-shadow: 0 0 10px #86d5f8;\n}\n";
  styleInject(css_248z$d);
  function Activator(container) {
    var _context, _context2;
    this.active = false;
    this.dom = {
      container
    };
    this.dom.overlay = document.createElement("div");
    this.dom.overlay.className = "vis-overlay";
    this.dom.container.appendChild(this.dom.overlay);
    this.hammer = Hammer(this.dom.overlay);
    this.hammer.on("tap", _bindInstanceProperty$1(_context = this._onTapOverlay).call(_context, this));
    var me = this;
    var events = ["tap", "doubletap", "press", "pinch", "pan", "panstart", "panmove", "panend"];
    _forEachInstanceProperty(events).call(events, function(event2) {
      me.hammer.on(event2, function(event3) {
        event3.stopPropagation();
      });
    });
    if (document && document.body) {
      this.onClick = function(event2) {
        if (!_hasParent(event2.target, container)) {
          me.deactivate();
        }
      };
      document.body.addEventListener("click", this.onClick);
    }
    if (this.keycharm !== void 0) {
      this.keycharm.destroy();
    }
    this.keycharm = keycharm();
    this.escListener = _bindInstanceProperty$1(_context2 = this.deactivate).call(_context2, this);
  }
  Emitter(Activator.prototype);
  Activator.current = null;
  Activator.prototype.destroy = function() {
    this.deactivate();
    this.dom.overlay.parentNode.removeChild(this.dom.overlay);
    if (this.onClick) {
      document.body.removeEventListener("click", this.onClick);
    }
    if (this.keycharm !== void 0) {
      this.keycharm.destroy();
    }
    this.keycharm = null;
    this.hammer.destroy();
    this.hammer = null;
  };
  Activator.prototype.activate = function() {
    var _context3;
    if (Activator.current) {
      Activator.current.deactivate();
    }
    Activator.current = this;
    this.active = true;
    this.dom.overlay.style.display = "none";
    availableUtils.addClassName(this.dom.container, "vis-active");
    this.emit("change");
    this.emit("activate");
    _bindInstanceProperty$1(_context3 = this.keycharm).call(_context3, "esc", this.escListener);
  };
  Activator.prototype.deactivate = function() {
    if (Activator.current === this) {
      Activator.current = null;
    }
    this.active = false;
    this.dom.overlay.style.display = "";
    availableUtils.removeClassName(this.dom.container, "vis-active");
    this.keycharm.unbind("esc", this.escListener);
    this.emit("change");
    this.emit("deactivate");
  };
  Activator.prototype._onTapOverlay = function(event2) {
    this.activate();
    event2.stopPropagation();
  };
  function _hasParent(element, parent2) {
    while (element) {
      if (element === parent2) {
        return true;
      }
      element = element.parentNode;
    }
    return false;
  }
  var en = {
    current: "current",
    time: "time",
    deleteSelected: "Delete selected"
  };
  var en_EN = en;
  var en_US = en;
  var it = {
    current: "attuale",
    time: "tempo",
    deleteSelected: "Cancella la selezione"
  };
  var it_IT = it;
  var it_CH = it;
  var nl = {
    current: "huidige",
    time: "tijd",
    deleteSelected: "Selectie verwijderen"
  };
  var nl_NL = nl;
  var nl_BE = nl;
  var de = {
    current: "Aktuelle",
    time: "Zeit",
    deleteSelected: "L\xF6sche Auswahl"
  };
  var de_DE = de;
  var fr = {
    current: "actuel",
    time: "heure",
    deleteSelected: "Effacer la selection"
  };
  var fr_FR = fr;
  var fr_CA = fr;
  var fr_BE = fr;
  var es = {
    current: "corriente",
    time: "hora",
    deleteSelected: "Eliminar selecci\xF3n"
  };
  var es_ES = es;
  var uk = {
    current: "\u043F\u043E\u0442\u043E\u0447\u043D\u0438\u0439",
    time: "\u0447\u0430\u0441",
    deleteSelected: "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438 \u043E\u0431\u0440\u0430\u043D\u0435"
  };
  var uk_UA = uk;
  var ru = {
    current: "\u0442\u0435\u043A\u0443\u0449\u0435\u0435",
    time: "\u0432\u0440\u0435\u043C\u044F",
    deleteSelected: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u0435"
  };
  var ru_RU = ru;
  var pl = {
    current: "aktualny",
    time: "czas",
    deleteSelected: "Usu\u0144 wybrane"
  };
  var pl_PL = pl;
  var pt = {
    current: "atual",
    time: "data",
    deleteSelected: "Apagar selecionado"
  };
  var pt_BR = pt;
  var pt_PT = pt;
  var ja = {
    current: "\u73FE\u5728",
    time: "\u6642\u523B",
    deleteSelected: "\u9078\u629E\u3055\u308C\u305F\u3082\u306E\u3092\u524A\u9664"
  };
  var ja_JP = ja;
  var sv = {
    current: "nuvarande",
    time: "tid",
    deleteSelected: "Radera valda"
  };
  var sv_SE = sv;
  var nb = {
    current: "n\xE5v\xE6rende",
    time: "tid",
    deleteSelected: "Slett valgte"
  };
  var nb_NO = nb;
  var nn = nb;
  var nn_NO = nb;
  var lt = {
    current: "einamas",
    time: "laikas",
    deleteSelected: "Pa\u0161alinti pasirinkt\u0105"
  };
  var lt_LT = lt;
  var locales = {
    en,
    en_EN,
    en_US,
    it,
    it_IT,
    it_CH,
    nl,
    nl_NL,
    nl_BE,
    de,
    de_DE,
    fr,
    fr_FR,
    fr_CA,
    fr_BE,
    es,
    es_ES,
    uk,
    uk_UA,
    ru,
    ru_RU,
    pl,
    pl_PL,
    pt,
    pt_BR,
    pt_PT,
    ja,
    ja_JP,
    lt,
    lt_LT,
    sv,
    sv_SE,
    nb,
    nn,
    nb_NO,
    nn_NO
  };
  var css_248z$c = ".vis-custom-time {\n  background-color: #6E94FF;\n  width: 2px;\n  cursor: move;\n  z-index: 1;\n}\n\n.vis-custom-time > .vis-custom-time-marker {\n  background-color: inherit;\n  color: white;\n  font-size: 12px;\n  white-space: nowrap;\n  padding: 3px 5px;\n  top: 0px;\n  cursor: initial;\n  z-index: inherit;\n}";
  styleInject(css_248z$c);
  function _createSuper$a(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$a() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var CustomTime = /* @__PURE__ */ function(_Component) {
    _inherits(CustomTime2, _Component);
    var _super = _createSuper$a(CustomTime2);
    function CustomTime2(body, options) {
      var _context;
      var _this;
      _classCallCheck(this, CustomTime2);
      _this = _super.call(this);
      _this.body = body;
      _this.defaultOptions = {
        moment: moment$3,
        locales,
        locale: "en",
        id: void 0,
        title: void 0
      };
      _this.options = availableUtils.extend({}, _this.defaultOptions);
      _this.setOptions(options);
      _this.options.locales = availableUtils.extend({}, locales, _this.options.locales);
      var defaultLocales = _this.defaultOptions.locales[_this.defaultOptions.locale];
      _forEachInstanceProperty(_context = _Object$keys(_this.options.locales)).call(_context, function(locale) {
        _this.options.locales[locale] = availableUtils.extend({}, defaultLocales, _this.options.locales[locale]);
      });
      if (options && options.time != null) {
        _this.customTime = options.time;
      } else {
        _this.customTime = /* @__PURE__ */ new Date();
      }
      _this.eventParams = {};
      _this._create();
      return _this;
    }
    _createClass(CustomTime2, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options) {
          availableUtils.selectiveExtend(["moment", "locale", "locales", "id", "title", "rtl", "snap"], this.options, options);
        }
      }
      /**
       * Create the DOM for the custom time
       * @private
       */
    }, {
      key: "_create",
      value: function _create() {
        var _context2, _context3, _context4;
        var bar = document.createElement("div");
        bar["custom-time"] = this;
        bar.className = "vis-custom-time ".concat(this.options.id || "");
        bar.style.position = "absolute";
        bar.style.top = "0px";
        bar.style.height = "100%";
        this.bar = bar;
        var drag = document.createElement("div");
        drag.style.position = "relative";
        drag.style.top = "0px";
        if (this.options.rtl) {
          drag.style.right = "-10px";
        } else {
          drag.style.left = "-10px";
        }
        drag.style.height = "100%";
        drag.style.width = "20px";
        function onMouseWheel(e) {
          this.body.range._onMouseWheel(e);
        }
        if (drag.addEventListener) {
          drag.addEventListener("mousewheel", _bindInstanceProperty$1(onMouseWheel).call(onMouseWheel, this), false);
          drag.addEventListener("DOMMouseScroll", _bindInstanceProperty$1(onMouseWheel).call(onMouseWheel, this), false);
        } else {
          drag.attachEvent("onmousewheel", _bindInstanceProperty$1(onMouseWheel).call(onMouseWheel, this));
        }
        bar.appendChild(drag);
        this.hammer = new Hammer(drag);
        this.hammer.on("panstart", _bindInstanceProperty$1(_context2 = this._onDragStart).call(_context2, this));
        this.hammer.on("panmove", _bindInstanceProperty$1(_context3 = this._onDrag).call(_context3, this));
        this.hammer.on("panend", _bindInstanceProperty$1(_context4 = this._onDragEnd).call(_context4, this));
        this.hammer.get("pan").set({
          threshold: 5,
          direction: Hammer.DIRECTION_ALL
        });
        this.hammer.get("press").set({
          time: 1e4
        });
      }
      /**
       * Destroy the CustomTime bar
       */
    }, {
      key: "destroy",
      value: function destroy() {
        this.hide();
        this.hammer.destroy();
        this.hammer = null;
        this.body = null;
      }
      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
    }, {
      key: "redraw",
      value: function redraw() {
        var parent2 = this.body.dom.backgroundVertical;
        if (this.bar.parentNode != parent2) {
          if (this.bar.parentNode) {
            this.bar.parentNode.removeChild(this.bar);
          }
          parent2.appendChild(this.bar);
        }
        var x = this.body.util.toScreen(this.customTime);
        var locale = this.options.locales[this.options.locale];
        if (!locale) {
          if (!this.warned) {
            console.warn("WARNING: options.locales['".concat(this.options.locale, "'] not found. See https://visjs.github.io/vis-timeline/docs/timeline/#Localization"));
            this.warned = true;
          }
          locale = this.options.locales["en"];
        }
        var title = this.options.title;
        if (title === void 0) {
          var _context5;
          title = _concatInstanceProperty(_context5 = "".concat(locale.time, ": ")).call(_context5, this.options.moment(this.customTime).format("dddd, MMMM Do YYYY, H:mm:ss"));
          title = title.charAt(0).toUpperCase() + title.substring(1);
        } else if (typeof title === "function") {
          title = title.call(this, this.customTime);
        }
        this.options.rtl ? this.bar.style.right = "".concat(x, "px") : this.bar.style.left = "".concat(x, "px");
        this.bar.title = title;
        return false;
      }
      /**
       * Remove the CustomTime from the DOM
       */
    }, {
      key: "hide",
      value: function hide() {
        if (this.bar.parentNode) {
          this.bar.parentNode.removeChild(this.bar);
        }
      }
      /**
       * Set custom time.
       * @param {Date | number | string} time
       */
    }, {
      key: "setCustomTime",
      value: function setCustomTime(time) {
        this.customTime = availableUtils.convert(time, "Date");
        this.redraw();
      }
      /**
       * Retrieve the current custom time.
       * @return {Date} customTime
       */
    }, {
      key: "getCustomTime",
      value: function getCustomTime() {
        return new Date(this.customTime.valueOf());
      }
      /**
       * Set custom marker.
       * @param {string} [title] Title of the custom marker
       * @param {boolean} [editable] Make the custom marker editable.
       */
    }, {
      key: "setCustomMarker",
      value: function setCustomMarker(title, editable) {
        var marker = document.createElement("div");
        marker.className = "vis-custom-time-marker";
        marker.innerHTML = availableUtils.xss(title);
        marker.style.position = "absolute";
        if (editable) {
          var _context6, _context7;
          marker.setAttribute("contenteditable", "true");
          marker.addEventListener("pointerdown", function() {
            marker.focus();
          });
          marker.addEventListener("input", _bindInstanceProperty$1(_context6 = this._onMarkerChange).call(_context6, this));
          marker.title = title;
          marker.addEventListener("blur", _bindInstanceProperty$1(_context7 = function _context72(event2) {
            if (this.title != event2.target.innerHTML) {
              this._onMarkerChanged(event2);
              this.title = event2.target.innerHTML;
            }
          }).call(_context7, this));
        }
        this.bar.appendChild(marker);
      }
      /**
        * Set custom title.
        * @param {Date | number | string} title
        */
    }, {
      key: "setCustomTitle",
      value: function setCustomTitle(title) {
        this.options.title = title;
      }
      /**
       * Start moving horizontally
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onDragStart",
      value: function _onDragStart(event2) {
        this.eventParams.dragging = true;
        this.eventParams.customTime = this.customTime;
        event2.stopPropagation();
      }
      /**
       * Perform moving operating.
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onDrag",
      value: function _onDrag(event2) {
        if (!this.eventParams.dragging)
          return;
        var deltaX = this.options.rtl ? -1 * event2.deltaX : event2.deltaX;
        var x = this.body.util.toScreen(this.eventParams.customTime) + deltaX;
        var time = this.body.util.toTime(x);
        var scale = this.body.util.getScale();
        var step = this.body.util.getStep();
        var snap = this.options.snap;
        var snappedTime = snap ? snap(time, scale, step) : time;
        this.setCustomTime(snappedTime);
        this.body.emitter.emit("timechange", {
          id: this.options.id,
          time: new Date(this.customTime.valueOf()),
          event: event2
        });
        event2.stopPropagation();
      }
      /**
       * Stop moving operating.
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onDragEnd",
      value: function _onDragEnd(event2) {
        if (!this.eventParams.dragging)
          return;
        this.body.emitter.emit("timechanged", {
          id: this.options.id,
          time: new Date(this.customTime.valueOf()),
          event: event2
        });
        event2.stopPropagation();
      }
      /**
       * Perform input operating.
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onMarkerChange",
      value: function _onMarkerChange(event2) {
        this.body.emitter.emit("markerchange", {
          id: this.options.id,
          title: event2.target.innerHTML,
          event: event2
        });
        event2.stopPropagation();
      }
      /**
       * Perform change operating.
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onMarkerChanged",
      value: function _onMarkerChanged(event2) {
        this.body.emitter.emit("markerchanged", {
          id: this.options.id,
          title: event2.target.innerHTML,
          event: event2
        });
        event2.stopPropagation();
      }
      /**
       * Find a custom time from an event target:
       * searches for the attribute 'custom-time' in the event target's element tree
       * @param {Event} event
       * @return {CustomTime | null} customTime
       */
    }], [{
      key: "customTimeFromTarget",
      value: function customTimeFromTarget(event2) {
        var target = event2.target;
        while (target) {
          if (target.hasOwnProperty("custom-time")) {
            return target["custom-time"];
          }
          target = target.parentNode;
        }
        return null;
      }
    }]);
    return CustomTime2;
  }(Component);
  var css_248z$b = ".vis-timeline {\n  /*\n  -webkit-transition: height .4s ease-in-out;\n  transition:         height .4s ease-in-out;\n  */\n}\n\n.vis-panel {\n  /*\n  -webkit-transition: height .4s ease-in-out, top .4s ease-in-out;\n  transition:         height .4s ease-in-out, top .4s ease-in-out;\n  */\n}\n\n.vis-axis {\n  /*\n  -webkit-transition: top .4s ease-in-out;\n  transition:         top .4s ease-in-out;\n  */\n}\n\n/* TODO: get animation working nicely\n\n.vis-item {\n  -webkit-transition: top .4s ease-in-out;\n  transition:         top .4s ease-in-out;\n}\n\n.vis-item.line {\n  -webkit-transition: height .4s ease-in-out, top .4s ease-in-out;\n  transition:         height .4s ease-in-out, top .4s ease-in-out;\n}\n/**/";
  styleInject(css_248z$b);
  var css_248z$a = '.vis-current-time {\n  background-color: #FF7F6E;\n  width: 2px;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.vis-rolling-mode-btn {\n  height: 40px;\n  width: 40px;\n  position: absolute;\n  top: 7px;\n  right: 20px;\n  border-radius: 50%;\n  font-size: 28px;\n  cursor: pointer;\n  opacity: 0.8;\n  color: white;\n  font-weight: bold;\n  text-align: center;\n  background: #3876c2;\n}\n.vis-rolling-mode-btn:before {\n  content: "\\26F6";\n}\n\n.vis-rolling-mode-btn:hover {\n  opacity: 1;\n}';
  styleInject(css_248z$a);
  var css_248z$9 = ".vis-panel {\n  position: absolute;\n\n  padding: 0;\n  margin: 0;\n\n  box-sizing: border-box;\n}\n\n.vis-panel.vis-center,\n.vis-panel.vis-left,\n.vis-panel.vis-right,\n.vis-panel.vis-top,\n.vis-panel.vis-bottom {\n  border: 1px #bfbfbf;\n}\n\n.vis-panel.vis-center,\n.vis-panel.vis-left,\n.vis-panel.vis-right {\n  border-top-style: solid;\n  border-bottom-style: solid;\n  overflow: hidden;\n}\n\n.vis-left.vis-panel.vis-vertical-scroll, .vis-right.vis-panel.vis-vertical-scroll {\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: scroll;\n} \n\n.vis-left.vis-panel.vis-vertical-scroll {\n  direction: rtl;\n}\n\n.vis-left.vis-panel.vis-vertical-scroll .vis-content {\n  direction: ltr;\n}\n\n.vis-right.vis-panel.vis-vertical-scroll {\n  direction: ltr;\n}\n\n.vis-right.vis-panel.vis-vertical-scroll .vis-content {\n  direction: rtl;\n}\n\n.vis-panel.vis-center,\n.vis-panel.vis-top,\n.vis-panel.vis-bottom {\n  border-left-style: solid;\n  border-right-style: solid;\n}\n\n.vis-background {\n  overflow: hidden;\n}\n\n.vis-panel > .vis-content {\n  position: relative;\n}\n\n.vis-panel .vis-shadow {\n  position: absolute;\n  width: 100%;\n  height: 1px;\n  box-shadow: 0 0 10px rgba(0,0,0,0.8);\n  /* TODO: find a nice way to ensure vis-shadows are drawn on top of items\n  z-index: 1;\n  */\n}\n\n.vis-panel .vis-shadow.vis-top {\n  top: -1px;\n  left: 0;\n}\n\n.vis-panel .vis-shadow.vis-bottom {\n  bottom: -1px;\n  left: 0;\n}";
  styleInject(css_248z$9);
  var css_248z$8 = ".vis-graph-group0 {\n    fill:#4f81bd;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #4f81bd;\n}\n\n.vis-graph-group1 {\n    fill:#f79646;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #f79646;\n}\n\n.vis-graph-group2 {\n    fill: #8c51cf;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #8c51cf;\n}\n\n.vis-graph-group3 {\n    fill: #75c841;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #75c841;\n}\n\n.vis-graph-group4 {\n    fill: #ff0100;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #ff0100;\n}\n\n.vis-graph-group5 {\n    fill: #37d8e6;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #37d8e6;\n}\n\n.vis-graph-group6 {\n    fill: #042662;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #042662;\n}\n\n.vis-graph-group7 {\n    fill:#00ff26;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #00ff26;\n}\n\n.vis-graph-group8 {\n    fill:#ff00ff;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #ff00ff;\n}\n\n.vis-graph-group9 {\n    fill: #8f3938;\n    fill-opacity:0;\n    stroke-width:2px;\n    stroke: #8f3938;\n}\n\n.vis-timeline .vis-fill {\n    fill-opacity:0.1;\n    stroke: none;\n}\n\n\n.vis-timeline .vis-bar {\n    fill-opacity:0.5;\n    stroke-width:1px;\n}\n\n.vis-timeline .vis-point {\n    stroke-width:2px;\n    fill-opacity:1.0;\n}\n\n\n.vis-timeline .vis-legend-background {\n    stroke-width:1px;\n    fill-opacity:0.9;\n    fill: #ffffff;\n    stroke: #c2c2c2;\n}\n\n\n.vis-timeline .vis-outline {\n    stroke-width:1px;\n    fill-opacity:1;\n    fill: #ffffff;\n    stroke: #e5e5e5;\n}\n\n.vis-timeline .vis-icon-fill {\n    fill-opacity:0.3;\n    stroke: none;\n}\n";
  styleInject(css_248z$8);
  var css_248z$7 = "\n.vis-timeline {\n  position: relative;\n  border: 1px solid #bfbfbf;\n  overflow: hidden;\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\n.vis-loading-screen {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}";
  styleInject(css_248z$7);
  var css_248z$6 = '/* override some bootstrap styles screwing up the timelines css */\n\n.vis [class*="span"] {\n  min-height: 0;\n  width: auto;\n}\n';
  styleInject(css_248z$6);
  var Core = /* @__PURE__ */ function() {
    function Core2() {
      _classCallCheck(this, Core2);
    }
    _createClass(Core2, [{
      key: "_create",
      value: (
        /**
         * Create the main DOM for the Core: a root panel containing left, right,
         * top, bottom, content, and background panel.
         * @param {Element} container  The container element where the Core will
         *                             be attached.
         * @protected
         */
        function _create(container) {
          var _this = this, _context, _context2, _context3;
          this.dom = {};
          this.dom.container = container;
          this.dom.container.style.position = "relative";
          this.dom.root = document.createElement("div");
          this.dom.background = document.createElement("div");
          this.dom.backgroundVertical = document.createElement("div");
          this.dom.backgroundHorizontal = document.createElement("div");
          this.dom.centerContainer = document.createElement("div");
          this.dom.leftContainer = document.createElement("div");
          this.dom.rightContainer = document.createElement("div");
          this.dom.center = document.createElement("div");
          this.dom.left = document.createElement("div");
          this.dom.right = document.createElement("div");
          this.dom.top = document.createElement("div");
          this.dom.bottom = document.createElement("div");
          this.dom.shadowTop = document.createElement("div");
          this.dom.shadowBottom = document.createElement("div");
          this.dom.shadowTopLeft = document.createElement("div");
          this.dom.shadowBottomLeft = document.createElement("div");
          this.dom.shadowTopRight = document.createElement("div");
          this.dom.shadowBottomRight = document.createElement("div");
          this.dom.rollingModeBtn = document.createElement("div");
          this.dom.loadingScreen = document.createElement("div");
          this.dom.root.className = "vis-timeline";
          this.dom.background.className = "vis-panel vis-background";
          this.dom.backgroundVertical.className = "vis-panel vis-background vis-vertical";
          this.dom.backgroundHorizontal.className = "vis-panel vis-background vis-horizontal";
          this.dom.centerContainer.className = "vis-panel vis-center";
          this.dom.leftContainer.className = "vis-panel vis-left";
          this.dom.rightContainer.className = "vis-panel vis-right";
          this.dom.top.className = "vis-panel vis-top";
          this.dom.bottom.className = "vis-panel vis-bottom";
          this.dom.left.className = "vis-content";
          this.dom.center.className = "vis-content";
          this.dom.right.className = "vis-content";
          this.dom.shadowTop.className = "vis-shadow vis-top";
          this.dom.shadowBottom.className = "vis-shadow vis-bottom";
          this.dom.shadowTopLeft.className = "vis-shadow vis-top";
          this.dom.shadowBottomLeft.className = "vis-shadow vis-bottom";
          this.dom.shadowTopRight.className = "vis-shadow vis-top";
          this.dom.shadowBottomRight.className = "vis-shadow vis-bottom";
          this.dom.rollingModeBtn.className = "vis-rolling-mode-btn";
          this.dom.loadingScreen.className = "vis-loading-screen";
          this.dom.root.appendChild(this.dom.background);
          this.dom.root.appendChild(this.dom.backgroundVertical);
          this.dom.root.appendChild(this.dom.backgroundHorizontal);
          this.dom.root.appendChild(this.dom.centerContainer);
          this.dom.root.appendChild(this.dom.leftContainer);
          this.dom.root.appendChild(this.dom.rightContainer);
          this.dom.root.appendChild(this.dom.top);
          this.dom.root.appendChild(this.dom.bottom);
          this.dom.root.appendChild(this.dom.rollingModeBtn);
          this.dom.centerContainer.appendChild(this.dom.center);
          this.dom.leftContainer.appendChild(this.dom.left);
          this.dom.rightContainer.appendChild(this.dom.right);
          this.dom.centerContainer.appendChild(this.dom.shadowTop);
          this.dom.centerContainer.appendChild(this.dom.shadowBottom);
          this.dom.leftContainer.appendChild(this.dom.shadowTopLeft);
          this.dom.leftContainer.appendChild(this.dom.shadowBottomLeft);
          this.dom.rightContainer.appendChild(this.dom.shadowTopRight);
          this.dom.rightContainer.appendChild(this.dom.shadowBottomRight);
          this.props = {
            root: {},
            background: {},
            centerContainer: {},
            leftContainer: {},
            rightContainer: {},
            center: {},
            left: {},
            right: {},
            top: {},
            bottom: {},
            border: {},
            scrollTop: 0,
            scrollTopMin: 0
          };
          this.on("rangechange", function() {
            if (_this.initialDrawDone === true) {
              _this._redraw();
            }
          });
          this.on("rangechanged", function() {
            if (!_this.initialRangeChangeDone) {
              _this.initialRangeChangeDone = true;
            }
          });
          this.on("touch", _bindInstanceProperty$1(_context = this._onTouch).call(_context, this));
          this.on("panmove", _bindInstanceProperty$1(_context2 = this._onDrag).call(_context2, this));
          var me = this;
          this._origRedraw = _bindInstanceProperty$1(_context3 = this._redraw).call(_context3, this);
          this._redraw = availableUtils.throttle(this._origRedraw);
          this.on("_change", function(properties) {
            if (me.itemSet && me.itemSet.initialItemSetDrawn && properties && properties.queue == true) {
              me._redraw();
            } else {
              me._origRedraw();
            }
          });
          this.hammer = new Hammer(this.dom.root);
          var pinchRecognizer = this.hammer.get("pinch").set({
            enable: true
          });
          pinchRecognizer && disablePreventDefaultVertically(pinchRecognizer);
          this.hammer.get("pan").set({
            threshold: 5,
            direction: Hammer.DIRECTION_ALL
          });
          this.timelineListeners = {};
          var events = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
            // TODO: cleanup
            //'touch', 'pinch',
            //'tap', 'doubletap', 'hold',
            //'dragstart', 'drag', 'dragend',
            //'mousewheel', 'DOMMouseScroll' // DOMMouseScroll is needed for Firefox
          ];
          _forEachInstanceProperty(events).call(events, function(type) {
            var listener = function listener2(event2) {
              if (me.isActive()) {
                me.emit(type, event2);
              }
            };
            me.hammer.on(type, listener);
            me.timelineListeners[type] = listener;
          });
          onTouch(this.hammer, function(event2) {
            me.emit("touch", event2);
          });
          onRelease(this.hammer, function(event2) {
            me.emit("release", event2);
          });
          function onMouseWheel(event2) {
            var LINE_HEIGHT = 40;
            var PAGE_HEIGHT = 800;
            if (this.isActive()) {
              this.emit("mousewheel", event2);
            }
            var deltaX = 0;
            var deltaY = 0;
            if ("detail" in event2) {
              deltaY = event2.detail * -1;
            }
            if ("wheelDelta" in event2) {
              deltaY = event2.wheelDelta;
            }
            if ("wheelDeltaY" in event2) {
              deltaY = event2.wheelDeltaY;
            }
            if ("wheelDeltaX" in event2) {
              deltaX = event2.wheelDeltaX * -1;
            }
            if ("axis" in event2 && event2.axis === event2.HORIZONTAL_AXIS) {
              deltaX = deltaY * -1;
              deltaY = 0;
            }
            if ("deltaY" in event2) {
              deltaY = event2.deltaY * -1;
            }
            if ("deltaX" in event2) {
              deltaX = event2.deltaX;
            }
            if (event2.deltaMode) {
              if (event2.deltaMode === 1) {
                deltaX *= LINE_HEIGHT;
                deltaY *= LINE_HEIGHT;
              } else {
                deltaX *= LINE_HEIGHT;
                deltaY *= PAGE_HEIGHT;
              }
            }
            if (this.options.preferZoom) {
              if (!this.options.zoomKey || event2[this.options.zoomKey])
                return;
            } else {
              if (this.options.zoomKey && event2[this.options.zoomKey])
                return;
            }
            if (!this.options.verticalScroll && !this.options.horizontalScroll)
              return;
            if (this.options.verticalScroll && Math.abs(deltaY) >= Math.abs(deltaX)) {
              var current = this.props.scrollTop;
              var adjusted = current + deltaY;
              if (this.isActive()) {
                var newScrollTop = this._setScrollTop(adjusted);
                if (newScrollTop !== current) {
                  this._redraw();
                  this.emit("scroll", event2);
                  event2.preventDefault();
                }
              }
            } else if (this.options.horizontalScroll) {
              var delta = Math.abs(deltaX) >= Math.abs(deltaY) ? deltaX : deltaY;
              var diff = delta / 120 * (this.range.end - this.range.start) / 20;
              var newStart = this.range.start + diff;
              var newEnd = this.range.end + diff;
              var options = {
                animation: false,
                byUser: true,
                event: event2
              };
              this.range.setRange(newStart, newEnd, options);
              event2.preventDefault();
            }
          }
          var wheelType = "onwheel" in document.createElement("div") ? "wheel" : (
            // Modern browsers support "wheel"
            document.onmousewheel !== void 0 ? "mousewheel" : (
              // Webkit and IE support at least "mousewheel"
              // DOMMouseScroll - Older Firefox versions use "DOMMouseScroll"
              // onmousewheel - All the use "onmousewheel"
              this.dom.centerContainer.addEventListener ? "DOMMouseScroll" : "onmousewheel"
            )
          );
          this.dom.top.addEventListener ? "DOMMouseScroll" : "onmousewheel";
          this.dom.bottom.addEventListener ? "DOMMouseScroll" : "onmousewheel";
          this.dom.centerContainer.addEventListener(wheelType, _bindInstanceProperty$1(onMouseWheel).call(onMouseWheel, this), false);
          this.dom.top.addEventListener(wheelType, _bindInstanceProperty$1(onMouseWheel).call(onMouseWheel, this), false);
          this.dom.bottom.addEventListener(wheelType, _bindInstanceProperty$1(onMouseWheel).call(onMouseWheel, this), false);
          function onMouseScrollSide(event2) {
            if (!me.options.verticalScroll)
              return;
            event2.preventDefault();
            if (me.isActive()) {
              var adjusted = -event2.target.scrollTop;
              me._setScrollTop(adjusted);
              me._redraw();
              me.emit("scrollSide", event2);
            }
          }
          this.dom.left.parentNode.addEventListener("scroll", _bindInstanceProperty$1(onMouseScrollSide).call(onMouseScrollSide, this));
          this.dom.right.parentNode.addEventListener("scroll", _bindInstanceProperty$1(onMouseScrollSide).call(onMouseScrollSide, this));
          var itemAddedToTimeline = false;
          function handleDragOver(event2) {
            var _context4;
            if (event2.preventDefault) {
              me.emit("dragover", me.getEventProperties(event2));
              event2.preventDefault();
            }
            if (!(_indexOfInstanceProperty(_context4 = event2.target.className).call(_context4, "timeline") > -1))
              return;
            if (itemAddedToTimeline)
              return;
            event2.dataTransfer.dropEffect = "move";
            itemAddedToTimeline = true;
            return false;
          }
          function handleDrop(event2) {
            if (event2.preventDefault) {
              event2.preventDefault();
            }
            if (event2.stopPropagation) {
              event2.stopPropagation();
            }
            try {
              var itemData = JSON.parse(event2.dataTransfer.getData("text"));
              if (!itemData || !itemData.content)
                return;
            } catch (err) {
              return false;
            }
            itemAddedToTimeline = false;
            event2.center = {
              x: event2.clientX,
              y: event2.clientY
            };
            if (itemData.target !== "item") {
              me.itemSet._onAddItem(event2);
            } else {
              me.itemSet._onDropObjectOnItem(event2);
            }
            me.emit("drop", me.getEventProperties(event2));
            return false;
          }
          this.dom.center.addEventListener("dragover", _bindInstanceProperty$1(handleDragOver).call(handleDragOver, this), false);
          this.dom.center.addEventListener("drop", _bindInstanceProperty$1(handleDrop).call(handleDrop, this), false);
          this.customTimes = [];
          this.touch = {};
          this.redrawCount = 0;
          this.initialDrawDone = false;
          this.initialRangeChangeDone = false;
          if (!container)
            throw new Error("No container provided");
          container.appendChild(this.dom.root);
          container.appendChild(this.dom.loadingScreen);
        }
      )
      /**
       * Set options. Options will be passed to all components loaded in the Timeline.
       * @param {Object} [options]
       *                           {String} orientation
       *                              Vertical orientation for the Timeline,
       *                              can be 'bottom' (default) or 'top'.
       *                           {string | number} width
       *                              Width for the timeline, a number in pixels or
       *                              a css string like '1000px' or '75%'. '100%' by default.
       *                           {string | number} height
       *                              Fixed height for the Timeline, a number in pixels or
       *                              a css string like '400px' or '75%'. If undefined,
       *                              The Timeline will automatically size such that
       *                              its contents fit.
       *                           {string | number} minHeight
       *                              Minimum height for the Timeline, a number in pixels or
       *                              a css string like '400px' or '75%'.
       *                           {string | number} maxHeight
       *                              Maximum height for the Timeline, a number in pixels or
       *                              a css string like '400px' or '75%'.
       *                           {number | Date | string} start
       *                              Start date for the visible window
       *                           {number | Date | string} end
       *                              End date for the visible window
       */
    }, {
      key: "setOptions",
      value: function setOptions(options) {
        var _context7;
        if (options) {
          var fields = ["width", "height", "minHeight", "maxHeight", "autoResize", "start", "end", "clickToUse", "dataAttributes", "hiddenDates", "locale", "locales", "moment", "preferZoom", "rtl", "zoomKey", "horizontalScroll", "verticalScroll", "longSelectPressTime", "snap"];
          availableUtils.selectiveExtend(fields, this.options, options);
          this.dom.rollingModeBtn.style.visibility = "hidden";
          if (this.options.rtl) {
            this.dom.container.style.direction = "rtl";
            this.dom.backgroundVertical.className = "vis-panel vis-background vis-vertical-rtl";
          }
          if (this.options.verticalScroll) {
            if (this.options.rtl) {
              this.dom.rightContainer.className = "vis-panel vis-right vis-vertical-scroll";
            } else {
              this.dom.leftContainer.className = "vis-panel vis-left vis-vertical-scroll";
            }
          }
          if (_typeof$1(this.options.orientation) !== "object") {
            this.options.orientation = {
              item: void 0,
              axis: void 0
            };
          }
          if ("orientation" in options) {
            if (typeof options.orientation === "string") {
              this.options.orientation = {
                item: options.orientation,
                axis: options.orientation
              };
            } else if (_typeof$1(options.orientation) === "object") {
              if ("item" in options.orientation) {
                this.options.orientation.item = options.orientation.item;
              }
              if ("axis" in options.orientation) {
                this.options.orientation.axis = options.orientation.axis;
              }
            }
          }
          if (this.options.orientation.axis === "both") {
            if (!this.timeAxis2) {
              var timeAxis2 = this.timeAxis2 = new TimeAxis(this.body);
              timeAxis2.setOptions = function(options2) {
                var _options = options2 ? availableUtils.extend({}, options2) : {};
                _options.orientation = "top";
                TimeAxis.prototype.setOptions.call(timeAxis2, _options);
              };
              this.components.push(timeAxis2);
            }
          } else {
            if (this.timeAxis2) {
              var _context5;
              var index = _indexOfInstanceProperty(_context5 = this.components).call(_context5, this.timeAxis2);
              if (index !== -1) {
                var _context6;
                _spliceInstanceProperty(_context6 = this.components).call(_context6, index, 1);
              }
              this.timeAxis2.destroy();
              this.timeAxis2 = null;
            }
          }
          if (typeof options.drawPoints == "function") {
            options.drawPoints = {
              onRender: options.drawPoints
            };
          }
          if ("hiddenDates" in this.options) {
            convertHiddenOptions(this.options.moment, this.body, this.options.hiddenDates);
          }
          if ("clickToUse" in options) {
            if (options.clickToUse) {
              if (!this.activator) {
                this.activator = new Activator(this.dom.root);
              }
            } else {
              if (this.activator) {
                this.activator.destroy();
                delete this.activator;
              }
            }
          }
          this._initAutoResize();
        }
        _forEachInstanceProperty(_context7 = this.components).call(_context7, function(component) {
          return component.setOptions(options);
        });
        if ("configure" in options) {
          var _context8;
          if (!this.configurator) {
            this.configurator = this._createConfigurator();
          }
          this.configurator.setOptions(options.configure);
          var appliedOptions = availableUtils.deepExtend({}, this.options);
          _forEachInstanceProperty(_context8 = this.components).call(_context8, function(component) {
            availableUtils.deepExtend(appliedOptions, component.options);
          });
          this.configurator.setModuleOptions({
            global: appliedOptions
          });
        }
        this._redraw();
      }
      /**
       * Returns true when the Timeline is active.
       * @returns {boolean}
       */
    }, {
      key: "isActive",
      value: function isActive() {
        return !this.activator || this.activator.active;
      }
      /**
       * Destroy the Core, clean up all DOM elements and event listeners.
       */
    }, {
      key: "destroy",
      value: function destroy() {
        var _context9;
        this.setItems(null);
        this.setGroups(null);
        this.off();
        this._stopAutoResize();
        if (this.dom.root.parentNode) {
          this.dom.root.parentNode.removeChild(this.dom.root);
        }
        this.dom = null;
        if (this.activator) {
          this.activator.destroy();
          delete this.activator;
        }
        for (var event2 in this.timelineListeners) {
          if (this.timelineListeners.hasOwnProperty(event2)) {
            delete this.timelineListeners[event2];
          }
        }
        this.timelineListeners = null;
        this.hammer && this.hammer.destroy();
        this.hammer = null;
        _forEachInstanceProperty(_context9 = this.components).call(_context9, function(component) {
          return component.destroy();
        });
        this.body = null;
      }
      /**
       * Set a custom time bar
       * @param {Date} time
       * @param {number} [id=undefined] Optional id of the custom time bar to be adjusted.
       */
    }, {
      key: "setCustomTime",
      value: function setCustomTime(time, id2) {
        var _context10;
        var customTimes = _filterInstanceProperty(_context10 = this.customTimes).call(_context10, function(component) {
          return id2 === component.options.id;
        });
        if (customTimes.length === 0) {
          throw new Error("No custom time bar found with id ".concat(_JSON$stringify(id2)));
        }
        if (customTimes.length > 0) {
          customTimes[0].setCustomTime(time);
        }
      }
      /**
       * Retrieve the current custom time.
       * @param {number} [id=undefined]    Id of the custom time bar.
       * @return {Date | undefined} customTime
       */
    }, {
      key: "getCustomTime",
      value: function getCustomTime(id2) {
        var _context11;
        var customTimes = _filterInstanceProperty(_context11 = this.customTimes).call(_context11, function(component) {
          return component.options.id === id2;
        });
        if (customTimes.length === 0) {
          throw new Error("No custom time bar found with id ".concat(_JSON$stringify(id2)));
        }
        return customTimes[0].getCustomTime();
      }
      /**
       * Set a custom marker for the custom time bar.
       * @param {string} [title] Title of the custom marker.
       * @param {number} [id=undefined] Id of the custom marker.
       * @param {boolean} [editable=false] Make the custom marker editable.
       */
    }, {
      key: "setCustomTimeMarker",
      value: function setCustomTimeMarker(title, id2, editable) {
        var _context12;
        var customTimes = _filterInstanceProperty(_context12 = this.customTimes).call(_context12, function(component) {
          return component.options.id === id2;
        });
        if (customTimes.length === 0) {
          throw new Error("No custom time bar found with id ".concat(_JSON$stringify(id2)));
        }
        if (customTimes.length > 0) {
          customTimes[0].setCustomMarker(title, editable);
        }
      }
      /**
       * Set a custom title for the custom time bar.
       * @param {string} [title] Custom title
       * @param {number} [id=undefined]    Id of the custom time bar.
       * @returns {*}
       */
    }, {
      key: "setCustomTimeTitle",
      value: function setCustomTimeTitle(title, id2) {
        var _context13;
        var customTimes = _filterInstanceProperty(_context13 = this.customTimes).call(_context13, function(component) {
          return component.options.id === id2;
        });
        if (customTimes.length === 0) {
          throw new Error("No custom time bar found with id ".concat(_JSON$stringify(id2)));
        }
        if (customTimes.length > 0) {
          return customTimes[0].setCustomTitle(title);
        }
      }
      /**
       * Retrieve meta information from an event.
       * Should be overridden by classes extending Core
       * @param {Event} event
       * @return {Object} An object with related information.
       */
    }, {
      key: "getEventProperties",
      value: function getEventProperties(event2) {
        return {
          event: event2
        };
      }
      /**
       * Add custom vertical bar
       * @param {Date | string | number} [time]  A Date, unix timestamp, or
       *                                         ISO date string. Time point where
       *                                         the new bar should be placed.
       *                                         If not provided, `new Date()` will
       *                                         be used.
       * @param {number | string} [id=undefined] Id of the new bar. Optional
       * @return {number | string}               Returns the id of the new bar
       */
    }, {
      key: "addCustomTime",
      value: function addCustomTime(time, id2) {
        var _context14;
        var timestamp = time !== void 0 ? availableUtils.convert(time, "Date") : /* @__PURE__ */ new Date();
        var exists = _someInstanceProperty(_context14 = this.customTimes).call(_context14, function(customTime2) {
          return customTime2.options.id === id2;
        });
        if (exists) {
          throw new Error("A custom time with id ".concat(_JSON$stringify(id2), " already exists"));
        }
        var customTime = new CustomTime(this.body, availableUtils.extend({}, this.options, {
          time: timestamp,
          id: id2,
          snap: this.itemSet ? this.itemSet.options.snap : this.options.snap
        }));
        this.customTimes.push(customTime);
        this.components.push(customTime);
        this._redraw();
        return id2;
      }
      /**
       * Remove previously added custom bar
       * @param {int} id ID of the custom bar to be removed
       * [at]returns {boolean} True if the bar exists and is removed, false otherwise
       */
    }, {
      key: "removeCustomTime",
      value: function removeCustomTime(id2) {
        var _context15, _this2 = this;
        var customTimes = _filterInstanceProperty(_context15 = this.customTimes).call(_context15, function(bar) {
          return bar.options.id === id2;
        });
        if (customTimes.length === 0) {
          throw new Error("No custom time bar found with id ".concat(_JSON$stringify(id2)));
        }
        _forEachInstanceProperty(customTimes).call(customTimes, function(customTime) {
          var _context16, _context17, _context18, _context19;
          _spliceInstanceProperty(_context16 = _this2.customTimes).call(_context16, _indexOfInstanceProperty(_context17 = _this2.customTimes).call(_context17, customTime), 1);
          _spliceInstanceProperty(_context18 = _this2.components).call(_context18, _indexOfInstanceProperty(_context19 = _this2.components).call(_context19, customTime), 1);
          customTime.destroy();
        });
      }
      /**
       * Get the id's of the currently visible items.
       * @returns {Array} The ids of the visible items
       */
    }, {
      key: "getVisibleItems",
      value: function getVisibleItems() {
        return this.itemSet && this.itemSet.getVisibleItems() || [];
      }
      /**
       * Get the id's of the items at specific time, where a click takes place on the timeline.
       * @returns {Array} The ids of all items in existence at the time of event.
       */
    }, {
      key: "getItemsAtCurrentTime",
      value: function getItemsAtCurrentTime(timeOfEvent) {
        this.time = timeOfEvent;
        return this.itemSet && this.itemSet.getItemsAtCurrentTime(this.time) || [];
      }
      /**
       * Get the id's of the currently visible groups.
       * @returns {Array} The ids of the visible groups
       */
    }, {
      key: "getVisibleGroups",
      value: function getVisibleGroups() {
        return this.itemSet && this.itemSet.getVisibleGroups() || [];
      }
      /**
       * Set Core window such that it fits all items
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
    }, {
      key: "fit",
      value: function fit(options, callback) {
        var range = this.getDataRange();
        if (range.min === null && range.max === null) {
          return;
        }
        var interval = range.max - range.min;
        var min2 = new Date(range.min.valueOf() - interval * 0.01);
        var max2 = new Date(range.max.valueOf() + interval * 0.01);
        var animation = options && options.animation !== void 0 ? options.animation : true;
        this.range.setRange(min2, max2, {
          animation
        }, callback);
      }
      /**
       * Calculate the data range of the items start and end dates
       * [at]returns {{min: [Date], max: [Date]}}
       * @protected
       */
    }, {
      key: "getDataRange",
      value: function getDataRange() {
        throw new Error("Cannot invoke abstract method getDataRange");
      }
      /**
       * Set the visible window. Both parameters are optional, you can change only
       * start or only end. Syntax:
       *
       *     TimeLine.setWindow(start, end)
       *     TimeLine.setWindow(start, end, options)
       *     TimeLine.setWindow(range)
       *
       * Where start and end can be a Date, number, or string, and range is an
       * object with properties start and end.
       *
       * @param {Date | number | string | Object} [start] Start date of visible window
       * @param {Date | number | string} [end]            End date of visible window
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
    }, {
      key: "setWindow",
      value: function setWindow(start, end, options, callback) {
        if (typeof arguments[2] == "function") {
          callback = arguments[2];
          options = {};
        }
        var animation;
        var range;
        if (arguments.length == 1) {
          range = arguments[0];
          animation = range.animation !== void 0 ? range.animation : true;
          this.range.setRange(range.start, range.end, {
            animation
          });
        } else if (arguments.length == 2 && typeof arguments[1] == "function") {
          range = arguments[0];
          callback = arguments[1];
          animation = range.animation !== void 0 ? range.animation : true;
          this.range.setRange(range.start, range.end, {
            animation
          }, callback);
        } else {
          animation = options && options.animation !== void 0 ? options.animation : true;
          this.range.setRange(start, end, {
            animation
          }, callback);
        }
      }
      /**
       * Move the window such that given time is centered on screen.
       * @param {Date | number | string} time
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
    }, {
      key: "moveTo",
      value: function moveTo(time, options, callback) {
        if (typeof arguments[1] == "function") {
          callback = arguments[1];
          options = {};
        }
        var interval = this.range.end - this.range.start;
        var t = availableUtils.convert(time, "Date").valueOf();
        var start = t - interval / 2;
        var end = t + interval / 2;
        var animation = options && options.animation !== void 0 ? options.animation : true;
        this.range.setRange(start, end, {
          animation
        }, callback);
      }
      /**
       * Get the visible window
       * @return {{start: Date, end: Date}}   Visible range
       */
    }, {
      key: "getWindow",
      value: function getWindow() {
        var range = this.range.getRange();
        return {
          start: new Date(range.start),
          end: new Date(range.end)
        };
      }
      /**
       * Zoom in the window such that given time is centered on screen.
       * @param {number} percentage - must be between [0..1]
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
    }, {
      key: "zoomIn",
      value: function zoomIn(percentage, options, callback) {
        if (!percentage || percentage < 0 || percentage > 1)
          return;
        if (typeof arguments[1] == "function") {
          callback = arguments[1];
          options = {};
        }
        var range = this.getWindow();
        var start = range.start.valueOf();
        var end = range.end.valueOf();
        var interval = end - start;
        var newInterval = interval / (1 + percentage);
        var distance = (interval - newInterval) / 2;
        var newStart = start + distance;
        var newEnd = end - distance;
        this.setWindow(newStart, newEnd, options, callback);
      }
      /**
       * Zoom out the window such that given time is centered on screen.
       * @param {number} percentage - must be between [0..1]
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
    }, {
      key: "zoomOut",
      value: function zoomOut(percentage, options, callback) {
        if (!percentage || percentage < 0 || percentage > 1)
          return;
        if (typeof arguments[1] == "function") {
          callback = arguments[1];
          options = {};
        }
        var range = this.getWindow();
        var start = range.start.valueOf();
        var end = range.end.valueOf();
        var interval = end - start;
        var newStart = start - interval * percentage / 2;
        var newEnd = end + interval * percentage / 2;
        this.setWindow(newStart, newEnd, options, callback);
      }
      /**
       * Force a redraw. Can be overridden by implementations of Core
       *
       * Note: this function will be overridden on construction with a trottled version
       */
    }, {
      key: "redraw",
      value: function redraw() {
        this._redraw();
      }
      /**
       * Redraw for internal use. Redraws all components. See also the public
       * method redraw.
       * @protected
       */
    }, {
      key: "_redraw",
      value: function _redraw() {
        var _context20;
        this.redrawCount++;
        var dom2 = this.dom;
        if (!dom2 || !dom2.container || dom2.root.offsetWidth == 0)
          return;
        var resized = false;
        var options = this.options;
        var props = this.props;
        updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);
        if (options.orientation == "top") {
          availableUtils.addClassName(dom2.root, "vis-top");
          availableUtils.removeClassName(dom2.root, "vis-bottom");
        } else {
          availableUtils.removeClassName(dom2.root, "vis-top");
          availableUtils.addClassName(dom2.root, "vis-bottom");
        }
        if (options.rtl) {
          availableUtils.addClassName(dom2.root, "vis-rtl");
          availableUtils.removeClassName(dom2.root, "vis-ltr");
        } else {
          availableUtils.addClassName(dom2.root, "vis-ltr");
          availableUtils.removeClassName(dom2.root, "vis-rtl");
        }
        dom2.root.style.maxHeight = availableUtils.option.asSize(options.maxHeight, "");
        dom2.root.style.minHeight = availableUtils.option.asSize(options.minHeight, "");
        dom2.root.style.width = availableUtils.option.asSize(options.width, "");
        var rootOffsetWidth = dom2.root.offsetWidth;
        props.border.left = 1;
        props.border.right = 1;
        props.border.top = 1;
        props.border.bottom = 1;
        props.center.height = dom2.center.offsetHeight;
        props.left.height = dom2.left.offsetHeight;
        props.right.height = dom2.right.offsetHeight;
        props.top.height = dom2.top.clientHeight || -props.border.top;
        props.bottom.height = Math.round(dom2.bottom.getBoundingClientRect().height) || dom2.bottom.clientHeight || -props.border.bottom;
        var contentHeight = Math.max(props.left.height, props.center.height, props.right.height);
        var autoHeight = props.top.height + contentHeight + props.bottom.height + props.border.top + props.border.bottom;
        dom2.root.style.height = availableUtils.option.asSize(options.height, "".concat(autoHeight, "px"));
        props.root.height = dom2.root.offsetHeight;
        props.background.height = props.root.height;
        var containerHeight = props.root.height - props.top.height - props.bottom.height;
        props.centerContainer.height = containerHeight;
        props.leftContainer.height = containerHeight;
        props.rightContainer.height = props.leftContainer.height;
        props.root.width = rootOffsetWidth;
        props.background.width = props.root.width;
        if (!this.initialDrawDone) {
          props.scrollbarWidth = availableUtils.getScrollBarWidth();
        }
        var leftContainerClientWidth = dom2.leftContainer.clientWidth;
        var rightContainerClientWidth = dom2.rightContainer.clientWidth;
        if (options.verticalScroll) {
          if (options.rtl) {
            props.left.width = leftContainerClientWidth || -props.border.left;
            props.right.width = rightContainerClientWidth + props.scrollbarWidth || -props.border.right;
          } else {
            props.left.width = leftContainerClientWidth + props.scrollbarWidth || -props.border.left;
            props.right.width = rightContainerClientWidth || -props.border.right;
          }
        } else {
          props.left.width = leftContainerClientWidth || -props.border.left;
          props.right.width = rightContainerClientWidth || -props.border.right;
        }
        this._setDOM();
        var offset = this._updateScrollTop();
        if (options.orientation.item != "top") {
          offset += Math.max(props.centerContainer.height - props.center.height - props.border.top - props.border.bottom, 0);
        }
        dom2.center.style.transform = "translateY(".concat(offset, "px)");
        var visibilityTop = props.scrollTop == 0 ? "hidden" : "";
        var visibilityBottom = props.scrollTop == props.scrollTopMin ? "hidden" : "";
        dom2.shadowTop.style.visibility = visibilityTop;
        dom2.shadowBottom.style.visibility = visibilityBottom;
        dom2.shadowTopLeft.style.visibility = visibilityTop;
        dom2.shadowBottomLeft.style.visibility = visibilityBottom;
        dom2.shadowTopRight.style.visibility = visibilityTop;
        dom2.shadowBottomRight.style.visibility = visibilityBottom;
        if (options.verticalScroll) {
          dom2.rightContainer.className = "vis-panel vis-right vis-vertical-scroll";
          dom2.leftContainer.className = "vis-panel vis-left vis-vertical-scroll";
          dom2.shadowTopRight.style.visibility = "hidden";
          dom2.shadowBottomRight.style.visibility = "hidden";
          dom2.shadowTopLeft.style.visibility = "hidden";
          dom2.shadowBottomLeft.style.visibility = "hidden";
          dom2.left.style.top = "0px";
          dom2.right.style.top = "0px";
        }
        if (!options.verticalScroll || props.center.height < props.centerContainer.height) {
          dom2.left.style.top = "".concat(offset, "px");
          dom2.right.style.top = "".concat(offset, "px");
          dom2.rightContainer.className = dom2.rightContainer.className.replace(new RegExp("(?:^|\\s)vis-vertical-scroll(?:\\s|$)"), " ");
          dom2.leftContainer.className = dom2.leftContainer.className.replace(new RegExp("(?:^|\\s)vis-vertical-scroll(?:\\s|$)"), " ");
          props.left.width = leftContainerClientWidth || -props.border.left;
          props.right.width = rightContainerClientWidth || -props.border.right;
          this._setDOM();
        }
        var contentsOverflow = props.center.height > props.centerContainer.height;
        this.hammer.get("pan").set({
          direction: contentsOverflow ? Hammer.DIRECTION_ALL : Hammer.DIRECTION_HORIZONTAL
        });
        this.hammer.get("press").set({
          time: this.options.longSelectPressTime
        });
        _forEachInstanceProperty(_context20 = this.components).call(_context20, function(component) {
          resized = component.redraw() || resized;
        });
        var MAX_REDRAW = 5;
        if (resized) {
          if (this.redrawCount < MAX_REDRAW) {
            this.body.emitter.emit("_change");
            return;
          } else {
            console.log("WARNING: infinite loop in redraw?");
          }
        } else {
          this.redrawCount = 0;
        }
        this.body.emitter.emit("changed");
      }
      /**
       * sets the basic DOM components needed for the timeline\graph2d
       */
    }, {
      key: "_setDOM",
      value: function _setDOM() {
        var props = this.props;
        var dom2 = this.dom;
        props.leftContainer.width = props.left.width;
        props.rightContainer.width = props.right.width;
        var centerWidth = props.root.width - props.left.width - props.right.width;
        props.center.width = centerWidth;
        props.centerContainer.width = centerWidth;
        props.top.width = centerWidth;
        props.bottom.width = centerWidth;
        dom2.background.style.height = "".concat(props.background.height, "px");
        dom2.backgroundVertical.style.height = "".concat(props.background.height, "px");
        dom2.backgroundHorizontal.style.height = "".concat(props.centerContainer.height, "px");
        dom2.centerContainer.style.height = "".concat(props.centerContainer.height, "px");
        dom2.leftContainer.style.height = "".concat(props.leftContainer.height, "px");
        dom2.rightContainer.style.height = "".concat(props.rightContainer.height, "px");
        dom2.background.style.width = "".concat(props.background.width, "px");
        dom2.backgroundVertical.style.width = "".concat(props.centerContainer.width, "px");
        dom2.backgroundHorizontal.style.width = "".concat(props.background.width, "px");
        dom2.centerContainer.style.width = "".concat(props.center.width, "px");
        dom2.top.style.width = "".concat(props.top.width, "px");
        dom2.bottom.style.width = "".concat(props.bottom.width, "px");
        dom2.background.style.left = "0";
        dom2.background.style.top = "0";
        dom2.backgroundVertical.style.left = "".concat(props.left.width + props.border.left, "px");
        dom2.backgroundVertical.style.top = "0";
        dom2.backgroundHorizontal.style.left = "0";
        dom2.backgroundHorizontal.style.top = "".concat(props.top.height, "px");
        dom2.centerContainer.style.left = "".concat(props.left.width, "px");
        dom2.centerContainer.style.top = "".concat(props.top.height, "px");
        dom2.leftContainer.style.left = "0";
        dom2.leftContainer.style.top = "".concat(props.top.height, "px");
        dom2.rightContainer.style.left = "".concat(props.left.width + props.center.width, "px");
        dom2.rightContainer.style.top = "".concat(props.top.height, "px");
        dom2.top.style.left = "".concat(props.left.width, "px");
        dom2.top.style.top = "0";
        dom2.bottom.style.left = "".concat(props.left.width, "px");
        dom2.bottom.style.top = "".concat(props.top.height + props.centerContainer.height, "px");
        dom2.center.style.left = "0";
        dom2.left.style.left = "0";
        dom2.right.style.left = "0";
      }
      /**
       * Set a current time. This can be used for example to ensure that a client's
       * time is synchronized with a shared server time.
       * Only applicable when option `showCurrentTime` is true.
       * @param {Date | string | number} time     A Date, unix timestamp, or
       *                                          ISO date string.
       */
    }, {
      key: "setCurrentTime",
      value: function setCurrentTime(time) {
        if (!this.currentTime) {
          throw new Error("Option showCurrentTime must be true");
        }
        this.currentTime.setCurrentTime(time);
      }
      /**
       * Get the current time.
       * Only applicable when option `showCurrentTime` is true.
       * @return {Date} Returns the current time.
       */
    }, {
      key: "getCurrentTime",
      value: function getCurrentTime() {
        if (!this.currentTime) {
          throw new Error("Option showCurrentTime must be true");
        }
        return this.currentTime.getCurrentTime();
      }
      /**
       * Convert a position on screen (pixels) to a datetime
       * @param {int}     x    Position on the screen in pixels
       * @return {Date}   time The datetime the corresponds with given position x
       * @protected
       * TODO: move this function to Range
       */
    }, {
      key: "_toTime",
      value: function _toTime(x) {
        return toTime(this, x, this.props.center.width);
      }
      /**
       * Convert a position on the global screen (pixels) to a datetime
       * @param {int}     x    Position on the screen in pixels
       * @return {Date}   time The datetime the corresponds with given position x
       * @protected
       * TODO: move this function to Range
       */
    }, {
      key: "_toGlobalTime",
      value: function _toGlobalTime(x) {
        return toTime(this, x, this.props.root.width);
      }
      /**
       * Convert a datetime (Date object) into a position on the screen
       * @param {Date}   time A date
       * @return {int}   x    The position on the screen in pixels which corresponds
       *                      with the given date.
       * @protected
       * TODO: move this function to Range
       */
    }, {
      key: "_toScreen",
      value: function _toScreen(time) {
        return toScreen(this, time, this.props.center.width);
      }
      /**
       * Convert a datetime (Date object) into a position on the root
       * This is used to get the pixel density estimate for the screen, not the center panel
       * @param {Date}   time A date
       * @return {int}   x    The position on root in pixels which corresponds
       *                      with the given date.
       * @protected
       * TODO: move this function to Range
       */
    }, {
      key: "_toGlobalScreen",
      value: function _toGlobalScreen(time) {
        return toScreen(this, time, this.props.root.width);
      }
      /**
       * Initialize watching when option autoResize is true
       * @private
       */
    }, {
      key: "_initAutoResize",
      value: function _initAutoResize() {
        if (this.options.autoResize == true) {
          this._startAutoResize();
        } else {
          this._stopAutoResize();
        }
      }
      /**
       * Watch for changes in the size of the container. On resize, the Panel will
       * automatically redraw itself.
       * @private
       */
    }, {
      key: "_startAutoResize",
      value: function _startAutoResize() {
        var me = this;
        this._stopAutoResize();
        this._onResize = function() {
          if (me.options.autoResize != true) {
            me._stopAutoResize();
            return;
          }
          if (me.dom.root) {
            var rootOffsetHeight = me.dom.root.offsetHeight;
            var rootOffsetWidth = me.dom.root.offsetWidth;
            if (rootOffsetWidth != me.props.lastWidth || rootOffsetHeight != me.props.lastHeight) {
              me.props.lastWidth = rootOffsetWidth;
              me.props.lastHeight = rootOffsetHeight;
              me.props.scrollbarWidth = availableUtils.getScrollBarWidth();
              me.body.emitter.emit("_change");
            }
          }
        };
        availableUtils.addEventListener(window, "resize", this._onResize);
        if (me.dom.root) {
          me.props.lastWidth = me.dom.root.offsetWidth;
          me.props.lastHeight = me.dom.root.offsetHeight;
        }
        this.watchTimer = _setInterval(this._onResize, 1e3);
      }
      /**
       * Stop watching for a resize of the frame.
       * @private
       */
    }, {
      key: "_stopAutoResize",
      value: function _stopAutoResize() {
        if (this.watchTimer) {
          clearInterval(this.watchTimer);
          this.watchTimer = void 0;
        }
        if (this._onResize) {
          availableUtils.removeEventListener(window, "resize", this._onResize);
          this._onResize = null;
        }
      }
      /**
       * Start moving the timeline vertically
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onTouch",
      value: function _onTouch(event2) {
        this.touch.allowDragging = true;
        this.touch.initialScrollTop = this.props.scrollTop;
      }
      /**
       * Start moving the timeline vertically
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onPinch",
      value: function _onPinch(event2) {
        this.touch.allowDragging = false;
      }
      /**
       * Move the timeline vertically
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onDrag",
      value: function _onDrag(event2) {
        if (!event2)
          return;
        if (!this.touch.allowDragging)
          return;
        var delta = event2.deltaY;
        var oldScrollTop = this._getScrollTop();
        var newScrollTop = this._setScrollTop(this.touch.initialScrollTop + delta);
        if (this.options.verticalScroll) {
          this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
          this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
        }
        if (newScrollTop != oldScrollTop) {
          this.emit("verticalDrag");
        }
      }
      /**
       * Apply a scrollTop
       * @param {number} scrollTop
       * @returns {number} scrollTop  Returns the applied scrollTop
       * @private
       */
    }, {
      key: "_setScrollTop",
      value: function _setScrollTop(scrollTop) {
        this.props.scrollTop = scrollTop;
        this._updateScrollTop();
        return this.props.scrollTop;
      }
      /**
       * Update the current scrollTop when the height of  the containers has been changed
       * @returns {number} scrollTop  Returns the applied scrollTop
       * @private
       */
    }, {
      key: "_updateScrollTop",
      value: function _updateScrollTop() {
        var scrollTopMin = Math.min(this.props.centerContainer.height - this.props.border.top - this.props.border.bottom - this.props.center.height, 0);
        if (scrollTopMin != this.props.scrollTopMin) {
          if (this.options.orientation.item != "top") {
            this.props.scrollTop += scrollTopMin - this.props.scrollTopMin;
          }
          this.props.scrollTopMin = scrollTopMin;
        }
        if (this.props.scrollTop > 0)
          this.props.scrollTop = 0;
        if (this.props.scrollTop < scrollTopMin)
          this.props.scrollTop = scrollTopMin;
        if (this.options.verticalScroll) {
          this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
          this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
        }
        return this.props.scrollTop;
      }
      /**
       * Get the current scrollTop
       * @returns {number} scrollTop
       * @private
       */
    }, {
      key: "_getScrollTop",
      value: function _getScrollTop() {
        return this.props.scrollTop;
      }
      /**
       * Load a configurator
       * [at]returns {Object}
       * @private
       */
    }, {
      key: "_createConfigurator",
      value: function _createConfigurator() {
        throw new Error("Cannot invoke abstract method _createConfigurator");
      }
    }]);
    return Core2;
  }();
  Emitter(Core.prototype);
  function _createSuper$9(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$9() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var CurrentTime = /* @__PURE__ */ function(_Component) {
    _inherits(CurrentTime2, _Component);
    var _super = _createSuper$9(CurrentTime2);
    function CurrentTime2(body, options) {
      var _context;
      var _this;
      _classCallCheck(this, CurrentTime2);
      _this = _super.call(this);
      _this.body = body;
      _this.defaultOptions = {
        rtl: false,
        showCurrentTime: true,
        alignCurrentTime: void 0,
        moment: moment$3,
        locales,
        locale: "en"
      };
      _this.options = availableUtils.extend({}, _this.defaultOptions);
      _this.setOptions(options);
      _this.options.locales = availableUtils.extend({}, locales, _this.options.locales);
      var defaultLocales = _this.defaultOptions.locales[_this.defaultOptions.locale];
      _forEachInstanceProperty(_context = _Object$keys(_this.options.locales)).call(_context, function(locale) {
        _this.options.locales[locale] = availableUtils.extend({}, defaultLocales, _this.options.locales[locale]);
      });
      _this.offset = 0;
      _this._create();
      return _this;
    }
    _createClass(CurrentTime2, [{
      key: "_create",
      value: function _create() {
        var bar = document.createElement("div");
        bar.className = "vis-current-time";
        bar.style.position = "absolute";
        bar.style.top = "0px";
        bar.style.height = "100%";
        this.bar = bar;
      }
      /**
       * Destroy the CurrentTime bar
       */
    }, {
      key: "destroy",
      value: function destroy() {
        this.options.showCurrentTime = false;
        this.redraw();
        this.body = null;
      }
      /**
       * Set options for the component. Options will be merged in current options.
       * @param {Object} options  Available parameters:
       *                          {boolean} [showCurrentTime]
       *                          {String}  [alignCurrentTime]
       */
    }, {
      key: "setOptions",
      value: function setOptions(options) {
        if (options) {
          availableUtils.selectiveExtend(["rtl", "showCurrentTime", "alignCurrentTime", "moment", "locale", "locales"], this.options, options);
        }
      }
      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
    }, {
      key: "redraw",
      value: function redraw() {
        if (this.options.showCurrentTime) {
          var _context2, _context3;
          var parent2 = this.body.dom.backgroundVertical;
          if (this.bar.parentNode != parent2) {
            if (this.bar.parentNode) {
              this.bar.parentNode.removeChild(this.bar);
            }
            parent2.appendChild(this.bar);
            this.start();
          }
          var now3 = this.options.moment(_Date$now() + this.offset);
          if (this.options.alignCurrentTime) {
            now3 = now3.startOf(this.options.alignCurrentTime);
          }
          var x = this.body.util.toScreen(now3);
          var locale = this.options.locales[this.options.locale];
          if (!locale) {
            if (!this.warned) {
              console.warn("WARNING: options.locales['".concat(this.options.locale, "'] not found. See https://visjs.github.io/vis-timeline/docs/timeline/#Localization"));
              this.warned = true;
            }
            locale = this.options.locales["en"];
          }
          var title = _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = "".concat(locale.current, " ")).call(_context3, locale.time, ": ")).call(_context2, now3.format("dddd, MMMM Do YYYY, H:mm:ss"));
          title = title.charAt(0).toUpperCase() + title.substring(1);
          if (this.options.rtl) {
            this.bar.style.transform = "translateX(".concat(x * -1, "px)");
          } else {
            this.bar.style.transform = "translateX(".concat(x, "px)");
          }
          this.bar.title = title;
        } else {
          if (this.bar.parentNode) {
            this.bar.parentNode.removeChild(this.bar);
          }
          this.stop();
        }
        return false;
      }
      /**
       * Start auto refreshing the current time bar
       */
    }, {
      key: "start",
      value: function start() {
        var me = this;
        function update() {
          me.stop();
          var scale = me.body.range.conversion(me.body.domProps.center.width).scale;
          var interval = 1 / scale / 10;
          if (interval < 30)
            interval = 30;
          if (interval > 1e3)
            interval = 1e3;
          me.redraw();
          me.body.emitter.emit("currentTimeTick");
          me.currentTimeTimer = _setTimeout(update, interval);
        }
        update();
      }
      /**
       * Stop auto refreshing the current time bar
       */
    }, {
      key: "stop",
      value: function stop() {
        if (this.currentTimeTimer !== void 0) {
          clearTimeout(this.currentTimeTimer);
          delete this.currentTimeTimer;
        }
      }
      /**
       * Set a current time. This can be used for example to ensure that a client's
       * time is synchronized with a shared server time.
       * @param {Date | string | number} time     A Date, unix timestamp, or
       *                                          ISO date string.
       */
    }, {
      key: "setCurrentTime",
      value: function setCurrentTime(time) {
        var t = availableUtils.convert(time, "Date").valueOf();
        var now3 = _Date$now();
        this.offset = t - now3;
        this.redraw();
      }
      /**
       * Get the current time.
       * @return {Date} Returns the current time.
       */
    }, {
      key: "getCurrentTime",
      value: function getCurrentTime() {
        return new Date(_Date$now() + this.offset);
      }
    }]);
    return CurrentTime2;
  }(Component);
  var findExports = {};
  var find$3 = {
    get exports() {
      return findExports;
    },
    set exports(v) {
      findExports = v;
    }
  };
  var $$2 = _export;
  var $find = arrayIteration.find;
  var FIND = "find";
  var SKIPS_HOLES$1 = true;
  if (FIND in [])
    Array(1)[FIND](function() {
      SKIPS_HOLES$1 = false;
    });
  $$2({ target: "Array", proto: true, forced: SKIPS_HOLES$1 }, {
    find: function find(callbackfn) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var entryVirtual$2 = entryVirtual$o;
  var find$2 = entryVirtual$2("Array").find;
  var isPrototypeOf$2 = objectIsPrototypeOf;
  var method$2 = find$2;
  var ArrayPrototype$2 = Array.prototype;
  var find$1 = function(it2) {
    var own = it2.find;
    return it2 === ArrayPrototype$2 || isPrototypeOf$2(ArrayPrototype$2, it2) && own === ArrayPrototype$2.find ? method$2 : own;
  };
  var parent$2 = find$1;
  var find2 = parent$2;
  (function(module) {
    module.exports = find2;
  })(find$3);
  var _findInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(findExports);
  var findIndexExports = {};
  var findIndex$3 = {
    get exports() {
      return findIndexExports;
    },
    set exports(v) {
      findIndexExports = v;
    }
  };
  var $$1 = _export;
  var $findIndex = arrayIteration.findIndex;
  var FIND_INDEX = "findIndex";
  var SKIPS_HOLES = true;
  if (FIND_INDEX in [])
    Array(1)[FIND_INDEX](function() {
      SKIPS_HOLES = false;
    });
  $$1({ target: "Array", proto: true, forced: SKIPS_HOLES }, {
    findIndex: function findIndex(callbackfn) {
      return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var entryVirtual$1 = entryVirtual$o;
  var findIndex$2 = entryVirtual$1("Array").findIndex;
  var isPrototypeOf$1 = objectIsPrototypeOf;
  var method$1 = findIndex$2;
  var ArrayPrototype$1 = Array.prototype;
  var findIndex$1 = function(it2) {
    var own = it2.findIndex;
    return it2 === ArrayPrototype$1 || isPrototypeOf$1(ArrayPrototype$1, it2) && own === ArrayPrototype$1.findIndex ? method$1 : own;
  };
  var parent$1 = findIndex$1;
  var findIndex2 = parent$1;
  (function(module) {
    module.exports = findIndex2;
  })(findIndex$3);
  var _findIndexInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(findIndexExports);
  function _createForOfIteratorHelper$5(o, allowArrayLike) {
    var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
    if (!it2) {
      if (_Array$isArray(o) || (it2 = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it2)
          o = it2;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n() {
          if (i2 >= o.length)
            return { done: true };
          return { done: false, value: o[i2++] };
        }, e: function e(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it2 = it2.call(o);
    }, n: function n() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it2.return != null)
          it2.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray$5(o, minLen) {
    var _context5;
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray$5(o, minLen);
    var n = _sliceInstanceProperty(_context5 = Object.prototype.toString.call(o)).call(_context5, 8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from$1(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray$5(o, minLen);
  }
  function _arrayLikeToArray$5(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  var EPSILON = 1e-3;
  function orderByStart(items) {
    _sortInstanceProperty(items).call(items, function(a, b) {
      return a.data.start - b.data.start;
    });
  }
  function orderByEnd(items) {
    _sortInstanceProperty(items).call(items, function(a, b) {
      var aTime = "end" in a.data ? a.data.end : a.data.start;
      var bTime = "end" in b.data ? b.data.end : b.data.start;
      return aTime - bTime;
    });
  }
  function stack(items, margin, force, shouldBailItemsRedrawFunction) {
    var stackingResult = performStacking(items, margin.item, false, function(item) {
      return item.stack && (force || item.top === null);
    }, function(item) {
      return item.stack;
    }, function(item) {
      return margin.axis;
    }, shouldBailItemsRedrawFunction);
    return stackingResult === null;
  }
  function substack(items, margin, subgroup) {
    var subgroupHeight = performStacking(items, margin.item, false, function(item) {
      return item.stack;
    }, function(item) {
      return true;
    }, function(item) {
      return item.baseTop;
    });
    subgroup.height = subgroupHeight - subgroup.top + 0.5 * margin.item.vertical;
  }
  function nostack(items, margin, subgroups, isStackSubgroups) {
    for (var _i = 0; _i < items.length; _i++) {
      if (items[_i].data.subgroup == void 0) {
        items[_i].top = margin.item.vertical;
      } else if (items[_i].data.subgroup !== void 0 && isStackSubgroups) {
        var newTop = 0;
        for (var subgroup in subgroups) {
          if (subgroups.hasOwnProperty(subgroup)) {
            if (subgroups[subgroup].visible == true && subgroups[subgroup].index < subgroups[items[_i].data.subgroup].index) {
              newTop += subgroups[subgroup].height;
              subgroups[items[_i].data.subgroup].top = newTop;
            }
          }
        }
        items[_i].top = newTop + 0.5 * margin.item.vertical;
      }
    }
    if (!isStackSubgroups) {
      stackSubgroups(items, margin, subgroups);
    }
  }
  function stackSubgroups(items, margin, subgroups) {
    var _context;
    performStacking(_sortInstanceProperty(_context = _Object$values2(subgroups)).call(_context, function(a, b) {
      if (a.index > b.index)
        return 1;
      if (a.index < b.index)
        return -1;
      return 0;
    }), {
      vertical: 0
    }, true, function(item) {
      return true;
    }, function(item) {
      return true;
    }, function(item) {
      return 0;
    });
    for (var _i2 = 0; _i2 < items.length; _i2++) {
      if (items[_i2].data.subgroup !== void 0) {
        items[_i2].top = subgroups[items[_i2].data.subgroup].top + 0.5 * margin.item.vertical;
      }
    }
  }
  function stackSubgroupsWithInnerStack(subgroupItems, margin, subgroups) {
    var doSubStack = false;
    var subgroupOrder = [];
    for (var subgroup in subgroups) {
      if (subgroups[subgroup].hasOwnProperty("index")) {
        subgroupOrder[subgroups[subgroup].index] = subgroup;
      } else {
        subgroupOrder.push(subgroup);
      }
    }
    for (var j = 0; j < subgroupOrder.length; j++) {
      subgroup = subgroupOrder[j];
      if (subgroups.hasOwnProperty(subgroup)) {
        doSubStack = doSubStack || subgroups[subgroup].stack;
        subgroups[subgroup].top = 0;
        for (var otherSubgroup in subgroups) {
          if (subgroups[otherSubgroup].visible && subgroups[subgroup].index > subgroups[otherSubgroup].index) {
            subgroups[subgroup].top += subgroups[otherSubgroup].height;
          }
        }
        var items = subgroupItems[subgroup];
        for (var _i3 = 0; _i3 < items.length; _i3++) {
          if (items[_i3].data.subgroup !== void 0) {
            items[_i3].top = subgroups[items[_i3].data.subgroup].top + 0.5 * margin.item.vertical;
            if (subgroups[subgroup].stack) {
              items[_i3].baseTop = items[_i3].top;
            }
          }
        }
        if (doSubStack && subgroups[subgroup].stack) {
          substack(subgroupItems[subgroup], margin, subgroups[subgroup]);
        }
      }
    }
  }
  function performStacking(items, margins, compareTimes, shouldStack, shouldOthersStack, getInitialHeight, shouldBail) {
    var getItemStart = function getItemStart2(item) {
      return item.start;
    };
    var getItemEnd = function getItemEnd2(item) {
      return item.end;
    };
    if (!compareTimes) {
      var rtl = !!(items[0] && items[0].options.rtl);
      if (rtl) {
        getItemStart = function getItemStart2(item) {
          return item.right;
        };
      } else {
        getItemStart = function getItemStart2(item) {
          return item.left;
        };
      }
      getItemEnd = function getItemEnd2(item) {
        return getItemStart(item) + item.width + margins.horizontal;
      };
    }
    var itemsToPosition = [];
    var itemsAlreadyPositioned = [];
    var previousStart = null;
    var insertionIndex = 0;
    var _iterator = _createForOfIteratorHelper$5(items), _step;
    try {
      var _loop2 = function _loop22() {
        var item = _step.value;
        if (shouldStack(item)) {
          itemsToPosition.push(item);
        } else {
          if (shouldOthersStack(item)) {
            var itemStart = getItemStart(item);
            if (previousStart !== null && itemStart < previousStart - EPSILON) {
              insertionIndex = 0;
            }
            previousStart = itemStart;
            insertionIndex = findIndexFrom(itemsAlreadyPositioned, function(i2) {
              return getItemStart(i2) - EPSILON > itemStart;
            }, insertionIndex);
            _spliceInstanceProperty(itemsAlreadyPositioned).call(itemsAlreadyPositioned, insertionIndex, 0, item);
            insertionIndex++;
          }
        }
      };
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        _loop2();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    previousStart = null;
    var previousEnd = null;
    insertionIndex = 0;
    var horizontalOverlapStartIndex = 0;
    var horizontalOverlapEndIndex = 0;
    var maxHeight = 0;
    var _loop = function _loop3() {
      var _context2, _context3;
      var item = itemsToPosition.shift();
      item.top = getInitialHeight(item);
      var itemStart = getItemStart(item);
      var itemEnd = getItemEnd(item);
      if (previousStart !== null && itemStart < previousStart - EPSILON) {
        horizontalOverlapStartIndex = 0;
        horizontalOverlapEndIndex = 0;
        insertionIndex = 0;
        previousEnd = null;
      }
      previousStart = itemStart;
      horizontalOverlapStartIndex = findIndexFrom(itemsAlreadyPositioned, function(i3) {
        return itemStart < getItemEnd(i3) - EPSILON;
      }, horizontalOverlapStartIndex);
      if (previousEnd === null || previousEnd < itemEnd - EPSILON) {
        horizontalOverlapEndIndex = findIndexFrom(itemsAlreadyPositioned, function(i3) {
          return itemEnd < getItemStart(i3) - EPSILON;
        }, Math.max(horizontalOverlapStartIndex, horizontalOverlapEndIndex));
      }
      if (previousEnd !== null && previousEnd - EPSILON > itemEnd) {
        horizontalOverlapEndIndex = findLastIndexBetween(itemsAlreadyPositioned, function(i3) {
          return itemEnd + EPSILON >= getItemStart(i3);
        }, horizontalOverlapStartIndex, horizontalOVerlapEndIndex) + 1;
      }
      var horizontallyCollidingItems = _sortInstanceProperty(_context2 = _filterInstanceProperty(_context3 = _sliceInstanceProperty(itemsAlreadyPositioned).call(itemsAlreadyPositioned, horizontalOverlapStartIndex, horizontalOverlapEndIndex)).call(_context3, function(i3) {
        return itemStart < getItemEnd(i3) - EPSILON && itemEnd - EPSILON > getItemStart(i3);
      })).call(_context2, function(a, b) {
        return a.top - b.top;
      });
      for (var i2 = 0; i2 < horizontallyCollidingItems.length; i2++) {
        var otherItem = horizontallyCollidingItems[i2];
        if (checkVerticalSpatialCollision(item, otherItem, margins)) {
          item.top = otherItem.top + otherItem.height + margins.vertical;
        }
      }
      if (shouldOthersStack(item)) {
        insertionIndex = findIndexFrom(itemsAlreadyPositioned, function(i3) {
          return getItemStart(i3) - EPSILON > itemStart;
        }, insertionIndex);
        _spliceInstanceProperty(itemsAlreadyPositioned).call(itemsAlreadyPositioned, insertionIndex, 0, item);
        insertionIndex++;
      }
      var currentHeight = item.top + item.height;
      if (currentHeight > maxHeight) {
        maxHeight = currentHeight;
      }
      if (shouldBail && shouldBail()) {
        return {
          v: null
        };
      }
    };
    while (itemsToPosition.length > 0) {
      var _ret = _loop();
      if (_typeof$1(_ret) === "object")
        return _ret.v;
    }
    return maxHeight;
  }
  function checkVerticalSpatialCollision(a, b, margin) {
    return a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
  }
  function findIndexFrom(arr, predicate, startIndex) {
    var _context4;
    if (!startIndex) {
      startIndex = 0;
    }
    var matchIndex = _findIndexInstanceProperty(_context4 = _sliceInstanceProperty(arr).call(arr, startIndex)).call(_context4, predicate);
    if (matchIndex === -1) {
      return arr.length;
    }
    return matchIndex + startIndex;
  }
  function findLastIndexBetween(arr, predicate, startIndex, endIndex) {
    if (!startIndex) {
      startIndex = 0;
    }
    if (!endIndex) {
      endIndex = arr.length;
    }
    for (i = endIndex - 1; i >= startIndex; i--) {
      if (predicate(arr[i])) {
        return i;
      }
    }
    return startIndex - 1;
  }
  var UNGROUPED$3 = "__ungrouped__";
  var BACKGROUND$2 = "__background__";
  var ReservedGroupIds$1 = {
    UNGROUPED: UNGROUPED$3,
    BACKGROUND: BACKGROUND$2
  };
  var Group = /* @__PURE__ */ function() {
    function Group2(groupId, data2, itemSet) {
      var _this = this;
      _classCallCheck(this, Group2);
      this.groupId = groupId;
      this.subgroups = {};
      this.subgroupStack = {};
      this.subgroupStackAll = false;
      this.subgroupVisibility = {};
      this.doInnerStack = false;
      this.shouldBailStackItems = false;
      this.subgroupIndex = 0;
      this.subgroupOrderer = data2 && data2.subgroupOrder;
      this.itemSet = itemSet;
      this.isVisible = null;
      this.stackDirty = true;
      this._disposeCallbacks = [];
      if (data2 && data2.nestedGroups) {
        this.nestedGroups = data2.nestedGroups;
        if (data2.showNested == false) {
          this.showNested = false;
        } else {
          this.showNested = true;
        }
      }
      if (data2 && data2.subgroupStack) {
        if (typeof data2.subgroupStack === "boolean") {
          this.doInnerStack = data2.subgroupStack;
          this.subgroupStackAll = data2.subgroupStack;
        } else {
          for (var key in data2.subgroupStack) {
            this.subgroupStack[key] = data2.subgroupStack[key];
            this.doInnerStack = this.doInnerStack || data2.subgroupStack[key];
          }
        }
      }
      if (data2 && data2.heightMode) {
        this.heightMode = data2.heightMode;
      } else {
        this.heightMode = itemSet.options.groupHeightMode;
      }
      this.nestedInGroup = null;
      this.dom = {};
      this.props = {
        label: {
          width: 0,
          height: 0
        }
      };
      this.className = null;
      this.items = {};
      this.visibleItems = [];
      this.itemsInRange = [];
      this.orderedItems = {
        byStart: [],
        byEnd: []
      };
      this.checkRangedItems = false;
      var handleCheckRangedItems = function handleCheckRangedItems2() {
        _this.checkRangedItems = true;
      };
      this.itemSet.body.emitter.on("checkRangedItems", handleCheckRangedItems);
      this._disposeCallbacks.push(function() {
        _this.itemSet.body.emitter.off("checkRangedItems", handleCheckRangedItems);
      });
      this._create();
      this.setData(data2);
    }
    _createClass(Group2, [{
      key: "_create",
      value: function _create() {
        var label = document.createElement("div");
        if (this.itemSet.options.groupEditable.order) {
          label.className = "vis-label draggable";
        } else {
          label.className = "vis-label";
        }
        this.dom.label = label;
        var inner = document.createElement("div");
        inner.className = "vis-inner";
        label.appendChild(inner);
        this.dom.inner = inner;
        var foreground = document.createElement("div");
        foreground.className = "vis-group";
        foreground["vis-group"] = this;
        this.dom.foreground = foreground;
        this.dom.background = document.createElement("div");
        this.dom.background.className = "vis-group";
        this.dom.axis = document.createElement("div");
        this.dom.axis.className = "vis-group";
        this.dom.marker = document.createElement("div");
        this.dom.marker.style.visibility = "hidden";
        this.dom.marker.style.position = "absolute";
        this.dom.marker.innerHTML = "";
        this.dom.background.appendChild(this.dom.marker);
      }
      /**
       * Set the group data for this group
       * @param {Object} data   Group data, can contain properties content and className
       */
    }, {
      key: "setData",
      value: function setData(data2) {
        if (this.itemSet.groupTouchParams.isDragging)
          return;
        var content;
        var templateFunction;
        if (data2 && data2.subgroupVisibility) {
          for (var key in data2.subgroupVisibility) {
            this.subgroupVisibility[key] = data2.subgroupVisibility[key];
          }
        }
        if (this.itemSet.options && this.itemSet.options.groupTemplate) {
          var _context;
          templateFunction = _bindInstanceProperty$1(_context = this.itemSet.options.groupTemplate).call(_context, this);
          content = templateFunction(data2, this.dom.inner);
        } else {
          content = data2 && data2.content;
        }
        if (content instanceof Element) {
          while (this.dom.inner.firstChild) {
            this.dom.inner.removeChild(this.dom.inner.firstChild);
          }
          this.dom.inner.appendChild(content);
        } else if (content instanceof Object && content.isReactComponent)
          ;
        else if (content instanceof Object) {
          templateFunction(data2, this.dom.inner);
        } else if (content !== void 0 && content !== null) {
          this.dom.inner.innerHTML = availableUtils.xss(content);
        } else {
          this.dom.inner.innerHTML = availableUtils.xss(this.groupId || "");
        }
        this.dom.label.title = data2 && data2.title || "";
        if (!this.dom.inner.firstChild) {
          availableUtils.addClassName(this.dom.inner, "vis-hidden");
        } else {
          availableUtils.removeClassName(this.dom.inner, "vis-hidden");
        }
        if (data2 && data2.nestedGroups) {
          if (!this.nestedGroups || this.nestedGroups != data2.nestedGroups) {
            this.nestedGroups = data2.nestedGroups;
          }
          if (data2.showNested !== void 0 || this.showNested === void 0) {
            if (data2.showNested == false) {
              this.showNested = false;
            } else {
              this.showNested = true;
            }
          }
          availableUtils.addClassName(this.dom.label, "vis-nesting-group");
          if (this.showNested) {
            availableUtils.removeClassName(this.dom.label, "collapsed");
            availableUtils.addClassName(this.dom.label, "expanded");
          } else {
            availableUtils.removeClassName(this.dom.label, "expanded");
            availableUtils.addClassName(this.dom.label, "collapsed");
          }
        } else if (this.nestedGroups) {
          this.nestedGroups = null;
          availableUtils.removeClassName(this.dom.label, "collapsed");
          availableUtils.removeClassName(this.dom.label, "expanded");
          availableUtils.removeClassName(this.dom.label, "vis-nesting-group");
        }
        if (data2 && (data2.treeLevel || data2.nestedInGroup)) {
          availableUtils.addClassName(this.dom.label, "vis-nested-group");
          if (data2.treeLevel) {
            availableUtils.addClassName(this.dom.label, "vis-group-level-" + data2.treeLevel);
          } else {
            availableUtils.addClassName(this.dom.label, "vis-group-level-unknown-but-gte1");
          }
        } else {
          availableUtils.addClassName(this.dom.label, "vis-group-level-0");
        }
        var className = data2 && data2.className || null;
        if (className != this.className) {
          if (this.className) {
            availableUtils.removeClassName(this.dom.label, this.className);
            availableUtils.removeClassName(this.dom.foreground, this.className);
            availableUtils.removeClassName(this.dom.background, this.className);
            availableUtils.removeClassName(this.dom.axis, this.className);
          }
          availableUtils.addClassName(this.dom.label, className);
          availableUtils.addClassName(this.dom.foreground, className);
          availableUtils.addClassName(this.dom.background, className);
          availableUtils.addClassName(this.dom.axis, className);
          this.className = className;
        }
        if (this.style) {
          availableUtils.removeCssText(this.dom.label, this.style);
          this.style = null;
        }
        if (data2 && data2.style) {
          availableUtils.addCssText(this.dom.label, data2.style);
          this.style = data2.style;
        }
      }
      /**
       * Get the width of the group label
       * @return {number} width
       */
    }, {
      key: "getLabelWidth",
      value: function getLabelWidth() {
        return this.props.label.width;
      }
      /**
       * check if group has had an initial height hange
       * @returns {boolean} 
       */
    }, {
      key: "_didMarkerHeightChange",
      value: function _didMarkerHeightChange() {
        var markerHeight = this.dom.marker.clientHeight;
        if (markerHeight != this.lastMarkerHeight) {
          this.lastMarkerHeight = markerHeight;
          var redrawQueue = {};
          var redrawQueueLength = 0;
          _forEachInstanceProperty(availableUtils).call(availableUtils, this.items, function(item, key) {
            item.dirty = true;
            if (item.displayed) {
              var returnQueue = true;
              redrawQueue[key] = item.redraw(returnQueue);
              redrawQueueLength = redrawQueue[key].length;
            }
          });
          var needRedraw = redrawQueueLength > 0;
          if (needRedraw) {
            var _loop = function _loop2(i3) {
              _forEachInstanceProperty(availableUtils).call(availableUtils, redrawQueue, function(fns) {
                fns[i3]();
              });
            };
            for (var i2 = 0; i2 < redrawQueueLength; i2++) {
              _loop(i2);
            }
          }
          return true;
        } else {
          return false;
        }
      }
      /**
       * calculate group dimentions and position
       * @param {number} pixels
       */
    }, {
      key: "_calculateGroupSizeAndPosition",
      value: function _calculateGroupSizeAndPosition() {
        var _this$dom$foreground = this.dom.foreground, offsetTop = _this$dom$foreground.offsetTop, offsetLeft = _this$dom$foreground.offsetLeft, offsetWidth = _this$dom$foreground.offsetWidth;
        this.top = offsetTop;
        this.right = offsetLeft;
        this.width = offsetWidth;
      }
      /**
       * checks if should bail redraw of items
       * @returns {boolean} should bail 
       */
    }, {
      key: "_shouldBailItemsRedraw",
      value: function _shouldBailItemsRedraw() {
        var me = this;
        var timeoutOptions = this.itemSet.options.onTimeout;
        var bailOptions = {
          relativeBailingTime: this.itemSet.itemsSettingTime,
          bailTimeMs: timeoutOptions && timeoutOptions.timeoutMs,
          userBailFunction: timeoutOptions && timeoutOptions.callback,
          shouldBailStackItems: this.shouldBailStackItems
        };
        var bail = null;
        if (!this.itemSet.initialDrawDone) {
          if (bailOptions.shouldBailStackItems) {
            return true;
          }
          if (Math.abs(_Date$now() - new Date(bailOptions.relativeBailingTime)) > bailOptions.bailTimeMs) {
            if (bailOptions.userBailFunction && this.itemSet.userContinueNotBail == null) {
              bailOptions.userBailFunction(function(didUserContinue) {
                me.itemSet.userContinueNotBail = didUserContinue;
                bail = !didUserContinue;
              });
            } else if (me.itemSet.userContinueNotBail == false) {
              bail = true;
            } else {
              bail = false;
            }
          }
        }
        return bail;
      }
      /**
       * redraws items
       * @param {boolean} forceRestack
       * @param {boolean} lastIsVisible
       * @param {number} margin
       * @param {object} range
       * @private
       */
    }, {
      key: "_redrawItems",
      value: function _redrawItems(forceRestack, lastIsVisible, margin, range) {
        var _this2 = this;
        var restack = forceRestack || this.stackDirty || this.isVisible && !lastIsVisible;
        if (restack) {
          var _context2, _context3, _context4, _context5, _context6, _context7;
          var orderedItems = {
            byEnd: _filterInstanceProperty(_context2 = this.orderedItems.byEnd).call(_context2, function(item) {
              return !item.isCluster;
            }),
            byStart: _filterInstanceProperty(_context3 = this.orderedItems.byStart).call(_context3, function(item) {
              return !item.isCluster;
            })
          };
          var orderedClusters = {
            byEnd: _toConsumableArray(new _Set(_filterInstanceProperty(_context4 = _mapInstanceProperty(_context5 = this.orderedItems.byEnd).call(_context5, function(item) {
              return item.cluster;
            })).call(_context4, function(item) {
              return !!item;
            }))),
            byStart: _toConsumableArray(new _Set(_filterInstanceProperty(_context6 = _mapInstanceProperty(_context7 = this.orderedItems.byStart).call(_context7, function(item) {
              return item.cluster;
            })).call(_context6, function(item) {
              return !!item;
            })))
          };
          var getVisibleItems = function getVisibleItems2() {
            var _context8, _context9, _context10;
            var visibleItems = _this2._updateItemsInRange(orderedItems, _filterInstanceProperty(_context8 = _this2.visibleItems).call(_context8, function(item) {
              return !item.isCluster;
            }), range);
            var visibleClusters = _this2._updateClustersInRange(orderedClusters, _filterInstanceProperty(_context9 = _this2.visibleItems).call(_context9, function(item) {
              return item.isCluster;
            }), range);
            return _concatInstanceProperty(_context10 = []).call(_context10, _toConsumableArray(visibleItems), _toConsumableArray(visibleClusters));
          };
          var getVisibleItemsGroupedBySubgroup = function getVisibleItemsGroupedBySubgroup2(orderFn) {
            var visibleSubgroupsItems2 = {};
            var _loop2 = function _loop22(subgroup2) {
              var _context11;
              var items = _filterInstanceProperty(_context11 = _this2.visibleItems).call(_context11, function(item) {
                return item.data.subgroup === subgroup2;
              });
              visibleSubgroupsItems2[subgroup2] = orderFn ? _sortInstanceProperty(items).call(items, function(a, b) {
                return orderFn(a.data, b.data);
              }) : items;
            };
            for (var subgroup in _this2.subgroups) {
              _loop2(subgroup);
            }
            return visibleSubgroupsItems2;
          };
          if (typeof this.itemSet.options.order === "function") {
            var me = this;
            if (this.doInnerStack && this.itemSet.options.stackSubgroups) {
              var visibleSubgroupsItems = getVisibleItemsGroupedBySubgroup(this.itemSet.options.order);
              stackSubgroupsWithInnerStack(visibleSubgroupsItems, margin, this.subgroups);
              this.visibleItems = getVisibleItems();
              this._updateSubGroupHeights(margin);
            } else {
              var _context12, _context13, _context14, _context15;
              this.visibleItems = getVisibleItems();
              this._updateSubGroupHeights(margin);
              var customOrderedItems = _sortInstanceProperty(_context12 = _filterInstanceProperty(_context13 = _sliceInstanceProperty(_context14 = this.visibleItems).call(_context14)).call(_context13, function(item) {
                return item.isCluster || !item.isCluster && !item.cluster;
              })).call(_context12, function(a, b) {
                return me.itemSet.options.order(a.data, b.data);
              });
              this.shouldBailStackItems = stack(customOrderedItems, margin, true, _bindInstanceProperty$1(_context15 = this._shouldBailItemsRedraw).call(_context15, this));
            }
          } else {
            this.visibleItems = getVisibleItems();
            this._updateSubGroupHeights(margin);
            if (this.itemSet.options.stack) {
              if (this.doInnerStack && this.itemSet.options.stackSubgroups) {
                var _visibleSubgroupsItems = getVisibleItemsGroupedBySubgroup();
                stackSubgroupsWithInnerStack(_visibleSubgroupsItems, margin, this.subgroups);
              } else {
                var _context16;
                this.shouldBailStackItems = stack(this.visibleItems, margin, true, _bindInstanceProperty$1(_context16 = this._shouldBailItemsRedraw).call(_context16, this));
              }
            } else {
              nostack(this.visibleItems, margin, this.subgroups, this.itemSet.options.stackSubgroups);
            }
          }
          for (var i2 = 0; i2 < this.visibleItems.length; i2++) {
            this.visibleItems[i2].repositionX();
            if (this.subgroupVisibility[this.visibleItems[i2].data.subgroup] !== void 0) {
              if (!this.subgroupVisibility[this.visibleItems[i2].data.subgroup]) {
                this.visibleItems[i2].hide();
              }
            }
          }
          if (this.itemSet.options.cluster) {
            _forEachInstanceProperty(availableUtils).call(availableUtils, this.items, function(item) {
              if (item.cluster && item.displayed) {
                item.hide();
              }
            });
          }
          if (this.shouldBailStackItems) {
            this.itemSet.body.emitter.emit("destroyTimeline");
          }
          this.stackDirty = false;
        }
      }
      /**
       * check if group resized
       * @param {boolean} resized
       * @param {number} height
       * @return {boolean} did resize
       */
    }, {
      key: "_didResize",
      value: function _didResize(resized, height) {
        resized = availableUtils.updateProperty(this, "height", height) || resized;
        var labelWidth = this.dom.inner.clientWidth;
        var labelHeight = this.dom.inner.clientHeight;
        resized = availableUtils.updateProperty(this.props.label, "width", labelWidth) || resized;
        resized = availableUtils.updateProperty(this.props.label, "height", labelHeight) || resized;
        return resized;
      }
      /**
       * apply group height
       * @param {number} height
       */
    }, {
      key: "_applyGroupHeight",
      value: function _applyGroupHeight(height) {
        this.dom.background.style.height = "".concat(height, "px");
        this.dom.foreground.style.height = "".concat(height, "px");
        this.dom.label.style.height = "".concat(height, "px");
      }
      /**
       * update vertical position of items after they are re-stacked and the height of the group is calculated
       * @param {number} margin
       */
    }, {
      key: "_updateItemsVerticalPosition",
      value: function _updateItemsVerticalPosition(margin) {
        for (var i2 = 0, ii = this.visibleItems.length; i2 < ii; i2++) {
          var item = this.visibleItems[i2];
          item.repositionY(margin);
          if (!this.isVisible && this.groupId != ReservedGroupIds$1.BACKGROUND) {
            if (item.displayed)
              item.hide();
          }
        }
      }
      /**
       * Repaint this group
       * @param {{start: number, end: number}} range
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
       * @param {boolean} [forceRestack=false]  Force restacking of all items
       * @param {boolean} [returnQueue=false]  return the queue or if the group resized
       * @return {boolean} Returns true if the group is resized or the redraw queue if returnQueue=true
       */
    }, {
      key: "redraw",
      value: function redraw(range, margin, forceRestack, returnQueue) {
        var _this3 = this, _context17, _context18, _context21, _context23, _context27;
        var resized = false;
        var lastIsVisible = this.isVisible;
        var height;
        var queue = [
          function() {
            forceRestack = _this3._didMarkerHeightChange.call(_this3) || forceRestack;
          },
          // recalculate the height of the subgroups
          _bindInstanceProperty$1(_context17 = this._updateSubGroupHeights).call(_context17, this, margin),
          // calculate actual size and position
          _bindInstanceProperty$1(_context18 = this._calculateGroupSizeAndPosition).call(_context18, this),
          function() {
            var _context19;
            _this3.isVisible = _bindInstanceProperty$1(_context19 = _this3._isGroupVisible).call(_context19, _this3)(range, margin);
          },
          function() {
            var _context20;
            _bindInstanceProperty$1(_context20 = _this3._redrawItems).call(_context20, _this3)(forceRestack, lastIsVisible, margin, range);
          },
          // update subgroups
          _bindInstanceProperty$1(_context21 = this._updateSubgroupsSizes).call(_context21, this),
          function() {
            var _context22;
            height = _bindInstanceProperty$1(_context22 = _this3._calculateHeight).call(_context22, _this3)(margin);
          },
          // calculate actual size and position again
          _bindInstanceProperty$1(_context23 = this._calculateGroupSizeAndPosition).call(_context23, this),
          function() {
            var _context24;
            resized = _bindInstanceProperty$1(_context24 = _this3._didResize).call(_context24, _this3)(resized, height);
          },
          function() {
            var _context25;
            _bindInstanceProperty$1(_context25 = _this3._applyGroupHeight).call(_context25, _this3)(height);
          },
          function() {
            var _context26;
            _bindInstanceProperty$1(_context26 = _this3._updateItemsVerticalPosition).call(_context26, _this3)(margin);
          },
          _bindInstanceProperty$1(_context27 = function _context272() {
            if (!_this3.isVisible && _this3.height) {
              resized = false;
            }
            return resized;
          }).call(_context27, this)
        ];
        if (returnQueue) {
          return queue;
        } else {
          var result;
          _forEachInstanceProperty(queue).call(queue, function(fn) {
            result = fn();
          });
          return result;
        }
      }
      /**
       * recalculate the height of the subgroups
       *
       * @param {{item: timeline.Item}} margin
       * @private
       */
    }, {
      key: "_updateSubGroupHeights",
      value: function _updateSubGroupHeights(margin) {
        var _this4 = this;
        if (_Object$keys(this.subgroups).length > 0) {
          var me = this;
          this._resetSubgroups();
          _forEachInstanceProperty(availableUtils).call(availableUtils, this.visibleItems, function(item) {
            if (item.data.subgroup !== void 0) {
              me.subgroups[item.data.subgroup].height = Math.max(me.subgroups[item.data.subgroup].height, item.height + margin.item.vertical);
              me.subgroups[item.data.subgroup].visible = typeof _this4.subgroupVisibility[item.data.subgroup] === "undefined" ? true : Boolean(_this4.subgroupVisibility[item.data.subgroup]);
            }
          });
        }
      }
      /**
       * check if group is visible
       *
       * @param {timeline.Range} range
       * @param {{axis: timeline.DataAxis}} margin
       * @returns {boolean} is visible
       * @private
       */
    }, {
      key: "_isGroupVisible",
      value: function _isGroupVisible(range, margin) {
        return this.top <= range.body.domProps.centerContainer.height - range.body.domProps.scrollTop + margin.axis && this.top + this.height + margin.axis >= -range.body.domProps.scrollTop;
      }
      /**
       * recalculate the height of the group
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
       * @returns {number} Returns the height
       * @private
       */
    }, {
      key: "_calculateHeight",
      value: function _calculateHeight(margin) {
        var height;
        var items;
        if (this.heightMode === "fixed") {
          items = availableUtils.toArray(this.items);
        } else {
          items = this.visibleItems;
        }
        if (items.length > 0) {
          var min2 = items[0].top;
          var max2 = items[0].top + items[0].height;
          _forEachInstanceProperty(availableUtils).call(availableUtils, items, function(item) {
            min2 = Math.min(min2, item.top);
            max2 = Math.max(max2, item.top + item.height);
          });
          if (min2 > margin.axis) {
            var offset = min2 - margin.axis;
            max2 -= offset;
            _forEachInstanceProperty(availableUtils).call(availableUtils, items, function(item) {
              item.top -= offset;
            });
          }
          height = Math.ceil(max2 + margin.item.vertical / 2);
          if (this.heightMode !== "fitItems") {
            height = Math.max(height, this.props.label.height);
          }
        } else {
          height = this.props.label.height;
        }
        return height;
      }
      /**
       * Show this group: attach to the DOM
       */
    }, {
      key: "show",
      value: function show() {
        if (!this.dom.label.parentNode) {
          this.itemSet.dom.labelSet.appendChild(this.dom.label);
        }
        if (!this.dom.foreground.parentNode) {
          this.itemSet.dom.foreground.appendChild(this.dom.foreground);
        }
        if (!this.dom.background.parentNode) {
          this.itemSet.dom.background.appendChild(this.dom.background);
        }
        if (!this.dom.axis.parentNode) {
          this.itemSet.dom.axis.appendChild(this.dom.axis);
        }
      }
      /**
       * Hide this group: remove from the DOM
       */
    }, {
      key: "hide",
      value: function hide() {
        var label = this.dom.label;
        if (label.parentNode) {
          label.parentNode.removeChild(label);
        }
        var foreground = this.dom.foreground;
        if (foreground.parentNode) {
          foreground.parentNode.removeChild(foreground);
        }
        var background = this.dom.background;
        if (background.parentNode) {
          background.parentNode.removeChild(background);
        }
        var axis = this.dom.axis;
        if (axis.parentNode) {
          axis.parentNode.removeChild(axis);
        }
      }
      /**
       * Add an item to the group
       * @param {Item} item
       */
    }, {
      key: "add",
      value: function add(item) {
        var _context28;
        this.items[item.id] = item;
        item.setParent(this);
        this.stackDirty = true;
        if (item.data.subgroup !== void 0) {
          this._addToSubgroup(item);
          this.orderSubgroups();
        }
        if (!_includesInstanceProperty(_context28 = this.visibleItems).call(_context28, item)) {
          var range = this.itemSet.body.range;
          this._checkIfVisible(item, this.visibleItems, range);
        }
      }
      /**
       * add item to subgroup
       * @param {object} item
       * @param {string} subgroupId
       */
    }, {
      key: "_addToSubgroup",
      value: function _addToSubgroup(item) {
        var subgroupId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : item.data.subgroup;
        if (subgroupId != void 0 && this.subgroups[subgroupId] === void 0) {
          this.subgroups[subgroupId] = {
            height: 0,
            top: 0,
            start: item.data.start,
            end: item.data.end || item.data.start,
            visible: false,
            index: this.subgroupIndex,
            items: [],
            stack: this.subgroupStackAll || this.subgroupStack[subgroupId] || false
          };
          this.subgroupIndex++;
        }
        if (new Date(item.data.start) < new Date(this.subgroups[subgroupId].start)) {
          this.subgroups[subgroupId].start = item.data.start;
        }
        var itemEnd = item.data.end || item.data.start;
        if (new Date(itemEnd) > new Date(this.subgroups[subgroupId].end)) {
          this.subgroups[subgroupId].end = itemEnd;
        }
        this.subgroups[subgroupId].items.push(item);
      }
      /**
       * update subgroup sizes
       */
    }, {
      key: "_updateSubgroupsSizes",
      value: function _updateSubgroupsSizes() {
        var me = this;
        if (me.subgroups) {
          var _loop3 = function _loop32() {
            var _context29;
            var initialEnd = me.subgroups[subgroup].items[0].data.end || me.subgroups[subgroup].items[0].data.start;
            var newStart = me.subgroups[subgroup].items[0].data.start;
            var newEnd = initialEnd - 1;
            _forEachInstanceProperty(_context29 = me.subgroups[subgroup].items).call(_context29, function(item) {
              if (new Date(item.data.start) < new Date(newStart)) {
                newStart = item.data.start;
              }
              var itemEnd = item.data.end || item.data.start;
              if (new Date(itemEnd) > new Date(newEnd)) {
                newEnd = itemEnd;
              }
            });
            me.subgroups[subgroup].start = newStart;
            me.subgroups[subgroup].end = new Date(newEnd - 1);
          };
          for (var subgroup in me.subgroups) {
            _loop3();
          }
        }
      }
      /**
       * order subgroups
       */
    }, {
      key: "orderSubgroups",
      value: function orderSubgroups() {
        if (this.subgroupOrderer !== void 0) {
          var sortArray = [];
          if (typeof this.subgroupOrderer == "string") {
            for (var subgroup in this.subgroups) {
              sortArray.push({
                subgroup,
                sortField: this.subgroups[subgroup].items[0].data[this.subgroupOrderer]
              });
            }
            _sortInstanceProperty(sortArray).call(sortArray, function(a, b) {
              return a.sortField - b.sortField;
            });
          } else if (typeof this.subgroupOrderer == "function") {
            for (var _subgroup in this.subgroups) {
              sortArray.push(this.subgroups[_subgroup].items[0].data);
            }
            _sortInstanceProperty(sortArray).call(sortArray, this.subgroupOrderer);
          }
          if (sortArray.length > 0) {
            for (var i2 = 0; i2 < sortArray.length; i2++) {
              this.subgroups[sortArray[i2].subgroup].index = i2;
            }
          }
        }
      }
      /**
       * add item to subgroup
       */
    }, {
      key: "_resetSubgroups",
      value: function _resetSubgroups() {
        for (var subgroup in this.subgroups) {
          if (this.subgroups.hasOwnProperty(subgroup)) {
            this.subgroups[subgroup].visible = false;
            this.subgroups[subgroup].height = 0;
          }
        }
      }
      /**
       * Remove an item from the group
       * @param {Item} item
       */
    }, {
      key: "remove",
      value: function remove(item) {
        var _context30, _context31;
        delete this.items[item.id];
        item.setParent(null);
        this.stackDirty = true;
        var index = _indexOfInstanceProperty(_context30 = this.visibleItems).call(_context30, item);
        if (index != -1)
          _spliceInstanceProperty(_context31 = this.visibleItems).call(_context31, index, 1);
        if (item.data.subgroup !== void 0) {
          this._removeFromSubgroup(item);
          this.orderSubgroups();
        }
      }
      /**
       * remove item from subgroup
       * @param {object} item
       * @param {string} subgroupId
       */
    }, {
      key: "_removeFromSubgroup",
      value: function _removeFromSubgroup(item) {
        var subgroupId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : item.data.subgroup;
        if (subgroupId != void 0) {
          var subgroup = this.subgroups[subgroupId];
          if (subgroup) {
            var _context32;
            var itemIndex = _indexOfInstanceProperty(_context32 = subgroup.items).call(_context32, item);
            if (itemIndex >= 0) {
              var _context33;
              _spliceInstanceProperty(_context33 = subgroup.items).call(_context33, itemIndex, 1);
              if (!subgroup.items.length) {
                delete this.subgroups[subgroupId];
              } else {
                this._updateSubgroupsSizes();
              }
            }
          }
        }
      }
      /**
       * Remove an item from the corresponding DataSet
       * @param {Item} item
       */
    }, {
      key: "removeFromDataSet",
      value: function removeFromDataSet(item) {
        this.itemSet.removeItem(item.id);
      }
      /**
       * Reorder the items
       */
    }, {
      key: "order",
      value: function order() {
        var array2 = availableUtils.toArray(this.items);
        var startArray = [];
        var endArray = [];
        for (var i2 = 0; i2 < array2.length; i2++) {
          if (array2[i2].data.end !== void 0) {
            endArray.push(array2[i2]);
          }
          startArray.push(array2[i2]);
        }
        this.orderedItems = {
          byStart: startArray,
          byEnd: endArray
        };
        orderByStart(this.orderedItems.byStart);
        orderByEnd(this.orderedItems.byEnd);
      }
      /**
       * Update the visible items
       * @param {{byStart: Item[], byEnd: Item[]}} orderedItems   All items ordered by start date and by end date
       * @param {Item[]} oldVisibleItems                          The previously visible items.
       * @param {{start: number, end: number}} range              Visible range
       * @return {Item[]} visibleItems                            The new visible items.
       * @private
       */
    }, {
      key: "_updateItemsInRange",
      value: function _updateItemsInRange(orderedItems, oldVisibleItems, range) {
        var visibleItems = [];
        var visibleItemsLookup = {};
        if (!this.isVisible && this.groupId != ReservedGroupIds$1.BACKGROUND) {
          for (var i2 = 0; i2 < oldVisibleItems.length; i2++) {
            var item = oldVisibleItems[i2];
            if (item.displayed)
              item.hide();
          }
          return visibleItems;
        }
        var interval = (range.end - range.start) / 4;
        var lowerBound = range.start - interval;
        var upperBound = range.end + interval;
        var startSearchFunction = function startSearchFunction2(value) {
          if (value < lowerBound) {
            return -1;
          } else if (value <= upperBound) {
            return 0;
          } else {
            return 1;
          }
        };
        var endSearchFunction = function endSearchFunction2(data2) {
          var start = data2.start, end = data2.end;
          if (end < lowerBound) {
            return -1;
          } else if (start <= upperBound) {
            return 0;
          } else {
            return 1;
          }
        };
        if (oldVisibleItems.length > 0) {
          for (var _i = 0; _i < oldVisibleItems.length; _i++) {
            this._checkIfVisibleWithReference(oldVisibleItems[_i], visibleItems, visibleItemsLookup, range);
          }
        }
        var initialPosByStart = availableUtils.binarySearchCustom(orderedItems.byStart, startSearchFunction, "data", "start");
        this._traceVisible(initialPosByStart, orderedItems.byStart, visibleItems, visibleItemsLookup, function(item2) {
          return item2.data.start < lowerBound || item2.data.start > upperBound;
        });
        if (this.checkRangedItems == true) {
          this.checkRangedItems = false;
          for (var _i2 = 0; _i2 < orderedItems.byEnd.length; _i2++) {
            this._checkIfVisibleWithReference(orderedItems.byEnd[_i2], visibleItems, visibleItemsLookup, range);
          }
        } else {
          var initialPosByEnd = availableUtils.binarySearchCustom(orderedItems.byEnd, endSearchFunction, "data");
          this._traceVisible(initialPosByEnd, orderedItems.byEnd, visibleItems, visibleItemsLookup, function(item2) {
            return item2.data.end < lowerBound || item2.data.start > upperBound;
          });
        }
        var redrawQueue = {};
        var redrawQueueLength = 0;
        for (var _i3 = 0; _i3 < visibleItems.length; _i3++) {
          var _item = visibleItems[_i3];
          if (!_item.displayed) {
            var returnQueue = true;
            redrawQueue[_i3] = _item.redraw(returnQueue);
            redrawQueueLength = redrawQueue[_i3].length;
          }
        }
        var needRedraw = redrawQueueLength > 0;
        if (needRedraw) {
          var _loop4 = function _loop42(j2) {
            _forEachInstanceProperty(availableUtils).call(availableUtils, redrawQueue, function(fns) {
              fns[j2]();
            });
          };
          for (var j = 0; j < redrawQueueLength; j++) {
            _loop4(j);
          }
        }
        for (var _i4 = 0; _i4 < visibleItems.length; _i4++) {
          visibleItems[_i4].repositionX();
        }
        return visibleItems;
      }
      /**
       * trace visible items in group
       * @param {number} initialPos
       * @param {array} items
       * @param {aray} visibleItems
       * @param {object} visibleItemsLookup
       * @param {function} breakCondition
       */
    }, {
      key: "_traceVisible",
      value: function _traceVisible(initialPos, items, visibleItems, visibleItemsLookup, breakCondition) {
        if (initialPos != -1) {
          for (var i2 = initialPos; i2 >= 0; i2--) {
            var item = items[i2];
            if (breakCondition(item)) {
              break;
            } else {
              if (!(item.isCluster && !item.hasItems()) && !item.cluster) {
                if (visibleItemsLookup[item.id] === void 0) {
                  visibleItemsLookup[item.id] = true;
                  visibleItems.push(item);
                }
              }
            }
          }
          for (var _i5 = initialPos + 1; _i5 < items.length; _i5++) {
            var _item2 = items[_i5];
            if (breakCondition(_item2)) {
              break;
            } else {
              if (!(_item2.isCluster && !_item2.hasItems()) && !_item2.cluster) {
                if (visibleItemsLookup[_item2.id] === void 0) {
                  visibleItemsLookup[_item2.id] = true;
                  visibleItems.push(_item2);
                }
              }
            }
          }
        }
      }
      /**
       * this function is very similar to the _checkIfInvisible() but it does not
       * return booleans, hides the item if it should not be seen and always adds to
       * the visibleItems.
       * this one is for brute forcing and hiding.
       *
       * @param {Item} item
       * @param {Array} visibleItems
       * @param {{start:number, end:number}} range
       * @private
       */
    }, {
      key: "_checkIfVisible",
      value: function _checkIfVisible(item, visibleItems, range) {
        if (item.isVisible(range)) {
          if (!item.displayed)
            item.show();
          item.repositionX();
          visibleItems.push(item);
        } else {
          if (item.displayed)
            item.hide();
        }
      }
      /**
       * this function is very similar to the _checkIfInvisible() but it does not
       * return booleans, hides the item if it should not be seen and always adds to
       * the visibleItems.
       * this one is for brute forcing and hiding.
       *
       * @param {Item} item
       * @param {Array.<timeline.Item>} visibleItems
       * @param {Object<number, boolean>} visibleItemsLookup
       * @param {{start:number, end:number}} range
       * @private
       */
    }, {
      key: "_checkIfVisibleWithReference",
      value: function _checkIfVisibleWithReference(item, visibleItems, visibleItemsLookup, range) {
        if (item.isVisible(range)) {
          if (visibleItemsLookup[item.id] === void 0) {
            visibleItemsLookup[item.id] = true;
            visibleItems.push(item);
          }
        } else {
          if (item.displayed)
            item.hide();
        }
      }
      /**
       * Update the visible items
       * @param {array} orderedClusters 
       * @param {array} oldVisibleClusters                         
       * @param {{start: number, end: number}} range             
       * @return {Item[]} visibleItems                            
       * @private
       */
    }, {
      key: "_updateClustersInRange",
      value: function _updateClustersInRange(orderedClusters, oldVisibleClusters, range) {
        var visibleClusters = [];
        var visibleClustersLookup = {};
        if (oldVisibleClusters.length > 0) {
          for (var i2 = 0; i2 < oldVisibleClusters.length; i2++) {
            this._checkIfVisibleWithReference(oldVisibleClusters[i2], visibleClusters, visibleClustersLookup, range);
          }
        }
        for (var _i6 = 0; _i6 < orderedClusters.byStart.length; _i6++) {
          this._checkIfVisibleWithReference(orderedClusters.byStart[_i6], visibleClusters, visibleClustersLookup, range);
        }
        for (var _i7 = 0; _i7 < orderedClusters.byEnd.length; _i7++) {
          this._checkIfVisibleWithReference(orderedClusters.byEnd[_i7], visibleClusters, visibleClustersLookup, range);
        }
        var redrawQueue = {};
        var redrawQueueLength = 0;
        for (var _i8 = 0; _i8 < visibleClusters.length; _i8++) {
          var item = visibleClusters[_i8];
          if (!item.displayed) {
            var returnQueue = true;
            redrawQueue[_i8] = item.redraw(returnQueue);
            redrawQueueLength = redrawQueue[_i8].length;
          }
        }
        var needRedraw = redrawQueueLength > 0;
        if (needRedraw) {
          for (var j = 0; j < redrawQueueLength; j++) {
            _forEachInstanceProperty(availableUtils).call(availableUtils, redrawQueue, function(fns) {
              fns[j]();
            });
          }
        }
        for (var _i9 = 0; _i9 < visibleClusters.length; _i9++) {
          visibleClusters[_i9].repositionX();
        }
        return visibleClusters;
      }
      /**
       * change item subgroup
       * @param {object} item
       * @param {string} oldSubgroup
       * @param {string} newSubgroup
       */
    }, {
      key: "changeSubgroup",
      value: function changeSubgroup(item, oldSubgroup, newSubgroup) {
        this._removeFromSubgroup(item, oldSubgroup);
        this._addToSubgroup(item, newSubgroup);
        this.orderSubgroups();
      }
      /**
       * Call this method before you lose the last reference to an instance of this.
       * It will remove listeners etc.
       */
    }, {
      key: "dispose",
      value: function dispose() {
        this.hide();
        var disposeCallback;
        while (disposeCallback = this._disposeCallbacks.pop()) {
          disposeCallback();
        }
      }
    }]);
    return Group2;
  }();
  function _createSuper$8(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$8() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var BackgroundGroup = /* @__PURE__ */ function(_Group) {
    _inherits(BackgroundGroup2, _Group);
    var _super = _createSuper$8(BackgroundGroup2);
    function BackgroundGroup2(groupId, data2, itemSet) {
      var _this;
      _classCallCheck(this, BackgroundGroup2);
      _this = _super.call(this, groupId, data2, itemSet);
      _this.width = 0;
      _this.height = 0;
      _this.top = 0;
      _this.left = 0;
      return _this;
    }
    _createClass(BackgroundGroup2, [{
      key: "redraw",
      value: function redraw(range, margin, forceRestack) {
        var resized = false;
        this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);
        this.width = this.dom.background.offsetWidth;
        this.dom.background.style.height = "0";
        for (var i2 = 0, ii = this.visibleItems.length; i2 < ii; i2++) {
          var item = this.visibleItems[i2];
          item.repositionY(margin);
        }
        return resized;
      }
      /**
       * Show this group: attach to the DOM
       */
    }, {
      key: "show",
      value: function show() {
        if (!this.dom.background.parentNode) {
          this.itemSet.dom.background.appendChild(this.dom.background);
        }
      }
    }]);
    return BackgroundGroup2;
  }(Group);
  var css_248z$5 = '\n.vis-item {\n  position: absolute;\n  color: #1A1A1A;\n  border-color: #97B0F8;\n  border-width: 1px;\n  background-color: #D5DDF6;\n  display: inline-block;\n  z-index: 1;\n  /*overflow: hidden;*/\n}\n\n.vis-item.vis-selected {\n  border-color: #FFC200;\n  background-color: #FFF785;\n\n  /* z-index must be higher than the z-index of custom time bar and current time bar */\n  z-index: 2;\n}\n\n.vis-editable.vis-selected {\n  cursor: move;\n}\n\n.vis-item.vis-point.vis-selected {\n  background-color: #FFF785;\n}\n\n.vis-item.vis-box {\n  text-align: center;\n  border-style: solid;\n  border-radius: 2px;\n}\n\n.vis-item.vis-point {\n  background: none;\n}\n\n.vis-item.vis-dot {\n  position: absolute;\n  padding: 0;\n  border-width: 4px;\n  border-style: solid;\n  border-radius: 4px;\n}\n\n.vis-item.vis-range {\n  border-style: solid;\n  border-radius: 2px;\n  box-sizing: border-box;\n}\n\n.vis-item.vis-background {\n  border: none;\n  background-color: rgba(213, 221, 246, 0.4);\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\n.vis-item .vis-item-overflow {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  margin: 0;\n  overflow: hidden;\n}\n\n.vis-item-visible-frame {\n  white-space: nowrap;\n}\n\n.vis-item.vis-range .vis-item-content {\n  position: relative;\n  display: inline-block;\n}\n\n.vis-item.vis-background .vis-item-content {\n  position: absolute;\n  display: inline-block;\n}\n\n.vis-item.vis-line {\n  padding: 0;\n  position: absolute;\n  width: 0;\n  border-left-width: 1px;\n  border-left-style: solid;\n}\n\n.vis-item .vis-item-content {\n  white-space: nowrap;\n  box-sizing: border-box;\n  padding: 5px;\n}\n\n.vis-item .vis-onUpdateTime-tooltip {\n  position: absolute;\n  background: #4f81bd;\n  color: white;\n  width: 200px;\n  text-align: center;\n  white-space: nowrap;\n  padding: 5px;\n  border-radius: 1px;\n  transition: 0.4s;\n  -o-transition: 0.4s;\n  -moz-transition: 0.4s;\n  -webkit-transition: 0.4s;\n}\n\n.vis-item .vis-delete, .vis-item .vis-delete-rtl {\n  position: absolute;\n  top: 0px;\n  width: 24px;\n  height: 24px;\n  box-sizing: border-box;\n  padding: 0px 5px;\n  cursor: pointer;\n\n  -webkit-transition: background 0.2s linear;\n  -moz-transition: background 0.2s linear;\n  -ms-transition: background 0.2s linear;\n  -o-transition: background 0.2s linear;\n  transition: background 0.2s linear;\n}\n\n.vis-item .vis-delete {\n  right: -24px;\n}\n\n.vis-item .vis-delete-rtl {\n  left: -24px;\n}\n\n.vis-item .vis-delete:after, .vis-item .vis-delete-rtl:after {\n  content: "\\00D7"; /* MULTIPLICATION SIGN */\n  color: red;\n  font-family: arial, sans-serif;\n  font-size: 22px;\n  font-weight: bold;\n\n  -webkit-transition: color 0.2s linear;\n  -moz-transition: color 0.2s linear;\n  -ms-transition: color 0.2s linear;\n  -o-transition: color 0.2s linear;\n  transition: color 0.2s linear;\n}\n\n.vis-item .vis-delete:hover, .vis-item .vis-delete-rtl:hover {\n  background: red;\n}\n\n.vis-item .vis-delete:hover:after, .vis-item .vis-delete-rtl:hover:after {\n  color: white;\n}\n\n.vis-item .vis-drag-center {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0px;\n  cursor: move;\n}\n\n.vis-item.vis-range .vis-drag-left {\n  position: absolute;\n  width: 24px;\n  max-width: 20%;\n  min-width: 2px;\n  height: 100%;\n  top: 0;\n  left: -4px;\n\n  cursor: w-resize;\n}\n\n.vis-item.vis-range .vis-drag-right {\n  position: absolute;\n  width: 24px;\n  max-width: 20%;\n  min-width: 2px;\n  height: 100%;\n  top: 0;\n  right: -4px;\n\n  cursor: e-resize;\n}\n\n.vis-range.vis-item.vis-readonly .vis-drag-left,\n.vis-range.vis-item.vis-readonly .vis-drag-right {\n  cursor: auto;\n}\n\n.vis-item.vis-cluster {\n  vertical-align: center;\n  text-align: center;\n  border-style: solid;\n  border-radius: 2px;\n}\n\n.vis-item.vis-cluster-line {\n  padding: 0;\n  position: absolute;\n  width: 0;\n  border-left-width: 1px;\n  border-left-style: solid;\n}\n\n.vis-item.vis-cluster-dot {\n  position: absolute;\n  padding: 0;\n  border-width: 4px;\n  border-style: solid;\n  border-radius: 4px;\n}';
  styleInject(css_248z$5);
  function _createForOfIteratorHelper$4(o, allowArrayLike) {
    var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
    if (!it2) {
      if (_Array$isArray(o) || (it2 = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it2)
          o = it2;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n() {
          if (i2 >= o.length)
            return { done: true };
          return { done: false, value: o[i2++] };
        }, e: function e(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it2 = it2.call(o);
    }, n: function n() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it2.return != null)
          it2.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray$4(o, minLen) {
    var _context8;
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray$4(o, minLen);
    var n = _sliceInstanceProperty(_context8 = Object.prototype.toString.call(o)).call(_context8, 8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from$1(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray$4(o, minLen);
  }
  function _arrayLikeToArray$4(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  var Item = /* @__PURE__ */ function() {
    function Item2(data2, conversion, options) {
      var _context, _this = this;
      _classCallCheck(this, Item2);
      this.id = null;
      this.parent = null;
      this.data = data2;
      this.dom = null;
      this.conversion = conversion || {};
      this.defaultOptions = {
        locales,
        locale: "en"
      };
      this.options = availableUtils.extend({}, this.defaultOptions, options);
      this.options.locales = availableUtils.extend({}, locales, this.options.locales);
      var defaultLocales = this.defaultOptions.locales[this.defaultOptions.locale];
      _forEachInstanceProperty(_context = _Object$keys(this.options.locales)).call(_context, function(locale) {
        _this.options.locales[locale] = availableUtils.extend({}, defaultLocales, _this.options.locales[locale]);
      });
      this.selected = false;
      this.displayed = false;
      this.groupShowing = true;
      this.selectable = options && options.selectable || false;
      this.dirty = true;
      this.top = null;
      this.right = null;
      this.left = null;
      this.width = null;
      this.height = null;
      this.setSelectability(data2);
      this.editable = null;
      this._updateEditStatus();
    }
    _createClass(Item2, [{
      key: "select",
      value: function select() {
        if (this.selectable) {
          this.selected = true;
          this.dirty = true;
          if (this.displayed)
            this.redraw();
        }
      }
      /**
       * Unselect current item
       */
    }, {
      key: "unselect",
      value: function unselect() {
        this.selected = false;
        this.dirty = true;
        if (this.displayed)
          this.redraw();
      }
      /**
       * Set data for the item. Existing data will be updated. The id should not
       * be changed. When the item is displayed, it will be redrawn immediately.
       * @param {Object} data
       */
    }, {
      key: "setData",
      value: function setData(data2) {
        var groupChanged = data2.group != void 0 && this.data.group != data2.group;
        if (groupChanged && this.parent != null) {
          this.parent.itemSet._moveToGroup(this, data2.group);
        }
        this.setSelectability(data2);
        if (this.parent) {
          this.parent.stackDirty = true;
        }
        var subGroupChanged = data2.subgroup != void 0 && this.data.subgroup != data2.subgroup;
        if (subGroupChanged && this.parent != null) {
          this.parent.changeSubgroup(this, this.data.subgroup, data2.subgroup);
        }
        this.data = data2;
        this._updateEditStatus();
        this.dirty = true;
        if (this.displayed)
          this.redraw();
      }
      /**
       * Set whether the item can be selected.
       * Can only be set/unset if the timeline's `selectable` configuration option is `true`.
       * @param {Object} data `data` from `constructor` and `setData`
       */
    }, {
      key: "setSelectability",
      value: function setSelectability(data2) {
        if (data2) {
          this.selectable = typeof data2.selectable === "undefined" ? true : Boolean(data2.selectable);
        }
      }
      /**
       * Set a parent for the item
       * @param {Group} parent
       */
    }, {
      key: "setParent",
      value: function setParent(parent2) {
        if (this.displayed) {
          this.hide();
          this.parent = parent2;
          if (this.parent) {
            this.show();
          }
        } else {
          this.parent = parent2;
        }
      }
      /**
       * Check whether this item is visible inside given range
       * @param {timeline.Range} range with a timestamp for start and end
       * @returns {boolean} True if visible
       */
    }, {
      key: "isVisible",
      value: function isVisible(range) {
        return false;
      }
      /**
       * Show the Item in the DOM (when not already visible)
       * @return {Boolean} changed
       */
    }, {
      key: "show",
      value: function show() {
        return false;
      }
      /**
       * Hide the Item from the DOM (when visible)
       * @return {Boolean} changed
       */
    }, {
      key: "hide",
      value: function hide() {
        return false;
      }
      /**
       * Repaint the item
       */
    }, {
      key: "redraw",
      value: function redraw() {
      }
      /**
       * Reposition the Item horizontally
       */
    }, {
      key: "repositionX",
      value: function repositionX() {
      }
      /**
       * Reposition the Item vertically
       */
    }, {
      key: "repositionY",
      value: function repositionY() {
      }
      /**
       * Repaint a drag area on the center of the item when the item is selected
       * @protected
       */
    }, {
      key: "_repaintDragCenter",
      value: function _repaintDragCenter() {
        if (this.selected && this.editable.updateTime && !this.dom.dragCenter) {
          var _context2, _context3;
          var me = this;
          var dragCenter = document.createElement("div");
          dragCenter.className = "vis-drag-center";
          dragCenter.dragCenterItem = this;
          this.hammerDragCenter = new Hammer(dragCenter);
          this.hammerDragCenter.on("tap", function(event2) {
            me.parent.itemSet.body.emitter.emit("click", {
              event: event2,
              item: me.id
            });
          });
          this.hammerDragCenter.on("doubletap", function(event2) {
            event2.stopPropagation();
            me.parent.itemSet._onUpdateItem(me);
            me.parent.itemSet.body.emitter.emit("doubleClick", {
              event: event2,
              item: me.id
            });
          });
          this.hammerDragCenter.on("panstart", function(event2) {
            event2.stopPropagation();
            me.parent.itemSet._onDragStart(event2);
          });
          this.hammerDragCenter.on("panmove", _bindInstanceProperty$1(_context2 = me.parent.itemSet._onDrag).call(_context2, me.parent.itemSet));
          this.hammerDragCenter.on("panend", _bindInstanceProperty$1(_context3 = me.parent.itemSet._onDragEnd).call(_context3, me.parent.itemSet));
          this.hammerDragCenter.get("press").set({
            time: 1e4
          });
          if (this.dom.box) {
            if (this.dom.dragLeft) {
              this.dom.box.insertBefore(dragCenter, this.dom.dragLeft);
            } else {
              this.dom.box.appendChild(dragCenter);
            }
          } else if (this.dom.point) {
            this.dom.point.appendChild(dragCenter);
          }
          this.dom.dragCenter = dragCenter;
        } else if (!this.selected && this.dom.dragCenter) {
          if (this.dom.dragCenter.parentNode) {
            this.dom.dragCenter.parentNode.removeChild(this.dom.dragCenter);
          }
          this.dom.dragCenter = null;
          if (this.hammerDragCenter) {
            this.hammerDragCenter.destroy();
            this.hammerDragCenter = null;
          }
        }
      }
      /**
       * Repaint a delete button on the top right of the item when the item is selected
       * @param {HTMLElement} anchor
       * @protected
       */
    }, {
      key: "_repaintDeleteButton",
      value: function _repaintDeleteButton(anchor) {
        var editable = (this.options.editable.overrideItems || this.editable == null) && this.options.editable.remove || !this.options.editable.overrideItems && this.editable != null && this.editable.remove;
        if (this.selected && editable && !this.dom.deleteButton) {
          var me = this;
          var deleteButton = document.createElement("div");
          if (this.options.rtl) {
            deleteButton.className = "vis-delete-rtl";
          } else {
            deleteButton.className = "vis-delete";
          }
          var optionsLocale = this.options.locales[this.options.locale];
          if (!optionsLocale) {
            if (!this.warned) {
              console.warn("WARNING: options.locales['".concat(this.options.locale, "'] not found. See https://visjs.github.io/vis-timeline/docs/timeline/#Localization"));
              this.warned = true;
            }
            optionsLocale = this.options.locales["en"];
          }
          deleteButton.title = optionsLocale.deleteSelected;
          this.hammerDeleteButton = new Hammer(deleteButton).on("tap", function(event2) {
            event2.stopPropagation();
            me.parent.removeFromDataSet(me);
          });
          anchor.appendChild(deleteButton);
          this.dom.deleteButton = deleteButton;
        } else if ((!this.selected || !editable) && this.dom.deleteButton) {
          if (this.dom.deleteButton.parentNode) {
            this.dom.deleteButton.parentNode.removeChild(this.dom.deleteButton);
          }
          this.dom.deleteButton = null;
          if (this.hammerDeleteButton) {
            this.hammerDeleteButton.destroy();
            this.hammerDeleteButton = null;
          }
        }
      }
      /**
       * Repaint a onChange tooltip on the top right of the item when the item is selected
       * @param {HTMLElement} anchor
       * @protected
       */
    }, {
      key: "_repaintOnItemUpdateTimeTooltip",
      value: function _repaintOnItemUpdateTimeTooltip(anchor) {
        if (!this.options.tooltipOnItemUpdateTime)
          return;
        var editable = (this.options.editable.updateTime || this.data.editable === true) && this.data.editable !== false;
        if (this.selected && editable && !this.dom.onItemUpdateTimeTooltip) {
          var onItemUpdateTimeTooltip = document.createElement("div");
          onItemUpdateTimeTooltip.className = "vis-onUpdateTime-tooltip";
          anchor.appendChild(onItemUpdateTimeTooltip);
          this.dom.onItemUpdateTimeTooltip = onItemUpdateTimeTooltip;
        } else if (!this.selected && this.dom.onItemUpdateTimeTooltip) {
          if (this.dom.onItemUpdateTimeTooltip.parentNode) {
            this.dom.onItemUpdateTimeTooltip.parentNode.removeChild(this.dom.onItemUpdateTimeTooltip);
          }
          this.dom.onItemUpdateTimeTooltip = null;
        }
        if (this.dom.onItemUpdateTimeTooltip) {
          this.dom.onItemUpdateTimeTooltip.style.visibility = this.parent.itemSet.touchParams.itemIsDragging ? "visible" : "hidden";
          this.dom.onItemUpdateTimeTooltip.style.transform = "translateX(-50%)";
          this.dom.onItemUpdateTimeTooltip.style.left = "50%";
          var tooltipOffset = 50;
          var scrollTop = this.parent.itemSet.body.domProps.scrollTop;
          var itemDistanceFromTop;
          if (this.options.orientation.item == "top") {
            itemDistanceFromTop = this.top;
          } else {
            itemDistanceFromTop = this.parent.height - this.top - this.height;
          }
          var isCloseToTop = itemDistanceFromTop + this.parent.top - tooltipOffset < -scrollTop;
          if (isCloseToTop) {
            this.dom.onItemUpdateTimeTooltip.style.bottom = "";
            this.dom.onItemUpdateTimeTooltip.style.top = "".concat(this.height + 2, "px");
          } else {
            this.dom.onItemUpdateTimeTooltip.style.top = "";
            this.dom.onItemUpdateTimeTooltip.style.bottom = "".concat(this.height + 2, "px");
          }
          var content;
          var templateFunction;
          if (this.options.tooltipOnItemUpdateTime && this.options.tooltipOnItemUpdateTime.template) {
            var _context4;
            templateFunction = _bindInstanceProperty$1(_context4 = this.options.tooltipOnItemUpdateTime.template).call(_context4, this);
            content = templateFunction(this.data);
          } else {
            content = "start: ".concat(moment$3(this.data.start).format("MM/DD/YYYY hh:mm"));
            if (this.data.end) {
              content += "<br> end: ".concat(moment$3(this.data.end).format("MM/DD/YYYY hh:mm"));
            }
          }
          this.dom.onItemUpdateTimeTooltip.innerHTML = availableUtils.xss(content);
        }
      }
      /**
      * get item data
      * @return {object}
      * @private
      */
    }, {
      key: "_getItemData",
      value: function _getItemData() {
        return this.parent.itemSet.itemsData.get(this.id);
      }
      /**
       * Set HTML contents for the item
       * @param {Element} element   HTML element to fill with the contents
       * @private
       */
    }, {
      key: "_updateContents",
      value: function _updateContents(element) {
        var content;
        var changed;
        var templateFunction;
        var itemVisibleFrameContent;
        var visibleFrameTemplateFunction;
        var itemData = this._getItemData();
        var frameElement = this.dom.box || this.dom.point;
        var itemVisibleFrameContentElement = frameElement.getElementsByClassName("vis-item-visible-frame")[0];
        if (this.options.visibleFrameTemplate) {
          var _context5;
          visibleFrameTemplateFunction = _bindInstanceProperty$1(_context5 = this.options.visibleFrameTemplate).call(_context5, this);
          itemVisibleFrameContent = availableUtils.xss(visibleFrameTemplateFunction(itemData, itemVisibleFrameContentElement));
        } else {
          itemVisibleFrameContent = "";
        }
        if (itemVisibleFrameContentElement) {
          if (itemVisibleFrameContent instanceof Object && !(itemVisibleFrameContent instanceof Element)) {
            visibleFrameTemplateFunction(itemData, itemVisibleFrameContentElement);
          } else {
            changed = this._contentToString(this.itemVisibleFrameContent) !== this._contentToString(itemVisibleFrameContent);
            if (changed) {
              if (itemVisibleFrameContent instanceof Element) {
                itemVisibleFrameContentElement.innerHTML = "";
                itemVisibleFrameContentElement.appendChild(itemVisibleFrameContent);
              } else if (itemVisibleFrameContent != void 0) {
                itemVisibleFrameContentElement.innerHTML = availableUtils.xss(itemVisibleFrameContent);
              } else {
                if (!(this.data.type == "background" && this.data.content === void 0)) {
                  throw new Error('Property "content" missing in item '.concat(this.id));
                }
              }
              this.itemVisibleFrameContent = itemVisibleFrameContent;
            }
          }
        }
        if (this.options.template) {
          var _context6;
          templateFunction = _bindInstanceProperty$1(_context6 = this.options.template).call(_context6, this);
          content = templateFunction(itemData, element, this.data);
        } else {
          content = this.data.content;
        }
        if (content instanceof Object && !(content instanceof Element)) {
          templateFunction(itemData, element);
        } else {
          changed = this._contentToString(this.content) !== this._contentToString(content);
          if (changed) {
            if (content instanceof Element) {
              element.innerHTML = "";
              element.appendChild(content);
            } else if (content != void 0) {
              element.innerHTML = availableUtils.xss(content);
            } else {
              if (!(this.data.type == "background" && this.data.content === void 0)) {
                throw new Error('Property "content" missing in item '.concat(this.id));
              }
            }
            this.content = content;
          }
        }
      }
      /**
       * Process dataAttributes timeline option and set as data- attributes on dom.content
       * @param {Element} element   HTML element to which the attributes will be attached
       * @private
       */
    }, {
      key: "_updateDataAttributes",
      value: function _updateDataAttributes(element) {
        if (this.options.dataAttributes && this.options.dataAttributes.length > 0) {
          var attributes = [];
          if (_Array$isArray(this.options.dataAttributes)) {
            attributes = this.options.dataAttributes;
          } else if (this.options.dataAttributes == "all") {
            attributes = _Object$keys(this.data);
          } else {
            return;
          }
          var _iterator = _createForOfIteratorHelper$4(attributes), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var name = _step.value;
              var value = this.data[name];
              if (value != null) {
                element.setAttribute("data-".concat(name), value);
              } else {
                element.removeAttribute("data-".concat(name));
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
      /**
       * Update custom styles of the element
       * @param {Element} element
       * @private
       */
    }, {
      key: "_updateStyle",
      value: function _updateStyle(element) {
        if (this.style) {
          availableUtils.removeCssText(element, this.style);
          this.style = null;
        }
        if (this.data.style) {
          availableUtils.addCssText(element, this.data.style);
          this.style = this.data.style;
        }
      }
      /**
       * Stringify the items contents
       * @param {string | Element | undefined} content
       * @returns {string | undefined}
       * @private
       */
    }, {
      key: "_contentToString",
      value: function _contentToString(content) {
        if (typeof content === "string")
          return content;
        if (content && "outerHTML" in content)
          return content.outerHTML;
        return content;
      }
      /**
       * Update the editability of this item.
       */
    }, {
      key: "_updateEditStatus",
      value: function _updateEditStatus() {
        if (this.options) {
          if (typeof this.options.editable === "boolean") {
            this.editable = {
              updateTime: this.options.editable,
              updateGroup: this.options.editable,
              remove: this.options.editable
            };
          } else if (_typeof$1(this.options.editable) === "object") {
            this.editable = {};
            availableUtils.selectiveExtend(["updateTime", "updateGroup", "remove"], this.editable, this.options.editable);
          }
        }
        if (!this.options || !this.options.editable || this.options.editable.overrideItems !== true) {
          if (this.data) {
            if (typeof this.data.editable === "boolean") {
              this.editable = {
                updateTime: this.data.editable,
                updateGroup: this.data.editable,
                remove: this.data.editable
              };
            } else if (_typeof$1(this.data.editable) === "object") {
              this.editable = {};
              availableUtils.selectiveExtend(["updateTime", "updateGroup", "remove"], this.editable, this.data.editable);
            }
          }
        }
      }
      /**
       * Return the width of the item left from its start date
       * @return {number}
       */
    }, {
      key: "getWidthLeft",
      value: function getWidthLeft() {
        return 0;
      }
      /**
       * Return the width of the item right from the max of its start and end date
       * @return {number}
       */
    }, {
      key: "getWidthRight",
      value: function getWidthRight() {
        return 0;
      }
      /**
       * Return the title of the item
       * @return {string | undefined}
       */
    }, {
      key: "getTitle",
      value: function getTitle() {
        if (this.options.tooltip && this.options.tooltip.template) {
          var _context7;
          var templateFunction = _bindInstanceProperty$1(_context7 = this.options.tooltip.template).call(_context7, this);
          return templateFunction(this._getItemData(), this.data);
        }
        return this.data.title;
      }
    }]);
    return Item2;
  }();
  Item.prototype.stack = true;
  function _createSuper$7(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$7() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var BoxItem = /* @__PURE__ */ function(_Item) {
    _inherits(BoxItem2, _Item);
    var _super = _createSuper$7(BoxItem2);
    function BoxItem2(data2, conversion, options) {
      var _this;
      _classCallCheck(this, BoxItem2);
      _this = _super.call(this, data2, conversion, options);
      _this.props = {
        dot: {
          width: 0,
          height: 0
        },
        line: {
          width: 0,
          height: 0
        }
      };
      if (data2) {
        if (data2.start == void 0) {
          throw new Error('Property "start" missing in item '.concat(data2));
        }
      }
      return _this;
    }
    _createClass(BoxItem2, [{
      key: "isVisible",
      value: function isVisible(range) {
        if (this.cluster) {
          return false;
        }
        var isVisible2;
        var align = this.data.align || this.options.align;
        var widthInMs = this.width * range.getMillisecondsPerPixel();
        if (align == "right") {
          isVisible2 = this.data.start.getTime() > range.start && this.data.start.getTime() - widthInMs < range.end;
        } else if (align == "left") {
          isVisible2 = this.data.start.getTime() + widthInMs > range.start && this.data.start.getTime() < range.end;
        } else {
          isVisible2 = this.data.start.getTime() + widthInMs / 2 > range.start && this.data.start.getTime() - widthInMs / 2 < range.end;
        }
        return isVisible2;
      }
      /**
      * create DOM element
      * @private
      */
    }, {
      key: "_createDomElement",
      value: function _createDomElement() {
        if (!this.dom) {
          this.dom = {};
          this.dom.box = document.createElement("DIV");
          this.dom.content = document.createElement("DIV");
          this.dom.content.className = "vis-item-content";
          this.dom.box.appendChild(this.dom.content);
          this.dom.line = document.createElement("DIV");
          this.dom.line.className = "vis-line";
          this.dom.dot = document.createElement("DIV");
          this.dom.dot.className = "vis-dot";
          this.dom.box["vis-item"] = this;
          this.dirty = true;
        }
      }
      /**
       * append DOM element
       * @private
       */
    }, {
      key: "_appendDomElement",
      value: function _appendDomElement() {
        if (!this.parent) {
          throw new Error("Cannot redraw item: no parent attached");
        }
        if (!this.dom.box.parentNode) {
          var foreground = this.parent.dom.foreground;
          if (!foreground)
            throw new Error("Cannot redraw item: parent has no foreground container element");
          foreground.appendChild(this.dom.box);
        }
        if (!this.dom.line.parentNode) {
          var background = this.parent.dom.background;
          if (!background)
            throw new Error("Cannot redraw item: parent has no background container element");
          background.appendChild(this.dom.line);
        }
        if (!this.dom.dot.parentNode) {
          var axis = this.parent.dom.axis;
          if (!background)
            throw new Error("Cannot redraw item: parent has no axis container element");
          axis.appendChild(this.dom.dot);
        }
        this.displayed = true;
      }
      /**
       * update dirty DOM element
       * @private
       */
    }, {
      key: "_updateDirtyDomComponents",
      value: function _updateDirtyDomComponents() {
        if (this.dirty) {
          this._updateContents(this.dom.content);
          this._updateDataAttributes(this.dom.box);
          this._updateStyle(this.dom.box);
          var editable = this.editable.updateTime || this.editable.updateGroup;
          var className = (this.data.className ? " " + this.data.className : "") + (this.selected ? " vis-selected" : "") + (editable ? " vis-editable" : " vis-readonly");
          this.dom.box.className = "vis-item vis-box".concat(className);
          this.dom.line.className = "vis-item vis-line".concat(className);
          this.dom.dot.className = "vis-item vis-dot".concat(className);
        }
      }
      /**
       * get DOM components sizes
       * @return {object}
       * @private
       */
    }, {
      key: "_getDomComponentsSizes",
      value: function _getDomComponentsSizes() {
        return {
          previous: {
            right: this.dom.box.style.right,
            left: this.dom.box.style.left
          },
          dot: {
            height: this.dom.dot.offsetHeight,
            width: this.dom.dot.offsetWidth
          },
          line: {
            width: this.dom.line.offsetWidth
          },
          box: {
            width: this.dom.box.offsetWidth,
            height: this.dom.box.offsetHeight
          }
        };
      }
      /**
       * update DOM components sizes
       * @param {object} sizes
       * @private
       */
    }, {
      key: "_updateDomComponentsSizes",
      value: function _updateDomComponentsSizes(sizes) {
        if (this.options.rtl) {
          this.dom.box.style.right = "0px";
        } else {
          this.dom.box.style.left = "0px";
        }
        this.props.dot.height = sizes.dot.height;
        this.props.dot.width = sizes.dot.width;
        this.props.line.width = sizes.line.width;
        this.width = sizes.box.width;
        this.height = sizes.box.height;
        if (this.options.rtl) {
          this.dom.box.style.right = sizes.previous.right;
        } else {
          this.dom.box.style.left = sizes.previous.left;
        }
        this.dirty = false;
      }
      /**
       * repaint DOM additionals
       * @private
       */
    }, {
      key: "_repaintDomAdditionals",
      value: function _repaintDomAdditionals() {
        this._repaintOnItemUpdateTimeTooltip(this.dom.box);
        this._repaintDragCenter();
        this._repaintDeleteButton(this.dom.box);
      }
      /**
       * Repaint the item
       * @param {boolean} [returnQueue=false]  return the queue
       * @return {boolean} the redraw queue if returnQueue=true
       */
    }, {
      key: "redraw",
      value: function redraw(returnQueue) {
        var _context, _context2, _context3, _this2 = this, _context5;
        var sizes;
        var queue = [
          // create item DOM
          _bindInstanceProperty$1(_context = this._createDomElement).call(_context, this),
          // append DOM to parent DOM
          _bindInstanceProperty$1(_context2 = this._appendDomElement).call(_context2, this),
          // update dirty DOM
          _bindInstanceProperty$1(_context3 = this._updateDirtyDomComponents).call(_context3, this),
          function() {
            if (_this2.dirty) {
              sizes = _this2._getDomComponentsSizes();
            }
          },
          function() {
            if (_this2.dirty) {
              var _context4;
              _bindInstanceProperty$1(_context4 = _this2._updateDomComponentsSizes).call(_context4, _this2)(sizes);
            }
          },
          // repaint DOM additionals
          _bindInstanceProperty$1(_context5 = this._repaintDomAdditionals).call(_context5, this)
        ];
        if (returnQueue) {
          return queue;
        } else {
          var result;
          _forEachInstanceProperty(queue).call(queue, function(fn) {
            result = fn();
          });
          return result;
        }
      }
      /**
       * Show the item in the DOM (when not already visible). The items DOM will
       * be created when needed.
       * @param {boolean} [returnQueue=false]  whether to return a queue of functions to execute instead of just executing them
       * @return {boolean} the redraw queue if returnQueue=true
       */
    }, {
      key: "show",
      value: function show(returnQueue) {
        if (!this.displayed) {
          return this.redraw(returnQueue);
        }
      }
      /**
       * Hide the item from the DOM (when visible)
       */
    }, {
      key: "hide",
      value: function hide() {
        if (this.displayed) {
          var dom2 = this.dom;
          if (dom2.box.remove)
            dom2.box.remove();
          else if (dom2.box.parentNode)
            dom2.box.parentNode.removeChild(dom2.box);
          if (dom2.line.remove)
            dom2.line.remove();
          else if (dom2.line.parentNode)
            dom2.line.parentNode.removeChild(dom2.line);
          if (dom2.dot.remove)
            dom2.dot.remove();
          else if (dom2.dot.parentNode)
            dom2.dot.parentNode.removeChild(dom2.dot);
          this.displayed = false;
        }
      }
      /**
       * Reposition the item XY
       */
    }, {
      key: "repositionXY",
      value: function repositionXY() {
        var rtl = this.options.rtl;
        var repositionXY2 = function repositionXY3(element, x, y) {
          var _context6;
          var rtl2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
          if (x === void 0 && y === void 0)
            return;
          var directionX = rtl2 ? x * -1 : x;
          if (y === void 0) {
            element.style.transform = "translateX(".concat(directionX, "px)");
            return;
          }
          if (x === void 0) {
            element.style.transform = "translateY(".concat(y, "px)");
            return;
          }
          element.style.transform = _concatInstanceProperty(_context6 = "translate(".concat(directionX, "px, ")).call(_context6, y, "px)");
        };
        repositionXY2(this.dom.box, this.boxX, this.boxY, rtl);
        repositionXY2(this.dom.dot, this.dotX, this.dotY, rtl);
        repositionXY2(this.dom.line, this.lineX, this.lineY, rtl);
      }
      /**
       * Reposition the item horizontally
       * @Override
       */
    }, {
      key: "repositionX",
      value: function repositionX() {
        var start = this.conversion.toScreen(this.data.start);
        var align = this.data.align === void 0 ? this.options.align : this.data.align;
        var lineWidth = this.props.line.width;
        var dotWidth = this.props.dot.width;
        if (align == "right") {
          this.boxX = start - this.width;
          this.lineX = start - lineWidth;
          this.dotX = start - lineWidth / 2 - dotWidth / 2;
        } else if (align == "left") {
          this.boxX = start;
          this.lineX = start;
          this.dotX = start + lineWidth / 2 - dotWidth / 2;
        } else {
          this.boxX = start - this.width / 2;
          this.lineX = this.options.rtl ? start - lineWidth : start - lineWidth / 2;
          this.dotX = start - dotWidth / 2;
        }
        if (this.options.rtl)
          this.right = this.boxX;
        else
          this.left = this.boxX;
        this.repositionXY();
      }
      /**
       * Reposition the item vertically
       * @Override
       */
    }, {
      key: "repositionY",
      value: function repositionY() {
        var orientation = this.options.orientation.item;
        var lineStyle = this.dom.line.style;
        if (orientation == "top") {
          var lineHeight = this.parent.top + this.top + 1;
          this.boxY = this.top || 0;
          lineStyle.height = "".concat(lineHeight, "px");
          lineStyle.bottom = "";
          lineStyle.top = "0";
        } else {
          var itemSetHeight = this.parent.itemSet.props.height;
          var _lineHeight = itemSetHeight - this.parent.top - this.parent.height + this.top;
          this.boxY = this.parent.height - this.top - (this.height || 0);
          lineStyle.height = "".concat(_lineHeight, "px");
          lineStyle.top = "";
          lineStyle.bottom = "0";
        }
        this.dotY = -this.props.dot.height / 2;
        this.repositionXY();
      }
      /**
       * Return the width of the item left from its start date
       * @return {number}
       */
    }, {
      key: "getWidthLeft",
      value: function getWidthLeft() {
        return this.width / 2;
      }
      /**
       * Return the width of the item right from its start date
       * @return {number}
       */
    }, {
      key: "getWidthRight",
      value: function getWidthRight() {
        return this.width / 2;
      }
    }]);
    return BoxItem2;
  }(Item);
  function _createSuper$6(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$6() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var PointItem = /* @__PURE__ */ function(_Item) {
    _inherits(PointItem2, _Item);
    var _super = _createSuper$6(PointItem2);
    function PointItem2(data2, conversion, options) {
      var _this;
      _classCallCheck(this, PointItem2);
      _this = _super.call(this, data2, conversion, options);
      _this.props = {
        dot: {
          top: 0,
          width: 0,
          height: 0
        },
        content: {
          height: 0,
          marginLeft: 0,
          marginRight: 0
        }
      };
      if (data2) {
        if (data2.start == void 0) {
          throw new Error('Property "start" missing in item '.concat(data2));
        }
      }
      return _this;
    }
    _createClass(PointItem2, [{
      key: "isVisible",
      value: function isVisible(range) {
        if (this.cluster) {
          return false;
        }
        var widthInMs = this.width * range.getMillisecondsPerPixel();
        return this.data.start.getTime() + widthInMs > range.start && this.data.start < range.end;
      }
      /**
       * create DOM element
       * @private
       */
    }, {
      key: "_createDomElement",
      value: function _createDomElement() {
        if (!this.dom) {
          this.dom = {};
          this.dom.point = document.createElement("div");
          this.dom.content = document.createElement("div");
          this.dom.content.className = "vis-item-content";
          this.dom.point.appendChild(this.dom.content);
          this.dom.dot = document.createElement("div");
          this.dom.point.appendChild(this.dom.dot);
          this.dom.point["vis-item"] = this;
          this.dirty = true;
        }
      }
      /**
       * append DOM element
       * @private
       */
    }, {
      key: "_appendDomElement",
      value: function _appendDomElement() {
        if (!this.parent) {
          throw new Error("Cannot redraw item: no parent attached");
        }
        if (!this.dom.point.parentNode) {
          var foreground = this.parent.dom.foreground;
          if (!foreground) {
            throw new Error("Cannot redraw item: parent has no foreground container element");
          }
          foreground.appendChild(this.dom.point);
        }
        this.displayed = true;
      }
      /**
       * update dirty DOM components
       * @private
       */
    }, {
      key: "_updateDirtyDomComponents",
      value: function _updateDirtyDomComponents() {
        if (this.dirty) {
          this._updateContents(this.dom.content);
          this._updateDataAttributes(this.dom.point);
          this._updateStyle(this.dom.point);
          var editable = this.editable.updateTime || this.editable.updateGroup;
          var className = (this.data.className ? " " + this.data.className : "") + (this.selected ? " vis-selected" : "") + (editable ? " vis-editable" : " vis-readonly");
          this.dom.point.className = "vis-item vis-point".concat(className);
          this.dom.dot.className = "vis-item vis-dot".concat(className);
        }
      }
      /**
       * get DOM component sizes
       * @return {object}
       * @private
       */
    }, {
      key: "_getDomComponentsSizes",
      value: function _getDomComponentsSizes() {
        return {
          dot: {
            width: this.dom.dot.offsetWidth,
            height: this.dom.dot.offsetHeight
          },
          content: {
            width: this.dom.content.offsetWidth,
            height: this.dom.content.offsetHeight
          },
          point: {
            width: this.dom.point.offsetWidth,
            height: this.dom.point.offsetHeight
          }
        };
      }
      /**
       * update DOM components sizes
       * @param {array} sizes
       * @private
       */
    }, {
      key: "_updateDomComponentsSizes",
      value: function _updateDomComponentsSizes(sizes) {
        this.props.dot.width = sizes.dot.width;
        this.props.dot.height = sizes.dot.height;
        this.props.content.height = sizes.content.height;
        if (this.options.rtl) {
          this.dom.content.style.marginRight = "".concat(this.props.dot.width / 2, "px");
        } else {
          this.dom.content.style.marginLeft = "".concat(this.props.dot.width / 2, "px");
        }
        this.width = sizes.point.width;
        this.height = sizes.point.height;
        this.dom.dot.style.top = "".concat((this.height - this.props.dot.height) / 2, "px");
        var dotWidth = this.props.dot.width;
        var translateX = this.options.rtl ? dotWidth / 2 : dotWidth / 2 * -1;
        this.dom.dot.style.transform = "translateX(".concat(translateX, "px");
        this.dirty = false;
      }
      /**
       * Repain DOM additionals
       * @private
       */
    }, {
      key: "_repaintDomAdditionals",
      value: function _repaintDomAdditionals() {
        this._repaintOnItemUpdateTimeTooltip(this.dom.point);
        this._repaintDragCenter();
        this._repaintDeleteButton(this.dom.point);
      }
      /**
       * Repaint the item
       * @param {boolean} [returnQueue=false]  return the queue
       * @return {boolean} the redraw queue if returnQueue=true
       */
    }, {
      key: "redraw",
      value: function redraw(returnQueue) {
        var _context, _context2, _context3, _this2 = this, _context5;
        var sizes;
        var queue = [
          // create item DOM
          _bindInstanceProperty$1(_context = this._createDomElement).call(_context, this),
          // append DOM to parent DOM
          _bindInstanceProperty$1(_context2 = this._appendDomElement).call(_context2, this),
          // update dirty DOM
          _bindInstanceProperty$1(_context3 = this._updateDirtyDomComponents).call(_context3, this),
          function() {
            if (_this2.dirty) {
              sizes = _this2._getDomComponentsSizes();
            }
          },
          function() {
            if (_this2.dirty) {
              var _context4;
              _bindInstanceProperty$1(_context4 = _this2._updateDomComponentsSizes).call(_context4, _this2)(sizes);
            }
          },
          // repaint DOM additionals
          _bindInstanceProperty$1(_context5 = this._repaintDomAdditionals).call(_context5, this)
        ];
        if (returnQueue) {
          return queue;
        } else {
          var result;
          _forEachInstanceProperty(queue).call(queue, function(fn) {
            result = fn();
          });
          return result;
        }
      }
      /**
       * Reposition XY
       */
    }, {
      key: "repositionXY",
      value: function repositionXY() {
        var rtl = this.options.rtl;
        var repositionXY2 = function repositionXY3(element, x, y) {
          var _context6;
          var rtl2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
          if (x === void 0 && y === void 0)
            return;
          var directionX = rtl2 ? x * -1 : x;
          if (y === void 0) {
            element.style.transform = "translateX(".concat(directionX, "px)");
            return;
          }
          if (x === void 0) {
            element.style.transform = "translateY(".concat(y, "px)");
            return;
          }
          element.style.transform = _concatInstanceProperty(_context6 = "translate(".concat(directionX, "px, ")).call(_context6, y, "px)");
        };
        repositionXY2(this.dom.point, this.pointX, this.pointY, rtl);
      }
      /**
       * Show the item in the DOM (when not already visible). The items DOM will
       * be created when needed.
       * @param {boolean} [returnQueue=false]  whether to return a queue of functions to execute instead of just executing them
       * @return {boolean} the redraw queue if returnQueue=true
       */
    }, {
      key: "show",
      value: function show(returnQueue) {
        if (!this.displayed) {
          return this.redraw(returnQueue);
        }
      }
      /**
       * Hide the item from the DOM (when visible)
       */
    }, {
      key: "hide",
      value: function hide() {
        if (this.displayed) {
          if (this.dom.point.parentNode) {
            this.dom.point.parentNode.removeChild(this.dom.point);
          }
          this.displayed = false;
        }
      }
      /**
       * Reposition the item horizontally
       * @Override
       */
    }, {
      key: "repositionX",
      value: function repositionX() {
        var start = this.conversion.toScreen(this.data.start);
        this.pointX = start;
        if (this.options.rtl) {
          this.right = start - this.props.dot.width;
        } else {
          this.left = start - this.props.dot.width;
        }
        this.repositionXY();
      }
      /**
       * Reposition the item vertically
       * @Override
       */
    }, {
      key: "repositionY",
      value: function repositionY() {
        var orientation = this.options.orientation.item;
        if (orientation == "top") {
          this.pointY = this.top;
        } else {
          this.pointY = this.parent.height - this.top - this.height;
        }
        this.repositionXY();
      }
      /**
       * Return the width of the item left from its start date
       * @return {number}
       */
    }, {
      key: "getWidthLeft",
      value: function getWidthLeft() {
        return this.props.dot.width;
      }
      /**
       * Return the width of the item right from  its start date
       * @return {number}
       */
    }, {
      key: "getWidthRight",
      value: function getWidthRight() {
        return this.props.dot.width;
      }
    }]);
    return PointItem2;
  }(Item);
  function _createSuper$5(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$5() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var RangeItem = /* @__PURE__ */ function(_Item) {
    _inherits(RangeItem2, _Item);
    var _super = _createSuper$5(RangeItem2);
    function RangeItem2(data2, conversion, options) {
      var _this;
      _classCallCheck(this, RangeItem2);
      _this = _super.call(this, data2, conversion, options);
      _this.props = {
        content: {
          width: 0
        }
      };
      _this.overflow = false;
      if (data2) {
        if (data2.start == void 0) {
          throw new Error('Property "start" missing in item '.concat(data2.id));
        }
        if (data2.end == void 0) {
          throw new Error('Property "end" missing in item '.concat(data2.id));
        }
      }
      return _this;
    }
    _createClass(RangeItem2, [{
      key: "isVisible",
      value: function isVisible(range) {
        if (this.cluster) {
          return false;
        }
        return this.data.start < range.end && this.data.end > range.start;
      }
      /**
       * create DOM elements
       * @private
       */
    }, {
      key: "_createDomElement",
      value: function _createDomElement() {
        if (!this.dom) {
          this.dom = {};
          this.dom.box = document.createElement("div");
          this.dom.frame = document.createElement("div");
          this.dom.frame.className = "vis-item-overflow";
          this.dom.box.appendChild(this.dom.frame);
          this.dom.visibleFrame = document.createElement("div");
          this.dom.visibleFrame.className = "vis-item-visible-frame";
          this.dom.box.appendChild(this.dom.visibleFrame);
          this.dom.content = document.createElement("div");
          this.dom.content.className = "vis-item-content";
          this.dom.frame.appendChild(this.dom.content);
          this.dom.box["vis-item"] = this;
          this.dirty = true;
        }
      }
      /**
       * append element to DOM
       * @private
       */
    }, {
      key: "_appendDomElement",
      value: function _appendDomElement() {
        if (!this.parent) {
          throw new Error("Cannot redraw item: no parent attached");
        }
        if (!this.dom.box.parentNode) {
          var foreground = this.parent.dom.foreground;
          if (!foreground) {
            throw new Error("Cannot redraw item: parent has no foreground container element");
          }
          foreground.appendChild(this.dom.box);
        }
        this.displayed = true;
      }
      /**
       * update dirty DOM components
       * @private
       */
    }, {
      key: "_updateDirtyDomComponents",
      value: function _updateDirtyDomComponents() {
        if (this.dirty) {
          this._updateContents(this.dom.content);
          this._updateDataAttributes(this.dom.box);
          this._updateStyle(this.dom.box);
          var editable = this.editable.updateTime || this.editable.updateGroup;
          var className = (this.data.className ? " " + this.data.className : "") + (this.selected ? " vis-selected" : "") + (editable ? " vis-editable" : " vis-readonly");
          this.dom.box.className = this.baseClassName + className;
          this.dom.content.style.maxWidth = "none";
        }
      }
      /**
       * get DOM component sizes
       * @return {object}
       * @private
       */
    }, {
      key: "_getDomComponentsSizes",
      value: function _getDomComponentsSizes() {
        this.overflow = window.getComputedStyle(this.dom.frame).overflow !== "hidden";
        this.whiteSpace = window.getComputedStyle(this.dom.content).whiteSpace !== "nowrap";
        return {
          content: {
            width: this.dom.content.offsetWidth
          },
          box: {
            height: this.dom.box.offsetHeight
          }
        };
      }
      /**
       * update DOM component sizes
       * @param {array} sizes
       * @private
       */
    }, {
      key: "_updateDomComponentsSizes",
      value: function _updateDomComponentsSizes(sizes) {
        this.props.content.width = sizes.content.width;
        this.height = sizes.box.height;
        this.dom.content.style.maxWidth = "";
        this.dirty = false;
      }
      /**
       * repaint DOM additional components
       * @private
       */
    }, {
      key: "_repaintDomAdditionals",
      value: function _repaintDomAdditionals() {
        this._repaintOnItemUpdateTimeTooltip(this.dom.box);
        this._repaintDeleteButton(this.dom.box);
        this._repaintDragCenter();
        this._repaintDragLeft();
        this._repaintDragRight();
      }
      /**
       * Repaint the item
       * @param {boolean} [returnQueue=false]  return the queue
       * @return {boolean} the redraw queue if returnQueue=true
       */
    }, {
      key: "redraw",
      value: function redraw(returnQueue) {
        var _context, _context2, _context3, _this2 = this, _context6;
        var sizes;
        var queue = [
          // create item DOM
          _bindInstanceProperty$1(_context = this._createDomElement).call(_context, this),
          // append DOM to parent DOM
          _bindInstanceProperty$1(_context2 = this._appendDomElement).call(_context2, this),
          // update dirty DOM 
          _bindInstanceProperty$1(_context3 = this._updateDirtyDomComponents).call(_context3, this),
          function() {
            if (_this2.dirty) {
              var _context4;
              sizes = _bindInstanceProperty$1(_context4 = _this2._getDomComponentsSizes).call(_context4, _this2)();
            }
          },
          function() {
            if (_this2.dirty) {
              var _context5;
              _bindInstanceProperty$1(_context5 = _this2._updateDomComponentsSizes).call(_context5, _this2)(sizes);
            }
          },
          // repaint DOM additionals
          _bindInstanceProperty$1(_context6 = this._repaintDomAdditionals).call(_context6, this)
        ];
        if (returnQueue) {
          return queue;
        } else {
          var result;
          _forEachInstanceProperty(queue).call(queue, function(fn) {
            result = fn();
          });
          return result;
        }
      }
      /**
       * Show the item in the DOM (when not already visible). The items DOM will
       * be created when needed.
       * @param {boolean} [returnQueue=false]  whether to return a queue of functions to execute instead of just executing them
       * @return {boolean} the redraw queue if returnQueue=true
       */
    }, {
      key: "show",
      value: function show(returnQueue) {
        if (!this.displayed) {
          return this.redraw(returnQueue);
        }
      }
      /**
       * Hide the item from the DOM (when visible)
       */
    }, {
      key: "hide",
      value: function hide() {
        if (this.displayed) {
          var box = this.dom.box;
          if (box.parentNode) {
            box.parentNode.removeChild(box);
          }
          this.displayed = false;
        }
      }
      /**
       * Reposition the item horizontally
       * @param {boolean} [limitSize=true] If true (default), the width of the range
       *                                   item will be limited, as the browser cannot
       *                                   display very wide divs. This means though
       *                                   that the applied left and width may
       *                                   not correspond to the ranges start and end
       * @Override
       */
    }, {
      key: "repositionX",
      value: function repositionX(limitSize) {
        var parentWidth = this.parent.width;
        var start = this.conversion.toScreen(this.data.start);
        var end = this.conversion.toScreen(this.data.end);
        var align = this.data.align === void 0 ? this.options.align : this.data.align;
        var contentStartPosition;
        var contentWidth;
        if (this.data.limitSize !== false && (limitSize === void 0 || limitSize === true)) {
          if (start < -parentWidth) {
            start = -parentWidth;
          }
          if (end > 2 * parentWidth) {
            end = 2 * parentWidth;
          }
        }
        var boxWidth = Math.max(Math.round((end - start) * 1e3) / 1e3, 1);
        if (this.overflow) {
          if (this.options.rtl) {
            this.right = start;
          } else {
            this.left = start;
          }
          this.width = boxWidth + this.props.content.width;
          contentWidth = this.props.content.width;
        } else {
          if (this.options.rtl) {
            this.right = start;
          } else {
            this.left = start;
          }
          this.width = boxWidth;
          contentWidth = Math.min(end - start, this.props.content.width);
        }
        if (this.options.rtl) {
          this.dom.box.style.transform = "translateX(".concat(this.right * -1, "px)");
        } else {
          this.dom.box.style.transform = "translateX(".concat(this.left, "px)");
        }
        this.dom.box.style.width = "".concat(boxWidth, "px");
        if (this.whiteSpace) {
          this.height = this.dom.box.offsetHeight;
        }
        switch (align) {
          case "left":
            this.dom.content.style.transform = "translateX(0)";
            break;
          case "right":
            if (this.options.rtl) {
              var translateX = Math.max(boxWidth - contentWidth, 0) * -1;
              this.dom.content.style.transform = "translateX(".concat(translateX, "px)");
            } else {
              this.dom.content.style.transform = "translateX(".concat(Math.max(boxWidth - contentWidth, 0), "px)");
            }
            break;
          case "center":
            if (this.options.rtl) {
              var _translateX = Math.max((boxWidth - contentWidth) / 2, 0) * -1;
              this.dom.content.style.transform = "translateX(".concat(_translateX, "px)");
            } else {
              this.dom.content.style.transform = "translateX(".concat(Math.max((boxWidth - contentWidth) / 2, 0), "px)");
            }
            break;
          default:
            if (this.overflow) {
              if (end > 0) {
                contentStartPosition = Math.max(-start, 0);
              } else {
                contentStartPosition = -contentWidth;
              }
            } else {
              if (start < 0) {
                contentStartPosition = -start;
              } else {
                contentStartPosition = 0;
              }
            }
            if (this.options.rtl) {
              var _translateX2 = contentStartPosition * -1;
              this.dom.content.style.transform = "translateX(".concat(_translateX2, "px)");
            } else {
              this.dom.content.style.transform = "translateX(".concat(contentStartPosition, "px)");
            }
        }
      }
      /**
       * Reposition the item vertically
       * @Override
       */
    }, {
      key: "repositionY",
      value: function repositionY() {
        var orientation = this.options.orientation.item;
        var box = this.dom.box;
        if (orientation == "top") {
          box.style.top = "".concat(this.top, "px");
        } else {
          box.style.top = "".concat(this.parent.height - this.top - this.height, "px");
        }
      }
      /**
       * Repaint a drag area on the left side of the range when the range is selected
       * @protected
       */
    }, {
      key: "_repaintDragLeft",
      value: function _repaintDragLeft() {
        if ((this.selected || this.options.itemsAlwaysDraggable.range) && this.editable.updateTime && !this.dom.dragLeft) {
          var dragLeft = document.createElement("div");
          dragLeft.className = "vis-drag-left";
          dragLeft.dragLeftItem = this;
          this.dom.box.appendChild(dragLeft);
          this.dom.dragLeft = dragLeft;
        } else if (!this.selected && !this.options.itemsAlwaysDraggable.range && this.dom.dragLeft) {
          if (this.dom.dragLeft.parentNode) {
            this.dom.dragLeft.parentNode.removeChild(this.dom.dragLeft);
          }
          this.dom.dragLeft = null;
        }
      }
      /**
       * Repaint a drag area on the right side of the range when the range is selected
       * @protected
       */
    }, {
      key: "_repaintDragRight",
      value: function _repaintDragRight() {
        if ((this.selected || this.options.itemsAlwaysDraggable.range) && this.editable.updateTime && !this.dom.dragRight) {
          var dragRight = document.createElement("div");
          dragRight.className = "vis-drag-right";
          dragRight.dragRightItem = this;
          this.dom.box.appendChild(dragRight);
          this.dom.dragRight = dragRight;
        } else if (!this.selected && !this.options.itemsAlwaysDraggable.range && this.dom.dragRight) {
          if (this.dom.dragRight.parentNode) {
            this.dom.dragRight.parentNode.removeChild(this.dom.dragRight);
          }
          this.dom.dragRight = null;
        }
      }
    }]);
    return RangeItem2;
  }(Item);
  RangeItem.prototype.baseClassName = "vis-item vis-range";
  function _createSuper$4(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$4() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var BackgroundItem = /* @__PURE__ */ function(_Item) {
    _inherits(BackgroundItem2, _Item);
    var _super = _createSuper$4(BackgroundItem2);
    function BackgroundItem2(data2, conversion, options) {
      var _this;
      _classCallCheck(this, BackgroundItem2);
      _this = _super.call(this, data2, conversion, options);
      _this.props = {
        content: {
          width: 0
        }
      };
      _this.overflow = false;
      if (data2) {
        if (data2.start == void 0) {
          throw new Error('Property "start" missing in item '.concat(data2.id));
        }
        if (data2.end == void 0) {
          throw new Error('Property "end" missing in item '.concat(data2.id));
        }
      }
      return _this;
    }
    _createClass(BackgroundItem2, [{
      key: "isVisible",
      value: function isVisible(range) {
        return this.data.start < range.end && this.data.end > range.start;
      }
      /**
       * create DOM element
       * @private
       */
    }, {
      key: "_createDomElement",
      value: function _createDomElement() {
        if (!this.dom) {
          this.dom = {};
          this.dom.box = document.createElement("div");
          this.dom.frame = document.createElement("div");
          this.dom.frame.className = "vis-item-overflow";
          this.dom.box.appendChild(this.dom.frame);
          this.dom.content = document.createElement("div");
          this.dom.content.className = "vis-item-content";
          this.dom.frame.appendChild(this.dom.content);
          this.dirty = true;
        }
      }
      /**
       * append DOM element
       * @private
       */
    }, {
      key: "_appendDomElement",
      value: function _appendDomElement() {
        if (!this.parent) {
          throw new Error("Cannot redraw item: no parent attached");
        }
        if (!this.dom.box.parentNode) {
          var background = this.parent.dom.background;
          if (!background) {
            throw new Error("Cannot redraw item: parent has no background container element");
          }
          background.appendChild(this.dom.box);
        }
        this.displayed = true;
      }
      /**
       * update DOM Dirty components
       * @private
       */
    }, {
      key: "_updateDirtyDomComponents",
      value: function _updateDirtyDomComponents() {
        if (this.dirty) {
          this._updateContents(this.dom.content);
          this._updateDataAttributes(this.dom.content);
          this._updateStyle(this.dom.box);
          var className = (this.data.className ? " " + this.data.className : "") + (this.selected ? " vis-selected" : "");
          this.dom.box.className = this.baseClassName + className;
        }
      }
      /**
       * get DOM components sizes
       * @return {object}
       * @private
       */
    }, {
      key: "_getDomComponentsSizes",
      value: function _getDomComponentsSizes() {
        this.overflow = window.getComputedStyle(this.dom.content).overflow !== "hidden";
        return {
          content: {
            width: this.dom.content.offsetWidth
          }
        };
      }
      /**
       * update DOM components sizes
       * @param {object} sizes
       * @private
       */
    }, {
      key: "_updateDomComponentsSizes",
      value: function _updateDomComponentsSizes(sizes) {
        this.props.content.width = sizes.content.width;
        this.height = 0;
        this.dirty = false;
      }
      /**
       * repaint DOM additionals
       * @private
       */
    }, {
      key: "_repaintDomAdditionals",
      value: function _repaintDomAdditionals() {
      }
      /**
       * Repaint the item
       * @param {boolean} [returnQueue=false]  return the queue
       * @return {boolean} the redraw result or the redraw queue if returnQueue=true
       */
    }, {
      key: "redraw",
      value: function redraw(returnQueue) {
        var _context, _context2, _context3, _this2 = this, _context6;
        var sizes;
        var queue = [
          // create item DOM
          _bindInstanceProperty$1(_context = this._createDomElement).call(_context, this),
          // append DOM to parent DOM
          _bindInstanceProperty$1(_context2 = this._appendDomElement).call(_context2, this),
          _bindInstanceProperty$1(_context3 = this._updateDirtyDomComponents).call(_context3, this),
          function() {
            if (_this2.dirty) {
              var _context4;
              sizes = _bindInstanceProperty$1(_context4 = _this2._getDomComponentsSizes).call(_context4, _this2)();
            }
          },
          function() {
            if (_this2.dirty) {
              var _context5;
              _bindInstanceProperty$1(_context5 = _this2._updateDomComponentsSizes).call(_context5, _this2)(sizes);
            }
          },
          // repaint DOM additionals
          _bindInstanceProperty$1(_context6 = this._repaintDomAdditionals).call(_context6, this)
        ];
        if (returnQueue) {
          return queue;
        } else {
          var result;
          _forEachInstanceProperty(queue).call(queue, function(fn) {
            result = fn();
          });
          return result;
        }
      }
      /**
       * Reposition the item vertically
       * @Override
       */
    }, {
      key: "repositionY",
      value: function repositionY(margin) {
        var height;
        var orientation = this.options.orientation.item;
        if (this.data.subgroup !== void 0) {
          var itemSubgroup = this.data.subgroup;
          this.dom.box.style.height = "".concat(this.parent.subgroups[itemSubgroup].height, "px");
          if (orientation == "top") {
            this.dom.box.style.top = "".concat(this.parent.top + this.parent.subgroups[itemSubgroup].top, "px");
          } else {
            this.dom.box.style.top = "".concat(this.parent.top + this.parent.height - this.parent.subgroups[itemSubgroup].top - this.parent.subgroups[itemSubgroup].height, "px");
          }
          this.dom.box.style.bottom = "";
        } else {
          if (this.parent instanceof BackgroundGroup) {
            height = Math.max(this.parent.height, this.parent.itemSet.body.domProps.center.height, this.parent.itemSet.body.domProps.centerContainer.height);
            this.dom.box.style.bottom = orientation == "bottom" ? "0" : "";
            this.dom.box.style.top = orientation == "top" ? "0" : "";
          } else {
            height = this.parent.height;
            this.dom.box.style.top = "".concat(this.parent.top, "px");
            this.dom.box.style.bottom = "";
          }
        }
        this.dom.box.style.height = "".concat(height, "px");
      }
    }]);
    return BackgroundItem2;
  }(Item);
  BackgroundItem.prototype.baseClassName = "vis-item vis-background";
  BackgroundItem.prototype.stack = false;
  BackgroundItem.prototype.show = RangeItem.prototype.show;
  BackgroundItem.prototype.hide = RangeItem.prototype.hide;
  BackgroundItem.prototype.repositionX = RangeItem.prototype.repositionX;
  var css_248z$4 = "div.vis-tooltip {\n  position: absolute;\n  visibility: hidden;\n  padding: 5px;\n  white-space: nowrap;\n\n  font-family: verdana;\n  font-size:14px;\n  color:#000000;\n  background-color: #f5f4ed;\n\n  -moz-border-radius: 3px;\n  -webkit-border-radius: 3px;\n  border-radius: 3px;\n  border: 1px solid #808074;\n\n  box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\n  pointer-events: none;\n\n  z-index: 5;\n}\n";
  styleInject(css_248z$4);
  var Popup = /* @__PURE__ */ function() {
    function Popup2(container, overflowMethod) {
      _classCallCheck(this, Popup2);
      this.container = container;
      this.overflowMethod = overflowMethod || "cap";
      this.x = 0;
      this.y = 0;
      this.padding = 5;
      this.hidden = false;
      this.frame = document.createElement("div");
      this.frame.className = "vis-tooltip";
      this.container.appendChild(this.frame);
    }
    _createClass(Popup2, [{
      key: "setPosition",
      value: function setPosition(x, y) {
        this.x = _parseInt(x);
        this.y = _parseInt(y);
      }
      /**
       * Set the content for the popup window. This can be HTML code or text.
       * @param {string | Element} content
       */
    }, {
      key: "setText",
      value: function setText(content) {
        if (content instanceof Element) {
          this.frame.innerHTML = "";
          this.frame.appendChild(content);
        } else {
          this.frame.innerHTML = availableUtils.xss(content);
        }
      }
      /**
       * Show the popup window
       * @param {boolean} [doShow]    Show or hide the window
       */
    }, {
      key: "show",
      value: function show(doShow) {
        if (doShow === void 0) {
          doShow = true;
        }
        if (doShow === true) {
          var height = this.frame.clientHeight;
          var width = this.frame.clientWidth;
          var maxHeight = this.frame.parentNode.clientHeight;
          var maxWidth = this.frame.parentNode.clientWidth;
          var left = 0, top = 0;
          if (this.overflowMethod == "flip" || this.overflowMethod == "none") {
            var isLeft = false, isTop = true;
            if (this.overflowMethod == "flip") {
              if (this.y - height < this.padding) {
                isTop = false;
              }
              if (this.x + width > maxWidth - this.padding) {
                isLeft = true;
              }
            }
            if (isLeft) {
              left = this.x - width;
            } else {
              left = this.x;
            }
            if (isTop) {
              top = this.y - height;
            } else {
              top = this.y;
            }
          } else {
            top = this.y - height;
            if (top + height + this.padding > maxHeight) {
              top = maxHeight - height - this.padding;
            }
            if (top < this.padding) {
              top = this.padding;
            }
            left = this.x;
            if (left + width + this.padding > maxWidth) {
              left = maxWidth - width - this.padding;
            }
            if (left < this.padding) {
              left = this.padding;
            }
          }
          this.frame.style.left = left + "px";
          this.frame.style.top = top + "px";
          this.frame.style.visibility = "visible";
          this.hidden = false;
        } else {
          this.hide();
        }
      }
      /**
       * Hide the popup window
       */
    }, {
      key: "hide",
      value: function hide() {
        this.hidden = true;
        this.frame.style.left = "0";
        this.frame.style.top = "0";
        this.frame.style.visibility = "hidden";
      }
      /**
       * Remove the popup window
       */
    }, {
      key: "destroy",
      value: function destroy() {
        this.frame.parentNode.removeChild(this.frame);
      }
    }]);
    return Popup2;
  }();
  var everyExports = {};
  var every$3 = {
    get exports() {
      return everyExports;
    },
    set exports(v) {
      everyExports = v;
    }
  };
  var $ = _export;
  var $every = arrayIteration.every;
  var arrayMethodIsStrict = arrayMethodIsStrict$6;
  var STRICT_METHOD = arrayMethodIsStrict("every");
  $({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
    every: function every(callbackfn) {
      return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var entryVirtual = entryVirtual$o;
  var every$2 = entryVirtual("Array").every;
  var isPrototypeOf = objectIsPrototypeOf;
  var method = every$2;
  var ArrayPrototype = Array.prototype;
  var every$1 = function(it2) {
    var own = it2.every;
    return it2 === ArrayPrototype || isPrototypeOf(ArrayPrototype, it2) && own === ArrayPrototype.every ? method : own;
  };
  var parent = every$1;
  var every2 = parent;
  (function(module) {
    module.exports = every2;
  })(every$3);
  var _everyInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(everyExports);
  function _createForOfIteratorHelper$3(o, allowArrayLike) {
    var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
    if (!it2) {
      if (_Array$isArray(o) || (it2 = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it2)
          o = it2;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n() {
          if (i2 >= o.length)
            return { done: true };
          return { done: false, value: o[i2++] };
        }, e: function e(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it2 = it2.call(o);
    }, n: function n() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it2.return != null)
          it2.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray$3(o, minLen) {
    var _context14;
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray$3(o, minLen);
    var n = _sliceInstanceProperty(_context14 = Object.prototype.toString.call(o)).call(_context14, 8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from$1(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray$3(o, minLen);
  }
  function _arrayLikeToArray$3(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  function _createSuper$3(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$3() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var ClusterItem = /* @__PURE__ */ function(_Item) {
    _inherits(ClusterItem2, _Item);
    var _super = _createSuper$3(ClusterItem2);
    function ClusterItem2(data2, conversion, options) {
      var _this;
      _classCallCheck(this, ClusterItem2);
      var modifiedOptions = _Object$assign({}, {
        fitOnDoubleClick: true
      }, options, {
        editable: false
      });
      _this = _super.call(this, data2, conversion, modifiedOptions);
      _this.props = {
        content: {
          width: 0,
          height: 0
        }
      };
      if (!data2 || data2.uiItems == void 0) {
        throw new Error('Property "uiItems" missing in item ' + data2.id);
      }
      _this.id = v4();
      _this.group = data2.group;
      _this._setupRange();
      _this.emitter = _this.data.eventEmitter;
      _this.range = _this.data.range;
      _this.attached = false;
      _this.isCluster = true;
      _this.data.isCluster = true;
      return _this;
    }
    _createClass(ClusterItem2, [{
      key: "hasItems",
      value: function hasItems() {
        return this.data.uiItems && this.data.uiItems.length && this.attached;
      }
      /**
       * set UI items
       * @param {array} items
       */
    }, {
      key: "setUiItems",
      value: function setUiItems(items) {
        this.detach();
        this.data.uiItems = items;
        this._setupRange();
        this.attach();
      }
      /**
       * check is visible
       * @param {object} range
       * @return {boolean}
       */
    }, {
      key: "isVisible",
      value: function isVisible(range) {
        var rangeWidth = this.data.end ? this.data.end - this.data.start : 0;
        var widthInMs = this.width * range.getMillisecondsPerPixel();
        var end = Math.max(this.data.start.getTime() + rangeWidth, this.data.start.getTime() + widthInMs);
        return this.data.start < range.end && end > range.start && this.hasItems();
      }
      /**
       * get cluster data
       * @return {object}
       */
    }, {
      key: "getData",
      value: function getData() {
        return {
          isCluster: true,
          id: this.id,
          items: this.data.items || [],
          data: this.data
        };
      }
      /**
       * redraw cluster item
       * @param {boolean} returnQueue
       * @return {boolean}
       */
    }, {
      key: "redraw",
      value: function redraw(returnQueue) {
        var _context, _context2, _context3, _context4, _context5, _context7;
        var sizes;
        var queue = [
          // create item DOM
          _bindInstanceProperty$1(_context = this._createDomElement).call(_context, this),
          // append DOM to parent DOM
          _bindInstanceProperty$1(_context2 = this._appendDomElement).call(_context2, this),
          // update dirty DOM
          _bindInstanceProperty$1(_context3 = this._updateDirtyDomComponents).call(_context3, this),
          _bindInstanceProperty$1(_context4 = function _context42() {
            if (this.dirty) {
              sizes = this._getDomComponentsSizes();
            }
          }).call(_context4, this),
          _bindInstanceProperty$1(_context5 = function _context52() {
            if (this.dirty) {
              var _context6;
              _bindInstanceProperty$1(_context6 = this._updateDomComponentsSizes).call(_context6, this)(sizes);
            }
          }).call(_context5, this),
          // repaint DOM additionals
          _bindInstanceProperty$1(_context7 = this._repaintDomAdditionals).call(_context7, this)
        ];
        if (returnQueue) {
          return queue;
        } else {
          var result;
          _forEachInstanceProperty(queue).call(queue, function(fn) {
            result = fn();
          });
          return result;
        }
      }
      /**
       * show cluster item
       */
    }, {
      key: "show",
      value: function show() {
        if (!this.displayed) {
          this.redraw();
        }
      }
      /**
       * Hide the item from the DOM (when visible)
       */
    }, {
      key: "hide",
      value: function hide() {
        if (this.displayed) {
          var dom2 = this.dom;
          if (dom2.box.parentNode) {
            dom2.box.parentNode.removeChild(dom2.box);
          }
          if (this.options.showStipes) {
            if (dom2.line.parentNode) {
              dom2.line.parentNode.removeChild(dom2.line);
            }
            if (dom2.dot.parentNode) {
              dom2.dot.parentNode.removeChild(dom2.dot);
            }
          }
          this.displayed = false;
        }
      }
      /**
       * reposition item x axis
       */
    }, {
      key: "repositionX",
      value: function repositionX() {
        var start = this.conversion.toScreen(this.data.start);
        var end = this.data.end ? this.conversion.toScreen(this.data.end) : 0;
        if (end) {
          this.repositionXWithRanges(start, end);
        } else {
          var align = this.data.align === void 0 ? this.options.align : this.data.align;
          this.repositionXWithoutRanges(start, align);
        }
        if (this.options.showStipes) {
          this.dom.line.style.display = this._isStipeVisible() ? "block" : "none";
          this.dom.dot.style.display = this._isStipeVisible() ? "block" : "none";
          if (this._isStipeVisible()) {
            this.repositionStype(start, end);
          }
        }
      }
      /**
       * reposition item stype
       * @param {date} start
       * @param {date} end
       */
    }, {
      key: "repositionStype",
      value: function repositionStype(start, end) {
        this.dom.line.style.display = "block";
        this.dom.dot.style.display = "block";
        var lineOffsetWidth = this.dom.line.offsetWidth;
        var dotOffsetWidth = this.dom.dot.offsetWidth;
        if (end) {
          var lineOffset = lineOffsetWidth + start + (end - start) / 2;
          var dotOffset = lineOffset - dotOffsetWidth / 2;
          var lineOffsetDirection = this.options.rtl ? lineOffset * -1 : lineOffset;
          var dotOffsetDirection = this.options.rtl ? dotOffset * -1 : dotOffset;
          this.dom.line.style.transform = "translateX(".concat(lineOffsetDirection, "px)");
          this.dom.dot.style.transform = "translateX(".concat(dotOffsetDirection, "px)");
        } else {
          var _lineOffsetDirection = this.options.rtl ? start * -1 : start;
          var _dotOffsetDirection = this.options.rtl ? (start - dotOffsetWidth / 2) * -1 : start - dotOffsetWidth / 2;
          this.dom.line.style.transform = "translateX(".concat(_lineOffsetDirection, "px)");
          this.dom.dot.style.transform = "translateX(".concat(_dotOffsetDirection, "px)");
        }
      }
      /**
       * reposition x without ranges
       * @param {date} start
       * @param {string} align
       */
    }, {
      key: "repositionXWithoutRanges",
      value: function repositionXWithoutRanges(start, align) {
        if (align == "right") {
          if (this.options.rtl) {
            this.right = start - this.width;
            this.dom.box.style.right = this.right + "px";
          } else {
            this.left = start - this.width;
            this.dom.box.style.left = this.left + "px";
          }
        } else if (align == "left") {
          if (this.options.rtl) {
            this.right = start;
            this.dom.box.style.right = this.right + "px";
          } else {
            this.left = start;
            this.dom.box.style.left = this.left + "px";
          }
        } else {
          if (this.options.rtl) {
            this.right = start - this.width / 2;
            this.dom.box.style.right = this.right + "px";
          } else {
            this.left = start - this.width / 2;
            this.dom.box.style.left = this.left + "px";
          }
        }
      }
      /**
       * reposition x with ranges
       * @param {date} start
       * @param {date} end
       */
    }, {
      key: "repositionXWithRanges",
      value: function repositionXWithRanges(start, end) {
        var boxWidth = Math.round(Math.max(end - start + 0.5, 1));
        if (this.options.rtl) {
          this.right = start;
        } else {
          this.left = start;
        }
        this.width = Math.max(boxWidth, this.minWidth || 0);
        if (this.options.rtl) {
          this.dom.box.style.right = this.right + "px";
        } else {
          this.dom.box.style.left = this.left + "px";
        }
        this.dom.box.style.width = boxWidth + "px";
      }
      /**
       * reposition item y axis
       */
    }, {
      key: "repositionY",
      value: function repositionY() {
        var orientation = this.options.orientation.item;
        var box = this.dom.box;
        if (orientation == "top") {
          box.style.top = (this.top || 0) + "px";
        } else {
          box.style.top = (this.parent.height - this.top - this.height || 0) + "px";
        }
        if (this.options.showStipes) {
          if (orientation == "top") {
            this.dom.line.style.top = "0";
            this.dom.line.style.height = this.parent.top + this.top + 1 + "px";
            this.dom.line.style.bottom = "";
          } else {
            var itemSetHeight = this.parent.itemSet.props.height;
            var lineHeight = itemSetHeight - this.parent.top - this.parent.height + this.top;
            this.dom.line.style.top = itemSetHeight - lineHeight + "px";
            this.dom.line.style.bottom = "0";
          }
          this.dom.dot.style.top = -this.dom.dot.offsetHeight / 2 + "px";
        }
      }
      /**
       * get width left
       * @return {number}
       */
    }, {
      key: "getWidthLeft",
      value: function getWidthLeft() {
        return this.width / 2;
      }
      /**
       * get width right
       * @return {number}
       */
    }, {
      key: "getWidthRight",
      value: function getWidthRight() {
        return this.width / 2;
      }
      /**
       * move cluster item
       */
    }, {
      key: "move",
      value: function move() {
        this.repositionX();
        this.repositionY();
      }
      /**
       * attach
       */
    }, {
      key: "attach",
      value: function attach() {
        var _context8;
        var _iterator = _createForOfIteratorHelper$3(this.data.uiItems), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var item = _step.value;
            item.cluster = this;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        this.data.items = _mapInstanceProperty(_context8 = this.data.uiItems).call(_context8, function(item2) {
          return item2.data;
        });
        this.attached = true;
        this.dirty = true;
      }
      /**
       * detach
       * @param {boolean} detachFromParent
       * @return {void}
       */
    }, {
      key: "detach",
      value: function detach() {
        var detachFromParent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
        if (!this.hasItems()) {
          return;
        }
        var _iterator2 = _createForOfIteratorHelper$3(this.data.uiItems), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var item = _step2.value;
            delete item.cluster;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        this.attached = false;
        if (detachFromParent && this.group) {
          this.group.remove(this);
          this.group = null;
        }
        this.data.items = [];
        this.dirty = true;
      }
      /**
       * handle on double click
       */
    }, {
      key: "_onDoubleClick",
      value: function _onDoubleClick() {
        this._fit();
      }
      /**
       * set range
       */
    }, {
      key: "_setupRange",
      value: function _setupRange() {
        var _context9, _context10, _context11;
        var stats = _mapInstanceProperty(_context9 = this.data.uiItems).call(_context9, function(item) {
          return {
            start: item.data.start.valueOf(),
            end: item.data.end ? item.data.end.valueOf() : item.data.start.valueOf()
          };
        });
        this.data.min = Math.min.apply(Math, _toConsumableArray(_mapInstanceProperty(stats).call(stats, function(s) {
          return Math.min(s.start, s.end || s.start);
        })));
        this.data.max = Math.max.apply(Math, _toConsumableArray(_mapInstanceProperty(stats).call(stats, function(s) {
          return Math.max(s.start, s.end || s.start);
        })));
        var centers = _mapInstanceProperty(_context10 = this.data.uiItems).call(_context10, function(item) {
          return item.center;
        });
        var avg = _reduceInstanceProperty(centers).call(centers, function(sum, value) {
          return sum + value;
        }, 0) / this.data.uiItems.length;
        if (_someInstanceProperty(_context11 = this.data.uiItems).call(_context11, function(item) {
          return item.data.end;
        })) {
          this.data.start = new Date(this.data.min);
          this.data.end = new Date(this.data.max);
        } else {
          this.data.start = new Date(avg);
          this.data.end = null;
        }
      }
      /**
       * get UI items
       * @return {array}
       */
    }, {
      key: "_getUiItems",
      value: function _getUiItems() {
        var _this2 = this;
        if (this.data.uiItems && this.data.uiItems.length) {
          var _context12;
          return _filterInstanceProperty(_context12 = this.data.uiItems).call(_context12, function(item) {
            return item.cluster === _this2;
          });
        }
        return [];
      }
      /**
       * create DOM element
       */
    }, {
      key: "_createDomElement",
      value: function _createDomElement() {
        if (!this.dom) {
          this.dom = {};
          this.dom.box = document.createElement("DIV");
          this.dom.content = document.createElement("DIV");
          this.dom.content.className = "vis-item-content";
          this.dom.box.appendChild(this.dom.content);
          if (this.options.showStipes) {
            this.dom.line = document.createElement("DIV");
            this.dom.line.className = "vis-cluster-line";
            this.dom.line.style.display = "none";
            this.dom.dot = document.createElement("DIV");
            this.dom.dot.className = "vis-cluster-dot";
            this.dom.dot.style.display = "none";
          }
          if (this.options.fitOnDoubleClick) {
            var _context13;
            this.dom.box.ondblclick = _bindInstanceProperty$1(_context13 = ClusterItem2.prototype._onDoubleClick).call(_context13, this);
          }
          this.dom.box["vis-item"] = this;
          this.dirty = true;
        }
      }
      /**
       * append element to DOM
       */
    }, {
      key: "_appendDomElement",
      value: function _appendDomElement() {
        if (!this.parent) {
          throw new Error("Cannot redraw item: no parent attached");
        }
        if (!this.dom.box.parentNode) {
          var foreground = this.parent.dom.foreground;
          if (!foreground) {
            throw new Error("Cannot redraw item: parent has no foreground container element");
          }
          foreground.appendChild(this.dom.box);
        }
        var background = this.parent.dom.background;
        if (this.options.showStipes) {
          if (!this.dom.line.parentNode) {
            if (!background)
              throw new Error("Cannot redraw item: parent has no background container element");
            background.appendChild(this.dom.line);
          }
          if (!this.dom.dot.parentNode) {
            var axis = this.parent.dom.axis;
            if (!background)
              throw new Error("Cannot redraw item: parent has no axis container element");
            axis.appendChild(this.dom.dot);
          }
        }
        this.displayed = true;
      }
      /**
       * update dirty DOM components
       */
    }, {
      key: "_updateDirtyDomComponents",
      value: function _updateDirtyDomComponents() {
        if (this.dirty) {
          this._updateContents(this.dom.content);
          this._updateDataAttributes(this.dom.box);
          this._updateStyle(this.dom.box);
          var className = this.baseClassName + " " + (this.data.className ? " " + this.data.className : "") + (this.selected ? " vis-selected" : "") + " vis-readonly";
          this.dom.box.className = "vis-item " + className;
          if (this.options.showStipes) {
            this.dom.line.className = "vis-item vis-cluster-line " + (this.selected ? " vis-selected" : "");
            this.dom.dot.className = "vis-item vis-cluster-dot " + (this.selected ? " vis-selected" : "");
          }
          if (this.data.end) {
            this.dom.content.style.maxWidth = "none";
          }
        }
      }
      /**
       * get DOM components sizes
       * @return {object}
       */
    }, {
      key: "_getDomComponentsSizes",
      value: function _getDomComponentsSizes() {
        var sizes = {
          previous: {
            right: this.dom.box.style.right,
            left: this.dom.box.style.left
          },
          box: {
            width: this.dom.box.offsetWidth,
            height: this.dom.box.offsetHeight
          }
        };
        if (this.options.showStipes) {
          sizes.dot = {
            height: this.dom.dot.offsetHeight,
            width: this.dom.dot.offsetWidth
          };
          sizes.line = {
            width: this.dom.line.offsetWidth
          };
        }
        return sizes;
      }
      /**
       * update DOM components sizes
       * @param {object} sizes
       */
    }, {
      key: "_updateDomComponentsSizes",
      value: function _updateDomComponentsSizes(sizes) {
        if (this.options.rtl) {
          this.dom.box.style.right = "0px";
        } else {
          this.dom.box.style.left = "0px";
        }
        if (!this.data.end) {
          this.width = sizes.box.width;
        } else {
          this.minWidth = sizes.box.width;
        }
        this.height = sizes.box.height;
        if (this.options.rtl) {
          this.dom.box.style.right = sizes.previous.right;
        } else {
          this.dom.box.style.left = sizes.previous.left;
        }
        this.dirty = false;
      }
      /**
       * repaint DOM additional components
       */
    }, {
      key: "_repaintDomAdditionals",
      value: function _repaintDomAdditionals() {
        this._repaintOnItemUpdateTimeTooltip(this.dom.box);
      }
      /**
       * check is stripe visible
       * @return {number}
       * @private
       */
    }, {
      key: "_isStipeVisible",
      value: function _isStipeVisible() {
        return this.minWidth >= this.width || !this.data.end;
      }
      /**
       * get fit range
       * @return {object}
       * @private
       */
    }, {
      key: "_getFitRange",
      value: function _getFitRange() {
        var offset = 0.05 * (this.data.max - this.data.min) / 2;
        return {
          fitStart: this.data.min - offset,
          fitEnd: this.data.max + offset
        };
      }
      /**
      * fit
      * @private
      */
    }, {
      key: "_fit",
      value: function _fit() {
        if (this.emitter) {
          var _this$_getFitRange = this._getFitRange(), fitStart = _this$_getFitRange.fitStart, fitEnd = _this$_getFitRange.fitEnd;
          var fitArgs = {
            start: new Date(fitStart),
            end: new Date(fitEnd),
            animation: true
          };
          this.emitter.emit("fit", fitArgs);
        }
      }
      /**
      * get item data
      * @return {object}
      * @private
      */
    }, {
      key: "_getItemData",
      value: function _getItemData() {
        return this.data;
      }
    }]);
    return ClusterItem2;
  }(Item);
  ClusterItem.prototype.baseClassName = "vis-item vis-range vis-cluster";
  function _createForOfIteratorHelper$2(o, allowArrayLike) {
    var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
    if (!it2) {
      if (_Array$isArray(o) || (it2 = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it2)
          o = it2;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n() {
          if (i2 >= o.length)
            return { done: true };
          return { done: false, value: o[i2++] };
        }, e: function e(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it2 = it2.call(o);
    }, n: function n() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it2.return != null)
          it2.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray$2(o, minLen) {
    var _context4;
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray$2(o, minLen);
    var n = _sliceInstanceProperty(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from$1(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray$2(o, minLen);
  }
  function _arrayLikeToArray$2(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  var UNGROUPED$2 = "__ungrouped__";
  var BACKGROUND$1 = "__background__";
  var ReservedGroupIds = {
    UNGROUPED: UNGROUPED$2,
    BACKGROUND: BACKGROUND$1
  };
  var ClusterGenerator = /* @__PURE__ */ function() {
    function ClusterGenerator2(itemSet) {
      _classCallCheck(this, ClusterGenerator2);
      this.itemSet = itemSet;
      this.groups = {};
      this.cache = {};
      this.cache[-1] = [];
    }
    _createClass(ClusterGenerator2, [{
      key: "createClusterItem",
      value: function createClusterItem(itemData, conversion, options) {
        var newItem = new ClusterItem(itemData, conversion, options);
        return newItem;
      }
      /**
       * Set the items to be clustered.
       * This will clear cached clusters.
       * @param {Item[]} items
       * @param {Object} [options]  Available options:
       *                            {boolean} applyOnChangedLevel
       *                                If true (default), the changed data is applied
       *                                as soon the cluster level changes. If false,
       *                                The changed data is applied immediately
       */
    }, {
      key: "setItems",
      value: function setItems(items, options) {
        this.items = items || [];
        this.dataChanged = true;
        this.applyOnChangedLevel = false;
        if (options && options.applyOnChangedLevel) {
          this.applyOnChangedLevel = options.applyOnChangedLevel;
        }
      }
      /**
       * Update the current data set: clear cache, and recalculate the clustering for
       * the current level
       */
    }, {
      key: "updateData",
      value: function updateData() {
        this.dataChanged = true;
        this.applyOnChangedLevel = false;
      }
      /**
       * Cluster the items which are too close together
       * @param {array} oldClusters 
       * @param {number} scale      The scale of the current window : (windowWidth / (endDate - startDate)) 
       * @param {{maxItems: number, clusterCriteria: function, titleTemplate: string}} options             
       * @return {array} clusters
      */
    }, {
      key: "getClusters",
      value: function getClusters(oldClusters, scale, options) {
        var _ref = typeof options === "boolean" ? {} : options, maxItems = _ref.maxItems, clusterCriteria = _ref.clusterCriteria;
        if (!clusterCriteria) {
          clusterCriteria = function clusterCriteria2() {
            return true;
          };
        }
        maxItems = maxItems || 1;
        var level = -1;
        var granularity = 2;
        var timeWindow = 0;
        if (scale > 0) {
          if (scale >= 1) {
            return [];
          }
          level = Math.abs(Math.round(Math.log(100 / scale) / Math.log(granularity)));
          timeWindow = Math.abs(Math.pow(granularity, level));
        }
        if (this.dataChanged) {
          var levelChanged = level != this.cacheLevel;
          var applyDataNow = this.applyOnChangedLevel ? levelChanged : true;
          if (applyDataNow) {
            this._dropLevelsCache();
            this._filterData();
          }
        }
        this.cacheLevel = level;
        var clusters = this.cache[level];
        if (!clusters) {
          clusters = [];
          for (var groupName in this.groups) {
            if (this.groups.hasOwnProperty(groupName)) {
              var items = this.groups[groupName];
              var iMax = items.length;
              var i2 = 0;
              while (i2 < iMax) {
                var item = items[i2];
                var neighbors = 1;
                var j = i2 - 1;
                while (j >= 0 && item.center - items[j].center < timeWindow / 2) {
                  if (!items[j].cluster && clusterCriteria(item.data, items[j].data)) {
                    neighbors++;
                  }
                  j--;
                }
                var k = i2 + 1;
                while (k < items.length && items[k].center - item.center < timeWindow / 2) {
                  if (clusterCriteria(item.data, items[k].data)) {
                    neighbors++;
                  }
                  k++;
                }
                var l = clusters.length - 1;
                while (l >= 0 && item.center - clusters[l].center < timeWindow) {
                  if (item.group == clusters[l].group && clusterCriteria(item.data, clusters[l].data)) {
                    neighbors++;
                  }
                  l--;
                }
                if (neighbors > maxItems) {
                  var num = neighbors - maxItems + 1;
                  var clusterItems = [];
                  var m = i2;
                  while (clusterItems.length < num && m < items.length) {
                    if (clusterCriteria(items[i2].data, items[m].data)) {
                      clusterItems.push(items[m]);
                    }
                    m++;
                  }
                  var groupId = this.itemSet.getGroupId(item.data);
                  var group = this.itemSet.groups[groupId] || this.itemSet.groups[ReservedGroupIds.UNGROUPED];
                  var cluster = this._getClusterForItems(clusterItems, group, oldClusters, options);
                  clusters.push(cluster);
                  i2 += num;
                } else {
                  delete item.cluster;
                  i2 += 1;
                }
              }
            }
          }
          this.cache[level] = clusters;
        }
        return clusters;
      }
      /**
       * Filter the items per group.
       * @private
       */
    }, {
      key: "_filterData",
      value: function _filterData() {
        var groups = {};
        this.groups = groups;
        for (var _i = 0, _Object$values = _Object$values2(this.items); _i < _Object$values.length; _i++) {
          var item = _Object$values[_i];
          var groupName = item.parent ? item.parent.groupId : "";
          var group = groups[groupName];
          if (!group) {
            group = [];
            groups[groupName] = group;
          }
          group.push(item);
          if (item.data.start) {
            if (item.data.end) {
              item.center = (item.data.start.valueOf() + item.data.end.valueOf()) / 2;
            } else {
              item.center = item.data.start.valueOf();
            }
          }
        }
        for (var currentGroupName in groups) {
          if (groups.hasOwnProperty(currentGroupName)) {
            var _context;
            _sortInstanceProperty(_context = groups[currentGroupName]).call(_context, function(a, b) {
              return a.center - b.center;
            });
          }
        }
        this.dataChanged = false;
      }
      /**
       * Create new cluster or return existing
       * @private
       * @param {array} clusterItems    
       * @param {object} group 
       * @param {array} oldClusters 
       * @param {object} options 
       * @returns {object} cluster
       */
    }, {
      key: "_getClusterForItems",
      value: function _getClusterForItems(clusterItems, group, oldClusters, options) {
        var _context2;
        var oldClustersLookup = _mapInstanceProperty(_context2 = oldClusters || []).call(_context2, function(cluster2) {
          var _context3;
          return {
            cluster: cluster2,
            itemsIds: new _Set(_mapInstanceProperty(_context3 = cluster2.data.uiItems).call(_context3, function(item) {
              return item.id;
            }))
          };
        });
        var cluster;
        if (oldClustersLookup.length) {
          var _iterator = _createForOfIteratorHelper$2(oldClustersLookup), _step;
          try {
            var _loop = function _loop2() {
              var oldClusterData = _step.value;
              if (oldClusterData.itemsIds.size === clusterItems.length && _everyInstanceProperty(clusterItems).call(clusterItems, function(clusterItem) {
                return oldClusterData.itemsIds.has(clusterItem.id);
              })) {
                cluster = oldClusterData.cluster;
                return "break";
              }
            };
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _ret = _loop();
              if (_ret === "break")
                break;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        if (cluster) {
          cluster.setUiItems(clusterItems);
          if (cluster.group !== group) {
            if (cluster.group) {
              cluster.group.remove(cluster);
            }
            if (group) {
              group.add(cluster);
              cluster.group = group;
            }
          }
          return cluster;
        }
        var titleTemplate = options.titleTemplate || "";
        var conversion = {
          toScreen: this.itemSet.body.util.toScreen,
          toTime: this.itemSet.body.util.toTime
        };
        var title = titleTemplate.replace(/{count}/, clusterItems.length);
        var clusterContent = '<div title="' + title + '">' + clusterItems.length + "</div>";
        var clusterOptions = _Object$assign({}, options, this.itemSet.options);
        var data2 = {
          "content": clusterContent,
          "title": title,
          "group": group,
          "uiItems": clusterItems,
          "eventEmitter": this.itemSet.body.emitter,
          "range": this.itemSet.body.range
        };
        cluster = this.createClusterItem(data2, conversion, clusterOptions);
        if (group) {
          group.add(cluster);
          cluster.group = group;
        }
        cluster.attach();
        return cluster;
      }
      /**
       * Drop cache
       * @private
       */
    }, {
      key: "_dropLevelsCache",
      value: function _dropLevelsCache() {
        this.cache = {};
        this.cacheLevel = -1;
        this.cache[this.cacheLevel] = [];
      }
    }]);
    return ClusterGenerator2;
  }();
  var css_248z$3 = '\n.vis-itemset {\n  position: relative;\n  padding: 0;\n  margin: 0;\n\n  box-sizing: border-box;\n}\n\n.vis-itemset .vis-background,\n.vis-itemset .vis-foreground {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  overflow: visible;\n}\n\n.vis-axis {\n  position: absolute;\n  width: 100%;\n  height: 0;\n  left: 0;\n  z-index: 1;\n}\n\n.vis-foreground .vis-group {\n  position: relative;\n  box-sizing: border-box;\n  border-bottom: 1px solid #bfbfbf;\n}\n\n.vis-foreground .vis-group:last-child {\n  border-bottom: none;\n}\n\n.vis-nesting-group {\n  cursor: pointer;\n}\n\n.vis-label.vis-nested-group.vis-group-level-unknown-but-gte1 {\n  background: #f5f5f5;\n}\n.vis-label.vis-nested-group.vis-group-level-0 {\n  background-color: #ffffff;\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-0 .vis-inner {\n  padding-left: 0;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-0 .vis-inner {\n  padding-right: 0;\n}\n.vis-label.vis-nested-group.vis-group-level-1 {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-1 .vis-inner {\n  padding-left: 15px;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-1 .vis-inner {\n  padding-right: 15px;\n}\n.vis-label.vis-nested-group.vis-group-level-2 {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-2 .vis-inner {\n  padding-left: 30px;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-2 .vis-inner {\n  padding-right: 30px;\n}\n.vis-label.vis-nested-group.vis-group-level-3 {\n  background-color: rgba(0, 0, 0, 0.15);\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-3 .vis-inner {\n  padding-left: 45px;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-3 .vis-inner {\n  padding-right: 45px;\n}\n.vis-label.vis-nested-group.vis-group-level-4 {\n  background-color: rgba(0, 0, 0, 0.2);\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-4 .vis-inner {\n  padding-left: 60px;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-4 .vis-inner {\n  padding-right: 60px;\n}\n.vis-label.vis-nested-group.vis-group-level-5 {\n  background-color: rgba(0, 0, 0, 0.25);\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-5 .vis-inner {\n  padding-left: 75px;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-5 .vis-inner {\n  padding-right: 75px;\n}\n.vis-label.vis-nested-group.vis-group-level-6 {\n  background-color: rgba(0, 0, 0, 0.3);\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-6 .vis-inner {\n  padding-left: 90px;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-6 .vis-inner {\n  padding-right: 90px;\n}\n.vis-label.vis-nested-group.vis-group-level-7 {\n  background-color: rgba(0, 0, 0, 0.35);\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-7 .vis-inner {\n  padding-left: 105px;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-7 .vis-inner {\n  padding-right: 105px;\n}\n.vis-label.vis-nested-group.vis-group-level-8 {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-8 .vis-inner {\n  padding-left: 120px;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-8 .vis-inner {\n  padding-right: 120px;\n}\n.vis-label.vis-nested-group.vis-group-level-9 {\n  background-color: rgba(0, 0, 0, 0.45);\n}\n.vis-ltr .vis-label.vis-nested-group.vis-group-level-9 .vis-inner {\n  padding-left: 135px;\n}\n.vis-rtl .vis-label.vis-nested-group.vis-group-level-9 .vis-inner {\n  padding-right: 135px;\n}\n/* default takes over beginning with level-10 (thats why we add .vis-nested-group\n  to the selectors above, to have higher specifity than these rules for the defaults) */\n.vis-label.vis-nested-group {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vis-ltr .vis-label.vis-nested-group .vis-inner {\n  padding-left: 150px;\n}\n.vis-rtl .vis-label.vis-nested-group .vis-inner {\n  padding-right: 150px;\n}\n\n.vis-group-level-unknown-but-gte1 {\n  border: 1px solid red;\n}\n\n/* expanded/collapsed indicators */\n.vis-label.vis-nesting-group:before,\n.vis-label.vis-nesting-group:before {\n  display: inline-block;\n  width: 15px;\n}\n.vis-label.vis-nesting-group.expanded:before {\n  content: "\\25BC";\n}\n.vis-label.vis-nesting-group.collapsed:before {\n  content: "\\25B6";\n}\n.vis-rtl .vis-label.vis-nesting-group.collapsed:before {\n  content: "\\25C0";\n}\n/* compensate missing expanded/collapsed indicator, but only at levels > 0 */\n.vis-ltr .vis-label:not(.vis-nesting-group):not(.vis-group-level-0) {\n  padding-left: 15px;\n}\n.vis-rtl .vis-label:not(.vis-nesting-group):not(.vis-group-level-0) {\n  padding-right: 15px;\n}\n\n.vis-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n}';
  styleInject(css_248z$3);
  var css_248z$2 = "\n.vis-labelset {\n  position: relative;\n\n  overflow: hidden;\n\n  box-sizing: border-box;\n}\n\n.vis-labelset .vis-label {\n  position: relative;\n  left: 0;\n  top: 0;\n  width: 100%;\n  color: #4d4d4d;\n\n  box-sizing: border-box;\n}\n\n.vis-labelset .vis-label {\n  border-bottom: 1px solid #bfbfbf;\n}\n\n.vis-labelset .vis-label.draggable {\n  cursor: pointer;\n}\n\n.vis-group-is-dragging {\n  background: rgba(0, 0, 0, .1);\n}\n\n.vis-labelset .vis-label:last-child {\n  border-bottom: none;\n}\n\n.vis-labelset .vis-label .vis-inner {\n  display: inline-block;\n  padding: 5px;\n}\n\n.vis-labelset .vis-label .vis-inner.vis-hidden {\n  padding: 0;\n}\n";
  styleInject(css_248z$2);
  function _createForOfIteratorHelper$1(o, allowArrayLike) {
    var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
    if (!it2) {
      if (_Array$isArray(o) || (it2 = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it2)
          o = it2;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n() {
          if (i2 >= o.length)
            return { done: true };
          return { done: false, value: o[i2++] };
        }, e: function e(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it2 = it2.call(o);
    }, n: function n() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it2.return != null)
          it2.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray$1(o, minLen) {
    var _context34;
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray$1(o, minLen);
    var n = _sliceInstanceProperty(_context34 = Object.prototype.toString.call(o)).call(_context34, 8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from$1(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray$1(o, minLen);
  }
  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  function _createSuper$2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$2() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var UNGROUPED$1 = "__ungrouped__";
  var BACKGROUND = "__background__";
  var ItemSet = /* @__PURE__ */ function(_Component) {
    _inherits(ItemSet2, _Component);
    var _super = _createSuper$2(ItemSet2);
    function ItemSet2(body, options) {
      var _this;
      _classCallCheck(this, ItemSet2);
      _this = _super.call(this);
      _this.body = body;
      _this.defaultOptions = {
        type: null,
        // 'box', 'point', 'range', 'background'
        orientation: {
          item: "bottom"
          // item orientation: 'top' or 'bottom'
        },
        align: "auto",
        // alignment of box items
        stack: true,
        stackSubgroups: true,
        groupOrderSwap: function groupOrderSwap(fromGroup, toGroup, groups) {
          var targetOrder = toGroup.order;
          toGroup.order = fromGroup.order;
          fromGroup.order = targetOrder;
        },
        groupOrder: "order",
        selectable: true,
        multiselect: false,
        longSelectPressTime: 251,
        itemsAlwaysDraggable: {
          item: false,
          range: false
        },
        editable: {
          updateTime: false,
          updateGroup: false,
          add: false,
          remove: false,
          overrideItems: false
        },
        groupEditable: {
          order: false,
          add: false,
          remove: false
        },
        snap: TimeStep.snap,
        // Only called when `objectData.target === 'item'.
        onDropObjectOnItem: function onDropObjectOnItem(objectData, item, callback) {
          callback(item);
        },
        onAdd: function onAdd(item, callback) {
          callback(item);
        },
        onUpdate: function onUpdate(item, callback) {
          callback(item);
        },
        onMove: function onMove(item, callback) {
          callback(item);
        },
        onRemove: function onRemove(item, callback) {
          callback(item);
        },
        onMoving: function onMoving(item, callback) {
          callback(item);
        },
        onAddGroup: function onAddGroup(item, callback) {
          callback(item);
        },
        onMoveGroup: function onMoveGroup(item, callback) {
          callback(item);
        },
        onRemoveGroup: function onRemoveGroup(item, callback) {
          callback(item);
        },
        margin: {
          item: {
            horizontal: 10,
            vertical: 10
          },
          axis: 20
        },
        showTooltips: true,
        tooltip: {
          followMouse: false,
          overflowMethod: "flip",
          delay: 500
        },
        tooltipOnItemUpdateTime: false
      };
      _this.options = availableUtils.extend({}, _this.defaultOptions);
      _this.options.rtl = options.rtl;
      _this.options.onTimeout = options.onTimeout;
      _this.conversion = {
        toScreen: body.util.toScreen,
        toTime: body.util.toTime
      };
      _this.dom = {};
      _this.props = {};
      _this.hammer = null;
      var me = _assertThisInitialized(_this);
      _this.itemsData = null;
      _this.groupsData = null;
      _this.itemsSettingTime = null;
      _this.initialItemSetDrawn = false;
      _this.userContinueNotBail = null;
      _this.sequentialSelection = false;
      _this.itemListeners = {
        "add": function add(event2, params, senderId) {
          me._onAdd(params.items);
          if (me.options.cluster) {
            me.clusterGenerator.setItems(me.items, {
              applyOnChangedLevel: false
            });
          }
          me.redraw();
        },
        "update": function update(event2, params, senderId) {
          me._onUpdate(params.items);
          if (me.options.cluster) {
            me.clusterGenerator.setItems(me.items, {
              applyOnChangedLevel: false
            });
          }
          me.redraw();
        },
        "remove": function remove(event2, params, senderId) {
          me._onRemove(params.items);
          if (me.options.cluster) {
            me.clusterGenerator.setItems(me.items, {
              applyOnChangedLevel: false
            });
          }
          me.redraw();
        }
      };
      _this.groupListeners = {
        "add": function add(event2, params, senderId) {
          me._onAddGroups(params.items);
          if (me.groupsData && me.groupsData.length > 0) {
            var _context;
            var groupsData = me.groupsData.getDataSet();
            _forEachInstanceProperty(_context = groupsData.get()).call(_context, function(groupData) {
              if (groupData.nestedGroups) {
                var _context2;
                if (groupData.showNested != false) {
                  groupData.showNested = true;
                }
                var updatedGroups = [];
                _forEachInstanceProperty(_context2 = groupData.nestedGroups).call(_context2, function(nestedGroupId) {
                  var updatedNestedGroup = groupsData.get(nestedGroupId);
                  if (!updatedNestedGroup) {
                    return;
                  }
                  updatedNestedGroup.nestedInGroup = groupData.id;
                  if (groupData.showNested == false) {
                    updatedNestedGroup.visible = false;
                  }
                  updatedGroups = _concatInstanceProperty(updatedGroups).call(updatedGroups, updatedNestedGroup);
                });
                groupsData.update(updatedGroups, senderId);
              }
            });
          }
        },
        "update": function update(event2, params, senderId) {
          me._onUpdateGroups(params.items);
        },
        "remove": function remove(event2, params, senderId) {
          me._onRemoveGroups(params.items);
        }
      };
      _this.items = {};
      _this.groups = {};
      _this.groupIds = [];
      _this.selection = [];
      _this.popup = null;
      _this.popupTimer = null;
      _this.touchParams = {};
      _this.groupTouchParams = {
        group: null,
        isDragging: false
      };
      _this._create();
      _this.setOptions(options);
      _this.clusters = [];
      return _this;
    }
    _createClass(ItemSet2, [{
      key: "_create",
      value: function _create() {
        var _this2 = this, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13, _context14, _context15, _context16, _context17;
        var frame = document.createElement("div");
        frame.className = "vis-itemset";
        frame["vis-itemset"] = this;
        this.dom.frame = frame;
        var background = document.createElement("div");
        background.className = "vis-background";
        frame.appendChild(background);
        this.dom.background = background;
        var foreground = document.createElement("div");
        foreground.className = "vis-foreground";
        frame.appendChild(foreground);
        this.dom.foreground = foreground;
        var axis = document.createElement("div");
        axis.className = "vis-axis";
        this.dom.axis = axis;
        var labelSet = document.createElement("div");
        labelSet.className = "vis-labelset";
        this.dom.labelSet = labelSet;
        this._updateUngrouped();
        var backgroundGroup = new BackgroundGroup(BACKGROUND, null, this);
        backgroundGroup.show();
        this.groups[BACKGROUND] = backgroundGroup;
        this.hammer = new Hammer(this.body.dom.centerContainer);
        this.hammer.on("hammer.input", function(event2) {
          if (event2.isFirst) {
            _this2._onTouch(event2);
          }
        });
        this.hammer.on("panstart", _bindInstanceProperty$1(_context3 = this._onDragStart).call(_context3, this));
        this.hammer.on("panmove", _bindInstanceProperty$1(_context4 = this._onDrag).call(_context4, this));
        this.hammer.on("panend", _bindInstanceProperty$1(_context5 = this._onDragEnd).call(_context5, this));
        this.hammer.get("pan").set({
          threshold: 5,
          direction: Hammer.ALL
        });
        this.hammer.get("press").set({
          time: 1e4
        });
        this.hammer.on("tap", _bindInstanceProperty$1(_context6 = this._onSelectItem).call(_context6, this));
        this.hammer.on("press", _bindInstanceProperty$1(_context7 = this._onMultiSelectItem).call(_context7, this));
        this.hammer.get("press").set({
          time: 1e4
        });
        this.hammer.on("doubletap", _bindInstanceProperty$1(_context8 = this._onAddItem).call(_context8, this));
        if (this.options.rtl) {
          this.groupHammer = new Hammer(this.body.dom.rightContainer);
        } else {
          this.groupHammer = new Hammer(this.body.dom.leftContainer);
        }
        this.groupHammer.on("tap", _bindInstanceProperty$1(_context9 = this._onGroupClick).call(_context9, this));
        this.groupHammer.on("panstart", _bindInstanceProperty$1(_context10 = this._onGroupDragStart).call(_context10, this));
        this.groupHammer.on("panmove", _bindInstanceProperty$1(_context11 = this._onGroupDrag).call(_context11, this));
        this.groupHammer.on("panend", _bindInstanceProperty$1(_context12 = this._onGroupDragEnd).call(_context12, this));
        this.groupHammer.get("pan").set({
          threshold: 5,
          direction: Hammer.DIRECTION_VERTICAL
        });
        this.body.dom.centerContainer.addEventListener("mouseover", _bindInstanceProperty$1(_context13 = this._onMouseOver).call(_context13, this));
        this.body.dom.centerContainer.addEventListener("mouseout", _bindInstanceProperty$1(_context14 = this._onMouseOut).call(_context14, this));
        this.body.dom.centerContainer.addEventListener("mousemove", _bindInstanceProperty$1(_context15 = this._onMouseMove).call(_context15, this));
        this.body.dom.centerContainer.addEventListener("contextmenu", _bindInstanceProperty$1(_context16 = this._onDragEnd).call(_context16, this));
        this.body.dom.centerContainer.addEventListener("mousewheel", _bindInstanceProperty$1(_context17 = this._onMouseWheel).call(_context17, this));
        this.show();
      }
      /**
       * Set options for the ItemSet. Existing options will be extended/overwritten.
       * @param {Object} [options] The following options are available:
       *                           {string} type
       *                              Default type for the items. Choose from 'box'
       *                              (default), 'point', 'range', or 'background'.
       *                              The default style can be overwritten by
       *                              individual items.
       *                           {string} align
       *                              Alignment for the items, only applicable for
       *                              BoxItem. Choose 'center' (default), 'left', or
       *                              'right'.
       *                           {string} orientation.item
       *                              Orientation of the item set. Choose 'top' or
       *                              'bottom' (default).
       *                           {Function} groupOrder
       *                              A sorting function for ordering groups
       *                           {boolean} stack
       *                              If true (default), items will be stacked on
       *                              top of each other.
       *                           {number} margin.axis
       *                              Margin between the axis and the items in pixels.
       *                              Default is 20.
       *                           {number} margin.item.horizontal
       *                              Horizontal margin between items in pixels.
       *                              Default is 10.
       *                           {number} margin.item.vertical
       *                              Vertical Margin between items in pixels.
       *                              Default is 10.
       *                           {number} margin.item
       *                              Margin between items in pixels in both horizontal
       *                              and vertical direction. Default is 10.
       *                           {number} margin
       *                              Set margin for both axis and items in pixels.
       *                           {boolean} selectable
       *                              If true (default), items can be selected.
       *                           {boolean} multiselect
       *                              If true, multiple items can be selected.
       *                              False by default.
       *                           {boolean} editable
       *                              Set all editable options to true or false
       *                           {boolean} editable.updateTime
       *                              Allow dragging an item to an other moment in time
       *                           {boolean} editable.updateGroup
       *                              Allow dragging an item to an other group
       *                           {boolean} editable.add
       *                              Allow creating new items on double tap
       *                           {boolean} editable.remove
       *                              Allow removing items by clicking the delete button
       *                              top right of a selected item.
       *                           {Function(item: Item, callback: Function)} onAdd
       *                              Callback function triggered when an item is about to be added:
       *                              when the user double taps an empty space in the Timeline.
       *                           {Function(item: Item, callback: Function)} onUpdate
       *                              Callback function fired when an item is about to be updated.
       *                              This function typically has to show a dialog where the user
       *                              change the item. If not implemented, nothing happens.
       *                           {Function(item: Item, callback: Function)} onMove
       *                              Fired when an item has been moved. If not implemented,
       *                              the move action will be accepted.
       *                           {Function(item: Item, callback: Function)} onRemove
       *                              Fired when an item is about to be deleted.
       *                              If not implemented, the item will be always removed.
       */
    }, {
      key: "setOptions",
      value: function setOptions(options) {
        var _this3 = this;
        if (options) {
          var _context18, _context20;
          var fields = ["type", "rtl", "align", "order", "stack", "stackSubgroups", "selectable", "multiselect", "sequentialSelection", "multiselectPerGroup", "longSelectPressTime", "groupOrder", "dataAttributes", "template", "groupTemplate", "visibleFrameTemplate", "hide", "snap", "groupOrderSwap", "showTooltips", "tooltip", "tooltipOnItemUpdateTime", "groupHeightMode", "onTimeout"];
          availableUtils.selectiveExtend(fields, this.options, options);
          if ("itemsAlwaysDraggable" in options) {
            if (typeof options.itemsAlwaysDraggable === "boolean") {
              this.options.itemsAlwaysDraggable.item = options.itemsAlwaysDraggable;
              this.options.itemsAlwaysDraggable.range = false;
            } else if (_typeof$1(options.itemsAlwaysDraggable) === "object") {
              availableUtils.selectiveExtend(["item", "range"], this.options.itemsAlwaysDraggable, options.itemsAlwaysDraggable);
              if (!this.options.itemsAlwaysDraggable.item) {
                this.options.itemsAlwaysDraggable.range = false;
              }
            }
          }
          if ("sequentialSelection" in options) {
            if (typeof options.sequentialSelection === "boolean") {
              this.options.sequentialSelection = options.sequentialSelection;
            }
          }
          if ("orientation" in options) {
            if (typeof options.orientation === "string") {
              this.options.orientation.item = options.orientation === "top" ? "top" : "bottom";
            } else if (_typeof$1(options.orientation) === "object" && "item" in options.orientation) {
              this.options.orientation.item = options.orientation.item;
            }
          }
          if ("margin" in options) {
            if (typeof options.margin === "number") {
              this.options.margin.axis = options.margin;
              this.options.margin.item.horizontal = options.margin;
              this.options.margin.item.vertical = options.margin;
            } else if (_typeof$1(options.margin) === "object") {
              availableUtils.selectiveExtend(["axis"], this.options.margin, options.margin);
              if ("item" in options.margin) {
                if (typeof options.margin.item === "number") {
                  this.options.margin.item.horizontal = options.margin.item;
                  this.options.margin.item.vertical = options.margin.item;
                } else if (_typeof$1(options.margin.item) === "object") {
                  availableUtils.selectiveExtend(["horizontal", "vertical"], this.options.margin.item, options.margin.item);
                }
              }
            }
          }
          _forEachInstanceProperty(_context18 = ["locale", "locales"]).call(_context18, function(key) {
            if (key in options) {
              _this3.options[key] = options[key];
            }
          });
          if ("editable" in options) {
            if (typeof options.editable === "boolean") {
              this.options.editable.updateTime = options.editable;
              this.options.editable.updateGroup = options.editable;
              this.options.editable.add = options.editable;
              this.options.editable.remove = options.editable;
              this.options.editable.overrideItems = false;
            } else if (_typeof$1(options.editable) === "object") {
              availableUtils.selectiveExtend(["updateTime", "updateGroup", "add", "remove", "overrideItems"], this.options.editable, options.editable);
            }
          }
          if ("groupEditable" in options) {
            if (typeof options.groupEditable === "boolean") {
              this.options.groupEditable.order = options.groupEditable;
              this.options.groupEditable.add = options.groupEditable;
              this.options.groupEditable.remove = options.groupEditable;
            } else if (_typeof$1(options.groupEditable) === "object") {
              availableUtils.selectiveExtend(["order", "add", "remove"], this.options.groupEditable, options.groupEditable);
            }
          }
          var addCallback = function addCallback2(name) {
            var fn = options[name];
            if (fn) {
              if (!(typeof fn === "function")) {
                var _context19;
                throw new Error(_concatInstanceProperty(_context19 = "option ".concat(name, " must be a function ")).call(_context19, name, "(item, callback)"));
              }
              _this3.options[name] = fn;
            }
          };
          _forEachInstanceProperty(_context20 = ["onDropObjectOnItem", "onAdd", "onUpdate", "onRemove", "onMove", "onMoving", "onAddGroup", "onMoveGroup", "onRemoveGroup"]).call(_context20, addCallback);
          if (options.cluster) {
            _Object$assign(this.options, {
              cluster: options.cluster
            });
            if (!this.clusterGenerator) {
              this.clusterGenerator = new ClusterGenerator(this);
            }
            this.clusterGenerator.setItems(this.items, {
              applyOnChangedLevel: false
            });
            this.markDirty({
              refreshItems: true,
              restackGroups: true
            });
            this.redraw();
          } else if (this.clusterGenerator) {
            this._detachAllClusters();
            this.clusters = [];
            this.clusterGenerator = null;
            this.options.cluster = void 0;
            this.markDirty({
              refreshItems: true,
              restackGroups: true
            });
            this.redraw();
          } else {
            this.markDirty();
          }
        }
      }
      /**
       * Mark the ItemSet dirty so it will refresh everything with next redraw.
       * Optionally, all items can be marked as dirty and be refreshed.
       * @param {{refreshItems: boolean}} [options]
       */
    }, {
      key: "markDirty",
      value: function markDirty(options) {
        this.groupIds = [];
        if (options) {
          if (options.refreshItems) {
            _forEachInstanceProperty(availableUtils).call(availableUtils, this.items, function(item) {
              item.dirty = true;
              if (item.displayed)
                item.redraw();
            });
          }
          if (options.restackGroups) {
            _forEachInstanceProperty(availableUtils).call(availableUtils, this.groups, function(group, key) {
              if (key === BACKGROUND)
                return;
              group.stackDirty = true;
            });
          }
        }
      }
      /**
       * Destroy the ItemSet
       */
    }, {
      key: "destroy",
      value: function destroy() {
        this.clearPopupTimer();
        this.hide();
        this.setItems(null);
        this.setGroups(null);
        this.hammer && this.hammer.destroy();
        this.groupHammer && this.groupHammer.destroy();
        this.hammer = null;
        this.body = null;
        this.conversion = null;
      }
      /**
       * Hide the component from the DOM
       */
    }, {
      key: "hide",
      value: function hide() {
        if (this.dom.frame.parentNode) {
          this.dom.frame.parentNode.removeChild(this.dom.frame);
        }
        if (this.dom.axis.parentNode) {
          this.dom.axis.parentNode.removeChild(this.dom.axis);
        }
        if (this.dom.labelSet.parentNode) {
          this.dom.labelSet.parentNode.removeChild(this.dom.labelSet);
        }
      }
      /**
       * Show the component in the DOM (when not already visible).
       */
    }, {
      key: "show",
      value: function show() {
        if (!this.dom.frame.parentNode) {
          this.body.dom.center.appendChild(this.dom.frame);
        }
        if (!this.dom.axis.parentNode) {
          this.body.dom.backgroundVertical.appendChild(this.dom.axis);
        }
        if (!this.dom.labelSet.parentNode) {
          if (this.options.rtl) {
            this.body.dom.right.appendChild(this.dom.labelSet);
          } else {
            this.body.dom.left.appendChild(this.dom.labelSet);
          }
        }
      }
      /**
       * Activates the popup timer to show the given popup after a fixed time.
       * @param {Popup} popup
       */
    }, {
      key: "setPopupTimer",
      value: function setPopupTimer(popup) {
        this.clearPopupTimer();
        if (popup) {
          var delay = this.options.tooltip.delay || typeof this.options.tooltip.delay === "number" ? this.options.tooltip.delay : 500;
          this.popupTimer = _setTimeout(function() {
            popup.show();
          }, delay);
        }
      }
      /**
       * Clears the popup timer for the tooltip.
       */
    }, {
      key: "clearPopupTimer",
      value: function clearPopupTimer() {
        if (this.popupTimer != null) {
          clearTimeout(this.popupTimer);
          this.popupTimer = null;
        }
      }
      /**
       * Set selected items by their id. Replaces the current selection
       * Unknown id's are silently ignored.
       * @param {string[] | string} [ids] An array with zero or more id's of the items to be
       *                                  selected, or a single item id. If ids is undefined
       *                                  or an empty array, all items will be unselected.
       */
    }, {
      key: "setSelection",
      value: function setSelection(ids) {
        var _context21;
        if (ids == void 0) {
          ids = [];
        }
        if (!_Array$isArray(ids)) {
          ids = [ids];
        }
        var idsToDeselect = _filterInstanceProperty(_context21 = this.selection).call(_context21, function(id3) {
          return _indexOfInstanceProperty(ids).call(ids, id3) === -1;
        });
        var _iterator = _createForOfIteratorHelper$1(idsToDeselect), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var selectedId = _step.value;
            var item = this.getItemById(selectedId);
            if (item) {
              item.unselect();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        this.selection = _toConsumableArray(ids);
        var _iterator2 = _createForOfIteratorHelper$1(ids), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var id2 = _step2.value;
            var _item2 = this.getItemById(id2);
            if (_item2) {
              _item2.select();
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      /**
       * Get the selected items by their id
       * @return {Array} ids  The ids of the selected items
       */
    }, {
      key: "getSelection",
      value: function getSelection() {
        var _context22;
        return _concatInstanceProperty(_context22 = this.selection).call(_context22, []);
      }
      /**
       * Get the id's of the currently visible items.
       * @returns {Array} The ids of the visible items
       */
    }, {
      key: "getVisibleItems",
      value: function getVisibleItems() {
        var range = this.body.range.getRange();
        var right;
        var left;
        if (this.options.rtl) {
          right = this.body.util.toScreen(range.start);
          left = this.body.util.toScreen(range.end);
        } else {
          left = this.body.util.toScreen(range.start);
          right = this.body.util.toScreen(range.end);
        }
        var ids = [];
        for (var groupId in this.groups) {
          if (this.groups.hasOwnProperty(groupId)) {
            var group = this.groups[groupId];
            var rawVisibleItems = group.isVisible ? group.visibleItems : [];
            var _iterator3 = _createForOfIteratorHelper$1(rawVisibleItems), _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                var item = _step3.value;
                if (this.options.rtl) {
                  if (item.right < left && item.right + item.width > right) {
                    ids.push(item.id);
                  }
                } else {
                  if (item.left < right && item.left + item.width > left) {
                    ids.push(item.id);
                  }
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        }
        return ids;
      }
      /**
      * Get the id's of the items at specific time, where a click takes place on the timeline.
      * @returns {Array} The ids of all items in existence at the time of click event on the timeline.
      */
    }, {
      key: "getItemsAtCurrentTime",
      value: function getItemsAtCurrentTime(timeOfEvent) {
        var right;
        var left;
        if (this.options.rtl) {
          right = this.body.util.toScreen(timeOfEvent);
          left = this.body.util.toScreen(timeOfEvent);
        } else {
          left = this.body.util.toScreen(timeOfEvent);
          right = this.body.util.toScreen(timeOfEvent);
        }
        var ids = [];
        for (var groupId in this.groups) {
          if (this.groups.hasOwnProperty(groupId)) {
            var group = this.groups[groupId];
            var rawVisibleItems = group.isVisible ? group.visibleItems : [];
            var _iterator4 = _createForOfIteratorHelper$1(rawVisibleItems), _step4;
            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                var item = _step4.value;
                if (this.options.rtl) {
                  if (item.right < left && item.right + item.width > right) {
                    ids.push(item.id);
                  }
                } else {
                  if (item.left < right && item.left + item.width > left) {
                    ids.push(item.id);
                  }
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        }
        return ids;
      }
      /**
       * Get the id's of the currently visible groups.
       * @returns {Array} The ids of the visible groups
       */
    }, {
      key: "getVisibleGroups",
      value: function getVisibleGroups() {
        var ids = [];
        for (var groupId in this.groups) {
          if (this.groups.hasOwnProperty(groupId)) {
            var group = this.groups[groupId];
            if (group.isVisible) {
              ids.push(groupId);
            }
          }
        }
        return ids;
      }
      /**
       * get item by id
       * @param {string} id
       * @return {object} item
       */
    }, {
      key: "getItemById",
      value: function getItemById(id2) {
        var _context23;
        return this.items[id2] || _findInstanceProperty(_context23 = this.clusters).call(_context23, function(cluster) {
          return cluster.id === id2;
        });
      }
      /**
       * Deselect a selected item
       * @param {string | number} id
       * @private
       */
    }, {
      key: "_deselect",
      value: function _deselect(id2) {
        var selection = this.selection;
        for (var i2 = 0, ii = selection.length; i2 < ii; i2++) {
          if (selection[i2] == id2) {
            _spliceInstanceProperty(selection).call(selection, i2, 1);
            break;
          }
        }
      }
      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
    }, {
      key: "redraw",
      value: function redraw() {
        var margin = this.options.margin;
        var range = this.body.range;
        var asSize2 = availableUtils.option.asSize;
        var options = this.options;
        var orientation = options.orientation.item;
        var resized = false;
        var frame = this.dom.frame;
        this.props.top = this.body.domProps.top.height + this.body.domProps.border.top;
        if (this.options.rtl) {
          this.props.right = this.body.domProps.right.width + this.body.domProps.border.right;
        } else {
          this.props.left = this.body.domProps.left.width + this.body.domProps.border.left;
        }
        frame.className = "vis-itemset";
        if (this.options.cluster) {
          this._clusterItems();
        }
        resized = this._orderGroups() || resized;
        var visibleInterval = range.end - range.start;
        var zoomed = visibleInterval != this.lastVisibleInterval || this.props.width != this.props.lastWidth;
        var scrolled = range.start != this.lastRangeStart;
        var changedStackOption = options.stack != this.lastStack;
        var changedStackSubgroupsOption = options.stackSubgroups != this.lastStackSubgroups;
        var forceRestack = zoomed || scrolled || changedStackOption || changedStackSubgroupsOption;
        this.lastVisibleInterval = visibleInterval;
        this.lastRangeStart = range.start;
        this.lastStack = options.stack;
        this.lastStackSubgroups = options.stackSubgroups;
        this.props.lastWidth = this.props.width;
        var firstGroup = this._firstGroup();
        var firstMargin = {
          item: margin.item,
          axis: margin.axis
        };
        var nonFirstMargin = {
          item: margin.item,
          axis: margin.item.vertical / 2
        };
        var height = 0;
        var minHeight = margin.axis + margin.item.vertical;
        this.groups[BACKGROUND].redraw(range, nonFirstMargin, forceRestack);
        var redrawQueue = {};
        var redrawQueueLength = 0;
        _forEachInstanceProperty(availableUtils).call(availableUtils, this.groups, function(group, key) {
          if (key === BACKGROUND)
            return;
          var groupMargin = group == firstGroup ? firstMargin : nonFirstMargin;
          var returnQueue = true;
          redrawQueue[key] = group.redraw(range, groupMargin, forceRestack, returnQueue);
          redrawQueueLength = redrawQueue[key].length;
        });
        var needRedraw = redrawQueueLength > 0;
        if (needRedraw) {
          var redrawResults = {};
          var _loop = function _loop2(i3) {
            _forEachInstanceProperty(availableUtils).call(availableUtils, redrawQueue, function(fns, key) {
              redrawResults[key] = fns[i3]();
            });
          };
          for (var i2 = 0; i2 < redrawQueueLength; i2++) {
            _loop(i2);
          }
          _forEachInstanceProperty(availableUtils).call(availableUtils, this.groups, function(group, key) {
            if (key === BACKGROUND)
              return;
            var groupResized = redrawResults[key];
            resized = groupResized || resized;
            height += group.height;
          });
          height = Math.max(height, minHeight);
        }
        height = Math.max(height, minHeight);
        frame.style.height = asSize2(height);
        this.props.width = frame.offsetWidth;
        this.props.height = height;
        this.dom.axis.style.top = asSize2(orientation == "top" ? this.body.domProps.top.height + this.body.domProps.border.top : this.body.domProps.top.height + this.body.domProps.centerContainer.height);
        if (this.options.rtl) {
          this.dom.axis.style.right = "0";
        } else {
          this.dom.axis.style.left = "0";
        }
        this.hammer.get("press").set({
          time: this.options.longSelectPressTime
        });
        this.initialItemSetDrawn = true;
        resized = this._isResized() || resized;
        return resized;
      }
      /**
       * Get the first group, aligned with the axis
       * @return {Group | null} firstGroup
       * @private
       */
    }, {
      key: "_firstGroup",
      value: function _firstGroup() {
        var firstGroupIndex = this.options.orientation.item == "top" ? 0 : this.groupIds.length - 1;
        var firstGroupId = this.groupIds[firstGroupIndex];
        var firstGroup = this.groups[firstGroupId] || this.groups[UNGROUPED$1];
        return firstGroup || null;
      }
      /**
       * Create or delete the group holding all ungrouped items. This group is used when
       * there are no groups specified.
       * @protected
       */
    }, {
      key: "_updateUngrouped",
      value: function _updateUngrouped() {
        var ungrouped = this.groups[UNGROUPED$1];
        var item;
        var itemId;
        if (this.groupsData) {
          if (ungrouped) {
            ungrouped.dispose();
            delete this.groups[UNGROUPED$1];
            for (itemId in this.items) {
              if (this.items.hasOwnProperty(itemId)) {
                item = this.items[itemId];
                item.parent && item.parent.remove(item);
                var groupId = this.getGroupId(item.data);
                var group = this.groups[groupId];
                group && group.add(item) || item.hide();
              }
            }
          }
        } else {
          if (!ungrouped) {
            var id2 = null;
            var data2 = null;
            ungrouped = new Group(id2, data2, this);
            this.groups[UNGROUPED$1] = ungrouped;
            for (itemId in this.items) {
              if (this.items.hasOwnProperty(itemId)) {
                item = this.items[itemId];
                ungrouped.add(item);
              }
            }
            ungrouped.show();
          }
        }
      }
      /**
       * Get the element for the labelset
       * @return {HTMLElement} labelSet
       */
    }, {
      key: "getLabelSet",
      value: function getLabelSet() {
        return this.dom.labelSet;
      }
      /**
       * Set items
       * @param {vis.DataSet | null} items
       */
    }, {
      key: "setItems",
      value: function setItems(items) {
        this.itemsSettingTime = /* @__PURE__ */ new Date();
        var me = this;
        var ids;
        var oldItemsData = this.itemsData;
        if (!items) {
          this.itemsData = null;
        } else if (isDataViewLike(items)) {
          this.itemsData = typeCoerceDataSet(items);
        } else {
          throw new TypeError("Data must implement the interface of DataSet or DataView");
        }
        if (oldItemsData) {
          _forEachInstanceProperty(availableUtils).call(availableUtils, this.itemListeners, function(callback, event2) {
            oldItemsData.off(event2, callback);
          });
          oldItemsData.dispose();
          ids = oldItemsData.getIds();
          this._onRemove(ids);
        }
        if (this.itemsData) {
          var id2 = this.id;
          _forEachInstanceProperty(availableUtils).call(availableUtils, this.itemListeners, function(callback, event2) {
            me.itemsData.on(event2, callback, id2);
          });
          ids = this.itemsData.getIds();
          this._onAdd(ids);
          this._updateUngrouped();
        }
        this.body.emitter.emit("_change", {
          queue: true
        });
      }
      /**
       * Get the current items
       * @returns {vis.DataSet | null}
       */
    }, {
      key: "getItems",
      value: function getItems() {
        return this.itemsData != null ? this.itemsData.rawDS : null;
      }
      /**
       * Set groups
       * @param {vis.DataSet} groups
       */
    }, {
      key: "setGroups",
      value: function setGroups(groups) {
        var me = this;
        var ids;
        if (this.groupsData) {
          _forEachInstanceProperty(availableUtils).call(availableUtils, this.groupListeners, function(callback, event2) {
            me.groupsData.off(event2, callback);
          });
          ids = this.groupsData.getIds();
          this.groupsData = null;
          this._onRemoveGroups(ids);
        }
        if (!groups) {
          this.groupsData = null;
        } else if (isDataViewLike(groups)) {
          this.groupsData = groups;
        } else {
          throw new TypeError("Data must implement the interface of DataSet or DataView");
        }
        if (this.groupsData) {
          var _context24;
          var groupsData = this.groupsData.getDataSet();
          _forEachInstanceProperty(_context24 = groupsData.get()).call(_context24, function(group) {
            if (group.nestedGroups) {
              var _context25;
              _forEachInstanceProperty(_context25 = group.nestedGroups).call(_context25, function(nestedGroupId) {
                var updatedNestedGroup = groupsData.get(nestedGroupId);
                updatedNestedGroup.nestedInGroup = group.id;
                if (group.showNested == false) {
                  updatedNestedGroup.visible = false;
                }
                groupsData.update(updatedNestedGroup);
              });
            }
          });
          var id2 = this.id;
          _forEachInstanceProperty(availableUtils).call(availableUtils, this.groupListeners, function(callback, event2) {
            me.groupsData.on(event2, callback, id2);
          });
          ids = this.groupsData.getIds();
          this._onAddGroups(ids);
        }
        this._updateUngrouped();
        this._order();
        if (this.options.cluster) {
          this.clusterGenerator.updateData();
          this._clusterItems();
          this.markDirty({
            refreshItems: true,
            restackGroups: true
          });
        }
        this.body.emitter.emit("_change", {
          queue: true
        });
      }
      /**
       * Get the current groups
       * @returns {vis.DataSet | null} groups
       */
    }, {
      key: "getGroups",
      value: function getGroups() {
        return this.groupsData;
      }
      /**
       * Remove an item by its id
       * @param {string | number} id
       */
    }, {
      key: "removeItem",
      value: function removeItem(id2) {
        var _this4 = this;
        var item = this.itemsData.get(id2);
        if (item) {
          this.options.onRemove(item, function(item2) {
            if (item2) {
              _this4.itemsData.remove(id2);
            }
          });
        }
      }
      /**
       * Get the time of an item based on it's data and options.type
       * @param {Object} itemData
       * @returns {string} Returns the type
       * @private
       */
    }, {
      key: "_getType",
      value: function _getType(itemData) {
        return itemData.type || this.options.type || (itemData.end ? "range" : "box");
      }
      /**
       * Get the group id for an item
       * @param {Object} itemData
       * @returns {string} Returns the groupId
       * @private
       */
    }, {
      key: "getGroupId",
      value: function getGroupId(itemData) {
        var type = this._getType(itemData);
        if (type == "background" && itemData.group == void 0) {
          return BACKGROUND;
        } else {
          return this.groupsData ? itemData.group : UNGROUPED$1;
        }
      }
      /**
       * Handle updated items
       * @param {number[]} ids
       * @protected
       */
    }, {
      key: "_onUpdate",
      value: function _onUpdate(ids) {
        var _this5 = this;
        var me = this;
        _forEachInstanceProperty(ids).call(ids, function(id2) {
          var itemData = me.itemsData.get(id2);
          var item = me.items[id2];
          var type = itemData ? me._getType(itemData) : null;
          var constructor = ItemSet2.types[type];
          var selected;
          if (item) {
            if (!constructor || !(item instanceof constructor)) {
              selected = item.selected;
              me._removeItem(item);
              item = null;
            } else {
              me._updateItem(item, itemData);
            }
          }
          if (!item && itemData) {
            if (constructor) {
              item = new constructor(itemData, me.conversion, me.options);
              item.id = id2;
              me._addItem(item);
              if (selected) {
                _this5.selection.push(id2);
                item.select();
              }
            } else {
              throw new TypeError('Unknown item type "'.concat(type, '"'));
            }
          }
        });
        this._order();
        if (this.options.cluster) {
          this.clusterGenerator.setItems(this.items, {
            applyOnChangedLevel: false
          });
          this._clusterItems();
        }
        this.body.emitter.emit("_change", {
          queue: true
        });
      }
      /**
       * Handle removed items
       * @param {number[]} ids
       * @protected
       */
    }, {
      key: "_onRemove",
      value: function _onRemove(ids) {
        var count = 0;
        var me = this;
        _forEachInstanceProperty(ids).call(ids, function(id2) {
          var item = me.items[id2];
          if (item) {
            count++;
            me._removeItem(item);
          }
        });
        if (count) {
          this._order();
          this.body.emitter.emit("_change", {
            queue: true
          });
        }
      }
      /**
       * Update the order of item in all groups
       * @private
       */
    }, {
      key: "_order",
      value: function _order() {
        _forEachInstanceProperty(availableUtils).call(availableUtils, this.groups, function(group) {
          group.order();
        });
      }
      /**
       * Handle updated groups
       * @param {number[]} ids
       * @private
       */
    }, {
      key: "_onUpdateGroups",
      value: function _onUpdateGroups(ids) {
        this._onAddGroups(ids);
      }
      /**
       * Handle changed groups (added or updated)
       * @param {number[]} ids
       * @private
       */
    }, {
      key: "_onAddGroups",
      value: function _onAddGroups(ids) {
        var me = this;
        _forEachInstanceProperty(ids).call(ids, function(id2) {
          var groupData = me.groupsData.get(id2);
          var group = me.groups[id2];
          if (!group) {
            if (id2 == UNGROUPED$1 || id2 == BACKGROUND) {
              throw new Error("Illegal group id. ".concat(id2, " is a reserved id."));
            }
            var groupOptions = _Object$create$1(me.options);
            availableUtils.extend(groupOptions, {
              height: null
            });
            group = new Group(id2, groupData, me);
            me.groups[id2] = group;
            for (var itemId in me.items) {
              if (me.items.hasOwnProperty(itemId)) {
                var item = me.items[itemId];
                if (item.data.group == id2) {
                  group.add(item);
                }
              }
            }
            group.order();
            group.show();
          } else {
            group.setData(groupData);
          }
        });
        this.body.emitter.emit("_change", {
          queue: true
        });
      }
      /**
       * Handle removed groups
       * @param {number[]} ids
       * @private
       */
    }, {
      key: "_onRemoveGroups",
      value: function _onRemoveGroups(ids) {
        var _this6 = this;
        _forEachInstanceProperty(ids).call(ids, function(id2) {
          var group = _this6.groups[id2];
          if (group) {
            group.dispose();
            delete _this6.groups[id2];
          }
        });
        if (this.options.cluster) {
          this.clusterGenerator.updateData();
          this._clusterItems();
        }
        this.markDirty({
          restackGroups: !!this.options.cluster
        });
        this.body.emitter.emit("_change", {
          queue: true
        });
      }
      /**
       * Reorder the groups if needed
       * @return {boolean} changed
       * @private
       */
    }, {
      key: "_orderGroups",
      value: function _orderGroups() {
        if (this.groupsData) {
          var groupIds = this.groupsData.getIds({
            order: this.options.groupOrder
          });
          groupIds = this._orderNestedGroups(groupIds);
          var changed = !availableUtils.equalArray(groupIds, this.groupIds);
          if (changed) {
            var groups = this.groups;
            _forEachInstanceProperty(groupIds).call(groupIds, function(groupId) {
              groups[groupId].hide();
            });
            _forEachInstanceProperty(groupIds).call(groupIds, function(groupId) {
              groups[groupId].show();
            });
            this.groupIds = groupIds;
          }
          return changed;
        } else {
          return false;
        }
      }
      /**
       * Reorder the nested groups
       *
       * @param {Array.<number>} groupIds
       * @returns {Array.<number>}
       * @private
       */
    }, {
      key: "_orderNestedGroups",
      value: function _orderNestedGroups(groupIds) {
        var _this7 = this;
        function getOrderedNestedGroups(t, groupIds2) {
          var result = [];
          _forEachInstanceProperty(groupIds2).call(groupIds2, function(groupId) {
            result.push(groupId);
            var groupData = t.groupsData.get(groupId);
            if (groupData.nestedGroups) {
              var _context26;
              var nestedGroupIds = _mapInstanceProperty(_context26 = t.groupsData.get({
                filter: function filter4(nestedGroup) {
                  return nestedGroup.nestedInGroup == groupId;
                },
                order: t.options.groupOrder
              })).call(_context26, function(nestedGroup) {
                return nestedGroup.id;
              });
              result = _concatInstanceProperty(result).call(result, getOrderedNestedGroups(t, nestedGroupIds));
            }
          });
          return result;
        }
        var topGroupIds = _filterInstanceProperty(groupIds).call(groupIds, function(groupId) {
          return !_this7.groupsData.get(groupId).nestedInGroup;
        });
        return getOrderedNestedGroups(this, topGroupIds);
      }
      /**
       * Add a new item
       * @param {Item} item
       * @private
       */
    }, {
      key: "_addItem",
      value: function _addItem(item) {
        this.items[item.id] = item;
        var groupId = this.getGroupId(item.data);
        var group = this.groups[groupId];
        if (!group) {
          item.groupShowing = false;
        } else if (group && group.data && group.data.showNested) {
          item.groupShowing = true;
        }
        if (group)
          group.add(item);
      }
      /**
       * Update an existing item
       * @param {Item} item
       * @param {Object} itemData
       * @private
       */
    }, {
      key: "_updateItem",
      value: function _updateItem(item, itemData) {
        item.setData(itemData);
        var groupId = this.getGroupId(item.data);
        var group = this.groups[groupId];
        if (!group) {
          item.groupShowing = false;
        } else if (group && group.data && group.data.showNested) {
          item.groupShowing = true;
        }
      }
      /**
       * Delete an item from the ItemSet: remove it from the DOM, from the map
       * with items, and from the map with visible items, and from the selection
       * @param {Item} item
       * @private
       */
    }, {
      key: "_removeItem",
      value: function _removeItem(item) {
        var _context27, _context28;
        item.hide();
        delete this.items[item.id];
        var index = _indexOfInstanceProperty(_context27 = this.selection).call(_context27, item.id);
        if (index != -1)
          _spliceInstanceProperty(_context28 = this.selection).call(_context28, index, 1);
        item.parent && item.parent.remove(item);
        if (this.popup != null) {
          this.popup.hide();
        }
      }
      /**
       * Create an array containing all items being a range (having an end date)
       * @param {Array.<Object>} array
       * @returns {Array}
       * @private
       */
    }, {
      key: "_constructByEndArray",
      value: function _constructByEndArray(array2) {
        var endArray = [];
        for (var i2 = 0; i2 < array2.length; i2++) {
          if (array2[i2] instanceof RangeItem) {
            endArray.push(array2[i2]);
          }
        }
        return endArray;
      }
      /**
       * Register the clicked item on touch, before dragStart is initiated.
       *
       * dragStart is initiated from a mousemove event, AFTER the mouse/touch is
       * already moving. Therefore, the mouse/touch can sometimes be above an other
       * DOM element than the item itself.
       *
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onTouch",
      value: function _onTouch(event2) {
        this.touchParams.item = this.itemFromTarget(event2);
        this.touchParams.dragLeftItem = event2.target.dragLeftItem || false;
        this.touchParams.dragRightItem = event2.target.dragRightItem || false;
        this.touchParams.itemProps = null;
      }
      /**
       * Given an group id, returns the index it has.
       *
       * @param {number} groupId
       * @returns {number} index / groupId
       * @private
       */
    }, {
      key: "_getGroupIndex",
      value: function _getGroupIndex(groupId) {
        for (var i2 = 0; i2 < this.groupIds.length; i2++) {
          if (groupId == this.groupIds[i2])
            return i2;
        }
      }
      /**
       * Start dragging the selected events
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onDragStart",
      value: function _onDragStart(event2) {
        var _this8 = this;
        if (this.touchParams.itemIsDragging) {
          return;
        }
        var item = this.touchParams.item || null;
        var me = this;
        var props;
        if (item && (item.selected || this.options.itemsAlwaysDraggable.item)) {
          if (this.options.editable.overrideItems && !this.options.editable.updateTime && !this.options.editable.updateGroup) {
            return;
          }
          if (item.editable != null && !item.editable.updateTime && !item.editable.updateGroup && !this.options.editable.overrideItems) {
            return;
          }
          var dragLeftItem = this.touchParams.dragLeftItem;
          var dragRightItem = this.touchParams.dragRightItem;
          this.touchParams.itemIsDragging = true;
          this.touchParams.selectedItem = item;
          if (dragLeftItem) {
            props = {
              item: dragLeftItem,
              initialX: event2.center.x,
              dragLeft: true,
              data: this._cloneItemData(item.data)
            };
            this.touchParams.itemProps = [props];
          } else if (dragRightItem) {
            props = {
              item: dragRightItem,
              initialX: event2.center.x,
              dragRight: true,
              data: this._cloneItemData(item.data)
            };
            this.touchParams.itemProps = [props];
          } else if (this.options.editable.add && (event2.srcEvent.ctrlKey || event2.srcEvent.metaKey)) {
            this._onDragStartAddItem(event2);
          } else {
            if (this.groupIds.length < 1) {
              this.redraw();
            }
            var baseGroupIndex = this._getGroupIndex(item.data.group);
            var itemsToDrag = this.options.itemsAlwaysDraggable.item && !item.selected ? [item.id] : this.getSelection();
            this.touchParams.itemProps = _mapInstanceProperty(itemsToDrag).call(itemsToDrag, function(id2) {
              var item2 = me.items[id2];
              var groupIndex = me._getGroupIndex(item2.data.group);
              return {
                item: item2,
                initialX: event2.center.x,
                groupOffset: baseGroupIndex - groupIndex,
                data: _this8._cloneItemData(item2.data)
              };
            });
          }
          event2.stopPropagation();
        } else if (this.options.editable.add && (event2.srcEvent.ctrlKey || event2.srcEvent.metaKey)) {
          this._onDragStartAddItem(event2);
        }
      }
      /**
       * Start creating a new range item by dragging.
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onDragStartAddItem",
      value: function _onDragStartAddItem(event2) {
        var snap = this.options.snap || null;
        var frameRect = this.dom.frame.getBoundingClientRect();
        var x = this.options.rtl ? frameRect.right - event2.center.x + 10 : event2.center.x - frameRect.left - 10;
        var time = this.body.util.toTime(x);
        var scale = this.body.util.getScale();
        var step = this.body.util.getStep();
        var start = snap ? snap(time, scale, step) : time;
        var end = start;
        var itemData = {
          type: "range",
          start,
          end,
          content: "new item"
        };
        var id2 = v4();
        itemData[this.itemsData.idProp] = id2;
        var group = this.groupFromTarget(event2);
        if (group) {
          itemData.group = group.groupId;
        }
        var newItem = new RangeItem(itemData, this.conversion, this.options);
        newItem.id = id2;
        newItem.data = this._cloneItemData(itemData);
        this._addItem(newItem);
        this.touchParams.selectedItem = newItem;
        var props = {
          item: newItem,
          initialX: event2.center.x,
          data: newItem.data
        };
        if (this.options.rtl) {
          props.dragLeft = true;
        } else {
          props.dragRight = true;
        }
        this.touchParams.itemProps = [props];
        event2.stopPropagation();
      }
      /**
       * Drag selected items
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onDrag",
      value: function _onDrag(event2) {
        var _this9 = this;
        if (this.popup != null && this.options.showTooltips && !this.popup.hidden) {
          var container = this.body.dom.centerContainer;
          var containerRect = container.getBoundingClientRect();
          this.popup.setPosition(event2.center.x - containerRect.left + container.offsetLeft, event2.center.y - containerRect.top + container.offsetTop);
          this.popup.show();
        }
        if (this.touchParams.itemProps) {
          var _context29;
          event2.stopPropagation();
          var me = this;
          var snap = this.options.snap || null;
          var domRootOffsetLeft = this.body.dom.root.offsetLeft;
          var xOffset = this.options.rtl ? domRootOffsetLeft + this.body.domProps.right.width : domRootOffsetLeft + this.body.domProps.left.width;
          var scale = this.body.util.getScale();
          var step = this.body.util.getStep();
          var selectedItem = this.touchParams.selectedItem;
          var updateGroupAllowed = (this.options.editable.overrideItems || selectedItem.editable == null) && this.options.editable.updateGroup || !this.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateGroup;
          var newGroupBase = null;
          if (updateGroupAllowed && selectedItem) {
            if (selectedItem.data.group != void 0) {
              var group = me.groupFromTarget(event2);
              if (group) {
                newGroupBase = this._getGroupIndex(group.groupId);
              }
            }
          }
          _forEachInstanceProperty(_context29 = this.touchParams.itemProps).call(_context29, function(props) {
            var current = me.body.util.toTime(event2.center.x - xOffset);
            var initial = me.body.util.toTime(props.initialX - xOffset);
            var offset;
            var initialStart;
            var initialEnd;
            var start;
            var end;
            if (_this9.options.rtl) {
              offset = -(current - initial);
            } else {
              offset = current - initial;
            }
            var itemData = _this9._cloneItemData(props.item.data);
            if (props.item.editable != null && !props.item.editable.updateTime && !props.item.editable.updateGroup && !me.options.editable.overrideItems) {
              return;
            }
            var updateTimeAllowed = (_this9.options.editable.overrideItems || selectedItem.editable == null) && _this9.options.editable.updateTime || !_this9.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateTime;
            if (updateTimeAllowed) {
              if (props.dragLeft) {
                if (_this9.options.rtl) {
                  if (itemData.end != void 0) {
                    initialEnd = availableUtils.convert(props.data.end, "Date");
                    end = new Date(initialEnd.valueOf() + offset);
                    itemData.end = snap ? snap(end, scale, step) : end;
                  }
                } else {
                  if (itemData.start != void 0) {
                    initialStart = availableUtils.convert(props.data.start, "Date");
                    start = new Date(initialStart.valueOf() + offset);
                    itemData.start = snap ? snap(start, scale, step) : start;
                  }
                }
              } else if (props.dragRight) {
                if (_this9.options.rtl) {
                  if (itemData.start != void 0) {
                    initialStart = availableUtils.convert(props.data.start, "Date");
                    start = new Date(initialStart.valueOf() + offset);
                    itemData.start = snap ? snap(start, scale, step) : start;
                  }
                } else {
                  if (itemData.end != void 0) {
                    initialEnd = availableUtils.convert(props.data.end, "Date");
                    end = new Date(initialEnd.valueOf() + offset);
                    itemData.end = snap ? snap(end, scale, step) : end;
                  }
                }
              } else {
                if (itemData.start != void 0) {
                  initialStart = availableUtils.convert(props.data.start, "Date").valueOf();
                  start = new Date(initialStart + offset);
                  if (itemData.end != void 0) {
                    initialEnd = availableUtils.convert(props.data.end, "Date");
                    var duration = initialEnd.valueOf() - initialStart.valueOf();
                    itemData.start = snap ? snap(start, scale, step) : start;
                    itemData.end = new Date(itemData.start.valueOf() + duration);
                  } else {
                    itemData.start = snap ? snap(start, scale, step) : start;
                  }
                }
              }
            }
            if (updateGroupAllowed && !props.dragLeft && !props.dragRight && newGroupBase != null) {
              if (itemData.group != void 0) {
                var newOffset = newGroupBase - props.groupOffset;
                newOffset = Math.max(0, newOffset);
                newOffset = Math.min(me.groupIds.length - 1, newOffset);
                itemData.group = me.groupIds[newOffset];
              }
            }
            itemData = _this9._cloneItemData(itemData);
            me.options.onMoving(itemData, function(itemData2) {
              if (itemData2) {
                props.item.setData(_this9._cloneItemData(itemData2, "Date"));
              }
            });
          });
          this.body.emitter.emit("_change");
        }
      }
      /**
       * Move an item to another group
       * @param {Item} item
       * @param {string | number} groupId
       * @private
       */
    }, {
      key: "_moveToGroup",
      value: function _moveToGroup(item, groupId) {
        var group = this.groups[groupId];
        if (group && group.groupId != item.data.group) {
          var oldGroup = item.parent;
          oldGroup.remove(item);
          oldGroup.order();
          item.data.group = group.groupId;
          group.add(item);
          group.order();
        }
      }
      /**
       * End of dragging selected items
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onDragEnd",
      value: function _onDragEnd(event2) {
        var _this10 = this;
        this.touchParams.itemIsDragging = false;
        if (this.touchParams.itemProps) {
          event2.stopPropagation();
          var me = this;
          var itemProps = this.touchParams.itemProps;
          this.touchParams.itemProps = null;
          _forEachInstanceProperty(itemProps).call(itemProps, function(props) {
            var id2 = props.item.id;
            var exists = me.itemsData.get(id2) != null;
            if (!exists) {
              me.options.onAdd(props.item.data, function(itemData2) {
                me._removeItem(props.item);
                if (itemData2) {
                  me.itemsData.add(itemData2);
                }
                me.body.emitter.emit("_change");
              });
            } else {
              var itemData = _this10._cloneItemData(props.item.data);
              me.options.onMove(itemData, function(itemData2) {
                if (itemData2) {
                  itemData2[_this10.itemsData.idProp] = id2;
                  _this10.itemsData.update(itemData2);
                } else {
                  props.item.setData(props.data);
                  me.body.emitter.emit("_change");
                }
              });
            }
          });
        }
      }
      /**
       * On group click
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onGroupClick",
      value: function _onGroupClick(event2) {
        var _this11 = this;
        var group = this.groupFromTarget(event2);
        _setTimeout(function() {
          _this11.toggleGroupShowNested(group);
        }, 1);
      }
      /**
       * Toggle show nested
       * @param {object} group
       * @param {boolean} force
       */
    }, {
      key: "toggleGroupShowNested",
      value: function toggleGroupShowNested(group) {
        var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        if (!group || !group.nestedGroups)
          return;
        var groupsData = this.groupsData.getDataSet();
        if (force != void 0) {
          group.showNested = !!force;
        } else {
          group.showNested = !group.showNested;
        }
        var nestingGroup = groupsData.get(group.groupId);
        nestingGroup.showNested = group.showNested;
        var fullNestedGroups = group.nestedGroups;
        var nextLevel = fullNestedGroups;
        while (nextLevel.length > 0) {
          var current = nextLevel;
          nextLevel = [];
          for (var i2 = 0; i2 < current.length; i2++) {
            var node2 = groupsData.get(current[i2]);
            if (node2.nestedGroups) {
              nextLevel = _concatInstanceProperty(nextLevel).call(nextLevel, node2.nestedGroups);
            }
          }
          if (nextLevel.length > 0) {
            fullNestedGroups = _concatInstanceProperty(fullNestedGroups).call(fullNestedGroups, nextLevel);
          }
        }
        var nestedGroups;
        if (nestingGroup.showNested) {
          var showNestedGroups = groupsData.get(nestingGroup.nestedGroups);
          for (var _i = 0; _i < showNestedGroups.length; _i++) {
            var _group = showNestedGroups[_i];
            if (_group.nestedGroups && _group.nestedGroups.length > 0 && (_group.showNested == void 0 || _group.showNested == true)) {
              showNestedGroups.push.apply(showNestedGroups, _toConsumableArray(groupsData.get(_group.nestedGroups)));
            }
          }
          nestedGroups = _mapInstanceProperty(showNestedGroups).call(showNestedGroups, function(nestedGroup) {
            if (nestedGroup.visible == void 0) {
              nestedGroup.visible = true;
            }
            nestedGroup.visible = !!nestingGroup.showNested;
            return nestedGroup;
          });
        } else {
          var _context30;
          nestedGroups = _mapInstanceProperty(_context30 = groupsData.get(fullNestedGroups)).call(_context30, function(nestedGroup) {
            if (nestedGroup.visible == void 0) {
              nestedGroup.visible = true;
            }
            nestedGroup.visible = !!nestingGroup.showNested;
            return nestedGroup;
          });
        }
        groupsData.update(_concatInstanceProperty(nestedGroups).call(nestedGroups, nestingGroup));
        if (nestingGroup.showNested) {
          availableUtils.removeClassName(group.dom.label, "collapsed");
          availableUtils.addClassName(group.dom.label, "expanded");
        } else {
          availableUtils.removeClassName(group.dom.label, "expanded");
          availableUtils.addClassName(group.dom.label, "collapsed");
        }
      }
      /**
       * Toggle group drag classname
       * @param {object} group
       */
    }, {
      key: "toggleGroupDragClassName",
      value: function toggleGroupDragClassName(group) {
        group.dom.label.classList.toggle("vis-group-is-dragging");
        group.dom.foreground.classList.toggle("vis-group-is-dragging");
      }
      /**
       * on drag start
       * @param {Event} event
       * @return {void}   
       * @private
       */
    }, {
      key: "_onGroupDragStart",
      value: function _onGroupDragStart(event2) {
        if (this.groupTouchParams.isDragging)
          return;
        if (this.options.groupEditable.order) {
          this.groupTouchParams.group = this.groupFromTarget(event2);
          if (this.groupTouchParams.group) {
            event2.stopPropagation();
            this.groupTouchParams.isDragging = true;
            this.toggleGroupDragClassName(this.groupTouchParams.group);
            this.groupTouchParams.originalOrder = this.groupsData.getIds({
              order: this.options.groupOrder
            });
          }
        }
      }
      /**
       * on drag
       * @param {Event} event
       * @return {void}
       * @private
       */
    }, {
      key: "_onGroupDrag",
      value: function _onGroupDrag(event2) {
        if (this.options.groupEditable.order && this.groupTouchParams.group) {
          event2.stopPropagation();
          var groupsData = this.groupsData.getDataSet();
          var group = this.groupFromTarget(event2);
          if (group && group.height != this.groupTouchParams.group.height) {
            var movingUp = group.top < this.groupTouchParams.group.top;
            var clientY = event2.center ? event2.center.y : event2.clientY;
            var targetGroup = group.dom.foreground.getBoundingClientRect();
            var draggedGroupHeight = this.groupTouchParams.group.height;
            if (movingUp) {
              if (targetGroup.top + draggedGroupHeight < clientY) {
                return;
              }
            } else {
              var targetGroupHeight = group.height;
              if (targetGroup.top + targetGroupHeight - draggedGroupHeight > clientY) {
                return;
              }
            }
          }
          if (group && group != this.groupTouchParams.group) {
            var _targetGroup = groupsData.get(group.groupId);
            var draggedGroup = groupsData.get(this.groupTouchParams.group.groupId);
            if (draggedGroup && _targetGroup) {
              this.options.groupOrderSwap(draggedGroup, _targetGroup, groupsData);
              groupsData.update(draggedGroup);
              groupsData.update(_targetGroup);
            }
            var newOrder = groupsData.getIds({
              order: this.options.groupOrder
            });
            if (!availableUtils.equalArray(newOrder, this.groupTouchParams.originalOrder)) {
              var origOrder = this.groupTouchParams.originalOrder;
              var draggedId = this.groupTouchParams.group.groupId;
              var numGroups = Math.min(origOrder.length, newOrder.length);
              var curPos = 0;
              var newOffset = 0;
              var orgOffset = 0;
              while (curPos < numGroups) {
                while (curPos + newOffset < numGroups && curPos + orgOffset < numGroups && newOrder[curPos + newOffset] == origOrder[curPos + orgOffset]) {
                  curPos++;
                }
                if (curPos + newOffset >= numGroups) {
                  break;
                }
                if (newOrder[curPos + newOffset] == draggedId) {
                  newOffset = 1;
                } else if (origOrder[curPos + orgOffset] == draggedId) {
                  orgOffset = 1;
                } else {
                  var slippedPosition = _indexOfInstanceProperty(newOrder).call(newOrder, origOrder[curPos + orgOffset]);
                  var switchGroup = groupsData.get(newOrder[curPos + newOffset]);
                  var shouldBeGroup = groupsData.get(origOrder[curPos + orgOffset]);
                  this.options.groupOrderSwap(switchGroup, shouldBeGroup, groupsData);
                  groupsData.update(switchGroup);
                  groupsData.update(shouldBeGroup);
                  var switchGroupId = newOrder[curPos + newOffset];
                  newOrder[curPos + newOffset] = origOrder[curPos + orgOffset];
                  newOrder[slippedPosition] = switchGroupId;
                  curPos++;
                }
              }
            }
          }
        }
      }
      /**
       * on drag end
       * @param {Event} event
       * @return {void}
       * @private
       */
    }, {
      key: "_onGroupDragEnd",
      value: function _onGroupDragEnd(event2) {
        this.groupTouchParams.isDragging = false;
        if (this.options.groupEditable.order && this.groupTouchParams.group) {
          event2.stopPropagation();
          var me = this;
          var id2 = me.groupTouchParams.group.groupId;
          var dataset = me.groupsData.getDataSet();
          var groupData = availableUtils.extend({}, dataset.get(id2));
          me.options.onMoveGroup(groupData, function(groupData2) {
            if (groupData2) {
              groupData2[dataset._idProp] = id2;
              dataset.update(groupData2);
            } else {
              var newOrder = dataset.getIds({
                order: me.options.groupOrder
              });
              if (!availableUtils.equalArray(newOrder, me.groupTouchParams.originalOrder)) {
                var origOrder = me.groupTouchParams.originalOrder;
                var numGroups = Math.min(origOrder.length, newOrder.length);
                var curPos = 0;
                while (curPos < numGroups) {
                  while (curPos < numGroups && newOrder[curPos] == origOrder[curPos]) {
                    curPos++;
                  }
                  if (curPos >= numGroups) {
                    break;
                  }
                  var slippedPosition = _indexOfInstanceProperty(newOrder).call(newOrder, origOrder[curPos]);
                  var switchGroup = dataset.get(newOrder[curPos]);
                  var shouldBeGroup = dataset.get(origOrder[curPos]);
                  me.options.groupOrderSwap(switchGroup, shouldBeGroup, dataset);
                  dataset.update(switchGroup);
                  dataset.update(shouldBeGroup);
                  var switchGroupId = newOrder[curPos];
                  newOrder[curPos] = origOrder[curPos];
                  newOrder[slippedPosition] = switchGroupId;
                  curPos++;
                }
              }
            }
          });
          me.body.emitter.emit("groupDragged", {
            groupId: id2
          });
          this.toggleGroupDragClassName(this.groupTouchParams.group);
          this.groupTouchParams.group = null;
        }
      }
      /**
       * Handle selecting/deselecting an item when tapping it
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onSelectItem",
      value: function _onSelectItem(event2) {
        if (!this.options.selectable)
          return;
        var ctrlKey = event2.srcEvent && (event2.srcEvent.ctrlKey || event2.srcEvent.metaKey);
        var shiftKey = event2.srcEvent && event2.srcEvent.shiftKey;
        if (ctrlKey || shiftKey) {
          this._onMultiSelectItem(event2);
          return;
        }
        var oldSelection = this.getSelection();
        var item = this.itemFromTarget(event2);
        var selection = item && item.selectable ? [item.id] : [];
        this.setSelection(selection);
        var newSelection = this.getSelection();
        if (newSelection.length > 0 || oldSelection.length > 0) {
          this.body.emitter.emit("select", {
            items: newSelection,
            event: event2
          });
        }
      }
      /**
       * Handle hovering an item
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onMouseOver",
      value: function _onMouseOver(event2) {
        var item = this.itemFromTarget(event2);
        if (!item)
          return;
        var related = this.itemFromRelatedTarget(event2);
        if (item === related) {
          return;
        }
        var title = item.getTitle();
        if (this.options.showTooltips && title) {
          if (this.popup == null) {
            this.popup = new Popup(this.body.dom.root, this.options.tooltip.overflowMethod || "flip");
          }
          this.popup.setText(title);
          var container = this.body.dom.centerContainer;
          var containerRect = container.getBoundingClientRect();
          this.popup.setPosition(event2.clientX - containerRect.left + container.offsetLeft, event2.clientY - containerRect.top + container.offsetTop);
          this.setPopupTimer(this.popup);
        } else {
          this.clearPopupTimer();
          if (this.popup != null) {
            this.popup.hide();
          }
        }
        this.body.emitter.emit("itemover", {
          item: item.id,
          event: event2
        });
      }
      /**
       * on mouse start
       * @param {Event} event
       * @return {void}   
       * @private
       */
    }, {
      key: "_onMouseOut",
      value: function _onMouseOut(event2) {
        var item = this.itemFromTarget(event2);
        if (!item)
          return;
        var related = this.itemFromRelatedTarget(event2);
        if (item === related) {
          return;
        }
        this.clearPopupTimer();
        if (this.popup != null) {
          this.popup.hide();
        }
        this.body.emitter.emit("itemout", {
          item: item.id,
          event: event2
        });
      }
      /**
       * on mouse move
       * @param {Event} event
       * @return {void}   
       * @private
       */
    }, {
      key: "_onMouseMove",
      value: function _onMouseMove(event2) {
        var item = this.itemFromTarget(event2);
        if (!item)
          return;
        if (this.popupTimer != null) {
          this.setPopupTimer(this.popup);
        }
        if (this.options.showTooltips && this.options.tooltip.followMouse && this.popup && !this.popup.hidden) {
          var container = this.body.dom.centerContainer;
          var containerRect = container.getBoundingClientRect();
          this.popup.setPosition(event2.clientX - containerRect.left + container.offsetLeft, event2.clientY - containerRect.top + container.offsetTop);
          this.popup.show();
        }
      }
      /**
       * Handle mousewheel
       * @param {Event}  event   The event
       * @private
       */
    }, {
      key: "_onMouseWheel",
      value: function _onMouseWheel(event2) {
        if (this.touchParams.itemIsDragging) {
          this._onDragEnd(event2);
        }
      }
      /**
       * Handle updates of an item on double tap
       * @param {timeline.Item}  item   The item
       * @private
       */
    }, {
      key: "_onUpdateItem",
      value: function _onUpdateItem(item) {
        if (!this.options.selectable)
          return;
        if (!this.options.editable.updateTime && !this.options.editable.updateGroup)
          return;
        var me = this;
        if (item) {
          var itemData = me.itemsData.get(item.id);
          this.options.onUpdate(itemData, function(itemData2) {
            if (itemData2) {
              me.itemsData.update(itemData2);
            }
          });
        }
      }
      /**
       * Handle drop event of data on item
       * Only called when `objectData.target === 'item'.
       * @param {Event} event The event 
       * @private
       */
    }, {
      key: "_onDropObjectOnItem",
      value: function _onDropObjectOnItem(event2) {
        var item = this.itemFromTarget(event2);
        var objectData = JSON.parse(event2.dataTransfer.getData("text"));
        this.options.onDropObjectOnItem(objectData, item);
      }
      /**
       * Handle creation of an item on double tap or drop of a drag event
       * @param {Event} event   The event
       * @private
       */
    }, {
      key: "_onAddItem",
      value: function _onAddItem(event2) {
        if (!this.options.selectable)
          return;
        if (!this.options.editable.add)
          return;
        var me = this;
        var snap = this.options.snap || null;
        var frameRect = this.dom.frame.getBoundingClientRect();
        var x = this.options.rtl ? frameRect.right - event2.center.x : event2.center.x - frameRect.left;
        var start = this.body.util.toTime(x);
        var scale = this.body.util.getScale();
        var step = this.body.util.getStep();
        var end;
        var newItemData;
        if (event2.type == "drop") {
          newItemData = JSON.parse(event2.dataTransfer.getData("text"));
          newItemData.content = newItemData.content ? newItemData.content : "new item";
          newItemData.start = newItemData.start ? newItemData.start : snap ? snap(start, scale, step) : start;
          newItemData.type = newItemData.type || "box";
          newItemData[this.itemsData.idProp] = newItemData.id || v4();
          if (newItemData.type == "range" && !newItemData.end) {
            end = this.body.util.toTime(x + this.props.width / 5);
            newItemData.end = snap ? snap(end, scale, step) : end;
          }
        } else {
          newItemData = {
            start: snap ? snap(start, scale, step) : start,
            content: "new item"
          };
          newItemData[this.itemsData.idProp] = v4();
          if (this.options.type === "range") {
            end = this.body.util.toTime(x + this.props.width / 5);
            newItemData.end = snap ? snap(end, scale, step) : end;
          }
        }
        var group = this.groupFromTarget(event2);
        if (group) {
          newItemData.group = group.groupId;
        }
        newItemData = this._cloneItemData(newItemData);
        this.options.onAdd(newItemData, function(item) {
          if (item) {
            me.itemsData.add(item);
            if (event2.type == "drop") {
              me.setSelection([item.id]);
            }
          }
        });
      }
      /**
       * Handle selecting/deselecting multiple items when holding an item
       * @param {Event} event
       * @private
       */
    }, {
      key: "_onMultiSelectItem",
      value: function _onMultiSelectItem(event2) {
        var _this12 = this;
        if (!this.options.selectable)
          return;
        var item = this.itemFromTarget(event2);
        if (item) {
          var selection = this.options.multiselect ? this.getSelection() : [];
          var shiftKey = event2.srcEvent && event2.srcEvent.shiftKey || false;
          if ((shiftKey || this.options.sequentialSelection) && this.options.multiselect) {
            var itemGroup = this.itemsData.get(item.id).group;
            var lastSelectedGroup = void 0;
            if (this.options.multiselectPerGroup) {
              if (selection.length > 0) {
                lastSelectedGroup = this.itemsData.get(selection[0]).group;
              }
            }
            if (!this.options.multiselectPerGroup || lastSelectedGroup == void 0 || lastSelectedGroup == itemGroup) {
              selection.push(item.id);
            }
            var range = ItemSet2._getItemRange(this.itemsData.get(selection));
            if (!this.options.multiselectPerGroup || lastSelectedGroup == itemGroup) {
              selection = [];
              for (var id2 in this.items) {
                if (this.items.hasOwnProperty(id2)) {
                  var _item = this.items[id2];
                  var start = _item.data.start;
                  var end = _item.data.end !== void 0 ? _item.data.end : start;
                  if (start >= range.min && end <= range.max && (!this.options.multiselectPerGroup || lastSelectedGroup == this.itemsData.get(_item.id).group) && !(_item instanceof BackgroundItem)) {
                    selection.push(_item.id);
                  }
                }
              }
            }
          } else {
            var index = _indexOfInstanceProperty(selection).call(selection, item.id);
            if (index == -1) {
              selection.push(item.id);
            } else {
              _spliceInstanceProperty(selection).call(selection, index, 1);
            }
          }
          var filteredSelection = _filterInstanceProperty(selection).call(selection, function(item2) {
            return _this12.getItemById(item2).selectable;
          });
          this.setSelection(filteredSelection);
          this.body.emitter.emit("select", {
            items: this.getSelection(),
            event: event2
          });
        }
      }
      /**
       * Calculate the time range of a list of items
       * @param {Array.<Object>} itemsData
       * @return {{min: Date, max: Date}} Returns the range of the provided items
       * @private
       */
    }, {
      key: "itemFromElement",
      value: (
        /**
         * Find an item from an element:
         * searches for the attribute 'vis-item' in the element's tree
         * @param {HTMLElement} element
         * @return {Item | null} item
         */
        function itemFromElement(element) {
          var cur = element;
          while (cur) {
            if (cur.hasOwnProperty("vis-item")) {
              return cur["vis-item"];
            }
            cur = cur.parentNode;
          }
          return null;
        }
      )
      /**
       * Find an item from an event target:
       * searches for the attribute 'vis-item' in the event target's element tree
       * @param {Event} event
       * @return {Item | null} item
       */
    }, {
      key: "itemFromTarget",
      value: function itemFromTarget(event2) {
        return this.itemFromElement(event2.target);
      }
      /**
       * Find an item from an event's related target:
       * searches for the attribute 'vis-item' in the related target's element tree
       * @param {Event} event
       * @return {Item | null} item
       */
    }, {
      key: "itemFromRelatedTarget",
      value: function itemFromRelatedTarget(event2) {
        return this.itemFromElement(event2.relatedTarget);
      }
      /**
       * Find the Group from an event target:
       * searches for the attribute 'vis-group' in the event target's element tree
       * @param {Event} event
       * @return {Group | null} group
       */
    }, {
      key: "groupFromTarget",
      value: function groupFromTarget(event2) {
        var clientY = event2.center ? event2.center.y : event2.clientY;
        var groupIds = this.groupIds;
        if (groupIds.length <= 0 && this.groupsData) {
          groupIds = this.groupsData.getIds({
            order: this.options.groupOrder
          });
        }
        for (var i2 = 0; i2 < groupIds.length; i2++) {
          var groupId = groupIds[i2];
          var group = this.groups[groupId];
          var foreground = group.dom.foreground;
          var foregroundRect = foreground.getBoundingClientRect();
          if (clientY >= foregroundRect.top && clientY < foregroundRect.top + foreground.offsetHeight) {
            return group;
          }
          if (this.options.orientation.item === "top") {
            if (i2 === this.groupIds.length - 1 && clientY > foregroundRect.top) {
              return group;
            }
          } else {
            if (i2 === 0 && clientY < foregroundRect.top + foreground.offset) {
              return group;
            }
          }
        }
        return null;
      }
      /**
       * Find the ItemSet from an event target:
       * searches for the attribute 'vis-itemset' in the event target's element tree
       * @param {Event} event
       * @return {ItemSet | null} item
       */
    }, {
      key: "_cloneItemData",
      value: (
        /**
         * Clone the data of an item, and "normalize" it: convert the start and end date
         * to the type (Date, Moment, ...) configured in the DataSet. If not configured,
         * start and end are converted to Date.
         * @param {Object} itemData, typically `item.data`
         * @param {string} [type]  Optional Date type. If not provided, the type from the DataSet is taken
         * @return {Object} The cloned object
         * @private
         */
        function _cloneItemData(itemData, type) {
          var clone2 = availableUtils.extend({}, itemData);
          if (!type) {
            type = this.itemsData.type;
          }
          if (clone2.start != void 0) {
            clone2.start = availableUtils.convert(clone2.start, type && type.start || "Date");
          }
          if (clone2.end != void 0) {
            clone2.end = availableUtils.convert(clone2.end, type && type.end || "Date");
          }
          return clone2;
        }
      )
      /**
       * cluster items
       * @return {void}   
       * @private
       */
    }, {
      key: "_clusterItems",
      value: function _clusterItems() {
        if (!this.options.cluster) {
          return;
        }
        var _this$body$range$conv = this.body.range.conversion(this.body.domProps.center.width), scale = _this$body$range$conv.scale;
        var clusters = this.clusterGenerator.getClusters(this.clusters, scale, this.options.cluster);
        if (this.clusters != clusters) {
          this._detachAllClusters();
          if (clusters) {
            var _iterator5 = _createForOfIteratorHelper$1(clusters), _step5;
            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                var cluster = _step5.value;
                cluster.attach();
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
            this.clusters = clusters;
          }
          this._updateClusters(clusters);
        }
      }
      /**
       * detach all cluster items
       * @private
       */
    }, {
      key: "_detachAllClusters",
      value: function _detachAllClusters() {
        if (this.options.cluster) {
          if (this.clusters && this.clusters.length) {
            var _iterator6 = _createForOfIteratorHelper$1(this.clusters), _step6;
            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                var cluster = _step6.value;
                cluster.detach();
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
          }
        }
      }
      /**
       * update clusters
       * @param {array} clusters
       * @private
       */
    }, {
      key: "_updateClusters",
      value: function _updateClusters(clusters) {
        if (this.clusters && this.clusters.length) {
          var _context31;
          var newClustersIds = new _Set(_mapInstanceProperty(clusters).call(clusters, function(cluster2) {
            return cluster2.id;
          }));
          var clustersToUnselect = _filterInstanceProperty(_context31 = this.clusters).call(_context31, function(cluster2) {
            return !newClustersIds.has(cluster2.id);
          });
          var selectionChanged = false;
          var _iterator7 = _createForOfIteratorHelper$1(clustersToUnselect), _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
              var _context32;
              var cluster = _step7.value;
              var selectedIdx = _indexOfInstanceProperty(_context32 = this.selection).call(_context32, cluster.id);
              if (selectedIdx !== -1) {
                var _context33;
                cluster.unselect();
                _spliceInstanceProperty(_context33 = this.selection).call(_context33, selectedIdx, 1);
                selectionChanged = true;
              }
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
          if (selectionChanged) {
            var newSelection = this.getSelection();
            this.body.emitter.emit("select", {
              items: newSelection,
              event
            });
          }
        }
        this.clusters = clusters || [];
      }
    }], [{
      key: "_getItemRange",
      value: function _getItemRange(itemsData) {
        var max2 = null;
        var min2 = null;
        _forEachInstanceProperty(itemsData).call(itemsData, function(data2) {
          if (min2 == null || data2.start < min2) {
            min2 = data2.start;
          }
          if (data2.end != void 0) {
            if (max2 == null || data2.end > max2) {
              max2 = data2.end;
            }
          } else {
            if (max2 == null || data2.start > max2) {
              max2 = data2.start;
            }
          }
        });
        return {
          min: min2,
          max: max2
        };
      }
    }, {
      key: "itemSetFromTarget",
      value: function itemSetFromTarget(event2) {
        var target = event2.target;
        while (target) {
          if (target.hasOwnProperty("vis-itemset")) {
            return target["vis-itemset"];
          }
          target = target.parentNode;
        }
        return null;
      }
    }]);
    return ItemSet2;
  }(Component);
  ItemSet.types = {
    background: BackgroundItem,
    box: BoxItem,
    range: RangeItem,
    point: PointItem
  };
  ItemSet.prototype._onAdd = ItemSet.prototype._onUpdate;
  var errorFound = false;
  var allOptions$2;
  var printStyle = "background: #FFeeee; color: #dd0000";
  var Validator = /* @__PURE__ */ function() {
    function Validator2() {
      _classCallCheck(this, Validator2);
    }
    _createClass(Validator2, null, [{
      key: "validate",
      value: function validate(options, referenceOptions, subObject) {
        errorFound = false;
        allOptions$2 = referenceOptions;
        var usedOptions = referenceOptions;
        if (subObject !== void 0) {
          usedOptions = referenceOptions[subObject];
        }
        Validator2.parse(options, usedOptions, []);
        return errorFound;
      }
      /**
       * Will traverse an object recursively and check every value
       * @param {Object} options
       * @param {Object} referenceOptions
       * @param {array} path    | where to look for the actual option
       * @static
       */
    }, {
      key: "parse",
      value: function parse(options, referenceOptions, path2) {
        for (var option2 in options) {
          if (options.hasOwnProperty(option2)) {
            Validator2.check(option2, options, referenceOptions, path2);
          }
        }
      }
      /**
       * Check every value. If the value is an object, call the parse function on that object.
       * @param {string} option
       * @param {Object} options
       * @param {Object} referenceOptions
       * @param {array} path    | where to look for the actual option
       * @static
       */
    }, {
      key: "check",
      value: function check2(option2, options, referenceOptions, path2) {
        if (referenceOptions[option2] === void 0 && referenceOptions.__any__ === void 0) {
          Validator2.getSuggestion(option2, referenceOptions, path2);
          return;
        }
        var referenceOption = option2;
        var is_object = true;
        if (referenceOptions[option2] === void 0 && referenceOptions.__any__ !== void 0) {
          referenceOption = "__any__";
          is_object = Validator2.getType(options[option2]) === "object";
        }
        var refOptionObj = referenceOptions[referenceOption];
        if (is_object && refOptionObj.__type__ !== void 0) {
          refOptionObj = refOptionObj.__type__;
        }
        Validator2.checkFields(option2, options, referenceOptions, referenceOption, refOptionObj, path2);
      }
      /**
       *
       * @param {string}  option           | the option property
       * @param {Object}  options          | The supplied options object
       * @param {Object}  referenceOptions | The reference options containing all options and their allowed formats
       * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.
       * @param {string}  refOptionObj     | This is the type object from the reference options
       * @param {Array}   path             | where in the object is the option
       * @static
       */
    }, {
      key: "checkFields",
      value: function checkFields(option2, options, referenceOptions, referenceOption, refOptionObj, path2) {
        var log = function log2(message) {
          console.log("%c" + message + Validator2.printLocation(path2, option2), printStyle);
        };
        var optionType = Validator2.getType(options[option2]);
        var refOptionType = refOptionObj[optionType];
        if (refOptionType !== void 0) {
          if (Validator2.getType(refOptionType) === "array" && _indexOfInstanceProperty(refOptionType).call(refOptionType, options[option2]) === -1) {
            log('Invalid option detected in "' + option2 + '". Allowed values are:' + Validator2.print(refOptionType) + ' not "' + options[option2] + '". ');
            errorFound = true;
          } else if (optionType === "object" && referenceOption !== "__any__") {
            path2 = availableUtils.copyAndExtendArray(path2, option2);
            Validator2.parse(options[option2], referenceOptions[referenceOption], path2);
          }
        } else if (refOptionObj["any"] === void 0) {
          log('Invalid type received for "' + option2 + '". Expected: ' + Validator2.print(_Object$keys(refOptionObj)) + ". Received [" + optionType + '] "' + options[option2] + '"');
          errorFound = true;
        }
      }
      /**
       *
       * @param {Object|boolean|number|string|Array.<number>|Date|Node|Moment|undefined|null} object
       * @returns {string}
       * @static
       */
    }, {
      key: "getType",
      value: function getType2(object2) {
        var type = _typeof$1(object2);
        if (type === "object") {
          if (object2 === null) {
            return "null";
          }
          if (object2 instanceof Boolean) {
            return "boolean";
          }
          if (object2 instanceof Number) {
            return "number";
          }
          if (object2 instanceof String) {
            return "string";
          }
          if (_Array$isArray(object2)) {
            return "array";
          }
          if (object2 instanceof Date) {
            return "date";
          }
          if (object2.nodeType !== void 0) {
            return "dom";
          }
          if (object2._isAMomentObject === true) {
            return "moment";
          }
          return "object";
        } else if (type === "number") {
          return "number";
        } else if (type === "boolean") {
          return "boolean";
        } else if (type === "string") {
          return "string";
        } else if (type === void 0) {
          return "undefined";
        }
        return type;
      }
      /**
       * @param {string} option
       * @param {Object} options
       * @param {Array.<string>} path
       * @static
       */
    }, {
      key: "getSuggestion",
      value: function getSuggestion(option2, options, path2) {
        var localSearch = Validator2.findInOptions(option2, options, path2, false);
        var globalSearch = Validator2.findInOptions(option2, allOptions$2, [], true);
        var localSearchThreshold = 8;
        var globalSearchThreshold = 4;
        var msg;
        if (localSearch.indexMatch !== void 0) {
          msg = " in " + Validator2.printLocation(localSearch.path, option2, "") + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n';
        } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
          msg = " in " + Validator2.printLocation(localSearch.path, option2, "") + "Perhaps it was misplaced? Matching option found at: " + Validator2.printLocation(globalSearch.path, globalSearch.closestMatch, "");
        } else if (localSearch.distance <= localSearchThreshold) {
          msg = '. Did you mean "' + localSearch.closestMatch + '"?' + Validator2.printLocation(localSearch.path, option2);
        } else {
          msg = ". Did you mean one of these: " + Validator2.print(_Object$keys(options)) + Validator2.printLocation(path2, option2);
        }
        console.log('%cUnknown option detected: "' + option2 + '"' + msg, printStyle);
        errorFound = true;
      }
      /**
       * traverse the options in search for a match.
       * @param {string} option
       * @param {Object} options
       * @param {Array} path    | where to look for the actual option
       * @param {boolean} [recursive=false]
       * @returns {{closestMatch: string, path: Array, distance: number}}
       * @static
       */
    }, {
      key: "findInOptions",
      value: function findInOptions(option2, options, path2) {
        var recursive = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
        var min2 = 1e9;
        var closestMatch = "";
        var closestMatchPath = [];
        var lowerCaseOption = option2.toLowerCase();
        var indexMatch = void 0;
        for (var op in options) {
          var distance = void 0;
          if (options[op].__type__ !== void 0 && recursive === true) {
            var result = Validator2.findInOptions(option2, options[op], availableUtils.copyAndExtendArray(path2, op));
            if (min2 > result.distance) {
              closestMatch = result.closestMatch;
              closestMatchPath = result.path;
              min2 = result.distance;
              indexMatch = result.indexMatch;
            }
          } else {
            var _context;
            if (_indexOfInstanceProperty(_context = op.toLowerCase()).call(_context, lowerCaseOption) !== -1) {
              indexMatch = op;
            }
            distance = Validator2.levenshteinDistance(option2, op);
            if (min2 > distance) {
              closestMatch = op;
              closestMatchPath = availableUtils.copyArray(path2);
              min2 = distance;
            }
          }
        }
        return {
          closestMatch,
          path: closestMatchPath,
          distance: min2,
          indexMatch
        };
      }
      /**
       * @param {Array.<string>} path
       * @param {Object} option
       * @param {string} prefix
       * @returns {String}
       * @static
       */
    }, {
      key: "printLocation",
      value: function printLocation(path2, option2) {
        var prefix = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "Problem value found at: \n";
        var str = "\n\n" + prefix + "options = {\n";
        for (var i2 = 0; i2 < path2.length; i2++) {
          for (var j = 0; j < i2 + 1; j++) {
            str += "  ";
          }
          str += path2[i2] + ": {\n";
        }
        for (var _j = 0; _j < path2.length + 1; _j++) {
          str += "  ";
        }
        str += option2 + "\n";
        for (var _i = 0; _i < path2.length + 1; _i++) {
          for (var _j2 = 0; _j2 < path2.length - _i; _j2++) {
            str += "  ";
          }
          str += "}\n";
        }
        return str + "\n\n";
      }
      /**
       * @param {Object} options
       * @returns {String}
       * @static
       */
    }, {
      key: "print",
      value: function print(options) {
        return _JSON$stringify(options).replace(/(\")|(\[)|(\])|(,"__type__")/g, "").replace(/(\,)/g, ", ");
      }
      /**
       *  Compute the edit distance between the two given strings
       * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
       *
       * Copyright (c) 2011 Andrei Mackenzie
       *
       * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
       *
       * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
       *
       * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
       *
       * @param {string} a
       * @param {string} b
       * @returns {Array.<Array.<number>>}}
       * @static
       */
    }, {
      key: "levenshteinDistance",
      value: function levenshteinDistance(a, b) {
        if (a.length === 0)
          return b.length;
        if (b.length === 0)
          return a.length;
        var matrix = [];
        var i2;
        for (i2 = 0; i2 <= b.length; i2++) {
          matrix[i2] = [i2];
        }
        var j;
        for (j = 0; j <= a.length; j++) {
          matrix[0][j] = j;
        }
        for (i2 = 1; i2 <= b.length; i2++) {
          for (j = 1; j <= a.length; j++) {
            if (b.charAt(i2 - 1) == a.charAt(j - 1)) {
              matrix[i2][j] = matrix[i2 - 1][j - 1];
            } else {
              matrix[i2][j] = Math.min(
                matrix[i2 - 1][j - 1] + 1,
                // substitution
                Math.min(
                  matrix[i2][j - 1] + 1,
                  // insertion
                  matrix[i2 - 1][j] + 1
                )
              );
            }
          }
        }
        return matrix[b.length][a.length];
      }
    }]);
    return Validator2;
  }();
  var string$1 = "string";
  var bool$1 = "boolean";
  var number$1 = "number";
  var array$1 = "array";
  var date$1 = "date";
  var object$1 = "object";
  var dom$1 = "dom";
  var moment$1 = "moment";
  var any$1 = "any";
  var allOptions$1 = {
    configure: {
      enabled: {
        "boolean": bool$1
      },
      filter: {
        "boolean": bool$1,
        "function": "function"
      },
      container: {
        dom: dom$1
      },
      __type__: {
        object: object$1,
        "boolean": bool$1,
        "function": "function"
      }
    },
    //globals :
    align: {
      string: string$1
    },
    alignCurrentTime: {
      string: string$1,
      "undefined": "undefined"
    },
    rtl: {
      "boolean": bool$1,
      "undefined": "undefined"
    },
    rollingMode: {
      follow: {
        "boolean": bool$1
      },
      offset: {
        number: number$1,
        "undefined": "undefined"
      },
      __type__: {
        object: object$1
      }
    },
    onTimeout: {
      timeoutMs: {
        number: number$1
      },
      callback: {
        "function": "function"
      },
      __type__: {
        object: object$1
      }
    },
    verticalScroll: {
      "boolean": bool$1,
      "undefined": "undefined"
    },
    horizontalScroll: {
      "boolean": bool$1,
      "undefined": "undefined"
    },
    autoResize: {
      "boolean": bool$1
    },
    throttleRedraw: {
      number: number$1
    },
    // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
    clickToUse: {
      "boolean": bool$1
    },
    dataAttributes: {
      string: string$1,
      array: array$1
    },
    editable: {
      add: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      remove: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      updateGroup: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      updateTime: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      overrideItems: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      __type__: {
        "boolean": bool$1,
        object: object$1
      }
    },
    end: {
      number: number$1,
      date: date$1,
      string: string$1,
      moment: moment$1
    },
    format: {
      minorLabels: {
        millisecond: {
          string: string$1,
          "undefined": "undefined"
        },
        second: {
          string: string$1,
          "undefined": "undefined"
        },
        minute: {
          string: string$1,
          "undefined": "undefined"
        },
        hour: {
          string: string$1,
          "undefined": "undefined"
        },
        weekday: {
          string: string$1,
          "undefined": "undefined"
        },
        day: {
          string: string$1,
          "undefined": "undefined"
        },
        week: {
          string: string$1,
          "undefined": "undefined"
        },
        month: {
          string: string$1,
          "undefined": "undefined"
        },
        year: {
          string: string$1,
          "undefined": "undefined"
        },
        __type__: {
          object: object$1,
          "function": "function"
        }
      },
      majorLabels: {
        millisecond: {
          string: string$1,
          "undefined": "undefined"
        },
        second: {
          string: string$1,
          "undefined": "undefined"
        },
        minute: {
          string: string$1,
          "undefined": "undefined"
        },
        hour: {
          string: string$1,
          "undefined": "undefined"
        },
        weekday: {
          string: string$1,
          "undefined": "undefined"
        },
        day: {
          string: string$1,
          "undefined": "undefined"
        },
        week: {
          string: string$1,
          "undefined": "undefined"
        },
        month: {
          string: string$1,
          "undefined": "undefined"
        },
        year: {
          string: string$1,
          "undefined": "undefined"
        },
        __type__: {
          object: object$1,
          "function": "function"
        }
      },
      __type__: {
        object: object$1
      }
    },
    moment: {
      "function": "function"
    },
    groupHeightMode: {
      string: string$1
    },
    groupOrder: {
      string: string$1,
      "function": "function"
    },
    groupEditable: {
      add: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      remove: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      order: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      __type__: {
        "boolean": bool$1,
        object: object$1
      }
    },
    groupOrderSwap: {
      "function": "function"
    },
    height: {
      string: string$1,
      number: number$1
    },
    hiddenDates: {
      start: {
        date: date$1,
        number: number$1,
        string: string$1,
        moment: moment$1
      },
      end: {
        date: date$1,
        number: number$1,
        string: string$1,
        moment: moment$1
      },
      repeat: {
        string: string$1
      },
      __type__: {
        object: object$1,
        array: array$1
      }
    },
    itemsAlwaysDraggable: {
      item: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      range: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      __type__: {
        "boolean": bool$1,
        object: object$1
      }
    },
    limitSize: {
      "boolean": bool$1
    },
    locale: {
      string: string$1
    },
    locales: {
      __any__: {
        any: any$1
      },
      __type__: {
        object: object$1
      }
    },
    longSelectPressTime: {
      number: number$1
    },
    margin: {
      axis: {
        number: number$1
      },
      item: {
        horizontal: {
          number: number$1,
          "undefined": "undefined"
        },
        vertical: {
          number: number$1,
          "undefined": "undefined"
        },
        __type__: {
          object: object$1,
          number: number$1
        }
      },
      __type__: {
        object: object$1,
        number: number$1
      }
    },
    max: {
      date: date$1,
      number: number$1,
      string: string$1,
      moment: moment$1
    },
    maxHeight: {
      number: number$1,
      string: string$1
    },
    maxMinorChars: {
      number: number$1
    },
    min: {
      date: date$1,
      number: number$1,
      string: string$1,
      moment: moment$1
    },
    minHeight: {
      number: number$1,
      string: string$1
    },
    moveable: {
      "boolean": bool$1
    },
    multiselect: {
      "boolean": bool$1
    },
    multiselectPerGroup: {
      "boolean": bool$1
    },
    onAdd: {
      "function": "function"
    },
    onDropObjectOnItem: {
      "function": "function"
    },
    onUpdate: {
      "function": "function"
    },
    onMove: {
      "function": "function"
    },
    onMoving: {
      "function": "function"
    },
    onRemove: {
      "function": "function"
    },
    onAddGroup: {
      "function": "function"
    },
    onMoveGroup: {
      "function": "function"
    },
    onRemoveGroup: {
      "function": "function"
    },
    onInitialDrawComplete: {
      "function": "function"
    },
    order: {
      "function": "function"
    },
    orientation: {
      axis: {
        string: string$1,
        "undefined": "undefined"
      },
      item: {
        string: string$1,
        "undefined": "undefined"
      },
      __type__: {
        string: string$1,
        object: object$1
      }
    },
    selectable: {
      "boolean": bool$1
    },
    sequentialSelection: {
      "boolean": bool$1
    },
    showCurrentTime: {
      "boolean": bool$1
    },
    showMajorLabels: {
      "boolean": bool$1
    },
    showMinorLabels: {
      "boolean": bool$1
    },
    showWeekScale: {
      "boolean": bool$1
    },
    stack: {
      "boolean": bool$1
    },
    stackSubgroups: {
      "boolean": bool$1
    },
    cluster: {
      maxItems: {
        "number": number$1,
        "undefined": "undefined"
      },
      titleTemplate: {
        "string": string$1,
        "undefined": "undefined"
      },
      clusterCriteria: {
        "function": "function",
        "undefined": "undefined"
      },
      showStipes: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      fitOnDoubleClick: {
        "boolean": bool$1,
        "undefined": "undefined"
      },
      __type__: {
        "boolean": bool$1,
        object: object$1
      }
    },
    snap: {
      "function": "function",
      "null": "null"
    },
    start: {
      date: date$1,
      number: number$1,
      string: string$1,
      moment: moment$1
    },
    template: {
      "function": "function"
    },
    loadingScreenTemplate: {
      "function": "function"
    },
    groupTemplate: {
      "function": "function"
    },
    visibleFrameTemplate: {
      string: string$1,
      "function": "function"
    },
    showTooltips: {
      "boolean": bool$1
    },
    tooltip: {
      followMouse: {
        "boolean": bool$1
      },
      overflowMethod: {
        "string": ["cap", "flip", "none"]
      },
      delay: {
        number: number$1
      },
      template: {
        "function": "function"
      },
      __type__: {
        object: object$1
      }
    },
    tooltipOnItemUpdateTime: {
      template: {
        "function": "function"
      },
      __type__: {
        "boolean": bool$1,
        object: object$1
      }
    },
    timeAxis: {
      scale: {
        string: string$1,
        "undefined": "undefined"
      },
      step: {
        number: number$1,
        "undefined": "undefined"
      },
      __type__: {
        object: object$1
      }
    },
    type: {
      string: string$1
    },
    width: {
      string: string$1,
      number: number$1
    },
    preferZoom: {
      "boolean": bool$1
    },
    zoomable: {
      "boolean": bool$1
    },
    zoomKey: {
      string: ["ctrlKey", "altKey", "shiftKey", "metaKey", ""]
    },
    zoomFriction: {
      number: number$1
    },
    zoomMax: {
      number: number$1
    },
    zoomMin: {
      number: number$1
    },
    xss: {
      disabled: {
        boolean: bool$1
      },
      filterOptions: {
        __any__: {
          any: any$1
        },
        __type__: {
          object: object$1
        }
      },
      __type__: {
        object: object$1
      }
    },
    __type__: {
      object: object$1
    }
  };
  var configureOptions$1 = {
    global: {
      align: ["center", "left", "right"],
      alignCurrentTime: ["none", "year", "month", "quarter", "week", "isoWeek", "day", "date", "hour", "minute", "second"],
      direction: false,
      autoResize: true,
      clickToUse: false,
      // dataAttributes: ['all'], // FIXME: can be 'all' or string[]
      editable: {
        add: false,
        remove: false,
        updateGroup: false,
        updateTime: false
      },
      end: "",
      format: {
        minorLabels: {
          millisecond: "SSS",
          second: "s",
          minute: "HH:mm",
          hour: "HH:mm",
          weekday: "ddd D",
          day: "D",
          week: "w",
          month: "MMM",
          year: "YYYY"
        },
        majorLabels: {
          millisecond: "HH:mm:ss",
          second: "D MMMM HH:mm",
          minute: "ddd D MMMM",
          hour: "ddd D MMMM",
          weekday: "MMMM YYYY",
          day: "MMMM YYYY",
          week: "MMMM YYYY",
          month: "YYYY",
          year: ""
        }
      },
      groupHeightMode: ["auto", "fixed", "fitItems"],
      //groupOrder: {string, 'function': 'function'},
      groupsDraggable: false,
      height: "",
      //hiddenDates: {object, array},
      locale: "",
      longSelectPressTime: 251,
      margin: {
        axis: [20, 0, 100, 1],
        item: {
          horizontal: [10, 0, 100, 1],
          vertical: [10, 0, 100, 1]
        }
      },
      max: "",
      maxHeight: "",
      maxMinorChars: [7, 0, 20, 1],
      min: "",
      minHeight: "",
      moveable: false,
      multiselect: false,
      multiselectPerGroup: false,
      //onAdd: {'function': 'function'},
      //onUpdate: {'function': 'function'},
      //onMove: {'function': 'function'},
      //onMoving: {'function': 'function'},
      //onRename: {'function': 'function'},
      //order: {'function': 'function'},
      orientation: {
        axis: ["both", "bottom", "top"],
        item: ["bottom", "top"]
      },
      preferZoom: false,
      selectable: true,
      showCurrentTime: false,
      showMajorLabels: true,
      showMinorLabels: true,
      stack: true,
      stackSubgroups: true,
      cluster: false,
      //snap: {'function': 'function', nada},
      start: "",
      //template: {'function': 'function'},
      //timeAxis: {
      //  scale: ['millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'],
      //  step: [1, 1, 10, 1]
      //},
      showTooltips: true,
      tooltip: {
        followMouse: false,
        overflowMethod: "flip",
        delay: [500, 0, 99999, 100]
      },
      tooltipOnItemUpdateTime: false,
      type: ["box", "point", "range", "background"],
      width: "100%",
      zoomable: true,
      zoomKey: ["ctrlKey", "altKey", "shiftKey", "metaKey", ""],
      zoomMax: [31536e10, 10, 31536e10, 1],
      zoomMin: [10, 10, 31536e10, 1],
      xss: {
        disabled: false
      }
    }
  };
  var htmlColors = {
    black: "#000000",
    navy: "#000080",
    darkblue: "#00008B",
    mediumblue: "#0000CD",
    blue: "#0000FF",
    darkgreen: "#006400",
    green: "#008000",
    teal: "#008080",
    darkcyan: "#008B8B",
    deepskyblue: "#00BFFF",
    darkturquoise: "#00CED1",
    mediumspringgreen: "#00FA9A",
    lime: "#00FF00",
    springgreen: "#00FF7F",
    aqua: "#00FFFF",
    cyan: "#00FFFF",
    midnightblue: "#191970",
    dodgerblue: "#1E90FF",
    lightseagreen: "#20B2AA",
    forestgreen: "#228B22",
    seagreen: "#2E8B57",
    darkslategray: "#2F4F4F",
    limegreen: "#32CD32",
    mediumseagreen: "#3CB371",
    turquoise: "#40E0D0",
    royalblue: "#4169E1",
    steelblue: "#4682B4",
    darkslateblue: "#483D8B",
    mediumturquoise: "#48D1CC",
    indigo: "#4B0082",
    darkolivegreen: "#556B2F",
    cadetblue: "#5F9EA0",
    cornflowerblue: "#6495ED",
    mediumaquamarine: "#66CDAA",
    dimgray: "#696969",
    slateblue: "#6A5ACD",
    olivedrab: "#6B8E23",
    slategray: "#708090",
    lightslategray: "#778899",
    mediumslateblue: "#7B68EE",
    lawngreen: "#7CFC00",
    chartreuse: "#7FFF00",
    aquamarine: "#7FFFD4",
    maroon: "#800000",
    purple: "#800080",
    olive: "#808000",
    gray: "#808080",
    skyblue: "#87CEEB",
    lightskyblue: "#87CEFA",
    blueviolet: "#8A2BE2",
    darkred: "#8B0000",
    darkmagenta: "#8B008B",
    saddlebrown: "#8B4513",
    darkseagreen: "#8FBC8F",
    lightgreen: "#90EE90",
    mediumpurple: "#9370D8",
    darkviolet: "#9400D3",
    palegreen: "#98FB98",
    darkorchid: "#9932CC",
    yellowgreen: "#9ACD32",
    sienna: "#A0522D",
    brown: "#A52A2A",
    darkgray: "#A9A9A9",
    lightblue: "#ADD8E6",
    greenyellow: "#ADFF2F",
    paleturquoise: "#AFEEEE",
    lightsteelblue: "#B0C4DE",
    powderblue: "#B0E0E6",
    firebrick: "#B22222",
    darkgoldenrod: "#B8860B",
    mediumorchid: "#BA55D3",
    rosybrown: "#BC8F8F",
    darkkhaki: "#BDB76B",
    silver: "#C0C0C0",
    mediumvioletred: "#C71585",
    indianred: "#CD5C5C",
    peru: "#CD853F",
    chocolate: "#D2691E",
    tan: "#D2B48C",
    lightgrey: "#D3D3D3",
    palevioletred: "#D87093",
    thistle: "#D8BFD8",
    orchid: "#DA70D6",
    goldenrod: "#DAA520",
    crimson: "#DC143C",
    gainsboro: "#DCDCDC",
    plum: "#DDA0DD",
    burlywood: "#DEB887",
    lightcyan: "#E0FFFF",
    lavender: "#E6E6FA",
    darksalmon: "#E9967A",
    violet: "#EE82EE",
    palegoldenrod: "#EEE8AA",
    lightcoral: "#F08080",
    khaki: "#F0E68C",
    aliceblue: "#F0F8FF",
    honeydew: "#F0FFF0",
    azure: "#F0FFFF",
    sandybrown: "#F4A460",
    wheat: "#F5DEB3",
    beige: "#F5F5DC",
    whitesmoke: "#F5F5F5",
    mintcream: "#F5FFFA",
    ghostwhite: "#F8F8FF",
    salmon: "#FA8072",
    antiquewhite: "#FAEBD7",
    linen: "#FAF0E6",
    lightgoldenrodyellow: "#FAFAD2",
    oldlace: "#FDF5E6",
    red: "#FF0000",
    fuchsia: "#FF00FF",
    magenta: "#FF00FF",
    deeppink: "#FF1493",
    orangered: "#FF4500",
    tomato: "#FF6347",
    hotpink: "#FF69B4",
    coral: "#FF7F50",
    darkorange: "#FF8C00",
    lightsalmon: "#FFA07A",
    orange: "#FFA500",
    lightpink: "#FFB6C1",
    pink: "#FFC0CB",
    gold: "#FFD700",
    peachpuff: "#FFDAB9",
    navajowhite: "#FFDEAD",
    moccasin: "#FFE4B5",
    bisque: "#FFE4C4",
    mistyrose: "#FFE4E1",
    blanchedalmond: "#FFEBCD",
    papayawhip: "#FFEFD5",
    lavenderblush: "#FFF0F5",
    seashell: "#FFF5EE",
    cornsilk: "#FFF8DC",
    lemonchiffon: "#FFFACD",
    floralwhite: "#FFFAF0",
    snow: "#FFFAFA",
    yellow: "#FFFF00",
    lightyellow: "#FFFFE0",
    ivory: "#FFFFF0",
    white: "#FFFFFF"
  };
  var ColorPicker = /* @__PURE__ */ function() {
    function ColorPicker2() {
      var pixelRatio = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
      _classCallCheck(this, ColorPicker2);
      this.pixelRatio = pixelRatio;
      this.generated = false;
      this.centerCoordinates = {
        x: 289 / 2,
        y: 289 / 2
      };
      this.r = 289 * 0.49;
      this.color = {
        r: 255,
        g: 255,
        b: 255,
        a: 1
      };
      this.hueCircle = void 0;
      this.initialColor = {
        r: 255,
        g: 255,
        b: 255,
        a: 1
      };
      this.previousColor = void 0;
      this.applied = false;
      this.updateCallback = function() {
      };
      this.closeCallback = function() {
      };
      this._create();
    }
    _createClass(ColorPicker2, [{
      key: "insertTo",
      value: function insertTo(container) {
        if (this.hammer !== void 0) {
          this.hammer.destroy();
          this.hammer = void 0;
        }
        this.container = container;
        this.container.appendChild(this.frame);
        this._bindHammer();
        this._setSize();
      }
      /**
       * the callback is executed on apply and save. Bind it to the application
       * @param {function} callback
       */
    }, {
      key: "setUpdateCallback",
      value: function setUpdateCallback(callback) {
        if (typeof callback === "function") {
          this.updateCallback = callback;
        } else {
          throw new Error("Function attempted to set as colorPicker update callback is not a function.");
        }
      }
      /**
       * the callback is executed on apply and save. Bind it to the application
       * @param {function} callback
       */
    }, {
      key: "setCloseCallback",
      value: function setCloseCallback(callback) {
        if (typeof callback === "function") {
          this.closeCallback = callback;
        } else {
          throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
        }
      }
      /**
       *
       * @param {string} color
       * @returns {String}
       * @private
       */
    }, {
      key: "_isColorString",
      value: function _isColorString(color) {
        if (typeof color === "string") {
          return htmlColors[color];
        }
      }
      /**
       * Set the color of the colorPicker
       * Supported formats:
       * 'red'                   --> HTML color string
       * '#ffffff'               --> hex string
       * 'rgb(255,255,255)'      --> rgb string
       * 'rgba(255,255,255,1.0)' --> rgba string
       * {r:255,g:255,b:255}     --> rgb object
       * {r:255,g:255,b:255,a:1.0} --> rgba object
       * @param {string|Object} color
       * @param {boolean} [setInitial=true]
       */
    }, {
      key: "setColor",
      value: function setColor(color) {
        var setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        if (color === "none") {
          return;
        }
        var rgba;
        var htmlColor = this._isColorString(color);
        if (htmlColor !== void 0) {
          color = htmlColor;
        }
        if (availableUtils.isString(color) === true) {
          if (availableUtils.isValidRGB(color) === true) {
            var rgbaArray = color.substr(4).substr(0, color.length - 5).split(",");
            rgba = {
              r: rgbaArray[0],
              g: rgbaArray[1],
              b: rgbaArray[2],
              a: 1
            };
          } else if (availableUtils.isValidRGBA(color) === true) {
            var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(",");
            rgba = {
              r: _rgbaArray[0],
              g: _rgbaArray[1],
              b: _rgbaArray[2],
              a: _rgbaArray[3]
            };
          } else if (availableUtils.isValidHex(color) === true) {
            var rgbObj = availableUtils.hexToRGB(color);
            rgba = {
              r: rgbObj.r,
              g: rgbObj.g,
              b: rgbObj.b,
              a: 1
            };
          }
        } else {
          if (color instanceof Object) {
            if (color.r !== void 0 && color.g !== void 0 && color.b !== void 0) {
              var alpha = color.a !== void 0 ? color.a : "1.0";
              rgba = {
                r: color.r,
                g: color.g,
                b: color.b,
                a: alpha
              };
            }
          }
        }
        if (rgba === void 0) {
          throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + _JSON$stringify(color));
        } else {
          this._setColor(rgba, setInitial);
        }
      }
      /**
       * this shows the color picker.
       * The hue circle is constructed once and stored.
       */
    }, {
      key: "show",
      value: function show() {
        if (this.closeCallback !== void 0) {
          this.closeCallback();
          this.closeCallback = void 0;
        }
        this.applied = false;
        this.frame.style.display = "block";
        this._generateHueCircle();
      }
      // ------------------------------------------ PRIVATE ----------------------------- //
      /**
       * Hide the picker. Is called by the cancel button.
       * Optional boolean to store the previous color for easy access later on.
       * @param {boolean} [storePrevious=true]
       * @private
       */
    }, {
      key: "_hide",
      value: function _hide() {
        var _this = this;
        var storePrevious = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
        if (storePrevious === true) {
          this.previousColor = availableUtils.extend({}, this.color);
        }
        if (this.applied === true) {
          this.updateCallback(this.initialColor);
        }
        this.frame.style.display = "none";
        _setTimeout(function() {
          if (_this.closeCallback !== void 0) {
            _this.closeCallback();
            _this.closeCallback = void 0;
          }
        }, 0);
      }
      /**
       * bound to the save button. Saves and hides.
       * @private
       */
    }, {
      key: "_save",
      value: function _save() {
        this.updateCallback(this.color);
        this.applied = false;
        this._hide();
      }
      /**
       * Bound to apply button. Saves but does not close. Is undone by the cancel button.
       * @private
       */
    }, {
      key: "_apply",
      value: function _apply() {
        this.applied = true;
        this.updateCallback(this.color);
        this._updatePicker(this.color);
      }
      /**
       * load the color from the previous session.
       * @private
       */
    }, {
      key: "_loadLast",
      value: function _loadLast() {
        if (this.previousColor !== void 0) {
          this.setColor(this.previousColor, false);
        } else {
          alert("There is no last color to load...");
        }
      }
      /**
       * set the color, place the picker
       * @param {Object} rgba
       * @param {boolean} [setInitial=true]
       * @private
       */
    }, {
      key: "_setColor",
      value: function _setColor(rgba) {
        var setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        if (setInitial === true) {
          this.initialColor = availableUtils.extend({}, rgba);
        }
        this.color = rgba;
        var hsv = availableUtils.RGBToHSV(rgba.r, rgba.g, rgba.b);
        var angleConvert = 2 * Math.PI;
        var radius = this.r * hsv.s;
        var x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
        var y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);
        this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + "px";
        this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + "px";
        this._updatePicker(rgba);
      }
      /**
       * bound to opacity control
       * @param {number} value
       * @private
       */
    }, {
      key: "_setOpacity",
      value: function _setOpacity(value) {
        this.color.a = value / 100;
        this._updatePicker(this.color);
      }
      /**
       * bound to brightness control
       * @param {number} value
       * @private
       */
    }, {
      key: "_setBrightness",
      value: function _setBrightness(value) {
        var hsv = availableUtils.RGBToHSV(this.color.r, this.color.g, this.color.b);
        hsv.v = value / 100;
        var rgba = availableUtils.HSVToRGB(hsv.h, hsv.s, hsv.v);
        rgba["a"] = this.color.a;
        this.color = rgba;
        this._updatePicker();
      }
      /**
       * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
       * @param {Object} rgba
       * @private
       */
    }, {
      key: "_updatePicker",
      value: function _updatePicker() {
        var rgba = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.color;
        var hsv = availableUtils.RGBToHSV(rgba.r, rgba.g, rgba.b);
        var ctx = this.colorPickerCanvas.getContext("2d");
        if (this.pixelRation === void 0) {
          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
        }
        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
        var w = this.colorPickerCanvas.clientWidth;
        var h = this.colorPickerCanvas.clientHeight;
        ctx.clearRect(0, 0, w, h);
        ctx.putImageData(this.hueCircle, 0, 0);
        ctx.fillStyle = "rgba(0,0,0," + (1 - hsv.v) + ")";
        ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
        _fillInstanceProperty(ctx).call(ctx);
        this.brightnessRange.value = 100 * hsv.v;
        this.opacityRange.value = 100 * rgba.a;
        this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
        this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
      }
      /**
       * used by create to set the size of the canvas.
       * @private
       */
    }, {
      key: "_setSize",
      value: function _setSize() {
        this.colorPickerCanvas.style.width = "100%";
        this.colorPickerCanvas.style.height = "100%";
        this.colorPickerCanvas.width = 289 * this.pixelRatio;
        this.colorPickerCanvas.height = 289 * this.pixelRatio;
      }
      /**
       * create all dom elements
       * TODO: cleanup, lots of similar dom elements
       * @private
       */
    }, {
      key: "_create",
      value: function _create() {
        var _context, _context2, _context3, _context4;
        this.frame = document.createElement("div");
        this.frame.className = "vis-color-picker";
        this.colorPickerDiv = document.createElement("div");
        this.colorPickerSelector = document.createElement("div");
        this.colorPickerSelector.className = "vis-selector";
        this.colorPickerDiv.appendChild(this.colorPickerSelector);
        this.colorPickerCanvas = document.createElement("canvas");
        this.colorPickerDiv.appendChild(this.colorPickerCanvas);
        if (!this.colorPickerCanvas.getContext) {
          var noCanvas = document.createElement("DIV");
          noCanvas.style.color = "red";
          noCanvas.style.fontWeight = "bold";
          noCanvas.style.padding = "10px";
          noCanvas.innerHTML = "Error: your browser does not support HTML canvas";
          this.colorPickerCanvas.appendChild(noCanvas);
        } else {
          var ctx = this.colorPickerCanvas.getContext("2d");
          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
          this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
        }
        this.colorPickerDiv.className = "vis-color";
        this.opacityDiv = document.createElement("div");
        this.opacityDiv.className = "vis-opacity";
        this.brightnessDiv = document.createElement("div");
        this.brightnessDiv.className = "vis-brightness";
        this.arrowDiv = document.createElement("div");
        this.arrowDiv.className = "vis-arrow";
        this.opacityRange = document.createElement("input");
        try {
          this.opacityRange.type = "range";
          this.opacityRange.min = "0";
          this.opacityRange.max = "100";
        } catch (err) {
        }
        this.opacityRange.value = "100";
        this.opacityRange.className = "vis-range";
        this.brightnessRange = document.createElement("input");
        try {
          this.brightnessRange.type = "range";
          this.brightnessRange.min = "0";
          this.brightnessRange.max = "100";
        } catch (err) {
        }
        this.brightnessRange.value = "100";
        this.brightnessRange.className = "vis-range";
        this.opacityDiv.appendChild(this.opacityRange);
        this.brightnessDiv.appendChild(this.brightnessRange);
        var me = this;
        this.opacityRange.onchange = function() {
          me._setOpacity(this.value);
        };
        this.opacityRange.oninput = function() {
          me._setOpacity(this.value);
        };
        this.brightnessRange.onchange = function() {
          me._setBrightness(this.value);
        };
        this.brightnessRange.oninput = function() {
          me._setBrightness(this.value);
        };
        this.brightnessLabel = document.createElement("div");
        this.brightnessLabel.className = "vis-label vis-brightness";
        this.brightnessLabel.innerHTML = "brightness:";
        this.opacityLabel = document.createElement("div");
        this.opacityLabel.className = "vis-label vis-opacity";
        this.opacityLabel.innerHTML = "opacity:";
        this.newColorDiv = document.createElement("div");
        this.newColorDiv.className = "vis-new-color";
        this.newColorDiv.innerHTML = "new";
        this.initialColorDiv = document.createElement("div");
        this.initialColorDiv.className = "vis-initial-color";
        this.initialColorDiv.innerHTML = "initial";
        this.cancelButton = document.createElement("div");
        this.cancelButton.className = "vis-button vis-cancel";
        this.cancelButton.innerHTML = "cancel";
        this.cancelButton.onclick = _bindInstanceProperty$1(_context = this._hide).call(_context, this, false);
        this.applyButton = document.createElement("div");
        this.applyButton.className = "vis-button vis-apply";
        this.applyButton.innerHTML = "apply";
        this.applyButton.onclick = _bindInstanceProperty$1(_context2 = this._apply).call(_context2, this);
        this.saveButton = document.createElement("div");
        this.saveButton.className = "vis-button vis-save";
        this.saveButton.innerHTML = "save";
        this.saveButton.onclick = _bindInstanceProperty$1(_context3 = this._save).call(_context3, this);
        this.loadButton = document.createElement("div");
        this.loadButton.className = "vis-button vis-load";
        this.loadButton.innerHTML = "load last";
        this.loadButton.onclick = _bindInstanceProperty$1(_context4 = this._loadLast).call(_context4, this);
        this.frame.appendChild(this.colorPickerDiv);
        this.frame.appendChild(this.arrowDiv);
        this.frame.appendChild(this.brightnessLabel);
        this.frame.appendChild(this.brightnessDiv);
        this.frame.appendChild(this.opacityLabel);
        this.frame.appendChild(this.opacityDiv);
        this.frame.appendChild(this.newColorDiv);
        this.frame.appendChild(this.initialColorDiv);
        this.frame.appendChild(this.cancelButton);
        this.frame.appendChild(this.applyButton);
        this.frame.appendChild(this.saveButton);
        this.frame.appendChild(this.loadButton);
      }
      /**
       * bind hammer to the color picker
       * @private
       */
    }, {
      key: "_bindHammer",
      value: function _bindHammer() {
        var _this2 = this;
        this.drag = {};
        this.pinch = {};
        this.hammer = new Hammer(this.colorPickerCanvas);
        this.hammer.get("pinch").set({
          enable: true
        });
        onTouch(this.hammer, function(event2) {
          _this2._moveSelector(event2);
        });
        this.hammer.on("tap", function(event2) {
          _this2._moveSelector(event2);
        });
        this.hammer.on("panstart", function(event2) {
          _this2._moveSelector(event2);
        });
        this.hammer.on("panmove", function(event2) {
          _this2._moveSelector(event2);
        });
        this.hammer.on("panend", function(event2) {
          _this2._moveSelector(event2);
        });
      }
      /**
       * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
       * @private
       */
    }, {
      key: "_generateHueCircle",
      value: function _generateHueCircle() {
        if (this.generated === false) {
          var ctx = this.colorPickerCanvas.getContext("2d");
          if (this.pixelRation === void 0) {
            this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
          }
          ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
          var w = this.colorPickerCanvas.clientWidth;
          var h = this.colorPickerCanvas.clientHeight;
          ctx.clearRect(0, 0, w, h);
          var x, y, hue, sat;
          this.centerCoordinates = {
            x: w * 0.5,
            y: h * 0.5
          };
          this.r = 0.49 * w;
          var angleConvert = 2 * Math.PI / 360;
          var hfac = 1 / 360;
          var sfac = 1 / this.r;
          var rgb;
          for (hue = 0; hue < 360; hue++) {
            for (sat = 0; sat < this.r; sat++) {
              x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
              y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
              rgb = availableUtils.HSVToRGB(hue * hfac, sat * sfac, 1);
              ctx.fillStyle = "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
              ctx.fillRect(x - 0.5, y - 0.5, 2, 2);
            }
          }
          ctx.strokeStyle = "rgba(0,0,0,1)";
          ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
          ctx.stroke();
          this.hueCircle = ctx.getImageData(0, 0, w, h);
        }
        this.generated = true;
      }
      /**
       * move the selector. This is called by hammer functions.
       *
       * @param {Event}  event   The event
       * @private
       */
    }, {
      key: "_moveSelector",
      value: function _moveSelector(event2) {
        var rect = this.colorPickerDiv.getBoundingClientRect();
        var left = event2.center.x - rect.left;
        var top = event2.center.y - rect.top;
        var centerY = 0.5 * this.colorPickerDiv.clientHeight;
        var centerX = 0.5 * this.colorPickerDiv.clientWidth;
        var x = left - centerX;
        var y = top - centerY;
        var angle = Math.atan2(x, y);
        var radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);
        var newTop = Math.cos(angle) * radius + centerY;
        var newLeft = Math.sin(angle) * radius + centerX;
        this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + "px";
        this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + "px";
        var h = angle / (2 * Math.PI);
        h = h < 0 ? h + 1 : h;
        var s = radius / this.r;
        var hsv = availableUtils.RGBToHSV(this.color.r, this.color.g, this.color.b);
        hsv.h = h;
        hsv.s = s;
        var rgba = availableUtils.HSVToRGB(hsv.h, hsv.s, hsv.v);
        rgba["a"] = this.color.a;
        this.color = rgba;
        this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
        this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
      }
    }]);
    return ColorPicker2;
  }();
  var css_248z$1 = `div.vis-configuration {
    position:relative;
    display:block;
    float:left;
    font-size:12px;
}

div.vis-configuration-wrapper {
    display:block;
    width:700px;
}

div.vis-configuration-wrapper::after {
  clear: both;
  content: "";
  display: block;
}

div.vis-configuration.vis-config-option-container{
    display:block;
    width:495px;
    background-color: #ffffff;
    border:2px solid #f7f8fa;
    border-radius:4px;
    margin-top:20px;
    left:10px;
    padding-left:5px;
}

div.vis-configuration.vis-config-button{
    display:block;
    width:495px;
    height:25px;
    vertical-align: middle;
    line-height:25px;
    background-color: #f7f8fa;
    border:2px solid #ceced0;
    border-radius:4px;
    margin-top:20px;
    left:10px;
    padding-left:5px;
    cursor: pointer;
    margin-bottom:30px;
}

div.vis-configuration.vis-config-button.hover{
    background-color: #4588e6;
    border:2px solid #214373;
    color:#ffffff;
}

div.vis-configuration.vis-config-item{
    display:block;
    float:left;
    width:495px;
    height:25px;
    vertical-align: middle;
    line-height:25px;
}


div.vis-configuration.vis-config-item.vis-config-s2{
    left:10px;
    background-color: #f7f8fa;
    padding-left:5px;
    border-radius:3px;
}
div.vis-configuration.vis-config-item.vis-config-s3{
    left:20px;
    background-color: #e4e9f0;
    padding-left:5px;
    border-radius:3px;
}
div.vis-configuration.vis-config-item.vis-config-s4{
    left:30px;
    background-color: #cfd8e6;
    padding-left:5px;
    border-radius:3px;
}

div.vis-configuration.vis-config-header{
    font-size:18px;
    font-weight: bold;
}

div.vis-configuration.vis-config-label{
    width:120px;
    height:25px;
    line-height: 25px;
}

div.vis-configuration.vis-config-label.vis-config-s3{
    width:110px;
}
div.vis-configuration.vis-config-label.vis-config-s4{
    width:100px;
}

div.vis-configuration.vis-config-colorBlock{
    top:1px;
    width:30px;
    height:19px;
    border:1px solid #444444;
    border-radius:2px;
    padding:0px;
    margin:0px;
    cursor:pointer;
}

input.vis-configuration.vis-config-checkbox {
    left:-5px;
}


input.vis-configuration.vis-config-rangeinput{
    position:relative;
    top:-5px;
    width:60px;
    /*height:13px;*/
    padding:1px;
    margin:0;
    pointer-events:none;
}

input.vis-configuration.vis-config-range{
    /*removes default webkit styles*/
    -webkit-appearance: none;

    /*fix for FF unable to apply focus style bug */
    border: 0px solid white;
    background-color:rgba(0,0,0,0);

    /*required for proper track sizing in FF*/
    width: 300px;
    height:20px;
}
input.vis-configuration.vis-config-range::-webkit-slider-runnable-track {
    width: 300px;
    height: 5px;
    background: #dedede; /* Old browsers */
    background: -moz-linear-gradient(top,  #dedede 0%, #c8c8c8 99%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#dedede), color-stop(99%,#c8c8c8)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  #dedede 0%,#c8c8c8 99%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top, #dedede 0%, #c8c8c8 99%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  #dedede 0%,#c8c8c8 99%); /* IE10+ */
    background: linear-gradient(to bottom,  #dedede 0%,#c8c8c8 99%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#dedede', endColorstr='#c8c8c8',GradientType=0 ); /* IE6-9 */

    border: 1px solid #999999;
    box-shadow: #aaaaaa 0px 0px 3px 0px;
    border-radius: 3px;
}
input.vis-configuration.vis-config-range::-webkit-slider-thumb {
    -webkit-appearance: none;
    border: 1px solid #14334b;
    height: 17px;
    width: 17px;
    border-radius: 50%;
    background: #3876c2; /* Old browsers */
    background: -moz-linear-gradient(top,  #3876c2 0%, #385380 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#3876c2), color-stop(100%,#385380)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  #3876c2 0%,#385380 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top,  #3876c2 0%,#385380 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  #3876c2 0%,#385380 100%); /* IE10+ */
    background: linear-gradient(to bottom,  #3876c2 0%,#385380 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3876c2', endColorstr='#385380',GradientType=0 ); /* IE6-9 */
    box-shadow: #111927 0px 0px 1px 0px;
    margin-top: -7px;
}
input.vis-configuration.vis-config-range:focus {
    outline: none;
}
input.vis-configuration.vis-config-range:focus::-webkit-slider-runnable-track {
    background: #9d9d9d; /* Old browsers */
    background: -moz-linear-gradient(top, #9d9d9d 0%, #c8c8c8 99%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#9d9d9d), color-stop(99%,#c8c8c8)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  #9d9d9d 0%,#c8c8c8 99%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top,  #9d9d9d 0%,#c8c8c8 99%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  #9d9d9d 0%,#c8c8c8 99%); /* IE10+ */
    background: linear-gradient(to bottom,  #9d9d9d 0%,#c8c8c8 99%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#9d9d9d', endColorstr='#c8c8c8',GradientType=0 ); /* IE6-9 */
}

input.vis-configuration.vis-config-range::-moz-range-track {
    width: 300px;
    height: 10px;
    background: #dedede; /* Old browsers */
    background: -moz-linear-gradient(top,  #dedede 0%, #c8c8c8 99%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#dedede), color-stop(99%,#c8c8c8)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  #dedede 0%,#c8c8c8 99%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top, #dedede 0%, #c8c8c8 99%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  #dedede 0%,#c8c8c8 99%); /* IE10+ */
    background: linear-gradient(to bottom,  #dedede 0%,#c8c8c8 99%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#dedede', endColorstr='#c8c8c8',GradientType=0 ); /* IE6-9 */

    border: 1px solid #999999;
    box-shadow: #aaaaaa 0px 0px 3px 0px;
    border-radius: 3px;
}
input.vis-configuration.vis-config-range::-moz-range-thumb {
    border: none;
    height: 16px;
    width: 16px;

    border-radius: 50%;
    background:  #385380;
}

/*hide the outline behind the border*/
input.vis-configuration.vis-config-range:-moz-focusring{
    outline: 1px solid white;
    outline-offset: -1px;
}

input.vis-configuration.vis-config-range::-ms-track {
    width: 300px;
    height: 5px;

    /*remove bg colour from the track, we'll use ms-fill-lower and ms-fill-upper instead */
    background: transparent;

    /*leave room for the larger thumb to overflow with a transparent border */
    border-color: transparent;
    border-width: 6px 0;

    /*remove default tick marks*/
    color: transparent;
}
input.vis-configuration.vis-config-range::-ms-fill-lower {
    background: #777;
    border-radius: 10px;
}
input.vis-configuration.vis-config-range::-ms-fill-upper {
    background: #ddd;
    border-radius: 10px;
}
input.vis-configuration.vis-config-range::-ms-thumb {
    border: none;
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background:  #385380;
}
input.vis-configuration.vis-config-range:focus::-ms-fill-lower {
    background: #888;
}
input.vis-configuration.vis-config-range:focus::-ms-fill-upper {
    background: #ccc;
}

.vis-configuration-popup {
    position: absolute;
    background: rgba(57, 76, 89, 0.85);
    border: 2px solid #f2faff;
    line-height:30px;
    height:30px;
    width:150px;
    text-align:center;
    color: #ffffff;
    font-size:14px;
    border-radius:4px;
    -webkit-transition: opacity 0.3s ease-in-out;
    -moz-transition: opacity 0.3s ease-in-out;
    transition: opacity 0.3s ease-in-out;
}
.vis-configuration-popup:after, .vis-configuration-popup:before {
    left: 100%;
    top: 50%;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
}

.vis-configuration-popup:after {
    border-color: rgba(136, 183, 213, 0);
    border-left-color: rgba(57, 76, 89, 0.85);
    border-width: 8px;
    margin-top: -8px;
}
.vis-configuration-popup:before {
    border-color: rgba(194, 225, 245, 0);
    border-left-color: #f2faff;
    border-width: 12px;
    margin-top: -12px;
}`;
  styleInject(css_248z$1);
  var Configurator = /* @__PURE__ */ function() {
    function Configurator2(parentModule, defaultContainer, configureOptions2) {
      var pixelRatio = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
      _classCallCheck(this, Configurator2);
      this.parent = parentModule;
      this.changedOptions = [];
      this.container = defaultContainer;
      this.allowCreation = false;
      this.options = {};
      this.initialized = false;
      this.popupCounter = 0;
      this.defaultOptions = {
        enabled: false,
        filter: true,
        container: void 0,
        showButton: true
      };
      availableUtils.extend(this.options, this.defaultOptions);
      this.configureOptions = configureOptions2;
      this.moduleOptions = {};
      this.domElements = [];
      this.popupDiv = {};
      this.popupLimit = 5;
      this.popupHistory = {};
      this.colorPicker = new ColorPicker(pixelRatio);
      this.wrapper = void 0;
    }
    _createClass(Configurator2, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options !== void 0) {
          this.popupHistory = {};
          this._removePopup();
          var enabled = true;
          if (typeof options === "string") {
            this.options.filter = options;
          } else if (_Array$isArray(options)) {
            this.options.filter = options.join();
          } else if (_typeof$1(options) === "object") {
            if (options == null) {
              throw new TypeError("options cannot be null");
            }
            if (options.container !== void 0) {
              this.options.container = options.container;
            }
            if (_filterInstanceProperty(options) !== void 0) {
              this.options.filter = _filterInstanceProperty(options);
            }
            if (options.showButton !== void 0) {
              this.options.showButton = options.showButton;
            }
            if (options.enabled !== void 0) {
              enabled = options.enabled;
            }
          } else if (typeof options === "boolean") {
            this.options.filter = true;
            enabled = options;
          } else if (typeof options === "function") {
            this.options.filter = options;
            enabled = true;
          }
          if (_filterInstanceProperty(this.options) === false) {
            enabled = false;
          }
          this.options.enabled = enabled;
        }
        this._clean();
      }
      /**
       *
       * @param {Object} moduleOptions
       */
    }, {
      key: "setModuleOptions",
      value: function setModuleOptions(moduleOptions) {
        this.moduleOptions = moduleOptions;
        if (this.options.enabled === true) {
          this._clean();
          if (this.options.container !== void 0) {
            this.container = this.options.container;
          }
          this._create();
        }
      }
      /**
       * Create all DOM elements
       * @private
       */
    }, {
      key: "_create",
      value: function _create() {
        this._clean();
        this.changedOptions = [];
        var filter4 = _filterInstanceProperty(this.options);
        var counter2 = 0;
        var show = false;
        for (var option2 in this.configureOptions) {
          if (this.configureOptions.hasOwnProperty(option2)) {
            this.allowCreation = false;
            show = false;
            if (typeof filter4 === "function") {
              show = filter4(option2, []);
              show = show || this._handleObject(this.configureOptions[option2], [option2], true);
            } else if (filter4 === true || _indexOfInstanceProperty(filter4).call(filter4, option2) !== -1) {
              show = true;
            }
            if (show !== false) {
              this.allowCreation = true;
              if (counter2 > 0) {
                this._makeItem([]);
              }
              this._makeHeader(option2);
              this._handleObject(this.configureOptions[option2], [option2]);
            }
            counter2++;
          }
        }
        this._makeButton();
        this._push();
      }
      /**
       * draw all DOM elements on the screen
       * @private
       */
    }, {
      key: "_push",
      value: function _push() {
        this.wrapper = document.createElement("div");
        this.wrapper.className = "vis-configuration-wrapper";
        this.container.appendChild(this.wrapper);
        for (var i2 = 0; i2 < this.domElements.length; i2++) {
          this.wrapper.appendChild(this.domElements[i2]);
        }
        this._showPopupIfNeeded();
      }
      /**
       * delete all DOM elements
       * @private
       */
    }, {
      key: "_clean",
      value: function _clean() {
        for (var i2 = 0; i2 < this.domElements.length; i2++) {
          this.wrapper.removeChild(this.domElements[i2]);
        }
        if (this.wrapper !== void 0) {
          this.container.removeChild(this.wrapper);
          this.wrapper = void 0;
        }
        this.domElements = [];
        this._removePopup();
      }
      /**
       * get the value from the actualOptions if it exists
       * @param {array} path    | where to look for the actual option
       * @returns {*}
       * @private
       */
    }, {
      key: "_getValue",
      value: function _getValue(path2) {
        var base = this.moduleOptions;
        for (var i2 = 0; i2 < path2.length; i2++) {
          if (base[path2[i2]] !== void 0) {
            base = base[path2[i2]];
          } else {
            base = void 0;
            break;
          }
        }
        return base;
      }
      /**
       * all option elements are wrapped in an item
       * @param {Array} path    | where to look for the actual option
       * @param {Array.<Element>} domElements
       * @returns {number}
       * @private
       */
    }, {
      key: "_makeItem",
      value: function _makeItem(path2) {
        if (this.allowCreation === true) {
          var item = document.createElement("div");
          item.className = "vis-configuration vis-config-item vis-config-s" + path2.length;
          for (var _len = arguments.length, domElements = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            domElements[_key - 1] = arguments[_key];
          }
          _forEachInstanceProperty(domElements).call(domElements, function(element) {
            item.appendChild(element);
          });
          this.domElements.push(item);
          return this.domElements.length;
        }
        return 0;
      }
      /**
       * header for major subjects
       * @param {string} name
       * @private
       */
    }, {
      key: "_makeHeader",
      value: function _makeHeader(name) {
        var div = document.createElement("div");
        div.className = "vis-configuration vis-config-header";
        div.innerHTML = availableUtils.xss(name);
        this._makeItem([], div);
      }
      /**
       * make a label, if it is an object label, it gets different styling.
       * @param {string} name
       * @param {array} path    | where to look for the actual option
       * @param {string} objectLabel
       * @returns {HTMLElement}
       * @private
       */
    }, {
      key: "_makeLabel",
      value: function _makeLabel(name, path2) {
        var objectLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var div = document.createElement("div");
        div.className = "vis-configuration vis-config-label vis-config-s" + path2.length;
        if (objectLabel === true) {
          div.innerHTML = availableUtils.xss("<i><b>" + name + ":</b></i>");
        } else {
          div.innerHTML = availableUtils.xss(name + ":");
        }
        return div;
      }
      /**
       * make a dropdown list for multiple possible string optoins
       * @param {Array.<number>} arr
       * @param {number} value
       * @param {array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeDropdown",
      value: function _makeDropdown(arr, value, path2) {
        var select = document.createElement("select");
        select.className = "vis-configuration vis-config-select";
        var selectedValue = 0;
        if (value !== void 0) {
          if (_indexOfInstanceProperty(arr).call(arr, value) !== -1) {
            selectedValue = _indexOfInstanceProperty(arr).call(arr, value);
          }
        }
        for (var i2 = 0; i2 < arr.length; i2++) {
          var option2 = document.createElement("option");
          option2.value = arr[i2];
          if (i2 === selectedValue) {
            option2.selected = "selected";
          }
          option2.innerHTML = arr[i2];
          select.appendChild(option2);
        }
        var me = this;
        select.onchange = function() {
          me._update(this.value, path2);
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        this._makeItem(path2, label, select);
      }
      /**
       * make a range object for numeric options
       * @param {Array.<number>} arr
       * @param {number} value
       * @param {array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeRange",
      value: function _makeRange(arr, value, path2) {
        var defaultValue = arr[0];
        var min2 = arr[1];
        var max2 = arr[2];
        var step = arr[3];
        var range = document.createElement("input");
        range.className = "vis-configuration vis-config-range";
        try {
          range.type = "range";
          range.min = min2;
          range.max = max2;
        } catch (err) {
        }
        range.step = step;
        var popupString = "";
        var popupValue = 0;
        if (value !== void 0) {
          var factor = 1.2;
          if (value < 0 && value * factor < min2) {
            range.min = Math.ceil(value * factor);
            popupValue = range.min;
            popupString = "range increased";
          } else if (value / factor < min2) {
            range.min = Math.ceil(value / factor);
            popupValue = range.min;
            popupString = "range increased";
          }
          if (value * factor > max2 && max2 !== 1) {
            range.max = Math.ceil(value * factor);
            popupValue = range.max;
            popupString = "range increased";
          }
          range.value = value;
        } else {
          range.value = defaultValue;
        }
        var input = document.createElement("input");
        input.className = "vis-configuration vis-config-rangeinput";
        input.value = Number(range.value);
        var me = this;
        range.onchange = function() {
          input.value = this.value;
          me._update(Number(this.value), path2);
        };
        range.oninput = function() {
          input.value = this.value;
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        var itemIndex = this._makeItem(path2, label, range, input);
        if (popupString !== "" && this.popupHistory[itemIndex] !== popupValue) {
          this.popupHistory[itemIndex] = popupValue;
          this._setupPopup(popupString, itemIndex);
        }
      }
      /**
       * make a button object
       * @private
       */
    }, {
      key: "_makeButton",
      value: function _makeButton() {
        var _this = this;
        if (this.options.showButton === true) {
          var generateButton = document.createElement("div");
          generateButton.className = "vis-configuration vis-config-button";
          generateButton.innerHTML = "generate options";
          generateButton.onclick = function() {
            _this._printOptions();
          };
          generateButton.onmouseover = function() {
            generateButton.className = "vis-configuration vis-config-button hover";
          };
          generateButton.onmouseout = function() {
            generateButton.className = "vis-configuration vis-config-button";
          };
          this.optionsContainer = document.createElement("div");
          this.optionsContainer.className = "vis-configuration vis-config-option-container";
          this.domElements.push(this.optionsContainer);
          this.domElements.push(generateButton);
        }
      }
      /**
       * prepare the popup
       * @param {string} string
       * @param {number} index
       * @private
       */
    }, {
      key: "_setupPopup",
      value: function _setupPopup(string2, index) {
        var _this2 = this;
        if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
          var div = document.createElement("div");
          div.id = "vis-configuration-popup";
          div.className = "vis-configuration-popup";
          div.innerHTML = availableUtils.xss(string2);
          div.onclick = function() {
            _this2._removePopup();
          };
          this.popupCounter += 1;
          this.popupDiv = {
            html: div,
            index
          };
        }
      }
      /**
       * remove the popup from the dom
       * @private
       */
    }, {
      key: "_removePopup",
      value: function _removePopup() {
        if (this.popupDiv.html !== void 0) {
          this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
          clearTimeout(this.popupDiv.hideTimeout);
          clearTimeout(this.popupDiv.deleteTimeout);
          this.popupDiv = {};
        }
      }
      /**
       * Show the popup if it is needed.
       * @private
       */
    }, {
      key: "_showPopupIfNeeded",
      value: function _showPopupIfNeeded() {
        var _this3 = this;
        if (this.popupDiv.html !== void 0) {
          var correspondingElement = this.domElements[this.popupDiv.index];
          var rect = correspondingElement.getBoundingClientRect();
          this.popupDiv.html.style.left = rect.left + "px";
          this.popupDiv.html.style.top = rect.top - 30 + "px";
          document.body.appendChild(this.popupDiv.html);
          this.popupDiv.hideTimeout = _setTimeout(function() {
            _this3.popupDiv.html.style.opacity = 0;
          }, 1500);
          this.popupDiv.deleteTimeout = _setTimeout(function() {
            _this3._removePopup();
          }, 1800);
        }
      }
      /**
       * make a checkbox for boolean options.
       * @param {number} defaultValue
       * @param {number} value
       * @param {array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeCheckbox",
      value: function _makeCheckbox(defaultValue, value, path2) {
        var checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.className = "vis-configuration vis-config-checkbox";
        checkbox.checked = defaultValue;
        if (value !== void 0) {
          checkbox.checked = value;
          if (value !== defaultValue) {
            if (_typeof$1(defaultValue) === "object") {
              if (value !== defaultValue.enabled) {
                this.changedOptions.push({
                  path: path2,
                  value
                });
              }
            } else {
              this.changedOptions.push({
                path: path2,
                value
              });
            }
          }
        }
        var me = this;
        checkbox.onchange = function() {
          me._update(this.checked, path2);
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        this._makeItem(path2, label, checkbox);
      }
      /**
       * make a text input field for string options.
       * @param {number} defaultValue
       * @param {number} value
       * @param {array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeTextInput",
      value: function _makeTextInput(defaultValue, value, path2) {
        var checkbox = document.createElement("input");
        checkbox.type = "text";
        checkbox.className = "vis-configuration vis-config-text";
        checkbox.value = value;
        if (value !== defaultValue) {
          this.changedOptions.push({
            path: path2,
            value
          });
        }
        var me = this;
        checkbox.onchange = function() {
          me._update(this.value, path2);
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        this._makeItem(path2, label, checkbox);
      }
      /**
       * make a color field with a color picker for color fields
       * @param {Array.<number>} arr
       * @param {number} value
       * @param {array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_makeColorField",
      value: function _makeColorField(arr, value, path2) {
        var _this4 = this;
        var defaultColor = arr[1];
        var div = document.createElement("div");
        value = value === void 0 ? defaultColor : value;
        if (value !== "none") {
          div.className = "vis-configuration vis-config-colorBlock";
          div.style.backgroundColor = value;
        } else {
          div.className = "vis-configuration vis-config-colorBlock none";
        }
        value = value === void 0 ? defaultColor : value;
        div.onclick = function() {
          _this4._showColorPicker(value, div, path2);
        };
        var label = this._makeLabel(path2[path2.length - 1], path2);
        this._makeItem(path2, label, div);
      }
      /**
       * used by the color buttons to call the color picker.
       * @param {number} value
       * @param {HTMLElement} div
       * @param {array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_showColorPicker",
      value: function _showColorPicker(value, div, path2) {
        var _this5 = this;
        div.onclick = function() {
        };
        this.colorPicker.insertTo(div);
        this.colorPicker.show();
        this.colorPicker.setColor(value);
        this.colorPicker.setUpdateCallback(function(color) {
          var colorString = "rgba(" + color.r + "," + color.g + "," + color.b + "," + color.a + ")";
          div.style.backgroundColor = colorString;
          _this5._update(colorString, path2);
        });
        this.colorPicker.setCloseCallback(function() {
          div.onclick = function() {
            _this5._showColorPicker(value, div, path2);
          };
        });
      }
      /**
       * parse an object and draw the correct items
       * @param {Object} obj
       * @param {array} [path=[]]    | where to look for the actual option
       * @param {boolean} [checkOnly=false]
       * @returns {boolean}
       * @private
       */
    }, {
      key: "_handleObject",
      value: function _handleObject(obj) {
        var path2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        var checkOnly = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var show = false;
        var filter4 = _filterInstanceProperty(this.options);
        var visibleInSet = false;
        for (var subObj in obj) {
          if (obj.hasOwnProperty(subObj)) {
            show = true;
            var item = obj[subObj];
            var newPath = availableUtils.copyAndExtendArray(path2, subObj);
            if (typeof filter4 === "function") {
              show = filter4(subObj, path2);
              if (show === false) {
                if (!_Array$isArray(item) && typeof item !== "string" && typeof item !== "boolean" && item instanceof Object) {
                  this.allowCreation = false;
                  show = this._handleObject(item, newPath, true);
                  this.allowCreation = checkOnly === false;
                }
              }
            }
            if (show !== false) {
              visibleInSet = true;
              var value = this._getValue(newPath);
              if (_Array$isArray(item)) {
                this._handleArray(item, value, newPath);
              } else if (typeof item === "string") {
                this._makeTextInput(item, value, newPath);
              } else if (typeof item === "boolean") {
                this._makeCheckbox(item, value, newPath);
              } else if (item instanceof Object) {
                var draw = true;
                if (_indexOfInstanceProperty(path2).call(path2, "physics") !== -1) {
                  if (this.moduleOptions.physics.solver !== subObj) {
                    draw = false;
                  }
                }
                if (draw === true) {
                  if (item.enabled !== void 0) {
                    var enabledPath = availableUtils.copyAndExtendArray(newPath, "enabled");
                    var enabledValue = this._getValue(enabledPath);
                    if (enabledValue === true) {
                      var label = this._makeLabel(subObj, newPath, true);
                      this._makeItem(newPath, label);
                      visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                    } else {
                      this._makeCheckbox(item, enabledValue, newPath);
                    }
                  } else {
                    var _label = this._makeLabel(subObj, newPath, true);
                    this._makeItem(newPath, _label);
                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                  }
                }
              } else {
                console.error("dont know how to handle", item, subObj, newPath);
              }
            }
          }
        }
        return visibleInSet;
      }
      /**
       * handle the array type of option
       * @param {Array.<number>} arr
       * @param {number} value
       * @param {array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_handleArray",
      value: function _handleArray(arr, value, path2) {
        if (typeof arr[0] === "string" && arr[0] === "color") {
          this._makeColorField(arr, value, path2);
          if (arr[1] !== value) {
            this.changedOptions.push({
              path: path2,
              value
            });
          }
        } else if (typeof arr[0] === "string") {
          this._makeDropdown(arr, value, path2);
          if (arr[0] !== value) {
            this.changedOptions.push({
              path: path2,
              value
            });
          }
        } else if (typeof arr[0] === "number") {
          this._makeRange(arr, value, path2);
          if (arr[0] !== value) {
            this.changedOptions.push({
              path: path2,
              value: Number(value)
            });
          }
        }
      }
      /**
       * called to update the network with the new settings.
       * @param {number} value
       * @param {array} path    | where to look for the actual option
       * @private
       */
    }, {
      key: "_update",
      value: function _update(value, path2) {
        var options = this._constructOptions(value, path2);
        if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
          this.parent.body.emitter.emit("configChange", options);
        }
        this.initialized = true;
        this.parent.setOptions(options);
      }
      /**
       *
       * @param {string|Boolean} value
       * @param {Array.<string>} path
       * @param {{}} optionsObj
       * @returns {{}}
       * @private
       */
    }, {
      key: "_constructOptions",
      value: function _constructOptions(value, path2) {
        var optionsObj = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var pointer = optionsObj;
        value = value === "true" ? true : value;
        value = value === "false" ? false : value;
        for (var i2 = 0; i2 < path2.length; i2++) {
          if (path2[i2] !== "global") {
            if (pointer[path2[i2]] === void 0) {
              pointer[path2[i2]] = {};
            }
            if (i2 !== path2.length - 1) {
              pointer = pointer[path2[i2]];
            } else {
              pointer[path2[i2]] = value;
            }
          }
        }
        return optionsObj;
      }
      /**
       * @private
       */
    }, {
      key: "_printOptions",
      value: function _printOptions() {
        var options = this.getOptions();
        this.optionsContainer.innerHTML = "<pre>var options = " + _JSON$stringify(options, null, 2) + "</pre>";
      }
      /**
       *
       * @returns {{}} options
       */
    }, {
      key: "getOptions",
      value: function getOptions() {
        var options = {};
        for (var i2 = 0; i2 < this.changedOptions.length; i2++) {
          this._constructOptions(this.changedOptions[i2].value, this.changedOptions[i2].path, options);
        }
        return options;
      }
    }]);
    return Configurator2;
  }();
  function _createSuper$1(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$1() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var Timeline = /* @__PURE__ */ function(_Core) {
    _inherits(Timeline3, _Core);
    var _super = _createSuper$1(Timeline3);
    function Timeline3(container, items, groups, options) {
      var _context2, _context3, _context4, _context5, _context6, _context7, _context8;
      var _this;
      _classCallCheck(this, Timeline3);
      _this = _super.call(this);
      _this.initTime = /* @__PURE__ */ new Date();
      _this.itemsDone = false;
      if (!(_assertThisInitialized(_this) instanceof Timeline3)) {
        throw new SyntaxError("Constructor must be called with the new operator");
      }
      if (!(_Array$isArray(groups) || isDataViewLike(groups)) && groups instanceof Object) {
        var forthArgument = options;
        options = groups;
        groups = forthArgument;
      }
      if (options && options.throttleRedraw) {
        console.warn('Timeline option "throttleRedraw" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.');
      }
      var me = _assertThisInitialized(_this);
      _this.defaultOptions = {
        autoResize: true,
        longSelectPressTime: 251,
        orientation: {
          axis: "bottom",
          // axis orientation: 'bottom', 'top', or 'both'
          item: "bottom"
          // not relevant
        },
        moment: moment$3
      };
      _this.options = availableUtils.deepExtend({}, _this.defaultOptions);
      options && availableUtils.setupXSSProtection(options.xss);
      _this._create(container);
      if (!options || options && typeof options.rtl == "undefined") {
        _this.dom.root.style.visibility = "hidden";
        var directionFromDom;
        var domNode = _this.dom.root;
        while (!directionFromDom && domNode) {
          directionFromDom = window.getComputedStyle(domNode, null).direction;
          domNode = domNode.parentElement;
        }
        _this.options.rtl = directionFromDom && directionFromDom.toLowerCase() == "rtl";
      } else {
        _this.options.rtl = options.rtl;
      }
      if (options) {
        if (options.rollingMode) {
          _this.options.rollingMode = options.rollingMode;
        }
        if (options.onInitialDrawComplete) {
          _this.options.onInitialDrawComplete = options.onInitialDrawComplete;
        }
        if (options.onTimeout) {
          _this.options.onTimeout = options.onTimeout;
        }
        if (options.loadingScreenTemplate) {
          _this.options.loadingScreenTemplate = options.loadingScreenTemplate;
        }
      }
      var loadingScreenFragment = document.createElement("div");
      if (_this.options.loadingScreenTemplate) {
        var _context;
        var templateFunction = _bindInstanceProperty$1(_context = _this.options.loadingScreenTemplate).call(_context, _assertThisInitialized(_this));
        var loadingScreen = templateFunction(_this.dom.loadingScreen);
        if (loadingScreen instanceof Object && !(loadingScreen instanceof Element)) {
          templateFunction(loadingScreenFragment);
        } else {
          if (loadingScreen instanceof Element) {
            loadingScreenFragment.innerHTML = "";
            loadingScreenFragment.appendChild(loadingScreen);
          } else if (loadingScreen != void 0) {
            loadingScreenFragment.innerHTML = availableUtils.xss(loadingScreen);
          }
        }
      }
      _this.dom.loadingScreen.appendChild(loadingScreenFragment);
      _this.components = [];
      _this.body = {
        dom: _this.dom,
        domProps: _this.props,
        emitter: {
          on: _bindInstanceProperty$1(_context2 = _this.on).call(_context2, _assertThisInitialized(_this)),
          off: _bindInstanceProperty$1(_context3 = _this.off).call(_context3, _assertThisInitialized(_this)),
          emit: _bindInstanceProperty$1(_context4 = _this.emit).call(_context4, _assertThisInitialized(_this))
        },
        hiddenDates: [],
        util: {
          getScale: function getScale2() {
            return me.timeAxis.step.scale;
          },
          getStep: function getStep() {
            return me.timeAxis.step.step;
          },
          toScreen: _bindInstanceProperty$1(_context5 = me._toScreen).call(_context5, me),
          toGlobalScreen: _bindInstanceProperty$1(_context6 = me._toGlobalScreen).call(_context6, me),
          // this refers to the root.width
          toTime: _bindInstanceProperty$1(_context7 = me._toTime).call(_context7, me),
          toGlobalTime: _bindInstanceProperty$1(_context8 = me._toGlobalTime).call(_context8, me)
        }
      };
      _this.range = new Range(_this.body, _this.options);
      _this.components.push(_this.range);
      _this.body.range = _this.range;
      _this.timeAxis = new TimeAxis(_this.body, _this.options);
      _this.timeAxis2 = null;
      _this.components.push(_this.timeAxis);
      _this.currentTime = new CurrentTime(_this.body, _this.options);
      _this.components.push(_this.currentTime);
      _this.itemSet = new ItemSet(_this.body, _this.options);
      _this.components.push(_this.itemSet);
      _this.itemsData = null;
      _this.groupsData = null;
      function emit(eventName, event2) {
        if (!me.hasListeners(eventName)) {
          return;
        }
        me.emit(eventName, me.getEventProperties(event2));
      }
      _this.dom.root.onclick = function(event2) {
        emit("click", event2);
      };
      _this.dom.root.ondblclick = function(event2) {
        emit("doubleClick", event2);
      };
      _this.dom.root.oncontextmenu = function(event2) {
        emit("contextmenu", event2);
      };
      _this.dom.root.onmouseover = function(event2) {
        emit("mouseOver", event2);
      };
      if (window.PointerEvent) {
        _this.dom.root.onpointerdown = function(event2) {
          emit("mouseDown", event2);
        };
        _this.dom.root.onpointermove = function(event2) {
          emit("mouseMove", event2);
        };
        _this.dom.root.onpointerup = function(event2) {
          emit("mouseUp", event2);
        };
      } else {
        _this.dom.root.onmousemove = function(event2) {
          emit("mouseMove", event2);
        };
        _this.dom.root.onmousedown = function(event2) {
          emit("mouseDown", event2);
        };
        _this.dom.root.onmouseup = function(event2) {
          emit("mouseUp", event2);
        };
      }
      _this.initialFitDone = false;
      _this.on("changed", function() {
        if (me.itemsData == null)
          return;
        if (!me.initialFitDone && !me.options.rollingMode) {
          me.initialFitDone = true;
          if (me.options.start != void 0 || me.options.end != void 0) {
            if (me.options.start == void 0 || me.options.end == void 0) {
              var range = me.getItemRange();
            }
            var start = me.options.start != void 0 ? me.options.start : range.min;
            var end = me.options.end != void 0 ? me.options.end : range.max;
            me.setWindow(start, end, {
              animation: false
            });
          } else {
            me.fit({
              animation: false
            });
          }
        }
        if (!me.initialDrawDone && (me.initialRangeChangeDone || !me.options.start && !me.options.end || me.options.rollingMode)) {
          me.initialDrawDone = true;
          me.itemSet.initialDrawDone = true;
          me.dom.root.style.visibility = "visible";
          me.dom.loadingScreen.parentNode.removeChild(me.dom.loadingScreen);
          if (me.options.onInitialDrawComplete) {
            _setTimeout(function() {
              return me.options.onInitialDrawComplete();
            }, 0);
          }
        }
      });
      _this.on("destroyTimeline", function() {
        me.destroy();
      });
      if (options) {
        _this.setOptions(options);
      }
      _this.body.emitter.on("fit", function(args) {
        _this._onFit(args);
        _this.redraw();
      });
      if (groups) {
        _this.setGroups(groups);
      }
      if (items) {
        _this.setItems(items);
      }
      _this._redraw();
      return _this;
    }
    _createClass(Timeline3, [{
      key: "_createConfigurator",
      value: function _createConfigurator() {
        return new Configurator(this, this.dom.container, configureOptions$1);
      }
      /**
       * Force a redraw. The size of all items will be recalculated.
       * Can be useful to manually redraw when option autoResize=false and the window
       * has been resized, or when the items CSS has been changed.
       *
       * Note: this function will be overridden on construction with a trottled version
       */
    }, {
      key: "redraw",
      value: function redraw() {
        this.itemSet && this.itemSet.markDirty({
          refreshItems: true
        });
        this._redraw();
      }
      /**
       * Remove an item from the group
       * @param {object} options
       */
    }, {
      key: "setOptions",
      value: function setOptions(options) {
        var errorFound2 = Validator.validate(options, allOptions$1);
        if (errorFound2 === true) {
          console.log("%cErrors have been found in the supplied options object.", printStyle);
        }
        Core.prototype.setOptions.call(this, options);
        if ("type" in options) {
          if (options.type !== this.options.type) {
            this.options.type = options.type;
            var itemsData = this.itemsData;
            if (itemsData) {
              var selection = this.getSelection();
              this.setItems(null);
              this.setItems(itemsData.rawDS);
              this.setSelection(selection);
            }
          }
        }
      }
      /**
       * Set items
       * @param {vis.DataSet | Array | null} items
       */
    }, {
      key: "setItems",
      value: function setItems(items) {
        this.itemsDone = false;
        var newDataSet;
        if (!items) {
          newDataSet = null;
        } else if (isDataViewLike(items)) {
          newDataSet = typeCoerceDataSet(items);
        } else {
          newDataSet = typeCoerceDataSet(new DataSet(items));
        }
        if (this.itemsData) {
          this.itemsData.dispose();
        }
        this.itemsData = newDataSet;
        this.itemSet && this.itemSet.setItems(newDataSet != null ? newDataSet.rawDS : null);
      }
      /**
       * Set groups
       * @param {vis.DataSet | Array} groups
       */
    }, {
      key: "setGroups",
      value: function setGroups(groups) {
        var newDataSet;
        var filter4 = function filter5(group) {
          return group.visible !== false;
        };
        if (!groups) {
          newDataSet = null;
        } else {
          if (_Array$isArray(groups))
            groups = new DataSet(groups);
          newDataSet = new DataView(groups, {
            filter: filter4
          });
        }
        if (this.groupsData != null && typeof this.groupsData.setData === "function") {
          this.groupsData.setData(null);
        }
        this.groupsData = newDataSet;
        this.itemSet.setGroups(newDataSet);
      }
      /**
       * Set both items and groups in one go
       * @param {{items: (Array | vis.DataSet), groups: (Array | vis.DataSet)}} data
       */
    }, {
      key: "setData",
      value: function setData(data2) {
        if (data2 && data2.groups) {
          this.setGroups(data2.groups);
        }
        if (data2 && data2.items) {
          this.setItems(data2.items);
        }
      }
      /**
       * Set selected items by their id. Replaces the current selection
       * Unknown id's are silently ignored.
       * @param {string[] | string} [ids]  An array with zero or more id's of the items to be
       *                                selected. If ids is an empty array, all items will be
       *                                unselected.
       * @param {Object} [options]      Available options:
       *                                `focus: boolean`
       *                                    If true, focus will be set to the selected item(s)
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       *                                    Only applicable when option focus is true.
       */
    }, {
      key: "setSelection",
      value: function setSelection(ids, options) {
        this.itemSet && this.itemSet.setSelection(ids);
        if (options && options.focus) {
          this.focus(ids, options);
        }
      }
      /**
       * Get the selected items by their id
       * @return {Array} ids  The ids of the selected items
       */
    }, {
      key: "getSelection",
      value: function getSelection() {
        return this.itemSet && this.itemSet.getSelection() || [];
      }
      /**
       * Adjust the visible window such that the selected item (or multiple items)
       * are centered on screen.
       * @param {string | String[]} id     An item id or array with item ids
       * @param {Object} [options]      Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       *                                `zoom: boolean`
       *                                    If true (default), the timeline will
       *                                    zoom on the element after focus it.
       */
    }, {
      key: "focus",
      value: function focus(id2, options) {
        if (!this.itemsData || id2 == void 0)
          return;
        var ids = _Array$isArray(id2) ? id2 : [id2];
        var itemsData = this.itemsData.get(ids);
        var start = null;
        var end = null;
        _forEachInstanceProperty(itemsData).call(itemsData, function(itemData) {
          var s = itemData.start.valueOf();
          var e = "end" in itemData ? itemData.end.valueOf() : itemData.start.valueOf();
          if (start === null || s < start) {
            start = s;
          }
          if (end === null || e > end) {
            end = e;
          }
        });
        if (start !== null && end !== null) {
          var me = this;
          var item = this.itemSet.items[ids[0]];
          var startPos = this._getScrollTop() * -1;
          var initialVerticalScroll = null;
          var verticalAnimationFrame = function verticalAnimationFrame2(ease, willDraw, done) {
            var verticalScroll = getItemVerticalScroll(me, item);
            if (verticalScroll === false) {
              return;
            }
            if (!initialVerticalScroll) {
              initialVerticalScroll = verticalScroll;
            }
            if (initialVerticalScroll.itemTop == verticalScroll.itemTop && !initialVerticalScroll.shouldScroll) {
              return;
            } else if (initialVerticalScroll.itemTop != verticalScroll.itemTop && verticalScroll.shouldScroll) {
              initialVerticalScroll = verticalScroll;
              startPos = me._getScrollTop() * -1;
            }
            var from3 = startPos;
            var to = initialVerticalScroll.scrollOffset;
            var scrollTop = done ? to : from3 + (to - from3) * ease;
            me._setScrollTop(-scrollTop);
            if (!willDraw) {
              me._redraw();
            }
          };
          var setFinalVerticalPosition = function setFinalVerticalPosition2() {
            var finalVerticalScroll = getItemVerticalScroll(me, item);
            if (finalVerticalScroll.shouldScroll && finalVerticalScroll.itemTop != initialVerticalScroll.itemTop) {
              me._setScrollTop(-finalVerticalScroll.scrollOffset);
              me._redraw();
            }
          };
          var finalVerticalCallback = function finalVerticalCallback2() {
            setFinalVerticalPosition();
            _setTimeout(setFinalVerticalPosition, 100);
          };
          var zoom = options && options.zoom !== void 0 ? options.zoom : true;
          var middle = (start + end) / 2;
          var interval = zoom ? (end - start) * 1.1 : Math.max(this.range.end - this.range.start, (end - start) * 1.1);
          var animation = options && options.animation !== void 0 ? options.animation : true;
          if (!animation) {
            initialVerticalScroll = {
              shouldScroll: false,
              scrollOffset: -1,
              itemTop: -1
            };
          }
          this.range.setRange(middle - interval / 2, middle + interval / 2, {
            animation
          }, finalVerticalCallback, verticalAnimationFrame);
        }
      }
      /**
       * Set Timeline window such that it fits all items
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback]
       */
    }, {
      key: "fit",
      value: function fit(options, callback) {
        var animation = options && options.animation !== void 0 ? options.animation : true;
        var range;
        if (this.itemsData.length === 1 && this.itemsData.get()[0].end === void 0) {
          range = this.getDataRange();
          this.moveTo(range.min.valueOf(), {
            animation
          }, callback);
        } else {
          range = this.getItemRange();
          this.range.setRange(range.min, range.max, {
            animation
          }, callback);
        }
      }
      /**
       * Determine the range of the items, taking into account their actual width
       * and a margin of 10 pixels on both sides.
       *
       * @returns {{min: Date, max: Date}}
       */
    }, {
      key: "getItemRange",
      value: function getItemRange() {
        var _this2 = this;
        var range = this.getDataRange();
        var min2 = range.min !== null ? range.min.valueOf() : null;
        var max2 = range.max !== null ? range.max.valueOf() : null;
        var minItem = null;
        var maxItem = null;
        if (min2 != null && max2 != null) {
          var interval = max2 - min2;
          if (interval <= 0) {
            interval = 10;
          }
          var factor = interval / this.props.center.width;
          var redrawQueue = {};
          var redrawQueueLength = 0;
          _forEachInstanceProperty(availableUtils).call(availableUtils, this.itemSet.items, function(item, key) {
            if (item.groupShowing) {
              var returnQueue = true;
              redrawQueue[key] = item.redraw(returnQueue);
              redrawQueueLength = redrawQueue[key].length;
            }
          });
          var needRedraw = redrawQueueLength > 0;
          if (needRedraw) {
            var _loop = function _loop2(i3) {
              _forEachInstanceProperty(availableUtils).call(availableUtils, redrawQueue, function(fns) {
                fns[i3]();
              });
            };
            for (var i2 = 0; i2 < redrawQueueLength; i2++) {
              _loop(i2);
            }
          }
          _forEachInstanceProperty(availableUtils).call(availableUtils, this.itemSet.items, function(item) {
            var start = getStart(item);
            var end = getEnd(item);
            var startSide;
            var endSide;
            if (_this2.options.rtl) {
              startSide = start - (item.getWidthRight() + 10) * factor;
              endSide = end + (item.getWidthLeft() + 10) * factor;
            } else {
              startSide = start - (item.getWidthLeft() + 10) * factor;
              endSide = end + (item.getWidthRight() + 10) * factor;
            }
            if (startSide < min2) {
              min2 = startSide;
              minItem = item;
            }
            if (endSide > max2) {
              max2 = endSide;
              maxItem = item;
            }
          });
          if (minItem && maxItem) {
            var lhs = minItem.getWidthLeft() + 10;
            var rhs = maxItem.getWidthRight() + 10;
            var delta = this.props.center.width - lhs - rhs;
            if (delta > 0) {
              if (this.options.rtl) {
                min2 = getStart(minItem) - rhs * interval / delta;
                max2 = getEnd(maxItem) + lhs * interval / delta;
              } else {
                min2 = getStart(minItem) - lhs * interval / delta;
                max2 = getEnd(maxItem) + rhs * interval / delta;
              }
            }
          }
        }
        return {
          min: min2 != null ? new Date(min2) : null,
          max: max2 != null ? new Date(max2) : null
        };
      }
      /**
       * Calculate the data range of the items start and end dates
       * @returns {{min: Date, max: Date}}
       */
    }, {
      key: "getDataRange",
      value: function getDataRange() {
        var min2 = null;
        var max2 = null;
        if (this.itemsData) {
          var _context9;
          _forEachInstanceProperty(_context9 = this.itemsData).call(_context9, function(item) {
            var start = availableUtils.convert(item.start, "Date").valueOf();
            var end = availableUtils.convert(item.end != void 0 ? item.end : item.start, "Date").valueOf();
            if (min2 === null || start < min2) {
              min2 = start;
            }
            if (max2 === null || end > max2) {
              max2 = end;
            }
          });
        }
        return {
          min: min2 != null ? new Date(min2) : null,
          max: max2 != null ? new Date(max2) : null
        };
      }
      /**
       * Generate Timeline related information from an event
       * @param {Event} event
       * @return {Object} An object with related information, like on which area
       *                  The event happened, whether clicked on an item, etc.
       */
    }, {
      key: "getEventProperties",
      value: function getEventProperties(event2) {
        var clientX = event2.center ? event2.center.x : event2.clientX;
        var clientY = event2.center ? event2.center.y : event2.clientY;
        var centerContainerRect = this.dom.centerContainer.getBoundingClientRect();
        var x = this.options.rtl ? centerContainerRect.right - clientX : clientX - centerContainerRect.left;
        var y = clientY - centerContainerRect.top;
        var item = this.itemSet.itemFromTarget(event2);
        var group = this.itemSet.groupFromTarget(event2);
        var customTime = CustomTime.customTimeFromTarget(event2);
        var snap = this.itemSet.options.snap || null;
        var scale = this.body.util.getScale();
        var step = this.body.util.getStep();
        var time = this._toTime(x);
        var snappedTime = snap ? snap(time, scale, step) : time;
        var element = availableUtils.getTarget(event2);
        var what = null;
        if (item != null) {
          what = "item";
        } else if (customTime != null) {
          what = "custom-time";
        } else if (availableUtils.hasParent(element, this.timeAxis.dom.foreground)) {
          what = "axis";
        } else if (this.timeAxis2 && availableUtils.hasParent(element, this.timeAxis2.dom.foreground)) {
          what = "axis";
        } else if (availableUtils.hasParent(element, this.itemSet.dom.labelSet)) {
          what = "group-label";
        } else if (availableUtils.hasParent(element, this.currentTime.bar)) {
          what = "current-time";
        } else if (availableUtils.hasParent(element, this.dom.center)) {
          what = "background";
        }
        return {
          event: event2,
          item: item ? item.id : null,
          isCluster: item ? !!item.isCluster : false,
          items: item ? item.items || [] : null,
          group: group ? group.groupId : null,
          customTime: customTime ? customTime.options.id : null,
          what,
          pageX: event2.srcEvent ? event2.srcEvent.pageX : event2.pageX,
          pageY: event2.srcEvent ? event2.srcEvent.pageY : event2.pageY,
          x,
          y,
          time,
          snappedTime
        };
      }
      /**
       * Toggle Timeline rolling mode
       */
    }, {
      key: "toggleRollingMode",
      value: function toggleRollingMode() {
        if (this.range.rolling) {
          this.range.stopRolling();
        } else {
          if (this.options.rollingMode == void 0) {
            this.setOptions(this.options);
          }
          this.range.startRolling();
        }
      }
      /**
       * redraw
       * @private
       */
    }, {
      key: "_redraw",
      value: function _redraw() {
        Core.prototype._redraw.call(this);
      }
      /**
       * on fit callback
       * @param {object} args
       * @private
       */
    }, {
      key: "_onFit",
      value: function _onFit(args) {
        var start = args.start, end = args.end, animation = args.animation;
        if (!end) {
          this.moveTo(start.valueOf(), {
            animation
          });
        } else {
          this.range.setRange(start, end, {
            animation
          });
        }
      }
    }]);
    return Timeline3;
  }(Core);
  function getStart(item) {
    return availableUtils.convert(item.data.start, "Date").valueOf();
  }
  function getEnd(item) {
    var end = item.data.end != void 0 ? item.data.end : item.data.start;
    return availableUtils.convert(end, "Date").valueOf();
  }
  function getItemVerticalScroll(timeline, item) {
    if (!item.parent) {
      return false;
    }
    var itemsetHeight = timeline.options.rtl ? timeline.props.rightContainer.height : timeline.props.leftContainer.height;
    var contentHeight = timeline.props.center.height;
    var group = item.parent;
    var offset = group.top;
    var shouldScroll = true;
    var orientation = timeline.timeAxis.options.orientation.axis;
    var itemTop = function itemTop2() {
      if (orientation == "bottom") {
        return group.height - item.top - item.height;
      } else {
        return item.top;
      }
    };
    var currentScrollHeight = timeline._getScrollTop() * -1;
    var targetOffset = offset + itemTop();
    var height = item.height;
    if (targetOffset < currentScrollHeight) {
      if (offset + itemsetHeight <= offset + itemTop() + height) {
        offset += itemTop() - timeline.itemSet.options.margin.item.vertical;
      }
    } else if (targetOffset + height > currentScrollHeight + itemsetHeight) {
      offset += itemTop() + height - itemsetHeight + timeline.itemSet.options.margin.item.vertical;
    } else {
      shouldScroll = false;
    }
    offset = Math.min(offset, contentHeight - itemsetHeight);
    return {
      shouldScroll,
      scrollOffset: offset,
      itemTop: targetOffset
    };
  }
  var DataScale = /* @__PURE__ */ function() {
    function DataScale2(start, end, autoScaleStart, autoScaleEnd, containerHeight, majorCharHeight) {
      var zeroAlign = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : false;
      var formattingFunction = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      _classCallCheck(this, DataScale2);
      this.majorSteps = [1, 2, 5, 10];
      this.minorSteps = [0.25, 0.5, 1, 2];
      this.customLines = null;
      this.containerHeight = containerHeight;
      this.majorCharHeight = majorCharHeight;
      this._start = start;
      this._end = end;
      this.scale = 1;
      this.minorStepIdx = -1;
      this.magnitudefactor = 1;
      this.determineScale();
      this.zeroAlign = zeroAlign;
      this.autoScaleStart = autoScaleStart;
      this.autoScaleEnd = autoScaleEnd;
      this.formattingFunction = formattingFunction;
      if (autoScaleStart || autoScaleEnd) {
        var me = this;
        var roundToMinor = function roundToMinor2(value) {
          var rounded = value - value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]);
          if (value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]) > 0.5 * (me.magnitudefactor * me.minorSteps[me.minorStepIdx])) {
            return rounded + me.magnitudefactor * me.minorSteps[me.minorStepIdx];
          } else {
            return rounded;
          }
        };
        if (autoScaleStart) {
          this._start -= this.magnitudefactor * 2 * this.minorSteps[this.minorStepIdx];
          this._start = roundToMinor(this._start);
        }
        if (autoScaleEnd) {
          this._end += this.magnitudefactor * this.minorSteps[this.minorStepIdx];
          this._end = roundToMinor(this._end);
        }
        this.determineScale();
      }
    }
    _createClass(DataScale2, [{
      key: "setCharHeight",
      value: function setCharHeight(majorCharHeight) {
        this.majorCharHeight = majorCharHeight;
      }
      /**
       * set height
       * @param {number} containerHeight 
       */
    }, {
      key: "setHeight",
      value: function setHeight(containerHeight) {
        this.containerHeight = containerHeight;
      }
      /**
       * determine scale
       */
    }, {
      key: "determineScale",
      value: function determineScale() {
        var range = this._end - this._start;
        this.scale = this.containerHeight / range;
        var minimumStepValue = this.majorCharHeight / this.scale;
        var orderOfMagnitude = range > 0 ? Math.round(Math.log(range) / Math.LN10) : 0;
        this.minorStepIdx = -1;
        this.magnitudefactor = Math.pow(10, orderOfMagnitude);
        var start = 0;
        if (orderOfMagnitude < 0) {
          start = orderOfMagnitude;
        }
        var solutionFound = false;
        for (var l = start; Math.abs(l) <= Math.abs(orderOfMagnitude); l++) {
          this.magnitudefactor = Math.pow(10, l);
          for (var j = 0; j < this.minorSteps.length; j++) {
            var stepSize = this.magnitudefactor * this.minorSteps[j];
            if (stepSize >= minimumStepValue) {
              solutionFound = true;
              this.minorStepIdx = j;
              break;
            }
          }
          if (solutionFound === true) {
            break;
          }
        }
      }
      /**
       * returns if value is major
       * @param {number} value
       * @returns {boolean} 
       */
    }, {
      key: "is_major",
      value: function is_major(value) {
        return value % (this.magnitudefactor * this.majorSteps[this.minorStepIdx]) === 0;
      }
      /**
       * returns step size
       * @returns {number} 
       */
    }, {
      key: "getStep",
      value: function getStep() {
        return this.magnitudefactor * this.minorSteps[this.minorStepIdx];
      }
      /**
       * returns first major
       * @returns {number} 
       */
    }, {
      key: "getFirstMajor",
      value: function getFirstMajor() {
        var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
        return this.convertValue(this._start + (majorStep - this._start % majorStep) % majorStep);
      }
      /**
       * returns first major
       * @param {date} current
       * @returns {date} formatted date
       */
    }, {
      key: "formatValue",
      value: function formatValue(current) {
        var returnValue = current.toPrecision(5);
        if (typeof this.formattingFunction === "function") {
          returnValue = this.formattingFunction(current);
        }
        if (typeof returnValue === "number") {
          return "".concat(returnValue);
        } else if (typeof returnValue === "string") {
          return returnValue;
        } else {
          return current.toPrecision(5);
        }
      }
      /**
       * returns lines
       * @returns {object} lines
       */
    }, {
      key: "getLines",
      value: function getLines() {
        var lines = [];
        var step = this.getStep();
        var bottomOffset = (step - this._start % step) % step;
        for (var i2 = this._start + bottomOffset; this._end - i2 > 1e-5; i2 += step) {
          if (i2 != this._start) {
            lines.push({
              major: this.is_major(i2),
              y: this.convertValue(i2),
              val: this.formatValue(i2)
            });
          }
        }
        return lines;
      }
      /**
       * follow scale
       * @param {object} other
       */
    }, {
      key: "followScale",
      value: function followScale(other) {
        var oldStepIdx = this.minorStepIdx;
        var oldStart = this._start;
        var oldEnd = this._end;
        var me = this;
        var increaseMagnitude = function increaseMagnitude2() {
          me.magnitudefactor *= 2;
        };
        var decreaseMagnitude = function decreaseMagnitude2() {
          me.magnitudefactor /= 2;
        };
        if (other.minorStepIdx <= 1 && this.minorStepIdx <= 1 || other.minorStepIdx > 1 && this.minorStepIdx > 1)
          ;
        else if (other.minorStepIdx < this.minorStepIdx) {
          this.minorStepIdx = 1;
          if (oldStepIdx == 2) {
            increaseMagnitude();
          } else {
            increaseMagnitude();
            increaseMagnitude();
          }
        } else {
          this.minorStepIdx = 2;
          if (oldStepIdx == 1) {
            decreaseMagnitude();
          } else {
            decreaseMagnitude();
            decreaseMagnitude();
          }
        }
        var otherZero = other.convertValue(0);
        var otherStep = other.getStep() * other.scale;
        var done = false;
        var count = 0;
        while (!done && count++ < 5) {
          this.scale = otherStep / (this.minorSteps[this.minorStepIdx] * this.magnitudefactor);
          var newRange = this.containerHeight / this.scale;
          this._start = oldStart;
          this._end = this._start + newRange;
          var myOriginalZero = this._end * this.scale;
          var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
          var majorOffset = this.getFirstMajor() - other.getFirstMajor();
          if (this.zeroAlign) {
            var zeroOffset = otherZero - myOriginalZero;
            this._end += zeroOffset / this.scale;
            this._start = this._end - newRange;
          } else {
            if (!this.autoScaleStart) {
              this._start += majorStep - majorOffset / this.scale;
              this._end = this._start + newRange;
            } else {
              this._start -= majorOffset / this.scale;
              this._end = this._start + newRange;
            }
          }
          if (!this.autoScaleEnd && this._end > oldEnd + 1e-5) {
            decreaseMagnitude();
            done = false;
            continue;
          }
          if (!this.autoScaleStart && this._start < oldStart - 1e-5) {
            if (this.zeroAlign && oldStart >= 0) {
              console.warn("Can't adhere to given 'min' range, due to zeroalign");
            } else {
              decreaseMagnitude();
              done = false;
              continue;
            }
          }
          if (this.autoScaleStart && this.autoScaleEnd && newRange < oldEnd - oldStart) {
            increaseMagnitude();
            done = false;
            continue;
          }
          done = true;
        }
      }
      /**
       * convert value
       * @param {number} value
       * @returns {number} 
       */
    }, {
      key: "convertValue",
      value: function convertValue(value) {
        return this.containerHeight - (value - this._start) * this.scale;
      }
      /**
       * returns screen to value
       * @param {number} pixels
       * @returns {number} 
       */
    }, {
      key: "screenToValue",
      value: function screenToValue(pixels) {
        return (this.containerHeight - pixels) / this.scale + this._start;
      }
    }]);
    return DataScale2;
  }();
  var css_248z = "\n.vis-panel.vis-background.vis-horizontal .vis-grid.vis-horizontal {\n  position: absolute;\n  width: 100%;\n  height: 0;\n  border-bottom: 1px solid;\n}\n\n.vis-panel.vis-background.vis-horizontal .vis-grid.vis-minor {\n  border-color: #e5e5e5;\n}\n\n.vis-panel.vis-background.vis-horizontal .vis-grid.vis-major {\n  border-color: #bfbfbf;\n}\n\n\n.vis-data-axis .vis-y-axis.vis-major {\n  width: 100%;\n  position: absolute;\n  color: #4d4d4d;\n  white-space: nowrap;\n}\n\n.vis-data-axis .vis-y-axis.vis-major.vis-measure {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  visibility: hidden;\n  width: auto;\n}\n\n\n.vis-data-axis .vis-y-axis.vis-minor {\n  position: absolute;\n  width: 100%;\n  color: #bebebe;\n  white-space: nowrap;\n}\n\n.vis-data-axis .vis-y-axis.vis-minor.vis-measure {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  visibility: hidden;\n  width: auto;\n}\n\n.vis-data-axis .vis-y-axis.vis-title {\n  position: absolute;\n  color: #4d4d4d;\n  white-space: nowrap;\n  bottom: 20px;\n  text-align: center;\n}\n\n.vis-data-axis .vis-y-axis.vis-title.vis-measure {\n  padding: 0;\n  margin: 0;\n  visibility: hidden;\n  width: auto;\n}\n\n.vis-data-axis .vis-y-axis.vis-title.vis-left {\n  bottom: 0;\n  -webkit-transform-origin: left top;\n  -moz-transform-origin: left top;\n  -ms-transform-origin: left top;\n  -o-transform-origin: left top;\n  transform-origin: left bottom;\n  -webkit-transform: rotate(-90deg);\n  -moz-transform: rotate(-90deg);\n  -ms-transform: rotate(-90deg);\n  -o-transform: rotate(-90deg);\n  transform: rotate(-90deg);\n}\n\n.vis-data-axis .vis-y-axis.vis-title.vis-right {\n  bottom: 0;\n  -webkit-transform-origin: right bottom;\n  -moz-transform-origin: right bottom;\n  -ms-transform-origin: right bottom;\n  -o-transform-origin: right bottom;\n  transform-origin: right bottom;\n  -webkit-transform: rotate(90deg);\n  -moz-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  -o-transform: rotate(90deg);\n  transform: rotate(90deg);\n}\n\n.vis-legend {\n  background-color: rgba(247, 252, 255, 0.65);\n  padding: 5px;\n  border: 1px solid #b3b3b3;\n  box-shadow: 2px 2px 10px rgba(154, 154, 154, 0.55);\n}\n\n.vis-legend-text {\n  /*font-size: 10px;*/\n  white-space: nowrap;\n  display: inline-block\n}";
  styleInject(css_248z);
  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
    if (!it2) {
      if (_Array$isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it2)
          o = it2;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n() {
          if (i2 >= o.length)
            return { done: true };
          return { done: false, value: o[i2++] };
        }, e: function e(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it2 = it2.call(o);
    }, n: function n() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it2.return != null)
          it2.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o, minLen) {
    var _context;
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from$1(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
      arr2[i2] = arr[i2];
    return arr2;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = _Reflect$construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !_Reflect$construct)
      return false;
    if (_Reflect$construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  var DataAxis = /* @__PURE__ */ function(_Component) {
    _inherits(DataAxis2, _Component);
    var _super = _createSuper(DataAxis2);
    function DataAxis2(body, options, svg, linegraphOptions) {
      var _this;
      _classCallCheck(this, DataAxis2);
      _this = _super.call(this);
      _this.id = v4();
      _this.body = body;
      _this.defaultOptions = {
        orientation: "left",
        // supported: 'left', 'right'
        showMinorLabels: true,
        showMajorLabels: true,
        showWeekScale: false,
        icons: false,
        majorLinesOffset: 7,
        minorLinesOffset: 4,
        labelOffsetX: 10,
        labelOffsetY: 2,
        iconWidth: 20,
        width: "40px",
        visible: true,
        alignZeros: true,
        left: {
          range: {
            min: void 0,
            max: void 0
          },
          format: function format(value) {
            return "".concat(_parseFloat(value.toPrecision(3)));
          },
          title: {
            text: void 0,
            style: void 0
          }
        },
        right: {
          range: {
            min: void 0,
            max: void 0
          },
          format: function format(value) {
            return "".concat(_parseFloat(value.toPrecision(3)));
          },
          title: {
            text: void 0,
            style: void 0
          }
        }
      };
      _this.linegraphOptions = linegraphOptions;
      _this.linegraphSVG = svg;
      _this.props = {};
      _this.DOMelements = {
        // dynamic elements
        lines: {},
        labels: {},
        title: {}
      };
      _this.dom = {};
      _this.scale = void 0;
      _this.range = {
        start: 0,
        end: 0
      };
      _this.options = availableUtils.extend({}, _this.defaultOptions);
      _this.conversionFactor = 1;
      _this.setOptions(options);
      _this.width = Number("".concat(_this.options.width).replace("px", ""));
      _this.minWidth = _this.width;
      _this.height = _this.linegraphSVG.getBoundingClientRect().height;
      _this.hidden = false;
      _this.stepPixels = 25;
      _this.zeroCrossing = -1;
      _this.amountOfSteps = -1;
      _this.lineOffset = 0;
      _this.master = true;
      _this.masterAxis = null;
      _this.svgElements = {};
      _this.iconsRemoved = false;
      _this.groups = {};
      _this.amountOfGroups = 0;
      _this._create();
      if (_this.scale == void 0) {
        _this._redrawLabels();
      }
      _this.framework = {
        svg: _this.svg,
        svgElements: _this.svgElements,
        options: _this.options,
        groups: _this.groups
      };
      var me = _assertThisInitialized(_this);
      _this.body.emitter.on("verticalDrag", function() {
        me.dom.lineContainer.style.top = "".concat(me.body.domProps.scrollTop, "px");
      });
      return _this;
    }
    _createClass(DataAxis2, [{
      key: "addGroup",
      value: function addGroup(label, graphOptions) {
        if (!this.groups.hasOwnProperty(label)) {
          this.groups[label] = graphOptions;
        }
        this.amountOfGroups += 1;
      }
      /**
       * updates group of data axis
       * @param {string} label 
       * @param {object} graphOptions
       */
    }, {
      key: "updateGroup",
      value: function updateGroup(label, graphOptions) {
        if (!this.groups.hasOwnProperty(label)) {
          this.amountOfGroups += 1;
        }
        this.groups[label] = graphOptions;
      }
      /**
       * removes group of data axis
       * @param {string} label 
       */
    }, {
      key: "removeGroup",
      value: function removeGroup(label) {
        if (this.groups.hasOwnProperty(label)) {
          delete this.groups[label];
          this.amountOfGroups -= 1;
        }
      }
      /**
       * sets options
       * @param {object} options
       */
    }, {
      key: "setOptions",
      value: function setOptions(options) {
        if (options) {
          var redraw = false;
          if (this.options.orientation != options.orientation && options.orientation !== void 0) {
            redraw = true;
          }
          var fields = ["orientation", "showMinorLabels", "showMajorLabels", "icons", "majorLinesOffset", "minorLinesOffset", "labelOffsetX", "labelOffsetY", "iconWidth", "width", "visible", "left", "right", "alignZeros"];
          availableUtils.selectiveDeepExtend(fields, this.options, options);
          this.minWidth = Number("".concat(this.options.width).replace("px", ""));
          if (redraw === true && this.dom.frame) {
            this.hide();
            this.show();
          }
        }
      }
      /**
       * Create the HTML DOM for the DataAxis
       */
    }, {
      key: "_create",
      value: function _create() {
        this.dom.frame = document.createElement("div");
        this.dom.frame.style.width = this.options.width;
        this.dom.frame.style.height = this.height;
        this.dom.lineContainer = document.createElement("div");
        this.dom.lineContainer.style.width = "100%";
        this.dom.lineContainer.style.height = this.height;
        this.dom.lineContainer.style.position = "relative";
        this.dom.lineContainer.style.visibility = "visible";
        this.dom.lineContainer.style.display = "block";
        this.svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        this.svg.style.position = "absolute";
        this.svg.style.top = "0px";
        this.svg.style.height = "100%";
        this.svg.style.width = "100%";
        this.svg.style.display = "block";
        this.dom.frame.appendChild(this.svg);
      }
      /**
       * redraws groups icons
       */
    }, {
      key: "_redrawGroupIcons",
      value: function _redrawGroupIcons() {
        prepareElements(this.svgElements);
        var x;
        var iconWidth = this.options.iconWidth;
        var iconHeight = 15;
        var iconOffset = 4;
        var y = iconOffset + 0.5 * iconHeight;
        if (this.options.orientation === "left") {
          x = iconOffset;
        } else {
          x = this.width - iconWidth - iconOffset;
        }
        var groupArray = _Object$keys(this.groups);
        _sortInstanceProperty(groupArray).call(groupArray, function(a, b) {
          return a < b ? -1 : 1;
        });
        var _iterator = _createForOfIteratorHelper(groupArray), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var groupId = _step.value;
            if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === void 0 || this.linegraphOptions.visibility[groupId] === true)) {
              this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
              y += iconHeight + iconOffset;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        cleanupElements(this.svgElements);
        this.iconsRemoved = false;
      }
      /**
       * Cleans up icons
       */
    }, {
      key: "_cleanupIcons",
      value: function _cleanupIcons() {
        if (this.iconsRemoved === false) {
          prepareElements(this.svgElements);
          cleanupElements(this.svgElements);
          this.iconsRemoved = true;
        }
      }
      /**
       * Create the HTML DOM for the DataAxis
       */
    }, {
      key: "show",
      value: function show() {
        this.hidden = false;
        if (!this.dom.frame.parentNode) {
          if (this.options.orientation === "left") {
            this.body.dom.left.appendChild(this.dom.frame);
          } else {
            this.body.dom.right.appendChild(this.dom.frame);
          }
        }
        if (!this.dom.lineContainer.parentNode) {
          this.body.dom.backgroundHorizontal.appendChild(this.dom.lineContainer);
        }
        this.dom.lineContainer.style.display = "block";
      }
      /**
       * Create the HTML DOM for the DataAxis
       */
    }, {
      key: "hide",
      value: function hide() {
        this.hidden = true;
        if (this.dom.frame.parentNode) {
          this.dom.frame.parentNode.removeChild(this.dom.frame);
        }
        this.dom.lineContainer.style.display = "none";
      }
      /**
       * Set a range (start and end)
       * @param {number} start
       * @param {number} end
       */
    }, {
      key: "setRange",
      value: function setRange(start, end) {
        this.range.start = start;
        this.range.end = end;
      }
      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
    }, {
      key: "redraw",
      value: function redraw() {
        var resized = false;
        var activeGroups = 0;
        this.dom.lineContainer.style.top = "".concat(this.body.domProps.scrollTop, "px");
        for (var groupId in this.groups) {
          if (this.groups.hasOwnProperty(groupId)) {
            if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === void 0 || this.linegraphOptions.visibility[groupId] === true)) {
              activeGroups++;
            }
          }
        }
        if (this.amountOfGroups === 0 || activeGroups === 0) {
          this.hide();
        } else {
          this.show();
          this.height = Number(this.linegraphSVG.style.height.replace("px", ""));
          this.dom.lineContainer.style.height = "".concat(this.height, "px");
          this.width = this.options.visible === true ? Number("".concat(this.options.width).replace("px", "")) : 0;
          var props = this.props;
          var frame = this.dom.frame;
          frame.className = "vis-data-axis";
          this._calculateCharSize();
          var orientation = this.options.orientation;
          var showMinorLabels = this.options.showMinorLabels;
          var showMajorLabels = this.options.showMajorLabels;
          var backgroundHorizontalOffsetWidth = this.body.dom.backgroundHorizontal.offsetWidth;
          props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
          props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;
          props.minorLineWidth = backgroundHorizontalOffsetWidth - this.lineOffset - this.width + 2 * this.options.minorLinesOffset;
          props.minorLineHeight = 1;
          props.majorLineWidth = backgroundHorizontalOffsetWidth - this.lineOffset - this.width + 2 * this.options.majorLinesOffset;
          props.majorLineHeight = 1;
          if (orientation === "left") {
            frame.style.top = "0";
            frame.style.left = "0";
            frame.style.bottom = "";
            frame.style.width = "".concat(this.width, "px");
            frame.style.height = "".concat(this.height, "px");
            this.props.width = this.body.domProps.left.width;
            this.props.height = this.body.domProps.left.height;
          } else {
            frame.style.top = "";
            frame.style.bottom = "0";
            frame.style.left = "0";
            frame.style.width = "".concat(this.width, "px");
            frame.style.height = "".concat(this.height, "px");
            this.props.width = this.body.domProps.right.width;
            this.props.height = this.body.domProps.right.height;
          }
          resized = this._redrawLabels();
          resized = this._isResized() || resized;
          if (this.options.icons === true) {
            this._redrawGroupIcons();
          } else {
            this._cleanupIcons();
          }
          this._redrawTitle(orientation);
        }
        return resized;
      }
      /**
       * Repaint major and minor text labels and vertical grid lines
       *
       * @returns {boolean}
       * @private
       */
    }, {
      key: "_redrawLabels",
      value: function _redrawLabels() {
        var _this2 = this;
        var resized = false;
        prepareElements(this.DOMelements.lines);
        prepareElements(this.DOMelements.labels);
        var orientation = this.options["orientation"];
        var customRange = this.options[orientation].range != void 0 ? this.options[orientation].range : {};
        var autoScaleEnd = true;
        if (customRange.max != void 0) {
          this.range.end = customRange.max;
          autoScaleEnd = false;
        }
        var autoScaleStart = true;
        if (customRange.min != void 0) {
          this.range.start = customRange.min;
          autoScaleStart = false;
        }
        this.scale = new DataScale(this.range.start, this.range.end, autoScaleStart, autoScaleEnd, this.dom.frame.offsetHeight, this.props.majorCharHeight, this.options.alignZeros, this.options[orientation].format);
        if (this.master === false && this.masterAxis != void 0) {
          this.scale.followScale(this.masterAxis.scale);
          this.dom.lineContainer.style.display = "none";
        } else {
          this.dom.lineContainer.style.display = "block";
        }
        this.maxLabelSize = 0;
        var lines = this.scale.getLines();
        _forEachInstanceProperty(lines).call(lines, function(line) {
          var y = line.y;
          var isMajor = line.major;
          if (_this2.options["showMinorLabels"] && isMajor === false) {
            _this2._redrawLabel(y - 2, line.val, orientation, "vis-y-axis vis-minor", _this2.props.minorCharHeight);
          }
          if (isMajor) {
            if (y >= 0) {
              _this2._redrawLabel(y - 2, line.val, orientation, "vis-y-axis vis-major", _this2.props.majorCharHeight);
            }
          }
          if (_this2.master === true) {
            if (isMajor) {
              _this2._redrawLine(y, orientation, "vis-grid vis-horizontal vis-major", _this2.options.majorLinesOffset, _this2.props.majorLineWidth);
            } else {
              _this2._redrawLine(y, orientation, "vis-grid vis-horizontal vis-minor", _this2.options.minorLinesOffset, _this2.props.minorLineWidth);
            }
          }
        });
        var titleWidth = 0;
        if (this.options[orientation].title !== void 0 && this.options[orientation].title.text !== void 0) {
          titleWidth = this.props.titleCharHeight;
        }
        var offset = this.options.icons === true ? Math.max(this.options.iconWidth, titleWidth) + this.options.labelOffsetX + 15 : titleWidth + this.options.labelOffsetX + 15;
        if (this.maxLabelSize > this.width - offset && this.options.visible === true) {
          this.width = this.maxLabelSize + offset;
          this.options.width = "".concat(this.width, "px");
          cleanupElements(this.DOMelements.lines);
          cleanupElements(this.DOMelements.labels);
          this.redraw();
          resized = true;
        } else if (this.maxLabelSize < this.width - offset && this.options.visible === true && this.width > this.minWidth) {
          this.width = Math.max(this.minWidth, this.maxLabelSize + offset);
          this.options.width = "".concat(this.width, "px");
          cleanupElements(this.DOMelements.lines);
          cleanupElements(this.DOMelements.labels);
          this.redraw();
          resized = true;
        } else {
          cleanupElements(this.DOMelements.lines);
          cleanupElements(this.DOMelements.labels);
          resized = false;
        }
        return resized;
      }
      /**
       * converts value
       * @param {number} value
       * @returns {number} converted number
       */
    }, {
      key: "convertValue",
      value: function convertValue(value) {
        return this.scale.convertValue(value);
      }
      /**
       * converts value
       * @param {number} x
       * @returns {number} screen value
       */
    }, {
      key: "screenToValue",
      value: function screenToValue(x) {
        return this.scale.screenToValue(x);
      }
      /**
       * Create a label for the axis at position x
       *
       * @param {number} y
       * @param {string} text
       * @param {'top'|'right'|'bottom'|'left'} orientation
       * @param {string} className
       * @param {number} characterHeight
       * @private
       */
    }, {
      key: "_redrawLabel",
      value: function _redrawLabel(y, text, orientation, className, characterHeight) {
        var label = getDOMElement("div", this.DOMelements.labels, this.dom.frame);
        label.className = className;
        label.innerHTML = availableUtils.xss(text);
        if (orientation === "left") {
          label.style.left = "-".concat(this.options.labelOffsetX, "px");
          label.style.textAlign = "right";
        } else {
          label.style.right = "-".concat(this.options.labelOffsetX, "px");
          label.style.textAlign = "left";
        }
        label.style.top = "".concat(y - 0.5 * characterHeight + this.options.labelOffsetY, "px");
        text += "";
        var largestWidth = Math.max(this.props.majorCharWidth, this.props.minorCharWidth);
        if (this.maxLabelSize < text.length * largestWidth) {
          this.maxLabelSize = text.length * largestWidth;
        }
      }
      /**
       * Create a minor line for the axis at position y
       * @param {number} y
       * @param {'top'|'right'|'bottom'|'left'} orientation
       * @param {string} className
       * @param {number} offset
       * @param {number} width
       */
    }, {
      key: "_redrawLine",
      value: function _redrawLine(y, orientation, className, offset, width) {
        if (this.master === true) {
          var line = getDOMElement("div", this.DOMelements.lines, this.dom.lineContainer);
          line.className = className;
          line.innerHTML = "";
          if (orientation === "left") {
            line.style.left = "".concat(this.width - offset, "px");
          } else {
            line.style.right = "".concat(this.width - offset, "px");
          }
          line.style.width = "".concat(width, "px");
          line.style.top = "".concat(y, "px");
        }
      }
      /**
       * Create a title for the axis
       * @private
       * @param {'top'|'right'|'bottom'|'left'} orientation
       */
    }, {
      key: "_redrawTitle",
      value: function _redrawTitle(orientation) {
        prepareElements(this.DOMelements.title);
        if (this.options[orientation].title !== void 0 && this.options[orientation].title.text !== void 0) {
          var title = getDOMElement("div", this.DOMelements.title, this.dom.frame);
          title.className = "vis-y-axis vis-title vis-".concat(orientation);
          title.innerHTML = availableUtils.xss(this.options[orientation].title.text);
          if (this.options[orientation].title.style !== void 0) {
            availableUtils.addCssText(title, this.options[orientation].title.style);
          }
          if (orientation === "left") {
            title.style.left = "".concat(this.props.titleCharHeight, "px");
          } else {
            title.style.right = "".concat(this.props.titleCharHeight, "px");
          }
          title.style.width = "".concat(this.height, "px");
        }
        cleanupElements(this.DOMelements.title);
      }
      /**
       * Determine the size of text on the axis (both major and minor axis).
       * The size is calculated only once and then cached in this.props.
       * @private
       */
    }, {
      key: "_calculateCharSize",
      value: function _calculateCharSize() {
        if (!("minorCharHeight" in this.props)) {
          var textMinor = document.createTextNode("0");
          var measureCharMinor = document.createElement("div");
          measureCharMinor.className = "vis-y-axis vis-minor vis-measure";
          measureCharMinor.appendChild(textMinor);
          this.dom.frame.appendChild(measureCharMinor);
          this.props.minorCharHeight = measureCharMinor.clientHeight;
          this.props.minorCharWidth = measureCharMinor.clientWidth;
          this.dom.frame.removeChild(measureCharMinor);
        }
        if (!("majorCharHeight" in this.props)) {
          var textMajor = document.createTextNode("0");
          var measureCharMajor = document.createElement("div");
          measureCharMajor.className = "vis-y-axis vis-major vis-measure";
          measureCharMajor.appendChild(textMajor);
          this.dom.frame.appendChild(measureCharMajor);
          this.props.majorCharHeight = measureCharMajor.clientHeight;
          this.props.majorCharWidth = measureCharMajor.clientWidth;
          this.dom.frame.removeChild(measureCharMajor);
        }
        if (!("titleCharHeight" in this.props)) {
          var textTitle = document.createTextNode("0");
          var measureCharTitle = document.createElement("div");
          measureCharTitle.className = "vis-y-axis vis-title vis-measure";
          measureCharTitle.appendChild(textTitle);
          this.dom.frame.appendChild(measureCharTitle);
          this.props.titleCharHeight = measureCharTitle.clientHeight;
          this.props.titleCharWidth = measureCharTitle.clientWidth;
          this.dom.frame.removeChild(measureCharTitle);
        }
      }
    }]);
    return DataAxis2;
  }(Component);
  function Points(groupId, options) {
  }
  Points.draw = function(dataset, group, framework, offset) {
    offset = offset || 0;
    var callback = getCallback(framework, group);
    for (var i2 = 0; i2 < dataset.length; i2++) {
      if (!callback) {
        drawPoint(dataset[i2].screen_x + offset, dataset[i2].screen_y, getGroupTemplate(group), framework.svgElements, framework.svg, dataset[i2].label);
      } else {
        var callbackResult = callback(dataset[i2], group);
        if (callbackResult === true || _typeof$1(callbackResult) === "object") {
          drawPoint(dataset[i2].screen_x + offset, dataset[i2].screen_y, getGroupTemplate(group, callbackResult), framework.svgElements, framework.svg, dataset[i2].label);
        }
      }
    }
  };
  Points.drawIcon = function(group, x, y, iconWidth, iconHeight, framework) {
    var fillHeight = iconHeight * 0.5;
    var outline = getSVGElement("rect", framework.svgElements, framework.svg);
    outline.setAttributeNS(null, "x", x);
    outline.setAttributeNS(null, "y", y - fillHeight);
    outline.setAttributeNS(null, "width", iconWidth);
    outline.setAttributeNS(null, "height", 2 * fillHeight);
    outline.setAttributeNS(null, "class", "vis-outline");
    drawPoint(x + 0.5 * iconWidth, y, getGroupTemplate(group), framework.svgElements, framework.svg);
  };
  function getGroupTemplate(group, callbackResult) {
    callbackResult = typeof callbackResult === "undefined" ? {} : callbackResult;
    return {
      style: callbackResult.style || group.options.drawPoints.style,
      styles: callbackResult.styles || group.options.drawPoints.styles,
      size: callbackResult.size || group.options.drawPoints.size,
      className: callbackResult.className || group.className
    };
  }
  function getCallback(framework, group) {
    var callback = void 0;
    if (framework.options && framework.options.drawPoints && framework.options.drawPoints.onRender && typeof framework.options.drawPoints.onRender == "function") {
      callback = framework.options.drawPoints.onRender;
    }
    if (group.group.options && group.group.options.drawPoints && group.group.options.drawPoints.onRender && typeof group.group.options.drawPoints.onRender == "function") {
      callback = group.group.options.drawPoints.onRender;
    }
    return callback;
  }
  function Bargraph(groupId, options) {
  }
  Bargraph.drawIcon = function(group, x, y, iconWidth, iconHeight, framework) {
    var fillHeight = iconHeight * 0.5;
    var outline = getSVGElement("rect", framework.svgElements, framework.svg);
    outline.setAttributeNS(null, "x", x);
    outline.setAttributeNS(null, "y", y - fillHeight);
    outline.setAttributeNS(null, "width", iconWidth);
    outline.setAttributeNS(null, "height", 2 * fillHeight);
    outline.setAttributeNS(null, "class", "vis-outline");
    var barWidth = Math.round(0.3 * iconWidth);
    var originalWidth = group.options.barChart.width;
    var scale = originalWidth / barWidth;
    var bar1Height = Math.round(0.4 * iconHeight);
    var bar2Height = Math.round(0.75 * iconHeight);
    var offset = Math.round((iconWidth - 2 * barWidth) / 3);
    drawBar(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, barWidth, bar1Height, group.className + " vis-bar", framework.svgElements, framework.svg, group.style);
    drawBar(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, barWidth, bar2Height, group.className + " vis-bar", framework.svgElements, framework.svg, group.style);
    if (group.options.drawPoints.enabled == true) {
      var groupTemplate = {
        style: group.options.drawPoints.style,
        styles: group.options.drawPoints.styles,
        size: group.options.drawPoints.size / scale,
        className: group.className
      };
      drawPoint(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, groupTemplate, framework.svgElements, framework.svg);
      drawPoint(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, groupTemplate, framework.svgElements, framework.svg);
    }
  };
  Bargraph.draw = function(groupIds, processedGroupData, framework) {
    var combinedData = [];
    var intersections = {};
    var coreDistance;
    var key, drawData;
    var group;
    var i2, j;
    var barPoints = 0;
    for (i2 = 0; i2 < groupIds.length; i2++) {
      group = framework.groups[groupIds[i2]];
      if (group.options.style === "bar") {
        if (group.visible === true && (framework.options.groups.visibility[groupIds[i2]] === void 0 || framework.options.groups.visibility[groupIds[i2]] === true)) {
          for (j = 0; j < processedGroupData[groupIds[i2]].length; j++) {
            combinedData.push({
              screen_x: processedGroupData[groupIds[i2]][j].screen_x,
              screen_end: processedGroupData[groupIds[i2]][j].screen_end,
              screen_y: processedGroupData[groupIds[i2]][j].screen_y,
              x: processedGroupData[groupIds[i2]][j].x,
              end: processedGroupData[groupIds[i2]][j].end,
              y: processedGroupData[groupIds[i2]][j].y,
              groupId: groupIds[i2],
              label: processedGroupData[groupIds[i2]][j].label
            });
            barPoints += 1;
          }
        }
      }
    }
    if (barPoints === 0) {
      return;
    }
    _sortInstanceProperty(combinedData).call(combinedData, function(a, b) {
      if (a.screen_x === b.screen_x) {
        return a.groupId < b.groupId ? -1 : 1;
      } else {
        return a.screen_x - b.screen_x;
      }
    });
    Bargraph._getDataIntersections(intersections, combinedData);
    for (i2 = 0; i2 < combinedData.length; i2++) {
      group = framework.groups[combinedData[i2].groupId];
      var minWidth = group.options.barChart.minWidth != void 0 ? group.options.barChart.minWidth : 0.1 * group.options.barChart.width;
      key = combinedData[i2].screen_x;
      var heightOffset = 0;
      if (intersections[key] === void 0) {
        if (i2 + 1 < combinedData.length) {
          coreDistance = Math.abs(combinedData[i2 + 1].screen_x - key);
        }
        drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
      } else {
        var nextKey = i2 + (intersections[key].amount - intersections[key].resolved);
        if (nextKey < combinedData.length) {
          coreDistance = Math.abs(combinedData[nextKey].screen_x - key);
        }
        drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
        intersections[key].resolved += 1;
        if (group.options.stack === true && group.options.excludeFromStacking !== true) {
          if (combinedData[i2].screen_y < group.zeroPosition) {
            heightOffset = intersections[key].accumulatedNegative;
            intersections[key].accumulatedNegative += group.zeroPosition - combinedData[i2].screen_y;
          } else {
            heightOffset = intersections[key].accumulatedPositive;
            intersections[key].accumulatedPositive += group.zeroPosition - combinedData[i2].screen_y;
          }
        } else if (group.options.barChart.sideBySide === true) {
          drawData.width = drawData.width / intersections[key].amount;
          drawData.offset += intersections[key].resolved * drawData.width - 0.5 * drawData.width * (intersections[key].amount + 1);
        }
      }
      var dataWidth = drawData.width;
      var start = combinedData[i2].screen_x;
      if (combinedData[i2].screen_end != void 0) {
        dataWidth = combinedData[i2].screen_end - combinedData[i2].screen_x;
        start += dataWidth * 0.5;
      } else {
        start += drawData.offset;
      }
      drawBar(start, combinedData[i2].screen_y - heightOffset, dataWidth, group.zeroPosition - combinedData[i2].screen_y, group.className + " vis-bar", framework.svgElements, framework.svg, group.style);
      if (group.options.drawPoints.enabled === true) {
        var pointData = {
          screen_x: combinedData[i2].screen_x,
          screen_y: combinedData[i2].screen_y - heightOffset,
          x: combinedData[i2].x,
          y: combinedData[i2].y,
          groupId: combinedData[i2].groupId,
          label: combinedData[i2].label
        };
        Points.draw([pointData], group, framework, drawData.offset);
      }
    }
  };
  Bargraph._getDataIntersections = function(intersections, combinedData) {
    var coreDistance;
    for (var i2 = 0; i2 < combinedData.length; i2++) {
      if (i2 + 1 < combinedData.length) {
        coreDistance = Math.abs(combinedData[i2 + 1].screen_x - combinedData[i2].screen_x);
      }
      if (i2 > 0) {
        coreDistance = Math.min(coreDistance, Math.abs(combinedData[i2 - 1].screen_x - combinedData[i2].screen_x));
      }
      if (coreDistance === 0) {
        if (intersections[combinedData[i2].screen_x] === void 0) {
          intersections[combinedData[i2].screen_x] = {
            amount: 0,
            resolved: 0,
            accumulatedPositive: 0,
            accumulatedNegative: 0
          };
        }
        intersections[combinedData[i2].screen_x].amount += 1;
      }
    }
  };
  Bargraph._getSafeDrawData = function(coreDistance, group, minWidth) {
    var width, offset;
    if (coreDistance < group.options.barChart.width && coreDistance > 0) {
      width = coreDistance < minWidth ? minWidth : coreDistance;
      offset = 0;
      if (group.options.barChart.align === "left") {
        offset -= 0.5 * coreDistance;
      } else if (group.options.barChart.align === "right") {
        offset += 0.5 * coreDistance;
      }
    } else {
      width = group.options.barChart.width;
      offset = 0;
      if (group.options.barChart.align === "left") {
        offset -= 0.5 * group.options.barChart.width;
      } else if (group.options.barChart.align === "right") {
        offset += 0.5 * group.options.barChart.width;
      }
    }
    return {
      width,
      offset
    };
  };
  Bargraph.getStackedYRange = function(combinedData, groupRanges, groupIds, groupLabel, orientation) {
    if (combinedData.length > 0) {
      _sortInstanceProperty(combinedData).call(combinedData, function(a, b) {
        if (a.screen_x === b.screen_x) {
          return a.groupId < b.groupId ? -1 : 1;
        } else {
          return a.screen_x - b.screen_x;
        }
      });
      var intersections = {};
      Bargraph._getDataIntersections(intersections, combinedData);
      groupRanges[groupLabel] = Bargraph._getStackedYRange(intersections, combinedData);
      groupRanges[groupLabel].yAxisOrientation = orientation;
      groupIds.push(groupLabel);
    }
  };
  Bargraph._getStackedYRange = function(intersections, combinedData) {
    var key;
    var yMin = combinedData[0].screen_y;
    var yMax = combinedData[0].screen_y;
    for (var i2 = 0; i2 < combinedData.length; i2++) {
      key = combinedData[i2].screen_x;
      if (intersections[key] === void 0) {
        yMin = yMin > combinedData[i2].screen_y ? combinedData[i2].screen_y : yMin;
        yMax = yMax < combinedData[i2].screen_y ? combinedData[i2].screen_y : yMax;
      } else {
        if (combinedData[i2].screen_y < 0) {
          intersections[key].accumulatedNegative += combinedData[i2].screen_y;
        } else {
          intersections[key].accumulatedPositive += combinedData[i2].screen_y;
        }
      }
    }
    for (var xpos in intersections) {
      if (intersections.hasOwnProperty(xpos)) {
        yMin = yMin > intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMin;
        yMin = yMin > intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMin;
        yMax = yMax < intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMax;
        yMax = yMax < intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMax;
      }
    }
    return {
      min: yMin,
      max: yMax
    };
  };
  function Line(groupId, options) {
  }
  Line.calcPath = function(dataset, group) {
    if (dataset != null) {
      if (dataset.length > 0) {
        var d = [];
        if (group.options.interpolation.enabled == true) {
          d = Line._catmullRom(dataset, group);
        } else {
          d = Line._linear(dataset);
        }
        return d;
      }
    }
  };
  Line.drawIcon = function(group, x, y, iconWidth, iconHeight, framework) {
    var fillHeight = iconHeight * 0.5;
    var path2, fillPath;
    var outline = getSVGElement("rect", framework.svgElements, framework.svg);
    outline.setAttributeNS(null, "x", x);
    outline.setAttributeNS(null, "y", y - fillHeight);
    outline.setAttributeNS(null, "width", iconWidth);
    outline.setAttributeNS(null, "height", 2 * fillHeight);
    outline.setAttributeNS(null, "class", "vis-outline");
    path2 = getSVGElement("path", framework.svgElements, framework.svg);
    path2.setAttributeNS(null, "class", group.className);
    if (group.style !== void 0) {
      path2.setAttributeNS(null, "style", group.style);
    }
    path2.setAttributeNS(null, "d", "M" + x + "," + y + " L" + (x + iconWidth) + "," + y);
    if (group.options.shaded.enabled == true) {
      fillPath = getSVGElement("path", framework.svgElements, framework.svg);
      if (group.options.shaded.orientation == "top") {
        fillPath.setAttributeNS(null, "d", "M" + x + ", " + (y - fillHeight) + "L" + x + "," + y + " L" + (x + iconWidth) + "," + y + " L" + (x + iconWidth) + "," + (y - fillHeight));
      } else {
        fillPath.setAttributeNS(null, "d", "M" + x + "," + y + " L" + x + "," + (y + fillHeight) + " L" + (x + iconWidth) + "," + (y + fillHeight) + "L" + (x + iconWidth) + "," + y);
      }
      fillPath.setAttributeNS(null, "class", group.className + " vis-icon-fill");
      if (group.options.shaded.style !== void 0 && group.options.shaded.style !== "") {
        fillPath.setAttributeNS(null, "style", group.options.shaded.style);
      }
    }
    if (group.options.drawPoints.enabled == true) {
      var groupTemplate = {
        style: group.options.drawPoints.style,
        styles: group.options.drawPoints.styles,
        size: group.options.drawPoints.size,
        className: group.className
      };
      drawPoint(x + 0.5 * iconWidth, y, groupTemplate, framework.svgElements, framework.svg);
    }
  };
  Line.drawShading = function(pathArray, group, subPathArray, framework) {
    if (group.options.shaded.enabled == true) {
      var svgHeight = Number(framework.svg.style.height.replace("px", ""));
      var fillPath = getSVGElement("path", framework.svgElements, framework.svg);
      var type = "L";
      if (group.options.interpolation.enabled == true) {
        type = "C";
      }
      var dFill;
      var zero = 0;
      if (group.options.shaded.orientation == "top") {
        zero = 0;
      } else if (group.options.shaded.orientation == "bottom") {
        zero = svgHeight;
      } else {
        zero = Math.min(Math.max(0, group.zeroPosition), svgHeight);
      }
      if (group.options.shaded.orientation == "group" && subPathArray != null && subPathArray != void 0) {
        dFill = "M" + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + " L" + subPathArray[subPathArray.length - 1][0] + "," + subPathArray[subPathArray.length - 1][1] + " " + this.serializePath(subPathArray, type, true) + subPathArray[0][0] + "," + subPathArray[0][1] + " Z";
      } else {
        dFill = "M" + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + " V" + zero + " H" + pathArray[0][0] + " Z";
      }
      fillPath.setAttributeNS(null, "class", group.className + " vis-fill");
      if (group.options.shaded.style !== void 0) {
        fillPath.setAttributeNS(null, "style", group.options.shaded.style);
      }
      fillPath.setAttributeNS(null, "d", dFill);
    }
  };
  Line.draw = function(pathArray, group, framework) {
    if (pathArray != null && pathArray != void 0) {
      var path2 = getSVGElement("path", framework.svgElements, framework.svg);
      path2.setAttributeNS(null, "class", group.className);
      if (group.style !== void 0) {
        path2.setAttributeNS(null, "style", group.style);
      }
      var type = "L";
      if (group.options.interpolation.enabled == true) {
        type = "C";
      }
      path2.setAttributeNS(null, "d", "M" + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false));
    }
  };
  Line.serializePath = function(pathArray, type, inverse) {
    if (pathArray.length < 2) {
      return "";
    }
    var d = type;
    var i2;
    if (inverse) {
      for (i2 = pathArray.length - 2; i2 > 0; i2--) {
        d += pathArray[i2][0] + "," + pathArray[i2][1] + " ";
      }
    } else {
      for (i2 = 1; i2 < pathArray.length; i2++) {
        d += pathArray[i2][0] + "," + pathArray[i2][1] + " ";
      }
    }
    return d;
  };
  Line._catmullRomUniform = function(data2) {
    var p0, p1, p2, p3, bp1, bp2;
    var d = [];
    d.push([Math.round(data2[0].screen_x), Math.round(data2[0].screen_y)]);
    var normalization = 1 / 6;
    var length = data2.length;
    for (var i2 = 0; i2 < length - 1; i2++) {
      p0 = i2 == 0 ? data2[0] : data2[i2 - 1];
      p1 = data2[i2];
      p2 = data2[i2 + 1];
      p3 = i2 + 2 < length ? data2[i2 + 2] : p2;
      bp1 = {
        screen_x: (-p0.screen_x + 6 * p1.screen_x + p2.screen_x) * normalization,
        screen_y: (-p0.screen_y + 6 * p1.screen_y + p2.screen_y) * normalization
      };
      bp2 = {
        screen_x: (p1.screen_x + 6 * p2.screen_x - p3.screen_x) * normalization,
        screen_y: (p1.screen_y + 6 * p2.screen_y - p3.screen_y) * normalization
      };
      d.push([bp1.screen_x, bp1.screen_y]);
      d.push([bp2.screen_x, bp2.screen_y]);
      d.push([p2.screen_x, p2.screen_y]);
    }
    return d;
  };
  Line._catmullRom = function(data2, group) {
    var alpha = group.options.interpolation.alpha;
    if (alpha == 0 || alpha === void 0) {
      return this._catmullRomUniform(data2);
    } else {
      var p0, p1, p2, p3, bp1, bp2, d1, d2, d3, A, B, N, M;
      var d3powA, d2powA, d3pow2A, d2pow2A, d1pow2A, d1powA;
      var d = [];
      d.push([Math.round(data2[0].screen_x), Math.round(data2[0].screen_y)]);
      var length = data2.length;
      for (var i2 = 0; i2 < length - 1; i2++) {
        p0 = i2 == 0 ? data2[0] : data2[i2 - 1];
        p1 = data2[i2];
        p2 = data2[i2 + 1];
        p3 = i2 + 2 < length ? data2[i2 + 2] : p2;
        d1 = Math.sqrt(Math.pow(p0.screen_x - p1.screen_x, 2) + Math.pow(p0.screen_y - p1.screen_y, 2));
        d2 = Math.sqrt(Math.pow(p1.screen_x - p2.screen_x, 2) + Math.pow(p1.screen_y - p2.screen_y, 2));
        d3 = Math.sqrt(Math.pow(p2.screen_x - p3.screen_x, 2) + Math.pow(p2.screen_y - p3.screen_y, 2));
        d3powA = Math.pow(d3, alpha);
        d3pow2A = Math.pow(d3, 2 * alpha);
        d2powA = Math.pow(d2, alpha);
        d2pow2A = Math.pow(d2, 2 * alpha);
        d1powA = Math.pow(d1, alpha);
        d1pow2A = Math.pow(d1, 2 * alpha);
        A = 2 * d1pow2A + 3 * d1powA * d2powA + d2pow2A;
        B = 2 * d3pow2A + 3 * d3powA * d2powA + d2pow2A;
        N = 3 * d1powA * (d1powA + d2powA);
        if (N > 0) {
          N = 1 / N;
        }
        M = 3 * d3powA * (d3powA + d2powA);
        if (M > 0) {
          M = 1 / M;
        }
        bp1 = {
          screen_x: (-d2pow2A * p0.screen_x + A * p1.screen_x + d1pow2A * p2.screen_x) * N,
          screen_y: (-d2pow2A * p0.screen_y + A * p1.screen_y + d1pow2A * p2.screen_y) * N
        };
        bp2 = {
          screen_x: (d3pow2A * p1.screen_x + B * p2.screen_x - d2pow2A * p3.screen_x) * M,
          screen_y: (d3pow2A * p1.screen_y + B * p2.screen_y - d2pow2A * p3.screen_y) * M
        };
        if (bp1.screen_x == 0 && bp1.screen_y == 0) {
          bp1 = p1;
        }
        if (bp2.screen_x == 0 && bp2.screen_y == 0) {
          bp2 = p2;
        }
        d.push([bp1.screen_x, bp1.screen_y]);
        d.push([bp2.screen_x, bp2.screen_y]);
        d.push([p2.screen_x, p2.screen_y]);
      }
      return d;
    }
  };
  Line._linear = function(data2) {
    var d = [];
    for (var i2 = 0; i2 < data2.length; i2++) {
      d.push([data2[i2].screen_x, data2[i2].screen_y]);
    }
    return d;
  };
  function GraphGroup(group, groupId, options, groupsUsingDefaultStyles) {
    this.id = groupId;
    var fields = ["sampling", "style", "sort", "yAxisOrientation", "barChart", "drawPoints", "shaded", "interpolation", "zIndex", "excludeFromStacking", "excludeFromLegend"];
    this.options = availableUtils.selectiveBridgeObject(fields, options);
    this.usingDefaultStyle = group.className === void 0;
    this.groupsUsingDefaultStyles = groupsUsingDefaultStyles;
    this.zeroPosition = 0;
    this.update(group);
    if (this.usingDefaultStyle == true) {
      this.groupsUsingDefaultStyles[0] += 1;
    }
    this.itemsData = [];
    this.visible = group.visible === void 0 ? true : group.visible;
  }
  GraphGroup.prototype.setItems = function(items) {
    if (items != null) {
      this.itemsData = items;
      if (_sortInstanceProperty(this.options) == true) {
        availableUtils.insertSort(this.itemsData, function(a, b) {
          return a.x > b.x ? 1 : -1;
        });
      }
    } else {
      this.itemsData = [];
    }
  };
  GraphGroup.prototype.getItems = function() {
    return this.itemsData;
  };
  GraphGroup.prototype.setZeroPosition = function(pos) {
    this.zeroPosition = pos;
  };
  GraphGroup.prototype.setOptions = function(options) {
    if (options !== void 0) {
      var fields = ["sampling", "style", "sort", "yAxisOrientation", "barChart", "zIndex", "excludeFromStacking", "excludeFromLegend"];
      availableUtils.selectiveDeepExtend(fields, this.options, options);
      if (typeof options.drawPoints == "function") {
        options.drawPoints = {
          onRender: options.drawPoints
        };
      }
      availableUtils.mergeOptions(this.options, options, "interpolation");
      availableUtils.mergeOptions(this.options, options, "drawPoints");
      availableUtils.mergeOptions(this.options, options, "shaded");
      if (options.interpolation) {
        if (_typeof$1(options.interpolation) == "object") {
          if (options.interpolation.parametrization) {
            if (options.interpolation.parametrization == "uniform") {
              this.options.interpolation.alpha = 0;
            } else if (options.interpolation.parametrization == "chordal") {
              this.options.interpolation.alpha = 1;
            } else {
              this.options.interpolation.parametrization = "centripetal";
              this.options.interpolation.alpha = 0.5;
            }
          }
        }
      }
    }
  };
  GraphGroup.prototype.update = function(group) {
    this.group = group;
    this.content = group.content || "graph";
    this.className = group.className || this.className || "vis-graph-group" + this.groupsUsingDefaultStyles[0] % 10;
    this.visible = group.visible === void 0 ? true : group.visible;
    this.style = group.style;
    this.setOptions(group.options);
  };
  GraphGroup.prototype.getLegend = function(iconWidth, iconHeight, framework, x, y) {
    if (framework == void 0 || framework == null) {
      var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      framework = {
        svg,
        svgElements: {},
        options: this.options,
        groups: [this]
      };
    }
    if (x == void 0 || x == null) {
      x = 0;
    }
    if (y == void 0 || y == null) {
      y = 0.5 * iconHeight;
    }
    switch (this.options.style) {
      case "line":
        Line.drawIcon(this, x, y, iconWidth, iconHeight, framework);
        break;
      case "points":
      case "point":
        Points.drawIcon(this, x, y, iconWidth, iconHeight, framework);
        break;
      case "bar":
        Bargraph.drawIcon(this, x, y, iconWidth, iconHeight, framework);
        break;
    }
    return {
      icon: framework.svg,
      label: this.content,
      orientation: this.options.yAxisOrientation
    };
  };
  GraphGroup.prototype.getYRange = function(groupData) {
    var yMin = groupData[0].y;
    var yMax = groupData[0].y;
    for (var j = 0; j < groupData.length; j++) {
      yMin = yMin > groupData[j].y ? groupData[j].y : yMin;
      yMax = yMax < groupData[j].y ? groupData[j].y : yMax;
    }
    return {
      min: yMin,
      max: yMax,
      yAxisOrientation: this.options.yAxisOrientation
    };
  };
  function Legend(body, options, side, linegraphOptions) {
    this.body = body;
    this.defaultOptions = {
      enabled: false,
      icons: true,
      iconSize: 20,
      iconSpacing: 6,
      left: {
        visible: true,
        position: "top-left"
        // top/bottom - left,center,right
      },
      right: {
        visible: true,
        position: "top-right"
        // top/bottom - left,center,right
      }
    };
    this.side = side;
    this.options = availableUtils.extend({}, this.defaultOptions);
    this.linegraphOptions = linegraphOptions;
    this.svgElements = {};
    this.dom = {};
    this.groups = {};
    this.amountOfGroups = 0;
    this._create();
    this.framework = {
      svg: this.svg,
      svgElements: this.svgElements,
      options: this.options,
      groups: this.groups
    };
    this.setOptions(options);
  }
  Legend.prototype = new Component();
  Legend.prototype.clear = function() {
    this.groups = {};
    this.amountOfGroups = 0;
  };
  Legend.prototype.addGroup = function(label, graphOptions) {
    if (graphOptions.options.excludeFromLegend != true) {
      if (!this.groups.hasOwnProperty(label)) {
        this.groups[label] = graphOptions;
      }
      this.amountOfGroups += 1;
    }
  };
  Legend.prototype.updateGroup = function(label, graphOptions) {
    this.groups[label] = graphOptions;
  };
  Legend.prototype.removeGroup = function(label) {
    if (this.groups.hasOwnProperty(label)) {
      delete this.groups[label];
      this.amountOfGroups -= 1;
    }
  };
  Legend.prototype._create = function() {
    this.dom.frame = document.createElement("div");
    this.dom.frame.className = "vis-legend";
    this.dom.frame.style.position = "absolute";
    this.dom.frame.style.top = "10px";
    this.dom.frame.style.display = "block";
    this.dom.textArea = document.createElement("div");
    this.dom.textArea.className = "vis-legend-text";
    this.dom.textArea.style.position = "relative";
    this.dom.textArea.style.top = "0px";
    this.svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    this.svg.style.position = "absolute";
    this.svg.style.top = "0px";
    this.svg.style.width = this.options.iconSize + 5 + "px";
    this.svg.style.height = "100%";
    this.dom.frame.appendChild(this.svg);
    this.dom.frame.appendChild(this.dom.textArea);
  };
  Legend.prototype.hide = function() {
    if (this.dom.frame.parentNode) {
      this.dom.frame.parentNode.removeChild(this.dom.frame);
    }
  };
  Legend.prototype.show = function() {
    if (!this.dom.frame.parentNode) {
      this.body.dom.center.appendChild(this.dom.frame);
    }
  };
  Legend.prototype.setOptions = function(options) {
    var fields = ["enabled", "orientation", "icons", "left", "right"];
    availableUtils.selectiveDeepExtend(fields, this.options, options);
  };
  Legend.prototype.redraw = function() {
    var activeGroups = 0;
    var groupArray = _Object$keys(this.groups);
    _sortInstanceProperty(groupArray).call(groupArray, function(a, b) {
      return a < b ? -1 : 1;
    });
    for (var i2 = 0; i2 < groupArray.length; i2++) {
      var groupId = groupArray[i2];
      if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === void 0 || this.linegraphOptions.visibility[groupId] == true)) {
        activeGroups++;
      }
    }
    if (this.options[this.side].visible == false || this.amountOfGroups == 0 || this.options.enabled == false || activeGroups == 0) {
      this.hide();
    } else {
      this.show();
      if (this.options[this.side].position == "top-left" || this.options[this.side].position == "bottom-left") {
        this.dom.frame.style.left = "4px";
        this.dom.frame.style.textAlign = "left";
        this.dom.textArea.style.textAlign = "left";
        this.dom.textArea.style.left = this.options.iconSize + 15 + "px";
        this.dom.textArea.style.right = "";
        this.svg.style.left = "0px";
        this.svg.style.right = "";
      } else {
        this.dom.frame.style.right = "4px";
        this.dom.frame.style.textAlign = "right";
        this.dom.textArea.style.textAlign = "right";
        this.dom.textArea.style.right = this.options.iconSize + 15 + "px";
        this.dom.textArea.style.left = "";
        this.svg.style.right = "0px";
        this.svg.style.left = "";
      }
      if (this.options[this.side].position == "top-left" || this.options[this.side].position == "top-right") {
        this.dom.frame.style.top = 4 - Number(this.body.dom.center.style.top.replace("px", "")) + "px";
        this.dom.frame.style.bottom = "";
      } else {
        var scrollableHeight = this.body.domProps.center.height - this.body.domProps.centerContainer.height;
        this.dom.frame.style.bottom = 4 + scrollableHeight + Number(this.body.dom.center.style.top.replace("px", "")) + "px";
        this.dom.frame.style.top = "";
      }
      if (this.options.icons == false) {
        this.dom.frame.style.width = this.dom.textArea.offsetWidth + 10 + "px";
        this.dom.textArea.style.right = "";
        this.dom.textArea.style.left = "";
        this.svg.style.width = "0px";
      } else {
        this.dom.frame.style.width = this.options.iconSize + 15 + this.dom.textArea.offsetWidth + 10 + "px";
        this.drawLegendIcons();
      }
      var content = "";
      for (i2 = 0; i2 < groupArray.length; i2++) {
        groupId = groupArray[i2];
        if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === void 0 || this.linegraphOptions.visibility[groupId] == true)) {
          content += this.groups[groupId].content + "<br />";
        }
      }
      this.dom.textArea.innerHTML = availableUtils.xss(content);
      this.dom.textArea.style.lineHeight = 0.75 * this.options.iconSize + this.options.iconSpacing + "px";
    }
  };
  Legend.prototype.drawLegendIcons = function() {
    if (this.dom.frame.parentNode) {
      var groupArray = _Object$keys(this.groups);
      _sortInstanceProperty(groupArray).call(groupArray, function(a, b) {
        return a < b ? -1 : 1;
      });
      resetElements(this.svgElements);
      var padding = window.getComputedStyle(this.dom.frame).paddingTop;
      var iconOffset = Number(padding.replace("px", ""));
      var x = iconOffset;
      var iconWidth = this.options.iconSize;
      var iconHeight = 0.75 * this.options.iconSize;
      var y = iconOffset + 0.5 * iconHeight + 3;
      this.svg.style.width = iconWidth + 5 + iconOffset + "px";
      for (var i2 = 0; i2 < groupArray.length; i2++) {
        var groupId = groupArray[i2];
        if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === void 0 || this.linegraphOptions.visibility[groupId] == true)) {
          this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
          y += iconHeight + this.options.iconSpacing;
        }
      }
    }
  };
  var UNGROUPED = "__ungrouped__";
  function LineGraph(body, options) {
    this.id = v4();
    this.body = body;
    this.defaultOptions = {
      yAxisOrientation: "left",
      defaultGroup: "default",
      sort: true,
      sampling: true,
      stack: false,
      graphHeight: "400px",
      shaded: {
        enabled: false,
        orientation: "bottom"
        // top, bottom, zero
      },
      style: "line",
      // line, bar
      barChart: {
        width: 50,
        sideBySide: false,
        align: "center"
        // left, center, right
      },
      interpolation: {
        enabled: true,
        parametrization: "centripetal",
        // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
        alpha: 0.5
      },
      drawPoints: {
        enabled: true,
        size: 6,
        style: "square"
        // square, circle
      },
      dataAxis: {},
      //Defaults are done on DataAxis level
      legend: {},
      //Defaults are done on Legend level
      groups: {
        visibility: {}
      }
    };
    this.options = availableUtils.extend({}, this.defaultOptions);
    this.dom = {};
    this.props = {};
    this.hammer = null;
    this.groups = {};
    this.abortedGraphUpdate = false;
    this.updateSVGheight = false;
    this.updateSVGheightOnResize = false;
    this.forceGraphUpdate = true;
    var me = this;
    this.itemsData = null;
    this.groupsData = null;
    this.itemListeners = {
      "add": function add(event2, params, senderId) {
        me._onAdd(params.items);
      },
      "update": function update(event2, params, senderId) {
        me._onUpdate(params.items);
      },
      "remove": function remove(event2, params, senderId) {
        me._onRemove(params.items);
      }
    };
    this.groupListeners = {
      "add": function add(event2, params, senderId) {
        me._onAddGroups(params.items);
      },
      "update": function update(event2, params, senderId) {
        me._onUpdateGroups(params.items);
      },
      "remove": function remove(event2, params, senderId) {
        me._onRemoveGroups(params.items);
      }
    };
    this.items = {};
    this.selection = [];
    this.lastStart = this.body.range.start;
    this.touchParams = {};
    this.svgElements = {};
    this.setOptions(options);
    this.groupsUsingDefaultStyles = [0];
    this.body.emitter.on("rangechanged", function() {
      me.svg.style.left = availableUtils.option.asSize(-me.props.width);
      me.forceGraphUpdate = true;
      me.redraw.call(me);
    });
    this._create();
    this.framework = {
      svg: this.svg,
      svgElements: this.svgElements,
      options: this.options,
      groups: this.groups
    };
  }
  LineGraph.prototype = new Component();
  LineGraph.prototype._create = function() {
    var frame = document.createElement("div");
    frame.className = "vis-line-graph";
    this.dom.frame = frame;
    this.svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    this.svg.style.position = "relative";
    this.svg.style.height = ("" + this.options.graphHeight).replace("px", "") + "px";
    this.svg.style.display = "block";
    frame.appendChild(this.svg);
    this.options.dataAxis.orientation = "left";
    this.yAxisLeft = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);
    this.options.dataAxis.orientation = "right";
    this.yAxisRight = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);
    delete this.options.dataAxis.orientation;
    this.legendLeft = new Legend(this.body, this.options.legend, "left", this.options.groups);
    this.legendRight = new Legend(this.body, this.options.legend, "right", this.options.groups);
    this.show();
  };
  LineGraph.prototype.setOptions = function(options) {
    if (options) {
      var fields = ["sampling", "defaultGroup", "stack", "height", "graphHeight", "yAxisOrientation", "style", "barChart", "dataAxis", "sort", "groups"];
      if (options.graphHeight === void 0 && options.height !== void 0) {
        this.updateSVGheight = true;
        this.updateSVGheightOnResize = true;
      } else if (this.body.domProps.centerContainer.height !== void 0 && options.graphHeight !== void 0) {
        if (_parseInt((options.graphHeight + "").replace("px", "")) < this.body.domProps.centerContainer.height) {
          this.updateSVGheight = true;
        }
      }
      availableUtils.selectiveDeepExtend(fields, this.options, options);
      availableUtils.mergeOptions(this.options, options, "interpolation");
      availableUtils.mergeOptions(this.options, options, "drawPoints");
      availableUtils.mergeOptions(this.options, options, "shaded");
      availableUtils.mergeOptions(this.options, options, "legend");
      if (options.interpolation) {
        if (_typeof$1(options.interpolation) == "object") {
          if (options.interpolation.parametrization) {
            if (options.interpolation.parametrization == "uniform") {
              this.options.interpolation.alpha = 0;
            } else if (options.interpolation.parametrization == "chordal") {
              this.options.interpolation.alpha = 1;
            } else {
              this.options.interpolation.parametrization = "centripetal";
              this.options.interpolation.alpha = 0.5;
            }
          }
        }
      }
      if (this.yAxisLeft) {
        if (options.dataAxis !== void 0) {
          this.yAxisLeft.setOptions(this.options.dataAxis);
          this.yAxisRight.setOptions(this.options.dataAxis);
        }
      }
      if (this.legendLeft) {
        if (options.legend !== void 0) {
          this.legendLeft.setOptions(this.options.legend);
          this.legendRight.setOptions(this.options.legend);
        }
      }
      if (this.groups.hasOwnProperty(UNGROUPED)) {
        this.groups[UNGROUPED].setOptions(options);
      }
    }
    if (this.dom.frame) {
      this.forceGraphUpdate = true;
      this.body.emitter.emit("_change", {
        queue: true
      });
    }
  };
  LineGraph.prototype.hide = function() {
    if (this.dom.frame.parentNode) {
      this.dom.frame.parentNode.removeChild(this.dom.frame);
    }
  };
  LineGraph.prototype.show = function() {
    if (!this.dom.frame.parentNode) {
      this.body.dom.center.appendChild(this.dom.frame);
    }
  };
  LineGraph.prototype.setItems = function(items) {
    var me = this, ids, oldItemsData = this.itemsData;
    if (!items) {
      this.itemsData = null;
    } else if (isDataViewLike(items)) {
      this.itemsData = typeCoerceDataSet(items);
    } else {
      throw new TypeError("Data must implement the interface of DataSet or DataView");
    }
    if (oldItemsData) {
      _forEachInstanceProperty(availableUtils).call(availableUtils, this.itemListeners, function(callback, event2) {
        oldItemsData.off(event2, callback);
      });
      oldItemsData.dispose();
      ids = oldItemsData.getIds();
      this._onRemove(ids);
    }
    if (this.itemsData) {
      var id2 = this.id;
      _forEachInstanceProperty(availableUtils).call(availableUtils, this.itemListeners, function(callback, event2) {
        me.itemsData.on(event2, callback, id2);
      });
      ids = this.itemsData.getIds();
      this._onAdd(ids);
    }
  };
  LineGraph.prototype.setGroups = function(groups) {
    var me = this;
    var ids;
    if (this.groupsData) {
      _forEachInstanceProperty(availableUtils).call(availableUtils, this.groupListeners, function(callback, event2) {
        me.groupsData.off(event2, callback);
      });
      ids = this.groupsData.getIds();
      this.groupsData = null;
      for (var i2 = 0; i2 < ids.length; i2++) {
        this._removeGroup(ids[i2]);
      }
    }
    if (!groups) {
      this.groupsData = null;
    } else if (isDataViewLike(groups)) {
      this.groupsData = groups;
    } else {
      throw new TypeError("Data must implement the interface of DataSet or DataView");
    }
    if (this.groupsData) {
      var id2 = this.id;
      _forEachInstanceProperty(availableUtils).call(availableUtils, this.groupListeners, function(callback, event2) {
        me.groupsData.on(event2, callback, id2);
      });
      ids = this.groupsData.getIds();
      this._onAddGroups(ids);
    }
  };
  LineGraph.prototype._onUpdate = function(ids) {
    this._updateAllGroupData(ids);
  };
  LineGraph.prototype._onAdd = function(ids) {
    this._onUpdate(ids);
  };
  LineGraph.prototype._onRemove = function(ids) {
    this._onUpdate(ids);
  };
  LineGraph.prototype._onUpdateGroups = function(groupIds) {
    this._updateAllGroupData(null, groupIds);
  };
  LineGraph.prototype._onAddGroups = function(groupIds) {
    this._onUpdateGroups(groupIds);
  };
  LineGraph.prototype._onRemoveGroups = function(groupIds) {
    for (var i2 = 0; i2 < groupIds.length; i2++) {
      this._removeGroup(groupIds[i2]);
    }
    this.forceGraphUpdate = true;
    this.body.emitter.emit("_change", {
      queue: true
    });
  };
  LineGraph.prototype._removeGroup = function(groupId) {
    if (this.groups.hasOwnProperty(groupId)) {
      if (this.groups[groupId].options.yAxisOrientation == "right") {
        this.yAxisRight.removeGroup(groupId);
        this.legendRight.removeGroup(groupId);
        this.legendRight.redraw();
      } else {
        this.yAxisLeft.removeGroup(groupId);
        this.legendLeft.removeGroup(groupId);
        this.legendLeft.redraw();
      }
      delete this.groups[groupId];
    }
  };
  LineGraph.prototype._updateGroup = function(group, groupId) {
    if (!this.groups.hasOwnProperty(groupId)) {
      this.groups[groupId] = new GraphGroup(group, groupId, this.options, this.groupsUsingDefaultStyles);
      if (this.groups[groupId].options.yAxisOrientation == "right") {
        this.yAxisRight.addGroup(groupId, this.groups[groupId]);
        this.legendRight.addGroup(groupId, this.groups[groupId]);
      } else {
        this.yAxisLeft.addGroup(groupId, this.groups[groupId]);
        this.legendLeft.addGroup(groupId, this.groups[groupId]);
      }
    } else {
      this.groups[groupId].update(group);
      if (this.groups[groupId].options.yAxisOrientation == "right") {
        this.yAxisRight.updateGroup(groupId, this.groups[groupId]);
        this.legendRight.updateGroup(groupId, this.groups[groupId]);
        this.yAxisLeft.removeGroup(groupId);
        this.legendLeft.removeGroup(groupId);
      } else {
        this.yAxisLeft.updateGroup(groupId, this.groups[groupId]);
        this.legendLeft.updateGroup(groupId, this.groups[groupId]);
        this.yAxisRight.removeGroup(groupId);
        this.legendRight.removeGroup(groupId);
      }
    }
    this.legendLeft.redraw();
    this.legendRight.redraw();
  };
  LineGraph.prototype._updateAllGroupData = function(ids, groupIds) {
    if (this.itemsData != null) {
      var groupsContent = {};
      var items = this.itemsData.get();
      var fieldId = this.itemsData.idProp;
      var idMap = {};
      if (ids) {
        _mapInstanceProperty(ids).call(ids, function(id2) {
          idMap[id2] = id2;
        });
      }
      var groupCounts = {};
      for (var i2 = 0; i2 < items.length; i2++) {
        var item = items[i2];
        var groupId = item.group;
        if (groupId === null || groupId === void 0) {
          groupId = UNGROUPED;
        }
        groupCounts.hasOwnProperty(groupId) ? groupCounts[groupId]++ : groupCounts[groupId] = 1;
      }
      var existingItemsMap = {};
      if (!groupIds && ids) {
        for (groupId in this.groups) {
          if (this.groups.hasOwnProperty(groupId)) {
            group = this.groups[groupId];
            var existing_items = group.getItems();
            groupsContent[groupId] = _filterInstanceProperty(existing_items).call(existing_items, function(item2) {
              existingItemsMap[item2[fieldId]] = item2[fieldId];
              return item2[fieldId] !== idMap[item2[fieldId]];
            });
            var newLength = groupCounts[groupId];
            groupCounts[groupId] -= groupsContent[groupId].length;
            if (groupsContent[groupId].length < newLength) {
              groupsContent[groupId][newLength - 1] = {};
            }
          }
        }
      }
      for (i2 = 0; i2 < items.length; i2++) {
        item = items[i2];
        groupId = item.group;
        if (groupId === null || groupId === void 0) {
          groupId = UNGROUPED;
        }
        if (!groupIds && ids && item[fieldId] !== idMap[item[fieldId]] && existingItemsMap.hasOwnProperty(item[fieldId])) {
          continue;
        }
        if (!groupsContent.hasOwnProperty(groupId)) {
          groupsContent[groupId] = new Array(groupCounts[groupId]);
        }
        var extended = availableUtils.bridgeObject(item);
        extended.x = availableUtils.convert(item.x, "Date");
        extended.end = availableUtils.convert(item.end, "Date");
        extended.orginalY = item.y;
        extended.y = Number(item.y);
        extended[fieldId] = item[fieldId];
        var index = groupsContent[groupId].length - groupCounts[groupId]--;
        groupsContent[groupId][index] = extended;
      }
      for (groupId in this.groups) {
        if (this.groups.hasOwnProperty(groupId)) {
          if (!groupsContent.hasOwnProperty(groupId)) {
            groupsContent[groupId] = new Array(0);
          }
        }
      }
      for (groupId in groupsContent) {
        if (groupsContent.hasOwnProperty(groupId)) {
          if (groupsContent[groupId].length == 0) {
            if (this.groups.hasOwnProperty(groupId)) {
              this._removeGroup(groupId);
            }
          } else {
            var group = void 0;
            if (this.groupsData != void 0) {
              group = this.groupsData.get(groupId);
            }
            if (group == void 0) {
              group = {
                id: groupId,
                content: this.options.defaultGroup + groupId
              };
            }
            this._updateGroup(group, groupId);
            this.groups[groupId].setItems(groupsContent[groupId]);
          }
        }
      }
      this.forceGraphUpdate = true;
      this.body.emitter.emit("_change", {
        queue: true
      });
    }
  };
  LineGraph.prototype.redraw = function() {
    var resized = false;
    this.props.width = this.dom.frame.offsetWidth;
    this.props.height = this.body.domProps.centerContainer.height - this.body.domProps.border.top - this.body.domProps.border.bottom;
    resized = this._isResized() || resized;
    var visibleInterval = this.body.range.end - this.body.range.start;
    var zoomed = visibleInterval != this.lastVisibleInterval;
    this.lastVisibleInterval = visibleInterval;
    if (resized == true) {
      var _context;
      this.svg.style.width = availableUtils.option.asSize(3 * this.props.width);
      this.svg.style.left = availableUtils.option.asSize(-this.props.width);
      if (_indexOfInstanceProperty(_context = this.options.height + "").call(_context, "%") != -1 || this.updateSVGheightOnResize == true) {
        this.updateSVGheight = true;
      }
    }
    if (this.updateSVGheight == true) {
      if (this.options.graphHeight != this.props.height + "px") {
        this.options.graphHeight = this.props.height + "px";
        this.svg.style.height = this.props.height + "px";
      }
      this.updateSVGheight = false;
    } else {
      this.svg.style.height = ("" + this.options.graphHeight).replace("px", "") + "px";
    }
    if (resized == true || zoomed == true || this.abortedGraphUpdate == true || this.forceGraphUpdate == true) {
      resized = this._updateGraph() || resized;
      this.forceGraphUpdate = false;
      this.lastStart = this.body.range.start;
      this.svg.style.left = -this.props.width + "px";
    } else {
      if (this.lastStart != 0) {
        var offset = this.body.range.start - this.lastStart;
        var range = this.body.range.end - this.body.range.start;
        if (this.props.width != 0) {
          var rangePerPixelInv = this.props.width / range;
          var xOffset = offset * rangePerPixelInv;
          this.svg.style.left = -this.props.width - xOffset + "px";
        }
      }
    }
    this.legendLeft.redraw();
    this.legendRight.redraw();
    return resized;
  };
  LineGraph.prototype._getSortedGroupIds = function() {
    var grouplist = [];
    for (var groupId in this.groups) {
      if (this.groups.hasOwnProperty(groupId)) {
        var group = this.groups[groupId];
        if (group.visible == true && (this.options.groups.visibility[groupId] === void 0 || this.options.groups.visibility[groupId] == true)) {
          grouplist.push({
            id: groupId,
            zIndex: group.options.zIndex
          });
        }
      }
    }
    availableUtils.insertSort(grouplist, function(a, b) {
      var az = a.zIndex;
      var bz = b.zIndex;
      if (az === void 0)
        az = 0;
      if (bz === void 0)
        bz = 0;
      return az == bz ? 0 : az < bz ? -1 : 1;
    });
    var groupIds = new Array(grouplist.length);
    for (var i2 = 0; i2 < grouplist.length; i2++) {
      groupIds[i2] = grouplist[i2].id;
    }
    return groupIds;
  };
  LineGraph.prototype._updateGraph = function() {
    prepareElements(this.svgElements);
    if (this.props.width != 0 && this.itemsData != null) {
      var group, i2;
      var groupRanges = {};
      var changeCalled = false;
      var minDate = this.body.util.toGlobalTime(-this.body.domProps.root.width);
      var maxDate = this.body.util.toGlobalTime(2 * this.body.domProps.root.width);
      var groupIds = this._getSortedGroupIds();
      if (groupIds.length > 0) {
        var groupsData = {};
        this._getRelevantData(groupIds, groupsData, minDate, maxDate);
        this._applySampling(groupIds, groupsData);
        for (i2 = 0; i2 < groupIds.length; i2++) {
          this._convertXcoordinates(groupsData[groupIds[i2]]);
        }
        this._getYRanges(groupIds, groupsData, groupRanges);
        changeCalled = this._updateYAxis(groupIds, groupRanges);
        if (changeCalled == true) {
          cleanupElements(this.svgElements);
          this.abortedGraphUpdate = true;
          return true;
        }
        this.abortedGraphUpdate = false;
        var below = void 0;
        for (i2 = 0; i2 < groupIds.length; i2++) {
          group = this.groups[groupIds[i2]];
          if (this.options.stack === true && this.options.style === "line") {
            if (group.options.excludeFromStacking == void 0 || !group.options.excludeFromStacking) {
              if (below != void 0) {
                this._stack(groupsData[group.id], groupsData[below.id]);
                if (group.options.shaded.enabled == true && group.options.shaded.orientation !== "group") {
                  if (group.options.shaded.orientation == "top" && below.options.shaded.orientation !== "group") {
                    below.options.shaded.orientation = "group";
                    below.options.shaded.groupId = group.id;
                  } else {
                    group.options.shaded.orientation = "group";
                    group.options.shaded.groupId = below.id;
                  }
                }
              }
              below = group;
            }
          }
          this._convertYcoordinates(groupsData[groupIds[i2]], group);
        }
        var paths = {};
        for (i2 = 0; i2 < groupIds.length; i2++) {
          group = this.groups[groupIds[i2]];
          if (group.options.style === "line" && group.options.shaded.enabled == true) {
            var dataset = groupsData[groupIds[i2]];
            if (dataset == null || dataset.length == 0) {
              continue;
            }
            if (!paths.hasOwnProperty(groupIds[i2])) {
              paths[groupIds[i2]] = Line.calcPath(dataset, group);
            }
            if (group.options.shaded.orientation === "group") {
              var subGroupId = group.options.shaded.groupId;
              if (_indexOfInstanceProperty(groupIds).call(groupIds, subGroupId) === -1) {
                console.log(group.id + ": Unknown shading group target given:" + subGroupId);
                continue;
              }
              if (!paths.hasOwnProperty(subGroupId)) {
                paths[subGroupId] = Line.calcPath(groupsData[subGroupId], this.groups[subGroupId]);
              }
              Line.drawShading(paths[groupIds[i2]], group, paths[subGroupId], this.framework);
            } else {
              Line.drawShading(paths[groupIds[i2]], group, void 0, this.framework);
            }
          }
        }
        Bargraph.draw(groupIds, groupsData, this.framework);
        for (i2 = 0; i2 < groupIds.length; i2++) {
          group = this.groups[groupIds[i2]];
          if (groupsData[groupIds[i2]].length > 0) {
            switch (group.options.style) {
              case "line":
                if (!paths.hasOwnProperty(groupIds[i2])) {
                  paths[groupIds[i2]] = Line.calcPath(groupsData[groupIds[i2]], group);
                }
                Line.draw(paths[groupIds[i2]], group, this.framework);
              case "point":
              case "points":
                if (group.options.style == "point" || group.options.style == "points" || group.options.drawPoints.enabled == true) {
                  Points.draw(groupsData[groupIds[i2]], group, this.framework);
                }
                break;
            }
          }
        }
      }
    }
    cleanupElements(this.svgElements);
    return false;
  };
  LineGraph.prototype._stack = function(data2, subData) {
    var index, dx, dy, subPrevPoint, subNextPoint;
    index = 0;
    for (var j = 0; j < data2.length; j++) {
      subPrevPoint = void 0;
      subNextPoint = void 0;
      for (var k = index; k < subData.length; k++) {
        if (subData[k].x === data2[j].x) {
          subPrevPoint = subData[k];
          subNextPoint = subData[k];
          index = k;
          break;
        } else if (subData[k].x > data2[j].x) {
          subNextPoint = subData[k];
          if (k == 0) {
            subPrevPoint = subNextPoint;
          } else {
            subPrevPoint = subData[k - 1];
          }
          index = k;
          break;
        }
      }
      if (subNextPoint === void 0) {
        subPrevPoint = subData[subData.length - 1];
        subNextPoint = subData[subData.length - 1];
      }
      dx = subNextPoint.x - subPrevPoint.x;
      dy = subNextPoint.y - subPrevPoint.y;
      if (dx == 0) {
        data2[j].y = data2[j].orginalY + subNextPoint.y;
      } else {
        data2[j].y = data2[j].orginalY + dy / dx * (data2[j].x - subPrevPoint.x) + subPrevPoint.y;
      }
    }
  };
  LineGraph.prototype._getRelevantData = function(groupIds, groupsData, minDate, maxDate) {
    var group, i2, j, item;
    if (groupIds.length > 0) {
      for (i2 = 0; i2 < groupIds.length; i2++) {
        group = this.groups[groupIds[i2]];
        var itemsData = group.getItems();
        if (_sortInstanceProperty(group.options) == true) {
          var dateComparator = function dateComparator2(a, b) {
            return a.getTime() == b.getTime() ? 0 : a < b ? -1 : 1;
          };
          var first = Math.max(0, availableUtils.binarySearchValue(itemsData, minDate, "x", "before", dateComparator));
          var last = Math.min(itemsData.length, availableUtils.binarySearchValue(itemsData, maxDate, "x", "after", dateComparator) + 1);
          if (last <= 0) {
            last = itemsData.length;
          }
          var dataContainer = new Array(last - first);
          for (j = first; j < last; j++) {
            item = group.itemsData[j];
            dataContainer[j - first] = item;
          }
          groupsData[groupIds[i2]] = dataContainer;
        } else {
          groupsData[groupIds[i2]] = group.itemsData;
        }
      }
    }
  };
  LineGraph.prototype._applySampling = function(groupIds, groupsData) {
    var group;
    if (groupIds.length > 0) {
      for (var i2 = 0; i2 < groupIds.length; i2++) {
        group = this.groups[groupIds[i2]];
        if (group.options.sampling == true) {
          var dataContainer = groupsData[groupIds[i2]];
          if (dataContainer.length > 0) {
            var increment = 1;
            var amountOfPoints = dataContainer.length;
            var xDistance = this.body.util.toGlobalScreen(dataContainer[dataContainer.length - 1].x) - this.body.util.toGlobalScreen(dataContainer[0].x);
            var pointsPerPixel = amountOfPoints / xDistance;
            increment = Math.min(Math.ceil(0.2 * amountOfPoints), Math.max(1, Math.round(pointsPerPixel)));
            var sampledData = new Array(amountOfPoints);
            for (var j = 0; j < amountOfPoints; j += increment) {
              var idx = Math.round(j / increment);
              sampledData[idx] = dataContainer[j];
            }
            groupsData[groupIds[i2]] = _spliceInstanceProperty(sampledData).call(sampledData, 0, Math.round(amountOfPoints / increment));
          }
        }
      }
    }
  };
  LineGraph.prototype._getYRanges = function(groupIds, groupsData, groupRanges) {
    var groupData, group, i2;
    var combinedDataLeft = [];
    var combinedDataRight = [];
    var options;
    if (groupIds.length > 0) {
      for (i2 = 0; i2 < groupIds.length; i2++) {
        groupData = groupsData[groupIds[i2]];
        options = this.groups[groupIds[i2]].options;
        if (groupData.length > 0) {
          group = this.groups[groupIds[i2]];
          if (options.stack === true && options.style === "bar") {
            if (options.yAxisOrientation === "left") {
              combinedDataLeft = _concatInstanceProperty(combinedDataLeft).call(combinedDataLeft, groupData);
            } else {
              combinedDataRight = _concatInstanceProperty(combinedDataRight).call(combinedDataRight, groupData);
            }
          } else {
            groupRanges[groupIds[i2]] = group.getYRange(groupData, groupIds[i2]);
          }
        }
      }
      Bargraph.getStackedYRange(combinedDataLeft, groupRanges, groupIds, "__barStackLeft", "left");
      Bargraph.getStackedYRange(combinedDataRight, groupRanges, groupIds, "__barStackRight", "right");
    }
  };
  LineGraph.prototype._updateYAxis = function(groupIds, groupRanges) {
    var resized = false;
    var yAxisLeftUsed = false;
    var yAxisRightUsed = false;
    var minLeft = 1e9, minRight = 1e9, maxLeft = -1e9, maxRight = -1e9, minVal, maxVal;
    if (groupIds.length > 0) {
      for (var i2 = 0; i2 < groupIds.length; i2++) {
        var group = this.groups[groupIds[i2]];
        if (group && group.options.yAxisOrientation != "right") {
          yAxisLeftUsed = true;
          minLeft = 1e9;
          maxLeft = -1e9;
        } else if (group && group.options.yAxisOrientation) {
          yAxisRightUsed = true;
          minRight = 1e9;
          maxRight = -1e9;
        }
      }
      for (i2 = 0; i2 < groupIds.length; i2++) {
        if (groupRanges.hasOwnProperty(groupIds[i2])) {
          if (groupRanges[groupIds[i2]].ignore !== true) {
            minVal = groupRanges[groupIds[i2]].min;
            maxVal = groupRanges[groupIds[i2]].max;
            if (groupRanges[groupIds[i2]].yAxisOrientation != "right") {
              yAxisLeftUsed = true;
              minLeft = minLeft > minVal ? minVal : minLeft;
              maxLeft = maxLeft < maxVal ? maxVal : maxLeft;
            } else {
              yAxisRightUsed = true;
              minRight = minRight > minVal ? minVal : minRight;
              maxRight = maxRight < maxVal ? maxVal : maxRight;
            }
          }
        }
      }
      if (yAxisLeftUsed == true) {
        this.yAxisLeft.setRange(minLeft, maxLeft);
      }
      if (yAxisRightUsed == true) {
        this.yAxisRight.setRange(minRight, maxRight);
      }
    }
    resized = this._toggleAxisVisiblity(yAxisLeftUsed, this.yAxisLeft) || resized;
    resized = this._toggleAxisVisiblity(yAxisRightUsed, this.yAxisRight) || resized;
    if (yAxisRightUsed == true && yAxisLeftUsed == true) {
      this.yAxisLeft.drawIcons = true;
      this.yAxisRight.drawIcons = true;
    } else {
      this.yAxisLeft.drawIcons = false;
      this.yAxisRight.drawIcons = false;
    }
    this.yAxisRight.master = !yAxisLeftUsed;
    this.yAxisRight.masterAxis = this.yAxisLeft;
    if (this.yAxisRight.master == false) {
      if (yAxisRightUsed == true) {
        this.yAxisLeft.lineOffset = this.yAxisRight.width;
      } else {
        this.yAxisLeft.lineOffset = 0;
      }
      resized = this.yAxisLeft.redraw() || resized;
      resized = this.yAxisRight.redraw() || resized;
    } else {
      resized = this.yAxisRight.redraw() || resized;
    }
    var tempGroups = ["__barStackLeft", "__barStackRight", "__lineStackLeft", "__lineStackRight"];
    for (i2 = 0; i2 < tempGroups.length; i2++) {
      if (_indexOfInstanceProperty(groupIds).call(groupIds, tempGroups[i2]) != -1) {
        _spliceInstanceProperty(groupIds).call(groupIds, _indexOfInstanceProperty(groupIds).call(groupIds, tempGroups[i2]), 1);
      }
    }
    return resized;
  };
  LineGraph.prototype._toggleAxisVisiblity = function(axisUsed, axis) {
    var changed = false;
    if (axisUsed == false) {
      if (axis.dom.frame.parentNode && axis.hidden == false) {
        axis.hide();
        changed = true;
      }
    } else {
      if (!axis.dom.frame.parentNode && axis.hidden == true) {
        axis.show();
        changed = true;
      }
    }
    return changed;
  };
  LineGraph.prototype._convertXcoordinates = function(datapoints) {
    var toScreen2 = this.body.util.toScreen;
    for (var i2 = 0; i2 < datapoints.length; i2++) {
      datapoints[i2].screen_x = toScreen2(datapoints[i2].x) + this.props.width;
      datapoints[i2].screen_y = datapoints[i2].y;
      if (datapoints[i2].end != void 0) {
        datapoints[i2].screen_end = toScreen2(datapoints[i2].end) + this.props.width;
      } else {
        datapoints[i2].screen_end = void 0;
      }
    }
  };
  LineGraph.prototype._convertYcoordinates = function(datapoints, group) {
    var axis = this.yAxisLeft;
    var svgHeight = Number(this.svg.style.height.replace("px", ""));
    if (group.options.yAxisOrientation == "right") {
      axis = this.yAxisRight;
    }
    for (var i2 = 0; i2 < datapoints.length; i2++) {
      datapoints[i2].screen_y = Math.round(axis.convertValue(datapoints[i2].y));
    }
    group.setZeroPosition(Math.min(svgHeight, axis.convertValue(0)));
  };
  var string = "string";
  var bool = "boolean";
  var number = "number";
  var array = "array";
  var date = "date";
  var object = "object";
  var dom = "dom";
  var moment = "moment";
  var any2 = "any";
  var allOptions = {
    configure: {
      enabled: {
        "boolean": bool
      },
      filter: {
        "boolean": bool,
        "function": "function"
      },
      container: {
        dom
      },
      __type__: {
        object,
        "boolean": bool,
        "function": "function"
      }
    },
    //globals :
    alignCurrentTime: {
      string,
      "undefined": "undefined"
    },
    yAxisOrientation: {
      string: ["left", "right"]
    },
    defaultGroup: {
      string
    },
    sort: {
      "boolean": bool
    },
    sampling: {
      "boolean": bool
    },
    stack: {
      "boolean": bool
    },
    graphHeight: {
      string,
      number
    },
    shaded: {
      enabled: {
        "boolean": bool
      },
      orientation: {
        string: ["bottom", "top", "zero", "group"]
      },
      // top, bottom, zero, group
      groupId: {
        object
      },
      __type__: {
        "boolean": bool,
        object
      }
    },
    style: {
      string: ["line", "bar", "points"]
    },
    // line, bar
    barChart: {
      width: {
        number
      },
      minWidth: {
        number
      },
      sideBySide: {
        "boolean": bool
      },
      align: {
        string: ["left", "center", "right"]
      },
      __type__: {
        object
      }
    },
    interpolation: {
      enabled: {
        "boolean": bool
      },
      parametrization: {
        string: ["centripetal", "chordal", "uniform"]
      },
      // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
      alpha: {
        number
      },
      __type__: {
        object,
        "boolean": bool
      }
    },
    drawPoints: {
      enabled: {
        "boolean": bool
      },
      onRender: {
        "function": "function"
      },
      size: {
        number
      },
      style: {
        string: ["square", "circle"]
      },
      // square, circle
      __type__: {
        object,
        "boolean": bool,
        "function": "function"
      }
    },
    dataAxis: {
      showMinorLabels: {
        "boolean": bool
      },
      showMajorLabels: {
        "boolean": bool
      },
      showWeekScale: {
        "boolean": bool
      },
      icons: {
        "boolean": bool
      },
      width: {
        string,
        number
      },
      visible: {
        "boolean": bool
      },
      alignZeros: {
        "boolean": bool
      },
      left: {
        range: {
          min: {
            number,
            "undefined": "undefined"
          },
          max: {
            number,
            "undefined": "undefined"
          },
          __type__: {
            object
          }
        },
        format: {
          "function": "function"
        },
        title: {
          text: {
            string,
            number,
            "undefined": "undefined"
          },
          style: {
            string,
            "undefined": "undefined"
          },
          __type__: {
            object
          }
        },
        __type__: {
          object
        }
      },
      right: {
        range: {
          min: {
            number,
            "undefined": "undefined"
          },
          max: {
            number,
            "undefined": "undefined"
          },
          __type__: {
            object
          }
        },
        format: {
          "function": "function"
        },
        title: {
          text: {
            string,
            number,
            "undefined": "undefined"
          },
          style: {
            string,
            "undefined": "undefined"
          },
          __type__: {
            object
          }
        },
        __type__: {
          object
        }
      },
      __type__: {
        object
      }
    },
    legend: {
      enabled: {
        "boolean": bool
      },
      icons: {
        "boolean": bool
      },
      left: {
        visible: {
          "boolean": bool
        },
        position: {
          string: ["top-right", "bottom-right", "top-left", "bottom-left"]
        },
        __type__: {
          object
        }
      },
      right: {
        visible: {
          "boolean": bool
        },
        position: {
          string: ["top-right", "bottom-right", "top-left", "bottom-left"]
        },
        __type__: {
          object
        }
      },
      __type__: {
        object,
        "boolean": bool
      }
    },
    groups: {
      visibility: {
        any: any2
      },
      __type__: {
        object
      }
    },
    autoResize: {
      "boolean": bool
    },
    throttleRedraw: {
      number
    },
    // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
    clickToUse: {
      "boolean": bool
    },
    end: {
      number,
      date,
      string,
      moment
    },
    format: {
      minorLabels: {
        millisecond: {
          string,
          "undefined": "undefined"
        },
        second: {
          string,
          "undefined": "undefined"
        },
        minute: {
          string,
          "undefined": "undefined"
        },
        hour: {
          string,
          "undefined": "undefined"
        },
        weekday: {
          string,
          "undefined": "undefined"
        },
        day: {
          string,
          "undefined": "undefined"
        },
        week: {
          string,
          "undefined": "undefined"
        },
        month: {
          string,
          "undefined": "undefined"
        },
        quarter: {
          string,
          "undefined": "undefined"
        },
        year: {
          string,
          "undefined": "undefined"
        },
        __type__: {
          object
        }
      },
      majorLabels: {
        millisecond: {
          string,
          "undefined": "undefined"
        },
        second: {
          string,
          "undefined": "undefined"
        },
        minute: {
          string,
          "undefined": "undefined"
        },
        hour: {
          string,
          "undefined": "undefined"
        },
        weekday: {
          string,
          "undefined": "undefined"
        },
        day: {
          string,
          "undefined": "undefined"
        },
        week: {
          string,
          "undefined": "undefined"
        },
        month: {
          string,
          "undefined": "undefined"
        },
        quarter: {
          string,
          "undefined": "undefined"
        },
        year: {
          string,
          "undefined": "undefined"
        },
        __type__: {
          object
        }
      },
      __type__: {
        object
      }
    },
    moment: {
      "function": "function"
    },
    height: {
      string,
      number
    },
    hiddenDates: {
      start: {
        date,
        number,
        string,
        moment
      },
      end: {
        date,
        number,
        string,
        moment
      },
      repeat: {
        string
      },
      __type__: {
        object,
        array
      }
    },
    locale: {
      string
    },
    locales: {
      __any__: {
        any: any2
      },
      __type__: {
        object
      }
    },
    max: {
      date,
      number,
      string,
      moment
    },
    maxHeight: {
      number,
      string
    },
    maxMinorChars: {
      number
    },
    min: {
      date,
      number,
      string,
      moment
    },
    minHeight: {
      number,
      string
    },
    moveable: {
      "boolean": bool
    },
    multiselect: {
      "boolean": bool
    },
    orientation: {
      string
    },
    showCurrentTime: {
      "boolean": bool
    },
    showMajorLabels: {
      "boolean": bool
    },
    showMinorLabels: {
      "boolean": bool
    },
    showWeekScale: {
      "boolean": bool
    },
    snap: {
      "function": "function",
      "null": "null"
    },
    start: {
      date,
      number,
      string,
      moment
    },
    timeAxis: {
      scale: {
        string,
        "undefined": "undefined"
      },
      step: {
        number,
        "undefined": "undefined"
      },
      __type__: {
        object
      }
    },
    width: {
      string,
      number
    },
    zoomable: {
      "boolean": bool
    },
    zoomKey: {
      string: ["ctrlKey", "altKey", "metaKey", ""]
    },
    zoomMax: {
      number
    },
    zoomMin: {
      number
    },
    zIndex: {
      number
    },
    __type__: {
      object
    }
  };
  var configureOptions = {
    global: {
      alignCurrentTime: ["none", "year", "month", "quarter", "week", "isoWeek", "day", "date", "hour", "minute", "second"],
      //yAxisOrientation: ['left','right'], // TDOO: enable as soon as Grahp2d doesn't crash when changing this on the fly
      sort: true,
      sampling: true,
      stack: false,
      shaded: {
        enabled: false,
        orientation: ["zero", "top", "bottom", "group"]
        // zero, top, bottom
      },
      style: ["line", "bar", "points"],
      // line, bar
      barChart: {
        width: [50, 5, 100, 5],
        minWidth: [50, 5, 100, 5],
        sideBySide: false,
        align: ["left", "center", "right"]
        // left, center, right
      },
      interpolation: {
        enabled: true,
        parametrization: ["centripetal", "chordal", "uniform"]
        // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
      },
      drawPoints: {
        enabled: true,
        size: [6, 2, 30, 1],
        style: ["square", "circle"]
        // square, circle
      },
      dataAxis: {
        showMinorLabels: true,
        showMajorLabels: true,
        showWeekScale: false,
        icons: false,
        width: [40, 0, 200, 1],
        visible: true,
        alignZeros: true,
        left: {
          //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
          //format: function (value) {return value;},
          title: {
            text: "",
            style: ""
          }
        },
        right: {
          //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
          //format: function (value) {return value;},
          title: {
            text: "",
            style: ""
          }
        }
      },
      legend: {
        enabled: false,
        icons: true,
        left: {
          visible: true,
          position: ["top-right", "bottom-right", "top-left", "bottom-left"]
          // top/bottom - left,right
        },
        right: {
          visible: true,
          position: ["top-right", "bottom-right", "top-left", "bottom-left"]
          // top/bottom - left,right
        }
      },
      autoResize: true,
      clickToUse: false,
      end: "",
      format: {
        minorLabels: {
          millisecond: "SSS",
          second: "s",
          minute: "HH:mm",
          hour: "HH:mm",
          weekday: "ddd D",
          day: "D",
          week: "w",
          month: "MMM",
          quarter: "[Q]Q",
          year: "YYYY"
        },
        majorLabels: {
          millisecond: "HH:mm:ss",
          second: "D MMMM HH:mm",
          minute: "ddd D MMMM",
          hour: "ddd D MMMM",
          weekday: "MMMM YYYY",
          day: "MMMM YYYY",
          week: "MMMM YYYY",
          month: "YYYY",
          quarter: "YYYY",
          year: ""
        }
      },
      height: "",
      locale: "",
      max: "",
      maxHeight: "",
      maxMinorChars: [7, 0, 20, 1],
      min: "",
      minHeight: "",
      moveable: true,
      orientation: ["both", "bottom", "top"],
      showCurrentTime: false,
      showMajorLabels: true,
      showMinorLabels: true,
      showWeekScale: false,
      start: "",
      width: "100%",
      zoomable: true,
      zoomKey: ["ctrlKey", "altKey", "metaKey", ""],
      zoomMax: [31536e10, 10, 31536e10, 1],
      zoomMin: [10, 10, 31536e10, 1],
      zIndex: 0
    }
  };
  function Graph2d(container, items, groups, options) {
    var _context, _context2, _context3, _context4, _context5, _context6, _context7;
    if (!(_Array$isArray(groups) || isDataViewLike(groups)) && groups instanceof Object) {
      var forthArgument = options;
      options = groups;
      groups = forthArgument;
    }
    if (options && options.throttleRedraw) {
      console.warn('Graph2d option "throttleRedraw" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.');
    }
    var me = this;
    this.defaultOptions = {
      start: null,
      end: null,
      autoResize: true,
      orientation: {
        axis: "bottom",
        // axis orientation: 'bottom', 'top', or 'both'
        item: "bottom"
        // not relevant for Graph2d
      },
      moment: moment$3,
      width: null,
      height: null,
      maxHeight: null,
      minHeight: null
    };
    this.options = availableUtils.deepExtend({}, this.defaultOptions);
    this._create(container);
    this.components = [];
    this.body = {
      dom: this.dom,
      domProps: this.props,
      emitter: {
        on: _bindInstanceProperty$1(_context = this.on).call(_context, this),
        off: _bindInstanceProperty$1(_context2 = this.off).call(_context2, this),
        emit: _bindInstanceProperty$1(_context3 = this.emit).call(_context3, this)
      },
      hiddenDates: [],
      util: {
        getScale: function getScale2() {
          return me.timeAxis.step.scale;
        },
        getStep: function getStep() {
          return me.timeAxis.step.step;
        },
        toScreen: _bindInstanceProperty$1(_context4 = me._toScreen).call(_context4, me),
        toGlobalScreen: _bindInstanceProperty$1(_context5 = me._toGlobalScreen).call(_context5, me),
        // this refers to the root.width
        toTime: _bindInstanceProperty$1(_context6 = me._toTime).call(_context6, me),
        toGlobalTime: _bindInstanceProperty$1(_context7 = me._toGlobalTime).call(_context7, me)
      }
    };
    this.range = new Range(this.body);
    this.components.push(this.range);
    this.body.range = this.range;
    this.timeAxis = new TimeAxis(this.body);
    this.components.push(this.timeAxis);
    this.currentTime = new CurrentTime(this.body);
    this.components.push(this.currentTime);
    this.linegraph = new LineGraph(this.body);
    this.components.push(this.linegraph);
    this.itemsData = null;
    this.groupsData = null;
    this.on("tap", function(event2) {
      me.emit("click", me.getEventProperties(event2));
    });
    this.on("doubletap", function(event2) {
      me.emit("doubleClick", me.getEventProperties(event2));
    });
    this.dom.root.oncontextmenu = function(event2) {
      me.emit("contextmenu", me.getEventProperties(event2));
    };
    this.initialFitDone = false;
    this.on("changed", function() {
      if (me.itemsData == null)
        return;
      if (!me.initialFitDone && !me.options.rollingMode) {
        me.initialFitDone = true;
        if (me.options.start != void 0 || me.options.end != void 0) {
          if (me.options.start == void 0 || me.options.end == void 0) {
            var range = me.getItemRange();
          }
          var start = me.options.start != void 0 ? me.options.start : range.min;
          var end = me.options.end != void 0 ? me.options.end : range.max;
          me.setWindow(start, end, {
            animation: false
          });
        } else {
          me.fit({
            animation: false
          });
        }
      }
      if (!me.initialDrawDone && (me.initialRangeChangeDone || !me.options.start && !me.options.end || me.options.rollingMode)) {
        me.initialDrawDone = true;
        me.dom.root.style.visibility = "visible";
        me.dom.loadingScreen.parentNode.removeChild(me.dom.loadingScreen);
        if (me.options.onInitialDrawComplete) {
          _setTimeout(function() {
            return me.options.onInitialDrawComplete();
          }, 0);
        }
      }
    });
    if (options) {
      this.setOptions(options);
    }
    if (groups) {
      this.setGroups(groups);
    }
    if (items) {
      this.setItems(items);
    }
    this._redraw();
  }
  Graph2d.prototype = new Core();
  Graph2d.prototype.setOptions = function(options) {
    var errorFound2 = Validator.validate(options, allOptions);
    if (errorFound2 === true) {
      console.log("%cErrors have been found in the supplied options object.", printStyle);
    }
    Core.prototype.setOptions.call(this, options);
  };
  Graph2d.prototype.setItems = function(items) {
    var initialLoad = this.itemsData == null;
    var newDataSet;
    if (!items) {
      newDataSet = null;
    } else if (isDataViewLike(items)) {
      newDataSet = typeCoerceDataSet(items);
    } else {
      newDataSet = typeCoerceDataSet(new DataSet(items));
    }
    if (this.itemsData) {
      this.itemsData.dispose();
    }
    this.itemsData = newDataSet;
    this.linegraph && this.linegraph.setItems(newDataSet != null ? newDataSet.rawDS : null);
    if (initialLoad) {
      if (this.options.start != void 0 || this.options.end != void 0) {
        var start = this.options.start != void 0 ? this.options.start : null;
        var end = this.options.end != void 0 ? this.options.end : null;
        this.setWindow(start, end, {
          animation: false
        });
      } else {
        this.fit({
          animation: false
        });
      }
    }
  };
  Graph2d.prototype.setGroups = function(groups) {
    var newDataSet;
    if (!groups) {
      newDataSet = null;
    } else if (isDataViewLike(groups)) {
      newDataSet = groups;
    } else {
      newDataSet = new DataSet(groups);
    }
    this.groupsData = newDataSet;
    this.linegraph.setGroups(newDataSet);
  };
  Graph2d.prototype.getLegend = function(groupId, width, height) {
    if (width === void 0) {
      width = 15;
    }
    if (height === void 0) {
      height = 15;
    }
    if (this.linegraph.groups[groupId] !== void 0) {
      return this.linegraph.groups[groupId].getLegend(width, height);
    } else {
      return "cannot find group:'" + groupId + "'";
    }
  };
  Graph2d.prototype.isGroupVisible = function(groupId) {
    if (this.linegraph.groups[groupId] !== void 0) {
      return this.linegraph.groups[groupId].visible && (this.linegraph.options.groups.visibility[groupId] === void 0 || this.linegraph.options.groups.visibility[groupId] == true);
    } else {
      return false;
    }
  };
  Graph2d.prototype.getDataRange = function() {
    var min2 = null;
    var max2 = null;
    for (var groupId in this.linegraph.groups) {
      if (this.linegraph.groups.hasOwnProperty(groupId)) {
        if (this.linegraph.groups[groupId].visible == true) {
          for (var i2 = 0; i2 < this.linegraph.groups[groupId].itemsData.length; i2++) {
            var item = this.linegraph.groups[groupId].itemsData[i2];
            var value = availableUtils.convert(item.x, "Date").valueOf();
            min2 = min2 == null ? value : min2 > value ? value : min2;
            max2 = max2 == null ? value : max2 < value ? value : max2;
          }
        }
      }
    }
    return {
      min: min2 != null ? new Date(min2) : null,
      max: max2 != null ? new Date(max2) : null
    };
  };
  Graph2d.prototype.getEventProperties = function(event2) {
    var clientX = event2.center ? event2.center.x : event2.clientX;
    var clientY = event2.center ? event2.center.y : event2.clientY;
    var x = clientX - availableUtils.getAbsoluteLeft(this.dom.centerContainer);
    var y = clientY - availableUtils.getAbsoluteTop(this.dom.centerContainer);
    var time = this._toTime(x);
    var customTime = CustomTime.customTimeFromTarget(event2);
    var element = availableUtils.getTarget(event2);
    var what = null;
    if (availableUtils.hasParent(element, this.timeAxis.dom.foreground)) {
      what = "axis";
    } else if (this.timeAxis2 && availableUtils.hasParent(element, this.timeAxis2.dom.foreground)) {
      what = "axis";
    } else if (availableUtils.hasParent(element, this.linegraph.yAxisLeft.dom.frame)) {
      what = "data-axis";
    } else if (availableUtils.hasParent(element, this.linegraph.yAxisRight.dom.frame)) {
      what = "data-axis";
    } else if (availableUtils.hasParent(element, this.linegraph.legendLeft.dom.frame)) {
      what = "legend";
    } else if (availableUtils.hasParent(element, this.linegraph.legendRight.dom.frame)) {
      what = "legend";
    } else if (customTime != null) {
      what = "custom-time";
    } else if (availableUtils.hasParent(element, this.currentTime.bar)) {
      what = "current-time";
    } else if (availableUtils.hasParent(element, this.dom.center)) {
      what = "background";
    }
    var value = [];
    var yAxisLeft = this.linegraph.yAxisLeft;
    var yAxisRight = this.linegraph.yAxisRight;
    if (!yAxisLeft.hidden && this.itemsData.length > 0) {
      value.push(yAxisLeft.screenToValue(y));
    }
    if (!yAxisRight.hidden && this.itemsData.length > 0) {
      value.push(yAxisRight.screenToValue(y));
    }
    return {
      event: event2,
      customTime: customTime ? customTime.options.id : null,
      what,
      pageX: event2.srcEvent ? event2.srcEvent.pageX : event2.pageX,
      pageY: event2.srcEvent ? event2.srcEvent.pageY : event2.pageY,
      x,
      y,
      time,
      value
    };
  };
  Graph2d.prototype._createConfigurator = function() {
    return new Configurator(this, this.dom.container, configureOptions);
  };
  var defaultLanguage = getNavigatorLanguage();
  moment$3.locale(defaultLanguage);

  // extension/Timeline.tsx
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  var Timeline2 = ({ items, options }) => {
    const timelineRef = (0, import_react.useRef)(null);
    (0, import_react.useEffect)(() => {
      if (timelineRef.current) {
        const timeline = new Timeline(timelineRef.current, items, options);
        return () => {
          timeline.destroy();
        };
      }
    }, [items, options]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { ref: timelineRef, style: { width: "100%", height: "400px" } });
  };

  // extension/History.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
  var transformHistoryItems = (historyItems) => {
    return historyItems.map((item, index) => ({
      id: index,
      content: item.title || item.url,
      start: new Date(item.lastVisitTime || 0)
      // Optionally, specify an end date if available
      // end: ...
    }));
  };
  var History = () => {
    const [searchTerm, setSearchTerm] = (0, import_react2.useState)("");
    const [historyItems, setHistoryItems] = (0, import_react2.useState)([]);
    const fetchBrowserHistory = () => {
      if (chrome && chrome.history) {
        chrome.history.search({ text: searchTerm, maxResults: 100 }, (results) => {
          setHistoryItems(results);
        });
      }
    };
    (0, import_react2.useEffect)(() => {
      fetchBrowserHistory();
    }, [searchTerm]);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { style: { height: "800px", width: "800px" }, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Timeline2, { items: transformHistoryItems(historyItems) }) });
  };

  // extension/tab.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  var rootElem = document.createElement("div");
  document.body.appendChild(rootElem);
  var root = import_client.default.createRoot(rootElem);
  root.render(
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_react3.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(History, {}) })
  );
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

vis-timeline/standalone/esm/vis-timeline-graph2d.js:
  (**
   * vis-timeline and vis-graph2d
   * https://visjs.github.io/vis-timeline/
   *
   * Create a fully customizable, interactive timeline with items and ranges.
   *
   * @version 7.7.2
   * @date    2023-03-22T11:14:31.874Z
   *
   * @copyright (c) 2011-2017 Almende B.V, http://almende.com
   * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
   *
   * @license
   * vis.js is dual licensed under both
   *
   *   1. The Apache 2.0 License
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   *   and
   *
   *   2. The MIT License
   *      http://opensource.org/licenses/MIT
   *
   * vis.js may be distributed under either license.
   *)
  (*! moment.js *)
  (*! moment.js locale configuration *)
  (*! Hammer.JS - v2.0.17-rc - 2019-12-16
   * http://naver.github.io/egjs
   *
   * Forked By Naver egjs
   * Copyright (c) hammerjs
   * Licensed under the MIT license *)
*/
//# sourceMappingURL=tab.js.map

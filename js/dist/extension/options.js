"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn2(format2) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign3 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component19(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component19.prototype.isReactComponent = {};
          Component19.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component19.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component19.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component19.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign3(pureComponentPrototype, Component19.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef8() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement43(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement4(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign3({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement4(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement4(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n3 = 0;
            mapChildren(children, function() {
              n3++;
            });
            return n3;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement4(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext10(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef14(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo5(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext13(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState12(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef23(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect22(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback12(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle3(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId3() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component20) {
            var prototype = Component20.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement4(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement4(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement4(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement43.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement4.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i2 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory2 = createFactoryWithValidation;
          var Children4 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children4;
          exports.Component = Component19;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext10;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory2;
          exports.createRef = createRef8;
          exports.forwardRef = forwardRef14;
          exports.isValidElement = isValidElement4;
          exports.lazy = lazy;
          exports.memo = memo5;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback12;
          exports.useContext = useContext13;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect22;
          exports.useId = useId3;
          exports.useImperativeHandle = useImperativeHandle3;
          exports.useInsertionEffect = useInsertionEffect3;
          exports.useLayoutEffect = useLayoutEffect3;
          exports.useMemo = useMemo3;
          exports.useReducer = useReducer;
          exports.useRef = useRef23;
          exports.useState = useState12;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react/index.js
  var require_react = __commonJS({
    "../node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // ../node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i2) {
            var index = i2;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i2) {
            var index = i2;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b3) {
            var diff = a2.sortIndex - b3.sortIndex;
            return diff !== 0 ? diff : a2.id - b3.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react-dom/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../node_modules/react-dom/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // ../node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React77 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React77.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn2(format2) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment12 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM4 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign3 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component19) {
            var prototype = Component19.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment12:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e2) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled2(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign3({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled2(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled2(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React77.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign3({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign3({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_2, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles2[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles2) {
            var style2 = node.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles2) {
            var expanded = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign3({
            menuitem: true
          }, omittedCloseTags);
          var HTML2 = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML2 in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b3) {
            if (isInsideEventHandler) {
              return fn(a2, b3);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b3);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM4) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e2) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a2, b3, c2, d2, e2, f3) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b3, c2, d2, e2, f3) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a2, b3, c2, d2, e2, f3) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b3, c2, d2, e2, f3) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b3 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b3 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b3) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b3.return) {
                a2 = parentA;
                b3 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b3 = parentB;
                    break;
                  }
                  if (_child === b3) {
                    didFindChild = true;
                    b3 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b3 = parentA;
                      break;
                    }
                    if (_child === b3) {
                      didFindChild = true;
                      b3 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b3) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign3({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b3) {
            return (a2 & b3) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a2, b3) {
            return a2 | b3;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a2, b3) {
            return a2 & b3;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b3) {
            return a2 !== NoLane && a2 < b3 ? a2 : b3;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b3) {
            return a2 !== 0 && a2 < b3 ? a2 : b3;
          }
          function lowerEventPriority(a2, b3) {
            return a2 === 0 || a2 > b3 ? a2 : b3;
          }
          function isHigherEventPriority(a2, b3) {
            return a2 !== 0 && a2 < b3;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize3 = Interface[_propName];
                if (normalize3) {
                  this[_propName] = normalize3(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign3(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign3({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign3({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign3({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign3({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign3({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign3({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign3({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign3({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign3({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign3({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign3({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign3({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM4 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM4 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM4 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM4 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM4) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM4) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win2;
            if (nativeEventTarget.window === nativeEventTarget) {
              win2 = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win2 = doc.defaultView || doc.parentWindow;
              } else {
                win2 = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win2 : getNodeFromInstance(from);
            var toNode = to == null ? win2 : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y2) {
            return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win2 = ownerDocument && ownerDocument.defaultView || window;
            var selection = win2.getSelection && win2.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e2) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win2 = doc && doc.defaultView || window;
            if (!win2.getSelection) {
              return;
            }
            var selection = win2.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win2 = window;
            var element = getActiveElement();
            while (element instanceof win2.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win2 = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win2.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM4 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win2 = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win2.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM4) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent2(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent2(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent2(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent2(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent2(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent2(nodeA);
              nodeB = getParent2(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM4 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement43(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign3({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement43(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask2 = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component19, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component19)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign3({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component19 = node.type;
                    if (isContextProvider(Component19)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits2 = slot << baseLength;
              var _id = newBits2 | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component19, baseProps) {
            if (Component19 && Component19.defaultProps) {
              var props = assign3({}, baseProps);
              var defaultProps = Component19.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign3({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React77.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign3({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment12) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment12) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (c2 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component19, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component19(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component19(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e2) {
              setTimeout(function() {
                throw e2;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component19, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component19.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component19)
                  );
                }
              }
            }
            var render2 = Component19.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component19, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component19.type;
              if (isSimpleFunctionComponent(type) && Component19.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component19.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component19.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component19.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component19.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component19, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component19, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component19, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component19.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component19)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component19, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component19, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component19, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component19, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component19.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component19)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component19)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component19, nextProps);
              mountClassInstance(workInProgress2, Component19, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component19, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component19, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component19, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component19, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component19, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component19.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component19, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component19 = init(payload);
            workInProgress2.type = Component19;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component19);
            var resolvedProps = resolveDefaultProps(Component19, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component19);
                  workInProgress2.type = Component19 = resolveFunctionForHotReloading(Component19);
                }
                child = updateFunctionComponent(null, workInProgress2, Component19, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component19 = resolveClassForHotReloading(Component19);
                }
                child = updateClassComponent(null, workInProgress2, Component19, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component19 = resolveForwardRefForHotReloading(Component19);
                }
                child = updateForwardRef(null, workInProgress2, Component19, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component19.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component19)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component19,
                  resolveDefaultProps(Component19.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component19 !== null && typeof Component19 === "object" && Component19.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component19 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component19, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component19)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component19, nextProps);
            mountClassInstance(workInProgress2, Component19, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component19, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component19, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component19, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component19.prototype && typeof Component19.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component19) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component19, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component19) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component19) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component19)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component19, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component19, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component19, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component19);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component19) {
            {
              if (Component19) {
                if (Component19.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component19.displayName || Component19.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component19.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component19) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component19.contextType === "object" && Component19.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component19) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component19 = workInProgress2.type;
                if (isContextProvider(Component19)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component19 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component19 ? unresolvedProps : resolveDefaultProps(Component19, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component19, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment12:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment12:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component19 = workInProgress2.type;
                if (isContextProvider(Component19)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component19 = workInProgress2.type;
                if (isContextProvider(Component19)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal2;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal2 = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal2 = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal2 === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal2;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal2 = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal2 = ref(instanceToUse);
                }
                {
                  if (typeof retVal2 === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask2(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check = checks[i2];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b3, c2, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b3, c2, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root2 !== null) {
                  scheduleUpdateOnFiber(_root2, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e2) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component19) {
            var prototype = Component19.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component19) {
            if (typeof Component19 === "function") {
              return shouldConstruct$1(Component19) ? ClassComponent : FunctionComponent;
            } else if (Component19 !== void 0 && Component19 !== null) {
              var $$typeof = Component19.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment12, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component19 = fiber.type;
              if (isContextProvider(Component19)) {
                return processChildContext(fiber, Component19, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign3({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign3({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign3({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root2);
                  _originalCallback.call(instance);
                };
              }
              var _root2 = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root2;
              markContainerAsRoot(_root2.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root2, parentComponent, callback);
              });
              return _root2;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM4 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // ../node_modules/react-dom/client.js
  var require_client = __commonJS({
    "../node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports.createRoot = m2.createRoot;
        exports.hydrateRoot = m2.hydrateRoot;
      } else {
        i2 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c2, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c2, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c2, h3, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c2, h3, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // ../node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "../node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React77 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React77.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign3 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component19) {
            var prototype = Component19.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement4(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i2 = 0; i2 < node.length; i2++) {
                  var child = node[i2];
                  if (isValidElement4(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement4(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement4(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i2 = 0; i2 < children.length; i2++) {
                        validateChildKeys(children[i2], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx3 = jsxWithValidationDynamic;
          var jsxs3 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx3;
          exports.jsxs = jsxs3;
        })();
      }
    }
  });

  // ../node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "../node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // src/extension/options.tsx
  var import_react6 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // ../node_modules/@fluentui/set-version/lib/setVersion.js
  var packagesCache = {};
  var _win = void 0;
  try {
    _win = window;
  } catch (e2) {
  }
  function setVersion(packageName, packageVersion) {
    if (typeof _win !== "undefined") {
      var packages = _win.__packages__ = _win.__packages__ || {};
      if (!packages[packageName] || !packagesCache[packageName]) {
        packagesCache[packageName] = packageVersion;
        var versions = packages[packageName] = packages[packageName] || [];
        versions.push(packageVersion);
      }
    }
  }

  // ../node_modules/@fluentui/set-version/lib/index.js
  setVersion("@fluentui/set-version", "6.0.0");

  // ../node_modules/@fluentui/react/lib/version.js
  setVersion("@fluentui/react", "8.111.1");

  // ../node_modules/tslib/tslib.es6.mjs
  var extendStatics = function(d2, b3) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b4) {
      d3.__proto__ = b4;
    } || function(d3, b4) {
      for (var p2 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p2))
          d3[p2] = b4[p2];
    };
    return extendStatics(d2, b3);
  };
  function __extends(d2, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics(d2, b3);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  }
  var __assign = function() {
    __assign = Object.assign || function __assign3(t2) {
      for (var s2, i2 = 1, n3 = arguments.length; i2 < n3; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };
  function __rest(s2, e2) {
    var t2 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
        t2[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
        if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
          t2[p2[i2]] = s2[p2[i2]];
      }
    return t2;
  }
  function __decorate(decorators, target, key, desc) {
    var c2 = arguments.length, r = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i2 = decorators.length - 1; i2 >= 0; i2--)
        if (d2 = decorators[i2])
          r = (c2 < 3 ? d2(r) : c2 > 3 ? d2(target, key, r) : d2(target, key)) || r;
    return c2 > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l3 = from.length, ar; i2 < l3; i2++) {
        if (ar || !(i2 in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i2);
          ar[i2] = from[i2];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }

  // ../node_modules/@fluentui/merge-styles/lib/Stylesheet.js
  var InjectionMode = {
    /**
     * Avoids style injection, use getRules() to read the styles.
     */
    none: 0,
    /**
     * Inserts rules using the insertRule api.
     */
    insertNode: 1,
    /**
     * Appends rules using appendChild.
     */
    appendChild: 2
  };
  var STYLESHEET_SETTING = "__stylesheet__";
  var REUSE_STYLE_NODE = typeof navigator !== "undefined" && /rv:11.0/.test(navigator.userAgent);
  var _global = {};
  try {
    _global = window || {};
  } catch (_a7) {
  }
  var _stylesheet;
  var Stylesheet = (
    /** @class */
    function() {
      function Stylesheet2(config, serializedStylesheet) {
        var _a7, _b3, _c3, _d3, _e2, _f;
        this._rules = [];
        this._preservedRules = [];
        this._counter = 0;
        this._keyToClassName = {};
        this._onInsertRuleCallbacks = [];
        this._onResetCallbacks = [];
        this._classNameToArgs = {};
        this._config = __assign({
          // If there is no document we won't have an element to inject into.
          injectionMode: typeof document === "undefined" ? InjectionMode.none : InjectionMode.insertNode,
          defaultPrefix: "css",
          namespace: void 0,
          cspSettings: void 0
        }, config);
        this._classNameToArgs = (_a7 = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.classNameToArgs) !== null && _a7 !== void 0 ? _a7 : this._classNameToArgs;
        this._counter = (_b3 = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.counter) !== null && _b3 !== void 0 ? _b3 : this._counter;
        this._keyToClassName = (_d3 = (_c3 = this._config.classNameCache) !== null && _c3 !== void 0 ? _c3 : serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.keyToClassName) !== null && _d3 !== void 0 ? _d3 : this._keyToClassName;
        this._preservedRules = (_e2 = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.preservedRules) !== null && _e2 !== void 0 ? _e2 : this._preservedRules;
        this._rules = (_f = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.rules) !== null && _f !== void 0 ? _f : this._rules;
      }
      Stylesheet2.getInstance = function() {
        _stylesheet = _global[STYLESHEET_SETTING];
        if (!_stylesheet || _stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document) {
          var fabricConfig = (_global === null || _global === void 0 ? void 0 : _global.FabricConfig) || {};
          var stylesheet3 = new Stylesheet2(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);
          _stylesheet = stylesheet3;
          _global[STYLESHEET_SETTING] = stylesheet3;
        }
        return _stylesheet;
      };
      Stylesheet2.prototype.serialize = function() {
        return JSON.stringify({
          classNameToArgs: this._classNameToArgs,
          counter: this._counter,
          keyToClassName: this._keyToClassName,
          preservedRules: this._preservedRules,
          rules: this._rules
        });
      };
      Stylesheet2.prototype.setConfig = function(config) {
        this._config = __assign(__assign({}, this._config), config);
      };
      Stylesheet2.prototype.onReset = function(callback) {
        var _this = this;
        this._onResetCallbacks.push(callback);
        return function() {
          _this._onResetCallbacks = _this._onResetCallbacks.filter(function(cb) {
            return cb !== callback;
          });
        };
      };
      Stylesheet2.prototype.onInsertRule = function(callback) {
        var _this = this;
        this._onInsertRuleCallbacks.push(callback);
        return function() {
          _this._onInsertRuleCallbacks = _this._onInsertRuleCallbacks.filter(function(cb) {
            return cb !== callback;
          });
        };
      };
      Stylesheet2.prototype.getClassName = function(displayName) {
        var namespace = this._config.namespace;
        var prefix = displayName || this._config.defaultPrefix;
        return "".concat(namespace ? namespace + "-" : "").concat(prefix, "-").concat(this._counter++);
      };
      Stylesheet2.prototype.cacheClassName = function(className, key, args, rules2) {
        this._keyToClassName[key] = className;
        this._classNameToArgs[className] = {
          args,
          rules: rules2
        };
      };
      Stylesheet2.prototype.classNameFromKey = function(key) {
        return this._keyToClassName[key];
      };
      Stylesheet2.prototype.getClassNameCache = function() {
        return this._keyToClassName;
      };
      Stylesheet2.prototype.argsFromClassName = function(className) {
        var entry = this._classNameToArgs[className];
        return entry && entry.args;
      };
      Stylesheet2.prototype.insertedRulesFromClassName = function(className) {
        var entry = this._classNameToArgs[className];
        return entry && entry.rules;
      };
      Stylesheet2.prototype.insertRule = function(rule, preserve) {
        var injectionMode = this._config.injectionMode;
        var element = injectionMode !== InjectionMode.none ? this._getStyleElement() : void 0;
        if (preserve) {
          this._preservedRules.push(rule);
        }
        if (element) {
          switch (injectionMode) {
            case InjectionMode.insertNode:
              var sheet = element.sheet;
              try {
                sheet.insertRule(rule, sheet.cssRules.length);
              } catch (e2) {
              }
              break;
            case InjectionMode.appendChild:
              element.appendChild(document.createTextNode(rule));
              break;
          }
        } else {
          this._rules.push(rule);
        }
        if (this._config.onInsertRule) {
          this._config.onInsertRule(rule);
        }
        this._onInsertRuleCallbacks.forEach(function(callback) {
          return callback();
        });
      };
      Stylesheet2.prototype.getRules = function(includePreservedRules) {
        return (includePreservedRules ? this._preservedRules.join("") : "") + this._rules.join("");
      };
      Stylesheet2.prototype.reset = function() {
        this._rules = [];
        this._counter = 0;
        this._classNameToArgs = {};
        this._keyToClassName = {};
        this._onResetCallbacks.forEach(function(callback) {
          return callback();
        });
      };
      Stylesheet2.prototype.resetKeys = function() {
        this._keyToClassName = {};
      };
      Stylesheet2.prototype._getStyleElement = function() {
        var _this = this;
        if (!this._styleElement && typeof document !== "undefined") {
          this._styleElement = this._createStyleElement();
          if (!REUSE_STYLE_NODE) {
            window.requestAnimationFrame(function() {
              _this._styleElement = void 0;
            });
          }
        }
        return this._styleElement;
      };
      Stylesheet2.prototype._createStyleElement = function() {
        var head = document.head;
        var styleElement = document.createElement("style");
        var nodeToInsertBefore = null;
        styleElement.setAttribute("data-merge-styles", "true");
        var cspSettings = this._config.cspSettings;
        if (cspSettings) {
          if (cspSettings.nonce) {
            styleElement.setAttribute("nonce", cspSettings.nonce);
          }
        }
        if (this._lastStyleElement) {
          nodeToInsertBefore = this._lastStyleElement.nextElementSibling;
        } else {
          var placeholderStyleTag = this._findPlaceholderStyleTag();
          if (placeholderStyleTag) {
            nodeToInsertBefore = placeholderStyleTag.nextElementSibling;
          } else {
            nodeToInsertBefore = head.childNodes[0];
          }
        }
        head.insertBefore(styleElement, head.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);
        this._lastStyleElement = styleElement;
        return styleElement;
      };
      Stylesheet2.prototype._findPlaceholderStyleTag = function() {
        var head = document.head;
        if (head) {
          return head.querySelector("style[data-merge-styles]");
        }
        return null;
      };
      return Stylesheet2;
    }()
  );

  // ../node_modules/@fluentui/merge-styles/lib/extractStyleParts.js
  function extractStyleParts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var classes = [];
    var objects = [];
    var stylesheet3 = Stylesheet.getInstance();
    function _processArgs(argsList) {
      for (var _i2 = 0, argsList_1 = argsList; _i2 < argsList_1.length; _i2++) {
        var arg = argsList_1[_i2];
        if (arg) {
          if (typeof arg === "string") {
            if (arg.indexOf(" ") >= 0) {
              _processArgs(arg.split(" "));
            } else {
              var translatedArgs = stylesheet3.argsFromClassName(arg);
              if (translatedArgs) {
                _processArgs(translatedArgs);
              } else {
                if (classes.indexOf(arg) === -1) {
                  classes.push(arg);
                }
              }
            }
          } else if (Array.isArray(arg)) {
            _processArgs(arg);
          } else if (typeof arg === "object") {
            objects.push(arg);
          }
        }
      }
    }
    _processArgs(args);
    return {
      classes,
      objects
    };
  }

  // ../node_modules/@fluentui/merge-styles/lib/StyleOptionsState.js
  function setRTL(isRTL) {
    if (_rtl !== isRTL) {
      _rtl = isRTL;
    }
  }
  function getRTL() {
    if (_rtl === void 0) {
      _rtl = typeof document !== "undefined" && !!document.documentElement && document.documentElement.getAttribute("dir") === "rtl";
    }
    return _rtl;
  }
  var _rtl;
  _rtl = getRTL();
  function getStyleOptions() {
    return {
      rtl: getRTL()
    };
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/kebabRules.js
  var rules = {};
  function kebabRules(rulePairs, index) {
    var rule = rulePairs[index];
    if (rule.charAt(0) !== "-") {
      rulePairs[index] = rules[rule] = rules[rule] || rule.replace(/([A-Z])/g, "-$1").toLowerCase();
    }
  }

  // ../node_modules/@fluentui/merge-styles/lib/getVendorSettings.js
  var _vendorSettings;
  function getVendorSettings() {
    var _a7;
    if (!_vendorSettings) {
      var doc = typeof document !== "undefined" ? document : void 0;
      var nav = typeof navigator !== "undefined" ? navigator : void 0;
      var userAgent = (_a7 = nav === null || nav === void 0 ? void 0 : nav.userAgent) === null || _a7 === void 0 ? void 0 : _a7.toLowerCase();
      if (!doc) {
        _vendorSettings = {
          isWebkit: true,
          isMoz: true,
          isOpera: true,
          isMs: true
        };
      } else {
        _vendorSettings = {
          isWebkit: !!(doc && "WebkitAppearance" in doc.documentElement.style),
          isMoz: !!(userAgent && userAgent.indexOf("firefox") > -1),
          isOpera: !!(userAgent && userAgent.indexOf("opera") > -1),
          isMs: !!(nav && (/rv:11.0/i.test(nav.userAgent) || /Edge\/\d./i.test(navigator.userAgent)))
        };
      }
    }
    return _vendorSettings;
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/prefixRules.js
  var autoPrefixNames = {
    "user-select": 1
  };
  function prefixRules(rulePairs, index) {
    var vendorSettings = getVendorSettings();
    var name = rulePairs[index];
    if (autoPrefixNames[name]) {
      var value = rulePairs[index + 1];
      if (autoPrefixNames[name]) {
        if (vendorSettings.isWebkit) {
          rulePairs.push("-webkit-" + name, value);
        }
        if (vendorSettings.isMoz) {
          rulePairs.push("-moz-" + name, value);
        }
        if (vendorSettings.isMs) {
          rulePairs.push("-ms-" + name, value);
        }
        if (vendorSettings.isOpera) {
          rulePairs.push("-o-" + name, value);
        }
      }
    }
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/provideUnits.js
  var NON_PIXEL_NUMBER_PROPS = [
    "column-count",
    "font-weight",
    "flex",
    "flex-grow",
    "flex-shrink",
    "fill-opacity",
    "opacity",
    "order",
    "z-index",
    "zoom"
  ];
  function provideUnits(rulePairs, index) {
    var name = rulePairs[index];
    var value = rulePairs[index + 1];
    if (typeof value === "number") {
      var isNonPixelProp = NON_PIXEL_NUMBER_PROPS.indexOf(name) > -1;
      var isVariableOrPrefixed = name.indexOf("--") > -1;
      var unit = isNonPixelProp || isVariableOrPrefixed ? "" : "px";
      rulePairs[index + 1] = "".concat(value).concat(unit);
    }
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/rtlifyRules.js
  var _a;
  var LEFT = "left";
  var RIGHT = "right";
  var NO_FLIP = "@noflip";
  var NAME_REPLACEMENTS = (_a = {}, _a[LEFT] = RIGHT, _a[RIGHT] = LEFT, _a);
  var VALUE_REPLACEMENTS = {
    "w-resize": "e-resize",
    "sw-resize": "se-resize",
    "nw-resize": "ne-resize"
  };
  function rtlifyRules(options, rulePairs, index) {
    if (options.rtl) {
      var name_1 = rulePairs[index];
      if (!name_1) {
        return;
      }
      var value = rulePairs[index + 1];
      if (typeof value === "string" && value.indexOf(NO_FLIP) >= 0) {
        rulePairs[index + 1] = value.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g, "");
      } else if (name_1.indexOf(LEFT) >= 0) {
        rulePairs[index] = name_1.replace(LEFT, RIGHT);
      } else if (name_1.indexOf(RIGHT) >= 0) {
        rulePairs[index] = name_1.replace(RIGHT, LEFT);
      } else if (String(value).indexOf(LEFT) >= 0) {
        rulePairs[index + 1] = value.replace(LEFT, RIGHT);
      } else if (String(value).indexOf(RIGHT) >= 0) {
        rulePairs[index + 1] = value.replace(RIGHT, LEFT);
      } else if (NAME_REPLACEMENTS[name_1]) {
        rulePairs[index] = NAME_REPLACEMENTS[name_1];
      } else if (VALUE_REPLACEMENTS[value]) {
        rulePairs[index + 1] = VALUE_REPLACEMENTS[value];
      } else {
        switch (name_1) {
          case "margin":
          case "padding":
            rulePairs[index + 1] = flipQuad(value);
            break;
          case "box-shadow":
            rulePairs[index + 1] = negateNum(value, 0);
            break;
        }
      }
    }
  }
  function negateNum(value, partIndex) {
    var parts = value.split(" ");
    var numberVal = parseInt(parts[partIndex], 10);
    parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));
    return parts.join(" ");
  }
  function flipQuad(value) {
    if (typeof value === "string") {
      var parts = value.split(" ");
      if (parts.length === 4) {
        return "".concat(parts[0], " ").concat(parts[3], " ").concat(parts[2], " ").concat(parts[1]);
      }
    }
    return value;
  }

  // ../node_modules/@fluentui/merge-styles/lib/tokenizeWithParentheses.js
  function tokenizeWithParentheses(value) {
    var parts = [];
    var partStart = 0;
    var parens = 0;
    for (var i2 = 0; i2 < value.length; i2++) {
      switch (value[i2]) {
        case "(":
          parens++;
          break;
        case ")":
          if (parens) {
            parens--;
          }
          break;
        case "	":
        case " ":
          if (!parens) {
            if (i2 > partStart) {
              parts.push(value.substring(partStart, i2));
            }
            partStart = i2 + 1;
          }
          break;
      }
    }
    if (partStart < value.length) {
      parts.push(value.substring(partStart));
    }
    return parts;
  }

  // ../node_modules/@fluentui/merge-styles/lib/styleToClassName.js
  var DISPLAY_NAME = "displayName";
  function getDisplayName(rules2) {
    var rootStyle = rules2 && rules2["&"];
    return rootStyle ? rootStyle.displayName : void 0;
  }
  var globalSelectorRegExp = /\:global\((.+?)\)/g;
  function expandCommaSeparatedGlobals(selectorWithGlobals) {
    if (!globalSelectorRegExp.test(selectorWithGlobals)) {
      return selectorWithGlobals;
    }
    var replacementInfo = [];
    var findGlobal = /\:global\((.+?)\)/g;
    var match = null;
    while (match = findGlobal.exec(selectorWithGlobals)) {
      if (match[1].indexOf(",") > -1) {
        replacementInfo.push([
          match.index,
          match.index + match[0].length,
          // Wrap each of the found selectors in :global()
          match[1].split(",").map(function(v2) {
            return ":global(".concat(v2.trim(), ")");
          }).join(", ")
        ]);
      }
    }
    return replacementInfo.reverse().reduce(function(selector, _a7) {
      var matchIndex = _a7[0], matchEndIndex = _a7[1], replacement = _a7[2];
      var prefix = selector.slice(0, matchIndex);
      var suffix = selector.slice(matchEndIndex);
      return prefix + replacement + suffix;
    }, selectorWithGlobals);
  }
  function expandSelector(newSelector, currentSelector) {
    if (newSelector.indexOf(":global(") >= 0) {
      return newSelector.replace(globalSelectorRegExp, "$1");
    } else if (newSelector.indexOf(":") === 0) {
      return currentSelector + newSelector;
    } else if (newSelector.indexOf("&") < 0) {
      return currentSelector + " " + newSelector;
    }
    return newSelector;
  }
  function extractSelector(currentSelector, rules2, selector, value) {
    if (rules2 === void 0) {
      rules2 = { __order: [] };
    }
    if (selector.indexOf("@") === 0) {
      selector = selector + "{" + currentSelector;
      extractRules([value], rules2, selector);
    } else if (selector.indexOf(",") > -1) {
      expandCommaSeparatedGlobals(selector).split(",").map(function(s2) {
        return s2.trim();
      }).forEach(function(separatedSelector) {
        return extractRules([value], rules2, expandSelector(separatedSelector, currentSelector));
      });
    } else {
      extractRules([value], rules2, expandSelector(selector, currentSelector));
    }
  }
  function extractRules(args, rules2, currentSelector) {
    if (rules2 === void 0) {
      rules2 = { __order: [] };
    }
    if (currentSelector === void 0) {
      currentSelector = "&";
    }
    var stylesheet3 = Stylesheet.getInstance();
    var currentRules = rules2[currentSelector];
    if (!currentRules) {
      currentRules = {};
      rules2[currentSelector] = currentRules;
      rules2.__order.push(currentSelector);
    }
    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
      var arg = args_1[_i];
      if (typeof arg === "string") {
        var expandedRules = stylesheet3.argsFromClassName(arg);
        if (expandedRules) {
          extractRules(expandedRules, rules2, currentSelector);
        }
      } else if (Array.isArray(arg)) {
        extractRules(arg, rules2, currentSelector);
      } else {
        for (var prop in arg) {
          if (arg.hasOwnProperty(prop)) {
            var propValue = arg[prop];
            if (prop === "selectors") {
              var selectors = arg.selectors;
              for (var newSelector in selectors) {
                if (selectors.hasOwnProperty(newSelector)) {
                  extractSelector(currentSelector, rules2, newSelector, selectors[newSelector]);
                }
              }
            } else if (typeof propValue === "object") {
              if (propValue !== null) {
                extractSelector(currentSelector, rules2, prop, propValue);
              }
            } else {
              if (propValue !== void 0) {
                if (prop === "margin" || prop === "padding") {
                  expandQuads(currentRules, prop, propValue);
                } else {
                  currentRules[prop] = propValue;
                }
              }
            }
          }
        }
      }
    }
    return rules2;
  }
  function expandQuads(currentRules, name, value) {
    var parts = typeof value === "string" ? tokenizeWithParentheses(value) : [value];
    if (parts.length === 0) {
      parts.push(value);
    }
    if (parts[parts.length - 1] === "!important") {
      parts = parts.slice(0, -1).map(function(p2) {
        return p2 + " !important";
      });
    }
    currentRules[name + "Top"] = parts[0];
    currentRules[name + "Right"] = parts[1] || parts[0];
    currentRules[name + "Bottom"] = parts[2] || parts[0];
    currentRules[name + "Left"] = parts[3] || parts[1] || parts[0];
  }
  function getKeyForRules(options, rules2) {
    var serialized = [options.rtl ? "rtl" : "ltr"];
    var hasProps = false;
    for (var _i = 0, _a7 = rules2.__order; _i < _a7.length; _i++) {
      var selector = _a7[_i];
      serialized.push(selector);
      var rulesForSelector = rules2[selector];
      for (var propName in rulesForSelector) {
        if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== void 0) {
          hasProps = true;
          serialized.push(propName, rulesForSelector[propName]);
        }
      }
    }
    return hasProps ? serialized.join("") : void 0;
  }
  function repeatString(target, count) {
    if (count <= 0) {
      return "";
    }
    if (count === 1) {
      return target;
    }
    return target + repeatString(target, count - 1);
  }
  function serializeRuleEntries(options, ruleEntries) {
    if (!ruleEntries) {
      return "";
    }
    var allEntries = [];
    for (var entry in ruleEntries) {
      if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== void 0) {
        allEntries.push(entry, ruleEntries[entry]);
      }
    }
    for (var i2 = 0; i2 < allEntries.length; i2 += 2) {
      kebabRules(allEntries, i2);
      provideUnits(allEntries, i2);
      rtlifyRules(options, allEntries, i2);
      prefixRules(allEntries, i2);
    }
    for (var i2 = 1; i2 < allEntries.length; i2 += 4) {
      allEntries.splice(i2, 1, ":", allEntries[i2], ";");
    }
    return allEntries.join("");
  }
  function styleToRegistration(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var rules2 = extractRules(args);
    var key = getKeyForRules(options, rules2);
    if (key) {
      var stylesheet3 = Stylesheet.getInstance();
      var registration = {
        className: stylesheet3.classNameFromKey(key),
        key,
        args
      };
      if (!registration.className) {
        registration.className = stylesheet3.getClassName(getDisplayName(rules2));
        var rulesToInsert = [];
        for (var _a7 = 0, _b3 = rules2.__order; _a7 < _b3.length; _a7++) {
          var selector = _b3[_a7];
          rulesToInsert.push(selector, serializeRuleEntries(options, rules2[selector]));
        }
        registration.rulesToInsert = rulesToInsert;
      }
      return registration;
    }
    return void 0;
  }
  function applyRegistration(registration, specificityMultiplier) {
    if (specificityMultiplier === void 0) {
      specificityMultiplier = 1;
    }
    var stylesheet3 = Stylesheet.getInstance();
    var className = registration.className, key = registration.key, args = registration.args, rulesToInsert = registration.rulesToInsert;
    if (rulesToInsert) {
      for (var i2 = 0; i2 < rulesToInsert.length; i2 += 2) {
        var rules2 = rulesToInsert[i2 + 1];
        if (rules2) {
          var selector = rulesToInsert[i2];
          selector = selector.replace(/&/g, repeatString(".".concat(registration.className), specificityMultiplier));
          var processedRule = "".concat(selector, "{").concat(rules2, "}").concat(selector.indexOf("@") === 0 ? "}" : "");
          stylesheet3.insertRule(processedRule);
        }
      }
      stylesheet3.cacheClassName(className, key, args, rulesToInsert);
    }
  }
  function styleToClassName(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var registration = styleToRegistration.apply(void 0, __spreadArray([options], args, false));
    if (registration) {
      applyRegistration(registration, options.specificityMultiplier);
      return registration.className;
    }
    return "";
  }

  // ../node_modules/@fluentui/merge-styles/lib/mergeStyles.js
  function mergeStyles() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return mergeCss(args, getStyleOptions());
  }
  function mergeCss(args, options) {
    var styleArgs = args instanceof Array ? args : [args];
    var _a7 = extractStyleParts(styleArgs), classes = _a7.classes, objects = _a7.objects;
    if (objects.length) {
      classes.push(styleToClassName(options || {}, objects));
    }
    return classes.join(" ");
  }

  // ../node_modules/@fluentui/merge-styles/lib/concatStyleSets.js
  function concatStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styleSets[_i] = arguments[_i];
    }
    if (styleSets && styleSets.length === 1 && styleSets[0] && !styleSets[0].subComponentStyles) {
      return styleSets[0];
    }
    var mergedSet = {};
    var workingSubcomponentStyles = {};
    for (var _a7 = 0, styleSets_1 = styleSets; _a7 < styleSets_1.length; _a7++) {
      var currentSet = styleSets_1[_a7];
      if (currentSet) {
        for (var prop in currentSet) {
          if (currentSet.hasOwnProperty(prop)) {
            if (prop === "subComponentStyles" && currentSet.subComponentStyles !== void 0) {
              var currentComponentStyles = currentSet.subComponentStyles;
              for (var subCompProp in currentComponentStyles) {
                if (currentComponentStyles.hasOwnProperty(subCompProp)) {
                  if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {
                    workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);
                  } else {
                    workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];
                  }
                }
              }
              continue;
            }
            var mergedValue = mergedSet[prop];
            var currentValue = currentSet[prop];
            if (mergedValue === void 0) {
              mergedSet[prop] = currentValue;
            } else {
              mergedSet[prop] = __spreadArray(__spreadArray([], Array.isArray(mergedValue) ? mergedValue : [mergedValue], true), Array.isArray(currentValue) ? currentValue : [currentValue], true);
            }
          }
        }
      }
    }
    if (Object.keys(workingSubcomponentStyles).length > 0) {
      mergedSet.subComponentStyles = {};
      var mergedSubStyles = mergedSet.subComponentStyles;
      var _loop_1 = function(subCompProp2) {
        if (workingSubcomponentStyles.hasOwnProperty(subCompProp2)) {
          var workingSet_1 = workingSubcomponentStyles[subCompProp2];
          mergedSubStyles[subCompProp2] = function(styleProps) {
            return concatStyleSets.apply(void 0, workingSet_1.map(function(styleFunctionOrObject) {
              return typeof styleFunctionOrObject === "function" ? styleFunctionOrObject(styleProps) : styleFunctionOrObject;
            }));
          };
        }
      };
      for (var subCompProp in workingSubcomponentStyles) {
        _loop_1(subCompProp);
      }
    }
    return mergedSet;
  }

  // ../node_modules/@fluentui/merge-styles/lib/mergeStyleSets.js
  function mergeStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styleSets[_i] = arguments[_i];
    }
    return mergeCssSets(styleSets, getStyleOptions());
  }
  function mergeCssSets(styleSets, options) {
    var classNameSet = { subComponentStyles: {} };
    var styleSet = styleSets[0];
    if (!styleSet && styleSets.length <= 1) {
      return { subComponentStyles: {} };
    }
    var concatenatedStyleSet = concatStyleSets.apply(void 0, styleSets);
    var registrations = [];
    for (var styleSetArea in concatenatedStyleSet) {
      if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {
        if (styleSetArea === "subComponentStyles") {
          classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};
          continue;
        }
        var styles2 = concatenatedStyleSet[styleSetArea];
        var _a7 = extractStyleParts(styles2), classes = _a7.classes, objects = _a7.objects;
        if (objects === null || objects === void 0 ? void 0 : objects.length) {
          var registration = styleToRegistration(options || {}, { displayName: styleSetArea }, objects);
          if (registration) {
            registrations.push(registration);
            classNameSet[styleSetArea] = classes.concat([registration.className]).join(" ");
          }
        } else {
          classNameSet[styleSetArea] = classes.join(" ");
        }
      }
    }
    for (var _i = 0, registrations_1 = registrations; _i < registrations_1.length; _i++) {
      var registration = registrations_1[_i];
      if (registration) {
        applyRegistration(registration, options === null || options === void 0 ? void 0 : options.specificityMultiplier);
      }
    }
    return classNameSet;
  }

  // ../node_modules/@fluentui/merge-styles/lib/concatStyleSetsWithProps.js
  function concatStyleSetsWithProps(styleProps) {
    var allStyles = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      allStyles[_i - 1] = arguments[_i];
    }
    var result = [];
    for (var _a7 = 0, allStyles_1 = allStyles; _a7 < allStyles_1.length; _a7++) {
      var styles2 = allStyles_1[_a7];
      if (styles2) {
        result.push(typeof styles2 === "function" ? styles2(styleProps) : styles2);
      }
    }
    if (result.length === 1) {
      return result[0];
    } else if (result.length) {
      return concatStyleSets.apply(void 0, result);
    }
    return {};
  }

  // ../node_modules/@fluentui/merge-styles/lib/fontFace.js
  function fontFace(font) {
    var stylesheet3 = Stylesheet.getInstance();
    var rule = serializeRuleEntries(getStyleOptions(), font);
    var className = stylesheet3.classNameFromKey(rule);
    if (className) {
      return;
    }
    var name = stylesheet3.getClassName();
    stylesheet3.insertRule("@font-face{".concat(rule, "}"), true);
    stylesheet3.cacheClassName(name, rule, [], ["font-face", rule]);
  }

  // ../node_modules/@fluentui/merge-styles/lib/keyframes.js
  function keyframes(timeline) {
    var stylesheet3 = Stylesheet.getInstance();
    var rulesArray = [];
    for (var prop in timeline) {
      if (timeline.hasOwnProperty(prop)) {
        rulesArray.push(prop, "{", serializeRuleEntries(getStyleOptions(), timeline[prop]), "}");
      }
    }
    var rules2 = rulesArray.join("");
    var className = stylesheet3.classNameFromKey(rules2);
    if (className) {
      return className;
    }
    var name = stylesheet3.getClassName();
    stylesheet3.insertRule("@keyframes ".concat(name, "{").concat(rules2, "}"), true);
    stylesheet3.cacheClassName(name, rules2, [], ["keyframes", rules2]);
    return name;
  }

  // ../node_modules/@fluentui/merge-styles/lib/version.js
  setVersion("@fluentui/merge-styles", "8.5.12");

  // ../node_modules/@fluentui/style-utilities/lib/utilities/buildClassMap.js
  function buildClassMap(styles2) {
    var classes = {};
    var _loop_1 = function(styleName2) {
      if (styles2.hasOwnProperty(styleName2)) {
        var className_1;
        Object.defineProperty(classes, styleName2, {
          get: function() {
            if (className_1 === void 0) {
              className_1 = mergeStyles(styles2[styleName2]).toString();
            }
            return className_1;
          },
          enumerable: true,
          configurable: true
        });
      }
    };
    for (var styleName in styles2) {
      _loop_1(styleName);
    }
    return classes;
  }

  // ../node_modules/@fluentui/utilities/lib/dom/canUseDOM.js
  function canUseDOM() {
    return typeof window !== "undefined" && !!(window.document && // eslint-disable-next-line deprecation/deprecation
    window.document.createElement);
  }

  // ../node_modules/@fluentui/utilities/lib/dom/getWindow.js
  var _window = void 0;
  try {
    _window = window;
  } catch (e2) {
  }
  function getWindow(rootElement) {
    if (!canUseDOM() || typeof _window === "undefined") {
      return void 0;
    } else {
      var el = rootElement;
      return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;
    }
  }

  // ../node_modules/@fluentui/utilities/lib/Async.js
  var Async = (
    /** @class */
    function() {
      function Async2(parent, onError) {
        this._timeoutIds = null;
        this._immediateIds = null;
        this._intervalIds = null;
        this._animationFrameIds = null;
        this._isDisposed = false;
        this._parent = parent || null;
        this._onErrorHandler = onError;
        this._noop = function() {
        };
      }
      Async2.prototype.dispose = function() {
        var id;
        this._isDisposed = true;
        this._parent = null;
        if (this._timeoutIds) {
          for (id in this._timeoutIds) {
            if (this._timeoutIds.hasOwnProperty(id)) {
              this.clearTimeout(parseInt(id, 10));
            }
          }
          this._timeoutIds = null;
        }
        if (this._immediateIds) {
          for (id in this._immediateIds) {
            if (this._immediateIds.hasOwnProperty(id)) {
              this.clearImmediate(parseInt(id, 10));
            }
          }
          this._immediateIds = null;
        }
        if (this._intervalIds) {
          for (id in this._intervalIds) {
            if (this._intervalIds.hasOwnProperty(id)) {
              this.clearInterval(parseInt(id, 10));
            }
          }
          this._intervalIds = null;
        }
        if (this._animationFrameIds) {
          for (id in this._animationFrameIds) {
            if (this._animationFrameIds.hasOwnProperty(id)) {
              this.cancelAnimationFrame(parseInt(id, 10));
            }
          }
          this._animationFrameIds = null;
        }
      };
      Async2.prototype.setTimeout = function(callback, duration) {
        var _this = this;
        var timeoutId = 0;
        if (!this._isDisposed) {
          if (!this._timeoutIds) {
            this._timeoutIds = {};
          }
          timeoutId = setTimeout(function() {
            try {
              if (_this._timeoutIds) {
                delete _this._timeoutIds[timeoutId];
              }
              callback.apply(_this._parent);
            } catch (e2) {
              _this._logError(e2);
            }
          }, duration);
          this._timeoutIds[timeoutId] = true;
        }
        return timeoutId;
      };
      Async2.prototype.clearTimeout = function(id) {
        if (this._timeoutIds && this._timeoutIds[id]) {
          clearTimeout(id);
          delete this._timeoutIds[id];
        }
      };
      Async2.prototype.setImmediate = function(callback, targetElement) {
        var _this = this;
        var immediateId = 0;
        var win2 = getWindow(targetElement);
        if (!this._isDisposed) {
          if (!this._immediateIds) {
            this._immediateIds = {};
          }
          var setImmediateCallback = function() {
            try {
              if (_this._immediateIds) {
                delete _this._immediateIds[immediateId];
              }
              callback.apply(_this._parent);
            } catch (e2) {
              _this._logError(e2);
            }
          };
          immediateId = win2.setTimeout(setImmediateCallback, 0);
          this._immediateIds[immediateId] = true;
        }
        return immediateId;
      };
      Async2.prototype.clearImmediate = function(id, targetElement) {
        var win2 = getWindow(targetElement);
        if (this._immediateIds && this._immediateIds[id]) {
          win2.clearTimeout(id);
          delete this._immediateIds[id];
        }
      };
      Async2.prototype.setInterval = function(callback, duration) {
        var _this = this;
        var intervalId = 0;
        if (!this._isDisposed) {
          if (!this._intervalIds) {
            this._intervalIds = {};
          }
          intervalId = setInterval(function() {
            try {
              callback.apply(_this._parent);
            } catch (e2) {
              _this._logError(e2);
            }
          }, duration);
          this._intervalIds[intervalId] = true;
        }
        return intervalId;
      };
      Async2.prototype.clearInterval = function(id) {
        if (this._intervalIds && this._intervalIds[id]) {
          clearInterval(id);
          delete this._intervalIds[id];
        }
      };
      Async2.prototype.throttle = function(func, wait, options) {
        var _this = this;
        if (this._isDisposed) {
          return this._noop;
        }
        var waitMS = wait || 0;
        var leading = true;
        var trailing = true;
        var lastExecuteTime = 0;
        var lastResult;
        var lastArgs;
        var timeoutId = null;
        if (options && typeof options.leading === "boolean") {
          leading = options.leading;
        }
        if (options && typeof options.trailing === "boolean") {
          trailing = options.trailing;
        }
        var callback = function(userCall) {
          var now = Date.now();
          var delta = now - lastExecuteTime;
          var waitLength = leading ? waitMS - delta : waitMS;
          if (delta >= waitMS && (!userCall || leading)) {
            lastExecuteTime = now;
            if (timeoutId) {
              _this.clearTimeout(timeoutId);
              timeoutId = null;
            }
            lastResult = func.apply(_this._parent, lastArgs);
          } else if (timeoutId === null && trailing) {
            timeoutId = _this.setTimeout(callback, waitLength);
          }
          return lastResult;
        };
        var resultFunction = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          lastArgs = args;
          return callback(true);
        };
        return resultFunction;
      };
      Async2.prototype.debounce = function(func, wait, options) {
        var _this = this;
        if (this._isDisposed) {
          var noOpFunction = function() {
          };
          noOpFunction.cancel = function() {
            return;
          };
          noOpFunction.flush = function() {
            return null;
          };
          noOpFunction.pending = function() {
            return false;
          };
          return noOpFunction;
        }
        var waitMS = wait || 0;
        var leading = false;
        var trailing = true;
        var maxWait = null;
        var lastCallTime = 0;
        var lastExecuteTime = Date.now();
        var lastResult;
        var lastArgs;
        var timeoutId = null;
        if (options && typeof options.leading === "boolean") {
          leading = options.leading;
        }
        if (options && typeof options.trailing === "boolean") {
          trailing = options.trailing;
        }
        if (options && typeof options.maxWait === "number" && !isNaN(options.maxWait)) {
          maxWait = options.maxWait;
        }
        var markExecuted = function(time) {
          if (timeoutId) {
            _this.clearTimeout(timeoutId);
            timeoutId = null;
          }
          lastExecuteTime = time;
        };
        var invokeFunction = function(time) {
          markExecuted(time);
          lastResult = func.apply(_this._parent, lastArgs);
        };
        var callback = function(userCall) {
          var now = Date.now();
          var executeImmediately = false;
          if (userCall) {
            if (leading && now - lastCallTime >= waitMS) {
              executeImmediately = true;
            }
            lastCallTime = now;
          }
          var delta = now - lastCallTime;
          var waitLength = waitMS - delta;
          var maxWaitDelta = now - lastExecuteTime;
          var maxWaitExpired = false;
          if (maxWait !== null) {
            if (maxWaitDelta >= maxWait && timeoutId) {
              maxWaitExpired = true;
            } else {
              waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
            }
          }
          if (delta >= waitMS || maxWaitExpired || executeImmediately) {
            invokeFunction(now);
          } else if ((timeoutId === null || !userCall) && trailing) {
            timeoutId = _this.setTimeout(callback, waitLength);
          }
          return lastResult;
        };
        var pending = function() {
          return !!timeoutId;
        };
        var cancel = function() {
          if (pending()) {
            markExecuted(Date.now());
          }
        };
        var flush = function() {
          if (pending()) {
            invokeFunction(Date.now());
          }
          return lastResult;
        };
        var resultFunction = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          lastArgs = args;
          return callback(true);
        };
        resultFunction.cancel = cancel;
        resultFunction.flush = flush;
        resultFunction.pending = pending;
        return resultFunction;
      };
      Async2.prototype.requestAnimationFrame = function(callback, targetElement) {
        var _this = this;
        var animationFrameId = 0;
        var win2 = getWindow(targetElement);
        if (!this._isDisposed) {
          if (!this._animationFrameIds) {
            this._animationFrameIds = {};
          }
          var animationFrameCallback = function() {
            try {
              if (_this._animationFrameIds) {
                delete _this._animationFrameIds[animationFrameId];
              }
              callback.apply(_this._parent);
            } catch (e2) {
              _this._logError(e2);
            }
          };
          animationFrameId = win2.requestAnimationFrame ? win2.requestAnimationFrame(animationFrameCallback) : win2.setTimeout(animationFrameCallback, 0);
          this._animationFrameIds[animationFrameId] = true;
        }
        return animationFrameId;
      };
      Async2.prototype.cancelAnimationFrame = function(id, targetElement) {
        var win2 = getWindow(targetElement);
        if (this._animationFrameIds && this._animationFrameIds[id]) {
          win2.cancelAnimationFrame ? win2.cancelAnimationFrame(id) : win2.clearTimeout(id);
          delete this._animationFrameIds[id];
        }
      };
      Async2.prototype._logError = function(e2) {
        if (this._onErrorHandler) {
          this._onErrorHandler(e2);
        }
      };
      return Async2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/object.js
  function shallowCompare(a2, b3) {
    if (!a2 || !b3) {
      return !a2 && !b3;
    }
    for (var propName in a2) {
      if (a2.hasOwnProperty(propName)) {
        if (!b3.hasOwnProperty(propName) || b3[propName] !== a2[propName]) {
          return false;
        }
      }
    }
    for (var propName in b3) {
      if (b3.hasOwnProperty(propName)) {
        if (!a2.hasOwnProperty(propName)) {
          return false;
        }
      }
    }
    return true;
  }
  function assign(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    return filteredAssign.apply(this, [null, target].concat(args));
  }
  function filteredAssign(isAllowed, target) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    target = target || {};
    for (var _a7 = 0, args_1 = args; _a7 < args_1.length; _a7++) {
      var sourceObject = args_1[_a7];
      if (sourceObject) {
        for (var propName in sourceObject) {
          if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {
            target[propName] = sourceObject[propName];
          }
        }
      }
    }
    return target;
  }

  // ../node_modules/@fluentui/utilities/lib/EventGroup.js
  var EventGroup = (
    /** @class */
    function() {
      function EventGroup2(parent) {
        this._id = EventGroup2._uniqueId++;
        this._parent = parent;
        this._eventRecords = [];
      }
      EventGroup2.raise = function(target, eventName, eventArgs, bubbleEvent) {
        var retVal2;
        if (EventGroup2._isElement(target)) {
          if (typeof document !== "undefined" && document.createEvent) {
            var ev = document.createEvent("HTMLEvents");
            ev.initEvent(eventName, bubbleEvent || false, true);
            assign(ev, eventArgs);
            retVal2 = target.dispatchEvent(ev);
          } else if (typeof document !== "undefined" && document.createEventObject) {
            var evObj = document.createEventObject(eventArgs);
            target.fireEvent("on" + eventName, evObj);
          }
        } else {
          while (target && retVal2 !== false) {
            var events = target.__events__;
            var eventRecords = events ? events[eventName] : null;
            if (eventRecords) {
              for (var id in eventRecords) {
                if (eventRecords.hasOwnProperty(id)) {
                  var eventRecordList = eventRecords[id];
                  for (var listIndex = 0; retVal2 !== false && listIndex < eventRecordList.length; listIndex++) {
                    var record = eventRecordList[listIndex];
                    if (record.objectCallback) {
                      retVal2 = record.objectCallback.call(record.parent, eventArgs);
                    }
                  }
                }
              }
            }
            target = bubbleEvent ? target.parent : null;
          }
        }
        return retVal2;
      };
      EventGroup2.isObserved = function(target, eventName) {
        var events = target && target.__events__;
        return !!events && !!events[eventName];
      };
      EventGroup2.isDeclared = function(target, eventName) {
        var declaredEvents = target && target.__declaredEvents;
        return !!declaredEvents && !!declaredEvents[eventName];
      };
      EventGroup2.stopPropagation = function(event) {
        if (event.stopPropagation) {
          event.stopPropagation();
        } else {
          event.cancelBubble = true;
        }
      };
      EventGroup2._isElement = function(target) {
        return !!target && (!!target.addEventListener || typeof HTMLElement !== "undefined" && target instanceof HTMLElement);
      };
      EventGroup2.prototype.dispose = function() {
        if (!this._isDisposed) {
          this._isDisposed = true;
          this.off();
          this._parent = null;
        }
      };
      EventGroup2.prototype.onAll = function(target, events, useCapture) {
        for (var eventName in events) {
          if (events.hasOwnProperty(eventName)) {
            this.on(target, eventName, events[eventName], useCapture);
          }
        }
      };
      EventGroup2.prototype.on = function(target, eventName, callback, options) {
        var _this = this;
        if (eventName.indexOf(",") > -1) {
          var events = eventName.split(/[ ,]+/);
          for (var i2 = 0; i2 < events.length; i2++) {
            this.on(target, events[i2], callback, options);
          }
        } else {
          var parent_1 = this._parent;
          var eventRecord = {
            target,
            eventName,
            parent: parent_1,
            callback,
            options
          };
          var events = target.__events__ = target.__events__ || {};
          events[eventName] = events[eventName] || {
            count: 0
          };
          events[eventName][this._id] = events[eventName][this._id] || [];
          events[eventName][this._id].push(eventRecord);
          events[eventName].count++;
          if (EventGroup2._isElement(target)) {
            var processElementEvent = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              if (_this._isDisposed) {
                return;
              }
              var result;
              try {
                result = callback.apply(parent_1, args);
                if (result === false && args[0]) {
                  var e2 = args[0];
                  if (e2.preventDefault) {
                    e2.preventDefault();
                  }
                  if (e2.stopPropagation) {
                    e2.stopPropagation();
                  }
                  e2.cancelBubble = true;
                }
              } catch (e3) {
              }
              return result;
            };
            eventRecord.elementCallback = processElementEvent;
            if (target.addEventListener) {
              target.addEventListener(eventName, processElementEvent, options);
            } else if (target.attachEvent) {
              target.attachEvent("on" + eventName, processElementEvent);
            }
          } else {
            var processObjectEvent = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              if (_this._isDisposed) {
                return;
              }
              return callback.apply(parent_1, args);
            };
            eventRecord.objectCallback = processObjectEvent;
          }
          this._eventRecords.push(eventRecord);
        }
      };
      EventGroup2.prototype.off = function(target, eventName, callback, options) {
        for (var i2 = 0; i2 < this._eventRecords.length; i2++) {
          var eventRecord = this._eventRecords[i2];
          if ((!target || target === eventRecord.target) && (!eventName || eventName === eventRecord.eventName) && (!callback || callback === eventRecord.callback) && (typeof options !== "boolean" || options === eventRecord.options)) {
            var events = eventRecord.target.__events__;
            var targetArrayLookup = events[eventRecord.eventName];
            var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
            if (targetArray) {
              if (targetArray.length === 1 || !callback) {
                targetArrayLookup.count -= targetArray.length;
                delete events[eventRecord.eventName][this._id];
              } else {
                targetArrayLookup.count--;
                targetArray.splice(targetArray.indexOf(eventRecord), 1);
              }
              if (!targetArrayLookup.count) {
                delete events[eventRecord.eventName];
              }
            }
            if (eventRecord.elementCallback) {
              if (eventRecord.target.removeEventListener) {
                eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.options);
              } else if (eventRecord.target.detachEvent) {
                eventRecord.target.detachEvent("on" + eventRecord.eventName, eventRecord.elementCallback);
              }
            }
            this._eventRecords.splice(i2--, 1);
          }
        }
      };
      EventGroup2.prototype.raise = function(eventName, eventArgs, bubbleEvent) {
        return EventGroup2.raise(this._parent, eventName, eventArgs, bubbleEvent);
      };
      EventGroup2.prototype.declare = function(event) {
        var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};
        if (typeof event === "string") {
          declaredEvents[event] = true;
        } else {
          for (var i2 = 0; i2 < event.length; i2++) {
            declaredEvents[event[i2]] = true;
          }
        }
      };
      EventGroup2._uniqueId = 0;
      return EventGroup2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/dom/getDocument.js
  function getDocument(rootElement) {
    if (!canUseDOM() || typeof document === "undefined") {
      return void 0;
    } else {
      var el = rootElement;
      return el && el.ownerDocument ? el.ownerDocument : document;
    }
  }

  // ../node_modules/@fluentui/utilities/lib/scroll.js
  var _scrollbarWidth;
  var _bodyScrollDisabledCount = 0;
  var DisabledScrollClassName = mergeStyles({
    overflow: "hidden !important"
  });
  var DATA_IS_SCROLLABLE_ATTRIBUTE = "data-is-scrollable";
  var allowScrollOnElement = function(element, events) {
    if (!element) {
      return;
    }
    var _previousClientY = 0;
    var _element = null;
    var _saveClientY = function(event) {
      if (event.targetTouches.length === 1) {
        _previousClientY = event.targetTouches[0].clientY;
      }
    };
    var _preventOverscrolling = function(event) {
      if (event.targetTouches.length !== 1) {
        return;
      }
      event.stopPropagation();
      if (!_element) {
        return;
      }
      var clientY = event.targetTouches[0].clientY - _previousClientY;
      var scrollableParent = findScrollableParent(event.target);
      if (scrollableParent) {
        _element = scrollableParent;
      }
      if (_element.scrollTop === 0 && clientY > 0) {
        event.preventDefault();
      }
      if (_element.scrollHeight - Math.ceil(_element.scrollTop) <= _element.clientHeight && clientY < 0) {
        event.preventDefault();
      }
    };
    events.on(element, "touchstart", _saveClientY, { passive: false });
    events.on(element, "touchmove", _preventOverscrolling, { passive: false });
    _element = element;
  };
  var allowOverscrollOnElement = function(element, events) {
    if (!element) {
      return;
    }
    var _allowElementScroll = function(event) {
      event.stopPropagation();
    };
    events.on(element, "touchmove", _allowElementScroll, { passive: false });
  };
  var _disableIosBodyScroll = function(event) {
    event.preventDefault();
  };
  function disableBodyScroll() {
    var doc = getDocument();
    if (doc && doc.body && !_bodyScrollDisabledCount) {
      doc.body.classList.add(DisabledScrollClassName);
      doc.body.addEventListener("touchmove", _disableIosBodyScroll, { passive: false, capture: false });
    }
    _bodyScrollDisabledCount++;
  }
  function enableBodyScroll() {
    if (_bodyScrollDisabledCount > 0) {
      var doc = getDocument();
      if (doc && doc.body && _bodyScrollDisabledCount === 1) {
        doc.body.classList.remove(DisabledScrollClassName);
        doc.body.removeEventListener("touchmove", _disableIosBodyScroll);
      }
      _bodyScrollDisabledCount--;
    }
  }
  function getScrollbarWidth() {
    if (_scrollbarWidth === void 0) {
      var scrollDiv = document.createElement("div");
      scrollDiv.style.setProperty("width", "100px");
      scrollDiv.style.setProperty("height", "100px");
      scrollDiv.style.setProperty("overflow", "scroll");
      scrollDiv.style.setProperty("position", "absolute");
      scrollDiv.style.setProperty("top", "-9999px");
      document.body.appendChild(scrollDiv);
      _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
    return _scrollbarWidth;
  }
  function findScrollableParent(startingElement) {
    var el = startingElement;
    var doc = getDocument(startingElement);
    while (el && el !== doc.body) {
      if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === "true") {
        return el;
      }
      el = el.parentElement;
    }
    el = startingElement;
    while (el && el !== doc.body) {
      if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== "false") {
        var computedStyles = getComputedStyle(el);
        var overflowY = computedStyles ? computedStyles.getPropertyValue("overflow-y") : "";
        if (overflowY && (overflowY === "scroll" || overflowY === "auto")) {
          return el;
        }
      }
      el = el.parentElement;
    }
    if (!el || el === doc.body) {
      el = getWindow(startingElement);
    }
    return el;
  }

  // ../node_modules/@fluentui/utilities/lib/BaseComponent.js
  var React = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/warn/warn.js
  var _warningCallback = void 0;
  function warn(message) {
    if (_warningCallback && true) {
      _warningCallback(message);
    } else if (console && console.warn) {
      console.warn(message);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnConditionallyRequiredProps.js
  function warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition) {
    if (condition === true && true) {
      for (var _i = 0, requiredProps_1 = requiredProps; _i < requiredProps_1.length; _i++) {
        var requiredPropName = requiredProps_1[_i];
        if (!(requiredPropName in props)) {
          warn("".concat(componentName, " property '").concat(requiredPropName, "' is required when '").concat(conditionalPropName, "' is used.'"));
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnMutuallyExclusive.js
  function warnMutuallyExclusive(componentName, props, exclusiveMap) {
    if (true) {
      for (var propName in exclusiveMap) {
        if (props && props[propName] !== void 0) {
          var propInExclusiveMapValue = exclusiveMap[propName];
          if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== void 0) {
            warn("".concat(componentName, " property '").concat(propName, "' is mutually exclusive with '").concat(exclusiveMap[propName], "'. ") + "Use one or the other.");
          }
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnDeprecations.js
  function warnDeprecations(componentName, props, deprecationMap) {
    if (true) {
      for (var propName in deprecationMap) {
        if (props && propName in props) {
          var deprecationMessage = "".concat(componentName, " property '").concat(propName, "' was used but has been deprecated.");
          var replacementPropName = deprecationMap[propName];
          if (replacementPropName) {
            deprecationMessage += " Use '".concat(replacementPropName, "' instead.");
          }
          warn(deprecationMessage);
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/BaseComponent.js
  var BaseComponent = (
    /** @class */
    function(_super) {
      __extends(BaseComponent2, _super);
      function BaseComponent2(props, context) {
        var _this = _super.call(this, props, context) || this;
        _makeAllSafe(_this, BaseComponent2.prototype, [
          "componentDidMount",
          "shouldComponentUpdate",
          "getSnapshotBeforeUpdate",
          "render",
          "componentDidUpdate",
          "componentWillUnmount"
        ]);
        return _this;
      }
      BaseComponent2.prototype.componentDidUpdate = function(prevProps, prevState) {
        this._updateComponentRef(prevProps, this.props);
      };
      BaseComponent2.prototype.componentDidMount = function() {
        this._setComponentRef(this.props.componentRef, this);
      };
      BaseComponent2.prototype.componentWillUnmount = function() {
        this._setComponentRef(this.props.componentRef, null);
        if (this.__disposables) {
          for (var i2 = 0, len = this._disposables.length; i2 < len; i2++) {
            var disposable = this.__disposables[i2];
            if (disposable.dispose) {
              disposable.dispose();
            }
          }
          this.__disposables = null;
        }
      };
      Object.defineProperty(BaseComponent2.prototype, "className", {
        /**
         * Gets the object's class name.
         */
        get: function() {
          if (!this.__className) {
            var funcNameRegex = /function (.{1,})\(/;
            var results = funcNameRegex.exec(this.constructor.toString());
            this.__className = results && results.length > 1 ? results[1] : "";
          }
          return this.__className;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseComponent2.prototype, "_disposables", {
        /**
         * Allows subclasses to push things to this._disposables to be auto disposed.
         */
        get: function() {
          if (!this.__disposables) {
            this.__disposables = [];
          }
          return this.__disposables;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseComponent2.prototype, "_async", {
        /**
         * Gets the async instance associated with the component, created on demand. The async instance gives
         * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks
         * will be cleared/ignored automatically after unmounting. The helpers within the async object also
         * preserve the this pointer so that you don't need to "bind" the callbacks.
         */
        get: function() {
          if (!this.__async) {
            this.__async = new Async(this);
            this._disposables.push(this.__async);
          }
          return this.__async;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseComponent2.prototype, "_events", {
        /**
         * Gets the event group instance assocaited with the component, created on demand. The event instance
         * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks
         * will be automatically disconnected after unmounting. The helpers within the events object also
         * preserve the this reference so that you don't need to "bind" the callbacks.
         */
        get: function() {
          if (!this.__events) {
            this.__events = new EventGroup(this);
            this._disposables.push(this.__events);
          }
          return this.__events;
        },
        enumerable: false,
        configurable: true
      });
      BaseComponent2.prototype._resolveRef = function(refName) {
        var _this = this;
        if (!this.__resolves) {
          this.__resolves = {};
        }
        if (!this.__resolves[refName]) {
          this.__resolves[refName] = function(ref) {
            return _this[refName] = ref;
          };
        }
        return this.__resolves[refName];
      };
      BaseComponent2.prototype._updateComponentRef = function(currentProps, newProps) {
        if (newProps === void 0) {
          newProps = {};
        }
        if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {
          this._setComponentRef(currentProps.componentRef, null);
          this._setComponentRef(newProps.componentRef, this);
        }
      };
      BaseComponent2.prototype._warnDeprecations = function(deprecationMap) {
        warnDeprecations(this.className, this.props, deprecationMap);
      };
      BaseComponent2.prototype._warnMutuallyExclusive = function(mutuallyExclusiveMap) {
        warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);
      };
      BaseComponent2.prototype._warnConditionallyRequiredProps = function(requiredProps, conditionalPropName, condition) {
        warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);
      };
      BaseComponent2.prototype._setComponentRef = function(ref, value) {
        if (!this._skipComponentRefResolution && ref) {
          if (typeof ref === "function") {
            ref(value);
          }
          if (typeof ref === "object") {
            ref.current = value;
          }
        }
      };
      return BaseComponent2;
    }(React.Component)
  );
  function _makeAllSafe(obj, prototype, methodNames) {
    for (var i2 = 0, len = methodNames.length; i2 < len; i2++) {
      _makeSafe(obj, prototype, methodNames[i2]);
    }
  }
  function _makeSafe(obj, prototype, methodName) {
    var classMethod = obj[methodName];
    var prototypeMethod = prototype[methodName];
    if (classMethod || prototypeMethod) {
      obj[methodName] = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var retVal2;
        if (prototypeMethod) {
          retVal2 = prototypeMethod.apply(this, args);
        }
        if (classMethod !== prototypeMethod) {
          retVal2 = classMethod.apply(this, args);
        }
        return retVal2;
      };
    }
  }
  function nullRender() {
    return null;
  }

  // ../node_modules/@fluentui/utilities/lib/DelayedRender.js
  var React2 = __toESM(require_react());
  var DelayedRender = (
    /** @class */
    function(_super) {
      __extends(DelayedRender2, _super);
      function DelayedRender2(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
          isRendered: getWindow() === void 0
        };
        return _this;
      }
      DelayedRender2.prototype.componentDidMount = function() {
        var _this = this;
        var delay = this.props.delay;
        this._timeoutId = window.setTimeout(function() {
          _this.setState({
            isRendered: true
          });
        }, delay);
      };
      DelayedRender2.prototype.componentWillUnmount = function() {
        if (this._timeoutId) {
          clearTimeout(this._timeoutId);
        }
      };
      DelayedRender2.prototype.render = function() {
        return this.state.isRendered ? React2.Children.only(this.props.children) : null;
      };
      DelayedRender2.defaultProps = {
        delay: 0
      };
      return DelayedRender2;
    }(React2.Component)
  );

  // ../node_modules/@fluentui/utilities/lib/GlobalSettings.js
  var GLOBAL_SETTINGS_PROP_NAME = "__globalSettings__";
  var CALLBACK_STATE_PROP_NAME = "__callbacks__";
  var _counter = 0;
  var GlobalSettings = (
    /** @class */
    function() {
      function GlobalSettings2() {
      }
      GlobalSettings2.getValue = function(key, defaultValue) {
        var globalSettings = _getGlobalSettings();
        if (globalSettings[key] === void 0) {
          globalSettings[key] = typeof defaultValue === "function" ? defaultValue() : defaultValue;
        }
        return globalSettings[key];
      };
      GlobalSettings2.setValue = function(key, value) {
        var globalSettings = _getGlobalSettings();
        var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];
        var oldValue = globalSettings[key];
        if (value !== oldValue) {
          globalSettings[key] = value;
          var changeDescription = {
            oldValue,
            value,
            key
          };
          for (var id in callbacks) {
            if (callbacks.hasOwnProperty(id)) {
              callbacks[id](changeDescription);
            }
          }
        }
        return value;
      };
      GlobalSettings2.addChangeListener = function(cb) {
        var id = cb.__id__;
        var callbacks = _getCallbacks();
        if (!id) {
          id = cb.__id__ = String(_counter++);
        }
        callbacks[id] = cb;
      };
      GlobalSettings2.removeChangeListener = function(cb) {
        var callbacks = _getCallbacks();
        delete callbacks[cb.__id__];
      };
      return GlobalSettings2;
    }()
  );
  function _getGlobalSettings() {
    var _a7;
    var win2 = getWindow();
    var globalObj = win2 || {};
    if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {
      globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a7 = {}, _a7[CALLBACK_STATE_PROP_NAME] = {}, _a7);
    }
    return globalObj[GLOBAL_SETTINGS_PROP_NAME];
  }
  function _getCallbacks() {
    var globalSettings = _getGlobalSettings();
    return globalSettings[CALLBACK_STATE_PROP_NAME];
  }

  // ../node_modules/@fluentui/utilities/lib/KeyCodes.js
  var KeyCodes = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    ctrl: 17,
    alt: 18,
    pauseBreak: 19,
    capslock: 20,
    escape: 27,
    space: 32,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    insert: 45,
    del: 46,
    zero: 48,
    one: 49,
    two: 50,
    three: 51,
    four: 52,
    five: 53,
    six: 54,
    seven: 55,
    eight: 56,
    nine: 57,
    colon: 58,
    a: 65,
    b: 66,
    c: 67,
    d: 68,
    e: 69,
    f: 70,
    g: 71,
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    m: 77,
    n: 78,
    o: 79,
    p: 80,
    q: 81,
    r: 82,
    s: 83,
    t: 84,
    u: 85,
    v: 86,
    w: 87,
    x: 88,
    y: 89,
    z: 90,
    leftWindow: 91,
    rightWindow: 92,
    select: 93,
    /* eslint-disable @typescript-eslint/naming-convention */
    zero_numpad: 96,
    one_numpad: 97,
    two_numpad: 98,
    three_numpad: 99,
    four_numpad: 100,
    five_numpad: 101,
    six_numpad: 102,
    seven_numpad: 103,
    eight_numpad: 104,
    nine_numpad: 105,
    /* eslint-enable @typescript-eslint/naming-convention */
    multiply: 106,
    add: 107,
    subtract: 109,
    decimalPoint: 110,
    divide: 111,
    f1: 112,
    f2: 113,
    f3: 114,
    f4: 115,
    f5: 116,
    f6: 117,
    f7: 118,
    f8: 119,
    f9: 120,
    f10: 121,
    f11: 122,
    f12: 123,
    numlock: 144,
    scrollLock: 145,
    semicolon: 186,
    equalSign: 187,
    comma: 188,
    dash: 189,
    period: 190,
    forwardSlash: 191,
    graveAccent: 192,
    openBracket: 219,
    backSlash: 220,
    closeBracket: 221,
    singleQuote: 222
  };

  // ../node_modules/@fluentui/utilities/lib/Rectangle.js
  var Rectangle = (
    /** @class */
    function() {
      function Rectangle2(left, right, top, bottom) {
        if (left === void 0) {
          left = 0;
        }
        if (right === void 0) {
          right = 0;
        }
        if (top === void 0) {
          top = 0;
        }
        if (bottom === void 0) {
          bottom = 0;
        }
        this.top = top;
        this.bottom = bottom;
        this.left = left;
        this.right = right;
      }
      Object.defineProperty(Rectangle2.prototype, "width", {
        /**
         * Calculated automatically by subtracting the right from left
         */
        get: function() {
          return this.right - this.left;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Rectangle2.prototype, "height", {
        /**
         * Calculated automatically by subtracting the bottom from top.
         */
        get: function() {
          return this.bottom - this.top;
        },
        enumerable: false,
        configurable: true
      });
      Rectangle2.prototype.equals = function(rect) {
        return parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) && parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) && parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) && parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4));
      };
      return Rectangle2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/appendFunction.js
  function appendFunction(parent) {
    var functions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      functions[_i - 1] = arguments[_i];
    }
    if (functions.length < 2) {
      return functions[0];
    }
    return function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      functions.forEach(function(f3) {
        return f3 && f3.apply(parent, args);
      });
    };
  }

  // ../node_modules/@fluentui/utilities/lib/aria.js
  function mergeAriaAttributeValues() {
    var ariaAttributes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      ariaAttributes[_i] = arguments[_i];
    }
    var mergedAttribute = ariaAttributes.filter(function(arg) {
      return arg;
    }).join(" ").trim();
    return mergedAttribute === "" ? void 0 : mergedAttribute;
  }

  // ../node_modules/@fluentui/utilities/lib/array.js
  function findIndex(array, cb, fromIndex) {
    if (fromIndex === void 0) {
      fromIndex = 0;
    }
    var index = -1;
    for (var i2 = fromIndex; array && i2 < array.length; i2++) {
      if (cb(array[i2], i2)) {
        index = i2;
        break;
      }
    }
    return index;
  }
  function addElementAtIndex(array, index, itemToAdd) {
    var copy = array.slice();
    copy.splice(index, 0, itemToAdd);
    return copy;
  }
  function arraysEqual(array1, array2) {
    if (array1.length !== array2.length) {
      return false;
    }
    for (var i2 = 0; i2 < array1.length; i2++) {
      if (array1[i2] !== array2[i2]) {
        return false;
      }
    }
    return true;
  }

  // ../node_modules/@fluentui/utilities/lib/sessionStorage.js
  function getItem(key) {
    var result = null;
    try {
      var win2 = getWindow();
      result = win2 ? win2.sessionStorage.getItem(key) : null;
    } catch (e2) {
    }
    return result;
  }
  function setItem(key, data) {
    var _a7;
    try {
      (_a7 = getWindow()) === null || _a7 === void 0 ? void 0 : _a7.sessionStorage.setItem(key, data);
    } catch (e2) {
    }
  }

  // ../node_modules/@fluentui/utilities/lib/rtl.js
  var RTL_LOCAL_STORAGE_KEY = "isRTL";
  var _isRTL;
  function getRTL2(theme) {
    if (theme === void 0) {
      theme = {};
    }
    if (theme.rtl !== void 0) {
      return theme.rtl;
    }
    if (_isRTL === void 0) {
      var savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);
      if (savedRTL !== null) {
        _isRTL = savedRTL === "1";
        setRTL2(_isRTL);
      }
      var doc = getDocument();
      if (_isRTL === void 0 && doc) {
        _isRTL = (doc.body && doc.body.getAttribute("dir") || doc.documentElement.getAttribute("dir")) === "rtl";
        setRTL(_isRTL);
      }
    }
    return !!_isRTL;
  }
  function setRTL2(isRTL, persistSetting) {
    if (persistSetting === void 0) {
      persistSetting = false;
    }
    var doc = getDocument();
    if (doc) {
      doc.documentElement.setAttribute("dir", isRTL ? "rtl" : "ltr");
    }
    if (persistSetting) {
      setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? "1" : "0");
    }
    _isRTL = isRTL;
    setRTL(_isRTL);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/isVirtualElement.js
  function isVirtualElement(element) {
    return element && !!element._virtual;
  }

  // ../node_modules/@fluentui/dom-utilities/lib/getVirtualParent.js
  function getVirtualParent(child) {
    var parent;
    if (child && isVirtualElement(child)) {
      parent = child._virtual.parent;
    }
    return parent;
  }

  // ../node_modules/@fluentui/dom-utilities/lib/getParent.js
  function getParent(child, allowVirtualParents) {
    if (allowVirtualParents === void 0) {
      allowVirtualParents = true;
    }
    return child && (allowVirtualParents && getVirtualParent(child) || child.parentNode && child.parentNode);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/elementContains.js
  function elementContains(parent, child, allowVirtualParents) {
    if (allowVirtualParents === void 0) {
      allowVirtualParents = true;
    }
    var isContained = false;
    if (parent && child) {
      if (allowVirtualParents) {
        if (parent === child) {
          isContained = true;
        } else {
          isContained = false;
          while (child) {
            var nextParent = getParent(child);
            if (nextParent === parent) {
              isContained = true;
              break;
            }
            child = nextParent;
          }
        }
      } else if (parent.contains) {
        isContained = parent.contains(child);
      }
    }
    return isContained;
  }

  // ../node_modules/@fluentui/dom-utilities/lib/findElementRecursive.js
  function findElementRecursive(element, matchFunction) {
    if (!element || element === document.body) {
      return null;
    }
    return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/elementContainsAttribute.js
  function elementContainsAttribute(element, attribute) {
    var elementMatch = findElementRecursive(element, function(testElement) {
      return testElement.hasAttribute(attribute);
    });
    return elementMatch && elementMatch.getAttribute(attribute);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/setPortalAttribute.js
  var DATA_PORTAL_ATTRIBUTE = "data-portal-element";
  function setPortalAttribute(element) {
    element.setAttribute(DATA_PORTAL_ATTRIBUTE, "true");
  }

  // ../node_modules/@fluentui/dom-utilities/lib/portalContainsElement.js
  function portalContainsElement(target, parent) {
    var elementMatch = findElementRecursive(target, function(testElement) {
      return parent === testElement || testElement.hasAttribute(DATA_PORTAL_ATTRIBUTE);
    });
    return elementMatch !== null && elementMatch.hasAttribute(DATA_PORTAL_ATTRIBUTE);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/setVirtualParent.js
  function setVirtualParent(child, parent) {
    var virtualChild = child;
    var virtualParent = parent;
    if (!virtualChild._virtual) {
      virtualChild._virtual = {
        children: []
      };
    }
    var oldParent = virtualChild._virtual.parent;
    if (oldParent && oldParent !== parent) {
      var index = oldParent._virtual.children.indexOf(virtualChild);
      if (index > -1) {
        oldParent._virtual.children.splice(index, 1);
      }
    }
    virtualChild._virtual.parent = virtualParent || void 0;
    if (virtualParent) {
      if (!virtualParent._virtual) {
        virtualParent._virtual = {
          children: []
        };
      }
      virtualParent._virtual.children.push(virtualChild);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/focus.js
  var IS_FOCUSABLE_ATTRIBUTE = "data-is-focusable";
  var IS_VISIBLE_ATTRIBUTE = "data-is-visible";
  var FOCUSZONE_ID_ATTRIBUTE = "data-focuszone-id";
  var FOCUSZONE_SUB_ATTRIBUTE = "data-is-sub-focuszone";
  function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getNextElement(rootElement, currentElement, true, false, false, includeElementsInFocusZones);
  }
  function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getPreviousElement(rootElement, currentElement, true, false, true, includeElementsInFocusZones);
  }
  function getFirstTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {
    if (checkNode === void 0) {
      checkNode = true;
    }
    return getNextElement(
      rootElement,
      currentElement,
      checkNode,
      false,
      false,
      includeElementsInFocusZones,
      false,
      true
      /*tabbable*/
    );
  }
  function getLastTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {
    if (checkNode === void 0) {
      checkNode = true;
    }
    return getPreviousElement(
      rootElement,
      currentElement,
      checkNode,
      false,
      true,
      includeElementsInFocusZones,
      false,
      true
      /*tabbable*/
    );
  }
  function focusFirstChild(rootElement, bypassHiddenElements) {
    var element = getNextElement(rootElement, rootElement, true, false, false, true, void 0, void 0, bypassHiddenElements);
    if (element) {
      focusAsync(element);
      return true;
    }
    return false;
  }
  function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {
    if (!currentElement || !allowFocusRoot && currentElement === rootElement) {
      return null;
    }
    var isCurrentElementVisible = isElementVisible(currentElement);
    if (traverseChildren && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
      var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
      if (childMatch) {
        if (tabbable && isElementTabbable(childMatch, true) || !tabbable) {
          return childMatch;
        }
        var childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
        if (childMatchSiblingMatch) {
          return childMatchSiblingMatch;
        }
        var childMatchParent = childMatch.parentElement;
        while (childMatchParent && childMatchParent !== currentElement) {
          var childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
          if (childMatchParentMatch) {
            return childMatchParentMatch;
          }
          childMatchParent = childMatchParent.parentElement;
        }
      }
    }
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
      return currentElement;
    }
    var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
    if (siblingMatch) {
      return siblingMatch;
    }
    if (!suppressParentTraversal) {
      return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
    }
    return null;
  }
  function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements) {
    if (!currentElement || currentElement === rootElement && suppressChildTraversal && !allowFocusRoot) {
      return null;
    }
    var checkElementVisibility = bypassHiddenElements ? isElementVisibleAndNotHidden : isElementVisible;
    var isCurrentElementVisible = checkElementVisibility(currentElement);
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
      return currentElement;
    }
    if (!suppressChildTraversal && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
      var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
      if (childMatch) {
        return childMatch;
      }
    }
    if (currentElement === rootElement) {
      return null;
    }
    var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
    if (siblingMatch) {
      return siblingMatch;
    }
    if (!suppressParentTraversal) {
      return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
    }
    return null;
  }
  function isElementVisible(element) {
    if (!element || !element.getAttribute) {
      return false;
    }
    var visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE);
    if (visibilityAttribute !== null && visibilityAttribute !== void 0) {
      return visibilityAttribute === "true";
    }
    return element.offsetHeight !== 0 || element.offsetParent !== null || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    element.isVisible === true;
  }
  function isElementVisibleAndNotHidden(element) {
    return !!element && isElementVisible(element) && !element.hidden && window.getComputedStyle(element).visibility !== "hidden";
  }
  function isElementTabbable(element, checkTabIndex) {
    if (!element || element.disabled) {
      return false;
    }
    var tabIndex = 0;
    var tabIndexAttributeValue = null;
    if (element && element.getAttribute) {
      tabIndexAttributeValue = element.getAttribute("tabIndex");
      if (tabIndexAttributeValue) {
        tabIndex = parseInt(tabIndexAttributeValue, 10);
      }
    }
    var isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;
    var isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;
    var result = !!element && isFocusableAttribute !== "false" && (element.tagName === "A" || element.tagName === "BUTTON" || element.tagName === "INPUT" || element.tagName === "TEXTAREA" || element.tagName === "SELECT" || isFocusableAttribute === "true" || isTabIndexSet);
    return checkTabIndex ? tabIndex !== -1 && result : result;
  }
  function isElementFocusZone(element) {
    return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE));
  }
  function isElementFocusSubZone(element) {
    return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === "true");
  }
  function doesElementContainFocus(element) {
    var document2 = getDocument(element);
    var currentActiveElement = document2 && document2.activeElement;
    if (currentActiveElement && elementContains(element, currentActiveElement)) {
      return true;
    }
    return false;
  }
  function shouldWrapFocus(element, noWrapDataAttribute) {
    return elementContainsAttribute(element, noWrapDataAttribute) === "true" ? false : true;
  }
  var targetToFocusOnNextRepaint = void 0;
  function focusAsync(element) {
    if (element) {
      if (targetToFocusOnNextRepaint) {
        targetToFocusOnNextRepaint = element;
        return;
      }
      targetToFocusOnNextRepaint = element;
      var win2 = getWindow(element);
      if (win2) {
        win2.requestAnimationFrame(function() {
          targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();
          targetToFocusOnNextRepaint = void 0;
        });
      }
    }
  }
  function getFocusableByIndexPath(parent, path) {
    var element = parent;
    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
      var index = path_1[_i];
      var nextChild = element.children[Math.min(index, element.children.length - 1)];
      if (!nextChild) {
        break;
      }
      element = nextChild;
    }
    element = isElementTabbable(element) && isElementVisible(element) ? element : getNextElement(parent, element, true) || getPreviousElement(parent, element);
    return element;
  }
  function getElementIndexPath(fromElement, toElement) {
    var path = [];
    while (toElement && fromElement && toElement !== fromElement) {
      var parent_1 = getParent(toElement, true);
      if (parent_1 === null) {
        return [];
      }
      path.unshift(Array.prototype.indexOf.call(parent_1.children, toElement));
      toElement = parent_1;
    }
    return path;
  }

  // ../node_modules/@fluentui/utilities/lib/dom/on.js
  function on(element, eventName, callback, options) {
    element.addEventListener(eventName, callback, options);
    return function() {
      return element.removeEventListener(eventName, callback, options);
    };
  }

  // ../node_modules/@fluentui/utilities/lib/classNamesFunction.js
  var MAX_CACHE_COUNT = 50;
  var DEFAULT_SPECIFICITY_MULTIPLIER = 5;
  var _memoizedClassNames = 0;
  var stylesheet = Stylesheet.getInstance();
  if (stylesheet && stylesheet.onReset) {
    stylesheet.onReset(function() {
      return _memoizedClassNames++;
    });
  }
  var retVal = "__retval__";
  function classNamesFunction(options) {
    if (options === void 0) {
      options = {};
    }
    var map = /* @__PURE__ */ new Map();
    var styleCalcCount = 0;
    var getClassNamesCount = 0;
    var currentMemoizedClassNames = _memoizedClassNames;
    var getClassNames14 = function(styleFunctionOrObject, styleProps) {
      var _a7;
      if (styleProps === void 0) {
        styleProps = {};
      }
      if (options.useStaticStyles && typeof styleFunctionOrObject === "function" && styleFunctionOrObject.__noStyleOverride__) {
        return styleFunctionOrObject(styleProps);
      }
      getClassNamesCount++;
      var current = map;
      var theme = styleProps.theme;
      var rtl = theme && theme.rtl !== void 0 ? theme.rtl : getRTL2();
      var disableCaching = options.disableCaching;
      if (currentMemoizedClassNames !== _memoizedClassNames) {
        currentMemoizedClassNames = _memoizedClassNames;
        map = /* @__PURE__ */ new Map();
        styleCalcCount = 0;
      }
      if (!options.disableCaching) {
        current = _traverseMap(map, styleFunctionOrObject);
        current = _traverseMap(current, styleProps);
      }
      if (disableCaching || !current[retVal]) {
        if (styleFunctionOrObject === void 0) {
          current[retVal] = {};
        } else {
          current[retVal] = mergeCssSets([
            typeof styleFunctionOrObject === "function" ? styleFunctionOrObject(styleProps) : styleFunctionOrObject
          ], { rtl: !!rtl, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : void 0 });
        }
        if (!disableCaching) {
          styleCalcCount++;
        }
      }
      if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {
        var win2 = getWindow();
        if ((_a7 = win2 === null || win2 === void 0 ? void 0 : win2.FabricConfig) === null || _a7 === void 0 ? void 0 : _a7.enableClassNameCacheFullWarning) {
          console.warn("Styles are being recalculated too frequently. Cache miss rate is ".concat(styleCalcCount, "/").concat(getClassNamesCount, "."));
          console.trace();
        }
        map.clear();
        styleCalcCount = 0;
        options.disableCaching = true;
      }
      return current[retVal];
    };
    return getClassNames14;
  }
  function _traverseEdge(current, value) {
    value = _normalizeValue(value);
    if (!current.has(value)) {
      current.set(value, /* @__PURE__ */ new Map());
    }
    return current.get(value);
  }
  function _traverseMap(current, inputs) {
    if (typeof inputs === "function") {
      var cachedInputsFromStyled = inputs.__cachedInputs__;
      if (cachedInputsFromStyled) {
        for (var _i = 0, _a7 = inputs.__cachedInputs__; _i < _a7.length; _i++) {
          var input = _a7[_i];
          current = _traverseEdge(current, input);
        }
      } else {
        current = _traverseEdge(current, inputs);
      }
    } else if (typeof inputs === "object") {
      for (var propName in inputs) {
        if (inputs.hasOwnProperty(propName)) {
          current = _traverseEdge(current, inputs[propName]);
        }
      }
    }
    return current;
  }
  function _normalizeValue(value) {
    switch (value) {
      case void 0:
        return "__undefined__";
      case null:
        return "__null__";
      default:
        return value;
    }
  }

  // ../node_modules/@fluentui/utilities/lib/componentAs/composeComponentAs.js
  var React3 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/memoize.js
  var _initializedStylesheetResets = false;
  var _resetCounter = 0;
  var _emptyObject = { empty: true };
  var _dictionary = {};
  var _weakMap = typeof WeakMap === "undefined" ? null : WeakMap;
  function resetMemoizations() {
    _resetCounter++;
  }
  function memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {
    if (maxCacheSize === void 0) {
      maxCacheSize = 100;
    }
    if (ignoreNullOrUndefinedResult === void 0) {
      ignoreNullOrUndefinedResult = false;
    }
    if (!_weakMap) {
      return cb;
    }
    if (!_initializedStylesheetResets) {
      var stylesheet3 = Stylesheet.getInstance();
      if (stylesheet3 && stylesheet3.onReset) {
        Stylesheet.getInstance().onReset(resetMemoizations);
      }
      _initializedStylesheetResets = true;
    }
    var rootNode;
    var cacheSize = 0;
    var localResetCounter = _resetCounter;
    return function memoizedFunction() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var currentNode = rootNode;
      if (rootNode === void 0 || localResetCounter !== _resetCounter || maxCacheSize > 0 && cacheSize > maxCacheSize) {
        rootNode = _createNode();
        cacheSize = 0;
        localResetCounter = _resetCounter;
      }
      currentNode = rootNode;
      for (var i2 = 0; i2 < args.length; i2++) {
        var arg = _normalizeArg(args[i2]);
        if (!currentNode.map.has(arg)) {
          currentNode.map.set(arg, _createNode());
        }
        currentNode = currentNode.map.get(arg);
      }
      if (!currentNode.hasOwnProperty("value")) {
        currentNode.value = cb.apply(void 0, args);
        cacheSize++;
      }
      if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === void 0)) {
        currentNode.value = cb.apply(void 0, args);
      }
      return currentNode.value;
    };
  }
  function createMemoizer(getValue) {
    if (!_weakMap) {
      return getValue;
    }
    var cache = new _weakMap();
    function memoizedGetValue(input) {
      if (!input || typeof input !== "function" && typeof input !== "object") {
        return getValue(input);
      }
      if (cache.has(input)) {
        return cache.get(input);
      }
      var value = getValue(input);
      cache.set(input, value);
      return value;
    }
    return memoizedGetValue;
  }
  function _normalizeArg(val) {
    if (!val) {
      return _emptyObject;
    } else if (typeof val === "object" || typeof val === "function") {
      return val;
    } else if (!_dictionary[val]) {
      _dictionary[val] = { val };
    }
    return _dictionary[val];
  }
  function _createNode() {
    return {
      map: _weakMap ? new _weakMap() : null
    };
  }

  // ../node_modules/@fluentui/utilities/lib/componentAs/composeComponentAs.js
  function createComposedComponent(outer) {
    var Outer = outer;
    var outerMemoizer = createMemoizer(function(inner) {
      if (outer === inner) {
        throw new Error("Attempted to compose a component with itself.");
      }
      var Inner = inner;
      var innerMemoizer = createMemoizer(function(defaultRender) {
        var InnerWithDefaultRender = function(innerProps) {
          return React3.createElement(Inner, __assign({}, innerProps, { defaultRender }));
        };
        return InnerWithDefaultRender;
      });
      var OuterWithDefaultRender = function(outerProps) {
        var defaultRender = outerProps.defaultRender;
        return React3.createElement(Outer, __assign({}, outerProps, { defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner }));
      };
      return OuterWithDefaultRender;
    });
    return outerMemoizer;
  }
  var componentAsMemoizer = createMemoizer(createComposedComponent);
  function composeComponentAs(outer, inner) {
    return componentAsMemoizer(outer)(inner);
  }

  // ../node_modules/@fluentui/utilities/lib/controlled.js
  function isControlled(props, valueProp) {
    return props[valueProp] !== void 0 && props[valueProp] !== null;
  }

  // ../node_modules/@fluentui/utilities/lib/css.js
  function css() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var classes = [];
    for (var _a7 = 0, args_1 = args; _a7 < args_1.length; _a7++) {
      var arg = args_1[_a7];
      if (arg) {
        if (typeof arg === "string") {
          classes.push(arg);
        } else if (arg.hasOwnProperty("toString") && typeof arg.toString === "function") {
          classes.push(arg.toString());
        } else {
          for (var key in arg) {
            if (arg[key]) {
              classes.push(key);
            }
          }
        }
      }
    }
    return classes.join(" ");
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/Customizations.js
  var CustomizationsGlobalKey = "customizations";
  var NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };
  var _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {
    settings: {},
    scopedSettings: {},
    inCustomizerContext: false
  });
  var _events = [];
  var Customizations = (
    /** @class */
    function() {
      function Customizations2() {
      }
      Customizations2.reset = function() {
        _allSettings.settings = {};
        _allSettings.scopedSettings = {};
      };
      Customizations2.applySettings = function(settings) {
        _allSettings.settings = __assign(__assign({}, _allSettings.settings), settings);
        Customizations2._raiseChange();
      };
      Customizations2.applyScopedSettings = function(scopeName, settings) {
        _allSettings.scopedSettings[scopeName] = __assign(__assign({}, _allSettings.scopedSettings[scopeName]), settings);
        Customizations2._raiseChange();
      };
      Customizations2.getSettings = function(properties, scopeName, localSettings) {
        if (localSettings === void 0) {
          localSettings = NO_CUSTOMIZATIONS;
        }
        var settings = {};
        var localScopedSettings = scopeName && localSettings.scopedSettings[scopeName] || {};
        var globalScopedSettings = scopeName && _allSettings.scopedSettings[scopeName] || {};
        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
          var property = properties_1[_i];
          settings[property] = localScopedSettings[property] || localSettings.settings[property] || globalScopedSettings[property] || _allSettings.settings[property];
        }
        return settings;
      };
      Customizations2.applyBatchedUpdates = function(code, suppressUpdate) {
        Customizations2._suppressUpdates = true;
        try {
          code();
        } catch (_a7) {
        }
        Customizations2._suppressUpdates = false;
        if (!suppressUpdate) {
          Customizations2._raiseChange();
        }
      };
      Customizations2.observe = function(onChange) {
        _events.push(onChange);
      };
      Customizations2.unobserve = function(onChange) {
        _events = _events.filter(function(cb) {
          return cb !== onChange;
        });
      };
      Customizations2._raiseChange = function() {
        if (!Customizations2._suppressUpdates) {
          _events.forEach(function(cb) {
            return cb();
          });
        }
      };
      return Customizations2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/customizations/Customizer.js
  var React5 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/customizations/CustomizerContext.js
  var React4 = __toESM(require_react());
  var CustomizerContext = React4.createContext({
    customizations: {
      inCustomizerContext: false,
      settings: {},
      scopedSettings: {}
    }
  });

  // ../node_modules/@fluentui/utilities/lib/customizations/mergeSettings.js
  function mergeSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) {
      oldSettings = {};
    }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
  }
  function mergeScopedSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) {
      oldSettings = {};
    }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
  }
  function _isSettingsFunction(settings) {
    return typeof settings === "function";
  }
  function _settingsMergeWith(newSettings) {
    return function(settings) {
      return newSettings ? __assign(__assign({}, settings), newSettings) : settings;
    };
  }
  function _scopedSettingsMergeWith(scopedSettingsFromProps) {
    if (scopedSettingsFromProps === void 0) {
      scopedSettingsFromProps = {};
    }
    return function(oldScopedSettings) {
      var newScopedSettings = __assign({}, oldScopedSettings);
      for (var scopeName in scopedSettingsFromProps) {
        if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {
          newScopedSettings[scopeName] = __assign(__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);
        }
      }
      return newScopedSettings;
    };
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/mergeCustomizations.js
  function mergeCustomizations(props, parentContext) {
    var _a7 = (parentContext || {}).customizations, customizations = _a7 === void 0 ? { settings: {}, scopedSettings: {} } : _a7;
    return {
      customizations: {
        settings: mergeSettings(customizations.settings, props.settings),
        scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),
        inCustomizerContext: true
      }
    };
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/Customizer.js
  var Customizer = (
    /** @class */
    function(_super) {
      __extends(Customizer2, _super);
      function Customizer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._onCustomizationChange = function() {
          return _this.forceUpdate();
        };
        return _this;
      }
      Customizer2.prototype.componentDidMount = function() {
        Customizations.observe(this._onCustomizationChange);
      };
      Customizer2.prototype.componentWillUnmount = function() {
        Customizations.unobserve(this._onCustomizationChange);
      };
      Customizer2.prototype.render = function() {
        var _this = this;
        var contextTransform = this.props.contextTransform;
        return React5.createElement(CustomizerContext.Consumer, null, function(parentContext) {
          var newContext = mergeCustomizations(_this.props, parentContext);
          if (contextTransform) {
            newContext = contextTransform(newContext);
          }
          return React5.createElement(CustomizerContext.Provider, { value: newContext }, _this.props.children);
        });
      };
      return Customizer2;
    }(React5.Component)
  );

  // ../node_modules/@fluentui/utilities/lib/customizations/customizable.js
  var React6 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/hoistStatics.js
  function hoistStatics(source, dest) {
    for (var name_1 in source) {
      if (source.hasOwnProperty(name_1)) {
        dest[name_1] = source[name_1];
      }
    }
    return dest;
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/customizable.js
  function customizable(scope, fields, concatStyles) {
    return function customizableFactory(ComposedComponent) {
      var _a7;
      var resultClass = (_a7 = /** @class */
      function(_super) {
        __extends(ComponentWithInjectedProps, _super);
        function ComponentWithInjectedProps(props) {
          var _this = _super.call(this, props) || this;
          _this._styleCache = {};
          _this._onSettingChanged = _this._onSettingChanged.bind(_this);
          return _this;
        }
        ComponentWithInjectedProps.prototype.componentDidMount = function() {
          Customizations.observe(this._onSettingChanged);
        };
        ComponentWithInjectedProps.prototype.componentWillUnmount = function() {
          Customizations.unobserve(this._onSettingChanged);
        };
        ComponentWithInjectedProps.prototype.render = function() {
          var _this = this;
          return React6.createElement(CustomizerContext.Consumer, null, function(context) {
            var defaultProps = Customizations.getSettings(fields, scope, context.customizations);
            var componentProps = _this.props;
            if (defaultProps.styles && typeof defaultProps.styles === "function") {
              defaultProps.styles = defaultProps.styles(__assign(__assign({}, defaultProps), componentProps));
            }
            if (concatStyles && defaultProps.styles) {
              if (_this._styleCache.default !== defaultProps.styles || _this._styleCache.component !== componentProps.styles) {
                var mergedStyles = concatStyleSets(defaultProps.styles, componentProps.styles);
                _this._styleCache.default = defaultProps.styles;
                _this._styleCache.component = componentProps.styles;
                _this._styleCache.merged = mergedStyles;
              }
              return React6.createElement(ComposedComponent, __assign({}, defaultProps, componentProps, { styles: _this._styleCache.merged }));
            }
            return React6.createElement(ComposedComponent, __assign({}, defaultProps, componentProps));
          });
        };
        ComponentWithInjectedProps.prototype._onSettingChanged = function() {
          this.forceUpdate();
        };
        return ComponentWithInjectedProps;
      }(React6.Component), _a7.displayName = "Customized" + scope, _a7);
      return hoistStatics(ComposedComponent, resultClass);
    };
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/useCustomizationSettings.js
  var React7 = __toESM(require_react());
  function useCustomizationSettings(properties, scopeName) {
    var forceUpdate = useForceUpdate();
    var customizations = React7.useContext(CustomizerContext).customizations;
    var inCustomizerContext = customizations.inCustomizerContext;
    React7.useEffect(function() {
      if (!inCustomizerContext) {
        Customizations.observe(forceUpdate);
      }
      return function() {
        if (!inCustomizerContext) {
          Customizations.unobserve(forceUpdate);
        }
      };
    }, [inCustomizerContext]);
    return Customizations.getSettings(properties, scopeName, customizations);
  }
  function useForceUpdate() {
    var _a7 = React7.useState(0), setValue = _a7[1];
    return function() {
      return setValue(function(value) {
        return ++value;
      });
    };
  }

  // ../node_modules/@fluentui/utilities/lib/extendComponent.js
  function extendComponent(parent, methods) {
    for (var name_1 in methods) {
      if (methods.hasOwnProperty(name_1)) {
        parent[name_1] = appendFunction(parent, parent[name_1], methods[name_1]);
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/getId.js
  var CURRENT_ID_PROPERTY = "__currentId__";
  var DEFAULT_ID_STRING = "id__";
  var _global2 = getWindow() || {};
  if (_global2[CURRENT_ID_PROPERTY] === void 0) {
    _global2[CURRENT_ID_PROPERTY] = 0;
  }
  var _initializedStylesheetResets2 = false;
  function getId(prefix) {
    if (!_initializedStylesheetResets2) {
      var stylesheet3 = Stylesheet.getInstance();
      if (stylesheet3 && stylesheet3.onReset) {
        stylesheet3.onReset(resetIds);
      }
      _initializedStylesheetResets2 = true;
    }
    var index = _global2[CURRENT_ID_PROPERTY]++;
    return (prefix === void 0 ? DEFAULT_ID_STRING : prefix) + index;
  }
  function resetIds(counter) {
    if (counter === void 0) {
      counter = 0;
    }
    _global2[CURRENT_ID_PROPERTY] = counter;
  }

  // ../node_modules/@fluentui/utilities/lib/properties.js
  var toObjectMap = function() {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      items[_i] = arguments[_i];
    }
    var result = {};
    for (var _a7 = 0, items_1 = items; _a7 < items_1.length; _a7++) {
      var item = items_1[_a7];
      var keys = Array.isArray(item) ? item : Object.keys(item);
      for (var _b3 = 0, keys_1 = keys; _b3 < keys_1.length; _b3++) {
        var key = keys_1[_b3];
        result[key] = 1;
      }
    }
    return result;
  };
  var baseElementEvents = toObjectMap([
    "onCopy",
    "onCut",
    "onPaste",
    "onCompositionEnd",
    "onCompositionStart",
    "onCompositionUpdate",
    "onFocus",
    "onFocusCapture",
    "onBlur",
    "onBlurCapture",
    "onChange",
    "onInput",
    "onSubmit",
    "onLoad",
    "onError",
    "onKeyDown",
    "onKeyDownCapture",
    "onKeyPress",
    "onKeyUp",
    "onAbort",
    "onCanPlay",
    "onCanPlayThrough",
    "onDurationChange",
    "onEmptied",
    "onEncrypted",
    "onEnded",
    "onLoadedData",
    "onLoadedMetadata",
    "onLoadStart",
    "onPause",
    "onPlay",
    "onPlaying",
    "onProgress",
    "onRateChange",
    "onSeeked",
    "onSeeking",
    "onStalled",
    "onSuspend",
    "onTimeUpdate",
    "onVolumeChange",
    "onWaiting",
    "onClick",
    "onClickCapture",
    "onContextMenu",
    "onDoubleClick",
    "onDrag",
    "onDragEnd",
    "onDragEnter",
    "onDragExit",
    "onDragLeave",
    "onDragOver",
    "onDragStart",
    "onDrop",
    "onMouseDown",
    "onMouseDownCapture",
    "onMouseEnter",
    "onMouseLeave",
    "onMouseMove",
    "onMouseOut",
    "onMouseOver",
    "onMouseUp",
    "onMouseUpCapture",
    "onSelect",
    "onTouchCancel",
    "onTouchEnd",
    "onTouchMove",
    "onTouchStart",
    "onScroll",
    "onWheel",
    "onPointerCancel",
    "onPointerDown",
    "onPointerEnter",
    "onPointerLeave",
    "onPointerMove",
    "onPointerOut",
    "onPointerOver",
    "onPointerUp",
    "onGotPointerCapture",
    "onLostPointerCapture"
  ]);
  var baseElementProperties = toObjectMap([
    "accessKey",
    "children",
    "className",
    "contentEditable",
    "dir",
    "draggable",
    "hidden",
    "htmlFor",
    "id",
    "lang",
    "ref",
    "role",
    "style",
    "tabIndex",
    "title",
    "translate",
    "spellCheck",
    "name"
    // global
  ]);
  var htmlElementProperties = toObjectMap(baseElementProperties, baseElementEvents);
  var labelProperties = toObjectMap(htmlElementProperties, [
    "form"
    // button, fieldset, input, label, meter, object, output, select, textarea
  ]);
  var audioProperties = toObjectMap(htmlElementProperties, [
    "height",
    "loop",
    "muted",
    "preload",
    "src",
    "width"
    // canvas, embed, iframe, img, input, object, video
  ]);
  var videoProperties = toObjectMap(audioProperties, [
    "poster"
    // video
  ]);
  var olProperties = toObjectMap(htmlElementProperties, [
    "start"
    // ol
  ]);
  var liProperties = toObjectMap(htmlElementProperties, [
    "value"
    // button, input, li, option, meter, progress, param
  ]);
  var anchorProperties = toObjectMap(htmlElementProperties, [
    "download",
    "href",
    "hrefLang",
    "media",
    "rel",
    "target",
    "type"
    // a, button, input, link, menu, object, script, source, style
  ]);
  var buttonProperties = toObjectMap(htmlElementProperties, [
    "autoFocus",
    "disabled",
    "form",
    "formAction",
    "formEncType",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "type",
    "value"
    // button, input, li, option, meter, progress, param,
  ]);
  var inputProperties = toObjectMap(buttonProperties, [
    "accept",
    "alt",
    "autoCapitalize",
    "autoComplete",
    "checked",
    "dirname",
    "form",
    "height",
    "inputMode",
    "list",
    "max",
    "maxLength",
    "min",
    "minLength",
    "multiple",
    "pattern",
    "placeholder",
    "readOnly",
    "required",
    "src",
    "step",
    "size",
    "type",
    "value",
    "width"
    // canvas, embed, iframe, img, input, object, video
  ]);
  var textAreaProperties = toObjectMap(buttonProperties, [
    "autoCapitalize",
    "cols",
    "dirname",
    "form",
    "maxLength",
    "minLength",
    "placeholder",
    "readOnly",
    "required",
    "rows",
    "wrap"
    // textarea
  ]);
  var selectProperties = toObjectMap(buttonProperties, [
    "form",
    "multiple",
    "required"
    // input, select, textarea
  ]);
  var optionProperties = toObjectMap(htmlElementProperties, [
    "selected",
    "value"
    // button, input, li, option, meter, progress, param
  ]);
  var tableProperties = toObjectMap(htmlElementProperties, [
    "cellPadding",
    "cellSpacing"
    // table
  ]);
  var thProperties = toObjectMap(htmlElementProperties, [
    "rowSpan",
    "scope"
    // th
  ]);
  var tdProperties = toObjectMap(htmlElementProperties, [
    "colSpan",
    "headers",
    "rowSpan",
    "scope"
    // th
  ]);
  var colGroupProperties = toObjectMap(htmlElementProperties, [
    "span"
    // col, colgroup
  ]);
  var colProperties = toObjectMap(htmlElementProperties, [
    "span"
    // col, colgroup
  ]);
  var formProperties = toObjectMap(htmlElementProperties, [
    "acceptCharset",
    "action",
    "encType",
    "encType",
    "method",
    "noValidate",
    "target"
    // form
  ]);
  var iframeProperties = toObjectMap(htmlElementProperties, [
    "allow",
    "allowFullScreen",
    "allowPaymentRequest",
    "allowTransparency",
    "csp",
    "height",
    "importance",
    "referrerPolicy",
    "sandbox",
    "src",
    "srcDoc",
    "width"
    // canvas, embed, iframe, img, input, object, video,
  ]);
  var imgProperties = toObjectMap(htmlElementProperties, [
    "alt",
    "crossOrigin",
    "height",
    "src",
    "srcSet",
    "useMap",
    "width"
    // canvas, embed, iframe, img, input, object, video
  ]);
  var divProperties = htmlElementProperties;
  function getNativeProps(props, allowedPropNames, excludedPropNames) {
    var isArray = Array.isArray(allowedPropNames);
    var result = {};
    var keys = Object.keys(props);
    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
      var key = keys_2[_i];
      var isNativeProp = !isArray && allowedPropNames[key] || isArray && allowedPropNames.indexOf(key) >= 0 || key.indexOf("data-") === 0 || key.indexOf("aria-") === 0;
      if (isNativeProp && (!excludedPropNames || (excludedPropNames === null || excludedPropNames === void 0 ? void 0 : excludedPropNames.indexOf(key)) === -1)) {
        result[key] = props[key];
      }
    }
    return result;
  }

  // ../node_modules/@fluentui/utilities/lib/initializeComponentRef.js
  function initializeComponentRef(obj) {
    extendComponent(obj, {
      componentDidMount: _onMount,
      componentDidUpdate: _onUpdate,
      componentWillUnmount: _onUnmount
    });
  }
  function _onMount() {
    _setComponentRef(this.props.componentRef, this);
  }
  function _onUpdate(prevProps) {
    if (prevProps.componentRef !== this.props.componentRef) {
      _setComponentRef(prevProps.componentRef, null);
      _setComponentRef(this.props.componentRef, this);
    }
  }
  function _onUnmount() {
    _setComponentRef(this.props.componentRef, null);
  }
  function _setComponentRef(componentRef, value) {
    if (componentRef) {
      if (typeof componentRef === "object") {
        componentRef.current = value;
      } else if (typeof componentRef === "function") {
        componentRef(value);
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/keyboard.js
  var _a2;
  var DirectionalKeyCodes = (_a2 = {}, _a2[KeyCodes.up] = 1, _a2[KeyCodes.down] = 1, _a2[KeyCodes.left] = 1, _a2[KeyCodes.right] = 1, _a2[KeyCodes.home] = 1, _a2[KeyCodes.end] = 1, _a2[KeyCodes.tab] = 1, _a2[KeyCodes.pageUp] = 1, _a2[KeyCodes.pageDown] = 1, _a2);
  function isDirectionalKeyCode(which) {
    return !!DirectionalKeyCodes[which];
  }

  // ../node_modules/@fluentui/utilities/lib/setFocusVisibility.js
  var IsFocusVisibleClassName = "ms-Fabric--isFocusVisible";
  var IsFocusHiddenClassName = "ms-Fabric--isFocusHidden";
  function updateClassList(el, enabled) {
    if (el) {
      el.classList.add(enabled ? IsFocusVisibleClassName : IsFocusHiddenClassName);
      el.classList.remove(enabled ? IsFocusHiddenClassName : IsFocusVisibleClassName);
    }
  }
  function setFocusVisibility(enabled, target, registeredProviders) {
    var _a7;
    if (registeredProviders) {
      registeredProviders.forEach(function(ref) {
        return updateClassList(ref.current, enabled);
      });
    } else {
      updateClassList((_a7 = getWindow(target)) === null || _a7 === void 0 ? void 0 : _a7.document.body, enabled);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/FocusRectsProvider.js
  var React9 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/useFocusRects.js
  var React8 = __toESM(require_react());
  var mountCounters = /* @__PURE__ */ new WeakMap();
  var callbackMap = /* @__PURE__ */ new WeakMap();
  function setMountCounters(key, delta) {
    var newValue;
    var currValue = mountCounters.get(key);
    if (currValue) {
      newValue = currValue + delta;
    } else {
      newValue = 1;
    }
    mountCounters.set(key, newValue);
    return newValue;
  }
  function setCallbackMap(context) {
    var callbacks = callbackMap.get(context);
    if (callbacks) {
      return callbacks;
    }
    var onMouseDown = function(ev) {
      return _onMouseDown(ev, context.registeredProviders);
    };
    var onPointerDown = function(ev) {
      return _onPointerDown(ev, context.registeredProviders);
    };
    var onKeyDown = function(ev) {
      return _onKeyDown(ev, context.registeredProviders);
    };
    var onKeyUp = function(ev) {
      return _onKeyUp(ev, context.registeredProviders);
    };
    callbacks = { onMouseDown, onPointerDown, onKeyDown, onKeyUp };
    callbackMap.set(context, callbacks);
    return callbacks;
  }
  var FocusRectsContext = React8.createContext(void 0);
  function useFocusRects(rootRef) {
    var context = React8.useContext(FocusRectsContext);
    React8.useEffect(function() {
      var _a7, _b3, _c3, _d3;
      var win2 = getWindow(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);
      if (!win2 || ((_a7 = win2.FabricConfig) === null || _a7 === void 0 ? void 0 : _a7.disableFocusRects) === true) {
        return void 0;
      }
      var el = win2;
      var onMouseDown;
      var onPointerDown;
      var onKeyDown;
      var onKeyUp;
      if (((_b3 = context === null || context === void 0 ? void 0 : context.providerRef) === null || _b3 === void 0 ? void 0 : _b3.current) && ((_d3 = (_c3 = context === null || context === void 0 ? void 0 : context.providerRef) === null || _c3 === void 0 ? void 0 : _c3.current) === null || _d3 === void 0 ? void 0 : _d3.addEventListener)) {
        el = context.providerRef.current;
        var callbacks = (
          /*@__NOINLINE__*/
          setCallbackMap(context)
        );
        onMouseDown = callbacks.onMouseDown;
        onPointerDown = callbacks.onPointerDown;
        onKeyDown = callbacks.onKeyDown;
        onKeyUp = callbacks.onKeyUp;
      } else {
        onMouseDown = _onMouseDown;
        onPointerDown = _onPointerDown;
        onKeyDown = _onKeyDown;
        onKeyUp = _onKeyUp;
      }
      var count = setMountCounters(el, 1);
      if (count <= 1) {
        el.addEventListener("mousedown", onMouseDown, true);
        el.addEventListener("pointerdown", onPointerDown, true);
        el.addEventListener("keydown", onKeyDown, true);
        el.addEventListener("keyup", onKeyUp, true);
      }
      return function() {
        var _a8;
        if (!win2 || ((_a8 = win2.FabricConfig) === null || _a8 === void 0 ? void 0 : _a8.disableFocusRects) === true) {
          return;
        }
        count = setMountCounters(el, -1);
        if (count === 0) {
          el.removeEventListener("mousedown", onMouseDown, true);
          el.removeEventListener("pointerdown", onPointerDown, true);
          el.removeEventListener("keydown", onKeyDown, true);
          el.removeEventListener("keyup", onKeyUp, true);
        }
      };
    }, [context, rootRef]);
  }
  var FocusRects = function(props) {
    useFocusRects(props.rootRef);
    return null;
  };
  function _onMouseDown(ev, registeredProviders) {
    setFocusVisibility(false, ev.target, registeredProviders);
  }
  function _onPointerDown(ev, registeredProviders) {
    if (ev.pointerType !== "mouse") {
      setFocusVisibility(false, ev.target, registeredProviders);
    }
  }
  function _onKeyDown(ev, registeredProviders) {
    if (isDirectionalKeyCode(ev.which)) {
      setFocusVisibility(true, ev.target, registeredProviders);
    }
  }
  function _onKeyUp(ev, registeredProviders) {
    if (isDirectionalKeyCode(ev.which)) {
      setFocusVisibility(true, ev.target, registeredProviders);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/FocusRectsProvider.js
  var FocusRectsProvider = function(props) {
    var providerRef = props.providerRef, layerRoot = props.layerRoot;
    var registeredProviders = React9.useState([])[0];
    var parentContext = React9.useContext(FocusRectsContext);
    var inheritParentContext = parentContext !== void 0 && !layerRoot;
    var context = React9.useMemo(function() {
      return inheritParentContext ? void 0 : {
        providerRef,
        registeredProviders,
        registerProvider: function(ref) {
          registeredProviders.push(ref);
          parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerProvider(ref);
        },
        unregisterProvider: function(ref) {
          parentContext === null || parentContext === void 0 ? void 0 : parentContext.unregisterProvider(ref);
          var i2 = registeredProviders.indexOf(ref);
          if (i2 >= 0) {
            registeredProviders.splice(i2, 1);
          }
        }
      };
    }, [providerRef, registeredProviders, parentContext, inheritParentContext]);
    React9.useEffect(function() {
      if (context) {
        context.registerProvider(context.providerRef);
        return function() {
          return context.unregisterProvider(context.providerRef);
        };
      }
    }, [context]);
    if (context) {
      return React9.createElement(FocusRectsContext.Provider, { value: context }, props.children);
    } else {
      return React9.createElement(React9.Fragment, null, props.children);
    }
  };

  // ../node_modules/@fluentui/utilities/lib/localStorage.js
  function getItem2(key) {
    var result = null;
    try {
      var win2 = getWindow();
      result = win2 ? win2.localStorage.getItem(key) : null;
    } catch (e2) {
    }
    return result;
  }

  // ../node_modules/@fluentui/utilities/lib/language.js
  var _language;
  var STORAGE_KEY = "language";
  function getLanguage(persistenceType) {
    if (persistenceType === void 0) {
      persistenceType = "sessionStorage";
    }
    if (_language === void 0) {
      var doc = getDocument();
      var savedLanguage = persistenceType === "localStorage" ? getItem2(STORAGE_KEY) : persistenceType === "sessionStorage" ? getItem(STORAGE_KEY) : void 0;
      if (savedLanguage) {
        _language = savedLanguage;
      }
      if (_language === void 0 && doc) {
        _language = doc.documentElement.getAttribute("lang");
      }
      if (_language === void 0) {
        _language = "en";
      }
    }
    return _language;
  }

  // ../node_modules/@fluentui/utilities/lib/merge.js
  function merge(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    for (var _a7 = 0, args_1 = args; _a7 < args_1.length; _a7++) {
      var arg = args_1[_a7];
      _merge(target || {}, arg);
    }
    return target;
  }
  function _merge(target, source, circularReferences) {
    if (circularReferences === void 0) {
      circularReferences = [];
    }
    circularReferences.push(source);
    for (var name_1 in source) {
      if (source.hasOwnProperty(name_1)) {
        if (name_1 !== "__proto__" && name_1 !== "constructor" && name_1 !== "prototype") {
          var value = source[name_1];
          if (typeof value === "object" && value !== null && !Array.isArray(value)) {
            var isCircularReference = circularReferences.indexOf(value) > -1;
            target[name_1] = isCircularReference ? value : _merge(target[name_1] || {}, value, circularReferences);
          } else {
            target[name_1] = value;
          }
        }
      }
    }
    circularReferences.pop();
    return target;
  }

  // ../node_modules/@fluentui/utilities/lib/mobileDetector.js
  var isIOS = function() {
    if (!window || !window.navigator || !window.navigator.userAgent) {
      return false;
    }
    return /iPad|iPhone|iPod/i.test(window.navigator.userAgent);
  };

  // ../node_modules/@fluentui/utilities/lib/modalize.js
  var tagsToIgnore = ["TEMPLATE", "STYLE", "SCRIPT"];
  function modalize(target) {
    var targetDocument = getDocument(target);
    if (!targetDocument) {
      return function() {
        return void 0;
      };
    }
    var affectedNodes = [];
    while (target !== targetDocument.body && target.parentElement) {
      for (var _i = 0, _a7 = target.parentElement.children; _i < _a7.length; _i++) {
        var sibling = _a7[_i];
        var ariaHidden = sibling.getAttribute("aria-hidden");
        if (sibling !== target && (ariaHidden === null || ariaHidden === void 0 ? void 0 : ariaHidden.toLowerCase()) !== "true" && tagsToIgnore.indexOf(sibling.tagName) === -1) {
          affectedNodes.push([sibling, ariaHidden]);
        }
      }
      target = target.parentElement;
    }
    affectedNodes.forEach(function(_a8) {
      var node = _a8[0];
      node.setAttribute("aria-hidden", "true");
    });
    return function() {
      unmodalize(affectedNodes);
      affectedNodes = [];
    };
  }
  function unmodalize(affectedNodes) {
    affectedNodes.forEach(function(_a7) {
      var node = _a7[0], originalValue = _a7[1];
      if (originalValue) {
        node.setAttribute("aria-hidden", originalValue);
      } else {
        node.removeAttribute("aria-hidden");
      }
    });
  }

  // ../node_modules/@fluentui/utilities/lib/osDetector.js
  var isMacResult;
  function isMac(reset) {
    var _a7;
    if (typeof isMacResult === "undefined" || reset) {
      var win2 = getWindow();
      var userAgent = (_a7 = win2 === null || win2 === void 0 ? void 0 : win2.navigator) === null || _a7 === void 0 ? void 0 : _a7.userAgent;
      isMacResult = !!userAgent && userAgent.indexOf("Macintosh") !== -1;
    }
    return !!isMacResult;
  }

  // ../node_modules/@fluentui/utilities/lib/renderFunction/composeRenderFunction.js
  function createComposedRenderFunction(outer) {
    var outerMemoizer = createMemoizer(function(inner) {
      var innerMemoizer = createMemoizer(function(defaultRender) {
        return function(innerProps) {
          return inner(innerProps, defaultRender);
        };
      });
      return function(outerProps, defaultRender) {
        return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);
      };
    });
    return outerMemoizer;
  }
  var memoizer = createMemoizer(createComposedRenderFunction);
  function composeRenderFunction(outer, inner) {
    return memoizer(outer)(inner);
  }

  // ../node_modules/@fluentui/utilities/lib/safeRequestAnimationFrame.js
  var safeRequestAnimationFrame = function(component) {
    var activeTimeouts;
    return function(cb) {
      if (!activeTimeouts) {
        activeTimeouts = /* @__PURE__ */ new Set();
        extendComponent(component, {
          componentWillUnmount: function() {
            activeTimeouts.forEach(function(id) {
              return cancelAnimationFrame(id);
            });
          }
        });
      }
      var timeoutId = requestAnimationFrame(function() {
        activeTimeouts.delete(timeoutId);
        cb();
      });
      activeTimeouts.add(timeoutId);
    };
  };

  // ../node_modules/@fluentui/utilities/lib/styled.js
  var React10 = __toESM(require_react());
  var DefaultFields = ["theme", "styles"];
  function styled(Component19, baseStyles, getProps, customizable2, pure) {
    customizable2 = customizable2 || { scope: "", fields: void 0 };
    var scope = customizable2.scope, _a7 = customizable2.fields, fields = _a7 === void 0 ? DefaultFields : _a7;
    var Wrapped = React10.forwardRef(function(props, forwardedRef) {
      var styles2 = React10.useRef();
      var settings = useCustomizationSettings(fields, scope);
      var customizedStyles = settings.styles, dir = settings.dir, rest = __rest(settings, ["styles", "dir"]);
      var additionalProps = getProps ? getProps(props) : void 0;
      var cache = styles2.current && styles2.current.__cachedInputs__ || [];
      var propStyles = props.styles;
      if (!styles2.current || customizedStyles !== cache[1] || propStyles !== cache[2]) {
        var concatenatedStyles = function(styleProps) {
          return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, propStyles);
        };
        concatenatedStyles.__cachedInputs__ = [
          baseStyles,
          customizedStyles,
          propStyles
        ];
        concatenatedStyles.__noStyleOverride__ = !customizedStyles && !propStyles;
        styles2.current = concatenatedStyles;
      }
      return React10.createElement(Component19, __assign({ ref: forwardedRef }, rest, additionalProps, props, { styles: styles2.current }));
    });
    Wrapped.displayName = "Styled".concat(Component19.displayName || Component19.name);
    var pureComponent = pure ? React10.memo(Wrapped) : Wrapped;
    if (Wrapped.displayName) {
      pureComponent.displayName = Wrapped.displayName;
    }
    return pureComponent;
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnControlledUsage.js
  var warningsMap;
  if (true) {
    warningsMap = {
      valueOnChange: {},
      valueDefaultValue: {},
      controlledToUncontrolled: {},
      uncontrolledToControlled: {}
    };
  }
  function warnControlledUsage(params) {
    if (true) {
      var componentId = params.componentId, componentName = params.componentName, defaultValueProp = params.defaultValueProp, props = params.props, oldProps = params.oldProps, onChangeProp = params.onChangeProp, readOnlyProp = params.readOnlyProp, valueProp = params.valueProp;
      var oldIsControlled = oldProps ? isControlled(oldProps, valueProp) : void 0;
      var newIsControlled = isControlled(props, valueProp);
      if (newIsControlled) {
        var hasOnChange = !!props[onChangeProp];
        var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);
        if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {
          warningsMap.valueOnChange[componentId] = true;
          warn("Warning: You provided a '".concat(String(valueProp), "' prop to a ").concat(String(componentName), " without an '").concat(String(onChangeProp), "' handler. ") + "This will render a read-only field. If the field should be mutable use '".concat(String(defaultValueProp), "'. ") + "Otherwise, set '".concat(String(onChangeProp), "'").concat(readOnlyProp ? " or '".concat(String(readOnlyProp), "'") : "", "."));
        }
        var defaultValue = props[defaultValueProp];
        if (defaultValue !== void 0 && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {
          warningsMap.valueDefaultValue[componentId] = true;
          warn("Warning: You provided both '".concat(String(valueProp), "' and '").concat(String(defaultValueProp), "' to a ").concat(componentName, ". ") + "Form fields must be either controlled or uncontrolled (specify either the '".concat(String(valueProp), "' prop, ") + "or the '".concat(String(defaultValueProp), "' prop, but not both). Decide between using a controlled or uncontrolled ") + "".concat(componentName, " and remove one of these props. More info: https://fb.me/react-controlled-components"));
        }
      }
      if (oldProps && newIsControlled !== oldIsControlled) {
        var oldType = oldIsControlled ? "a controlled" : "an uncontrolled";
        var newType = oldIsControlled ? "uncontrolled" : "controlled";
        var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;
        if (!warnMap[componentId]) {
          warnMap[componentId] = true;
          warn("Warning: A component is changing ".concat(oldType, " ").concat(componentName, " to be ").concat(newType, ". ") + "".concat(componentName, "s should not switch from controlled to uncontrolled (or vice versa). ") + "Decide between using controlled or uncontrolled for the lifetime of the component. More info: https://fb.me/react-controlled-components");
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/ie11Detector.js
  var isIE11 = function() {
    var _a7;
    var win2 = getWindow();
    if (!((_a7 = win2 === null || win2 === void 0 ? void 0 : win2.navigator) === null || _a7 === void 0 ? void 0 : _a7.userAgent)) {
      return false;
    }
    return win2.navigator.userAgent.indexOf("rv:11.0") > -1;
  };

  // ../node_modules/@fluentui/utilities/lib/getPropsWithDefaults.js
  function getPropsWithDefaults(defaultProps, propsWithoutDefaults) {
    var props = __assign({}, propsWithoutDefaults);
    for (var _i = 0, _a7 = Object.keys(defaultProps); _i < _a7.length; _i++) {
      var key = _a7[_i];
      if (props[key] === void 0) {
        props[key] = defaultProps[key];
      }
    }
    return props;
  }

  // ../node_modules/@fluentui/utilities/lib/createMergedRef.js
  var createResolver = function(local) {
    return function(newValue) {
      for (var _i = 0, _a7 = local.refs; _i < _a7.length; _i++) {
        var ref = _a7[_i];
        if (typeof ref === "function") {
          ref(newValue);
        } else if (ref) {
          ref.current = newValue;
        }
      }
    };
  };
  var createMergedRef = function(value) {
    var local = {
      refs: []
    };
    return function() {
      var newRefs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newRefs[_i] = arguments[_i];
      }
      if (!local.resolver || !arraysEqual(local.refs, newRefs)) {
        local.resolver = createResolver(local);
      }
      local.refs = newRefs;
      return local.resolver;
    };
  };

  // ../node_modules/@fluentui/utilities/lib/useIsomorphicLayoutEffect.js
  var React11 = __toESM(require_react());
  var useIsomorphicLayoutEffect = canUseDOM() ? React11.useLayoutEffect : React11.useEffect;

  // ../node_modules/@fluentui/utilities/lib/version.js
  setVersion("@fluentui/utilities", "8.13.18");

  // ../node_modules/@fluentui/style-utilities/lib/utilities/icons.js
  var ICON_SETTING_NAME = "icons";
  var _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {
    __options: {
      disableWarnings: false,
      warnOnMissingIcons: true
    },
    __remapped: {}
  });
  var stylesheet2 = Stylesheet.getInstance();
  if (stylesheet2 && stylesheet2.onReset) {
    stylesheet2.onReset(function() {
      for (var name_1 in _iconSettings) {
        if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {
          _iconSettings[name_1].subset.className = void 0;
        }
      }
    });
  }
  var normalizeIconName = function(name) {
    return name.toLowerCase();
  };
  function registerIcons(iconSubset, options) {
    var subset = __assign(__assign({}, iconSubset), { isRegistered: false, className: void 0 });
    var icons = iconSubset.icons;
    options = options ? __assign(__assign({}, _iconSettings.__options), options) : _iconSettings.__options;
    for (var iconName in icons) {
      if (icons.hasOwnProperty(iconName)) {
        var code = icons[iconName];
        var normalizedIconName = normalizeIconName(iconName);
        if (_iconSettings[normalizedIconName]) {
          _warnDuplicateIcon(iconName);
        } else {
          _iconSettings[normalizedIconName] = {
            code,
            subset
          };
        }
      }
    }
  }
  function registerIconAlias(iconName, mappedToName) {
    _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);
  }
  function getIcon(name) {
    var icon = void 0;
    var options = _iconSettings.__options;
    name = name ? normalizeIconName(name) : "";
    name = _iconSettings.__remapped[name] || name;
    if (name) {
      icon = _iconSettings[name];
      if (icon) {
        var subset = icon.subset;
        if (subset && subset.fontFace) {
          if (!subset.isRegistered) {
            fontFace(subset.fontFace);
            subset.isRegistered = true;
          }
          if (!subset.className) {
            subset.className = mergeStyles(subset.style, {
              fontFamily: subset.fontFace.fontFamily,
              fontWeight: subset.fontFace.fontWeight || "normal",
              fontStyle: subset.fontFace.fontStyle || "normal"
            });
          }
        }
      } else {
        if (!options.disableWarnings && options.warnOnMissingIcons) {
          warn('The icon "'.concat(name, '" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.'));
        }
      }
    }
    return icon;
  }
  var _missingIcons = [];
  var _missingIconsTimer = void 0;
  function _warnDuplicateIcon(iconName) {
    var options = _iconSettings.__options;
    var warningDelay = 2e3;
    var maxIconsInMessage = 10;
    if (!options.disableWarnings) {
      _missingIcons.push(iconName);
      if (_missingIconsTimer === void 0) {
        _missingIconsTimer = setTimeout(function() {
          warn("Some icons were re-registered. Applications should only call registerIcons for any given icon once. Redefining what an icon is may have unintended consequences. Duplicates include: \n" + _missingIcons.slice(0, maxIconsInMessage).join(", ") + (_missingIcons.length > maxIconsInMessage ? " (+ ".concat(_missingIcons.length - maxIconsInMessage, " more)") : ""));
          _missingIconsTimer = void 0;
          _missingIcons = [];
        }, warningDelay);
      }
    }
  }

  // ../node_modules/@fluentui/theme/lib/utilities/makeSemanticColors.js
  function makeSemanticColors(p2, e2, s2, isInverted, depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    var semanticColors = __assign({
      primaryButtonBorder: "transparent",
      errorText: !isInverted ? "#a4262c" : "#F1707B",
      messageText: !isInverted ? "#323130" : "#F3F2F1",
      messageLink: !isInverted ? "#005A9E" : "#6CB8F6",
      messageLinkHovered: !isInverted ? "#004578" : "#82C7FF",
      infoIcon: !isInverted ? "#605e5c" : "#C8C6C4",
      errorIcon: !isInverted ? "#A80000" : "#F1707B",
      blockingIcon: !isInverted ? "#FDE7E9" : "#442726",
      warningIcon: !isInverted ? "#797775" : "#C8C6C4",
      severeWarningIcon: !isInverted ? "#D83B01" : "#FCE100",
      successIcon: !isInverted ? "#107C10" : "#92C353",
      infoBackground: !isInverted ? "#f3f2f1" : "#323130",
      errorBackground: !isInverted ? "#FDE7E9" : "#442726",
      blockingBackground: !isInverted ? "#FDE7E9" : "#442726",
      warningBackground: !isInverted ? "#FFF4CE" : "#433519",
      severeWarningBackground: !isInverted ? "#FED9CC" : "#4F2A0F",
      successBackground: !isInverted ? "#DFF6DD" : "#393D1B",
      // deprecated
      warningHighlight: !isInverted ? "#ffb900" : "#fff100",
      successText: !isInverted ? "#107C10" : "#92c353"
    }, s2);
    var fullSemanticColors = getSemanticColors(p2, e2, semanticColors, isInverted);
    return _fixDeprecatedSlots(fullSemanticColors, depComments);
  }
  function getSemanticColors(p2, e2, s2, isInverted, depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    var result = {};
    var _a7 = p2 || {}, white = _a7.white, black = _a7.black, themePrimary = _a7.themePrimary, themeDark = _a7.themeDark, themeDarker = _a7.themeDarker, themeDarkAlt = _a7.themeDarkAlt, themeLighter = _a7.themeLighter, neutralLight = _a7.neutralLight, neutralLighter = _a7.neutralLighter, neutralDark = _a7.neutralDark, neutralQuaternary = _a7.neutralQuaternary, neutralQuaternaryAlt = _a7.neutralQuaternaryAlt, neutralPrimary = _a7.neutralPrimary, neutralSecondary = _a7.neutralSecondary, neutralSecondaryAlt = _a7.neutralSecondaryAlt, neutralTertiary = _a7.neutralTertiary, neutralTertiaryAlt = _a7.neutralTertiaryAlt, neutralLighterAlt = _a7.neutralLighterAlt, accent = _a7.accent;
    if (white) {
      result.bodyBackground = white;
      result.bodyFrameBackground = white;
      result.accentButtonText = white;
      result.buttonBackground = white;
      result.primaryButtonText = white;
      result.primaryButtonTextHovered = white;
      result.primaryButtonTextPressed = white;
      result.inputBackground = white;
      result.inputForegroundChecked = white;
      result.listBackground = white;
      result.menuBackground = white;
      result.cardStandoutBackground = white;
    }
    if (black) {
      result.bodyTextChecked = black;
      result.buttonTextCheckedHovered = black;
    }
    if (themePrimary) {
      result.link = themePrimary;
      result.primaryButtonBackground = themePrimary;
      result.inputBackgroundChecked = themePrimary;
      result.inputIcon = themePrimary;
      result.inputFocusBorderAlt = themePrimary;
      result.menuIcon = themePrimary;
      result.menuHeader = themePrimary;
      result.accentButtonBackground = themePrimary;
    }
    if (themeDark) {
      result.primaryButtonBackgroundPressed = themeDark;
      result.inputBackgroundCheckedHovered = themeDark;
      result.inputIconHovered = themeDark;
    }
    if (themeDarker) {
      result.linkHovered = themeDarker;
    }
    if (themeDarkAlt) {
      result.primaryButtonBackgroundHovered = themeDarkAlt;
    }
    if (themeLighter) {
      result.inputPlaceholderBackgroundChecked = themeLighter;
    }
    if (neutralLight) {
      result.bodyBackgroundChecked = neutralLight;
      result.bodyFrameDivider = neutralLight;
      result.bodyDivider = neutralLight;
      result.variantBorder = neutralLight;
      result.buttonBackgroundCheckedHovered = neutralLight;
      result.buttonBackgroundPressed = neutralLight;
      result.listItemBackgroundChecked = neutralLight;
      result.listHeaderBackgroundPressed = neutralLight;
      result.menuItemBackgroundPressed = neutralLight;
      result.menuItemBackgroundChecked = neutralLight;
    }
    if (neutralLighter) {
      result.bodyBackgroundHovered = neutralLighter;
      result.buttonBackgroundHovered = neutralLighter;
      result.buttonBackgroundDisabled = neutralLighter;
      result.buttonBorderDisabled = neutralLighter;
      result.primaryButtonBackgroundDisabled = neutralLighter;
      result.disabledBackground = neutralLighter;
      result.listItemBackgroundHovered = neutralLighter;
      result.listHeaderBackgroundHovered = neutralLighter;
      result.menuItemBackgroundHovered = neutralLighter;
    }
    if (neutralQuaternary) {
      result.primaryButtonTextDisabled = neutralQuaternary;
      result.disabledSubtext = neutralQuaternary;
    }
    if (neutralQuaternaryAlt) {
      result.listItemBackgroundCheckedHovered = neutralQuaternaryAlt;
    }
    if (neutralTertiary) {
      result.disabledBodyText = neutralTertiary;
      result.variantBorderHovered = (s2 === null || s2 === void 0 ? void 0 : s2.variantBorderHovered) || neutralTertiary;
      result.buttonTextDisabled = neutralTertiary;
      result.inputIconDisabled = neutralTertiary;
      result.disabledText = neutralTertiary;
    }
    if (neutralPrimary) {
      result.bodyText = neutralPrimary;
      result.actionLink = neutralPrimary;
      result.buttonText = neutralPrimary;
      result.inputBorderHovered = neutralPrimary;
      result.inputText = neutralPrimary;
      result.listText = neutralPrimary;
      result.menuItemText = neutralPrimary;
    }
    if (neutralLighterAlt) {
      result.bodyStandoutBackground = neutralLighterAlt;
      result.defaultStateBackground = neutralLighterAlt;
    }
    if (neutralDark) {
      result.actionLinkHovered = neutralDark;
      result.buttonTextHovered = neutralDark;
      result.buttonTextChecked = neutralDark;
      result.buttonTextPressed = neutralDark;
      result.inputTextHovered = neutralDark;
      result.menuItemTextHovered = neutralDark;
    }
    if (neutralSecondary) {
      result.bodySubtext = neutralSecondary;
      result.focusBorder = neutralSecondary;
      result.inputBorder = neutralSecondary;
      result.smallInputBorder = neutralSecondary;
      result.inputPlaceholderText = neutralSecondary;
    }
    if (neutralSecondaryAlt) {
      result.buttonBorder = neutralSecondaryAlt;
    }
    if (neutralTertiaryAlt) {
      result.disabledBodySubtext = neutralTertiaryAlt;
      result.disabledBorder = neutralTertiaryAlt;
      result.buttonBackgroundChecked = neutralTertiaryAlt;
      result.menuDivider = neutralTertiaryAlt;
    }
    if (accent) {
      result.accentButtonBackground = accent;
    }
    if (e2 === null || e2 === void 0 ? void 0 : e2.elevation4) {
      result.cardShadow = e2.elevation4;
    }
    if (!isInverted && (e2 === null || e2 === void 0 ? void 0 : e2.elevation8)) {
      result.cardShadowHovered = e2.elevation8;
    } else if (result.variantBorderHovered) {
      result.cardShadowHovered = "0 0 1px " + result.variantBorderHovered;
    }
    result = __assign(__assign({}, result), s2);
    return result;
  }
  function _fixDeprecatedSlots(s2, depComments) {
    var dep = "";
    if (depComments === true) {
      dep = " /* @deprecated */";
    }
    s2.listTextColor = s2.listText + dep;
    s2.menuItemBackgroundChecked += dep;
    s2.warningHighlight += dep;
    s2.warningText = s2.messageText + dep;
    s2.successText += dep;
    return s2;
  }

  // ../node_modules/@fluentui/theme/lib/mergeThemes.js
  function mergeThemes(theme, partialTheme) {
    var _a7, _b3, _c3;
    if (partialTheme === void 0) {
      partialTheme = {};
    }
    var mergedTheme = merge({}, theme, partialTheme, {
      semanticColors: getSemanticColors(partialTheme.palette, partialTheme.effects, partialTheme.semanticColors, partialTheme.isInverted === void 0 ? theme.isInverted : partialTheme.isInverted)
    });
    if (((_a7 = partialTheme.palette) === null || _a7 === void 0 ? void 0 : _a7.themePrimary) && !((_b3 = partialTheme.palette) === null || _b3 === void 0 ? void 0 : _b3.accent)) {
      mergedTheme.palette.accent = partialTheme.palette.themePrimary;
    }
    if (partialTheme.defaultFontStyle) {
      for (var _i = 0, _d3 = Object.keys(mergedTheme.fonts); _i < _d3.length; _i++) {
        var fontStyle = _d3[_i];
        mergedTheme.fonts[fontStyle] = merge(mergedTheme.fonts[fontStyle], partialTheme.defaultFontStyle, (_c3 = partialTheme === null || partialTheme === void 0 ? void 0 : partialTheme.fonts) === null || _c3 === void 0 ? void 0 : _c3[fontStyle]);
      }
    }
    return mergedTheme;
  }

  // ../node_modules/@fluentui/theme/lib/colors/DefaultPalette.js
  var DefaultPalette = {
    themeDarker: "#004578",
    themeDark: "#005a9e",
    themeDarkAlt: "#106ebe",
    themePrimary: "#0078d4",
    themeSecondary: "#2b88d8",
    themeTertiary: "#71afe5",
    themeLight: "#c7e0f4",
    themeLighter: "#deecf9",
    themeLighterAlt: "#eff6fc",
    black: "#000000",
    blackTranslucent40: "rgba(0,0,0,.4)",
    neutralDark: "#201f1e",
    neutralPrimary: "#323130",
    neutralPrimaryAlt: "#3b3a39",
    neutralSecondary: "#605e5c",
    neutralSecondaryAlt: "#8a8886",
    neutralTertiary: "#a19f9d",
    neutralTertiaryAlt: "#c8c6c4",
    neutralQuaternary: "#d2d0ce",
    neutralQuaternaryAlt: "#e1dfdd",
    neutralLight: "#edebe9",
    neutralLighter: "#f3f2f1",
    neutralLighterAlt: "#faf9f8",
    accent: "#0078d4",
    white: "#ffffff",
    whiteTranslucent40: "rgba(255,255,255,.4)",
    yellowDark: "#d29200",
    yellow: "#ffb900",
    yellowLight: "#fff100",
    orange: "#d83b01",
    orangeLight: "#ea4300",
    orangeLighter: "#ff8c00",
    redDark: "#a4262c",
    red: "#e81123",
    magentaDark: "#5c005c",
    magenta: "#b4009e",
    magentaLight: "#e3008c",
    purpleDark: "#32145a",
    purple: "#5c2d91",
    purpleLight: "#b4a0ff",
    blueDark: "#002050",
    blueMid: "#00188f",
    blue: "#0078d4",
    blueLight: "#00bcf2",
    tealDark: "#004b50",
    teal: "#008272",
    tealLight: "#00b294",
    greenDark: "#004b1c",
    green: "#107c10",
    greenLight: "#bad80a"
  };

  // ../node_modules/@fluentui/theme/lib/effects/FluentDepths.js
  var Depths;
  (function(Depths2) {
    Depths2.depth0 = "0 0 0 0 transparent";
    Depths2.depth4 = "0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth8 = "0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth16 = "0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth64 = "0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)";
  })(Depths || (Depths = {}));

  // ../node_modules/@fluentui/theme/lib/effects/DefaultEffects.js
  var DefaultEffects = {
    elevation4: Depths.depth4,
    elevation8: Depths.depth8,
    elevation16: Depths.depth16,
    elevation64: Depths.depth64,
    roundedCorner2: "2px",
    roundedCorner4: "4px",
    roundedCorner6: "6px"
  };

  // ../node_modules/@fluentui/theme/lib/spacing/DefaultSpacing.js
  var DefaultSpacing = {
    s2: "4px",
    s1: "8px",
    m: "16px",
    l1: "20px",
    l2: "32px"
  };

  // ../node_modules/@fluentui/theme/lib/motion/AnimationStyles.js
  var EASING_FUNCTION_1 = "cubic-bezier(.1,.9,.2,1)";
  var EASING_FUNCTION_2 = "cubic-bezier(.1,.25,.75,.9)";
  var DURATION_1 = "0.167s";
  var DURATION_2 = "0.267s";
  var DURATION_3 = "0.367s";
  var DURATION_4 = "0.467s";
  var FADE_IN = keyframes({
    from: { opacity: 0 },
    to: { opacity: 1 }
  });
  var FADE_OUT = keyframes({
    from: { opacity: 1 },
    to: { opacity: 0, visibility: "hidden" }
  });
  var SLIDE_RIGHT_IN10 = _createSlideInX(-10);
  var SLIDE_RIGHT_IN20 = _createSlideInX(-20);
  var SLIDE_RIGHT_IN40 = _createSlideInX(-40);
  var SLIDE_RIGHT_IN400 = _createSlideInX(-400);
  var SLIDE_LEFT_IN10 = _createSlideInX(10);
  var SLIDE_LEFT_IN20 = _createSlideInX(20);
  var SLIDE_LEFT_IN40 = _createSlideInX(40);
  var SLIDE_LEFT_IN400 = _createSlideInX(400);
  var SLIDE_UP_IN10 = _createSlideInY(10);
  var SLIDE_UP_IN20 = _createSlideInY(20);
  var SLIDE_DOWN_IN10 = _createSlideInY(-10);
  var SLIDE_DOWN_IN20 = _createSlideInY(-20);
  var SLIDE_RIGHT_OUT10 = _createSlideOutX(10);
  var SLIDE_RIGHT_OUT20 = _createSlideOutX(20);
  var SLIDE_RIGHT_OUT40 = _createSlideOutX(40);
  var SLIDE_RIGHT_OUT400 = _createSlideOutX(400);
  var SLIDE_LEFT_OUT10 = _createSlideOutX(-10);
  var SLIDE_LEFT_OUT20 = _createSlideOutX(-20);
  var SLIDE_LEFT_OUT40 = _createSlideOutX(-40);
  var SLIDE_LEFT_OUT400 = _createSlideOutX(-400);
  var SLIDE_UP_OUT10 = _createSlideOutY(-10);
  var SLIDE_UP_OUT20 = _createSlideOutY(-20);
  var SLIDE_DOWN_OUT10 = _createSlideOutY(10);
  var SLIDE_DOWN_OUT20 = _createSlideOutY(20);
  var SCALE_UP100 = keyframes({
    from: { transform: "scale3d(.98,.98,1)" },
    to: { transform: "scale3d(1,1,1)" }
  });
  var SCALE_DOWN98 = keyframes({
    from: { transform: "scale3d(1,1,1)" },
    to: { transform: "scale3d(.98,.98,1)" }
  });
  var SCALE_DOWN100 = keyframes({
    from: { transform: "scale3d(1.03,1.03,1)" },
    to: { transform: "scale3d(1,1,1)" }
  });
  var SCALE_UP103 = keyframes({
    from: { transform: "scale3d(1,1,1)" },
    to: { transform: "scale3d(1.03,1.03,1)" }
  });
  var ROTATE90 = keyframes({
    from: { transform: "rotateZ(0deg)" },
    to: { transform: "rotateZ(90deg)" }
  });
  var ROTATE_N90 = keyframes({
    from: { transform: "rotateZ(0deg)" },
    to: { transform: "rotateZ(-90deg)" }
  });
  var AnimationVariables = {
    easeFunction1: EASING_FUNCTION_1,
    easeFunction2: EASING_FUNCTION_2,
    durationValue1: DURATION_1,
    durationValue2: DURATION_2,
    durationValue3: DURATION_3,
    durationValue4: DURATION_4
  };
  var AnimationStyles = {
    slideRightIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN10), DURATION_3, EASING_FUNCTION_1),
    slideRightIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN20), DURATION_3, EASING_FUNCTION_1),
    slideRightIn40: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN40), DURATION_3, EASING_FUNCTION_1),
    slideRightIn400: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN400), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN10), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN20), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn40: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN40), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn400: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN400), DURATION_3, EASING_FUNCTION_1),
    slideUpIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_UP_IN10), DURATION_3, EASING_FUNCTION_1),
    slideUpIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_UP_IN20), DURATION_3, EASING_FUNCTION_1),
    slideDownIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_DOWN_IN10), DURATION_3, EASING_FUNCTION_1),
    slideDownIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_DOWN_IN20), DURATION_3, EASING_FUNCTION_1),
    slideRightOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideRightOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT20), DURATION_3, EASING_FUNCTION_1),
    slideRightOut40: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT40), DURATION_3, EASING_FUNCTION_1),
    slideRightOut400: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT400), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT20), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut40: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT40), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut400: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT400), DURATION_3, EASING_FUNCTION_1),
    slideUpOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_UP_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideUpOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_UP_OUT20), DURATION_3, EASING_FUNCTION_1),
    slideDownOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_DOWN_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideDownOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_DOWN_OUT20), DURATION_3, EASING_FUNCTION_1),
    scaleUpIn100: _createAnimation("".concat(FADE_IN, ",").concat(SCALE_UP100), DURATION_3, EASING_FUNCTION_1),
    scaleDownIn100: _createAnimation("".concat(FADE_IN, ",").concat(SCALE_DOWN100), DURATION_3, EASING_FUNCTION_1),
    scaleUpOut103: _createAnimation("".concat(FADE_OUT, ",").concat(SCALE_UP103), DURATION_1, EASING_FUNCTION_2),
    scaleDownOut98: _createAnimation("".concat(FADE_OUT, ",").concat(SCALE_DOWN98), DURATION_1, EASING_FUNCTION_2),
    fadeIn100: _createAnimation(FADE_IN, DURATION_1, EASING_FUNCTION_2),
    fadeIn200: _createAnimation(FADE_IN, DURATION_2, EASING_FUNCTION_2),
    fadeIn400: _createAnimation(FADE_IN, DURATION_3, EASING_FUNCTION_2),
    fadeIn500: _createAnimation(FADE_IN, DURATION_4, EASING_FUNCTION_2),
    fadeOut100: _createAnimation(FADE_OUT, DURATION_1, EASING_FUNCTION_2),
    fadeOut200: _createAnimation(FADE_OUT, DURATION_2, EASING_FUNCTION_2),
    fadeOut400: _createAnimation(FADE_OUT, DURATION_3, EASING_FUNCTION_2),
    fadeOut500: _createAnimation(FADE_OUT, DURATION_4, EASING_FUNCTION_2),
    rotate90deg: _createAnimation(ROTATE90, "0.1s", EASING_FUNCTION_2),
    rotateN90deg: _createAnimation(ROTATE_N90, "0.1s", EASING_FUNCTION_2)
    // expandCollapse 100/200/400, delay 100/200
  };
  function _createAnimation(animationName, animationDuration, animationTimingFunction) {
    return {
      animationName,
      animationDuration,
      animationTimingFunction,
      animationFillMode: "both"
    };
  }
  function _createSlideInX(fromX) {
    return keyframes({
      from: { transform: "translate3d(".concat(fromX, "px,0,0)"), pointerEvents: "none" },
      to: { transform: "translate3d(0,0,0)", pointerEvents: "auto" }
    });
  }
  function _createSlideInY(fromY) {
    return keyframes({
      from: { transform: "translate3d(0,".concat(fromY, "px,0)"), pointerEvents: "none" },
      to: { transform: "translate3d(0,0,0)", pointerEvents: "auto" }
    });
  }
  function _createSlideOutX(toX) {
    return keyframes({
      from: { transform: "translate3d(0,0,0)" },
      to: { transform: "translate3d(".concat(toX, "px,0,0)") }
    });
  }
  function _createSlideOutY(toY) {
    return keyframes({
      from: { transform: "translate3d(0,0,0)" },
      to: { transform: "translate3d(0,".concat(toY, "px,0)") }
    });
  }

  // ../node_modules/@fluentui/theme/lib/fonts/FluentFonts.js
  var LocalizedFontNames;
  (function(LocalizedFontNames2) {
    LocalizedFontNames2.Arabic = "Segoe UI Web (Arabic)";
    LocalizedFontNames2.Cyrillic = "Segoe UI Web (Cyrillic)";
    LocalizedFontNames2.EastEuropean = "Segoe UI Web (East European)";
    LocalizedFontNames2.Greek = "Segoe UI Web (Greek)";
    LocalizedFontNames2.Hebrew = "Segoe UI Web (Hebrew)";
    LocalizedFontNames2.Thai = "Leelawadee UI Web";
    LocalizedFontNames2.Vietnamese = "Segoe UI Web (Vietnamese)";
    LocalizedFontNames2.WestEuropean = "Segoe UI Web (West European)";
    LocalizedFontNames2.Selawik = "Selawik Web";
    LocalizedFontNames2.Armenian = "Segoe UI Web (Armenian)";
    LocalizedFontNames2.Georgian = "Segoe UI Web (Georgian)";
  })(LocalizedFontNames || (LocalizedFontNames = {}));
  var LocalizedFontFamilies;
  (function(LocalizedFontFamilies2) {
    LocalizedFontFamilies2.Arabic = "'".concat(LocalizedFontNames.Arabic, "'");
    LocalizedFontFamilies2.ChineseSimplified = "'Microsoft Yahei UI', Verdana, Simsun";
    LocalizedFontFamilies2.ChineseTraditional = "'Microsoft Jhenghei UI', Pmingliu";
    LocalizedFontFamilies2.Cyrillic = "'".concat(LocalizedFontNames.Cyrillic, "'");
    LocalizedFontFamilies2.EastEuropean = "'".concat(LocalizedFontNames.EastEuropean, "'");
    LocalizedFontFamilies2.Greek = "'".concat(LocalizedFontNames.Greek, "'");
    LocalizedFontFamilies2.Hebrew = "'".concat(LocalizedFontNames.Hebrew, "'");
    LocalizedFontFamilies2.Hindi = "'Nirmala UI'";
    LocalizedFontFamilies2.Japanese = "'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka";
    LocalizedFontFamilies2.Korean = "'Malgun Gothic', Gulim";
    LocalizedFontFamilies2.Selawik = "'".concat(LocalizedFontNames.Selawik, "'");
    LocalizedFontFamilies2.Thai = "'Leelawadee UI Web', 'Kmer UI'";
    LocalizedFontFamilies2.Vietnamese = "'".concat(LocalizedFontNames.Vietnamese, "'");
    LocalizedFontFamilies2.WestEuropean = "'".concat(LocalizedFontNames.WestEuropean, "'");
    LocalizedFontFamilies2.Armenian = "'".concat(LocalizedFontNames.Armenian, "'");
    LocalizedFontFamilies2.Georgian = "'".concat(LocalizedFontNames.Georgian, "'");
  })(LocalizedFontFamilies || (LocalizedFontFamilies = {}));
  var FontSizes;
  (function(FontSizes2) {
    FontSizes2.size10 = "10px";
    FontSizes2.size12 = "12px";
    FontSizes2.size14 = "14px";
    FontSizes2.size16 = "16px";
    FontSizes2.size18 = "18px";
    FontSizes2.size20 = "20px";
    FontSizes2.size24 = "24px";
    FontSizes2.size28 = "28px";
    FontSizes2.size32 = "32px";
    FontSizes2.size42 = "42px";
    FontSizes2.size68 = "68px";
    FontSizes2.mini = "10px";
    FontSizes2.xSmall = "10px";
    FontSizes2.small = "12px";
    FontSizes2.smallPlus = "12px";
    FontSizes2.medium = "14px";
    FontSizes2.mediumPlus = "16px";
    FontSizes2.icon = "16px";
    FontSizes2.large = "18px";
    FontSizes2.xLarge = "20px";
    FontSizes2.xLargePlus = "24px";
    FontSizes2.xxLarge = "28px";
    FontSizes2.xxLargePlus = "32px";
    FontSizes2.superLarge = "42px";
    FontSizes2.mega = "68px";
  })(FontSizes || (FontSizes = {}));
  var FontWeights;
  (function(FontWeights2) {
    FontWeights2.light = 100;
    FontWeights2.semilight = 300;
    FontWeights2.regular = 400;
    FontWeights2.semibold = 600;
    FontWeights2.bold = 700;
  })(FontWeights || (FontWeights = {}));
  var IconFontSizes;
  (function(IconFontSizes2) {
    IconFontSizes2.xSmall = "10px";
    IconFontSizes2.small = "12px";
    IconFontSizes2.medium = "16px";
    IconFontSizes2.large = "20px";
  })(IconFontSizes || (IconFontSizes = {}));

  // ../node_modules/@fluentui/theme/lib/fonts/createFontStyles.js
  var FontFamilyFallbacks = "'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";
  var defaultFontFamily = "'Segoe UI', '".concat(LocalizedFontNames.WestEuropean, "'");
  var LanguageToFontMap = {
    ar: LocalizedFontFamilies.Arabic,
    bg: LocalizedFontFamilies.Cyrillic,
    cs: LocalizedFontFamilies.EastEuropean,
    el: LocalizedFontFamilies.Greek,
    et: LocalizedFontFamilies.EastEuropean,
    he: LocalizedFontFamilies.Hebrew,
    hi: LocalizedFontFamilies.Hindi,
    hr: LocalizedFontFamilies.EastEuropean,
    hu: LocalizedFontFamilies.EastEuropean,
    ja: LocalizedFontFamilies.Japanese,
    kk: LocalizedFontFamilies.EastEuropean,
    ko: LocalizedFontFamilies.Korean,
    lt: LocalizedFontFamilies.EastEuropean,
    lv: LocalizedFontFamilies.EastEuropean,
    pl: LocalizedFontFamilies.EastEuropean,
    ru: LocalizedFontFamilies.Cyrillic,
    sk: LocalizedFontFamilies.EastEuropean,
    "sr-latn": LocalizedFontFamilies.EastEuropean,
    th: LocalizedFontFamilies.Thai,
    tr: LocalizedFontFamilies.EastEuropean,
    uk: LocalizedFontFamilies.Cyrillic,
    vi: LocalizedFontFamilies.Vietnamese,
    "zh-hans": LocalizedFontFamilies.ChineseSimplified,
    "zh-hant": LocalizedFontFamilies.ChineseTraditional,
    hy: LocalizedFontFamilies.Armenian,
    ka: LocalizedFontFamilies.Georgian
  };
  function _fontFamilyWithFallbacks(fontFamily) {
    return "".concat(fontFamily, ", ").concat(FontFamilyFallbacks);
  }
  function _getLocalizedFontFamily(language) {
    for (var lang in LanguageToFontMap) {
      if (LanguageToFontMap.hasOwnProperty(lang) && language && lang.indexOf(language) === 0) {
        return LanguageToFontMap[lang];
      }
    }
    return defaultFontFamily;
  }
  function _createFont(size, weight, fontFamily) {
    return {
      fontFamily,
      MozOsxFontSmoothing: "grayscale",
      WebkitFontSmoothing: "antialiased",
      fontSize: size,
      fontWeight: weight
    };
  }
  function createFontStyles(localeCode) {
    var localizedFont = _getLocalizedFontFamily(localeCode);
    var fontFamilyWithFallback = _fontFamilyWithFallbacks(localizedFont);
    var fontStyles = {
      tiny: _createFont(FontSizes.mini, FontWeights.regular, fontFamilyWithFallback),
      xSmall: _createFont(FontSizes.xSmall, FontWeights.regular, fontFamilyWithFallback),
      small: _createFont(FontSizes.small, FontWeights.regular, fontFamilyWithFallback),
      smallPlus: _createFont(FontSizes.smallPlus, FontWeights.regular, fontFamilyWithFallback),
      medium: _createFont(FontSizes.medium, FontWeights.regular, fontFamilyWithFallback),
      mediumPlus: _createFont(FontSizes.mediumPlus, FontWeights.regular, fontFamilyWithFallback),
      large: _createFont(FontSizes.large, FontWeights.regular, fontFamilyWithFallback),
      xLarge: _createFont(FontSizes.xLarge, FontWeights.semibold, fontFamilyWithFallback),
      xLargePlus: _createFont(FontSizes.xLargePlus, FontWeights.semibold, fontFamilyWithFallback),
      xxLarge: _createFont(FontSizes.xxLarge, FontWeights.semibold, fontFamilyWithFallback),
      xxLargePlus: _createFont(FontSizes.xxLargePlus, FontWeights.semibold, fontFamilyWithFallback),
      superLarge: _createFont(FontSizes.superLarge, FontWeights.semibold, fontFamilyWithFallback),
      mega: _createFont(FontSizes.mega, FontWeights.semibold, fontFamilyWithFallback)
    };
    return fontStyles;
  }

  // ../node_modules/@fluentui/theme/lib/fonts/DefaultFontStyles.js
  var DefaultBaseUrl = "https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/assets";
  var DefaultFontStyles = createFontStyles(getLanguage());
  function _registerFontFace(fontFamily, url, fontWeight, localFontName) {
    fontFamily = "'".concat(fontFamily, "'");
    var localFontSrc = localFontName !== void 0 ? "local('".concat(localFontName, "'),") : "";
    fontFace({
      fontFamily,
      src: localFontSrc + "url('".concat(url, ".woff2') format('woff2'),") + "url('".concat(url, ".woff') format('woff')"),
      fontWeight,
      fontStyle: "normal",
      fontDisplay: "swap"
    });
  }
  function _registerFontFaceSet(baseUrl, fontFamily, cdnFolder, cdnFontName, localFontName) {
    if (cdnFontName === void 0) {
      cdnFontName = "segoeui";
    }
    var urlBase = "".concat(baseUrl, "/").concat(cdnFolder, "/").concat(cdnFontName);
    _registerFontFace(fontFamily, urlBase + "-light", FontWeights.light, localFontName && localFontName + " Light");
    _registerFontFace(fontFamily, urlBase + "-semilight", FontWeights.semilight, localFontName && localFontName + " SemiLight");
    _registerFontFace(fontFamily, urlBase + "-regular", FontWeights.regular, localFontName);
    _registerFontFace(fontFamily, urlBase + "-semibold", FontWeights.semibold, localFontName && localFontName + " SemiBold");
    _registerFontFace(fontFamily, urlBase + "-bold", FontWeights.bold, localFontName && localFontName + " Bold");
  }
  function registerDefaultFontFaces(baseUrl) {
    if (baseUrl) {
      var fontUrl = "".concat(baseUrl, "/fonts");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Thai, "leelawadeeui-thai", "leelawadeeui");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Arabic, "segoeui-arabic");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Cyrillic, "segoeui-cyrillic");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.EastEuropean, "segoeui-easteuropean");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Greek, "segoeui-greek");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Hebrew, "segoeui-hebrew");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Vietnamese, "segoeui-vietnamese");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.WestEuropean, "segoeui-westeuropean", "segoeui", "Segoe UI");
      _registerFontFaceSet(fontUrl, LocalizedFontFamilies.Selawik, "selawik", "selawik");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Armenian, "segoeui-armenian");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Georgian, "segoeui-georgian");
      _registerFontFace("Leelawadee UI Web", "".concat(fontUrl, "/leelawadeeui-thai/leelawadeeui-semilight"), FontWeights.light);
      _registerFontFace("Leelawadee UI Web", "".concat(fontUrl, "/leelawadeeui-thai/leelawadeeui-bold"), FontWeights.semibold);
    }
  }
  function _getFontBaseUrl() {
    var _a7, _b3;
    var fabricConfig = (_a7 = getWindow()) === null || _a7 === void 0 ? void 0 : _a7.FabricConfig;
    return (_b3 = fabricConfig === null || fabricConfig === void 0 ? void 0 : fabricConfig.fontBaseUrl) !== null && _b3 !== void 0 ? _b3 : DefaultBaseUrl;
  }
  registerDefaultFontFaces(_getFontBaseUrl());

  // ../node_modules/@fluentui/theme/lib/createTheme.js
  function createTheme(theme, depComments) {
    if (theme === void 0) {
      theme = {};
    }
    if (depComments === void 0) {
      depComments = false;
    }
    var isInverted = !!theme.isInverted;
    var baseTheme = {
      palette: DefaultPalette,
      effects: DefaultEffects,
      fonts: DefaultFontStyles,
      spacing: DefaultSpacing,
      isInverted,
      disableGlobalClassNames: false,
      semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, void 0, isInverted, depComments),
      rtl: void 0
    };
    return mergeThemes(baseTheme, theme);
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/CommonStyles.js
  var HighContrastSelector = "@media screen and (-ms-high-contrast: active), screen and (forced-colors: active)";
  var HighContrastSelectorWhite = (
    // eslint-disable-next-line @fluentui/max-len
    "@media screen and (-ms-high-contrast: black-on-white), screen and (forced-colors: active) and (prefers-color-scheme: light)"
  );
  var ScreenWidthMinMedium = 480;
  var ScreenWidthMinLarge = 640;
  var ScreenWidthMinXLarge = 1024;
  var ScreenWidthMinXXLarge = 1366;
  var ScreenWidthMinXXXLarge = 1920;
  var ScreenWidthMaxSmall = ScreenWidthMinMedium - 1;
  var ScreenWidthMaxMedium = ScreenWidthMinLarge - 1;
  var ScreenWidthMaxLarge = ScreenWidthMinXLarge - 1;
  var ScreenWidthMaxXLarge = ScreenWidthMinXXLarge - 1;
  var ScreenWidthMaxXXLarge = ScreenWidthMinXXXLarge - 1;
  var ScreenWidthMinUhfMobile = 768;
  function getScreenSelector(min, max) {
    var minSelector = typeof min === "number" ? " and (min-width: ".concat(min, "px)") : "";
    var maxSelector = typeof max === "number" ? " and (max-width: ".concat(max, "px)") : "";
    return "@media only screen".concat(minSelector).concat(maxSelector);
  }
  function getHighContrastNoAdjustStyle() {
    return {
      forcedColorAdjust: "none",
      MsHighContrastAdjust: "none"
    };
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/zIndexes.js
  var ZIndexes;
  (function(ZIndexes2) {
    ZIndexes2.Nav = 1;
    ZIndexes2.ScrollablePane = 1;
    ZIndexes2.FocusStyle = 1;
    ZIndexes2.Coachmark = 1e3;
    ZIndexes2.Layer = 1e6;
    ZIndexes2.KeytipLayer = 1000001;
  })(ZIndexes || (ZIndexes = {}));

  // ../node_modules/@fluentui/style-utilities/lib/styles/getFocusStyle.js
  function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly, borderRadius) {
    if (typeof insetOrOptions === "number" || !insetOrOptions) {
      return _getFocusStyleInternal(theme, {
        inset: insetOrOptions,
        position,
        highContrastStyle,
        borderColor,
        outlineColor,
        isFocusedOnly,
        borderRadius
      });
    } else {
      return _getFocusStyleInternal(theme, insetOrOptions);
    }
  }
  function _getFocusStyleInternal(theme, options) {
    var _a7, _b3;
    if (options === void 0) {
      options = {};
    }
    var borderRadius = options.borderRadius, _c3 = options.inset, inset = _c3 === void 0 ? 0 : _c3, _d3 = options.width, width = _d3 === void 0 ? 1 : _d3, _e2 = options.position, position = _e2 === void 0 ? "relative" : _e2, highContrastStyle = options.highContrastStyle, _f = options.borderColor, borderColor = _f === void 0 ? theme.palette.white : _f, _g = options.outlineColor, outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g, _h = options.isFocusedOnly, isFocusedOnly = _h === void 0 ? true : _h, pointerEvents = options.pointerEvents;
    return {
      // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.
      outline: "transparent",
      // Requirement because pseudo-element is absolutely positioned.
      position,
      selectors: (_a7 = {
        // Clear the focus border in Firefox.
        // Reference: http://stackoverflow.com/a/199319/1436671
        "::-moz-focus-inner": {
          border: "0"
        }
      }, // When the element that uses this mixin is in a :focus state, add a pseudo-element to
      // create a border.
      _a7[".".concat(IsFocusVisibleClassName, " &").concat(isFocusedOnly ? ":focus" : "", ":after")] = {
        content: '""',
        position: "absolute",
        pointerEvents,
        left: inset + 1,
        top: inset + 1,
        bottom: inset + 1,
        right: inset + 1,
        border: "".concat(width, "px solid ").concat(borderColor),
        outline: "".concat(width, "px solid ").concat(outlineColor),
        zIndex: ZIndexes.FocusStyle,
        borderRadius,
        selectors: (_b3 = {}, _b3[HighContrastSelector] = highContrastStyle, _b3)
      }, _a7)
    };
  }
  function focusClear() {
    return {
      selectors: {
        "&::-moz-focus-inner": {
          // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671
          border: 0
        },
        "&": {
          // Clear browser specific focus styles and use transparent as placeholder for focus style
          outline: "transparent"
        }
      }
    };
  }
  var getInputFocusStyle = function(borderColor, borderRadius, borderType, borderPosition) {
    var _a7, _b3, _c3;
    if (borderType === void 0) {
      borderType = "border";
    }
    if (borderPosition === void 0) {
      borderPosition = -1;
    }
    var isBorderBottom = borderType === "borderBottom";
    return {
      borderColor,
      selectors: {
        ":after": (_a7 = {
          pointerEvents: "none",
          content: "''",
          position: "absolute",
          left: isBorderBottom ? 0 : borderPosition,
          top: borderPosition,
          bottom: borderPosition,
          right: isBorderBottom ? 0 : borderPosition
        }, _a7[borderType] = "2px solid ".concat(borderColor), _a7.borderRadius = borderRadius, _a7.width = borderType === "borderBottom" ? "100%" : void 0, _a7.selectors = (_b3 = {}, _b3[HighContrastSelector] = (_c3 = {}, _c3[borderType === "border" ? "borderColor" : "borderBottomColor"] = "Highlight", _c3), _b3), _a7)
      }
    };
  };

  // ../node_modules/@fluentui/style-utilities/lib/styles/hiddenContentStyle.js
  var hiddenContentStyle = {
    position: "absolute",
    width: 1,
    height: 1,
    margin: -1,
    padding: 0,
    border: 0,
    overflow: "hidden",
    whiteSpace: "nowrap"
  };

  // ../node_modules/@fluentui/style-utilities/lib/styles/getGlobalClassNames.js
  var _getGlobalClassNames = memoizeFunction(function(classNames2, disableGlobalClassNames) {
    var styleSheet = Stylesheet.getInstance();
    if (disableGlobalClassNames) {
      return Object.keys(classNames2).reduce(function(acc, className) {
        acc[className] = styleSheet.getClassName(classNames2[className]);
        return acc;
      }, {});
    }
    return classNames2;
  });
  function getGlobalClassNames(classNames2, theme, disableGlobalClassNames) {
    return _getGlobalClassNames(classNames2, disableGlobalClassNames !== void 0 ? disableGlobalClassNames : theme.disableGlobalClassNames);
  }

  // ../node_modules/@microsoft/load-themed-styles/lib-es6/index.js
  var __assign2 = function() {
    __assign2 = Object.assign || function(t2) {
      for (var s2, i2 = 1, n3 = arguments.length; i2 < n3; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign2.apply(this, arguments);
  };
  var _root = typeof window === "undefined" ? window : window;
  var _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;
  var _themeState = initializeThemeState();
  function initializeThemeState() {
    var state = _root.__themeState__ || {
      theme: void 0,
      lastStyleElement: void 0,
      registeredStyles: []
    };
    if (!state.runState) {
      state = __assign2(__assign2({}, state), { perf: {
        count: 0,
        duration: 0
      }, runState: {
        flushTimer: 0,
        mode: 0,
        buffer: []
      } });
    }
    if (!state.registeredThemableStyles) {
      state = __assign2(__assign2({}, state), { registeredThemableStyles: [] });
    }
    _root.__themeState__ = state;
    return state;
  }
  function applyThemableStyles(stylesArray, styleRecord) {
    if (_themeState.loadStyles) {
      _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);
    } else {
      registerStyles(stylesArray);
    }
  }
  function loadTheme(theme) {
    _themeState.theme = theme;
    reloadStyles();
  }
  function clearStyles(option) {
    if (option === void 0) {
      option = 3;
    }
    if (option === 3 || option === 2) {
      clearStylesInternal(_themeState.registeredStyles);
      _themeState.registeredStyles = [];
    }
    if (option === 3 || option === 1) {
      clearStylesInternal(_themeState.registeredThemableStyles);
      _themeState.registeredThemableStyles = [];
    }
  }
  function clearStylesInternal(records) {
    records.forEach(function(styleRecord) {
      var styleElement = styleRecord && styleRecord.styleElement;
      if (styleElement && styleElement.parentElement) {
        styleElement.parentElement.removeChild(styleElement);
      }
    });
  }
  function reloadStyles() {
    if (_themeState.theme) {
      var themableStyles = [];
      for (var _i = 0, _a7 = _themeState.registeredThemableStyles; _i < _a7.length; _i++) {
        var styleRecord = _a7[_i];
        themableStyles.push(styleRecord.themableStyle);
      }
      if (themableStyles.length > 0) {
        clearStyles(
          1
          /* ClearStyleOptions.onlyThemable */
        );
        applyThemableStyles([].concat.apply([], themableStyles));
      }
    }
  }
  function resolveThemableArray(splitStyleArray) {
    var theme = _themeState.theme;
    var themable = false;
    var resolvedArray = (splitStyleArray || []).map(function(currentValue) {
      var themeSlot = currentValue.theme;
      if (themeSlot) {
        themable = true;
        var themedValue = theme ? theme[themeSlot] : void 0;
        var defaultValue = currentValue.defaultValue || "inherit";
        if (theme && !themedValue && console && !(themeSlot in theme) && typeof DEBUG !== "undefined" && DEBUG) {
          console.warn('Theming value not provided for "'.concat(themeSlot, '". Falling back to "').concat(defaultValue, '".'));
        }
        return themedValue || defaultValue;
      } else {
        return currentValue.rawString;
      }
    });
    return {
      styleString: resolvedArray.join(""),
      themable
    };
  }
  function registerStyles(styleArray) {
    if (typeof document === "undefined") {
      return;
    }
    var head = document.getElementsByTagName("head")[0];
    var styleElement = document.createElement("style");
    var _a7 = resolveThemableArray(styleArray), styleString = _a7.styleString, themable = _a7.themable;
    styleElement.setAttribute("data-load-themed-styles", "true");
    if (_styleNonce) {
      styleElement.setAttribute("nonce", _styleNonce);
    }
    styleElement.appendChild(document.createTextNode(styleString));
    _themeState.perf.count++;
    head.appendChild(styleElement);
    var ev = document.createEvent("HTMLEvents");
    ev.initEvent(
      "styleinsert",
      true,
      false
      /* cancelable */
    );
    ev.args = {
      newStyle: styleElement
    };
    document.dispatchEvent(ev);
    var record = {
      styleElement,
      themableStyle: styleArray
    };
    if (themable) {
      _themeState.registeredThemableStyles.push(record);
    } else {
      _themeState.registeredStyles.push(record);
    }
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/theme.js
  var _theme = createTheme({});
  var _onThemeChangeCallbacks = [];
  var ThemeSettingName = "theme";
  function initializeThemeInCustomizations() {
    var _a7;
    var _b3, _c3;
    var win2 = getWindow();
    if ((_b3 = win2 === null || win2 === void 0 ? void 0 : win2.FabricConfig) === null || _b3 === void 0 ? void 0 : _b3.legacyTheme) {
      loadTheme2(win2.FabricConfig.legacyTheme);
    } else if (!Customizations.getSettings([ThemeSettingName]).theme) {
      if ((_c3 = win2 === null || win2 === void 0 ? void 0 : win2.FabricConfig) === null || _c3 === void 0 ? void 0 : _c3.theme) {
        _theme = createTheme(win2.FabricConfig.theme);
      }
      Customizations.applySettings((_a7 = {}, _a7[ThemeSettingName] = _theme, _a7));
    }
  }
  initializeThemeInCustomizations();
  function getTheme(depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    if (depComments === true) {
      _theme = createTheme({}, depComments);
    }
    return _theme;
  }
  function loadTheme2(theme, depComments) {
    var _a7;
    if (depComments === void 0) {
      depComments = false;
    }
    _theme = createTheme(theme, depComments);
    loadTheme(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));
    Customizations.applySettings((_a7 = {}, _a7[ThemeSettingName] = _theme, _a7));
    _onThemeChangeCallbacks.forEach(function(callback) {
      try {
        callback(_theme);
      } catch (e2) {
      }
    });
    return _theme;
  }
  function _loadFonts(theme) {
    var lines = {};
    for (var _i = 0, _a7 = Object.keys(theme.fonts); _i < _a7.length; _i++) {
      var fontName = _a7[_i];
      var font = theme.fonts[fontName];
      for (var _b3 = 0, _c3 = Object.keys(font); _b3 < _c3.length; _b3++) {
        var propName = _c3[_b3];
        var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);
        var value = font[propName];
        if (propName === "fontSize" && typeof value === "number") {
          value = value + "px";
        }
        lines[name_1] = value;
      }
    }
    return lines;
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/GeneralStyles.js
  var normalize = {
    boxShadow: "none",
    margin: 0,
    padding: 0,
    boxSizing: "border-box"
  };

  // ../node_modules/@fluentui/style-utilities/lib/styles/getPlaceholderStyles.js
  function getPlaceholderStyles(styles2) {
    return {
      selectors: {
        "::placeholder": styles2,
        ":-ms-input-placeholder": styles2,
        "::-ms-input-placeholder": styles2
        // Edge
      }
    };
  }

  // ../node_modules/@fluentui/style-utilities/lib/classNames/AnimationClassNames.js
  var AnimationClassNames = buildClassMap(AnimationStyles);

  // ../node_modules/@fluentui/style-utilities/lib/cdn.js
  var FLUENT_CDN_BASE_URL = "https://res.cdn.office.net/files/fabric-cdn-prod_20230815.002";

  // ../node_modules/@fluentui/style-utilities/lib/version.js
  setVersion("@fluentui/style-utilities", "8.9.17");

  // ../node_modules/@fluentui/style-utilities/lib/index.js
  initializeThemeInCustomizations();

  // ../node_modules/@fluentui/react/lib/components/Callout/Callout.js
  var React28 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.base.js
  var React24 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/common/DirectionalHint.js
  var DirectionalHint = {
    /**
     * Appear above the target element, with the left edges of the callout and target aligning.
     */
    topLeftEdge: 0,
    /**
     * Appear above the target element, with the centers of the callout and target aligning.
     */
    topCenter: 1,
    /**
     * Appear above the target element, with the right edges of the callout and target aligning.
     */
    topRightEdge: 2,
    /**
     * Appear above the target element, aligning with the target element such that the callout tends toward
     * the center of the screen.
     */
    topAutoEdge: 3,
    /**
     * Appear below the target element, with the left edges of the callout and target aligning.
     */
    bottomLeftEdge: 4,
    /**
     * Appear below the target element, with the centers of the callout and target aligning.
     */
    bottomCenter: 5,
    /**
     * Appear below the target element, with the right edges of the callout and target aligning.
     */
    bottomRightEdge: 6,
    /**
     * Appear below the target element, aligning with the target element such that the callout tends toward
     * the center of the screen.
     */
    bottomAutoEdge: 7,
    /**
     * Appear to the left of the target element, with the top edges of the callout and target aligning.
     */
    leftTopEdge: 8,
    /**
     * Appear to the left of the target element, with the centers of the callout and target aligning.
     */
    leftCenter: 9,
    /**
     * Appear to the left of the target element, with the bottom edges of the callout and target aligning.
     */
    leftBottomEdge: 10,
    /**
     * Appear to the right of the target element, with the top edges of the callout and target aligning.
     */
    rightTopEdge: 11,
    /**
     * Appear to the right of the target element, with the centers of the callout and target aligning.
     */
    rightCenter: 12,
    /**
     * Appear to the right of the target element, with the bottom edges of the callout and target aligning.
     */
    rightBottomEdge: 13
  };

  // ../node_modules/@fluentui/react/lib/utilities/positioning/positioning.types.js
  var RectangleEdge;
  (function(RectangleEdge2) {
    RectangleEdge2[RectangleEdge2["top"] = 1] = "top";
    RectangleEdge2[RectangleEdge2["bottom"] = -1] = "bottom";
    RectangleEdge2[RectangleEdge2["left"] = 2] = "left";
    RectangleEdge2[RectangleEdge2["right"] = -2] = "right";
  })(RectangleEdge || (RectangleEdge = {}));
  var Position;
  (function(Position2) {
    Position2[Position2["top"] = 0] = "top";
    Position2[Position2["bottom"] = 1] = "bottom";
    Position2[Position2["start"] = 2] = "start";
    Position2[Position2["end"] = 3] = "end";
  })(Position || (Position = {}));

  // ../node_modules/@fluentui/react/lib/utilities/positioning/positioning.js
  var _a3;
  function _createPositionData(targetEdge, alignmentEdge, isAuto) {
    return {
      targetEdge,
      alignmentEdge,
      isAuto
    };
  }
  var DirectionalDictionary = (_a3 = {}, _a3[DirectionalHint.topLeftEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.left), _a3[DirectionalHint.topCenter] = _createPositionData(RectangleEdge.top), _a3[DirectionalHint.topRightEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.right), _a3[DirectionalHint.topAutoEdge] = _createPositionData(RectangleEdge.top, void 0, true), _a3[DirectionalHint.bottomLeftEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.left), _a3[DirectionalHint.bottomCenter] = _createPositionData(RectangleEdge.bottom), _a3[DirectionalHint.bottomRightEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.right), _a3[DirectionalHint.bottomAutoEdge] = _createPositionData(RectangleEdge.bottom, void 0, true), _a3[DirectionalHint.leftTopEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.top), _a3[DirectionalHint.leftCenter] = _createPositionData(RectangleEdge.left), _a3[DirectionalHint.leftBottomEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.bottom), _a3[DirectionalHint.rightTopEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.top), _a3[DirectionalHint.rightCenter] = _createPositionData(RectangleEdge.right), _a3[DirectionalHint.rightBottomEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.bottom), _a3);
  function _isRectangleWithinBounds(rect, boundingRect) {
    if (rect.top < boundingRect.top) {
      return false;
    }
    if (rect.bottom > boundingRect.bottom) {
      return false;
    }
    if (rect.left < boundingRect.left) {
      return false;
    }
    if (rect.right > boundingRect.right) {
      return false;
    }
    return true;
  }
  function _getOutOfBoundsEdges(rect, boundingRect) {
    var outOfBounds = [];
    if (rect.top < boundingRect.top) {
      outOfBounds.push(RectangleEdge.top);
    }
    if (rect.bottom > boundingRect.bottom) {
      outOfBounds.push(RectangleEdge.bottom);
    }
    if (rect.left < boundingRect.left) {
      outOfBounds.push(RectangleEdge.left);
    }
    if (rect.right > boundingRect.right) {
      outOfBounds.push(RectangleEdge.right);
    }
    return outOfBounds;
  }
  function _getEdgeValue(rect, edge) {
    return rect[RectangleEdge[edge]];
  }
  function _setEdgeValue(rect, edge, value) {
    rect[RectangleEdge[edge]] = value;
    return rect;
  }
  function _getCenterValue(rect, edge) {
    var edges = _getFlankingEdges(edge);
    return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;
  }
  function _getRelativeEdgeValue(edge, value) {
    if (edge > 0) {
      return value;
    } else {
      return value * -1;
    }
  }
  function _getRelativeRectEdgeValue(edge, rect) {
    return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));
  }
  function _getRelativeEdgeDifference(rect, hostRect, edge) {
    var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);
    return _getRelativeEdgeValue(edge, edgeDifference);
  }
  function _moveEdge(rect, edge, newValue, maintainSize) {
    if (maintainSize === void 0) {
      maintainSize = true;
    }
    var difference = _getEdgeValue(rect, edge) - newValue;
    var returnRect = _setEdgeValue(rect, edge, newValue);
    if (maintainSize) {
      returnRect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);
    }
    return returnRect;
  }
  function _alignEdges(rect, target, edge, gap) {
    if (gap === void 0) {
      gap = 0;
    }
    return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));
  }
  function _alignOppositeEdges(rect, target, targetEdge, gap) {
    if (gap === void 0) {
      gap = 0;
    }
    var oppositeEdge = targetEdge * -1;
    var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);
    return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);
  }
  function _isEdgeInBounds(rect, bounds, edge) {
    var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);
    return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);
  }
  function _getOutOfBoundsDegree(rect, bounds) {
    var breakingEdges = _getOutOfBoundsEdges(rect, bounds);
    var total = 0;
    for (var _i = 0, breakingEdges_1 = breakingEdges; _i < breakingEdges_1.length; _i++) {
      var edge = breakingEdges_1[_i];
      total += Math.pow(_getRelativeEdgeDifference(rect, bounds, edge), 2);
    }
    return total;
  }
  function _flipToFit(rect, target, bounding, positionData, gap) {
    if (gap === void 0) {
      gap = 0;
    }
    var directions = [
      RectangleEdge.left,
      RectangleEdge.right,
      RectangleEdge.bottom,
      RectangleEdge.top
    ];
    if (getRTL2()) {
      directions[0] *= -1;
      directions[1] *= -1;
    }
    var currentEstimate = rect;
    var currentEdge = positionData.targetEdge;
    var currentAlignment = positionData.alignmentEdge;
    var oobDegree;
    var bestEdge = currentEdge;
    var bestAlignment = currentAlignment;
    for (var i2 = 0; i2 < 4; i2++) {
      if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {
        var currentOOBDegree = _getOutOfBoundsDegree(currentEstimate, bounding);
        if (!oobDegree || currentOOBDegree < oobDegree) {
          oobDegree = currentOOBDegree;
          bestEdge = currentEdge;
          bestAlignment = currentAlignment;
        }
        directions.splice(directions.indexOf(currentEdge), 1);
        if (directions.length > 0) {
          if (directions.indexOf(currentEdge * -1) > -1) {
            currentEdge = currentEdge * -1;
          } else {
            currentAlignment = currentEdge;
            currentEdge = directions.slice(-1)[0];
          }
          currentEstimate = _estimatePosition(rect, target, { targetEdge: currentEdge, alignmentEdge: currentAlignment }, gap);
        }
      } else {
        return {
          elementRectangle: currentEstimate,
          targetEdge: currentEdge,
          alignmentEdge: currentAlignment
        };
      }
    }
    currentEstimate = _estimatePosition(rect, target, { targetEdge: bestEdge, alignmentEdge: bestAlignment }, gap);
    return {
      elementRectangle: currentEstimate,
      targetEdge: bestEdge,
      alignmentEdge: bestAlignment
    };
  }
  function _flipAlignmentEdge(elementEstimate, target, gap, coverTarget) {
    var alignmentEdge = elementEstimate.alignmentEdge, targetEdge = elementEstimate.targetEdge, elementRectangle = elementEstimate.elementRectangle;
    var oppositeEdge = alignmentEdge * -1;
    var newEstimate = _estimatePosition(elementRectangle, target, { targetEdge, alignmentEdge: oppositeEdge }, gap, coverTarget);
    return {
      elementRectangle: newEstimate,
      targetEdge,
      alignmentEdge: oppositeEdge
    };
  }
  function _adjustFitWithinBounds(element, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {
    if (gap === void 0) {
      gap = 0;
    }
    var alignmentEdge = positionData.alignmentEdge, alignTargetEdge = positionData.alignTargetEdge;
    var elementEstimate = {
      elementRectangle: element,
      targetEdge: positionData.targetEdge,
      alignmentEdge
    };
    if (!directionalHintFixed && !coverTarget) {
      elementEstimate = _flipToFit(element, target, bounding, positionData, gap);
    }
    var outOfBounds = _getOutOfBoundsEdges(elementEstimate.elementRectangle, bounding);
    var fixedEdge = directionalHintFixed ? -elementEstimate.targetEdge : void 0;
    if (outOfBounds.length > 0) {
      if (alignTargetEdge) {
        if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {
          var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);
          if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {
            return flippedElementEstimate;
          } else {
            elementEstimate = _alignOutOfBoundsEdges(_getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding), elementEstimate, bounding, fixedEdge);
          }
        } else {
          elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
        }
      } else {
        elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
      }
    }
    return elementEstimate;
  }
  function _alignOutOfBoundsEdges(outOfBoundsEdges, elementEstimate, bounding, preserveEdge) {
    for (var _i = 0, outOfBoundsEdges_1 = outOfBoundsEdges; _i < outOfBoundsEdges_1.length; _i++) {
      var direction = outOfBoundsEdges_1[_i];
      var edgeAttempt = void 0;
      if (preserveEdge && preserveEdge === direction * -1) {
        edgeAttempt = _moveEdge(elementEstimate.elementRectangle, direction, _getEdgeValue(bounding, direction), false);
        elementEstimate.forcedInBounds = true;
      } else {
        edgeAttempt = _alignEdges(elementEstimate.elementRectangle, bounding, direction);
        var inBounds = _isEdgeInBounds(edgeAttempt, bounding, direction * -1);
        if (!inBounds) {
          edgeAttempt = _moveEdge(edgeAttempt, direction * -1, _getEdgeValue(bounding, direction * -1), false);
          elementEstimate.forcedInBounds = true;
        }
      }
      elementEstimate.elementRectangle = edgeAttempt;
    }
    return elementEstimate;
  }
  function _centerEdgeToPoint(rect, edge, point) {
    var positiveEdge = _getFlankingEdges(edge).positiveEdge;
    var elementMiddle = _getCenterValue(rect, edge);
    var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);
    return _moveEdge(rect, positiveEdge, point - distanceToMiddle);
  }
  function _estimatePosition(elementToPosition, target, positionData, gap, coverTarget) {
    if (gap === void 0) {
      gap = 0;
    }
    var estimatedElementPosition = new Rectangle(elementToPosition.left, elementToPosition.right, elementToPosition.top, elementToPosition.bottom);
    var alignmentEdge = positionData.alignmentEdge, targetEdge = positionData.targetEdge;
    var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
    estimatedElementPosition = coverTarget ? _alignEdges(estimatedElementPosition, target, targetEdge, gap) : _alignOppositeEdges(estimatedElementPosition, target, targetEdge, gap);
    if (!alignmentEdge) {
      var targetMiddlePoint = _getCenterValue(target, targetEdge);
      estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);
    } else {
      estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);
    }
    return estimatedElementPosition;
  }
  function _getFlankingEdges(edge) {
    if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {
      return {
        positiveEdge: RectangleEdge.left,
        negativeEdge: RectangleEdge.right
      };
    } else {
      return {
        positiveEdge: RectangleEdge.top,
        negativeEdge: RectangleEdge.bottom
      };
    }
  }
  function _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {
    if (bounds && Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) > Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {
      return returnEdge * -1;
    }
    return returnEdge;
  }
  function _isEdgeOnBounds(elementRectangle, edge, bounds) {
    return bounds !== void 0 && _getEdgeValue(elementRectangle, edge) === _getEdgeValue(bounds, edge);
  }
  function _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget, doNotFinalizeReturnEdge, forceWithinBounds) {
    var returnValue = {};
    var hostRect = _getRectangleFromElement(hostElement);
    var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
    var returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;
    if (!doNotFinalizeReturnEdge || _isEdgeOnBounds(elementRectangle, getOppositeEdge(returnEdge), bounds)) {
      returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);
    }
    returnValue[RectangleEdge[elementEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);
    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);
    if (forceWithinBounds) {
      returnValue[RectangleEdge[elementEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge * -1);
      returnValue[RectangleEdge[returnEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge * -1);
    }
    return returnValue;
  }
  function _calculateActualBeakWidthInPixels(beakWidth) {
    return Math.sqrt(beakWidth * beakWidth * 2);
  }
  function _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {
    if (directionalHint === void 0) {
      directionalHint = DirectionalHint.bottomAutoEdge;
    }
    if (previousPositions) {
      return {
        alignmentEdge: previousPositions.alignmentEdge,
        isAuto: previousPositions.isAuto,
        targetEdge: previousPositions.targetEdge
      };
    }
    var positionInformation = __assign({}, DirectionalDictionary[directionalHint]);
    if (getRTL2()) {
      if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {
        positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;
      }
      return directionalHintForRTL !== void 0 ? DirectionalDictionary[directionalHintForRTL] : positionInformation;
    }
    return positionInformation;
  }
  function _getAlignmentData(positionData, target, boundingRect, coverTarget, alignTargetEdge) {
    if (positionData.isAuto) {
      positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);
    }
    positionData.alignTargetEdge = alignTargetEdge;
    return positionData;
  }
  function getClosestEdge(targetEdge, target, boundingRect) {
    var targetCenter = _getCenterValue(target, targetEdge);
    var boundingCenter = _getCenterValue(boundingRect, targetEdge);
    var _a7 = _getFlankingEdges(targetEdge), positiveEdge = _a7.positiveEdge, negativeEdge = _a7.negativeEdge;
    if (targetCenter <= boundingCenter) {
      return positiveEdge;
    } else {
      return negativeEdge;
    }
  }
  function _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {
    var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap, coverTarget);
    if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {
      return {
        elementRectangle: estimatedElementPosition,
        targetEdge: positionData.targetEdge,
        alignmentEdge: positionData.alignmentEdge
      };
    } else {
      return _adjustFitWithinBounds(estimatedElementPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget);
    }
  }
  function _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {
    var targetEdge = elementPosition.targetEdge * -1;
    var actualElement = new Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);
    var returnValue = {};
    var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);
    var beakEdgeDifference = _getRelativeEdgeDifference(elementPosition.elementRectangle, elementPosition.targetRectangle, targetEdge);
    var showBeak = beakEdgeDifference > Math.abs(_getEdgeValue(positionedBeak, targetEdge));
    returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);
    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);
    return {
      elementPosition: __assign({}, returnValue),
      closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),
      targetEdge,
      hideBeak: !showBeak
    };
  }
  function _positionBeak(beakWidth, elementPosition) {
    var target = elementPosition.targetRectangle;
    var _a7 = _getFlankingEdges(elementPosition.targetEdge), positiveEdge = _a7.positiveEdge, negativeEdge = _a7.negativeEdge;
    var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);
    var elementBounds = new Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);
    var beakPosition = new Rectangle(0, beakWidth, 0, beakWidth);
    beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);
    beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));
    if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {
      beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);
    } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {
      beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);
    }
    return beakPosition;
  }
  function _getRectangleFromElement(element) {
    var clientRect = element.getBoundingClientRect();
    return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);
  }
  function _getRectangleFromIRect(rect) {
    return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);
  }
  function _getTargetRect(bounds, target) {
    var targetRectangle;
    if (target) {
      if (!!target.preventDefault) {
        var ev = target;
        targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);
      } else if (!!target.getBoundingClientRect) {
        targetRectangle = _getRectangleFromElement(target);
      } else {
        var rectOrPoint = target;
        var left = rectOrPoint.left || rectOrPoint.x;
        var top_1 = rectOrPoint.top || rectOrPoint.y;
        var right = rectOrPoint.right || left;
        var bottom = rectOrPoint.bottom || top_1;
        targetRectangle = new Rectangle(left, right, top_1, bottom);
      }
      if (!_isRectangleWithinBounds(targetRectangle, bounds)) {
        var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);
        for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {
          var direction = outOfBounds_1[_i];
          targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];
        }
      }
    } else {
      targetRectangle = new Rectangle(0, 0, 0, 0);
    }
    return targetRectangle;
  }
  function _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {
    var gap = props.gapSpace ? props.gapSpace : 0;
    var targetRect = _getTargetRect(boundingRect, props.target);
    var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);
    var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap, props.directionalHintFixed, props.coverTarget);
    return __assign(__assign({}, positionedElement), { targetRectangle: targetRect });
  }
  function _finalizePositionData(positionedElement, hostElement, bounds, coverTarget, doNotFinalizeReturnEdge) {
    var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget, doNotFinalizeReturnEdge, positionedElement.forcedInBounds);
    return {
      elementPosition: finalizedElement,
      targetEdge: positionedElement.targetEdge,
      alignmentEdge: positionedElement.alignmentEdge
    };
  }
  function _positionCallout(props, hostElement, callout, previousPositions, doNotFinalizeReturnEdge) {
    var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;
    var gap = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);
    var positionProps = props;
    positionProps.gapSpace = gap;
    var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);
    var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);
    var beakPositioned = _positionBeak(beakWidth, positionedElement);
    var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);
    return __assign(__assign({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge)), { beakPosition: finalizedBeakPosition });
  }
  function _positionCard(props, hostElement, callout, previousPositions) {
    return _positionCallout(props, hostElement, callout, previousPositions, true);
  }
  function positionCallout(props, hostElement, elementToPosition, previousPositions) {
    return _positionCallout(props, hostElement, elementToPosition, previousPositions);
  }
  function positionCard(props, hostElement, elementToPosition, previousPositions) {
    return _positionCard(props, hostElement, elementToPosition, previousPositions);
  }
  function getOppositeEdge(edge) {
    return edge * -1;
  }
  function _getBoundsFromTargetWindow(target, targetWindow) {
    var segments = void 0;
    if (targetWindow.getWindowSegments) {
      segments = targetWindow.getWindowSegments();
    }
    if (segments === void 0 || segments.length <= 1) {
      return {
        top: 0,
        left: 0,
        right: targetWindow.innerWidth,
        bottom: targetWindow.innerHeight,
        width: targetWindow.innerWidth,
        height: targetWindow.innerHeight
      };
    }
    var x = 0;
    var y2 = 0;
    if (target !== null && !!target.getBoundingClientRect) {
      var clientRect = target.getBoundingClientRect();
      x = (clientRect.left + clientRect.right) / 2;
      y2 = (clientRect.top + clientRect.bottom) / 2;
    } else if (target !== null) {
      x = target.left || target.x;
      y2 = target.top || target.y;
    }
    var bounds = { top: 0, left: 0, right: 0, bottom: 0, width: 0, height: 0 };
    for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
      var segment = segments_1[_i];
      if (x && segment.left <= x && segment.right >= x && y2 && segment.top <= y2 && segment.bottom >= y2) {
        bounds = {
          top: segment.top,
          left: segment.left,
          right: segment.right,
          bottom: segment.bottom,
          width: segment.width,
          height: segment.height
        };
      }
    }
    return bounds;
  }
  function getBoundsFromTargetWindow(target, targetWindow) {
    return _getBoundsFromTargetWindow(target, targetWindow);
  }

  // ../node_modules/@fluentui/react/lib/components/Popup/Popup.js
  var React23 = __toESM(require_react());

  // ../node_modules/@fluentui/react-hooks/lib/version.js
  setVersion("@fluentui/react-hooks", "8.6.29");

  // ../node_modules/@fluentui/react-hooks/lib/useAsync.js
  var React12 = __toESM(require_react());
  function useAsync() {
    var asyncRef = React12.useRef();
    if (!asyncRef.current) {
      asyncRef.current = new Async();
    }
    React12.useEffect(function() {
      return function() {
        var _a7;
        (_a7 = asyncRef.current) === null || _a7 === void 0 ? void 0 : _a7.dispose();
        asyncRef.current = void 0;
      };
    }, []);
    return asyncRef.current;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useConst.js
  var React13 = __toESM(require_react());
  function useConst(initialValue) {
    var ref = React13.useRef();
    if (ref.current === void 0) {
      ref.current = {
        value: typeof initialValue === "function" ? initialValue() : initialValue
      };
    }
    return ref.current.value;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useControllableValue.js
  var React14 = __toESM(require_react());
  function useControllableValue(controlledValue, defaultUncontrolledValue, onChange) {
    var _a7 = React14.useState(defaultUncontrolledValue), value = _a7[0], setValue = _a7[1];
    var isControlled2 = useConst(controlledValue !== void 0);
    var currentValue = isControlled2 ? controlledValue : value;
    var valueRef = React14.useRef(currentValue);
    var onChangeRef = React14.useRef(onChange);
    React14.useEffect(function() {
      valueRef.current = currentValue;
      onChangeRef.current = onChange;
    });
    var setValueOrCallOnChange = useConst(function() {
      return function(update, ev) {
        var newValue = typeof update === "function" ? update(valueRef.current) : update;
        if (onChangeRef.current) {
          onChangeRef.current(ev, newValue);
        }
        if (!isControlled2) {
          setValue(newValue);
        }
      };
    });
    return [currentValue, setValueOrCallOnChange];
  }

  // ../node_modules/@fluentui/react-hooks/lib/useEventCallback.js
  var React15 = __toESM(require_react());
  function useEventCallback(fn) {
    var callbackRef = React15.useRef(function() {
      throw new Error("Cannot call an event handler while rendering");
    });
    useIsomorphicLayoutEffect(function() {
      callbackRef.current = fn;
    }, [fn]);
    return useConst(function() {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var callback = callbackRef.current;
        return callback.apply(void 0, args);
      };
    });
  }

  // ../node_modules/@fluentui/react-hooks/lib/useId.js
  var React16 = __toESM(require_react());
  function useId(prefix, providedId) {
    var ref = React16.useRef(providedId);
    if (!ref.current) {
      ref.current = getId(prefix);
    }
    return ref.current;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useMergedRefs.js
  var React17 = __toESM(require_react());
  function useMergedRefs() {
    var refs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      refs[_i] = arguments[_i];
    }
    var mergedCallback = React17.useCallback(function(value) {
      mergedCallback.current = value;
      for (var _i2 = 0, refs_1 = refs; _i2 < refs_1.length; _i2++) {
        var ref = refs_1[_i2];
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
      }
    }, __spreadArray([], refs, true));
    return mergedCallback;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useOnEvent.js
  var React18 = __toESM(require_react());
  function useOnEvent(element, eventName, callback, useCapture) {
    var callbackRef = React18.useRef(callback);
    callbackRef.current = callback;
    React18.useEffect(function() {
      var actualElement = element && "current" in element ? element.current : element;
      if (!actualElement) {
        return;
      }
      var dispose = on(actualElement, eventName, function(ev) {
        return callbackRef.current(ev);
      }, useCapture);
      return dispose;
    }, [element, eventName, useCapture]);
  }

  // ../node_modules/@fluentui/react-hooks/lib/usePrevious.js
  var import_react = __toESM(require_react());
  function usePrevious(value) {
    var ref = (0, import_react.useRef)();
    (0, import_react.useEffect)(function() {
      ref.current = value;
    });
    return ref.current;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useTarget.js
  var React20 = __toESM(require_react());

  // ../node_modules/@fluentui/react-window-provider/lib/WindowProvider.js
  var React19 = __toESM(require_react());
  var WindowContext = React19.createContext({
    window: typeof window === "object" ? window : void 0
  });
  var useWindow = function() {
    return React19.useContext(WindowContext).window;
  };
  var useDocument = function() {
    var _a7;
    return (_a7 = React19.useContext(WindowContext).window) === null || _a7 === void 0 ? void 0 : _a7.document;
  };

  // ../node_modules/@fluentui/react-hooks/lib/useTarget.js
  function useTarget(target, hostElement) {
    var previousTargetProp = React20.useRef();
    var targetRef = React20.useRef(null);
    var targetWindow = useWindow();
    if (!target || target !== previousTargetProp.current || typeof target === "string") {
      var currentElement = hostElement === null || hostElement === void 0 ? void 0 : hostElement.current;
      if (target) {
        if (typeof target === "string") {
          var currentDoc = getDocument(currentElement);
          targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;
        } else if ("stopPropagation" in target) {
          targetRef.current = target;
        } else if ("getBoundingClientRect" in target) {
          targetRef.current = target;
        } else if ("current" in target) {
          targetRef.current = target.current;
        } else {
          targetRef.current = target;
        }
      }
      previousTargetProp.current = target;
    }
    return [targetRef, targetWindow];
  }

  // ../node_modules/@fluentui/react-hooks/lib/useUnmount.js
  var React21 = __toESM(require_react());
  var useUnmount = function(callback) {
    var unmountRef = React21.useRef(callback);
    unmountRef.current = callback;
    React21.useEffect(function() {
      return function() {
        var _a7;
        (_a7 = unmountRef.current) === null || _a7 === void 0 ? void 0 : _a7.call(unmountRef);
      };
    }, []);
  };

  // ../node_modules/@fluentui/react-hooks/lib/useWarnings.js
  var React22 = __toESM(require_react());
  var warningId = 0;
  function useWarnings(options) {
    if (true) {
      var name_1 = options.name, props = options.props, _a7 = options.other, other = _a7 === void 0 ? [] : _a7, conditionallyRequired = options.conditionallyRequired, deprecations = options.deprecations, mutuallyExclusive = options.mutuallyExclusive, controlledUsage = options.controlledUsage;
      var hasWarnedRef = React22.useRef(false);
      var componentId = useConst(function() {
        return "useWarnings_".concat(warningId++);
      });
      var oldProps = usePrevious(props);
      if (!hasWarnedRef.current) {
        hasWarnedRef.current = true;
        for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {
          var warning = other_1[_i];
          warn(warning);
        }
        if (conditionallyRequired) {
          for (var _b3 = 0, conditionallyRequired_1 = conditionallyRequired; _b3 < conditionallyRequired_1.length; _b3++) {
            var req = conditionallyRequired_1[_b3];
            warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);
          }
        }
        deprecations && warnDeprecations(name_1, props, deprecations);
        mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);
      }
      controlledUsage && warnControlledUsage(__assign(__assign({}, controlledUsage), { componentId, props, componentName: name_1, oldProps }));
    }
  }

  // ../node_modules/@fluentui/react/lib/components/Popup/Popup.js
  function useScrollbarAsync(props, root2) {
    var async = useAsync();
    var _a7 = React23.useState(false), needsVerticalScrollBarState = _a7[0], setNeedsVerticalScrollBar = _a7[1];
    React23.useEffect(function() {
      async.requestAnimationFrame(function() {
        var _a8;
        if (props.style && props.style.overflowY) {
          return;
        }
        var needsVerticalScrollBar = false;
        if (root2 && root2.current && ((_a8 = root2.current) === null || _a8 === void 0 ? void 0 : _a8.firstElementChild)) {
          var rootHeight = root2.current.clientHeight;
          var firstChildHeight = root2.current.firstElementChild.clientHeight;
          if (rootHeight > 0 && firstChildHeight > rootHeight) {
            needsVerticalScrollBar = firstChildHeight - rootHeight > 1;
          }
        }
        if (needsVerticalScrollBarState !== needsVerticalScrollBar) {
          setNeedsVerticalScrollBar(needsVerticalScrollBar);
        }
      });
      return function() {
        return async.dispose();
      };
    });
    return needsVerticalScrollBarState;
  }
  function defaultFocusRestorer(options) {
    var originalElement = options.originalElement, containsFocus = options.containsFocus;
    if (originalElement && containsFocus && originalElement !== getWindow()) {
      setTimeout(function() {
        var _a7;
        (_a7 = originalElement.focus) === null || _a7 === void 0 ? void 0 : _a7.call(originalElement);
      }, 0);
    }
  }
  function useRestoreFocus(props, root2) {
    var _a7 = props.onRestoreFocus, onRestoreFocus = _a7 === void 0 ? defaultFocusRestorer : _a7;
    var originalFocusedElement = React23.useRef();
    var containsFocus = React23.useRef(false);
    React23.useEffect(function() {
      originalFocusedElement.current = getDocument().activeElement;
      if (doesElementContainFocus(root2.current)) {
        containsFocus.current = true;
      }
      return function() {
        var _a8;
        onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({
          originalElement: originalFocusedElement.current,
          containsFocus: containsFocus.current,
          documentContainsFocus: ((_a8 = getDocument()) === null || _a8 === void 0 ? void 0 : _a8.hasFocus()) || false
        });
        originalFocusedElement.current = void 0;
      };
    }, []);
    useOnEvent(root2, "focus", React23.useCallback(function() {
      containsFocus.current = true;
    }, []), true);
    useOnEvent(root2, "blur", React23.useCallback(function(ev) {
      if (root2.current && ev.relatedTarget && !root2.current.contains(ev.relatedTarget)) {
        containsFocus.current = false;
      }
    }, []), true);
  }
  function useHideSiblingNodes(props, root2) {
    var shouldHideSiblings = String(props["aria-modal"]).toLowerCase() === "true" && props.enableAriaHiddenSiblings;
    React23.useEffect(function() {
      if (!(shouldHideSiblings && root2.current)) {
        return;
      }
      var unmodalize2 = modalize(root2.current);
      return unmodalize2;
    }, [root2, shouldHideSiblings]);
  }
  var Popup = React23.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var props = getPropsWithDefaults({ shouldRestoreFocus: true, enableAriaHiddenSiblings: true }, propsWithoutDefaults);
    var root2 = React23.useRef();
    var mergedRootRef = useMergedRefs(root2, forwardedRef);
    useHideSiblingNodes(props, root2);
    useRestoreFocus(props, root2);
    var role = props.role, className = props.className, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaDescribedBy = props.ariaDescribedBy, style = props.style, children = props.children, onDismiss = props.onDismiss;
    var needsVerticalScrollBar = useScrollbarAsync(props, root2);
    var onKeyDown = React23.useCallback(function(ev) {
      switch (ev.which) {
        case KeyCodes.escape:
          if (onDismiss) {
            onDismiss(ev);
            ev.preventDefault();
            ev.stopPropagation();
          }
          break;
      }
    }, [onDismiss]);
    var win2 = useWindow();
    useOnEvent(win2, "keydown", onKeyDown);
    return React23.createElement("div", __assign({ ref: mergedRootRef }, getNativeProps(props, divProperties), { className, role, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, onKeyDown, style: __assign({ overflowY: needsVerticalScrollBar ? "scroll" : void 0, outline: "none" }, style) }), children);
  });
  Popup.displayName = "Popup";

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.base.js
  var _a4;
  var COMPONENT_NAME = "CalloutContentBase";
  var ANIMATIONS = (_a4 = {}, _a4[RectangleEdge.top] = AnimationClassNames.slideUpIn10, _a4[RectangleEdge.bottom] = AnimationClassNames.slideDownIn10, _a4[RectangleEdge.left] = AnimationClassNames.slideLeftIn10, _a4[RectangleEdge.right] = AnimationClassNames.slideRightIn10, _a4);
  var BEAK_ORIGIN_POSITION = { top: 0, left: 0 };
  var OFF_SCREEN_STYLE = {
    opacity: 0,
    filter: "opacity(0)",
    pointerEvents: "none"
  };
  var ARIA_ROLE_ATTRIBUTES = ["role", "aria-roledescription"];
  var DEFAULT_PROPS = {
    preventDismissOnLostFocus: false,
    preventDismissOnScroll: false,
    preventDismissOnResize: false,
    isBeakVisible: true,
    beakWidth: 16,
    gapSpace: 0,
    minPagePadding: 8,
    directionalHint: DirectionalHint.bottomAutoEdge
  };
  var getClassNames = classNamesFunction({
    disableCaching: true
    // disabling caching because stylesProp.position mutates often
  });
  function useBounds(_a7, targetRef, targetWindow) {
    var bounds = _a7.bounds, _b3 = _a7.minPagePadding, minPagePadding = _b3 === void 0 ? DEFAULT_PROPS.minPagePadding : _b3, target = _a7.target;
    var _c3 = React24.useState(false), targetWindowResized = _c3[0], setTargetWindowResized = _c3[1];
    var cachedBounds = React24.useRef();
    var getBounds = React24.useCallback(function() {
      if (!cachedBounds.current || targetWindowResized) {
        var currentBounds = typeof bounds === "function" ? targetWindow ? bounds(target, targetWindow) : void 0 : bounds;
        if (!currentBounds && targetWindow) {
          currentBounds = getBoundsFromTargetWindow(targetRef.current, targetWindow);
          currentBounds = {
            top: currentBounds.top + minPagePadding,
            left: currentBounds.left + minPagePadding,
            right: currentBounds.right - minPagePadding,
            bottom: currentBounds.bottom - minPagePadding,
            width: currentBounds.width - minPagePadding * 2,
            height: currentBounds.height - minPagePadding * 2
          };
        }
        cachedBounds.current = currentBounds;
        targetWindowResized && setTargetWindowResized(false);
      }
      return cachedBounds.current;
    }, [bounds, minPagePadding, target, targetRef, targetWindow, targetWindowResized]);
    var async = useAsync();
    useOnEvent(targetWindow, "resize", async.debounce(function() {
      setTargetWindowResized(true);
    }, 500, { leading: true }));
    return getBounds;
  }
  function useMaxHeight(_a7, getBounds, positions) {
    var _b3;
    var calloutMaxHeight = _a7.calloutMaxHeight, finalHeight = _a7.finalHeight, directionalHint = _a7.directionalHint, directionalHintFixed = _a7.directionalHintFixed, hidden = _a7.hidden;
    var _c3 = React24.useState(), maxHeight = _c3[0], setMaxHeight = _c3[1];
    var _d3 = (_b3 = positions === null || positions === void 0 ? void 0 : positions.elementPosition) !== null && _b3 !== void 0 ? _b3 : {}, top = _d3.top, bottom = _d3.bottom;
    React24.useEffect(function() {
      var _a8;
      var _b4 = (_a8 = getBounds()) !== null && _a8 !== void 0 ? _a8 : {}, topBounds = _b4.top, bottomBounds = _b4.bottom;
      var calculatedHeight;
      if (typeof top === "number" && bottomBounds) {
        calculatedHeight = bottomBounds - top;
      } else if (typeof bottom === "number" && typeof topBounds === "number" && bottomBounds) {
        calculatedHeight = bottomBounds - topBounds - bottom;
      }
      if (!calloutMaxHeight && !hidden || calloutMaxHeight && calculatedHeight && calloutMaxHeight > calculatedHeight) {
        setMaxHeight(calculatedHeight);
      } else if (calloutMaxHeight) {
        setMaxHeight(calloutMaxHeight);
      } else {
        setMaxHeight(void 0);
      }
    }, [bottom, calloutMaxHeight, finalHeight, directionalHint, directionalHintFixed, getBounds, hidden, positions, top]);
    return maxHeight;
  }
  function usePositions(props, hostElement, calloutElement, targetRef, getBounds) {
    var _a7 = React24.useState(), positions = _a7[0], setPositions = _a7[1];
    var positionAttempts = React24.useRef(0);
    var previousTarget = React24.useRef();
    var async = useAsync();
    var hidden = props.hidden, target = props.target, finalHeight = props.finalHeight, calloutMaxHeight = props.calloutMaxHeight, onPositioned = props.onPositioned, directionalHint = props.directionalHint;
    React24.useEffect(function() {
      if (!hidden) {
        var timerId_1 = async.requestAnimationFrame(function() {
          var _a8, _b3;
          if (hostElement.current && calloutElement) {
            var currentProps = __assign(__assign({}, props), { target: targetRef.current, bounds: getBounds() });
            var dupeCalloutElement = calloutElement.cloneNode(true);
            dupeCalloutElement.style.maxHeight = calloutMaxHeight ? "".concat(calloutMaxHeight) : "";
            dupeCalloutElement.style.visibility = "hidden";
            (_a8 = calloutElement.parentElement) === null || _a8 === void 0 ? void 0 : _a8.appendChild(dupeCalloutElement);
            var previousPositions = previousTarget.current === target ? positions : void 0;
            var newPositions = finalHeight ? positionCard(currentProps, hostElement.current, dupeCalloutElement, previousPositions) : positionCallout(currentProps, hostElement.current, dupeCalloutElement, previousPositions);
            (_b3 = calloutElement.parentElement) === null || _b3 === void 0 ? void 0 : _b3.removeChild(dupeCalloutElement);
            if (!positions && newPositions || positions && newPositions && !arePositionsEqual(positions, newPositions) && positionAttempts.current < 5) {
              positionAttempts.current++;
              setPositions(newPositions);
            } else if (positionAttempts.current > 0) {
              positionAttempts.current = 0;
              onPositioned === null || onPositioned === void 0 ? void 0 : onPositioned(positions);
            }
          }
        }, calloutElement);
        previousTarget.current = target;
        return function() {
          async.cancelAnimationFrame(timerId_1);
          previousTarget.current = void 0;
        };
      } else {
        setPositions(void 0);
        positionAttempts.current = 0;
      }
    }, [
      hidden,
      directionalHint,
      async,
      calloutElement,
      calloutMaxHeight,
      hostElement,
      targetRef,
      finalHeight,
      getBounds,
      onPositioned,
      positions,
      props,
      target
    ]);
    return positions;
  }
  function useAutoFocus(_a7, positions, calloutElement) {
    var hidden = _a7.hidden, setInitialFocus = _a7.setInitialFocus;
    var async = useAsync();
    var hasPositions = !!positions;
    React24.useEffect(function() {
      if (!hidden && setInitialFocus && hasPositions && calloutElement) {
        var timerId_2 = async.requestAnimationFrame(function() {
          return focusFirstChild(calloutElement);
        }, calloutElement);
        return function() {
          return async.cancelAnimationFrame(timerId_2);
        };
      }
    }, [hidden, hasPositions, async, calloutElement, setInitialFocus]);
  }
  function useDismissHandlers(_a7, positions, hostElement, targetRef, targetWindow) {
    var hidden = _a7.hidden, onDismiss = _a7.onDismiss, preventDismissOnScroll = _a7.preventDismissOnScroll, preventDismissOnResize = _a7.preventDismissOnResize, preventDismissOnLostFocus = _a7.preventDismissOnLostFocus, dismissOnTargetClick = _a7.dismissOnTargetClick, shouldDismissOnWindowFocus = _a7.shouldDismissOnWindowFocus, preventDismissOnEvent = _a7.preventDismissOnEvent;
    var isMouseDownOnPopup = React24.useRef(false);
    var async = useAsync();
    var mouseDownHandlers = useConst([
      function() {
        isMouseDownOnPopup.current = true;
      },
      function() {
        isMouseDownOnPopup.current = false;
      }
    ]);
    var positionsExists = !!positions;
    React24.useEffect(function() {
      var dismissOnScroll = function(ev) {
        if (positionsExists && !preventDismissOnScroll) {
          dismissOnClickOrScroll(ev);
        }
      };
      var dismissOnResize = function(ev) {
        if (!preventDismissOnResize && !(preventDismissOnEvent && preventDismissOnEvent(ev))) {
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var dismissOnLostFocus = function(ev) {
        if (!preventDismissOnLostFocus) {
          dismissOnClickOrScroll(ev);
        }
      };
      var dismissOnClickOrScroll = function(ev) {
        var eventPaths = ev.composedPath ? ev.composedPath() : [];
        var target = eventPaths.length > 0 ? eventPaths[0] : ev.target;
        var isEventTargetOutsideCallout = hostElement.current && !elementContains(hostElement.current, target);
        if (isEventTargetOutsideCallout && isMouseDownOnPopup.current) {
          isMouseDownOnPopup.current = false;
          return;
        }
        if (!targetRef.current && isEventTargetOutsideCallout || ev.target !== targetWindow && isEventTargetOutsideCallout && (!targetRef.current || "stopPropagation" in targetRef.current || dismissOnTargetClick || target !== targetRef.current && !elementContains(targetRef.current, target))) {
          if (preventDismissOnEvent && preventDismissOnEvent(ev)) {
            return;
          }
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var dismissOnTargetWindowBlur = function(ev) {
        if (!shouldDismissOnWindowFocus) {
          return;
        }
        if ((preventDismissOnEvent && !preventDismissOnEvent(ev) || !preventDismissOnEvent && !preventDismissOnLostFocus) && !(targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.hasFocus()) && ev.relatedTarget === null) {
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var disposablesPromise = new Promise(function(resolve) {
        async.setTimeout(function() {
          if (!hidden && targetWindow) {
            var disposables_1 = [
              on(targetWindow, "scroll", dismissOnScroll, true),
              on(targetWindow, "resize", dismissOnResize, true),
              on(targetWindow.document.documentElement, "focus", dismissOnLostFocus, true),
              on(targetWindow.document.documentElement, "click", dismissOnLostFocus, true),
              on(targetWindow, "blur", dismissOnTargetWindowBlur, true)
            ];
            resolve(function() {
              disposables_1.forEach(function(dispose) {
                return dispose();
              });
            });
          }
        }, 0);
      });
      return function() {
        disposablesPromise.then(function(dispose) {
          return dispose();
        });
      };
    }, [
      hidden,
      async,
      hostElement,
      targetRef,
      targetWindow,
      onDismiss,
      shouldDismissOnWindowFocus,
      dismissOnTargetClick,
      preventDismissOnLostFocus,
      preventDismissOnResize,
      preventDismissOnScroll,
      positionsExists,
      preventDismissOnEvent
    ]);
    return mouseDownHandlers;
  }
  var CalloutContentBase = React24.memo(React24.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);
    var styles2 = props.styles, style = props.style, ariaLabel = props.ariaLabel, ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, className = props.className, isBeakVisible = props.isBeakVisible, children = props.children, beakWidth = props.beakWidth, calloutWidth = props.calloutWidth, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer, finalHeight = props.finalHeight, _a7 = props.hideOverflow, hideOverflow = _a7 === void 0 ? !!finalHeight : _a7, backgroundColor = props.backgroundColor, calloutMaxHeight = props.calloutMaxHeight, onScroll = props.onScroll, _b3 = props.shouldRestoreFocus, shouldRestoreFocus = _b3 === void 0 ? true : _b3, target = props.target, hidden = props.hidden, onLayerMounted = props.onLayerMounted, popupProps = props.popupProps;
    var hostElement = React24.useRef(null);
    var _c3 = React24.useState(null), calloutElement = _c3[0], setCalloutElement = _c3[1];
    var calloutCallback = React24.useCallback(function(calloutEl) {
      setCalloutElement(calloutEl);
    }, []);
    var rootRef = useMergedRefs(hostElement, forwardedRef);
    var _d3 = useTarget(props.target, {
      current: calloutElement
    }), targetRef = _d3[0], targetWindow = _d3[1];
    var getBounds = useBounds(props, targetRef, targetWindow);
    var positions = usePositions(props, hostElement, calloutElement, targetRef, getBounds);
    var maxHeight = useMaxHeight(props, getBounds, positions);
    var _e2 = useDismissHandlers(props, positions, hostElement, targetRef, targetWindow), mouseDownOnPopup = _e2[0], mouseUpOnPopup = _e2[1];
    var isForcedInBounds = (positions === null || positions === void 0 ? void 0 : positions.elementPosition.top) && (positions === null || positions === void 0 ? void 0 : positions.elementPosition.bottom);
    var cssPositions = __assign(__assign({}, positions === null || positions === void 0 ? void 0 : positions.elementPosition), { maxHeight });
    if (isForcedInBounds) {
      cssPositions.bottom = void 0;
    }
    useAutoFocus(props, positions, calloutElement);
    React24.useEffect(function() {
      if (!hidden) {
        onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
      }
    }, [hidden]);
    if (!targetWindow) {
      return null;
    }
    var overflowYHidden = hideOverflow;
    var beakVisible = isBeakVisible && !!target;
    var classNames2 = getClassNames(styles2, {
      theme: props.theme,
      className,
      overflowYHidden,
      calloutWidth,
      positions,
      beakWidth,
      backgroundColor,
      calloutMaxWidth,
      calloutMinWidth,
      doNotLayer
    });
    var overflowStyle = __assign(__assign({ maxHeight: calloutMaxHeight ? calloutMaxHeight : "100%" }, style), overflowYHidden && { overflowY: "hidden" });
    var visibilityStyle = props.hidden ? { visibility: "hidden" } : void 0;
    return React24.createElement(
      "div",
      { ref: rootRef, className: classNames2.container, style: visibilityStyle },
      React24.createElement(
        "div",
        __assign({}, getNativeProps(props, divProperties, ARIA_ROLE_ATTRIBUTES), {
          className: css(classNames2.root, positions && positions.targetEdge && ANIMATIONS[positions.targetEdge]),
          style: positions ? __assign({}, cssPositions) : OFF_SCREEN_STYLE,
          // Safari and Firefox on Mac OS requires this to back-stop click events so focus remains in the Callout.
          // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus
          tabIndex: -1,
          ref: calloutCallback
        }),
        beakVisible && React24.createElement("div", { className: classNames2.beak, style: getBeakPosition(positions) }),
        beakVisible && React24.createElement("div", { className: classNames2.beakCurtain }),
        React24.createElement(
          Popup,
          __assign({
            // don't use getNativeElementProps for role and roledescription because it will also
            // pass through data-* props (resulting in them being used in two places)
            role: props.role,
            "aria-roledescription": props["aria-roledescription"],
            ariaDescribedBy,
            ariaLabel,
            ariaLabelledBy,
            className: classNames2.calloutMain,
            onDismiss: props.onDismiss,
            onMouseDown: mouseDownOnPopup,
            onMouseUp: mouseUpOnPopup,
            onRestoreFocus: props.onRestoreFocus,
            onScroll,
            shouldRestoreFocus,
            style: overflowStyle
          }, popupProps),
          children
        )
      )
    );
  }), function(previousProps, nextProps) {
    if (!nextProps.shouldUpdateWhenHidden && previousProps.hidden && nextProps.hidden) {
      return true;
    }
    return shallowCompare(previousProps, nextProps);
  });
  function getBeakPosition(positions) {
    var _a7, _b3;
    var beakPositionStyle = __assign(__assign({}, (_a7 = positions === null || positions === void 0 ? void 0 : positions.beakPosition) === null || _a7 === void 0 ? void 0 : _a7.elementPosition), { display: ((_b3 = positions === null || positions === void 0 ? void 0 : positions.beakPosition) === null || _b3 === void 0 ? void 0 : _b3.hideBeak) ? "none" : void 0 });
    if (!beakPositionStyle.top && !beakPositionStyle.bottom && !beakPositionStyle.left && !beakPositionStyle.right) {
      beakPositionStyle.left = BEAK_ORIGIN_POSITION.left;
      beakPositionStyle.top = BEAK_ORIGIN_POSITION.top;
    }
    return beakPositionStyle;
  }
  function arePositionsEqual(prevElementPositions, newElementPosition) {
    return comparePositions(prevElementPositions.elementPosition, newElementPosition.elementPosition) && comparePositions(prevElementPositions.beakPosition.elementPosition, newElementPosition.beakPosition.elementPosition);
  }
  function comparePositions(prevElementPositions, newElementPositions) {
    for (var key in newElementPositions) {
      if (newElementPositions.hasOwnProperty(key)) {
        var oldPositionEdge = prevElementPositions[key];
        var newPositionEdge = newElementPositions[key];
        if (oldPositionEdge !== void 0 && newPositionEdge !== void 0) {
          if (oldPositionEdge.toFixed(2) !== newPositionEdge.toFixed(2)) {
            return false;
          }
        } else {
          return false;
        }
      }
    }
    return true;
  }
  CalloutContentBase.displayName = COMPONENT_NAME;

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.styles.js
  function getBeakStyle(beakWidth) {
    return {
      height: beakWidth,
      width: beakWidth
    };
  }
  var GlobalClassNames = {
    container: "ms-Callout-container",
    root: "ms-Callout",
    beak: "ms-Callout-beak",
    beakCurtain: "ms-Callout-beakCurtain",
    calloutMain: "ms-Callout-main"
  };
  var getStyles = function(props) {
    var _a7;
    var theme = props.theme, className = props.className, overflowYHidden = props.overflowYHidden, calloutWidth = props.calloutWidth, beakWidth = props.beakWidth, backgroundColor = props.backgroundColor, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer;
    var classNames2 = getGlobalClassNames(GlobalClassNames, theme);
    var semanticColors = theme.semanticColors, effects = theme.effects;
    return {
      container: [
        classNames2.container,
        {
          position: "relative"
        }
      ],
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          position: "absolute",
          display: "flex",
          zIndex: doNotLayer ? ZIndexes.Layer : void 0,
          boxSizing: "border-box",
          borderRadius: effects.roundedCorner2,
          boxShadow: effects.elevation16,
          selectors: (_a7 = {}, _a7[HighContrastSelector] = {
            borderWidth: 1,
            borderStyle: "solid",
            borderColor: "WindowText"
          }, _a7)
        },
        focusClear(),
        className,
        !!calloutWidth && { width: calloutWidth },
        !!calloutMaxWidth && { maxWidth: calloutMaxWidth },
        !!calloutMinWidth && { minWidth: calloutMinWidth }
      ],
      beak: [
        classNames2.beak,
        {
          position: "absolute",
          backgroundColor: semanticColors.menuBackground,
          boxShadow: "inherit",
          border: "inherit",
          boxSizing: "border-box",
          transform: "rotate(45deg)"
        },
        getBeakStyle(beakWidth),
        backgroundColor && {
          backgroundColor
        }
      ],
      beakCurtain: [
        classNames2.beakCurtain,
        {
          position: "absolute",
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          backgroundColor: semanticColors.menuBackground,
          borderRadius: effects.roundedCorner2
        }
      ],
      calloutMain: [
        classNames2.calloutMain,
        {
          backgroundColor: semanticColors.menuBackground,
          overflowX: "hidden",
          overflowY: "auto",
          position: "relative",
          width: "100%",
          borderRadius: effects.roundedCorner2
        },
        overflowYHidden && {
          overflowY: "hidden"
        },
        backgroundColor && {
          backgroundColor
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.js
  var CalloutContent = styled(CalloutContentBase, getStyles, void 0, {
    scope: "CalloutContent"
  });

  // ../node_modules/@fluentui/react-portal-compat-context/lib/PortalCompatContext.js
  var React25 = __toESM(require_react());
  var PortalCompatContext = /* @__PURE__ */ React25.createContext(void 0);
  var portalCompatContextDefaultValue = () => () => void 0;
  var PortalCompatContextProvider = PortalCompatContext.Provider;
  function usePortalCompat() {
    var _React_useContext2;
    return (_React_useContext2 = React25.useContext(PortalCompatContext)) !== null && _React_useContext2 !== void 0 ? _React_useContext2 : portalCompatContextDefaultValue;
  }

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.base.js
  var React27 = __toESM(require_react());
  var ReactDOM = __toESM(require_react_dom());

  // ../node_modules/@fluentui/react/lib/components/Fabric/Fabric.base.js
  var React26 = __toESM(require_react());
  var getClassNames2 = classNamesFunction();
  var getFabricTheme = memoizeFunction(function(theme, isRTL) {
    return createTheme(__assign(__assign({}, theme), { rtl: isRTL }));
  });
  var getDir = function(_a7) {
    var theme = _a7.theme, dir = _a7.dir;
    var contextDir = getRTL2(theme) ? "rtl" : "ltr";
    var pageDir = getRTL2() ? "rtl" : "ltr";
    var componentDir = dir ? dir : contextDir;
    return {
      // If Fabric dir !== contextDir
      // Or If contextDir !== pageDir
      // Then we need to set dir of the Fabric root
      rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,
      // If dir !== contextDir || pageDir
      // then set contextual theme around content
      needsTheme: componentDir !== contextDir
    };
  };
  var FabricBase = React26.forwardRef(function(props, ref) {
    var className = props.className, theme = props.theme, applyTheme = props.applyTheme, applyThemeToBody = props.applyThemeToBody, styles2 = props.styles;
    var classNames2 = getClassNames2(styles2, {
      theme,
      applyTheme,
      className
    });
    var rootElement = React26.useRef(null);
    useApplyThemeToBody(applyThemeToBody, classNames2, rootElement);
    return React26.createElement(React26.Fragment, null, useRenderedContent(props, classNames2, rootElement, ref));
  });
  FabricBase.displayName = "FabricBase";
  function useRenderedContent(props, _a7, rootElement, ref) {
    var root2 = _a7.root;
    var _b3 = props.as, Root = _b3 === void 0 ? "div" : _b3, dir = props.dir, theme = props.theme;
    var divProps = getNativeProps(props, divProperties, ["dir"]);
    var _c3 = getDir(props), rootDir = _c3.rootDir, needsTheme = _c3.needsTheme;
    var renderedContent = React26.createElement(
      FocusRectsProvider,
      { providerRef: rootElement },
      React26.createElement(Root, __assign({ dir: rootDir }, divProps, { className: root2, ref: useMergedRefs(rootElement, ref) }))
    );
    if (needsTheme) {
      renderedContent = // eslint-disable-next-line deprecation/deprecation
      React26.createElement(Customizer, { settings: { theme: getFabricTheme(theme, dir === "rtl") } }, renderedContent);
    }
    return renderedContent;
  }
  function useApplyThemeToBody(applyThemeToBody, _a7, rootElement) {
    var bodyThemed = _a7.bodyThemed;
    React26.useEffect(function() {
      if (applyThemeToBody) {
        var currentDoc_1 = getDocument(rootElement.current);
        if (currentDoc_1) {
          currentDoc_1.body.classList.add(bodyThemed);
          return function() {
            currentDoc_1.body.classList.remove(bodyThemed);
          };
        }
      }
    }, [bodyThemed, applyThemeToBody, rootElement]);
    return rootElement;
  }

  // ../node_modules/@fluentui/react/lib/components/Fabric/Fabric.styles.js
  var inheritFont = { fontFamily: "inherit" };
  var GlobalClassNames2 = {
    root: "ms-Fabric",
    bodyThemed: "ms-Fabric-bodyThemed"
  };
  var getStyles2 = function(props) {
    var applyTheme = props.applyTheme, className = props.className, preventBlanketFontInheritance = props.preventBlanketFontInheritance, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames2, theme);
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          color: theme.palette.neutralPrimary
        },
        !preventBlanketFontInheritance && {
          "& button": inheritFont,
          "& input": inheritFont,
          "& textarea": inheritFont
        },
        // apply theme to only if applyTheme is true
        applyTheme && {
          color: theme.semanticColors.bodyText,
          backgroundColor: theme.semanticColors.bodyBackground
        },
        className
      ],
      bodyThemed: [
        {
          backgroundColor: theme.semanticColors.bodyBackground
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Fabric/Fabric.js
  var Fabric = styled(FabricBase, getStyles2, void 0, {
    scope: "Fabric"
  });

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.notification.js
  var _layersByHostId = {};
  var _layerHostsById = {};
  var defaultHostId = "fluent-default-layer-host";
  var _defaultHostSelector = "#".concat(defaultHostId);
  function registerLayer(hostId, callback) {
    if (!_layersByHostId[hostId]) {
      _layersByHostId[hostId] = [];
    }
    _layersByHostId[hostId].push(callback);
    var layerHosts = _layerHostsById[hostId];
    if (layerHosts) {
      for (var _i = 0, layerHosts_1 = layerHosts; _i < layerHosts_1.length; _i++) {
        var layerHost = layerHosts_1[_i];
        layerHost.notifyLayersChanged();
      }
    }
  }
  function unregisterLayer(hostId, callback) {
    var layers = _layersByHostId[hostId];
    if (layers) {
      var idx = layers.indexOf(callback);
      if (idx >= 0) {
        layers.splice(idx, 1);
        if (layers.length === 0) {
          delete _layersByHostId[hostId];
        }
      }
    }
    var layerHosts = _layerHostsById[hostId];
    if (layerHosts) {
      for (var _i = 0, layerHosts_2 = layerHosts; _i < layerHosts_2.length; _i++) {
        var layerHost = layerHosts_2[_i];
        layerHost.notifyLayersChanged();
      }
    }
  }
  function getLayerHost(hostId) {
    var layerHosts = _layerHostsById[hostId];
    return layerHosts && layerHosts[0] || void 0;
  }
  function createDefaultLayerHost(doc) {
    var host = doc.createElement("div");
    host.setAttribute("id", defaultHostId);
    host.style.cssText = "position:fixed;z-index:1000000";
    doc === null || doc === void 0 ? void 0 : doc.body.appendChild(host);
    return host;
  }
  function getDefaultTarget() {
    return _defaultHostSelector;
  }

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.base.js
  var getClassNames3 = classNamesFunction();
  var getFocusVisibility = function(providerRef) {
    if (providerRef === null || providerRef === void 0 ? void 0 : providerRef.current) {
      return providerRef.current.classList.contains(IsFocusVisibleClassName);
    }
    return false;
  };
  var LayerBase = React27.forwardRef(function(props, ref) {
    var registerPortalEl = usePortalCompat();
    var rootRef = React27.useRef(null);
    var mergedRef = useMergedRefs(rootRef, ref);
    var layerRef = React27.useRef();
    var fabricElementRef = React27.useRef(null);
    var focusContext = React27.useContext(FocusRectsContext);
    var _a7 = React27.useState(false), needRaiseLayerMount = _a7[0], setNeedRaiseLayerMount = _a7[1];
    var focusRectsRef = React27.useCallback(function(el) {
      var isFocusVisible = getFocusVisibility(focusContext === null || focusContext === void 0 ? void 0 : focusContext.providerRef);
      if (el && isFocusVisible) {
        el.classList.add(IsFocusVisibleClassName);
      }
    }, [focusContext]);
    var children = props.children, className = props.className, eventBubblingEnabled = props.eventBubblingEnabled, fabricProps = props.fabricProps, hostId = props.hostId, insertFirst = props.insertFirst, _b3 = props.onLayerDidMount, onLayerDidMount = _b3 === void 0 ? function() {
      return void 0;
    } : _b3, _c3 = props.onLayerMounted, onLayerMounted = _c3 === void 0 ? function() {
      return void 0;
    } : _c3, onLayerWillUnmount = props.onLayerWillUnmount, styles2 = props.styles, theme = props.theme;
    var fabricRef = useMergedRefs(fabricElementRef, fabricProps === null || fabricProps === void 0 ? void 0 : fabricProps.ref, focusRectsRef);
    var classNames2 = getClassNames3(styles2, {
      theme,
      className,
      isNotHost: !hostId
    });
    var getHost = function(doc) {
      var _a8, _b4;
      if (hostId) {
        var layerHost = getLayerHost(hostId);
        if (layerHost) {
          return (_a8 = layerHost.rootRef.current) !== null && _a8 !== void 0 ? _a8 : null;
        }
        return (_b4 = doc.getElementById(hostId)) !== null && _b4 !== void 0 ? _b4 : null;
      } else {
        var defaultHostSelector = getDefaultTarget();
        var host = defaultHostSelector ? doc.querySelector(defaultHostSelector) : null;
        if (!host) {
          host = createDefaultLayerHost(doc);
        }
        return host;
      }
    };
    var removeLayerElement = function() {
      onLayerWillUnmount === null || onLayerWillUnmount === void 0 ? void 0 : onLayerWillUnmount();
      var elem = layerRef.current;
      layerRef.current = void 0;
      if (elem && elem.parentNode) {
        elem.parentNode.removeChild(elem);
      }
    };
    var createLayerElement = function() {
      var _a8;
      var doc = getDocument(rootRef.current);
      if (!doc) {
        return;
      }
      var host = getHost(doc);
      if (!host) {
        return;
      }
      removeLayerElement();
      var el = ((_a8 = host.ownerDocument) !== null && _a8 !== void 0 ? _a8 : doc).createElement("div");
      el.className = classNames2.root;
      setPortalAttribute(el);
      setVirtualParent(el, rootRef.current);
      insertFirst ? host.insertBefore(el, host.firstChild) : host.appendChild(el);
      layerRef.current = el;
      setNeedRaiseLayerMount(true);
    };
    useIsomorphicLayoutEffect(function() {
      createLayerElement();
      if (hostId) {
        registerLayer(hostId, createLayerElement);
      }
      var unregisterPortalEl = layerRef.current ? registerPortalEl(layerRef.current) : void 0;
      return function() {
        if (unregisterPortalEl) {
          unregisterPortalEl();
        }
        removeLayerElement();
        if (hostId) {
          unregisterLayer(hostId, createLayerElement);
        }
      };
    }, [hostId]);
    React27.useEffect(function() {
      if (layerRef.current && needRaiseLayerMount) {
        onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
        onLayerDidMount === null || onLayerDidMount === void 0 ? void 0 : onLayerDidMount();
        setNeedRaiseLayerMount(false);
      }
    }, [needRaiseLayerMount, onLayerMounted, onLayerDidMount]);
    useDebugWarnings(props);
    return React27.createElement("span", { className: "ms-layer", ref: mergedRef }, layerRef.current && ReactDOM.createPortal(React27.createElement(
      FocusRectsProvider,
      { layerRoot: true, providerRef: fabricRef },
      React27.createElement(Fabric, __assign({}, !eventBubblingEnabled && getFilteredEvents(), fabricProps, { className: css(classNames2.content, fabricProps === null || fabricProps === void 0 ? void 0 : fabricProps.className), ref: fabricRef }), children)
    ), layerRef.current));
  });
  LayerBase.displayName = "LayerBase";
  var filteredEventProps;
  var onFilterEvent = function(ev) {
    if (ev.eventPhase === Event.BUBBLING_PHASE && ev.type !== "mouseenter" && ev.type !== "mouseleave" && ev.type !== "touchstart" && ev.type !== "touchend") {
      ev.stopPropagation();
    }
  };
  function getFilteredEvents() {
    if (!filteredEventProps) {
      filteredEventProps = {};
      [
        "onClick",
        "onContextMenu",
        "onDoubleClick",
        "onDrag",
        "onDragEnd",
        "onDragEnter",
        "onDragExit",
        "onDragLeave",
        "onDragOver",
        "onDragStart",
        "onDrop",
        "onMouseDown",
        "onMouseEnter",
        "onMouseLeave",
        "onMouseMove",
        "onMouseOver",
        "onMouseOut",
        "onMouseUp",
        "onTouchMove",
        "onTouchStart",
        "onTouchCancel",
        "onTouchEnd",
        "onKeyDown",
        "onKeyPress",
        "onKeyUp",
        "onFocus",
        "onBlur",
        "onChange",
        "onInput",
        "onInvalid",
        "onSubmit"
      ].forEach(function(name) {
        return filteredEventProps[name] = onFilterEvent;
      });
    }
    return filteredEventProps;
  }
  function useDebugWarnings(props) {
    if (true) {
      useWarnings({
        name: "Layer",
        props,
        deprecations: { onLayerMounted: "onLayerDidMount" }
      });
    }
  }

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.styles.js
  var GlobalClassNames3 = {
    root: "ms-Layer",
    rootNoHost: "ms-Layer--fixed",
    content: "ms-Layer-content"
  };
  var getStyles3 = function(props) {
    var className = props.className, isNotHost = props.isNotHost, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames3, theme);
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        isNotHost && [
          classNames2.rootNoHost,
          {
            position: "fixed",
            zIndex: ZIndexes.Layer,
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            visibility: "hidden"
          }
        ],
        className
      ],
      content: [
        classNames2.content,
        {
          visibility: "visible"
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.js
  var Layer = styled(LayerBase, getStyles3, void 0, {
    scope: "Layer",
    fields: ["hostId", "theme", "styles"]
  });

  // ../node_modules/@fluentui/react/lib/components/Callout/Callout.js
  var Callout = React28.forwardRef(function(_a7, forwardedRef) {
    var layerProps = _a7.layerProps, doNotLayer = _a7.doNotLayer, rest = __rest(_a7, ["layerProps", "doNotLayer"]);
    var content = React28.createElement(CalloutContent, __assign({}, rest, { doNotLayer, ref: forwardedRef }));
    return doNotLayer ? content : React28.createElement(Layer, __assign({}, layerProps), content);
  });
  Callout.displayName = "Callout";

  // ../node_modules/@fluentui/react/lib/components/FocusTrapZone/FocusTrapZone.js
  var React29 = __toESM(require_react());
  var COMPONENT_NAME2 = "FocusTrapZone";
  var DEFAULT_PROPS2 = {
    disabled: false,
    disableFirstFocus: false,
    forceFocusInsideTrap: true,
    isClickableOutsideFocusTrap: false
  };
  var useComponentRef = function(componentRef, previouslyFocusedElement, focusFTZ) {
    React29.useImperativeHandle(componentRef, function() {
      return {
        get previouslyFocusedElement() {
          return previouslyFocusedElement;
        },
        focus: focusFTZ
      };
    }, [focusFTZ, previouslyFocusedElement]);
  };
  var FocusTrapZone = React29.forwardRef(function(propsWithoutDefaults, ref) {
    var _a7;
    var root2 = React29.useRef(null);
    var firstBumper = React29.useRef(null);
    var lastBumper = React29.useRef(null);
    var mergedRootRef = useMergedRefs(root2, ref);
    var doc = useDocument();
    var isFirstRender = (_a7 = usePrevious(false)) !== null && _a7 !== void 0 ? _a7 : true;
    var props = getPropsWithDefaults(DEFAULT_PROPS2, propsWithoutDefaults);
    var internalState = useConst({
      hasFocus: false,
      focusStackId: useId("ftz-", props.id)
    });
    var children = props.children, componentRef = props.componentRef, disabled = props.disabled, disableFirstFocus = props.disableFirstFocus, forceFocusInsideTrap = props.forceFocusInsideTrap, focusPreviouslyFocusedInnerElement = props.focusPreviouslyFocusedInnerElement, firstFocusableSelector = props.firstFocusableSelector, firstFocusableTarget = props.firstFocusableTarget, _b3 = props.disableRestoreFocus, disableRestoreFocus = _b3 === void 0 ? props.ignoreExternalFocusing : _b3, isClickableOutsideFocusTrap = props.isClickableOutsideFocusTrap, enableAriaHiddenSiblings = props.enableAriaHiddenSiblings;
    var bumperProps = {
      "aria-hidden": true,
      style: {
        pointerEvents: "none",
        position: "fixed"
        // 'fixed' prevents browsers from scrolling to bumpers when viewport does not contain them
      },
      tabIndex: disabled ? -1 : 0,
      "data-is-visible": true,
      "data-is-focus-trap-zone-bumper": true
    };
    var focusElementAsync = React29.useCallback(function(element) {
      if (element !== firstBumper.current && element !== lastBumper.current) {
        focusAsync(element);
      }
    }, []);
    var focusFTZ = useEventCallback(function() {
      if (!root2.current) {
        return;
      }
      var previouslyFocusedElementInTrapZone = internalState.previouslyFocusedElementInTrapZone;
      if (focusPreviouslyFocusedInnerElement && previouslyFocusedElementInTrapZone && elementContains(root2.current, previouslyFocusedElementInTrapZone)) {
        focusElementAsync(previouslyFocusedElementInTrapZone);
        return;
      }
      var firstFocusableChild = null;
      if (typeof firstFocusableTarget === "string") {
        firstFocusableChild = root2.current.querySelector(firstFocusableTarget);
      } else if (firstFocusableTarget) {
        firstFocusableChild = firstFocusableTarget(root2.current);
      } else if (firstFocusableSelector) {
        var focusSelector = typeof firstFocusableSelector === "string" ? firstFocusableSelector : firstFocusableSelector();
        firstFocusableChild = root2.current.querySelector("." + focusSelector);
      }
      if (!firstFocusableChild) {
        firstFocusableChild = getNextElement(root2.current, root2.current.firstChild, false, false, false, true);
      }
      if (firstFocusableChild) {
        focusElementAsync(firstFocusableChild);
      }
    });
    var focusBumper = function(isFirstBumper) {
      if (disabled || !root2.current) {
        return;
      }
      var nextFocusable = isFirstBumper === internalState.hasFocus ? getLastTabbable(root2.current, lastBumper.current, true, false) : getFirstTabbable(root2.current, firstBumper.current, true, false);
      if (nextFocusable) {
        if (nextFocusable === firstBumper.current || nextFocusable === lastBumper.current) {
          focusFTZ();
        } else {
          nextFocusable.focus();
        }
      }
    };
    var onRootBlurCapture = function(ev) {
      var _a8;
      (_a8 = props.onBlurCapture) === null || _a8 === void 0 ? void 0 : _a8.call(props, ev);
      var relatedTarget = ev.relatedTarget;
      if (ev.relatedTarget === null) {
        relatedTarget = doc.activeElement;
      }
      if (!elementContains(root2.current, relatedTarget)) {
        internalState.hasFocus = false;
      }
    };
    var onRootFocusCapture = function(ev) {
      var _a8;
      (_a8 = props.onFocusCapture) === null || _a8 === void 0 ? void 0 : _a8.call(props, ev);
      if (ev.target === firstBumper.current) {
        focusBumper(true);
      } else if (ev.target === lastBumper.current) {
        focusBumper(false);
      }
      internalState.hasFocus = true;
      if (ev.target !== ev.currentTarget && !(ev.target === firstBumper.current || ev.target === lastBumper.current)) {
        internalState.previouslyFocusedElementInTrapZone = ev.target;
      }
    };
    var returnFocusToInitiator = useEventCallback(function(elementToFocusOnDismiss) {
      FocusTrapZone.focusStack = FocusTrapZone.focusStack.filter(function(value) {
        return internalState.focusStackId !== value;
      });
      if (!doc) {
        return;
      }
      var activeElement = doc.activeElement;
      if (!disableRestoreFocus && typeof (elementToFocusOnDismiss === null || elementToFocusOnDismiss === void 0 ? void 0 : elementToFocusOnDismiss.focus) === "function" && // only restore focus if the current focused element is within the FTZ, or if nothing is focused
      (elementContains(root2.current, activeElement) || activeElement === doc.body)) {
        focusElementAsync(elementToFocusOnDismiss);
      }
    });
    var forceFocusOrClickInTrap = useEventCallback(function(ev) {
      if (disabled) {
        return;
      }
      if (internalState.focusStackId === FocusTrapZone.focusStack.slice(-1)[0]) {
        var targetElement = ev.target;
        if (targetElement && !elementContains(root2.current, targetElement)) {
          if (doc && doc.activeElement === doc.body) {
            setTimeout(function() {
              if (doc && doc.activeElement === doc.body) {
                focusFTZ();
                internalState.hasFocus = true;
              }
            }, 0);
          } else {
            focusFTZ();
            internalState.hasFocus = true;
          }
          ev.preventDefault();
          ev.stopPropagation();
        }
      }
    });
    React29.useEffect(function() {
      var disposables = [];
      if (forceFocusInsideTrap) {
        disposables.push(on(window, "focus", forceFocusOrClickInTrap, true));
      }
      if (!isClickableOutsideFocusTrap) {
        disposables.push(on(window, "click", forceFocusOrClickInTrap, true));
      }
      return function() {
        disposables.forEach(function(dispose) {
          return dispose();
        });
      };
    }, [forceFocusInsideTrap, isClickableOutsideFocusTrap]);
    React29.useEffect(function() {
      if (disabled || !isFirstRender && !forceFocusInsideTrap || !root2.current) {
        return;
      }
      FocusTrapZone.focusStack.push(internalState.focusStackId);
      var elementToFocusOnDismiss = props.elementToFocusOnDismiss || doc.activeElement;
      if (!disableFirstFocus && !elementContains(root2.current, elementToFocusOnDismiss)) {
        focusFTZ();
      }
      return function() {
        return returnFocusToInitiator(elementToFocusOnDismiss);
      };
    }, [forceFocusInsideTrap, disabled]);
    React29.useEffect(function() {
      if (!disabled && enableAriaHiddenSiblings) {
        var unmodalize2 = modalize(root2.current);
        return unmodalize2;
      }
    }, [disabled, enableAriaHiddenSiblings, root2]);
    useUnmount(function() {
      delete internalState.previouslyFocusedElementInTrapZone;
    });
    useComponentRef(componentRef, internalState.previouslyFocusedElementInTrapZone, focusFTZ);
    return React29.createElement(
      "div",
      __assign({ "aria-labelledby": props.ariaLabelledBy }, getNativeProps(props, divProperties), { ref: mergedRootRef, onFocusCapture: onRootFocusCapture, onBlurCapture: onRootBlurCapture }),
      React29.createElement("div", __assign({}, bumperProps, { ref: firstBumper })),
      children,
      React29.createElement("div", __assign({}, bumperProps, { ref: lastBumper }))
    );
  });
  FocusTrapZone.displayName = COMPONENT_NAME2;
  FocusTrapZone.focusStack = [];

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.base.js
  var React32 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.types.js
  var IconType;
  (function(IconType2) {
    IconType2[IconType2["default"] = 0] = "default";
    IconType2[IconType2["image"] = 1] = "image";
    IconType2[IconType2["Default"] = 1e5] = "Default";
    IconType2[IconType2["Image"] = 100001] = "Image";
  })(IconType || (IconType = {}));

  // ../node_modules/@fluentui/react/lib/components/Image/Image.base.js
  var React30 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Image/Image.types.js
  var ImageFit;
  (function(ImageFit2) {
    ImageFit2[ImageFit2["center"] = 0] = "center";
    ImageFit2[ImageFit2["contain"] = 1] = "contain";
    ImageFit2[ImageFit2["cover"] = 2] = "cover";
    ImageFit2[ImageFit2["none"] = 3] = "none";
    ImageFit2[ImageFit2["centerCover"] = 4] = "centerCover";
    ImageFit2[ImageFit2["centerContain"] = 5] = "centerContain";
  })(ImageFit || (ImageFit = {}));
  var ImageCoverStyle;
  (function(ImageCoverStyle2) {
    ImageCoverStyle2[ImageCoverStyle2["landscape"] = 0] = "landscape";
    ImageCoverStyle2[ImageCoverStyle2["portrait"] = 1] = "portrait";
  })(ImageCoverStyle || (ImageCoverStyle = {}));
  var ImageLoadState;
  (function(ImageLoadState2) {
    ImageLoadState2[ImageLoadState2["notLoaded"] = 0] = "notLoaded";
    ImageLoadState2[ImageLoadState2["loaded"] = 1] = "loaded";
    ImageLoadState2[ImageLoadState2["error"] = 2] = "error";
    ImageLoadState2[ImageLoadState2["errorLoaded"] = 3] = "errorLoaded";
  })(ImageLoadState || (ImageLoadState = {}));

  // ../node_modules/@fluentui/react/lib/components/Image/Image.base.js
  var getClassNames4 = classNamesFunction();
  var SVG_REGEX = /\.svg$/i;
  var KEY_PREFIX = "fabricImage";
  function useLoadState(props, imageElement) {
    var onLoadingStateChange = props.onLoadingStateChange, onLoad = props.onLoad, onError = props.onError, src = props.src;
    var _a7 = React30.useState(ImageLoadState.notLoaded), loadState = _a7[0], setLoadState = _a7[1];
    useIsomorphicLayoutEffect(function() {
      setLoadState(ImageLoadState.notLoaded);
    }, [src]);
    React30.useEffect(function() {
      if (loadState === ImageLoadState.notLoaded) {
        var isLoaded = imageElement.current ? src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0 || imageElement.current.complete && SVG_REGEX.test(src) : false;
        if (isLoaded) {
          setLoadState(ImageLoadState.loaded);
        }
      }
    });
    React30.useEffect(function() {
      onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState);
    }, [loadState]);
    var onImageLoaded = React30.useCallback(function(ev) {
      onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);
      if (src) {
        setLoadState(ImageLoadState.loaded);
      }
    }, [src, onLoad]);
    var onImageError = React30.useCallback(function(ev) {
      onError === null || onError === void 0 ? void 0 : onError(ev);
      setLoadState(ImageLoadState.error);
    }, [onError]);
    return [loadState, onImageLoaded, onImageError];
  }
  var ImageBase = React30.forwardRef(function(props, forwardedRef) {
    var frameElement = React30.useRef();
    var imageElement = React30.useRef();
    var _a7 = useLoadState(props, imageElement), loadState = _a7[0], onImageLoaded = _a7[1], onImageError = _a7[2];
    var imageProps = getNativeProps(props, imgProperties, [
      "width",
      "height"
    ]);
    var src = props.src, alt = props.alt, width = props.width, height = props.height, _b3 = props.shouldFadeIn, shouldFadeIn = _b3 === void 0 ? true : _b3, shouldStartVisible = props.shouldStartVisible, className = props.className, imageFit = props.imageFit, role = props.role, maximizeFrame = props.maximizeFrame, styles2 = props.styles, theme = props.theme, loading = props.loading;
    var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);
    var classNames2 = getClassNames4(styles2, {
      theme,
      className,
      width,
      height,
      maximizeFrame,
      shouldFadeIn,
      shouldStartVisible,
      isLoaded: loadState === ImageLoadState.loaded || loadState === ImageLoadState.notLoaded && props.shouldStartVisible,
      isLandscape: coverStyle === ImageCoverStyle.landscape,
      isCenter: imageFit === ImageFit.center,
      isCenterContain: imageFit === ImageFit.centerContain,
      isCenterCover: imageFit === ImageFit.centerCover,
      isContain: imageFit === ImageFit.contain,
      isCover: imageFit === ImageFit.cover,
      isNone: imageFit === ImageFit.none,
      isError: loadState === ImageLoadState.error,
      isNotImageFit: imageFit === void 0
    });
    return React30.createElement(
      "div",
      { className: classNames2.root, style: { width, height }, ref: frameElement },
      React30.createElement("img", __assign({}, imageProps, { onLoad: onImageLoaded, onError: onImageError, key: KEY_PREFIX + props.src || "", className: classNames2.image, ref: useMergedRefs(imageElement, forwardedRef), src, alt, role, loading }))
    );
  });
  ImageBase.displayName = "ImageBase";
  function useCoverStyle(props, loadState, imageElement, frameElement) {
    var previousLoadState = React30.useRef(loadState);
    var coverStyle = React30.useRef();
    if (coverStyle === void 0 || previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded) {
      coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);
    }
    previousLoadState.current = loadState;
    return coverStyle.current;
  }
  function computeCoverStyle(props, loadState, imageElement, frameElement) {
    var imageFit = props.imageFit, width = props.width, height = props.height;
    if (props.coverStyle !== void 0) {
      return props.coverStyle;
    } else if (loadState === ImageLoadState.loaded && (imageFit === ImageFit.cover || imageFit === ImageFit.contain || imageFit === ImageFit.centerContain || imageFit === ImageFit.centerCover) && imageElement.current && frameElement.current) {
      var desiredRatio = void 0;
      if (typeof width === "number" && typeof height === "number" && imageFit !== ImageFit.centerContain && imageFit !== ImageFit.centerCover) {
        desiredRatio = width / height;
      } else {
        desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;
      }
      var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;
      if (naturalRatio > desiredRatio) {
        return ImageCoverStyle.landscape;
      }
    }
    return ImageCoverStyle.portrait;
  }

  // ../node_modules/@fluentui/react/lib/components/Image/Image.styles.js
  var GlobalClassNames4 = {
    root: "ms-Image",
    rootMaximizeFrame: "ms-Image--maximizeFrame",
    image: "ms-Image-image",
    imageCenter: "ms-Image-image--center",
    imageContain: "ms-Image-image--contain",
    imageCover: "ms-Image-image--cover",
    imageCenterContain: "ms-Image-image--centerContain",
    imageCenterCover: "ms-Image-image--centerCover",
    imageNone: "ms-Image-image--none",
    imageLandscape: "ms-Image-image--landscape",
    imagePortrait: "ms-Image-image--portrait"
  };
  var getStyles4 = function(props) {
    var className = props.className, width = props.width, height = props.height, maximizeFrame = props.maximizeFrame, isLoaded = props.isLoaded, shouldFadeIn = props.shouldFadeIn, shouldStartVisible = props.shouldStartVisible, isLandscape = props.isLandscape, isCenter = props.isCenter, isContain = props.isContain, isCover = props.isCover, isCenterContain = props.isCenterContain, isCenterCover = props.isCenterCover, isNone = props.isNone, isError = props.isError, isNotImageFit = props.isNotImageFit, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames4, theme);
    var ImageFitStyles = {
      position: "absolute",
      left: "50% /* @noflip */",
      top: "50%",
      transform: "translate(-50%,-50%)"
      // @todo test RTL renders transform: translate(50%,-50%);
    };
    var window2 = getWindow();
    var supportsObjectFit = window2 !== void 0 && // eslint-disable-next-line @fluentui/max-len
    // cast needed as vendor prefixed `msMaxTouchPoints` api is no longer part of TS lib declaration - introduced with TS 4.4
    window2.navigator.msMaxTouchPoints === void 0;
    var fallbackObjectFitStyles = isContain && isLandscape || isCover && !isLandscape ? { width: "100%", height: "auto" } : { width: "auto", height: "100%" };
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          overflow: "hidden"
        },
        maximizeFrame && [
          classNames2.rootMaximizeFrame,
          {
            height: "100%",
            width: "100%"
          }
        ],
        isLoaded && shouldFadeIn && !shouldStartVisible && AnimationClassNames.fadeIn400,
        (isCenter || isContain || isCover || isCenterContain || isCenterCover) && {
          position: "relative"
        },
        className
      ],
      image: [
        classNames2.image,
        {
          display: "block",
          opacity: 0
        },
        isLoaded && [
          "is-loaded",
          {
            opacity: 1
          }
        ],
        isCenter && [classNames2.imageCenter, ImageFitStyles],
        isContain && [
          classNames2.imageContain,
          supportsObjectFit && {
            width: "100%",
            height: "100%",
            objectFit: "contain"
          },
          !supportsObjectFit && fallbackObjectFitStyles,
          !supportsObjectFit && ImageFitStyles
        ],
        isCover && [
          classNames2.imageCover,
          supportsObjectFit && {
            width: "100%",
            height: "100%",
            objectFit: "cover"
          },
          !supportsObjectFit && fallbackObjectFitStyles,
          !supportsObjectFit && ImageFitStyles
        ],
        isCenterContain && [
          classNames2.imageCenterContain,
          isLandscape && {
            maxWidth: "100%"
          },
          !isLandscape && {
            maxHeight: "100%"
          },
          ImageFitStyles
        ],
        isCenterCover && [
          classNames2.imageCenterCover,
          isLandscape && {
            maxHeight: "100%"
          },
          !isLandscape && {
            maxWidth: "100%"
          },
          ImageFitStyles
        ],
        isNone && [
          classNames2.imageNone,
          {
            width: "auto",
            height: "auto"
          }
        ],
        isNotImageFit && [
          !!width && !height && {
            height: "auto",
            width: "100%"
          },
          !width && !!height && {
            height: "100%",
            width: "auto"
          },
          !!width && !!height && {
            height: "100%",
            width: "100%"
          }
        ],
        isLandscape && classNames2.imageLandscape,
        !isLandscape && classNames2.imagePortrait,
        !isLoaded && "is-notLoaded",
        shouldFadeIn && "is-fadeIn",
        isError && "is-error"
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Image/Image.js
  var Image = styled(ImageBase, getStyles4, void 0, {
    scope: "Image"
  }, true);
  Image.displayName = "Image";

  // ../node_modules/@fluentui/react/lib/components/Icon/FontIcon.js
  var React31 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.styles.js
  var classNames = mergeStyleSets({
    root: {
      display: "inline-block"
    },
    placeholder: [
      "ms-Icon-placeHolder",
      {
        width: "1em"
      }
    ],
    image: [
      "ms-Icon-imageContainer",
      {
        overflow: "hidden"
      }
    ]
  });
  var MS_ICON = "ms-Icon";
  var getStyles5 = function(props) {
    var className = props.className, iconClassName = props.iconClassName, isPlaceholder = props.isPlaceholder, isImage = props.isImage, styles2 = props.styles;
    return {
      root: [
        isPlaceholder && classNames.placeholder,
        classNames.root,
        isImage && classNames.image,
        iconClassName,
        className,
        styles2 && styles2.root,
        // eslint-disable-next-line deprecation/deprecation
        styles2 && styles2.imageContainer
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Icon/FontIcon.js
  var getIconContent = memoizeFunction(
    function(iconName) {
      var _a7 = getIcon(iconName) || {
        subset: {},
        code: void 0
      }, code = _a7.code, subset = _a7.subset;
      if (!code) {
        return null;
      }
      return {
        children: code,
        iconClassName: subset.className,
        fontFamily: subset.fontFace && subset.fontFace.fontFamily,
        mergeImageProps: subset.mergeImageProps
      };
    },
    void 0,
    true
    /*ignoreNullOrUndefinedResult */
  );
  var FontIcon = function(props) {
    var iconName = props.iconName, className = props.className, _a7 = props.style, style = _a7 === void 0 ? {} : _a7;
    var iconContent = getIconContent(iconName) || {};
    var iconClassName = iconContent.iconClassName, children = iconContent.children, fontFamily = iconContent.fontFamily, mergeImageProps = iconContent.mergeImageProps;
    var nativeProps = getNativeProps(props, htmlElementProperties);
    var accessibleName = props["aria-label"] || props.title;
    var containerProps = props["aria-label"] || props["aria-labelledby"] || props.title ? {
      role: mergeImageProps ? void 0 : "img"
    } : {
      "aria-hidden": true
    };
    var finalChildren = children;
    if (mergeImageProps) {
      if (typeof children === "object" && typeof children.props === "object" && accessibleName) {
        finalChildren = React31.cloneElement(children, { alt: accessibleName });
      }
    }
    return React31.createElement("i", __assign({ "data-icon-name": iconName }, containerProps, nativeProps, mergeImageProps ? {
      title: void 0,
      "aria-label": void 0
    } : {}, {
      className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className),
      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles
      // https://github.com/microsoft/fluentui/issues/10449
      style: __assign({ fontFamily }, style)
    }), finalChildren);
  };
  var getFontIcon = memoizeFunction(function(iconName, className, ariaLabel) {
    return FontIcon({ iconName, className, "aria-label": ariaLabel });
  });

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.base.js
  var getClassNames5 = classNamesFunction({
    // Icon is used a lot by other components.
    // It's likely to see expected cases which pass different className to the Icon.
    // Therefore setting a larger cache size.
    cacheSize: 100
  });
  var IconBase = (
    /** @class */
    function(_super) {
      __extends(IconBase2, _super);
      function IconBase2(props) {
        var _this = _super.call(this, props) || this;
        _this._onImageLoadingStateChange = function(state) {
          if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {
            _this.props.imageProps.onLoadingStateChange(state);
          }
          if (state === ImageLoadState.error) {
            _this.setState({ imageLoadError: true });
          }
        };
        _this.state = {
          imageLoadError: false
        };
        return _this;
      }
      IconBase2.prototype.render = function() {
        var _a7 = this.props, children = _a7.children, className = _a7.className, styles2 = _a7.styles, iconName = _a7.iconName, imageErrorAs = _a7.imageErrorAs, theme = _a7.theme;
        var isPlaceholder = typeof iconName === "string" && iconName.length === 0;
        var isImage = (
          // eslint-disable-next-line deprecation/deprecation
          !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image
        );
        var iconContent = getIconContent(iconName) || {};
        var iconClassName = iconContent.iconClassName, iconContentChildren = iconContent.children, mergeImageProps = iconContent.mergeImageProps;
        var classNames2 = getClassNames5(styles2, {
          theme,
          className,
          iconClassName,
          isImage,
          isPlaceholder
        });
        var RootType = isImage ? "span" : "i";
        var nativeProps = getNativeProps(this.props, htmlElementProperties, [
          "aria-label"
        ]);
        var imageLoadError = this.state.imageLoadError;
        var imageProps = __assign(__assign({}, this.props.imageProps), { onLoadingStateChange: this._onImageLoadingStateChange });
        var ImageType = imageLoadError && imageErrorAs || Image;
        var ariaLabel = this.props["aria-label"] || this.props.ariaLabel;
        var accessibleName = imageProps.alt || ariaLabel || this.props.title;
        var hasName = !!(accessibleName || this.props["aria-labelledby"] || imageProps["aria-label"] || imageProps["aria-labelledby"]);
        var containerProps = hasName ? {
          role: isImage || mergeImageProps ? void 0 : "img",
          "aria-label": isImage || mergeImageProps ? void 0 : accessibleName
        } : {
          "aria-hidden": true
        };
        var finalIconContentChildren = iconContentChildren;
        if (mergeImageProps && iconContentChildren && typeof iconContentChildren === "object" && accessibleName) {
          finalIconContentChildren = React32.cloneElement(iconContentChildren, {
            alt: accessibleName
          });
        }
        return React32.createElement(RootType, __assign({ "data-icon-name": iconName }, containerProps, nativeProps, mergeImageProps ? {
          title: void 0,
          "aria-label": void 0
        } : {}, { className: classNames2.root }), isImage ? React32.createElement(ImageType, __assign({}, imageProps)) : children || finalIconContentChildren);
      };
      return IconBase2;
    }(React32.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.js
  var Icon = styled(IconBase, getStyles5, void 0, {
    scope: "Icon"
  }, true);
  Icon.displayName = "Icon";

  // ../node_modules/@fluentui/react/lib/components/Icon/ImageIcon.js
  var React33 = __toESM(require_react());
  var ImageIcon = function(props) {
    var className = props.className, imageProps = props.imageProps;
    var nativeProps = getNativeProps(props, htmlElementProperties, [
      "aria-label",
      "aria-labelledby",
      "title",
      "aria-describedby"
    ]);
    var altText = imageProps.alt || props["aria-label"];
    var hasName = altText || props["aria-labelledby"] || props.title || imageProps["aria-label"] || imageProps["aria-labelledby"] || imageProps.title;
    var imageNameProps = {
      "aria-labelledby": props["aria-labelledby"],
      "aria-describedby": props["aria-describedby"],
      title: props.title
    };
    var containerProps = hasName ? {} : {
      "aria-hidden": true
    };
    return React33.createElement(
      "div",
      __assign({}, containerProps, nativeProps, { className: css(MS_ICON, classNames.root, classNames.image, className) }),
      React33.createElement(Image, __assign({}, imageNameProps, imageProps, { alt: hasName ? altText : "" }))
    );
  };

  // ../node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js
  var React34 = __toESM(require_react());

  // ../node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.types.js
  var FocusZoneTabbableElements = {
    /** Tabbing is not allowed */
    none: 0,
    /** All tabbing action is allowed */
    all: 1,
    /** Tabbing is allowed only on input elements */
    inputOnly: 2
  };
  var FocusZoneDirection;
  (function(FocusZoneDirection2) {
    FocusZoneDirection2[FocusZoneDirection2["vertical"] = 0] = "vertical";
    FocusZoneDirection2[FocusZoneDirection2["horizontal"] = 1] = "horizontal";
    FocusZoneDirection2[FocusZoneDirection2["bidirectional"] = 2] = "bidirectional";
    FocusZoneDirection2[FocusZoneDirection2["domOrder"] = 3] = "domOrder";
  })(FocusZoneDirection || (FocusZoneDirection = {}));

  // ../node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js
  var IS_FOCUSABLE_ATTRIBUTE2 = "data-is-focusable";
  var IS_ENTER_DISABLED_ATTRIBUTE = "data-disable-click-on-enter";
  var FOCUSZONE_ID_ATTRIBUTE2 = "data-focuszone-id";
  var TABINDEX = "tabindex";
  var NO_VERTICAL_WRAP = "data-no-vertical-wrap";
  var NO_HORIZONTAL_WRAP = "data-no-horizontal-wrap";
  var LARGE_DISTANCE_FROM_CENTER = 999999999;
  var LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;
  var focusZoneStyles;
  var focusZoneClass = "ms-FocusZone";
  function raiseClickFromKeyboardEvent(target, ev) {
    var event;
    if (typeof MouseEvent === "function") {
      event = new MouseEvent("click", {
        ctrlKey: ev === null || ev === void 0 ? void 0 : ev.ctrlKey,
        metaKey: ev === null || ev === void 0 ? void 0 : ev.metaKey,
        shiftKey: ev === null || ev === void 0 ? void 0 : ev.shiftKey,
        altKey: ev === null || ev === void 0 ? void 0 : ev.altKey,
        bubbles: ev === null || ev === void 0 ? void 0 : ev.bubbles,
        cancelable: ev === null || ev === void 0 ? void 0 : ev.cancelable
      });
    } else {
      event = document.createEvent("MouseEvents");
      event.initMouseEvent(
        "click",
        ev ? ev.bubbles : false,
        ev ? ev.cancelable : false,
        window,
        // not using getWindow() since this can only be run client side
        0,
        // detail
        0,
        // screen x
        0,
        // screen y
        0,
        // client x
        0,
        // client y
        ev ? ev.ctrlKey : false,
        ev ? ev.altKey : false,
        ev ? ev.shiftKey : false,
        ev ? ev.metaKey : false,
        0,
        // button
        null
      );
    }
    target.dispatchEvent(event);
  }
  function getRootClass() {
    if (!focusZoneStyles) {
      focusZoneStyles = mergeStyles({
        selectors: {
          ":focus": {
            outline: "none"
          }
        }
      }, focusZoneClass);
    }
    return focusZoneStyles;
  }
  var _allInstances = {};
  var _outerZones = /* @__PURE__ */ new Set();
  var ALLOWED_INPUT_TYPES = ["text", "number", "password", "email", "tel", "url", "search", "textarea"];
  var ALLOW_VIRTUAL_ELEMENTS = false;
  var FocusZone = (
    /** @class */
    function(_super) {
      __extends(FocusZone2, _super);
      function FocusZone2(props) {
        var _this = this;
        var _a7, _b3, _c3, _d3;
        _this = _super.call(this, props) || this;
        _this._root = React34.createRef();
        _this._mergedRef = createMergedRef();
        _this._onFocus = function(ev) {
          if (_this._portalContainsElement(ev.target)) {
            return;
          }
          var _a8 = _this.props, onActiveElementChanged = _a8.onActiveElementChanged, doNotAllowFocusEventToPropagate = _a8.doNotAllowFocusEventToPropagate, stopFocusPropagation = _a8.stopFocusPropagation, onFocusNotification = _a8.onFocusNotification, onFocus = _a8.onFocus, shouldFocusInnerElementWhenReceivedFocus = _a8.shouldFocusInnerElementWhenReceivedFocus, defaultTabbableElement = _a8.defaultTabbableElement;
          var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);
          var newActiveElement;
          if (isImmediateDescendant) {
            newActiveElement = ev.target;
          } else {
            var parentElement = ev.target;
            while (parentElement && parentElement !== _this._root.current) {
              if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {
                newActiveElement = parentElement;
                break;
              }
              parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
            }
          }
          if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {
            var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === "function" && _this._root.current && defaultTabbableElement(_this._root.current);
            if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {
              newActiveElement = maybeElementToFocus;
              maybeElementToFocus.focus();
            } else {
              _this.focus(true);
              if (_this._activeElement) {
                newActiveElement = null;
              }
            }
          }
          var initialElementFocused = !_this._activeElement;
          if (newActiveElement && newActiveElement !== _this._activeElement) {
            if (isImmediateDescendant || initialElementFocused) {
              _this._setFocusAlignment(newActiveElement, true, true);
            }
            _this._activeElement = newActiveElement;
            if (initialElementFocused) {
              _this._updateTabIndexes();
            }
          }
          if (onActiveElementChanged) {
            onActiveElementChanged(_this._activeElement, ev);
          }
          if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {
            ev.stopPropagation();
          }
          if (onFocus) {
            onFocus(ev);
          } else if (onFocusNotification) {
            onFocusNotification();
          }
        };
        _this._onBlur = function() {
          _this._setParkedFocus(false);
        };
        _this._onMouseDown = function(ev) {
          if (_this._portalContainsElement(ev.target)) {
            return;
          }
          var disabled = _this.props.disabled;
          if (disabled) {
            return;
          }
          var target = ev.target;
          var path = [];
          while (target && target !== _this._root.current) {
            path.push(target);
            target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);
          }
          while (path.length) {
            target = path.pop();
            if (target && isElementTabbable(target)) {
              _this._setActiveElement(target, true);
            }
            if (isElementFocusZone(target)) {
              break;
            }
          }
        };
        _this._onKeyDown = function(ev, theme) {
          if (_this._portalContainsElement(ev.target)) {
            return;
          }
          var _a8 = _this.props, direction = _a8.direction, disabled = _a8.disabled, isInnerZoneKeystroke = _a8.isInnerZoneKeystroke, pagingSupportDisabled = _a8.pagingSupportDisabled, shouldEnterInnerZone = _a8.shouldEnterInnerZone;
          if (disabled) {
            return;
          }
          if (_this.props.onKeyDown) {
            _this.props.onKeyDown(ev);
          }
          if (ev.isDefaultPrevented()) {
            return;
          }
          if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {
            return;
          }
          if ((shouldEnterInnerZone && shouldEnterInnerZone(ev) || isInnerZoneKeystroke && isInnerZoneKeystroke(ev)) && _this._isImmediateDescendantOfZone(ev.target)) {
            var innerZone = _this._getFirstInnerZone();
            if (innerZone) {
              if (!innerZone.focus(true)) {
                return;
              }
            } else if (isElementFocusSubZone(ev.target)) {
              if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {
                return;
              }
            } else {
              return;
            }
          } else if (ev.altKey) {
            return;
          } else {
            switch (ev.which) {
              case KeyCodes.space:
                if (_this._shouldRaiseClicksOnSpace && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                  break;
                }
                return;
              case KeyCodes.left:
                if (direction !== FocusZoneDirection.vertical) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusLeft(theme)) {
                    break;
                  }
                }
                return;
              case KeyCodes.right:
                if (direction !== FocusZoneDirection.vertical) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusRight(theme)) {
                    break;
                  }
                }
                return;
              case KeyCodes.up:
                if (direction !== FocusZoneDirection.horizontal) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusUp()) {
                    break;
                  }
                }
                return;
              case KeyCodes.down:
                if (direction !== FocusZoneDirection.horizontal) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusDown()) {
                    break;
                  }
                }
                return;
              case KeyCodes.pageDown:
                if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {
                  break;
                }
                return;
              case KeyCodes.pageUp:
                if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {
                  break;
                }
                return;
              case KeyCodes.tab:
                if (
                  // eslint-disable-next-line deprecation/deprecation
                  _this.props.allowTabKey || _this.props.handleTabKey === FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZoneTabbableElements.inputOnly && _this._isElementInput(ev.target)
                ) {
                  var focusChanged = false;
                  _this._processingTabKey = true;
                  if (direction === FocusZoneDirection.vertical || !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {
                    focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();
                  } else {
                    var tabWithDirection = getRTL2(theme) ? !ev.shiftKey : ev.shiftKey;
                    focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);
                  }
                  _this._processingTabKey = false;
                  if (focusChanged) {
                    break;
                  } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {
                    _this._activeElement = null;
                  }
                }
                return;
              case KeyCodes.home:
                if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, false)) {
                  return false;
                }
                var firstChild = _this._root.current && _this._root.current.firstChild;
                if (_this._root.current && firstChild && _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {
                  break;
                }
                return;
              case KeyCodes.end:
                if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, true)) {
                  return false;
                }
                var lastChild = _this._root.current && _this._root.current.lastChild;
                if (_this._root.current && _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {
                  break;
                }
                return;
              case KeyCodes.enter:
                if (_this._shouldRaiseClicksOnEnter && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                  break;
                }
                return;
              default:
                return;
            }
          }
          ev.preventDefault();
          ev.stopPropagation();
        };
        _this._getHorizontalDistanceFromCenter = function(isForward, activeRect, targetRect) {
          var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0;
          var targetRectTop = Math.floor(targetRect.top);
          var activeRectBottom = Math.floor(activeRect.bottom);
          var targetRectBottom = Math.floor(targetRect.bottom);
          var activeRectTop = Math.floor(activeRect.top);
          var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;
          var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;
          if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {
            if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
              return 0;
            }
            return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
          }
          if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
          }
          return LARGE_DISTANCE_FROM_CENTER;
        };
        initializeComponentRef(_this);
        if (true) {
          warnDeprecations("FocusZone", props, {
            rootProps: void 0,
            allowTabKey: "handleTabKey",
            elementType: "as",
            ariaDescribedBy: "aria-describedby",
            ariaLabelledBy: "aria-labelledby"
          });
        }
        _this._id = getId("FocusZone");
        _this._focusAlignment = {
          left: 0,
          top: 0
        };
        _this._processingTabKey = false;
        var shouldRaiseClicksFallback = (_b3 = (_a7 = props.shouldRaiseClicks) !== null && _a7 !== void 0 ? _a7 : FocusZone2.defaultProps.shouldRaiseClicks) !== null && _b3 !== void 0 ? _b3 : true;
        _this._shouldRaiseClicksOnEnter = (_c3 = props.shouldRaiseClicksOnEnter) !== null && _c3 !== void 0 ? _c3 : shouldRaiseClicksFallback;
        _this._shouldRaiseClicksOnSpace = (_d3 = props.shouldRaiseClicksOnSpace) !== null && _d3 !== void 0 ? _d3 : shouldRaiseClicksFallback;
        return _this;
      }
      FocusZone2.getOuterZones = function() {
        return _outerZones.size;
      };
      FocusZone2._onKeyDownCapture = function(ev) {
        if (ev.which === KeyCodes.tab) {
          _outerZones.forEach(function(zone) {
            return zone._updateTabIndexes();
          });
        }
      };
      FocusZone2.prototype.componentDidMount = function() {
        var root2 = this._root.current;
        _allInstances[this._id] = this;
        if (root2) {
          var parentElement = getParent(root2, ALLOW_VIRTUAL_ELEMENTS);
          while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {
            if (isElementFocusZone(parentElement)) {
              this._isInnerZone = true;
              break;
            }
            parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
          }
          if (!this._isInnerZone) {
            _outerZones.add(this);
            this._root.current && this._root.current.addEventListener("keydown", FocusZone2._onKeyDownCapture, true);
          }
          this._root.current && this._root.current.addEventListener("blur", this._onBlur, true);
          this._updateTabIndexes();
          if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === "string") {
            this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement);
          } else if (this.props.defaultActiveElement) {
            this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);
          }
          if (this.props.shouldFocusOnMount) {
            this.focus();
          }
        }
      };
      FocusZone2.prototype.componentDidUpdate = function() {
        var root2 = this._root.current;
        var doc = this._getDocument();
        if (this._activeElement && !elementContains(this._root.current, this._activeElement, ALLOW_VIRTUAL_ELEMENTS) || this._defaultFocusElement && !elementContains(this._root.current, this._defaultFocusElement, ALLOW_VIRTUAL_ELEMENTS)) {
          this._activeElement = null;
          this._defaultFocusElement = null;
          this._updateTabIndexes();
        }
        if (!this.props.preventFocusRestoration && doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || doc.activeElement === root2)) {
          var elementToFocus = getFocusableByIndexPath(root2, this._lastIndexPath);
          if (elementToFocus) {
            this._setActiveElement(elementToFocus, true);
            elementToFocus.focus();
            this._setParkedFocus(false);
          } else {
            this._setParkedFocus(true);
          }
        }
      };
      FocusZone2.prototype.componentWillUnmount = function() {
        delete _allInstances[this._id];
        if (!this._isInnerZone) {
          _outerZones.delete(this);
          this._root.current && this._root.current.removeEventListener("keydown", FocusZone2._onKeyDownCapture, true);
        }
        if (this._root.current) {
          this._root.current.removeEventListener("blur", this._onBlur, true);
        }
        this._activeElement = null;
        this._defaultFocusElement = null;
      };
      FocusZone2.prototype.render = function() {
        var _this = this;
        var _a7 = this.props, tag = _a7.as, elementType = _a7.elementType, rootProps = _a7.rootProps, ariaDescribedBy = _a7.ariaDescribedBy, ariaLabelledBy = _a7.ariaLabelledBy, className = _a7.className;
        var divProps = getNativeProps(this.props, htmlElementProperties);
        var Tag2 = tag || elementType || "div";
        this._evaluateFocusBeforeRender();
        var theme = getTheme();
        return React34.createElement(Tag2, __assign({ "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy }, divProps, rootProps, {
          // Once the getClassName correctly memoizes inputs this should
          // be replaced so that className is passed to getRootClass and is included there so
          // the class names will always be in the same order.
          className: css(getRootClass(), className),
          // eslint-disable-next-line deprecation/deprecation
          ref: this._mergedRef(this.props.elementRef, this._root),
          "data-focuszone-id": this._id,
          // eslint-disable-next-line react/jsx-no-bind
          onKeyDown: function(ev) {
            return _this._onKeyDown(ev, theme);
          },
          onFocus: this._onFocus,
          onMouseDownCapture: this._onMouseDown
        }), this.props.children);
      };
      FocusZone2.prototype.focus = function(forceIntoFirstElement, bypassHiddenElements) {
        if (forceIntoFirstElement === void 0) {
          forceIntoFirstElement = false;
        }
        if (bypassHiddenElements === void 0) {
          bypassHiddenElements = false;
        }
        if (this._root.current) {
          if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true" && this._isInnerZone) {
            var ownerZoneElement = this._getOwnerZone(this._root.current);
            if (ownerZoneElement !== this._root.current) {
              var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
              return !!ownerZone && ownerZone.focusElement(this._root.current);
            }
            return false;
          } else if (!forceIntoFirstElement && this._activeElement && elementContains(this._root.current, this._activeElement) && isElementTabbable(this._activeElement) && (!bypassHiddenElements || isElementVisibleAndNotHidden(this._activeElement))) {
            this._activeElement.focus();
            return true;
          } else {
            var firstChild = this._root.current.firstChild;
            return this.focusElement(getNextElement(this._root.current, firstChild, true, void 0, void 0, void 0, void 0, void 0, bypassHiddenElements));
          }
        }
        return false;
      };
      FocusZone2.prototype.focusLast = function() {
        if (this._root.current) {
          var lastChild = this._root.current && this._root.current.lastChild;
          return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));
        }
        return false;
      };
      FocusZone2.prototype.focusElement = function(element, forceAlignment) {
        var _a7 = this.props, onBeforeFocus = _a7.onBeforeFocus, shouldReceiveFocus = _a7.shouldReceiveFocus;
        if (shouldReceiveFocus && !shouldReceiveFocus(element) || onBeforeFocus && !onBeforeFocus(element)) {
          return false;
        }
        if (element) {
          this._setActiveElement(element, forceAlignment);
          if (this._activeElement) {
            this._activeElement.focus();
          }
          return true;
        }
        return false;
      };
      FocusZone2.prototype.setFocusAlignment = function(point) {
        this._focusAlignment = point;
      };
      Object.defineProperty(FocusZone2.prototype, "defaultFocusElement", {
        get: function() {
          return this._defaultFocusElement;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FocusZone2.prototype, "activeElement", {
        get: function() {
          return this._activeElement;
        },
        enumerable: false,
        configurable: true
      });
      FocusZone2.prototype._evaluateFocusBeforeRender = function() {
        var root2 = this._root.current;
        var doc = this._getDocument();
        if (doc) {
          var focusedElement = doc.activeElement;
          if (focusedElement !== root2) {
            var shouldRestoreFocus = elementContains(root2, focusedElement, false);
            this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root2, focusedElement) : void 0;
          }
        }
      };
      FocusZone2.prototype._setParkedFocus = function(isParked) {
        var root2 = this._root.current;
        if (root2 && this._isParked !== isParked) {
          this._isParked = isParked;
          if (isParked) {
            if (!this.props.allowFocusRoot) {
              this._parkedTabIndex = root2.getAttribute("tabindex");
              root2.setAttribute("tabindex", "-1");
            }
            root2.focus();
          } else if (!this.props.allowFocusRoot) {
            if (this._parkedTabIndex) {
              root2.setAttribute("tabindex", this._parkedTabIndex);
              this._parkedTabIndex = void 0;
            } else {
              root2.removeAttribute("tabindex");
            }
          }
        }
      };
      FocusZone2.prototype._setActiveElement = function(element, forceAlignment) {
        var previousActiveElement = this._activeElement;
        this._activeElement = element;
        if (previousActiveElement) {
          if (isElementFocusZone(previousActiveElement)) {
            this._updateTabIndexes(previousActiveElement);
          }
          previousActiveElement.tabIndex = -1;
        }
        if (this._activeElement) {
          if (!this._focusAlignment || forceAlignment) {
            this._setFocusAlignment(element, true, true);
          }
          this._activeElement.tabIndex = 0;
        }
      };
      FocusZone2.prototype._preventDefaultWhenHandled = function(ev) {
        this.props.preventDefaultWhenHandled && ev.preventDefault();
      };
      FocusZone2.prototype._tryInvokeClickForFocusable = function(targetElement, ev) {
        var target = targetElement;
        if (target === this._root.current) {
          return false;
        }
        do {
          if (target.tagName === "BUTTON" || target.tagName === "A" || target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.tagName === "SUMMARY") {
            return false;
          }
          if (this._isImmediateDescendantOfZone(target) && target.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true" && target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== "true") {
            raiseClickFromKeyboardEvent(target, ev);
            return true;
          }
          target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);
        } while (target !== this._root.current);
        return false;
      };
      FocusZone2.prototype._getFirstInnerZone = function(rootElement) {
        rootElement = rootElement || this._activeElement || this._root.current;
        if (!rootElement) {
          return null;
        }
        if (isElementFocusZone(rootElement)) {
          return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
        }
        var child = rootElement.firstElementChild;
        while (child) {
          if (isElementFocusZone(child)) {
            return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
          }
          var match = this._getFirstInnerZone(child);
          if (match) {
            return match;
          }
          child = child.nextElementSibling;
        }
        return null;
      };
      FocusZone2.prototype._moveFocus = function(isForward, getDistanceFromCenter, ev, useDefaultWrap) {
        if (useDefaultWrap === void 0) {
          useDefaultWrap = true;
        }
        var element = this._activeElement;
        var candidateDistance = -1;
        var candidateElement = void 0;
        var changedFocus = false;
        var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;
        if (!element || !this._root.current) {
          return false;
        }
        if (this._isElementInput(element)) {
          if (!this._shouldInputLoseFocus(element, isForward)) {
            return false;
          }
        }
        var activeRect = isBidirectional ? element.getBoundingClientRect() : null;
        do {
          element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);
          if (isBidirectional) {
            if (element) {
              var targetRect = element.getBoundingClientRect();
              var elementDistance = getDistanceFromCenter(activeRect, targetRect);
              if (elementDistance === -1 && candidateDistance === -1) {
                candidateElement = element;
                break;
              }
              if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {
                candidateDistance = elementDistance;
                candidateElement = element;
              }
              if (candidateDistance >= 0 && elementDistance < 0) {
                break;
              }
            }
          } else {
            candidateElement = element;
            break;
          }
        } while (element);
        if (candidateElement && candidateElement !== this._activeElement) {
          changedFocus = true;
          this.focusElement(candidateElement);
        } else if (this.props.isCircularNavigation && useDefaultWrap) {
          if (isForward) {
            return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
          } else {
            return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
          }
        }
        return changedFocus;
      };
      FocusZone2.prototype._moveFocusDown = function() {
        var _this = this;
        var targetTop = -1;
        var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
        if (
          // eslint-disable-next-line deprecation/deprecation
          this._moveFocus(true, function(activeRect, targetRect) {
            var distance = -1;
            var targetRectTop = Math.floor(targetRect.top);
            var activeRectBottom = Math.floor(activeRect.bottom);
            if (targetRectTop < activeRectBottom) {
              if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
                return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
              }
              return LARGE_DISTANCE_FROM_CENTER;
            }
            if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {
              targetTop = targetRectTop;
              if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
                distance = 0;
              } else {
                distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
              }
            }
            return distance;
          })
        ) {
          this._setFocusAlignment(this._activeElement, false, true);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusUp = function() {
        var _this = this;
        var targetTop = -1;
        var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
        if (
          // eslint-disable-next-line deprecation/deprecation
          this._moveFocus(false, function(activeRect, targetRect) {
            var distance = -1;
            var targetRectBottom = Math.floor(targetRect.bottom);
            var targetRectTop = Math.floor(targetRect.top);
            var activeRectTop = Math.floor(activeRect.top);
            if (targetRectBottom > activeRectTop) {
              if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
                return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
              }
              return LARGE_DISTANCE_FROM_CENTER;
            }
            if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {
              targetTop = targetRectTop;
              if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
                distance = 0;
              } else {
                distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
              }
            }
            return distance;
          })
        ) {
          this._setFocusAlignment(this._activeElement, false, true);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusLeft = function(theme) {
        var _this = this;
        var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
        if (this._moveFocus(
          getRTL2(theme),
          // eslint-disable-next-line deprecation/deprecation
          function(activeRect, targetRect) {
            var distance = -1;
            var topBottomComparison;
            if (getRTL2(theme)) {
              topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
            } else {
              topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
            }
            if (topBottomComparison && targetRect.right <= activeRect.right && _this.props.direction !== FocusZoneDirection.vertical) {
              distance = activeRect.right - targetRect.right;
            } else if (!shouldWrap) {
              distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
            }
            return distance;
          },
          void 0,
          shouldWrap
        )) {
          this._setFocusAlignment(this._activeElement, true, false);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusRight = function(theme) {
        var _this = this;
        var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
        if (this._moveFocus(
          !getRTL2(theme),
          // eslint-disable-next-line deprecation/deprecation
          function(activeRect, targetRect) {
            var distance = -1;
            var topBottomComparison;
            if (getRTL2(theme)) {
              topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
            } else {
              topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
            }
            if (topBottomComparison && targetRect.left >= activeRect.left && _this.props.direction !== FocusZoneDirection.vertical) {
              distance = targetRect.left - activeRect.left;
            } else if (!shouldWrap) {
              distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
            }
            return distance;
          },
          void 0,
          shouldWrap
        )) {
          this._setFocusAlignment(this._activeElement, true, false);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusPaging = function(isForward, useDefaultWrap) {
        if (useDefaultWrap === void 0) {
          useDefaultWrap = true;
        }
        var element = this._activeElement;
        if (!element || !this._root.current) {
          return false;
        }
        if (this._isElementInput(element)) {
          if (!this._shouldInputLoseFocus(element, isForward)) {
            return false;
          }
        }
        var scrollableParent = findScrollableParent(element);
        if (!scrollableParent) {
          return false;
        }
        var candidateDistance = -1;
        var candidateElement = void 0;
        var targetTop = -1;
        var targetBottom = -1;
        var pagesize = scrollableParent.clientHeight;
        var activeRect = element.getBoundingClientRect();
        do {
          element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);
          if (element) {
            var targetRect = element.getBoundingClientRect();
            var targetRectTop = Math.floor(targetRect.top);
            var activeRectBottom = Math.floor(activeRect.bottom);
            var targetRectBottom = Math.floor(targetRect.bottom);
            var activeRectTop = Math.floor(activeRect.top);
            var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);
            var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;
            var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;
            if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {
              break;
            }
            if (elementDistance > -1) {
              if (isForward && targetRectTop > targetTop) {
                targetTop = targetRectTop;
                candidateDistance = elementDistance;
                candidateElement = element;
              } else if (!isForward && targetRectBottom < targetBottom) {
                targetBottom = targetRectBottom;
                candidateDistance = elementDistance;
                candidateElement = element;
              } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {
                candidateDistance = elementDistance;
                candidateElement = element;
              }
            }
          }
        } while (element);
        var changedFocus = false;
        if (candidateElement && candidateElement !== this._activeElement) {
          changedFocus = true;
          this.focusElement(candidateElement);
          this._setFocusAlignment(candidateElement, false, true);
        } else if (this.props.isCircularNavigation && useDefaultWrap) {
          if (isForward) {
            return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
          }
          return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
        }
        return changedFocus;
      };
      FocusZone2.prototype._setFocusAlignment = function(element, isHorizontal, isVertical) {
        if (this.props.direction === FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {
          var rect = element.getBoundingClientRect();
          var left = rect.left + rect.width / 2;
          var top_1 = rect.top + rect.height / 2;
          if (!this._focusAlignment) {
            this._focusAlignment = { left, top: top_1 };
          }
          if (isHorizontal) {
            this._focusAlignment.left = left;
          }
          if (isVertical) {
            this._focusAlignment.top = top_1;
          }
        }
      };
      FocusZone2.prototype._isImmediateDescendantOfZone = function(element) {
        return this._getOwnerZone(element) === this._root.current;
      };
      FocusZone2.prototype._getOwnerZone = function(element) {
        var parentElement = getParent(element, ALLOW_VIRTUAL_ELEMENTS);
        while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {
          if (isElementFocusZone(parentElement)) {
            return parentElement;
          }
          parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
        }
        return parentElement;
      };
      FocusZone2.prototype._updateTabIndexes = function(element) {
        if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === "function") {
          this._activeElement = this.props.defaultTabbableElement(this._root.current);
        }
        if (!element && this._root.current) {
          this._defaultFocusElement = null;
          element = this._root.current;
          if (this._activeElement && !elementContains(element, this._activeElement)) {
            this._activeElement = null;
          }
        }
        if (this._activeElement && !isElementTabbable(this._activeElement)) {
          this._activeElement = null;
        }
        var childNodes = element && element.children;
        for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {
          var child = childNodes[childIndex];
          if (!isElementFocusZone(child)) {
            if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "false") {
              child.setAttribute(TABINDEX, "-1");
            }
            if (isElementTabbable(child)) {
              if (this.props.disabled) {
                child.setAttribute(TABINDEX, "-1");
              } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
                this._defaultFocusElement = child;
                if (child.getAttribute(TABINDEX) !== "0") {
                  child.setAttribute(TABINDEX, "0");
                }
              } else if (child.getAttribute(TABINDEX) !== "-1") {
                child.setAttribute(TABINDEX, "-1");
              }
            } else if (child.tagName === "svg" && child.getAttribute("focusable") !== "false") {
              child.setAttribute("focusable", "false");
            }
          } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true") {
            if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
              this._defaultFocusElement = child;
              if (child.getAttribute(TABINDEX) !== "0") {
                child.setAttribute(TABINDEX, "0");
              }
            } else if (child.getAttribute(TABINDEX) !== "-1") {
              child.setAttribute(TABINDEX, "-1");
            }
          }
          this._updateTabIndexes(child);
        }
      };
      FocusZone2.prototype._isContentEditableElement = function(element) {
        return element && element.getAttribute("contenteditable") === "true";
      };
      FocusZone2.prototype._isElementInput = function(element) {
        if (element && element.tagName && (element.tagName.toLowerCase() === "input" || element.tagName.toLowerCase() === "textarea")) {
          return true;
        }
        return false;
      };
      FocusZone2.prototype._shouldInputLoseFocus = function(element, isForward) {
        if (!this._processingTabKey && element && element.type && ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {
          var selectionStart = element.selectionStart;
          var selectionEnd = element.selectionEnd;
          var isRangeSelected = selectionStart !== selectionEnd;
          var inputValue = element.value;
          var isReadonly = element.readOnly;
          if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element))) {
            return false;
          }
        }
        return true;
      };
      FocusZone2.prototype._shouldWrapFocus = function(element, noWrapDataAttribute) {
        return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;
      };
      FocusZone2.prototype._portalContainsElement = function(element) {
        return element && !!this._root.current && portalContainsElement(element, this._root.current);
      };
      FocusZone2.prototype._getDocument = function() {
        return getDocument(this._root.current);
      };
      FocusZone2.defaultProps = {
        isCircularNavigation: false,
        direction: FocusZoneDirection.bidirectional,
        shouldRaiseClicks: true
      };
      return FocusZone2;
    }(React34.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.js
  var React47 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.js
  var React46 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.base.js
  var React45 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.types.js
  var ContextualMenuItemType;
  (function(ContextualMenuItemType2) {
    ContextualMenuItemType2[ContextualMenuItemType2["Normal"] = 0] = "Normal";
    ContextualMenuItemType2[ContextualMenuItemType2["Divider"] = 1] = "Divider";
    ContextualMenuItemType2[ContextualMenuItemType2["Header"] = 2] = "Header";
    ContextualMenuItemType2[ContextualMenuItemType2["Section"] = 3] = "Section";
  })(ContextualMenuItemType || (ContextualMenuItemType = {}));

  // ../node_modules/@fluentui/react/lib/utilities/contextualMenu/contextualMenuUtility.js
  function getIsChecked(item) {
    if (item.canCheck) {
      return !!(item.isChecked || item.checked);
    }
    if (typeof item.isChecked === "boolean") {
      return item.isChecked;
    }
    if (typeof item.checked === "boolean") {
      return item.checked;
    }
    return null;
  }
  function hasSubmenu(item) {
    return !!(item.subMenuProps || item.items);
  }
  function isItemDisabled(item) {
    return !!(item.isDisabled || item.disabled);
  }
  function getMenuItemAriaRole(item) {
    var isChecked = getIsChecked(item);
    var canCheck = isChecked !== null;
    return canCheck ? "menuitemcheckbox" : "menuitem";
  }

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItem.base.js
  var React35 = __toESM(require_react());
  var defaultIconRenderer = function(props) {
    var item = props.item, classNames2 = props.classNames;
    var iconProps = item.iconProps;
    return React35.createElement(Icon, __assign({}, iconProps, { className: classNames2.icon }));
  };
  var renderItemIcon = function(props) {
    var item = props.item, hasIcons = props.hasIcons;
    if (!hasIcons) {
      return null;
    }
    if (item.onRenderIcon) {
      return item.onRenderIcon(props, defaultIconRenderer);
    }
    return defaultIconRenderer(props);
  };
  var renderCheckMarkIcon = function(_a7) {
    var onCheckmarkClick = _a7.onCheckmarkClick, item = _a7.item, classNames2 = _a7.classNames;
    var isItemChecked = getIsChecked(item);
    if (onCheckmarkClick) {
      var onClick = function(e2) {
        return onCheckmarkClick(item, e2);
      };
      return React35.createElement(Icon, {
        iconName: item.canCheck !== false && isItemChecked ? "CheckMark" : "",
        className: classNames2.checkmarkIcon,
        // eslint-disable-next-line react/jsx-no-bind
        onClick
      });
    }
    return null;
  };
  var renderItemName = function(_a7) {
    var item = _a7.item, classNames2 = _a7.classNames;
    if (item.text || item.name) {
      return React35.createElement("span", { className: classNames2.label }, item.text || item.name);
    }
    return null;
  };
  var renderSecondaryText = function(_a7) {
    var item = _a7.item, classNames2 = _a7.classNames;
    if (item.secondaryText) {
      return React35.createElement("span", { className: classNames2.secondaryText }, item.secondaryText);
    }
    return null;
  };
  var renderSubMenuIcon = function(_a7) {
    var item = _a7.item, classNames2 = _a7.classNames, theme = _a7.theme;
    if (hasSubmenu(item)) {
      return React35.createElement(Icon, __assign({ iconName: getRTL2(theme) ? "ChevronLeft" : "ChevronRight" }, item.submenuIconProps, { className: classNames2.subMenuIcon }));
    }
    return null;
  };
  var ContextualMenuItemBase = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuItemBase2, _super);
      function ContextualMenuItemBase2(props) {
        var _this = _super.call(this, props) || this;
        _this.openSubMenu = function() {
          var _a7 = _this.props, item = _a7.item, openSubMenu = _a7.openSubMenu, getSubmenuTarget = _a7.getSubmenuTarget;
          if (getSubmenuTarget) {
            var submenuTarget = getSubmenuTarget();
            if (hasSubmenu(item) && openSubMenu && submenuTarget) {
              openSubMenu(item, submenuTarget);
            }
          }
        };
        _this.dismissSubMenu = function() {
          var _a7 = _this.props, item = _a7.item, dismissSubMenu = _a7.dismissSubMenu;
          if (hasSubmenu(item) && dismissSubMenu) {
            dismissSubMenu();
          }
        };
        _this.dismissMenu = function(dismissAll) {
          var dismissMenu = _this.props.dismissMenu;
          if (dismissMenu) {
            dismissMenu(void 0, dismissAll);
          }
        };
        initializeComponentRef(_this);
        return _this;
      }
      ContextualMenuItemBase2.prototype.render = function() {
        var _a7 = this.props, item = _a7.item, classNames2 = _a7.classNames;
        var renderContent = item.onRenderContent || this._renderLayout;
        return React35.createElement("div", { className: item.split ? classNames2.linkContentMenu : classNames2.linkContent }, renderContent(this.props, {
          renderCheckMarkIcon,
          renderItemIcon,
          renderItemName,
          renderSecondaryText,
          renderSubMenuIcon
        }));
      };
      ContextualMenuItemBase2.prototype._renderLayout = function(props, defaultRenders) {
        return React35.createElement(
          React35.Fragment,
          null,
          defaultRenders.renderCheckMarkIcon(props),
          defaultRenders.renderItemIcon(props),
          defaultRenders.renderItemName(props),
          defaultRenders.renderSecondaryText(props),
          defaultRenders.renderSubMenuIcon(props)
        );
      };
      return ContextualMenuItemBase2;
    }(React35.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.classNames.js
  var getDividerClassNames = memoizeFunction(
    // eslint-disable-next-line deprecation/deprecation
    function(theme) {
      return mergeStyleSets({
        wrapper: {
          display: "inline-flex",
          height: "100%",
          alignItems: "center"
        },
        divider: {
          width: 1,
          height: "100%",
          backgroundColor: theme.palette.neutralTertiaryAlt
        }
      });
    }
  );

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.cnstyles.js
  var CONTEXTUAL_MENU_ITEM_HEIGHT = 36;
  var MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);
  var getMenuItemStyles = memoizeFunction(function(theme) {
    var _a7, _b3, _c3, _d3, _e2;
    var semanticColors = theme.semanticColors, fonts = theme.fonts, palette = theme.palette;
    var ContextualMenuItemBackgroundHoverColor = semanticColors.menuItemBackgroundHovered;
    var ContextualMenuItemTextHoverColor = semanticColors.menuItemTextHovered;
    var ContextualMenuItemBackgroundSelectedColor = semanticColors.menuItemBackgroundPressed;
    var ContextualMenuItemDividerColor = semanticColors.bodyDivider;
    var menuItemStyles = {
      item: [
        fonts.medium,
        {
          color: semanticColors.bodyText,
          position: "relative",
          boxSizing: "border-box"
        }
      ],
      divider: {
        display: "block",
        height: "1px",
        backgroundColor: ContextualMenuItemDividerColor,
        position: "relative"
      },
      root: [
        getFocusStyle(theme),
        fonts.medium,
        {
          color: semanticColors.bodyText,
          backgroundColor: "transparent",
          border: "none",
          width: "100%",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
          display: "block",
          cursor: "pointer",
          padding: "0px 8px 0 4px",
          textAlign: "left"
        }
      ],
      rootDisabled: {
        color: semanticColors.disabledBodyText,
        cursor: "default",
        pointerEvents: "none",
        selectors: (_a7 = {}, _a7[HighContrastSelector] = {
          // ensure disabled text looks different than enabled
          color: "GrayText",
          opacity: 1
        }, _a7)
      },
      rootHovered: {
        backgroundColor: ContextualMenuItemBackgroundHoverColor,
        color: ContextualMenuItemTextHoverColor,
        selectors: {
          ".ms-ContextualMenu-icon": {
            color: palette.themeDarkAlt
          },
          ".ms-ContextualMenu-submenuIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootFocused: {
        backgroundColor: palette.white
      },
      rootChecked: {
        selectors: {
          ".ms-ContextualMenu-checkmarkIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootPressed: {
        backgroundColor: ContextualMenuItemBackgroundSelectedColor,
        selectors: {
          ".ms-ContextualMenu-icon": {
            color: palette.themeDark
          },
          ".ms-ContextualMenu-submenuIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootExpanded: {
        backgroundColor: ContextualMenuItemBackgroundSelectedColor,
        color: semanticColors.bodyTextChecked,
        selectors: (_b3 = {
          ".ms-ContextualMenu-submenuIcon": (_c3 = {}, _c3[HighContrastSelector] = {
            // icons inside of anchor tags are not properly inheriting color in high contrast
            color: "inherit"
          }, _c3)
        }, _b3[HighContrastSelector] = __assign({}, getHighContrastNoAdjustStyle()), _b3)
      },
      linkContent: {
        whiteSpace: "nowrap",
        height: "inherit",
        display: "flex",
        alignItems: "center",
        maxWidth: "100%"
      },
      anchorLink: {
        padding: "0px 8px 0 4px",
        textRendering: "auto",
        color: "inherit",
        letterSpacing: "normal",
        wordSpacing: "normal",
        textTransform: "none",
        textIndent: "0px",
        textShadow: "none",
        textDecoration: "none",
        boxSizing: "border-box"
      },
      label: {
        margin: "0 4px",
        verticalAlign: "middle",
        display: "inline-block",
        flexGrow: "1",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
      },
      secondaryText: {
        color: theme.palette.neutralSecondary,
        paddingLeft: "20px",
        textAlign: "right"
      },
      icon: {
        display: "inline-block",
        minHeight: "1px",
        maxHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
        fontSize: IconFontSizes.medium,
        width: IconFontSizes.medium,
        margin: "0 4px",
        verticalAlign: "middle",
        flexShrink: "0",
        selectors: (_d3 = {}, _d3[MediumScreenSelector] = {
          fontSize: IconFontSizes.large,
          width: IconFontSizes.large
        }, _d3)
      },
      iconColor: {
        color: semanticColors.menuIcon
      },
      iconDisabled: {
        color: semanticColors.disabledBodyText
      },
      checkmarkIcon: {
        color: semanticColors.bodySubtext
      },
      subMenuIcon: {
        height: CONTEXTUAL_MENU_ITEM_HEIGHT,
        lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
        color: palette.neutralSecondary,
        textAlign: "center",
        display: "inline-block",
        verticalAlign: "middle",
        flexShrink: "0",
        fontSize: IconFontSizes.small,
        selectors: (_e2 = {
          ":hover": {
            color: palette.neutralPrimary
          },
          ":active": {
            color: palette.neutralPrimary
          }
        }, _e2[MediumScreenSelector] = {
          fontSize: IconFontSizes.medium
          // 16px
        }, _e2)
      },
      splitButtonFlexContainer: [
        getFocusStyle(theme),
        {
          display: "flex",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          flexWrap: "nowrap",
          justifyContent: "center",
          alignItems: "flex-start"
        }
      ]
    };
    return concatStyleSets(menuItemStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.classNames.js
  var CONTEXTUAL_SPLIT_MENU_MINWIDTH = "28px";
  var MediumScreenSelector2 = getScreenSelector(0, ScreenWidthMaxMedium);
  var getSplitButtonVerticalDividerClassNames = memoizeFunction(
    /* eslint-disable deprecation/deprecation */
    function(theme) {
      var _a7;
      return mergeStyleSets(getDividerClassNames(theme), {
        /* eslint-enable deprecation/deprecation */
        wrapper: {
          position: "absolute",
          right: 28,
          selectors: (_a7 = {}, _a7[MediumScreenSelector2] = {
            right: 32
            // fontSize of the icon increased from 12px to 16px
          }, _a7)
        },
        divider: {
          height: 16,
          width: 1
        }
      });
    }
  );
  var GlobalClassNames5 = {
    item: "ms-ContextualMenu-item",
    divider: "ms-ContextualMenu-divider",
    root: "ms-ContextualMenu-link",
    isChecked: "is-checked",
    isExpanded: "is-expanded",
    isDisabled: "is-disabled",
    linkContent: "ms-ContextualMenu-linkContent",
    linkContentMenu: "ms-ContextualMenu-linkContent",
    icon: "ms-ContextualMenu-icon",
    iconColor: "ms-ContextualMenu-iconColor",
    checkmarkIcon: "ms-ContextualMenu-checkmarkIcon",
    subMenuIcon: "ms-ContextualMenu-submenuIcon",
    label: "ms-ContextualMenu-itemText",
    secondaryText: "ms-ContextualMenu-secondaryText",
    splitMenu: "ms-ContextualMenu-splitMenu",
    screenReaderText: "ms-ContextualMenu-screenReaderText"
  };
  var getItemClassNames = memoizeFunction(function(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className) {
    var _a7, _b3, _c3, _d3;
    var styles2 = getMenuItemStyles(theme);
    var classNames2 = getGlobalClassNames(GlobalClassNames5, theme);
    return mergeStyleSets({
      item: [classNames2.item, styles2.item, itemClassName],
      divider: [classNames2.divider, styles2.divider, dividerClassName],
      root: [
        classNames2.root,
        styles2.root,
        checked && [classNames2.isChecked, styles2.rootChecked],
        isAnchorLink && styles2.anchorLink,
        expanded && [classNames2.isExpanded, styles2.rootExpanded],
        disabled && [classNames2.isDisabled, styles2.rootDisabled],
        !disabled && !expanded && [
          {
            selectors: (_a7 = {
              ":hover": styles2.rootHovered,
              ":active": styles2.rootPressed
            }, _a7[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles2.rootFocused, _a7[".".concat(IsFocusVisibleClassName, " &:hover")] = { background: "inherit;" }, _a7)
          }
        ],
        className
      ],
      splitPrimary: [
        styles2.root,
        {
          width: "calc(100% - ".concat(CONTEXTUAL_SPLIT_MENU_MINWIDTH, ")")
        },
        checked && ["is-checked", styles2.rootChecked],
        (disabled || primaryDisabled) && ["is-disabled", styles2.rootDisabled],
        !(disabled || primaryDisabled) && !checked && [
          {
            selectors: (_b3 = {
              ":hover": styles2.rootHovered
            }, // when hovering over the splitPrimary also affect the splitMenu
            _b3[":hover ~ .".concat(classNames2.splitMenu)] = styles2.rootHovered, _b3[":active"] = styles2.rootPressed, _b3[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles2.rootFocused, _b3[".".concat(IsFocusVisibleClassName, " &:hover")] = { background: "inherit;" }, _b3)
          }
        ]
      ],
      splitMenu: [
        classNames2.splitMenu,
        styles2.root,
        {
          flexBasis: "0",
          padding: "0 8px",
          minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH
        },
        expanded && ["is-expanded", styles2.rootExpanded],
        disabled && ["is-disabled", styles2.rootDisabled],
        !disabled && !expanded && [
          {
            selectors: (_c3 = {
              ":hover": styles2.rootHovered,
              ":active": styles2.rootPressed
            }, _c3[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles2.rootFocused, _c3[".".concat(IsFocusVisibleClassName, " &:hover")] = { background: "inherit;" }, _c3)
          }
        ]
      ],
      anchorLink: styles2.anchorLink,
      linkContent: [classNames2.linkContent, styles2.linkContent],
      linkContentMenu: [
        classNames2.linkContentMenu,
        styles2.linkContent,
        {
          justifyContent: "center"
        }
      ],
      icon: [
        classNames2.icon,
        knownIcon && styles2.iconColor,
        styles2.icon,
        iconClassName,
        disabled && [classNames2.isDisabled, styles2.iconDisabled]
      ],
      iconColor: styles2.iconColor,
      checkmarkIcon: [classNames2.checkmarkIcon, knownIcon && styles2.checkmarkIcon, styles2.icon, iconClassName],
      subMenuIcon: [
        classNames2.subMenuIcon,
        styles2.subMenuIcon,
        subMenuClassName,
        expanded && { color: theme.palette.neutralPrimary },
        disabled && [styles2.iconDisabled]
      ],
      label: [classNames2.label, styles2.label],
      secondaryText: [classNames2.secondaryText, styles2.secondaryText],
      splitContainer: [
        styles2.splitButtonFlexContainer,
        !disabled && !checked && [
          {
            selectors: (_d3 = {}, _d3[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles2.rootFocused, _d3)
          }
        ]
      ],
      screenReaderText: [
        classNames2.screenReaderText,
        styles2.screenReaderText,
        hiddenContentStyle,
        { visibility: "hidden" }
      ]
    });
  });
  var getItemStyles = function(props) {
    var theme = props.theme, disabled = props.disabled, expanded = props.expanded, checked = props.checked, isAnchorLink = props.isAnchorLink, knownIcon = props.knownIcon, itemClassName = props.itemClassName, dividerClassName = props.dividerClassName, iconClassName = props.iconClassName, subMenuClassName = props.subMenuClassName, primaryDisabled = props.primaryDisabled, className = props.className;
    return getItemClassNames(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className);
  };

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItem.js
  var ContextualMenuItem = styled(ContextualMenuItemBase, getItemStyles, void 0, { scope: "ContextualMenuItem" });

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.js
  var React38 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuItemWrapper.js
  var React36 = __toESM(require_react());
  var ContextualMenuItemWrapper = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuItemWrapper2, _super);
      function ContextualMenuItemWrapper2(props) {
        var _this = _super.call(this, props) || this;
        _this._onItemMouseEnter = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemMouseEnter = _a7.onItemMouseEnter;
          if (onItemMouseEnter) {
            onItemMouseEnter(item, ev, ev.currentTarget);
          }
        };
        _this._onItemClick = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemClickBase = _a7.onItemClickBase;
          if (onItemClickBase) {
            onItemClickBase(item, ev, ev.currentTarget);
          }
        };
        _this._onItemMouseLeave = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemMouseLeave = _a7.onItemMouseLeave;
          if (onItemMouseLeave) {
            onItemMouseLeave(item, ev);
          }
        };
        _this._onItemKeyDown = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemKeyDown = _a7.onItemKeyDown;
          if (onItemKeyDown) {
            onItemKeyDown(item, ev);
          }
        };
        _this._onItemMouseMove = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemMouseMove = _a7.onItemMouseMove;
          if (onItemMouseMove) {
            onItemMouseMove(item, ev, ev.currentTarget);
          }
        };
        _this._getSubmenuTarget = function() {
          return void 0;
        };
        initializeComponentRef(_this);
        return _this;
      }
      ContextualMenuItemWrapper2.prototype.shouldComponentUpdate = function(newProps) {
        return !shallowCompare(newProps, this.props);
      };
      return ContextualMenuItemWrapper2;
    }(React36.Component)
  );

  // ../node_modules/@fluentui/react/lib/utilities/keytips/KeytipConstants.js
  var KTP_PREFIX = "ktp";
  var KTP_SEPARATOR = "-";
  var KTP_FULL_PREFIX = KTP_PREFIX + KTP_SEPARATOR;
  var DATAKTP_TARGET = "data-ktp-target";
  var DATAKTP_EXECUTE_TARGET = "data-ktp-execute-target";
  var KTP_LAYER_ID = "ktp-layer-id";
  var KeytipEvents;
  (function(KeytipEvents2) {
    KeytipEvents2.KEYTIP_ADDED = "keytipAdded";
    KeytipEvents2.KEYTIP_REMOVED = "keytipRemoved";
    KeytipEvents2.KEYTIP_UPDATED = "keytipUpdated";
    KeytipEvents2.PERSISTED_KEYTIP_ADDED = "persistedKeytipAdded";
    KeytipEvents2.PERSISTED_KEYTIP_REMOVED = "persistedKeytipRemoved";
    KeytipEvents2.PERSISTED_KEYTIP_EXECUTE = "persistedKeytipExecute";
    KeytipEvents2.ENTER_KEYTIP_MODE = "enterKeytipMode";
    KeytipEvents2.EXIT_KEYTIP_MODE = "exitKeytipMode";
  })(KeytipEvents || (KeytipEvents = {}));

  // ../node_modules/@fluentui/react/lib/utilities/keytips/KeytipManager.js
  var KeytipManager = (
    /** @class */
    function() {
      function KeytipManager2() {
        this.keytips = {};
        this.persistedKeytips = {};
        this.sequenceMapping = {};
        this.inKeytipMode = false;
        this.shouldEnterKeytipMode = true;
        this.delayUpdatingKeytipChange = false;
      }
      KeytipManager2.getInstance = function() {
        return this._instance;
      };
      KeytipManager2.prototype.init = function(delayUpdatingKeytipChange) {
        this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;
      };
      KeytipManager2.prototype.register = function(keytipProps, persisted) {
        if (persisted === void 0) {
          persisted = false;
        }
        var props = keytipProps;
        if (!persisted) {
          props = this.addParentOverflow(keytipProps);
          this.sequenceMapping[props.keySequences.toString()] = props;
        }
        var uniqueKeytip = this._getUniqueKtp(props);
        persisted ? this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip : this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip;
        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
          var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;
          EventGroup.raise(this, event_1, {
            keytip: props,
            uniqueID: uniqueKeytip.uniqueID
          });
        }
        return uniqueKeytip.uniqueID;
      };
      KeytipManager2.prototype.update = function(keytipProps, uniqueID) {
        var newKeytipProps = this.addParentOverflow(keytipProps);
        var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);
        var oldKeyTip = this.keytips[uniqueID];
        if (oldKeyTip) {
          uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;
          this.keytips[uniqueID] = uniqueKeytip;
          delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];
          this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;
          if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
            EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {
              keytip: uniqueKeytip.keytip,
              uniqueID: uniqueKeytip.uniqueID
            });
          }
        }
      };
      KeytipManager2.prototype.unregister = function(keytipToRemove, uniqueID, persisted) {
        if (persisted === void 0) {
          persisted = false;
        }
        persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];
        !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];
        var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;
        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
          EventGroup.raise(this, event, {
            keytip: keytipToRemove,
            uniqueID
          });
        }
      };
      KeytipManager2.prototype.enterKeytipMode = function() {
        EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);
      };
      KeytipManager2.prototype.exitKeytipMode = function() {
        EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);
      };
      KeytipManager2.prototype.getKeytips = function() {
        var _this = this;
        return Object.keys(this.keytips).map(function(key) {
          return _this.keytips[key].keytip;
        });
      };
      KeytipManager2.prototype.addParentOverflow = function(keytipProps) {
        var fullSequence = __spreadArray([], keytipProps.keySequences, true);
        fullSequence.pop();
        if (fullSequence.length !== 0) {
          var parentKeytip = this.sequenceMapping[fullSequence.toString()];
          if (parentKeytip && parentKeytip.overflowSetSequence) {
            return __assign(__assign({}, keytipProps), { overflowSetSequence: parentKeytip.overflowSetSequence });
          }
        }
        return keytipProps;
      };
      KeytipManager2.prototype.menuExecute = function(overflowButtonSequences, keytipSequences) {
        EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {
          overflowButtonSequences,
          keytipSequences
        });
      };
      KeytipManager2.prototype._getUniqueKtp = function(keytipProps, uniqueID) {
        if (uniqueID === void 0) {
          uniqueID = getId();
        }
        return { keytip: __assign({}, keytipProps), uniqueID };
      };
      KeytipManager2._instance = new KeytipManager2();
      return KeytipManager2;
    }()
  );

  // ../node_modules/@fluentui/react/lib/utilities/keytips/KeytipUtils.js
  function sequencesToID(keySequences) {
    return keySequences.reduce(function(prevValue, keySequence) {
      return prevValue + KTP_SEPARATOR + keySequence.split("").join(KTP_SEPARATOR);
    }, KTP_PREFIX);
  }
  function mergeOverflows(keySequences, overflowKeySequences) {
    var overflowSequenceLen = overflowKeySequences.length;
    var overflowSequence = __spreadArray([], overflowKeySequences, true).pop();
    var newKeySequences = __spreadArray([], keySequences, true);
    return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);
  }
  function getAriaDescribedBy(keySequences) {
    var describedby = " " + KTP_LAYER_ID;
    if (!keySequences.length) {
      return describedby;
    }
    return describedby + " " + sequencesToID(keySequences);
  }

  // ../node_modules/@fluentui/react/lib/components/KeytipData/useKeytipData.js
  var React37 = __toESM(require_react());
  function useKeytipData(options) {
    var uniqueId = React37.useRef();
    var keytipProps = options.keytipProps ? __assign({ disabled: options.disabled }, options.keytipProps) : void 0;
    var keytipManager = useConst(KeytipManager.getInstance());
    var prevOptions = usePrevious(options);
    useIsomorphicLayoutEffect(function() {
      if (uniqueId.current && keytipProps && ((prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.keytipProps) !== options.keytipProps || (prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.disabled) !== options.disabled)) {
        keytipManager.update(keytipProps, uniqueId.current);
      }
    });
    useIsomorphicLayoutEffect(function() {
      if (keytipProps) {
        uniqueId.current = keytipManager.register(keytipProps);
      }
      return function() {
        keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);
      };
    }, []);
    var nativeKeytipProps = {
      ariaDescribedBy: void 0,
      keytipId: void 0
    };
    if (keytipProps) {
      nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);
    }
    return nativeKeytipProps;
  }
  function getKeytipData(keytipManager, keytipProps, describedByPrepend) {
    var newKeytipProps = keytipManager.addParentOverflow(keytipProps);
    var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));
    var keySequences = __spreadArray([], newKeytipProps.keySequences, true);
    if (newKeytipProps.overflowSetSequence) {
      keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);
    }
    var keytipId = sequencesToID(keySequences);
    return {
      ariaDescribedBy,
      keytipId
    };
  }

  // ../node_modules/@fluentui/react/lib/components/KeytipData/KeytipData.js
  var KeytipData = function(props) {
    var _a7;
    var children = props.children, keytipDataProps = __rest(props, ["children"]);
    var _b3 = useKeytipData(keytipDataProps), keytipId = _b3.keytipId, ariaDescribedBy = _b3.ariaDescribedBy;
    return children((_a7 = {}, _a7[DATAKTP_TARGET] = keytipId, _a7[DATAKTP_EXECUTE_TARGET] = keytipId, _a7["aria-describedby"] = ariaDescribedBy, _a7));
  };

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.js
  var ContextualMenuAnchor = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuAnchor2, _super);
      function ContextualMenuAnchor2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._anchor = React38.createRef();
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._getSubmenuTarget = function() {
          return _this._anchor.current ? _this._anchor.current : void 0;
        };
        _this._onItemClick = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemClick = _a7.onItemClick;
          if (onItemClick) {
            onItemClick(item, ev);
          }
        };
        _this._renderAriaDescription = function(ariaDescription, className) {
          return ariaDescription ? React38.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
        };
        return _this;
      }
      ContextualMenuAnchor2.prototype.render = function() {
        var _this = this;
        var _a7 = this.props, item = _a7.item, classNames2 = _a7.classNames, index = _a7.index, focusableElementIndex = _a7.focusableElementIndex, totalItemCount = _a7.totalItemCount, hasCheckmarks = _a7.hasCheckmarks, hasIcons = _a7.hasIcons, _b3 = _a7.contextualMenuItemAs, ChildrenRenderer = _b3 === void 0 ? ContextualMenuItem : _b3, expandedMenuItemKey = _a7.expandedMenuItemKey, onItemClick = _a7.onItemClick, openSubMenu = _a7.openSubMenu, dismissSubMenu = _a7.dismissSubMenu, dismissMenu = _a7.dismissMenu;
        var anchorRel = item.rel;
        if (item.target && item.target.toLowerCase() === "_blank") {
          anchorRel = anchorRel ? anchorRel : "nofollow noopener noreferrer";
        }
        var itemHasSubmenu = hasSubmenu(item);
        var nativeProps = getNativeProps(item, anchorProperties);
        var disabled = isItemDisabled(item);
        var itemProps = item.itemProps, ariaDescription = item.ariaDescription;
        var keytipProps = item.keytipProps;
        if (keytipProps && itemHasSubmenu) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        if (ariaDescription) {
          this._ariaDescriptionId = getId();
        }
        var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : void 0, nativeProps["aria-describedby"]);
        var additionalItemProperties = {
          "aria-describedby": ariaDescribedByIds
        };
        return React38.createElement(
          "div",
          null,
          React38.createElement(KeytipData, { keytipProps: item.keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled }, function(keytipAttributes) {
            return React38.createElement(
              "a",
              __assign({}, additionalItemProperties, nativeProps, keytipAttributes, {
                ref: _this._anchor,
                href: item.href,
                target: item.target,
                rel: anchorRel,
                className: classNames2.root,
                role: "menuitem",
                "aria-haspopup": itemHasSubmenu || void 0,
                "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0,
                "aria-posinset": focusableElementIndex + 1,
                "aria-setsize": totalItemCount,
                "aria-disabled": isItemDisabled(item),
                // eslint-disable-next-line deprecation/deprecation
                style: item.style,
                onClick: _this._onItemClick,
                onMouseEnter: _this._onItemMouseEnter,
                onMouseLeave: _this._onItemMouseLeave,
                onMouseMove: _this._onItemMouseMove,
                onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : void 0
              }),
              React38.createElement(ChildrenRenderer, __assign({ componentRef: item.componentRef, item, classNames: classNames2, index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
              _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
            );
          })
        );
      };
      return ContextualMenuAnchor2;
    }(ContextualMenuItemWrapper)
  );

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.js
  var React39 = __toESM(require_react());
  var ContextualMenuButton = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuButton2, _super);
      function ContextualMenuButton2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._btn = React39.createRef();
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._renderAriaDescription = function(ariaDescription, className) {
          return ariaDescription ? React39.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
        };
        _this._getSubmenuTarget = function() {
          return _this._btn.current ? _this._btn.current : void 0;
        };
        return _this;
      }
      ContextualMenuButton2.prototype.render = function() {
        var _this = this;
        var _a7 = this.props, item = _a7.item, classNames2 = _a7.classNames, index = _a7.index, focusableElementIndex = _a7.focusableElementIndex, totalItemCount = _a7.totalItemCount, hasCheckmarks = _a7.hasCheckmarks, hasIcons = _a7.hasIcons, _b3 = _a7.contextualMenuItemAs, ChildrenRenderer = _b3 === void 0 ? ContextualMenuItem : _b3, expandedMenuItemKey = _a7.expandedMenuItemKey, onItemMouseDown2 = _a7.onItemMouseDown, onItemClick = _a7.onItemClick, openSubMenu = _a7.openSubMenu, dismissSubMenu = _a7.dismissSubMenu, dismissMenu = _a7.dismissMenu;
        var isChecked = getIsChecked(item);
        var canCheck = isChecked !== null;
        var defaultRole = getMenuItemAriaRole(item);
        var itemHasSubmenu = hasSubmenu(item);
        var itemProps = item.itemProps, ariaLabel = item.ariaLabel, ariaDescription = item.ariaDescription;
        var buttonNativeProperties = getNativeProps(item, buttonProperties);
        delete buttonNativeProperties.disabled;
        var itemRole = item.role || defaultRole;
        if (ariaDescription) {
          this._ariaDescriptionId = getId();
        }
        var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : void 0, buttonNativeProperties["aria-describedby"]);
        var itemButtonProperties = {
          className: classNames2.root,
          onClick: this._onItemClick,
          onKeyDown: itemHasSubmenu ? this._onItemKeyDown : void 0,
          onMouseEnter: this._onItemMouseEnter,
          onMouseLeave: this._onItemMouseLeave,
          onMouseDown: function(ev) {
            return onItemMouseDown2 ? onItemMouseDown2(item, ev) : void 0;
          },
          onMouseMove: this._onItemMouseMove,
          href: item.href,
          title: item.title,
          "aria-label": ariaLabel,
          "aria-describedby": ariaDescribedByIds,
          "aria-haspopup": itemHasSubmenu || void 0,
          "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0,
          "aria-posinset": focusableElementIndex + 1,
          "aria-setsize": totalItemCount,
          "aria-disabled": isItemDisabled(item),
          "aria-checked": (itemRole === "menuitemcheckbox" || itemRole === "menuitemradio") && canCheck ? !!isChecked : void 0,
          "aria-selected": itemRole === "menuitem" && canCheck ? !!isChecked : void 0,
          role: itemRole,
          // eslint-disable-next-line deprecation/deprecation
          style: item.style
        };
        var keytipProps = item.keytipProps;
        if (keytipProps && itemHasSubmenu) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        return React39.createElement(KeytipData, { keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled: isItemDisabled(item) }, function(keytipAttributes) {
          return React39.createElement(
            "button",
            __assign({ ref: _this._btn }, buttonNativeProperties, itemButtonProperties, keytipAttributes),
            React39.createElement(ChildrenRenderer, __assign({ componentRef: item.componentRef, item, classNames: classNames2, index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
            _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
          );
        });
      };
      return ContextualMenuButton2;
    }(ContextualMenuItemWrapper)
  );

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.js
  var React41 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.styles.js
  var getStyles6 = function(props) {
    var theme = props.theme, getClassNames14 = props.getClassNames, className = props.className;
    if (!theme) {
      throw new Error("Theme is undefined or null.");
    }
    if (getClassNames14) {
      var names = getClassNames14(theme);
      return {
        wrapper: [names.wrapper],
        divider: [names.divider]
      };
    }
    return {
      wrapper: [
        {
          display: "inline-flex",
          height: "100%",
          alignItems: "center"
        },
        className
      ],
      divider: [
        {
          width: 1,
          height: "100%",
          backgroundColor: theme.palette.neutralTertiaryAlt
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.base.js
  var React40 = __toESM(require_react());
  var getClassNames6 = classNamesFunction();
  var VerticalDividerBase = React40.forwardRef(function(props, ref) {
    var styles2 = props.styles, theme = props.theme, deprecatedGetClassNames = props.getClassNames, className = props.className;
    var classNames2 = getClassNames6(styles2, { theme, getClassNames: deprecatedGetClassNames, className });
    return React40.createElement(
      "span",
      { className: classNames2.wrapper, ref },
      React40.createElement("span", { className: classNames2.divider })
    );
  });
  VerticalDividerBase.displayName = "VerticalDividerBase";

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.js
  var VerticalDivider = styled(VerticalDividerBase, getStyles6, void 0, {
    scope: "VerticalDivider"
  });

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.js
  var TouchIdleDelay = 500;
  var ContextualMenuSplitButton = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuSplitButton2, _super);
      function ContextualMenuSplitButton2(props) {
        var _this = _super.call(this, props) || this;
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._onItemKeyDown = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemKeyDown = _a7.onItemKeyDown;
          if (ev.which === KeyCodes.enter) {
            _this._executeItemClick(ev);
            ev.preventDefault();
            ev.stopPropagation();
          } else if (onItemKeyDown) {
            onItemKeyDown(item, ev);
          }
        };
        _this._getSubmenuTarget = function() {
          return _this._splitButton;
        };
        _this._renderAriaDescription = function(ariaDescription, className) {
          return ariaDescription ? React41.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
        };
        _this._onItemMouseEnterPrimary = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemMouseEnter = _a7.onItemMouseEnter;
          if (onItemMouseEnter) {
            onItemMouseEnter(__assign(__assign({}, item), { subMenuProps: void 0, items: void 0 }), ev, _this._splitButton);
          }
        };
        _this._onItemMouseEnterIcon = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemMouseEnter = _a7.onItemMouseEnter;
          if (onItemMouseEnter) {
            onItemMouseEnter(item, ev, _this._splitButton);
          }
        };
        _this._onItemMouseMovePrimary = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemMouseMove = _a7.onItemMouseMove;
          if (onItemMouseMove) {
            onItemMouseMove(__assign(__assign({}, item), { subMenuProps: void 0, items: void 0 }), ev, _this._splitButton);
          }
        };
        _this._onItemMouseMoveIcon = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemMouseMove = _a7.onItemMouseMove;
          if (onItemMouseMove) {
            onItemMouseMove(item, ev, _this._splitButton);
          }
        };
        _this._onIconItemClick = function(ev) {
          var _a7 = _this.props, item = _a7.item, onItemClickBase = _a7.onItemClickBase;
          if (onItemClickBase) {
            onItemClickBase(item, ev, _this._splitButton ? _this._splitButton : ev.currentTarget);
          }
        };
        _this._executeItemClick = function(ev) {
          var _a7 = _this.props, item = _a7.item, executeItemClick = _a7.executeItemClick, onItemClick = _a7.onItemClick;
          if (item.disabled || item.isDisabled) {
            return;
          }
          if (_this._processingTouch && !item.canCheck && onItemClick) {
            return onItemClick(item, ev);
          }
          if (executeItemClick) {
            executeItemClick(item, ev);
          }
        };
        _this._onTouchStart = function(ev) {
          if (_this._splitButton && !("onpointerdown" in _this._splitButton)) {
            _this._handleTouchAndPointerEvent(ev);
          }
        };
        _this._onPointerDown = function(ev) {
          if (ev.pointerType === "touch") {
            _this._handleTouchAndPointerEvent(ev);
            ev.preventDefault();
            ev.stopImmediatePropagation();
          }
        };
        _this._async = new Async(_this);
        _this._events = new EventGroup(_this);
        _this._dismissLabelId = getId();
        return _this;
      }
      ContextualMenuSplitButton2.prototype.componentDidMount = function() {
        if (this._splitButton && "onpointerdown" in this._splitButton) {
          this._events.on(this._splitButton, "pointerdown", this._onPointerDown, true);
        }
      };
      ContextualMenuSplitButton2.prototype.componentWillUnmount = function() {
        this._async.dispose();
        this._events.dispose();
      };
      ContextualMenuSplitButton2.prototype.render = function() {
        var _this = this;
        var _a7;
        var _b3 = this.props, item = _b3.item, classNames2 = _b3.classNames, index = _b3.index, focusableElementIndex = _b3.focusableElementIndex, totalItemCount = _b3.totalItemCount, hasCheckmarks = _b3.hasCheckmarks, hasIcons = _b3.hasIcons, onItemMouseLeave = _b3.onItemMouseLeave, expandedMenuItemKey = _b3.expandedMenuItemKey;
        var itemHasSubmenu = hasSubmenu(item);
        var keytipProps = item.keytipProps;
        if (keytipProps) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        var ariaDescription = item.ariaDescription;
        if (ariaDescription) {
          this._ariaDescriptionId = getId();
        }
        var ariaChecked = (_a7 = getIsChecked(item)) !== null && _a7 !== void 0 ? _a7 : void 0;
        return React41.createElement(KeytipData, { keytipProps, disabled: isItemDisabled(item) }, function(keytipAttributes) {
          return React41.createElement(
            "div",
            { "data-ktp-target": keytipAttributes["data-ktp-target"], ref: function(splitButton) {
              return _this._splitButton = splitButton;
            }, role: getMenuItemAriaRole(item), "aria-label": item.ariaLabel, className: classNames2.splitContainer, "aria-disabled": isItemDisabled(item), "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0, "aria-haspopup": true, "aria-describedby": mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? _this._ariaDescriptionId : void 0, keytipAttributes["aria-describedby"]), "aria-checked": ariaChecked, "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount, onMouseEnter: _this._onItemMouseEnterPrimary, onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, __assign(__assign({}, item), { subMenuProps: null, items: null })) : void 0, onMouseMove: _this._onItemMouseMovePrimary, onKeyDown: _this._onItemKeyDown, onClick: _this._executeItemClick, onTouchStart: _this._onTouchStart, tabIndex: 0, "data-is-focusable": true, "aria-roledescription": item["aria-roledescription"] },
            _this._renderSplitPrimaryButton(item, classNames2, index, hasCheckmarks, hasIcons),
            _this._renderSplitDivider(item),
            _this._renderSplitIconButton(item, classNames2, index, keytipAttributes),
            _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
          );
        });
      };
      ContextualMenuSplitButton2.prototype._renderSplitPrimaryButton = function(item, classNames2, index, hasCheckmarks, hasIcons) {
        var _a7 = this.props, _b3 = _a7.contextualMenuItemAs, ChildrenRenderer = _b3 === void 0 ? ContextualMenuItem : _b3, onItemClick = _a7.onItemClick;
        var itemProps = {
          key: item.key,
          disabled: isItemDisabled(item) || item.primaryDisabled,
          /* eslint-disable deprecation/deprecation */
          name: item.name,
          text: item.text || item.name,
          secondaryText: item.secondaryText,
          /* eslint-enable deprecation/deprecation */
          className: classNames2.splitPrimary,
          canCheck: item.canCheck,
          isChecked: item.isChecked,
          checked: item.checked,
          iconProps: item.iconProps,
          id: this._dismissLabelId,
          onRenderIcon: item.onRenderIcon,
          data: item.data,
          "data-is-focusable": false
        };
        var itemComponentProps = item.itemProps;
        return React41.createElement(
          "button",
          __assign({}, getNativeProps(itemProps, buttonProperties)),
          React41.createElement(ChildrenRenderer, __assign({ "data-is-focusable": false, item: itemProps, classNames: classNames2, index, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons }, itemComponentProps))
        );
      };
      ContextualMenuSplitButton2.prototype._renderSplitDivider = function(item) {
        var getDividerClassNames2 = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;
        return React41.createElement(VerticalDivider, { getClassNames: getDividerClassNames2 });
      };
      ContextualMenuSplitButton2.prototype._renderSplitIconButton = function(item, classNames2, index, keytipAttributes) {
        var _a7 = this.props, _b3 = _a7.contextualMenuItemAs, ChildrenRenderer = _b3 === void 0 ? ContextualMenuItem : _b3, onItemMouseLeave = _a7.onItemMouseLeave, onItemMouseDown2 = _a7.onItemMouseDown, openSubMenu = _a7.openSubMenu, dismissSubMenu = _a7.dismissSubMenu, dismissMenu = _a7.dismissMenu;
        var itemProps = {
          onClick: this._onIconItemClick,
          disabled: isItemDisabled(item),
          className: classNames2.splitMenu,
          subMenuProps: item.subMenuProps,
          submenuIconProps: item.submenuIconProps,
          split: true,
          key: item.key,
          "aria-labelledby": this._dismissLabelId
        };
        var buttonProps = __assign(__assign({}, getNativeProps(itemProps, buttonProperties)), {
          onMouseEnter: this._onItemMouseEnterIcon,
          onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : void 0,
          onMouseDown: function(ev) {
            return onItemMouseDown2 ? onItemMouseDown2(item, ev) : void 0;
          },
          onMouseMove: this._onItemMouseMoveIcon,
          "data-is-focusable": false,
          "data-ktp-execute-target": keytipAttributes["data-ktp-execute-target"],
          "aria-haspopup": true
        });
        var itemComponentProps = item.itemProps;
        return React41.createElement(
          "button",
          __assign({}, buttonProps),
          React41.createElement(ChildrenRenderer, __assign({ componentRef: item.componentRef, item: itemProps, classNames: classNames2, index, hasIcons: false, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: this._getSubmenuTarget }, itemComponentProps))
        );
      };
      ContextualMenuSplitButton2.prototype._handleTouchAndPointerEvent = function(ev) {
        var _this = this;
        var onTap = this.props.onTap;
        if (onTap) {
          onTap(ev);
        }
        if (this._lastTouchTimeoutId) {
          this._async.clearTimeout(this._lastTouchTimeoutId);
          this._lastTouchTimeoutId = void 0;
        }
        this._processingTouch = true;
        this._lastTouchTimeoutId = this._async.setTimeout(function() {
          _this._processingTouch = false;
          _this._lastTouchTimeoutId = void 0;
        }, TouchIdleDelay);
      };
      return ContextualMenuSplitButton2;
    }(ContextualMenuItemWrapper)
  );

  // ../node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js
  var React43 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/utilities/decorators/withResponsiveMode.js
  var React42 = __toESM(require_react());
  var ResponsiveMode;
  (function(ResponsiveMode2) {
    ResponsiveMode2[ResponsiveMode2["small"] = 0] = "small";
    ResponsiveMode2[ResponsiveMode2["medium"] = 1] = "medium";
    ResponsiveMode2[ResponsiveMode2["large"] = 2] = "large";
    ResponsiveMode2[ResponsiveMode2["xLarge"] = 3] = "xLarge";
    ResponsiveMode2[ResponsiveMode2["xxLarge"] = 4] = "xxLarge";
    ResponsiveMode2[ResponsiveMode2["xxxLarge"] = 5] = "xxxLarge";
    ResponsiveMode2[ResponsiveMode2["unknown"] = 999] = "unknown";
  })(ResponsiveMode || (ResponsiveMode = {}));
  var RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];
  var _defaultMode;
  var _lastMode;
  function getInitialResponsiveMode() {
    var _a7;
    return (_a7 = _defaultMode !== null && _defaultMode !== void 0 ? _defaultMode : _lastMode) !== null && _a7 !== void 0 ? _a7 : ResponsiveMode.large;
  }
  function getWidthOfCurrentWindow(currentWindow) {
    try {
      return currentWindow.document.documentElement.clientWidth;
    } catch (e2) {
      return currentWindow.innerWidth;
    }
  }
  function getResponsiveMode(currentWindow) {
    var responsiveMode = ResponsiveMode.small;
    if (currentWindow) {
      try {
        while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {
          responsiveMode++;
        }
      } catch (e2) {
        responsiveMode = getInitialResponsiveMode();
      }
      _lastMode = responsiveMode;
    } else {
      if (_defaultMode !== void 0) {
        responsiveMode = _defaultMode;
      } else {
        throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");
      }
    }
    return responsiveMode;
  }

  // ../node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js
  var useResponsiveMode = function(elementRef, overrideResponsiveMode) {
    var _a7 = React43.useState(getInitialResponsiveMode()), lastResponsiveMode = _a7[0], setLastResponsiveMode = _a7[1];
    var onResize = React43.useCallback(function() {
      var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));
      if (lastResponsiveMode !== newResponsiveMode) {
        setLastResponsiveMode(newResponsiveMode);
      }
    }, [elementRef, lastResponsiveMode]);
    var win2 = useWindow();
    useOnEvent(win2, "resize", onResize);
    React43.useEffect(function() {
      if (overrideResponsiveMode === void 0) {
        onResize();
      }
    }, [overrideResponsiveMode]);
    return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;
  };

  // ../node_modules/@fluentui/react/lib/utilities/MenuContext/MenuContext.js
  var React44 = __toESM(require_react());
  var MenuContext = React44.createContext({});

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.base.js
  var getClassNames7 = classNamesFunction();
  var getContextualMenuItemClassNames = classNamesFunction();
  var DEFAULT_PROPS3 = {
    items: [],
    shouldFocusOnMount: true,
    gapSpace: 0,
    directionalHint: DirectionalHint.bottomAutoEdge,
    beakWidth: 16
  };
  function getItemCount(items) {
    var totalItemCount = 0;
    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
      var item = items_1[_i];
      if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {
        var itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
        totalItemCount += itemCount;
      }
    }
    return totalItemCount;
  }
  function getSubmenuItems(item, options) {
    var target = options === null || options === void 0 ? void 0 : options.target;
    var items = item.subMenuProps ? item.subMenuProps.items : item.items;
    if (items) {
      var overrideItems = [];
      for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
        var subItem = items_2[_i];
        if (subItem.preferMenuTargetAsEventTarget) {
          var onClick = subItem.onClick, contextItem = __rest(subItem, ["onClick"]);
          overrideItems.push(__assign(__assign({}, contextItem), { onClick: getOnClickWithOverrideTarget(onClick, target) }));
        } else {
          overrideItems.push(subItem);
        }
      }
      return overrideItems;
    }
  }
  function canAnyMenuItemsCheck(items) {
    return items.some(function(item) {
      if (item.canCheck) {
        return true;
      }
      if (item.sectionProps && item.sectionProps.items.some(function(submenuItem) {
        return submenuItem.canCheck === true;
      })) {
        return true;
      }
      return false;
    });
  }
  var NavigationIdleDelay = 250;
  var COMPONENT_NAME3 = "ContextualMenu";
  var _getMenuItemStylesFunction = memoizeFunction(function() {
    var styles2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styles2[_i] = arguments[_i];
    }
    return function(styleProps) {
      return concatStyleSetsWithProps.apply(void 0, __spreadArray([styleProps, getItemStyles], styles2, false));
    };
  });
  function useVisibility(props, targetWindow) {
    var _a7 = props.hidden, hidden = _a7 === void 0 ? false : _a7, onMenuDismissed = props.onMenuDismissed, onMenuOpened = props.onMenuOpened;
    var previousHidden = usePrevious(hidden);
    var onMenuOpenedRef = React45.useRef(onMenuOpened);
    var onMenuClosedRef = React45.useRef(onMenuDismissed);
    var propsRef = React45.useRef(props);
    onMenuOpenedRef.current = onMenuOpened;
    onMenuClosedRef.current = onMenuDismissed;
    propsRef.current = props;
    React45.useEffect(function() {
      var _a8, _b3;
      if (hidden && previousHidden === false) {
        (_a8 = onMenuClosedRef.current) === null || _a8 === void 0 ? void 0 : _a8.call(onMenuClosedRef, propsRef.current);
      } else if (!hidden && previousHidden !== false) {
        (_b3 = onMenuOpenedRef.current) === null || _b3 === void 0 ? void 0 : _b3.call(onMenuOpenedRef, propsRef.current);
      }
    }, [hidden, previousHidden]);
    React45.useEffect(function() {
      return function() {
        var _a8;
        return (_a8 = onMenuClosedRef.current) === null || _a8 === void 0 ? void 0 : _a8.call(onMenuClosedRef, propsRef.current);
      };
    }, []);
  }
  function useSubMenuState(_a7, dismiss) {
    var hidden = _a7.hidden, items = _a7.items, theme = _a7.theme, className = _a7.className, id = _a7.id, menuTarget = _a7.target;
    var _b3 = React45.useState(), expandedMenuItemKey = _b3[0], setExpandedMenuItemKey = _b3[1];
    var _c3 = React45.useState(), submenuTarget = _c3[0], setSubmenuTarget = _c3[1];
    var _d3 = React45.useState(), shouldFocusOnContainer = _d3[0], setShouldFocusOnContainer = _d3[1];
    var subMenuId = useId(COMPONENT_NAME3, id);
    var closeSubMenu = React45.useCallback(function() {
      setShouldFocusOnContainer(void 0);
      setExpandedMenuItemKey(void 0);
      setSubmenuTarget(void 0);
    }, []);
    var openSubMenu = React45.useCallback(function(_a8, target, focusContainer) {
      var submenuItemKey = _a8.key;
      if (expandedMenuItemKey === submenuItemKey) {
        return;
      }
      target.focus();
      setShouldFocusOnContainer(focusContainer);
      setExpandedMenuItemKey(submenuItemKey);
      setSubmenuTarget(target);
    }, [expandedMenuItemKey]);
    React45.useEffect(function() {
      if (hidden) {
        closeSubMenu();
      }
    }, [hidden, closeSubMenu]);
    var onSubMenuDismiss = useOnSubmenuDismiss(dismiss, closeSubMenu);
    var getSubmenuProps = function() {
      var item = findItemByKeyFromItems(expandedMenuItemKey, items);
      var submenuProps = null;
      if (item) {
        submenuProps = {
          items: getSubmenuItems(item, { target: menuTarget }),
          target: submenuTarget,
          onDismiss: onSubMenuDismiss,
          isSubMenu: true,
          id: subMenuId,
          shouldFocusOnMount: true,
          shouldFocusOnContainer,
          directionalHint: getRTL2(theme) ? DirectionalHint.leftTopEdge : DirectionalHint.rightTopEdge,
          className,
          gapSpace: 0,
          isBeakVisible: false
        };
        if (item.subMenuProps) {
          assign(submenuProps, item.subMenuProps);
        }
        if (item.preferMenuTargetAsEventTarget) {
          var onItemClick = item.onItemClick;
          submenuProps.onItemClick = getOnClickWithOverrideTarget(onItemClick, menuTarget);
        }
      }
      return submenuProps;
    };
    return [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss];
  }
  function useShouldUpdateFocusOnMouseMove(_a7) {
    var delayUpdateFocusOnHover = _a7.delayUpdateFocusOnHover, hidden = _a7.hidden;
    var shouldUpdateFocusOnMouseEvent = React45.useRef(!delayUpdateFocusOnHover);
    var gotMouseMove = React45.useRef(false);
    React45.useEffect(function() {
      shouldUpdateFocusOnMouseEvent.current = !delayUpdateFocusOnHover;
      gotMouseMove.current = hidden ? false : !delayUpdateFocusOnHover && gotMouseMove.current;
    }, [delayUpdateFocusOnHover, hidden]);
    var onMenuFocusCapture = React45.useCallback(function() {
      if (delayUpdateFocusOnHover) {
        shouldUpdateFocusOnMouseEvent.current = false;
      }
    }, [delayUpdateFocusOnHover]);
    return [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture];
  }
  function usePreviousActiveElement(_a7, targetWindow, hostElement) {
    var hidden = _a7.hidden, onRestoreFocus = _a7.onRestoreFocus;
    var previousActiveElement = React45.useRef();
    var tryFocusPreviousActiveElement = React45.useCallback(function(options) {
      var _a8, _b3;
      if (onRestoreFocus) {
        onRestoreFocus(options);
      } else if (options === null || options === void 0 ? void 0 : options.documentContainsFocus) {
        (_b3 = (_a8 = previousActiveElement.current) === null || _a8 === void 0 ? void 0 : _a8.focus) === null || _b3 === void 0 ? void 0 : _b3.call(_a8);
      }
    }, [onRestoreFocus]);
    useIsomorphicLayoutEffect(function() {
      var _a8, _b3;
      if (!hidden) {
        var newElement = targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement;
        if (!((_a8 = hostElement.current) === null || _a8 === void 0 ? void 0 : _a8.contains(newElement)) && newElement.tagName !== "BODY") {
          previousActiveElement.current = newElement;
        }
      } else if (previousActiveElement.current) {
        tryFocusPreviousActiveElement({
          originalElement: previousActiveElement.current,
          containsFocus: true,
          documentContainsFocus: ((_b3 = getDocument()) === null || _b3 === void 0 ? void 0 : _b3.hasFocus()) || false
        });
        previousActiveElement.current = void 0;
      }
    }, [hidden, targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement, tryFocusPreviousActiveElement, hostElement]);
    return [tryFocusPreviousActiveElement];
  }
  function useKeyHandlers(_a7, dismiss, hostElement, openSubMenu) {
    var theme = _a7.theme, isSubMenu = _a7.isSubMenu, _b3 = _a7.focusZoneProps, _c3 = _b3 === void 0 ? {} : _b3, checkForNoWrap = _c3.checkForNoWrap, _d3 = _c3.direction, focusZoneDirection = _d3 === void 0 ? FocusZoneDirection.vertical : _d3;
    var lastKeyDownWasAltOrMeta = React45.useRef();
    var keyHandler = function(ev, shouldHandleKey, dismissAllMenus) {
      var handled = false;
      if (shouldHandleKey(ev)) {
        dismiss(ev, dismissAllMenus);
        ev.preventDefault();
        ev.stopPropagation();
        handled = true;
      }
      return handled;
    };
    var shouldCloseSubMenu = function(ev) {
      var submenuCloseKey = getRTL2(theme) ? KeyCodes.right : KeyCodes.left;
      if (ev.which !== submenuCloseKey || !isSubMenu) {
        return false;
      }
      return !!(focusZoneDirection === FocusZoneDirection.vertical || checkForNoWrap && !shouldWrapFocus(ev.target, "data-no-horizontal-wrap"));
    };
    var shouldHandleKeyDown = function(ev) {
      return (
        // eslint-disable-next-line deprecation/deprecation
        ev.which === KeyCodes.escape || shouldCloseSubMenu(ev) || // eslint-disable-next-line deprecation/deprecation
        ev.which === KeyCodes.up && (ev.altKey || ev.metaKey)
      );
    };
    var onKeyDown = function(ev) {
      lastKeyDownWasAltOrMeta.current = isAltOrMeta(ev);
      var dismissAllMenus = ev.which === KeyCodes.escape && (isMac() || isIOS());
      return keyHandler(ev, shouldHandleKeyDown, dismissAllMenus);
    };
    var shouldHandleKeyUp = function(ev) {
      var keyPressIsAltOrMetaAlone = lastKeyDownWasAltOrMeta.current && isAltOrMeta(ev);
      lastKeyDownWasAltOrMeta.current = false;
      return !!keyPressIsAltOrMetaAlone && !(isIOS() || isMac());
    };
    var onKeyUp = function(ev) {
      return keyHandler(
        ev,
        shouldHandleKeyUp,
        true
        /* dismissAllMenus */
      );
    };
    var onMenuKeyDown = function(ev) {
      var handled = onKeyDown(ev);
      if (handled || !hostElement.current) {
        return;
      }
      var hasModifier = !!(ev.altKey || ev.metaKey);
      var isUp = ev.which === KeyCodes.up;
      var isDown = ev.which === KeyCodes.down;
      if (!hasModifier && (isUp || isDown)) {
        var elementToFocus = isUp ? getLastFocusable(hostElement.current, hostElement.current.lastChild, true) : getFirstFocusable(hostElement.current, hostElement.current.firstChild, true);
        if (elementToFocus) {
          elementToFocus.focus();
          ev.preventDefault();
          ev.stopPropagation();
        }
      }
    };
    var onItemKeyDown = function(item, ev) {
      var openKey = getRTL2(theme) ? KeyCodes.left : KeyCodes.right;
      if (!item.disabled && // eslint-disable-next-line deprecation/deprecation
      (ev.which === openKey || ev.which === KeyCodes.enter || ev.which === KeyCodes.down && (ev.altKey || ev.metaKey))) {
        openSubMenu(item, ev.currentTarget);
        ev.preventDefault();
      }
    };
    return [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown];
  }
  function useScrollHandler(asyncTracker) {
    var isScrollIdle = React45.useRef(true);
    var scrollIdleTimeoutId = React45.useRef();
    var onScroll = function() {
      if (!isScrollIdle.current && scrollIdleTimeoutId.current !== void 0) {
        asyncTracker.clearTimeout(scrollIdleTimeoutId.current);
        scrollIdleTimeoutId.current = void 0;
      } else {
        isScrollIdle.current = false;
      }
      scrollIdleTimeoutId.current = asyncTracker.setTimeout(function() {
        isScrollIdle.current = true;
      }, NavigationIdleDelay);
    };
    return [onScroll, isScrollIdle];
  }
  function useOnSubmenuDismiss(dismiss, closeSubMenu) {
    var isMountedRef = React45.useRef(false);
    React45.useEffect(function() {
      isMountedRef.current = true;
      return function() {
        isMountedRef.current = false;
      };
    }, []);
    var onSubMenuDismiss = function(ev, dismissAll) {
      if (dismissAll) {
        dismiss(ev, dismissAll);
      } else if (isMountedRef.current) {
        closeSubMenu();
      }
    };
    return onSubMenuDismiss;
  }
  function useSubmenuEnterTimer(_a7, asyncTracker) {
    var _b3 = _a7.subMenuHoverDelay, subMenuHoverDelay = _b3 === void 0 ? NavigationIdleDelay : _b3;
    var enterTimerRef = React45.useRef(void 0);
    var cancelSubMenuTimer = function() {
      if (enterTimerRef.current !== void 0) {
        asyncTracker.clearTimeout(enterTimerRef.current);
        enterTimerRef.current = void 0;
      }
    };
    var startSubmenuTimer = function(onTimerExpired) {
      enterTimerRef.current = asyncTracker.setTimeout(function() {
        onTimerExpired();
        cancelSubMenuTimer();
      }, subMenuHoverDelay);
    };
    return [cancelSubMenuTimer, startSubmenuTimer, enterTimerRef];
  }
  function useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss) {
    var menuTarget = props.target;
    var onItemMouseEnterBase = function(item, ev, target) {
      if (shouldUpdateFocusOnMouseEvent.current) {
        gotMouseMove.current = true;
      }
      if (shouldIgnoreMouseEvent()) {
        return;
      }
      updateFocusOnMouseEvent(item, ev, target);
    };
    var onItemMouseMoveBase = function(item, ev, target) {
      var targetElement = ev.currentTarget;
      if (shouldUpdateFocusOnMouseEvent.current) {
        gotMouseMove.current = true;
      } else {
        return;
      }
      if (!isScrollIdle.current || subMenuEntryTimer.current !== void 0 || targetElement === (targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement)) {
        return;
      }
      updateFocusOnMouseEvent(item, ev, target);
    };
    var shouldIgnoreMouseEvent = function() {
      return !isScrollIdle.current || !gotMouseMove.current;
    };
    var onMouseItemLeave = function(item, ev) {
      var _a7;
      if (shouldIgnoreMouseEvent()) {
        return;
      }
      cancelSubMenuTimer();
      if (expandedMenuItemKey !== void 0) {
        return;
      }
      if (hostElement.current.setActive) {
        try {
          hostElement.current.setActive();
        } catch (e2) {
        }
      } else {
        (_a7 = hostElement.current) === null || _a7 === void 0 ? void 0 : _a7.focus();
      }
    };
    var updateFocusOnMouseEvent = function(item, ev, target) {
      var targetElement = target ? target : ev.currentTarget;
      if (item.key === expandedMenuItemKey) {
        return;
      }
      cancelSubMenuTimer();
      if (expandedMenuItemKey === void 0) {
        targetElement.focus();
      }
      if (hasSubmenu(item)) {
        ev.stopPropagation();
        startSubmenuTimer(function() {
          targetElement.focus();
          openSubMenu(item, targetElement, true);
        });
      } else {
        startSubmenuTimer(function() {
          onSubMenuDismiss(ev);
          targetElement.focus();
        });
      }
    };
    var onItemClick = function(item, ev) {
      onItemClickBase(item, ev, ev.currentTarget);
    };
    var onItemClickBase = function(item, ev, target) {
      var items = getSubmenuItems(item, { target: menuTarget });
      cancelSubMenuTimer();
      if (!hasSubmenu(item) && (!items || !items.length)) {
        executeItemClick(item, ev);
      } else {
        if (item.key !== expandedMenuItemKey) {
          var shouldFocusOnContainer = typeof props.shouldFocusOnContainer === "boolean" ? props.shouldFocusOnContainer : ev.nativeEvent.pointerType === "mouse";
          openSubMenu(item, target, shouldFocusOnContainer);
        }
      }
      ev.stopPropagation();
      ev.preventDefault();
    };
    var onAnchorClick = function(item, ev) {
      executeItemClick(item, ev);
      ev.stopPropagation();
    };
    var executeItemClick = function(item, ev) {
      if (item.disabled || item.isDisabled) {
        return;
      }
      if (item.preferMenuTargetAsEventTarget) {
        overrideTarget(ev, menuTarget);
      }
      var shouldDismiss = false;
      if (item.onClick) {
        shouldDismiss = !!item.onClick(ev, item);
      } else if (props.onItemClick) {
        shouldDismiss = !!props.onItemClick(ev, item);
      }
      if (shouldDismiss || !ev.defaultPrevented) {
        dismiss(ev, true);
      }
    };
    return [
      onItemMouseEnterBase,
      onItemMouseMoveBase,
      onMouseItemLeave,
      onItemClick,
      onAnchorClick,
      executeItemClick,
      onItemClickBase
    ];
  }
  var ContextualMenuBase = React45.memo(React45.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var _a7;
    var _b3 = getPropsWithDefaults(DEFAULT_PROPS3, propsWithoutDefaults), ref = _b3.ref, props = __rest(_b3, ["ref"]);
    var hostElement = React45.useRef(null);
    var asyncTracker = useAsync();
    var menuId = useId(COMPONENT_NAME3, props.id);
    useWarnings({
      name: COMPONENT_NAME3,
      props,
      deprecations: {
        getMenuClassNames: "styles"
      }
    });
    var dismiss = function(ev, dismissAll) {
      var _a8;
      return (_a8 = props.onDismiss) === null || _a8 === void 0 ? void 0 : _a8.call(props, ev, dismissAll);
    };
    var _c3 = useTarget(props.target, hostElement), targetRef = _c3[0], targetWindow = _c3[1];
    var tryFocusPreviousActiveElement = usePreviousActiveElement(props, targetWindow, hostElement)[0];
    var _d3 = useSubMenuState(props, dismiss), expandedMenuItemKey = _d3[0], openSubMenu = _d3[1], getSubmenuProps = _d3[2], onSubMenuDismiss = _d3[3];
    var _e2 = useShouldUpdateFocusOnMouseMove(props), shouldUpdateFocusOnMouseEvent = _e2[0], gotMouseMove = _e2[1], onMenuFocusCapture = _e2[2];
    var _f = useScrollHandler(asyncTracker), onScroll = _f[0], isScrollIdle = _f[1];
    var _g = useSubmenuEnterTimer(props, asyncTracker), cancelSubMenuTimer = _g[0], startSubmenuTimer = _g[1], subMenuEntryTimer = _g[2];
    var responsiveMode = useResponsiveMode(hostElement, props.responsiveMode);
    useVisibility(props, targetWindow);
    var _h = useKeyHandlers(props, dismiss, hostElement, openSubMenu), onKeyDown = _h[0], onKeyUp = _h[1], onMenuKeyDown = _h[2], onItemKeyDown = _h[3];
    var _j = useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss), onItemMouseEnterBase = _j[0], onItemMouseMoveBase = _j[1], onMouseItemLeave = _j[2], onItemClick = _j[3], onAnchorClick = _j[4], executeItemClick = _j[5], onItemClickBase = _j[6];
    var onDefaultRenderMenuList = function(menuListProps, menuClassNames, defaultRender) {
      var indexCorrection = 0;
      var items2 = menuListProps.items, totalItemCount = menuListProps.totalItemCount, hasCheckmarks2 = menuListProps.hasCheckmarks, hasIcons2 = menuListProps.hasIcons;
      return React45.createElement("ul", { className: menuClassNames.list, onKeyDown, onKeyUp, role: "presentation" }, items2.map(function(item, index) {
        var menuItem = renderMenuItem(item, index, indexCorrection, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames);
        if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {
          var indexIncrease = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
          indexCorrection += indexIncrease;
        }
        return menuItem;
      }));
    };
    var renderFocusZone = function(children, adjustedFocusZoneProps2) {
      var _a8 = props.focusZoneAs, ChildrenRenderer = _a8 === void 0 ? FocusZone : _a8;
      return React45.createElement(ChildrenRenderer, __assign({}, adjustedFocusZoneProps2), children);
    };
    var renderMenuItem = function(item, index, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames) {
      var _a8;
      var renderedItems = [];
      var iconProps = item.iconProps || { iconName: "None" };
      var getItemClassNames2 = item.getItemClassNames, itemProps = item.itemProps;
      var styles3 = itemProps ? itemProps.styles : void 0;
      var dividerClassName = item.itemType === ContextualMenuItemType.Divider ? item.className : void 0;
      var subMenuIconClassName = item.submenuIconProps ? item.submenuIconProps.className : "";
      var itemClassNames;
      if (getItemClassNames2) {
        itemClassNames = getItemClassNames2(props.theme, isItemDisabled(item), expandedMenuItemKey === item.key, !!getIsChecked(item), !!item.href, iconProps.iconName !== "None", item.className, dividerClassName, iconProps.className, subMenuIconClassName, item.primaryDisabled);
      } else {
        var itemStyleProps = {
          theme: props.theme,
          disabled: isItemDisabled(item),
          expanded: expandedMenuItemKey === item.key,
          checked: !!getIsChecked(item),
          isAnchorLink: !!item.href,
          knownIcon: iconProps.iconName !== "None",
          itemClassName: item.className,
          dividerClassName,
          iconClassName: iconProps.className,
          subMenuClassName: subMenuIconClassName,
          primaryDisabled: item.primaryDisabled
        };
        itemClassNames = getContextualMenuItemClassNames(_getMenuItemStylesFunction((_a8 = menuClassNames.subComponentStyles) === null || _a8 === void 0 ? void 0 : _a8.menuItem, styles3), itemStyleProps);
      }
      if (item.text === "-" || item.name === "-") {
        item.itemType = ContextualMenuItemType.Divider;
      }
      switch (item.itemType) {
        case ContextualMenuItemType.Divider:
          renderedItems.push(renderSeparator(index, itemClassNames));
          break;
        case ContextualMenuItemType.Header:
          renderedItems.push(renderSeparator(index, itemClassNames));
          var headerItem = renderHeaderMenuItem(item, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2);
          renderedItems.push(renderListItem(headerItem, item.key || index, itemClassNames, item.title));
          break;
        case ContextualMenuItemType.Section:
          renderedItems.push(renderSectionItem(item, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2));
          break;
        default:
          var defaultRenderNormalItem = function() {
            return renderNormalItem(item, itemClassNames, index, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2);
          };
          var menuItem = props.onRenderContextualMenuItem ? props.onRenderContextualMenuItem(item, defaultRenderNormalItem) : defaultRenderNormalItem();
          renderedItems.push(renderListItem(menuItem, item.key || index, itemClassNames, item.title));
          break;
      }
      return React45.createElement(React45.Fragment, { key: item.key }, renderedItems);
    };
    var defaultMenuItemRenderer = function(item, menuClassNames) {
      var index = item.index, focusableElementIndex = item.focusableElementIndex, totalItemCount = item.totalItemCount, hasCheckmarks2 = item.hasCheckmarks, hasIcons2 = item.hasIcons;
      return renderMenuItem(item, index, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames);
    };
    var renderSectionItem = function(sectionItem, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2) {
      var sectionProps = sectionItem.sectionProps;
      if (!sectionProps) {
        return;
      }
      var headerItem;
      var groupProps;
      if (sectionProps.title) {
        var headerContextualMenuItem = void 0;
        var ariaLabelledby = "";
        if (typeof sectionProps.title === "string") {
          var id_1 = menuId + sectionProps.title.replace(/\s/g, "");
          headerContextualMenuItem = {
            key: "section-".concat(sectionProps.title, "-title"),
            itemType: ContextualMenuItemType.Header,
            text: sectionProps.title,
            id: id_1
          };
          ariaLabelledby = id_1;
        } else {
          var id_2 = sectionProps.title.id || menuId + sectionProps.title.key.replace(/\s/g, "");
          headerContextualMenuItem = __assign(__assign({}, sectionProps.title), { id: id_2 });
          ariaLabelledby = id_2;
        }
        if (headerContextualMenuItem) {
          groupProps = {
            role: "group",
            "aria-labelledby": ariaLabelledby
          };
          headerItem = renderHeaderMenuItem(headerContextualMenuItem, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2);
        }
      }
      if (sectionProps.items && sectionProps.items.length > 0) {
        var correctedIndex_1 = 0;
        return React45.createElement(
          "li",
          { role: "presentation", key: sectionProps.key || sectionItem.key || "section-".concat(index) },
          React45.createElement(
            "div",
            __assign({}, groupProps),
            React45.createElement(
              "ul",
              { className: menuClassNames.list, role: "presentation" },
              sectionProps.topDivider && renderSeparator(index, itemClassNames, true, true),
              headerItem && renderListItem(headerItem, sectionItem.key || index, itemClassNames, sectionItem.title),
              sectionProps.items.map(function(contextualMenuItem, itemsIndex) {
                var menuItem = renderMenuItem(contextualMenuItem, itemsIndex, correctedIndex_1, getItemCount(sectionProps.items), hasCheckmarks2, hasIcons2, menuClassNames);
                if (contextualMenuItem.itemType !== ContextualMenuItemType.Divider && contextualMenuItem.itemType !== ContextualMenuItemType.Header) {
                  var indexIncrease = contextualMenuItem.customOnRenderListLength ? contextualMenuItem.customOnRenderListLength : 1;
                  correctedIndex_1 += indexIncrease;
                }
                return menuItem;
              }),
              sectionProps.bottomDivider && renderSeparator(index, itemClassNames, false, true)
            )
          )
        );
      }
    };
    var renderListItem = function(content, key, classNames3, title2) {
      return React45.createElement("li", { role: "presentation", title: title2, key, className: classNames3.item }, content);
    };
    var renderSeparator = function(index, classNames3, top, fromSection) {
      if (fromSection || index > 0) {
        return React45.createElement("li", { role: "separator", key: "separator-" + index + (top === void 0 ? "" : top ? "-top" : "-bottom"), className: classNames3.divider, "aria-hidden": "true" });
      }
      return null;
    };
    var renderNormalItem = function(item, classNames3, index, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2) {
      if (item.onRender) {
        return item.onRender(__assign({ "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount }, item), dismiss);
      }
      var contextualMenuItemAs = props.contextualMenuItemAs;
      var commonProps = {
        item,
        classNames: classNames3,
        index,
        focusableElementIndex,
        totalItemCount,
        hasCheckmarks: hasCheckmarks2,
        hasIcons: hasIcons2,
        contextualMenuItemAs,
        onItemMouseEnter: onItemMouseEnterBase,
        onItemMouseLeave: onMouseItemLeave,
        onItemMouseMove: onItemMouseMoveBase,
        onItemMouseDown,
        executeItemClick,
        onItemKeyDown,
        expandedMenuItemKey,
        openSubMenu,
        dismissSubMenu: onSubMenuDismiss,
        dismissMenu: dismiss
      };
      if (item.href) {
        return React45.createElement(ContextualMenuAnchor, __assign({}, commonProps, { onItemClick: onAnchorClick }));
      }
      if (item.split && hasSubmenu(item)) {
        return React45.createElement(ContextualMenuSplitButton, __assign({}, commonProps, { onItemClick, onItemClickBase, onTap: cancelSubMenuTimer }));
      }
      return React45.createElement(ContextualMenuButton, __assign({}, commonProps, { onItemClick, onItemClickBase }));
    };
    var renderHeaderMenuItem = function(item, itemClassNames, menuClassNames, index, hasCheckmarks2, hasIcons2) {
      var _a8 = props.contextualMenuItemAs, ChildrenRenderer = _a8 === void 0 ? ContextualMenuItem : _a8;
      var itemProps = item.itemProps, id2 = item.id;
      var divHtmlProperties = itemProps && getNativeProps(itemProps, divProperties);
      return (
        // eslint-disable-next-line deprecation/deprecation
        React45.createElement(
          "div",
          __assign({ id: id2, className: menuClassNames.header }, divHtmlProperties, { style: item.style }),
          React45.createElement(ChildrenRenderer, __assign({ item, classNames: itemClassNames, index, onCheckmarkClick: hasCheckmarks2 ? onItemClick : void 0, hasIcons: hasIcons2 }, itemProps))
        )
      );
    };
    var isBeakVisible = props.isBeakVisible;
    var items = props.items, labelElementId = props.labelElementId, id = props.id, className = props.className, beakWidth = props.beakWidth, directionalHint = props.directionalHint, directionalHintForRTL = props.directionalHintForRTL, alignTargetEdge = props.alignTargetEdge, gapSpace = props.gapSpace, coverTarget = props.coverTarget, ariaLabel = props.ariaLabel, doNotLayer = props.doNotLayer, target = props.target, bounds = props.bounds, useTargetWidth = props.useTargetWidth, useTargetAsMinWidth = props.useTargetAsMinWidth, directionalHintFixed = props.directionalHintFixed, shouldFocusOnMount = props.shouldFocusOnMount, shouldFocusOnContainer = props.shouldFocusOnContainer, title = props.title, styles2 = props.styles, theme = props.theme, calloutProps = props.calloutProps, _k = props.onRenderSubMenu, onRenderSubMenu2 = _k === void 0 ? onDefaultRenderSubMenu : _k, _l = props.onRenderMenuList, onRenderMenuList = _l === void 0 ? function(menuListProps, defaultRender) {
      return onDefaultRenderMenuList(menuListProps, classNames2, defaultRender);
    } : _l, focusZoneProps = props.focusZoneProps, getMenuClassNames = props.getMenuClassNames;
    var classNames2 = getMenuClassNames ? getMenuClassNames(theme, className) : getClassNames7(styles2, {
      theme,
      className
    });
    var hasIcons = itemsHaveIcons(items);
    function itemsHaveIcons(contextualMenuItems) {
      for (var _i = 0, contextualMenuItems_1 = contextualMenuItems; _i < contextualMenuItems_1.length; _i++) {
        var item = contextualMenuItems_1[_i];
        if (item.iconProps) {
          return true;
        }
        if (item.itemType === ContextualMenuItemType.Section && item.sectionProps && itemsHaveIcons(item.sectionProps.items)) {
          return true;
        }
      }
      return false;
    }
    var adjustedFocusZoneProps = __assign(__assign({ direction: FocusZoneDirection.vertical, handleTabKey: FocusZoneTabbableElements.all, isCircularNavigation: true }, focusZoneProps), { className: css(classNames2.root, (_a7 = props.focusZoneProps) === null || _a7 === void 0 ? void 0 : _a7.className) });
    var hasCheckmarks = canAnyMenuItemsCheck(items);
    var submenuProps = expandedMenuItemKey && props.hidden !== true ? getSubmenuProps() : null;
    isBeakVisible = isBeakVisible === void 0 ? responsiveMode <= ResponsiveMode.medium : isBeakVisible;
    var contextMenuStyle;
    var targetAsHtmlElement = targetRef.current;
    if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {
      var targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();
      var targetWidth = targetBoundingRect.width - 2;
      if (useTargetWidth) {
        contextMenuStyle = {
          width: targetWidth
        };
      } else if (useTargetAsMinWidth) {
        contextMenuStyle = {
          minWidth: targetWidth
        };
      }
    }
    if (items && items.length > 0) {
      var totalItemCount_1 = getItemCount(items);
      var calloutStyles_1 = classNames2.subComponentStyles ? classNames2.subComponentStyles.callout : void 0;
      return React45.createElement(MenuContext.Consumer, null, function(menuContext) {
        return React45.createElement(
          Callout,
          __assign({ styles: calloutStyles_1, onRestoreFocus: tryFocusPreviousActiveElement }, calloutProps, { target: target || menuContext.target, isBeakVisible, beakWidth, directionalHint, directionalHintForRTL, gapSpace, coverTarget, doNotLayer, className: css("ms-ContextualMenu-Callout", calloutProps && calloutProps.className), setInitialFocus: shouldFocusOnMount, onDismiss: props.onDismiss || menuContext.onDismiss, onScroll, bounds, directionalHintFixed, alignTargetEdge, hidden: props.hidden || menuContext.hidden, ref: forwardedRef }),
          React45.createElement(
            "div",
            { style: contextMenuStyle, ref: hostElement, id, className: classNames2.container, tabIndex: shouldFocusOnContainer ? 0 : -1, onKeyDown: onMenuKeyDown, onKeyUp, onFocusCapture: onMenuFocusCapture, "aria-label": ariaLabel, "aria-labelledby": labelElementId, role: "menu" },
            title && React45.createElement(
              "div",
              { className: classNames2.title },
              " ",
              title,
              " "
            ),
            items && items.length ? renderFocusZone(onRenderMenuList({
              ariaLabel,
              items,
              totalItemCount: totalItemCount_1,
              hasCheckmarks,
              hasIcons,
              defaultMenuItemRenderer: function(item) {
                return defaultMenuItemRenderer(item, classNames2);
              },
              labelElementId
            }, function(menuListProps, defaultRender) {
              return onDefaultRenderMenuList(menuListProps, classNames2, defaultRender);
            }), adjustedFocusZoneProps) : null,
            submenuProps && onRenderSubMenu2(submenuProps, onDefaultRenderSubMenu)
          ),
          React45.createElement(FocusRects, null)
        );
      });
    } else {
      return null;
    }
  }), function(prevProps, newProps) {
    if (!newProps.shouldUpdateWhenHidden && prevProps.hidden && newProps.hidden) {
      return true;
    }
    return shallowCompare(prevProps, newProps);
  });
  ContextualMenuBase.displayName = "ContextualMenuBase";
  function isAltOrMeta(ev) {
    return ev.which === KeyCodes.alt || ev.key === "Meta";
  }
  function onItemMouseDown(item, ev) {
    var _a7;
    (_a7 = item.onMouseDown) === null || _a7 === void 0 ? void 0 : _a7.call(item, item, ev);
  }
  function onDefaultRenderSubMenu(subMenuProps, defaultRender) {
    throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.");
  }
  function findItemByKeyFromItems(key, items) {
    for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
      var item = items_3[_i];
      if (item.itemType === ContextualMenuItemType.Section && item.sectionProps) {
        var match = findItemByKeyFromItems(key, item.sectionProps.items);
        if (match) {
          return match;
        }
      } else if (item.key && item.key === key) {
        return item;
      }
    }
  }
  function getOnClickWithOverrideTarget(onClick, target) {
    return onClick ? function(ev, item) {
      overrideTarget(ev, target);
      return onClick(ev, item);
    } : onClick;
  }
  function overrideTarget(ev, target) {
    if (ev && target) {
      ev.persist();
      if (target instanceof Event) {
        ev.target = target.target;
      } else if (target instanceof Element) {
        ev.target = target;
      }
    }
  }

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.styles.js
  var GlobalClassNames6 = {
    root: "ms-ContextualMenu",
    container: "ms-ContextualMenu-container",
    list: "ms-ContextualMenu-list",
    header: "ms-ContextualMenu-header",
    title: "ms-ContextualMenu-title",
    isopen: "is-open"
  };
  var getStyles7 = function(props) {
    var className = props.className, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames6, theme);
    var fonts = theme.fonts, semanticColors = theme.semanticColors, effects = theme.effects;
    return {
      root: [
        theme.fonts.medium,
        classNames2.root,
        classNames2.isopen,
        {
          backgroundColor: semanticColors.menuBackground,
          minWidth: "180px"
        },
        className
      ],
      container: [
        classNames2.container,
        {
          selectors: {
            ":focus": { outline: 0 }
          }
        }
      ],
      list: [
        classNames2.list,
        classNames2.isopen,
        {
          listStyleType: "none",
          margin: "0",
          padding: "0"
        }
      ],
      header: [
        classNames2.header,
        fonts.small,
        {
          fontWeight: FontWeights.semibold,
          color: semanticColors.menuHeader,
          background: "none",
          backgroundColor: "transparent",
          border: "none",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
          cursor: "default",
          padding: "0px 6px",
          userSelect: "none",
          textAlign: "left"
        }
      ],
      title: [
        classNames2.title,
        {
          fontSize: fonts.mediumPlus.fontSize,
          paddingRight: "14px",
          paddingLeft: "14px",
          paddingBottom: "5px",
          paddingTop: "5px",
          backgroundColor: semanticColors.menuItemBackgroundPressed
        }
      ],
      subComponentStyles: {
        callout: {
          root: {
            boxShadow: effects.elevation8
          }
        },
        menuItem: {}
      }
    };
  };

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.js
  function onRenderSubMenu(subMenuProps) {
    return React46.createElement(LocalContextualMenu, __assign({}, subMenuProps));
  }
  var LocalContextualMenu = styled(ContextualMenuBase, getStyles7, function(props) {
    return {
      onRenderSubMenu: props.onRenderSubMenu ? composeRenderFunction(props.onRenderSubMenu, onRenderSubMenu) : onRenderSubMenu
    };
  }, { scope: "ContextualMenu" });
  var ContextualMenu = LocalContextualMenu;
  ContextualMenu.displayName = "ContextualMenu";

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.classNames.js
  var ButtonGlobalClassNames = {
    msButton: "ms-Button",
    msButtonHasMenu: "ms-Button--hasMenu",
    msButtonIcon: "ms-Button-icon",
    msButtonMenuIcon: "ms-Button-menuIcon",
    msButtonLabel: "ms-Button-label",
    msButtonDescription: "ms-Button-description",
    msButtonScreenReaderText: "ms-Button-screenReaderText",
    msButtonFlexContainer: "ms-Button-flexContainer",
    msButtonTextContainer: "ms-Button-textContainer"
  };
  var getBaseButtonClassNames = memoizeFunction(function(theme, styles2, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {
    var _a7, _b3;
    var classNames2 = getGlobalClassNames(ButtonGlobalClassNames, theme || {});
    var isExpanded = expanded && !isSplit;
    return mergeStyleSets({
      root: [
        classNames2.msButton,
        styles2.root,
        variantClassName,
        checked && ["is-checked", styles2.rootChecked],
        isExpanded && [
          "is-expanded",
          styles2.rootExpanded,
          {
            selectors: (_a7 = {}, _a7[":hover .".concat(classNames2.msButtonIcon)] = styles2.iconExpandedHovered, // menuIcon falls back to rootExpandedHovered to support original behavior
            _a7[":hover .".concat(classNames2.msButtonMenuIcon)] = styles2.menuIconExpandedHovered || styles2.rootExpandedHovered, _a7[":hover"] = styles2.rootExpandedHovered, _a7)
          }
        ],
        hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles2.rootHasMenu],
        disabled && ["is-disabled", styles2.rootDisabled],
        !disabled && !isExpanded && !checked && {
          selectors: (_b3 = {
            ":hover": styles2.rootHovered
          }, _b3[":hover .".concat(classNames2.msButtonLabel)] = styles2.labelHovered, _b3[":hover .".concat(classNames2.msButtonIcon)] = styles2.iconHovered, _b3[":hover .".concat(classNames2.msButtonDescription)] = styles2.descriptionHovered, _b3[":hover .".concat(classNames2.msButtonMenuIcon)] = styles2.menuIconHovered, _b3[":focus"] = styles2.rootFocused, _b3[":active"] = styles2.rootPressed, _b3[":active .".concat(classNames2.msButtonIcon)] = styles2.iconPressed, _b3[":active .".concat(classNames2.msButtonDescription)] = styles2.descriptionPressed, _b3[":active .".concat(classNames2.msButtonMenuIcon)] = styles2.menuIconPressed, _b3)
        },
        disabled && checked && [styles2.rootCheckedDisabled],
        !disabled && checked && {
          selectors: {
            ":hover": styles2.rootCheckedHovered,
            ":active": styles2.rootCheckedPressed
          }
        },
        className
      ],
      flexContainer: [classNames2.msButtonFlexContainer, styles2.flexContainer],
      textContainer: [classNames2.msButtonTextContainer, styles2.textContainer],
      icon: [
        classNames2.msButtonIcon,
        iconClassName,
        styles2.icon,
        isExpanded && styles2.iconExpanded,
        checked && styles2.iconChecked,
        disabled && styles2.iconDisabled
      ],
      label: [classNames2.msButtonLabel, styles2.label, checked && styles2.labelChecked, disabled && styles2.labelDisabled],
      menuIcon: [
        classNames2.msButtonMenuIcon,
        menuIconClassName,
        styles2.menuIcon,
        checked && styles2.menuIconChecked,
        disabled && !isSplit && styles2.menuIconDisabled,
        !disabled && !isExpanded && !checked && {
          selectors: {
            ":hover": styles2.menuIconHovered,
            ":active": styles2.menuIconPressed
          }
        },
        isExpanded && ["is-expanded", styles2.menuIconExpanded]
      ],
      description: [
        classNames2.msButtonDescription,
        styles2.description,
        checked && styles2.descriptionChecked,
        disabled && styles2.descriptionDisabled
      ],
      screenReaderText: [classNames2.msButtonScreenReaderText, styles2.screenReaderText]
    });
  });

  // ../node_modules/@fluentui/react/lib/components/Button/SplitButton/SplitButton.classNames.js
  var getSplitButtonClassNames = memoizeFunction(function(styles2, disabled, expanded, checked, primaryDisabled) {
    return {
      root: mergeStyles(styles2.splitButtonMenuButton, expanded && [styles2.splitButtonMenuButtonExpanded], disabled && [styles2.splitButtonMenuButtonDisabled], checked && !disabled && [styles2.splitButtonMenuButtonChecked], primaryDisabled && !disabled && [
        {
          selectors: {
            ":focus": styles2.splitButtonMenuFocused
          }
        }
      ]),
      splitButtonContainer: mergeStyles(styles2.splitButtonContainer, !disabled && checked && [
        styles2.splitButtonContainerChecked,
        {
          selectors: {
            ":hover": styles2.splitButtonContainerCheckedHovered
          }
        }
      ], !disabled && !checked && [
        {
          selectors: {
            ":hover": styles2.splitButtonContainerHovered,
            ":focus": styles2.splitButtonContainerFocused
          }
        }
      ], disabled && styles2.splitButtonContainerDisabled),
      icon: mergeStyles(styles2.splitButtonMenuIcon, disabled && styles2.splitButtonMenuIconDisabled, !disabled && primaryDisabled && styles2.splitButtonMenuIcon),
      flexContainer: mergeStyles(styles2.splitButtonFlexContainer),
      divider: mergeStyles(styles2.splitButtonDivider, (primaryDisabled || disabled) && styles2.splitButtonDividerDisabled)
    };
  });

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.js
  var TouchIdleDelay2 = 500;
  var COMPONENT_NAME4 = "BaseButton";
  var BaseButton = (
    /** @class */
    function(_super) {
      __extends(BaseButton2, _super);
      function BaseButton2(props) {
        var _this = _super.call(this, props) || this;
        _this._buttonElement = React47.createRef();
        _this._splitButtonContainer = React47.createRef();
        _this._mergedRef = createMergedRef();
        _this._renderedVisibleMenu = false;
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._onRenderIcon = function(buttonProps, defaultRender) {
          var iconProps = _this.props.iconProps;
          if (iconProps && (iconProps.iconName !== void 0 || iconProps.imageProps)) {
            var className = iconProps.className, imageProps = iconProps.imageProps, rest = __rest(iconProps, ["className", "imageProps"]);
            if (iconProps.styles) {
              return React47.createElement(Icon, __assign({ className: css(_this._classNames.icon, className), imageProps }, rest));
            }
            if (iconProps.iconName) {
              return React47.createElement(FontIcon, __assign({ className: css(_this._classNames.icon, className) }, rest));
            }
            if (imageProps) {
              return React47.createElement(ImageIcon, __assign({ className: css(_this._classNames.icon, className), imageProps }, rest));
            }
          }
          return null;
        };
        _this._onRenderTextContents = function() {
          var _a7 = _this.props, text = _a7.text, children = _a7.children, _b3 = _a7.secondaryText, secondaryText = _b3 === void 0 ? _this.props.description : _b3, _c3 = _a7.onRenderText, onRenderText = _c3 === void 0 ? _this._onRenderText : _c3, _d3 = _a7.onRenderDescription, onRenderDescription = _d3 === void 0 ? _this._onRenderDescription : _d3;
          if (text || typeof children === "string" || secondaryText) {
            return React47.createElement(
              "span",
              { className: _this._classNames.textContainer },
              onRenderText(_this.props, _this._onRenderText),
              onRenderDescription(_this.props, _this._onRenderDescription)
            );
          }
          return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];
        };
        _this._onRenderText = function() {
          var text = _this.props.text;
          var children = _this.props.children;
          if (text === void 0 && typeof children === "string") {
            text = children;
          }
          if (_this._hasText()) {
            return React47.createElement("span", { key: _this._labelId, className: _this._classNames.label, id: _this._labelId }, text);
          }
          return null;
        };
        _this._onRenderChildren = function() {
          var children = _this.props.children;
          if (typeof children === "string") {
            return null;
          }
          return children;
        };
        _this._onRenderDescription = function(props2) {
          var _a7 = props2.secondaryText, secondaryText = _a7 === void 0 ? _this.props.description : _a7;
          return secondaryText ? React47.createElement("span", { key: _this._descriptionId, className: _this._classNames.description, id: _this._descriptionId }, secondaryText) : null;
        };
        _this._onRenderAriaDescription = function() {
          var ariaDescription = _this.props.ariaDescription;
          return ariaDescription ? React47.createElement("span", { className: _this._classNames.screenReaderText, id: _this._ariaDescriptionId }, ariaDescription) : null;
        };
        _this._onRenderMenuIcon = function(props2) {
          var menuIconProps = _this.props.menuIconProps;
          return React47.createElement(FontIcon, __assign({ iconName: "ChevronDown" }, menuIconProps, { className: _this._classNames.menuIcon }));
        };
        _this._onRenderMenu = function(menuProps) {
          var MenuType = _this.props.menuAs ? composeComponentAs(_this.props.menuAs, ContextualMenu) : ContextualMenu;
          return React47.createElement(MenuType, __assign({}, menuProps));
        };
        _this._onDismissMenu = function(ev) {
          var menuProps = _this.props.menuProps;
          if (menuProps && menuProps.onDismiss) {
            menuProps.onDismiss(ev);
          }
          if (!ev || !ev.defaultPrevented) {
            _this._dismissMenu();
          }
        };
        _this._dismissMenu = function() {
          _this._menuShouldFocusOnMount = void 0;
          _this._menuShouldFocusOnContainer = void 0;
          _this.setState({ menuHidden: true });
        };
        _this._openMenu = function(shouldFocusOnContainer, shouldFocusOnMount) {
          if (shouldFocusOnMount === void 0) {
            shouldFocusOnMount = true;
          }
          if (_this.props.menuProps) {
            _this._menuShouldFocusOnContainer = shouldFocusOnContainer;
            _this._menuShouldFocusOnMount = shouldFocusOnMount;
            _this._renderedVisibleMenu = true;
            _this.setState({ menuHidden: false });
          }
        };
        _this._onToggleMenu = function(shouldFocusOnContainer) {
          var shouldFocusOnMount = true;
          if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {
            shouldFocusOnMount = false;
          }
          _this.state.menuHidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();
        };
        _this._onSplitContainerFocusCapture = function(ev) {
          var container = _this._splitButtonContainer.current;
          if (!container || ev.target && portalContainsElement(ev.target, container)) {
            return;
          }
          container.focus();
        };
        _this._onSplitButtonPrimaryClick = function(ev) {
          if (!_this.state.menuHidden) {
            _this._dismissMenu();
          }
          var singleTouchTarget = _this._processingTouch && !_this.props.toggle;
          if (!singleTouchTarget && _this.props.onClick) {
            _this.props.onClick(ev);
          } else if (singleTouchTarget) {
            _this._onMenuClick(ev);
          }
        };
        _this._onKeyDown = function(ev) {
          if (_this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {
            ev.preventDefault();
            ev.stopPropagation();
          } else if (!_this.props.disabled) {
            if (_this.props.menuProps) {
              _this._onMenuKeyDown(ev);
            } else if (_this.props.onKeyDown !== void 0) {
              _this.props.onKeyDown(ev);
            }
          }
        };
        _this._onKeyUp = function(ev) {
          if (!_this.props.disabled && _this.props.onKeyUp !== void 0) {
            _this.props.onKeyUp(ev);
          }
        };
        _this._onKeyPress = function(ev) {
          if (!_this.props.disabled && _this.props.onKeyPress !== void 0) {
            _this.props.onKeyPress(ev);
          }
        };
        _this._onMouseUp = function(ev) {
          if (!_this.props.disabled && _this.props.onMouseUp !== void 0) {
            _this.props.onMouseUp(ev);
          }
        };
        _this._onMouseDown = function(ev) {
          if (!_this.props.disabled && _this.props.onMouseDown !== void 0) {
            _this.props.onMouseDown(ev);
          }
        };
        _this._onClick = function(ev) {
          if (!_this.props.disabled) {
            if (_this.props.menuProps) {
              _this._onMenuClick(ev);
            } else if (_this.props.onClick !== void 0) {
              _this.props.onClick(ev);
            }
          }
        };
        _this._onSplitButtonContainerKeyDown = function(ev) {
          if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
            if (_this._buttonElement.current) {
              _this._buttonElement.current.click();
              ev.preventDefault();
              ev.stopPropagation();
            }
          } else {
            _this._onMenuKeyDown(ev);
          }
        };
        _this._onMenuKeyDown = function(ev) {
          var _a7;
          if (_this.props.disabled) {
            return;
          }
          if (_this.props.onKeyDown) {
            _this.props.onKeyDown(ev);
          }
          var isUp = ev.which === KeyCodes.up;
          var isDown = ev.which === KeyCodes.down;
          if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {
            var onMenuClick = _this.props.onMenuClick;
            if (onMenuClick) {
              onMenuClick(ev, _this.props);
            }
            _this._onToggleMenu(false);
            ev.preventDefault();
            ev.stopPropagation();
          }
          if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
            setFocusVisibility(true, ev.target, (_a7 = _this.context) === null || _a7 === void 0 ? void 0 : _a7.registeredProviders);
          }
          if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {
            if (!_this.state.menuHidden && _this.props.menuProps) {
              var currentShouldFocusOnMount = _this._menuShouldFocusOnMount !== void 0 ? _this._menuShouldFocusOnMount : _this.props.menuProps.shouldFocusOnMount;
              if (!currentShouldFocusOnMount) {
                ev.preventDefault();
                ev.stopPropagation();
                _this._menuShouldFocusOnMount = true;
                _this.forceUpdate();
              }
            }
          }
        };
        _this._onTouchStart = function() {
          if (_this._isSplitButton && _this._splitButtonContainer.current && !("onpointerdown" in _this._splitButtonContainer.current)) {
            _this._handleTouchAndPointerEvent();
          }
        };
        _this._onMenuClick = function(ev) {
          var _a7 = _this.props, onMenuClick = _a7.onMenuClick, menuProps = _a7.menuProps;
          if (onMenuClick) {
            onMenuClick(ev, _this.props);
          }
          var shouldFocusOnContainer = typeof (menuProps === null || menuProps === void 0 ? void 0 : menuProps.shouldFocusOnContainer) === "boolean" ? menuProps.shouldFocusOnContainer : ev.nativeEvent.pointerType === "mouse";
          if (!ev.defaultPrevented) {
            _this._onToggleMenu(shouldFocusOnContainer);
            ev.preventDefault();
            ev.stopPropagation();
          }
        };
        initializeComponentRef(_this);
        _this._async = new Async(_this);
        _this._events = new EventGroup(_this);
        warnConditionallyRequiredProps(COMPONENT_NAME4, props, ["menuProps", "onClick"], "split", _this.props.split);
        warnDeprecations(COMPONENT_NAME4, props, {
          rootProps: void 0,
          description: "secondaryText",
          toggled: "checked"
        });
        _this._labelId = getId();
        _this._descriptionId = getId();
        _this._ariaDescriptionId = getId();
        _this.state = {
          menuHidden: true
        };
        return _this;
      }
      Object.defineProperty(BaseButton2.prototype, "_isSplitButton", {
        get: function() {
          return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;
        },
        enumerable: false,
        configurable: true
      });
      BaseButton2.prototype.render = function() {
        var _a7;
        var _b3 = this.props, ariaDescription = _b3.ariaDescription, ariaLabel = _b3.ariaLabel, ariaHidden = _b3.ariaHidden, className = _b3.className, disabled = _b3.disabled, allowDisabledFocus = _b3.allowDisabledFocus, primaryDisabled = _b3.primaryDisabled, _c3 = _b3.secondaryText, secondaryText = _c3 === void 0 ? this.props.description : _c3, href = _b3.href, iconProps = _b3.iconProps, menuIconProps = _b3.menuIconProps, styles2 = _b3.styles, checked = _b3.checked, variantClassName = _b3.variantClassName, theme = _b3.theme, toggle = _b3.toggle, getClassNames14 = _b3.getClassNames, role = _b3.role;
        var menuHidden = this.state.menuHidden;
        var isPrimaryButtonDisabled = disabled || primaryDisabled;
        this._classNames = getClassNames14 ? getClassNames14(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !menuHidden, !!this.props.menuProps, this.props.split, !!allowDisabledFocus) : getBaseButtonClassNames(theme, styles2, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, !!this.props.menuProps, checked, !menuHidden, this.props.split);
        var _d3 = this, _ariaDescriptionId = _d3._ariaDescriptionId, _labelId = _d3._labelId, _descriptionId = _d3._descriptionId;
        var renderAsAnchor = !isPrimaryButtonDisabled && !!href;
        var tag = renderAsAnchor ? "a" : "button";
        var nativeProps = getNativeProps(
          // eslint-disable-next-line deprecation/deprecation
          assign(renderAsAnchor ? {} : { type: "button" }, this.props.rootProps, this.props),
          renderAsAnchor ? anchorProperties : buttonProperties,
          [
            "disabled"
            // let disabled buttons be focused and styled as disabled.
          ]
        );
        var resolvedAriaLabel = ariaLabel || nativeProps["aria-label"];
        var ariaDescribedBy = void 0;
        if (ariaDescription) {
          ariaDescribedBy = _ariaDescriptionId;
        } else if (secondaryText && this.props.onRenderDescription !== nullRender) {
          ariaDescribedBy = _descriptionId;
        } else if (nativeProps["aria-describedby"]) {
          ariaDescribedBy = nativeProps["aria-describedby"];
        }
        var ariaLabelledBy = void 0;
        if (nativeProps["aria-labelledby"]) {
          ariaLabelledBy = nativeProps["aria-labelledby"];
        } else if (ariaDescribedBy && !resolvedAriaLabel) {
          ariaLabelledBy = this._hasText() ? _labelId : void 0;
        }
        var dataIsFocusable = this.props["data-is-focusable"] === false || disabled && !allowDisabledFocus || this._isSplitButton ? false : true;
        var isCheckboxTypeRole = role === "menuitemcheckbox" || role === "checkbox";
        var checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : void 0;
        var buttonProps = assign(nativeProps, (_a7 = {
          className: this._classNames.root,
          // eslint-disable-next-line deprecation/deprecation
          ref: this._mergedRef(this.props.elementRef, this._buttonElement),
          disabled: isPrimaryButtonDisabled && !allowDisabledFocus,
          onKeyDown: this._onKeyDown,
          onKeyPress: this._onKeyPress,
          onKeyUp: this._onKeyUp,
          onMouseDown: this._onMouseDown,
          onMouseUp: this._onMouseUp,
          onClick: this._onClick,
          "aria-label": resolvedAriaLabel,
          "aria-labelledby": ariaLabelledBy,
          "aria-describedby": ariaDescribedBy,
          "aria-disabled": isPrimaryButtonDisabled,
          "data-is-focusable": dataIsFocusable
        }, // aria-pressed attribute should only be present for toggle buttons
        // aria-checked attribute should only be present for toggle buttons with checkbox type role
        _a7[isCheckboxTypeRole ? "aria-checked" : "aria-pressed"] = checkedOrPressedValue, _a7));
        if (ariaHidden) {
          buttonProps["aria-hidden"] = true;
        }
        if (this._isSplitButton) {
          return this._onRenderSplitButtonContent(tag, buttonProps);
        } else if (this.props.menuProps) {
          var _e2 = this.props.menuProps.id, id = _e2 === void 0 ? "".concat(this._labelId, "-menu") : _e2;
          assign(buttonProps, {
            "aria-expanded": !menuHidden,
            "aria-controls": !menuHidden ? id : null,
            "aria-haspopup": true
          });
        }
        return this._onRenderContent(tag, buttonProps);
      };
      BaseButton2.prototype.componentDidMount = function() {
        if (this._isSplitButton && this._splitButtonContainer.current) {
          if ("onpointerdown" in this._splitButtonContainer.current) {
            this._events.on(this._splitButtonContainer.current, "pointerdown", this._onPointerDown, true);
          }
          if ("onpointerup" in this._splitButtonContainer.current && this.props.onPointerUp) {
            this._events.on(this._splitButtonContainer.current, "pointerup", this.props.onPointerUp, true);
          }
        }
      };
      BaseButton2.prototype.componentDidUpdate = function(prevProps, prevState) {
        if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {
          this.props.onAfterMenuDismiss();
        }
      };
      BaseButton2.prototype.componentWillUnmount = function() {
        this._async.dispose();
        this._events.dispose();
      };
      BaseButton2.prototype.focus = function() {
        var _a7, _b3;
        if (this._isSplitButton && this._splitButtonContainer.current) {
          setFocusVisibility(true, void 0, (_a7 = this.context) === null || _a7 === void 0 ? void 0 : _a7.registeredProviders);
          this._splitButtonContainer.current.focus();
        } else if (this._buttonElement.current) {
          setFocusVisibility(true, void 0, (_b3 = this.context) === null || _b3 === void 0 ? void 0 : _b3.registeredProviders);
          this._buttonElement.current.focus();
        }
      };
      BaseButton2.prototype.dismissMenu = function() {
        this._dismissMenu();
      };
      BaseButton2.prototype.openMenu = function(shouldFocusOnContainer, shouldFocusOnMount) {
        this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);
      };
      BaseButton2.prototype._onRenderContent = function(tag, buttonProps) {
        var _this = this;
        var props = this.props;
        var Tag2 = tag;
        var menuIconProps = props.menuIconProps, menuProps = props.menuProps, _a7 = props.onRenderIcon, onRenderIcon = _a7 === void 0 ? this._onRenderIcon : _a7, _b3 = props.onRenderAriaDescription, onRenderAriaDescription = _b3 === void 0 ? this._onRenderAriaDescription : _b3, _c3 = props.onRenderChildren, onRenderChildren = _c3 === void 0 ? this._onRenderChildren : _c3, _d3 = props.onRenderMenu, onRenderMenu = _d3 === void 0 ? this._onRenderMenu : _d3, _e2 = props.onRenderMenuIcon, onRenderMenuIcon = _e2 === void 0 ? this._onRenderMenuIcon : _e2, disabled = props.disabled;
        var keytipProps = props.keytipProps;
        if (keytipProps && menuProps) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        var Button3 = function(keytipAttributes) {
          return React47.createElement(
            Tag2,
            __assign({}, buttonProps, keytipAttributes),
            React47.createElement(
              "span",
              { className: _this._classNames.flexContainer, "data-automationid": "splitbuttonprimary" },
              onRenderIcon(props, _this._onRenderIcon),
              _this._onRenderTextContents(),
              onRenderAriaDescription(props, _this._onRenderAriaDescription),
              onRenderChildren(props, _this._onRenderChildren),
              !_this._isSplitButton && (menuProps || menuIconProps || _this.props.onRenderMenuIcon) && onRenderMenuIcon(_this.props, _this._onRenderMenuIcon),
              menuProps && !menuProps.doNotLayer && _this._shouldRenderMenu() && onRenderMenu(_this._getMenuProps(menuProps), _this._onRenderMenu)
            )
          );
        };
        var Content2 = keytipProps ? (
          // If we're making a split button, we won't put the keytip here
          React47.createElement(KeytipData, { keytipProps: !this._isSplitButton ? keytipProps : void 0, ariaDescribedBy: buttonProps["aria-describedby"], disabled }, function(keytipAttributes) {
            return Button3(keytipAttributes);
          })
        ) : Button3();
        if (menuProps && menuProps.doNotLayer) {
          return React47.createElement(
            React47.Fragment,
            null,
            Content2,
            this._shouldRenderMenu() && onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu)
          );
        }
        return React47.createElement(
          React47.Fragment,
          null,
          Content2,
          React47.createElement(FocusRects, null)
        );
      };
      BaseButton2.prototype._shouldRenderMenu = function() {
        var menuHidden = this.state.menuHidden;
        var _a7 = this.props, persistMenu = _a7.persistMenu, renderPersistedMenuHiddenOnMount = _a7.renderPersistedMenuHiddenOnMount;
        if (!menuHidden) {
          return true;
        } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {
          return true;
        }
        return false;
      };
      BaseButton2.prototype._hasText = function() {
        return this.props.text !== null && (this.props.text !== void 0 || typeof this.props.children === "string");
      };
      BaseButton2.prototype._getMenuProps = function(menuProps) {
        var persistMenu = this.props.persistMenu;
        var menuHidden = this.state.menuHidden;
        if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {
          menuProps = __assign(__assign({}, menuProps), { labelElementId: this._labelId });
        }
        return __assign(__assign({ id: this._labelId + "-menu", directionalHint: DirectionalHint.bottomLeftEdge }, menuProps), { shouldFocusOnContainer: this._menuShouldFocusOnContainer, shouldFocusOnMount: this._menuShouldFocusOnMount, hidden: persistMenu ? menuHidden : void 0, className: css("ms-BaseButton-menuhost", menuProps.className), target: this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current, onDismiss: this._onDismissMenu });
      };
      BaseButton2.prototype._onRenderSplitButtonContent = function(tag, buttonProps) {
        var _this = this;
        var _a7 = this.props, _b3 = _a7.styles, styles2 = _b3 === void 0 ? {} : _b3, disabled = _a7.disabled, allowDisabledFocus = _a7.allowDisabledFocus, checked = _a7.checked, getSplitButtonClassNames2 = _a7.getSplitButtonClassNames, primaryDisabled = _a7.primaryDisabled, menuProps = _a7.menuProps, toggle = _a7.toggle, role = _a7.role, primaryActionButtonProps = _a7.primaryActionButtonProps;
        var keytipProps = this.props.keytipProps;
        var menuHidden = this.state.menuHidden;
        var classNames2 = getSplitButtonClassNames2 ? getSplitButtonClassNames2(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus) : styles2 && getSplitButtonClassNames(styles2, !!disabled, !menuHidden, !!checked, !!primaryDisabled);
        assign(buttonProps, {
          onClick: void 0,
          onPointerDown: void 0,
          onPointerUp: void 0,
          tabIndex: -1,
          "data-is-focusable": false
        });
        if (keytipProps && menuProps) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        var containerProps = getNativeProps(buttonProps, [], ["disabled"]);
        if (primaryActionButtonProps) {
          assign(buttonProps, primaryActionButtonProps);
        }
        var SplitButton2 = function(keytipAttributes) {
          return React47.createElement(
            "div",
            __assign({}, containerProps, { "data-ktp-target": keytipAttributes ? keytipAttributes["data-ktp-target"] : void 0, role: role ? role : "button", "aria-disabled": disabled, "aria-haspopup": true, "aria-expanded": !menuHidden, "aria-pressed": toggle ? !!checked : void 0, "aria-describedby": mergeAriaAttributeValues(buttonProps["aria-describedby"], keytipAttributes ? keytipAttributes["aria-describedby"] : void 0), className: classNames2 && classNames2.splitButtonContainer, onKeyDown: _this._onSplitButtonContainerKeyDown, onTouchStart: _this._onTouchStart, ref: _this._splitButtonContainer, "data-is-focusable": true, onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : void 0, tabIndex: !disabled && !primaryDisabled || allowDisabledFocus ? 0 : void 0, "aria-roledescription": buttonProps["aria-roledescription"], onFocusCapture: _this._onSplitContainerFocusCapture }),
            React47.createElement(
              "span",
              { style: { display: "flex", width: "100%" } },
              _this._onRenderContent(tag, buttonProps),
              _this._onRenderSplitButtonMenuButton(classNames2, keytipAttributes),
              _this._onRenderSplitButtonDivider(classNames2)
            )
          );
        };
        return keytipProps ? React47.createElement(KeytipData, { keytipProps, disabled }, function(keytipAttributes) {
          return SplitButton2(keytipAttributes);
        }) : SplitButton2();
      };
      BaseButton2.prototype._onRenderSplitButtonDivider = function(classNames2) {
        if (classNames2 && classNames2.divider) {
          var onClick = function(ev) {
            ev.stopPropagation();
          };
          return React47.createElement("span", { className: classNames2.divider, "aria-hidden": true, onClick });
        }
        return null;
      };
      BaseButton2.prototype._onRenderSplitButtonMenuButton = function(classNames2, keytipAttributes) {
        var _a7 = this.props, allowDisabledFocus = _a7.allowDisabledFocus, checked = _a7.checked, disabled = _a7.disabled, splitButtonMenuProps = _a7.splitButtonMenuProps, splitButtonAriaLabel = _a7.splitButtonAriaLabel, primaryDisabled = _a7.primaryDisabled;
        var menuHidden = this.state.menuHidden;
        var menuIconProps = this.props.menuIconProps;
        if (menuIconProps === void 0) {
          menuIconProps = {
            iconName: "ChevronDown"
          };
        }
        var splitButtonProps = __assign(__assign({}, splitButtonMenuProps), { styles: classNames2, checked, disabled, allowDisabledFocus, onClick: this._onMenuClick, menuProps: void 0, iconProps: __assign(__assign({}, menuIconProps), { className: this._classNames.menuIcon }), ariaLabel: splitButtonAriaLabel, "aria-haspopup": true, "aria-expanded": !menuHidden, "data-is-focusable": false });
        return React47.createElement(BaseButton2, __assign({}, splitButtonProps, { "data-ktp-execute-target": keytipAttributes ? keytipAttributes["data-ktp-execute-target"] : keytipAttributes, onMouseDown: this._onMouseDown, tabIndex: primaryDisabled && !allowDisabledFocus ? 0 : -1 }));
      };
      BaseButton2.prototype._onPointerDown = function(ev) {
        var onPointerDown = this.props.onPointerDown;
        if (onPointerDown) {
          onPointerDown(ev);
        }
        if (ev.pointerType === "touch") {
          this._handleTouchAndPointerEvent();
          ev.preventDefault();
          ev.stopImmediatePropagation();
        }
      };
      BaseButton2.prototype._handleTouchAndPointerEvent = function() {
        var _this = this;
        if (this._lastTouchTimeoutId !== void 0) {
          this._async.clearTimeout(this._lastTouchTimeoutId);
          this._lastTouchTimeoutId = void 0;
        }
        this._processingTouch = true;
        this._lastTouchTimeoutId = this._async.setTimeout(function() {
          _this._processingTouch = false;
          _this._lastTouchTimeoutId = void 0;
          if (_this.state.menuHidden) {
            _this.focus();
          }
        }, TouchIdleDelay2);
      };
      BaseButton2.prototype._isValidMenuOpenKey = function(ev) {
        if (this.props.menuTriggerKeyCode) {
          return ev.which === this.props.menuTriggerKeyCode;
        } else if (this.props.menuProps) {
          return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);
        }
        return false;
      };
      BaseButton2.defaultProps = {
        baseClassName: "ms-Button",
        styles: {},
        split: false
      };
      BaseButton2.contextType = FocusRectsContext;
      return BaseButton2;
    }(React47.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.js
  var React48 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.styles.js
  var noOutline = {
    outline: 0
  };
  var iconStyle = function(fontSize) {
    return {
      fontSize,
      margin: "0 4px",
      height: "16px",
      lineHeight: "16px",
      textAlign: "center",
      flexShrink: 0
    };
  };
  var getStyles8 = memoizeFunction(function(theme) {
    var _a7, _b3;
    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
    var border = semanticColors.buttonBorder;
    var disabledBackground = semanticColors.disabledBackground;
    var disabledText = semanticColors.disabledText;
    var buttonHighContrastFocus = {
      left: -2,
      top: -2,
      bottom: -2,
      right: -2,
      outlineColor: "ButtonText"
    };
    return {
      root: [
        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: "transparent" }),
        theme.fonts.medium,
        {
          border: "1px solid " + border,
          borderRadius: effects.roundedCorner2,
          boxSizing: "border-box",
          cursor: "pointer",
          display: "inline-block",
          padding: "0 16px",
          textDecoration: "none",
          textAlign: "center",
          userSelect: "none",
          selectors: {
            // IE11 workaround for preventing shift of child elements of a button when active.
            ":active > span": {
              position: "relative",
              left: 0,
              top: 0
            }
          }
        }
      ],
      rootDisabled: [
        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: "transparent" }),
        {
          backgroundColor: disabledBackground,
          borderColor: disabledBackground,
          color: disabledText,
          cursor: "default",
          selectors: {
            ":hover": noOutline,
            ":focus": noOutline
          }
        }
      ],
      iconDisabled: {
        color: disabledText,
        selectors: (_a7 = {}, _a7[HighContrastSelector] = {
          color: "GrayText"
        }, _a7)
      },
      menuIconDisabled: {
        color: disabledText,
        selectors: (_b3 = {}, _b3[HighContrastSelector] = {
          color: "GrayText"
        }, _b3)
      },
      flexContainer: {
        display: "flex",
        height: "100%",
        flexWrap: "nowrap",
        justifyContent: "center",
        alignItems: "center"
      },
      description: {
        display: "block"
      },
      textContainer: {
        flexGrow: 1,
        display: "block"
      },
      icon: iconStyle(fonts.mediumPlus.fontSize),
      menuIcon: iconStyle(fonts.small.fontSize),
      label: {
        margin: "0 4px",
        lineHeight: "100%",
        display: "block"
      },
      screenReaderText: hiddenContentStyle
    };
  });

  // ../node_modules/@fluentui/react/lib/components/Button/SplitButton/SplitButton.styles.js
  var getStyles9 = memoizeFunction(function(theme, customStyles) {
    var _a7, _b3, _c3, _d3, _e2, _f, _g, _h, _j, _k, _l, _m, _o;
    var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;
    var buttonHighContrastFocus = {
      left: -2,
      top: -2,
      bottom: -2,
      right: -2,
      border: "none"
    };
    var splitButtonDividerBaseStyles2 = {
      position: "absolute",
      width: 1,
      right: 31,
      top: 8,
      bottom: 8
    };
    var splitButtonStyles = {
      splitButtonContainer: [
        getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2, pointerEvents: "none" }),
        {
          display: "inline-flex",
          selectors: {
            ".ms-Button--default": {
              borderTopRightRadius: "0",
              borderBottomRightRadius: "0",
              borderRight: "none",
              flexGrow: "1"
            },
            ".ms-Button--primary": {
              borderTopRightRadius: "0",
              borderBottomRightRadius: "0",
              border: "none",
              flexGrow: "1",
              selectors: (_a7 = {}, _a7[HighContrastSelector] = __assign({ color: "WindowText", backgroundColor: "Window", border: "1px solid WindowText", borderRightWidth: "0" }, getHighContrastNoAdjustStyle()), _a7[":hover"] = {
                border: "none"
              }, _a7[":active"] = {
                border: "none"
              }, _a7)
            },
            ".ms-Button--primary + .ms-Button": {
              border: "none",
              selectors: (_b3 = {}, _b3[HighContrastSelector] = {
                border: "1px solid WindowText",
                borderLeftWidth: "0"
              }, _b3)
            }
          }
        }
      ],
      splitButtonContainerHovered: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_c3 = {}, _c3[HighContrastSelector] = {
              color: "Window",
              backgroundColor: "Highlight"
            }, _c3)
          },
          ".ms-Button.is-disabled": {
            color: semanticColors.buttonTextDisabled,
            selectors: (_d3 = {}, _d3[HighContrastSelector] = {
              color: "GrayText",
              borderColor: "GrayText",
              backgroundColor: "Window"
            }, _d3)
          }
        }
      },
      splitButtonContainerChecked: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_e2 = {}, _e2[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText" }, getHighContrastNoAdjustStyle()), _e2)
          }
        }
      },
      splitButtonContainerCheckedHovered: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_f = {}, _f[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText" }, getHighContrastNoAdjustStyle()), _f)
          }
        }
      },
      splitButtonContainerFocused: {
        outline: "none!important"
      },
      splitButtonMenuButton: (_g = {
        padding: 6,
        height: "auto",
        boxSizing: "border-box",
        borderRadius: 0,
        borderTopRightRadius: effects.roundedCorner2,
        borderBottomRightRadius: effects.roundedCorner2,
        border: "1px solid ".concat(palette.neutralSecondaryAlt),
        borderLeft: "none",
        outline: "transparent",
        userSelect: "none",
        display: "inline-block",
        textDecoration: "none",
        textAlign: "center",
        cursor: "pointer",
        verticalAlign: "top",
        width: 32,
        marginLeft: -1,
        marginTop: 0,
        marginRight: 0,
        marginBottom: 0
      }, _g[HighContrastSelector] = {
        ".ms-Button-menuIcon": {
          color: "WindowText"
        }
      }, _g),
      splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles2), { selectors: (_h = {}, _h[HighContrastSelector] = {
        backgroundColor: "WindowText"
      }, _h) }),
      splitButtonDividerDisabled: __assign(__assign({}, splitButtonDividerBaseStyles2), { selectors: (_j = {}, _j[HighContrastSelector] = {
        backgroundColor: "GrayText"
      }, _j) }),
      splitButtonMenuButtonDisabled: {
        pointerEvents: "none",
        border: "none",
        selectors: (_k = {
          ":hover": {
            cursor: "default"
          },
          ".ms-Button--primary": {
            selectors: (_l = {}, _l[HighContrastSelector] = {
              color: "GrayText",
              borderColor: "GrayText",
              backgroundColor: "Window"
            }, _l)
          },
          ".ms-Button-menuIcon": {
            selectors: (_m = {}, _m[HighContrastSelector] = {
              color: "GrayText"
            }, _m)
          }
        }, _k[HighContrastSelector] = {
          color: "GrayText",
          border: "1px solid GrayText",
          backgroundColor: "Window"
        }, _k)
      },
      splitButtonFlexContainer: {
        display: "flex",
        height: "100%",
        flexWrap: "nowrap",
        justifyContent: "center",
        alignItems: "center"
      },
      splitButtonContainerDisabled: {
        outline: "none",
        border: "none",
        selectors: (_o = {}, _o[HighContrastSelector] = __assign({ color: "GrayText", borderColor: "GrayText", backgroundColor: "Window" }, getHighContrastNoAdjustStyle()), _o)
      },
      splitButtonMenuFocused: __assign({}, getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2 }))
    };
    return concatStyleSets(splitButtonStyles, customStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/Button/ButtonThemes.js
  var splitButtonDividerBaseStyles = function() {
    return {
      position: "absolute",
      width: 1,
      right: 31,
      top: 8,
      bottom: 8
    };
  };
  function standardStyles(theme) {
    var _a7, _b3, _c3, _d3, _e2;
    var s2 = theme.semanticColors, p2 = theme.palette;
    var buttonBackground = s2.buttonBackground;
    var buttonBackgroundPressed = s2.buttonBackgroundPressed;
    var buttonBackgroundHovered = s2.buttonBackgroundHovered;
    var buttonBackgroundDisabled = s2.buttonBackgroundDisabled;
    var buttonText = s2.buttonText;
    var buttonTextHovered = s2.buttonTextHovered;
    var buttonTextDisabled = s2.buttonTextDisabled;
    var buttonTextChecked = s2.buttonTextChecked;
    var buttonTextCheckedHovered = s2.buttonTextCheckedHovered;
    return {
      root: {
        backgroundColor: buttonBackground,
        color: buttonText
      },
      rootHovered: {
        backgroundColor: buttonBackgroundHovered,
        color: buttonTextHovered,
        selectors: (_a7 = {}, _a7[HighContrastSelector] = {
          borderColor: "Highlight",
          color: "Highlight"
        }, _a7)
      },
      rootPressed: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootExpanded: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootChecked: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootCheckedHovered: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextCheckedHovered
      },
      rootDisabled: {
        color: buttonTextDisabled,
        backgroundColor: buttonBackgroundDisabled,
        selectors: (_b3 = {}, _b3[HighContrastSelector] = {
          color: "GrayText",
          borderColor: "GrayText",
          backgroundColor: "Window"
        }, _b3)
      },
      // Split button styles
      splitButtonContainer: {
        selectors: (_c3 = {}, _c3[HighContrastSelector] = {
          border: "none"
        }, _c3)
      },
      splitButtonMenuButton: {
        color: p2.white,
        backgroundColor: "transparent",
        selectors: {
          ":hover": {
            backgroundColor: p2.neutralLight,
            selectors: (_d3 = {}, _d3[HighContrastSelector] = {
              color: "Highlight"
            }, _d3)
          }
        }
      },
      splitButtonMenuButtonDisabled: {
        backgroundColor: s2.buttonBackgroundDisabled,
        selectors: {
          ":hover": {
            backgroundColor: s2.buttonBackgroundDisabled
          }
        }
      },
      splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles()), { backgroundColor: p2.neutralTertiaryAlt, selectors: (_e2 = {}, _e2[HighContrastSelector] = {
        backgroundColor: "WindowText"
      }, _e2) }),
      splitButtonDividerDisabled: {
        backgroundColor: theme.palette.neutralTertiaryAlt
      },
      splitButtonMenuButtonChecked: {
        backgroundColor: p2.neutralQuaternaryAlt,
        selectors: {
          ":hover": {
            backgroundColor: p2.neutralQuaternaryAlt
          }
        }
      },
      splitButtonMenuButtonExpanded: {
        backgroundColor: p2.neutralQuaternaryAlt,
        selectors: {
          ":hover": {
            backgroundColor: p2.neutralQuaternaryAlt
          }
        }
      },
      splitButtonMenuIcon: {
        color: s2.buttonText
      },
      splitButtonMenuIconDisabled: {
        color: s2.buttonTextDisabled
      }
    };
  }
  function primaryStyles(theme) {
    var _a7, _b3, _c3, _d3, _e2, _f, _g, _h, _j;
    var p2 = theme.palette, s2 = theme.semanticColors;
    return {
      root: {
        backgroundColor: s2.primaryButtonBackground,
        border: "1px solid ".concat(s2.primaryButtonBackground),
        color: s2.primaryButtonText,
        selectors: (_a7 = {}, _a7[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _a7[".".concat(IsFocusVisibleClassName, " &:focus")] = {
          selectors: {
            ":after": {
              border: "none",
              outlineColor: p2.white
            }
          }
        }, _a7)
      },
      rootHovered: {
        backgroundColor: s2.primaryButtonBackgroundHovered,
        border: "1px solid ".concat(s2.primaryButtonBackgroundHovered),
        color: s2.primaryButtonTextHovered,
        selectors: (_b3 = {}, _b3[HighContrastSelector] = {
          color: "Window",
          backgroundColor: "Highlight",
          borderColor: "Highlight"
        }, _b3)
      },
      rootPressed: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        border: "1px solid ".concat(s2.primaryButtonBackgroundPressed),
        color: s2.primaryButtonTextPressed,
        selectors: (_c3 = {}, _c3[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _c3)
      },
      rootExpanded: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed
      },
      rootChecked: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed
      },
      rootCheckedHovered: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed
      },
      rootDisabled: {
        color: s2.primaryButtonTextDisabled,
        backgroundColor: s2.primaryButtonBackgroundDisabled,
        selectors: (_d3 = {}, _d3[HighContrastSelector] = {
          color: "GrayText",
          borderColor: "GrayText",
          backgroundColor: "Window"
        }, _d3)
      },
      // Split button styles
      splitButtonContainer: {
        selectors: (_e2 = {}, _e2[HighContrastSelector] = {
          border: "none"
        }, _e2)
      },
      splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles()), { backgroundColor: p2.white, selectors: (_f = {}, _f[HighContrastSelector] = {
        backgroundColor: "Window"
      }, _f) }),
      splitButtonMenuButton: {
        backgroundColor: s2.primaryButtonBackground,
        color: s2.primaryButtonText,
        selectors: (_g = {}, _g[HighContrastSelector] = {
          backgroundColor: "Canvas"
        }, _g[":hover"] = {
          backgroundColor: s2.primaryButtonBackgroundHovered,
          selectors: (_h = {}, _h[HighContrastSelector] = {
            color: "Highlight"
          }, _h)
        }, _g)
      },
      splitButtonMenuButtonDisabled: {
        backgroundColor: s2.primaryButtonBackgroundDisabled,
        selectors: {
          ":hover": {
            backgroundColor: s2.primaryButtonBackgroundDisabled
          }
        }
      },
      splitButtonMenuButtonChecked: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        selectors: {
          ":hover": {
            backgroundColor: s2.primaryButtonBackgroundPressed
          }
        }
      },
      splitButtonMenuButtonExpanded: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        selectors: {
          ":hover": {
            backgroundColor: s2.primaryButtonBackgroundPressed
          }
        }
      },
      splitButtonMenuIcon: {
        color: s2.primaryButtonText
      },
      splitButtonMenuIconDisabled: {
        color: p2.neutralTertiary,
        selectors: (_j = {}, _j[HighContrastSelector] = {
          color: "GrayText"
        }, _j)
      }
    };
  }

  // ../node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.styles.js
  var DEFAULT_BUTTON_HEIGHT = "32px";
  var DEFAULT_BUTTON_MIN_WIDTH = "80px";
  var getStyles10 = memoizeFunction(function(theme, customStyles, primary) {
    var baseButtonStyles = getStyles8(theme);
    var splitButtonStyles = getStyles9(theme);
    var defaultButtonStyles = {
      root: {
        minWidth: DEFAULT_BUTTON_MIN_WIDTH,
        height: DEFAULT_BUTTON_HEIGHT
      },
      label: {
        fontWeight: FontWeights.semibold
      }
    };
    return concatStyleSets(baseButtonStyles, defaultButtonStyles, primary ? primaryStyles(theme) : standardStyles(theme), splitButtonStyles, customStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.js
  var DefaultButton = (
    /** @class */
    function(_super) {
      __extends(DefaultButton2, _super);
      function DefaultButton2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      DefaultButton2.prototype.render = function() {
        var _a7 = this.props, _b3 = _a7.primary, primary = _b3 === void 0 ? false : _b3, styles2 = _a7.styles, theme = _a7.theme;
        return React48.createElement(BaseButton, __assign({}, this.props, { variantClassName: primary ? "ms-Button--primary" : "ms-Button--default", styles: getStyles10(theme, styles2, primary), onRenderDescription: nullRender }));
      };
      DefaultButton2 = __decorate([
        customizable("DefaultButton", ["theme", "styles"], true)
      ], DefaultButton2);
      return DefaultButton2;
    }(React48.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/ActionButton/ActionButton.js
  var React49 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Button/ActionButton/ActionButton.styles.js
  var DEFAULT_BUTTON_HEIGHT2 = "40px";
  var DEFAULT_PADDING = "0 4px";
  var getStyles11 = memoizeFunction(function(theme, customStyles) {
    var _a7, _b3, _c3;
    var baseButtonStyles = getStyles8(theme);
    var actionButtonStyles = {
      root: {
        padding: DEFAULT_PADDING,
        height: DEFAULT_BUTTON_HEIGHT2,
        color: theme.palette.neutralPrimary,
        backgroundColor: "transparent",
        border: "1px solid transparent",
        selectors: (_a7 = {}, _a7[HighContrastSelector] = {
          borderColor: "Window"
        }, _a7)
      },
      rootHovered: {
        color: theme.palette.themePrimary,
        selectors: (_b3 = {}, _b3[HighContrastSelector] = {
          color: "Highlight"
        }, _b3)
      },
      iconHovered: {
        color: theme.palette.themePrimary
      },
      rootPressed: {
        color: theme.palette.black
      },
      rootExpanded: {
        color: theme.palette.themePrimary
      },
      iconPressed: {
        color: theme.palette.themeDarker
      },
      rootDisabled: {
        color: theme.palette.neutralTertiary,
        backgroundColor: "transparent",
        borderColor: "transparent",
        selectors: (_c3 = {}, _c3[HighContrastSelector] = {
          color: "GrayText"
        }, _c3)
      },
      rootChecked: {
        color: theme.palette.black
      },
      iconChecked: {
        color: theme.palette.themeDarker
      },
      flexContainer: {
        justifyContent: "flex-start"
      },
      icon: {
        color: theme.palette.themeDarkAlt
      },
      iconDisabled: {
        color: "inherit"
      },
      menuIcon: {
        color: theme.palette.neutralSecondary
      },
      textContainer: {
        flexGrow: 0
      }
    };
    return concatStyleSets(baseButtonStyles, actionButtonStyles, customStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/Button/ActionButton/ActionButton.js
  var ActionButton = (
    /** @class */
    function(_super) {
      __extends(ActionButton2, _super);
      function ActionButton2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ActionButton2.prototype.render = function() {
        var _a7 = this.props, styles2 = _a7.styles, theme = _a7.theme;
        return React49.createElement(BaseButton, __assign({}, this.props, { variantClassName: "ms-Button--action ms-Button--command", styles: getStyles11(theme, styles2), onRenderDescription: nullRender }));
      };
      ActionButton2 = __decorate([
        customizable("ActionButton", ["theme", "styles"], true)
      ], ActionButton2);
      return ActionButton2;
    }(React49.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/IconButton/IconButton.js
  var React50 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Button/IconButton/IconButton.styles.js
  var getStyles12 = memoizeFunction(function(theme, customStyles) {
    var _a7;
    var baseButtonStyles = getStyles8(theme);
    var splitButtonStyles = getStyles9(theme);
    var palette = theme.palette, semanticColors = theme.semanticColors;
    var iconButtonStyles = {
      root: {
        padding: "0 4px",
        width: "32px",
        height: "32px",
        backgroundColor: "transparent",
        border: "none",
        color: semanticColors.link
      },
      rootHovered: {
        color: palette.themeDarkAlt,
        backgroundColor: palette.neutralLighter,
        selectors: (_a7 = {}, _a7[HighContrastSelector] = {
          borderColor: "Highlight",
          color: "Highlight"
        }, _a7)
      },
      rootHasMenu: {
        width: "auto"
      },
      rootPressed: {
        color: palette.themeDark,
        backgroundColor: palette.neutralLight
      },
      rootExpanded: {
        color: palette.themeDark,
        backgroundColor: palette.neutralLight
      },
      rootChecked: {
        color: palette.themeDark,
        backgroundColor: palette.neutralLight
      },
      rootCheckedHovered: {
        color: palette.themeDark,
        backgroundColor: palette.neutralQuaternaryAlt
      },
      rootDisabled: {
        color: palette.neutralTertiaryAlt
      }
    };
    return concatStyleSets(baseButtonStyles, iconButtonStyles, splitButtonStyles, customStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/Button/IconButton/IconButton.js
  var IconButton = (
    /** @class */
    function(_super) {
      __extends(IconButton2, _super);
      function IconButton2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      IconButton2.prototype.render = function() {
        var _a7 = this.props, styles2 = _a7.styles, theme = _a7.theme;
        return React50.createElement(BaseButton, __assign({}, this.props, { variantClassName: "ms-Button--icon", styles: getStyles12(theme, styles2), onRenderText: nullRender, onRenderDescription: nullRender }));
      };
      IconButton2 = __decorate([
        customizable("IconButton", ["theme", "styles"], true)
      ], IconButton2);
      return IconButton2;
    }(React50.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/PrimaryButton/PrimaryButton.js
  var React51 = __toESM(require_react());
  var PrimaryButton = (
    /** @class */
    function(_super) {
      __extends(PrimaryButton2, _super);
      function PrimaryButton2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PrimaryButton2.prototype.render = function() {
        return React51.createElement(DefaultButton, __assign({}, this.props, { primary: true, onRenderDescription: nullRender }));
      };
      PrimaryButton2 = __decorate([
        customizable("PrimaryButton", ["theme", "styles"], true)
      ], PrimaryButton2);
      return PrimaryButton2;
    }(React51.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/CommandButton/CommandButton.js
  var CommandButton = ActionButton;

  // ../node_modules/@fluentui/react/lib/components/Checkbox/Checkbox.base.js
  var React52 = __toESM(require_react());
  var getClassNames8 = classNamesFunction();
  var CheckboxBase = React52.forwardRef(function(props, forwardedRef) {
    var disabled = props.disabled, required = props.required, inputProps = props.inputProps, name = props.name, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaDescribedBy = props.ariaDescribedBy, ariaPositionInSet = props.ariaPositionInSet, ariaSetSize = props.ariaSetSize, title = props.title, checkmarkIconProps = props.checkmarkIconProps, styles2 = props.styles, theme = props.theme, className = props.className, _a7 = props.boxSide, boxSide = _a7 === void 0 ? "start" : _a7;
    var id = useId("checkbox-", props.id);
    var rootRef = React52.useRef(null);
    var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);
    var inputRef = React52.useRef(null);
    var _b3 = useControllableValue(props.checked, props.defaultChecked, props.onChange), isChecked = _b3[0], setIsChecked = _b3[1];
    var _c3 = useControllableValue(props.indeterminate, props.defaultIndeterminate), isIndeterminate = _c3[0], setIsIndeterminate = _c3[1];
    useFocusRects(rootRef);
    useDebugWarning(props);
    var classNames2 = getClassNames8(styles2, {
      theme,
      className,
      disabled,
      indeterminate: isIndeterminate,
      checked: isChecked,
      reversed: boxSide !== "start",
      isUsingCustomLabelRender: !!props.onRenderLabel
    });
    var onChange = React52.useCallback(function(event) {
      if (isIndeterminate) {
        setIsChecked(!!isChecked, event);
        setIsIndeterminate(false);
      } else {
        setIsChecked(!isChecked, event);
      }
    }, [setIsChecked, setIsIndeterminate, isIndeterminate, isChecked]);
    var defaultLabelRenderer = React52.useCallback(function(checkboxProps) {
      if (!checkboxProps) {
        return null;
      }
      return checkboxProps.label ? React52.createElement("span", { className: classNames2.text, title: checkboxProps.title }, checkboxProps.label) : null;
    }, [classNames2.text]);
    var setNativeIndeterminate = React52.useCallback(function(indeterminate) {
      if (!inputRef.current) {
        return;
      }
      var value = !!indeterminate;
      inputRef.current.indeterminate = value;
      setIsIndeterminate(value);
    }, [setIsIndeterminate]);
    useComponentRef2(props, isChecked, isIndeterminate, setNativeIndeterminate, inputRef);
    React52.useEffect(function() {
      return setNativeIndeterminate(isIndeterminate);
    }, [setNativeIndeterminate, isIndeterminate]);
    var onRenderLabel = props.onRenderLabel || defaultLabelRenderer;
    var ariaChecked = isIndeterminate ? "mixed" : void 0;
    var mergedInputProps = __assign(__assign({ className: classNames2.input, type: "checkbox" }, inputProps), { checked: !!isChecked, disabled, required, name, id, title, onChange, "aria-disabled": disabled, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, "aria-posinset": ariaPositionInSet, "aria-setsize": ariaSetSize, "aria-checked": ariaChecked });
    return React52.createElement(
      "div",
      { className: classNames2.root, title, ref: mergedRootRefs },
      React52.createElement("input", __assign({}, mergedInputProps, { ref: inputRef, title, "data-ktp-execute-target": true })),
      React52.createElement(
        "label",
        { className: classNames2.label, htmlFor: id },
        React52.createElement(
          "div",
          { className: classNames2.checkbox, "data-ktp-target": true },
          React52.createElement(Icon, __assign({ iconName: "CheckMark" }, checkmarkIconProps, { className: classNames2.checkmark }))
        ),
        onRenderLabel(props, defaultLabelRenderer)
      )
    );
  });
  CheckboxBase.displayName = "CheckboxBase";
  function useDebugWarning(props) {
    if (true) {
      useWarnings({
        name: "Checkbox",
        props,
        mutuallyExclusive: {
          checked: "defaultChecked",
          indeterminate: "defaultIndeterminate"
        }
      });
    }
  }
  function useComponentRef2(props, isChecked, isIndeterminate, setIndeterminate, checkBoxRef) {
    React52.useImperativeHandle(props.componentRef, function() {
      return {
        get checked() {
          return !!isChecked;
        },
        get indeterminate() {
          return !!isIndeterminate;
        },
        set indeterminate(indeterminate) {
          setIndeterminate(indeterminate);
        },
        focus: function() {
          if (checkBoxRef.current) {
            checkBoxRef.current.focus();
          }
        }
      };
    }, [checkBoxRef, isChecked, isIndeterminate, setIndeterminate]);
  }

  // ../node_modules/@fluentui/react/lib/components/Checkbox/Checkbox.styles.js
  var GlobalClassNames7 = {
    root: "ms-Checkbox",
    label: "ms-Checkbox-label",
    checkbox: "ms-Checkbox-checkbox",
    checkmark: "ms-Checkbox-checkmark",
    text: "ms-Checkbox-text"
  };
  var MS_CHECKBOX_LABEL_SIZE = "20px";
  var MS_CHECKBOX_TRANSITION_DURATION = "200ms";
  var MS_CHECKBOX_TRANSITION_TIMING = "cubic-bezier(.4, 0, .23, 1)";
  var getStyles13 = function(props) {
    var _a7, _b3, _c3, _d3, _e2, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t2;
    var className = props.className, theme = props.theme, reversed = props.reversed, checked = props.checked, disabled = props.disabled, isUsingCustomLabelRender = props.isUsingCustomLabelRender, indeterminate = props.indeterminate;
    var semanticColors = theme.semanticColors, effects = theme.effects, palette = theme.palette, fonts = theme.fonts;
    var classNames2 = getGlobalClassNames(GlobalClassNames7, theme);
    var checkmarkFontColor = semanticColors.inputForegroundChecked;
    var checkmarkFontColorHovered = palette.neutralSecondary;
    var checkboxBorderColor = palette.neutralPrimary;
    var checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;
    var checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;
    var checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;
    var checkboxBorderHoveredColor = semanticColors.inputBorderHovered;
    var checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;
    var checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;
    var checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;
    var checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;
    var checkboxHoveredTextColor = semanticColors.inputTextHovered;
    var checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;
    var checkboxTextColor = semanticColors.bodyText;
    var checkboxTextColorDisabled = semanticColors.disabledText;
    var indeterminateDotStyles = [
      (_a7 = {
        content: '""',
        borderRadius: effects.roundedCorner2,
        position: "absolute",
        width: 10,
        height: 10,
        top: 4,
        left: 4,
        boxSizing: "border-box",
        borderWidth: 5,
        borderStyle: "solid",
        borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,
        transitionProperty: "border-width, border, border-color",
        transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,
        transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING
      }, _a7[HighContrastSelector] = {
        borderColor: "WindowText"
      }, _a7)
    ];
    return {
      root: [
        classNames2.root,
        {
          position: "relative",
          display: "flex"
        },
        reversed && "reversed",
        checked && "is-checked",
        !disabled && "is-enabled",
        disabled && "is-disabled",
        !disabled && [
          !checked && (_b3 = {}, _b3[":hover .".concat(classNames2.checkbox)] = (_c3 = {
            borderColor: checkboxBorderHoveredColor
          }, _c3[HighContrastSelector] = {
            borderColor: "Highlight"
          }, _c3), _b3[":focus .".concat(classNames2.checkbox)] = { borderColor: checkboxBorderHoveredColor }, _b3[":hover .".concat(classNames2.checkmark)] = (_d3 = {
            color: checkmarkFontColorHovered,
            opacity: "1"
          }, _d3[HighContrastSelector] = {
            color: "Highlight"
          }, _d3), _b3),
          checked && !indeterminate && (_e2 = {}, _e2[":hover .".concat(classNames2.checkbox)] = {
            background: checkboxBackgroundCheckedHovered,
            borderColor: checkboxBorderColorCheckedHovered
          }, _e2[":focus .".concat(classNames2.checkbox)] = {
            background: checkboxBackgroundCheckedHovered,
            borderColor: checkboxBorderColorCheckedHovered
          }, _e2[HighContrastSelector] = (_f = {}, _f[":hover .".concat(classNames2.checkbox)] = {
            background: "Highlight",
            borderColor: "Highlight"
          }, _f[":focus .".concat(classNames2.checkbox)] = {
            background: "Highlight"
          }, _f[":focus:hover .".concat(classNames2.checkbox)] = {
            background: "Highlight"
          }, _f[":focus:hover .".concat(classNames2.checkmark)] = {
            color: "Window"
          }, _f[":hover .".concat(classNames2.checkmark)] = {
            color: "Window"
          }, _f), _e2),
          indeterminate && (_g = {}, _g[":hover .".concat(classNames2.checkbox, ", :hover .").concat(classNames2.checkbox, ":after")] = (_h = {
            borderColor: checkboxBorderIndeterminateHoveredColor
          }, _h[HighContrastSelector] = {
            borderColor: "WindowText"
          }, _h), _g[":focus .".concat(classNames2.checkbox)] = {
            borderColor: checkboxBorderIndeterminateHoveredColor
          }, _g[":hover .".concat(classNames2.checkmark)] = {
            opacity: "0"
          }, _g),
          (_j = {}, _j[":hover .".concat(classNames2.text, ", :focus .").concat(classNames2.text)] = (_k = {
            color: checkboxHoveredTextColor
          }, _k[HighContrastSelector] = {
            color: disabled ? "GrayText" : "WindowText"
          }, _k), _j)
        ],
        className
      ],
      input: (_l = {
        position: "absolute",
        background: "none",
        opacity: 0
      }, _l[".".concat(IsFocusVisibleClassName, " &:focus + label::before")] = (_m = {
        outline: "1px solid " + theme.palette.neutralSecondary,
        outlineOffset: "2px"
      }, _m[HighContrastSelector] = {
        outline: "1px solid WindowText"
      }, _m), _l),
      label: [
        classNames2.label,
        theme.fonts.medium,
        {
          display: "flex",
          alignItems: isUsingCustomLabelRender ? "center" : "flex-start",
          cursor: disabled ? "default" : "pointer",
          position: "relative",
          userSelect: "none"
        },
        reversed && {
          flexDirection: "row-reverse",
          justifyContent: "flex-end"
        },
        {
          "&::before": {
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            content: '""',
            pointerEvents: "none"
          }
        }
      ],
      checkbox: [
        classNames2.checkbox,
        (_o = {
          position: "relative",
          display: "flex",
          flexShrink: 0,
          alignItems: "center",
          justifyContent: "center",
          height: MS_CHECKBOX_LABEL_SIZE,
          width: MS_CHECKBOX_LABEL_SIZE,
          border: "1px solid ".concat(checkboxBorderColor),
          borderRadius: effects.roundedCorner2,
          boxSizing: "border-box",
          transitionProperty: "background, border, border-color",
          transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,
          transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,
          /* in case the icon is bigger than the box */
          overflow: "hidden",
          ":after": indeterminate ? indeterminateDotStyles : null
        }, _o[HighContrastSelector] = __assign({ borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _o),
        indeterminate && {
          borderColor: checkboxBorderIndeterminateColor
        },
        !reversed ? (
          // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender
          // is used, there will be only a 4px margin from checkbox to label. The label by default would have
          // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two
          // (and move it into the text) to not incur a breaking change for everyone using custom render atm.
          {
            marginRight: 4
          }
        ) : {
          marginLeft: 4
        },
        !disabled && !indeterminate && checked && (_p = {
          background: checkboxBackgroundChecked,
          borderColor: checkboxBorderColorChecked
        }, _p[HighContrastSelector] = {
          background: "Highlight",
          borderColor: "Highlight"
        }, _p),
        disabled && (_q = {
          borderColor: checkboxBorderColorDisabled
        }, _q[HighContrastSelector] = {
          borderColor: "GrayText"
        }, _q),
        checked && disabled && (_r = {
          background: checkboxBackgroundDisabledChecked,
          borderColor: checkboxBorderColorDisabled
        }, _r[HighContrastSelector] = {
          background: "Window"
        }, _r)
      ],
      checkmark: [
        classNames2.checkmark,
        (_s = {
          opacity: checked && !indeterminate ? "1" : "0",
          color: checkmarkFontColor
        }, _s[HighContrastSelector] = __assign({ color: disabled ? "GrayText" : "Window" }, getHighContrastNoAdjustStyle()), _s)
      ],
      text: [
        classNames2.text,
        (_t2 = {
          color: disabled ? checkboxTextColorDisabled : checkboxTextColor,
          fontSize: fonts.medium.fontSize,
          lineHeight: "20px"
        }, _t2[HighContrastSelector] = __assign({ color: disabled ? "GrayText" : "WindowText" }, getHighContrastNoAdjustStyle()), _t2),
        !reversed ? {
          marginLeft: 4
        } : {
          marginRight: 4
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Checkbox/Checkbox.js
  var Checkbox = styled(CheckboxBase, getStyles13, void 0, { scope: "Checkbox" });

  // ../node_modules/@fluentui/react/lib/components/Label/Label.base.js
  var React53 = __toESM(require_react());
  var getClassNames9 = classNamesFunction({
    // Label is used a lot by other components.
    // It's likely to see expected cases which pass different className to the Label.
    // Therefore setting a larger cache size.
    cacheSize: 100
  });
  var LabelBase = (
    /** @class */
    function(_super) {
      __extends(LabelBase2, _super);
      function LabelBase2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      LabelBase2.prototype.render = function() {
        var _a7 = this.props, _b3 = _a7.as, RootType = _b3 === void 0 ? "label" : _b3, children = _a7.children, className = _a7.className, disabled = _a7.disabled, styles2 = _a7.styles, required = _a7.required, theme = _a7.theme;
        var classNames2 = getClassNames9(styles2, {
          className,
          disabled,
          required,
          theme
        });
        return React53.createElement(RootType, __assign({}, getNativeProps(this.props, divProperties), { className: classNames2.root }), children);
      };
      return LabelBase2;
    }(React53.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Label/Label.styles.js
  var getStyles14 = function(props) {
    var _a7;
    var theme = props.theme, className = props.className, disabled = props.disabled, required = props.required;
    var semanticColors = theme.semanticColors;
    var labelFontWeight = FontWeights.semibold;
    var labelColor = semanticColors.bodyText;
    var labelDisabledColor = semanticColors.disabledBodyText;
    var labelRequiredStarColor = semanticColors.errorText;
    return {
      root: [
        "ms-Label",
        theme.fonts.medium,
        {
          fontWeight: labelFontWeight,
          color: labelColor,
          boxSizing: "border-box",
          boxShadow: "none",
          margin: 0,
          display: "block",
          padding: "5px 0",
          wordWrap: "break-word",
          overflowWrap: "break-word"
        },
        disabled && {
          color: labelDisabledColor,
          selectors: (_a7 = {}, _a7[HighContrastSelector] = __assign({ color: "GrayText" }, getHighContrastNoAdjustStyle()), _a7)
        },
        required && {
          selectors: {
            "::after": {
              content: "' *'",
              color: labelRequiredStarColor,
              paddingRight: 12
            }
          }
        },
        className
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Label/Label.js
  var Label = styled(LabelBase, getStyles14, void 0, {
    scope: "Label"
  });

  // ../node_modules/@fluentui/react/lib/components/TextField/TextField.base.js
  var React54 = __toESM(require_react());
  var getClassNames10 = classNamesFunction();
  var DEFAULT_STATE_VALUE = "";
  var COMPONENT_NAME5 = "TextField";
  var REVEAL_ICON_NAME = "RedEye";
  var HIDE_ICON_NAME = "Hide";
  var TextFieldBase = (
    /** @class */
    function(_super) {
      __extends(TextFieldBase2, _super);
      function TextFieldBase2(props) {
        var _this = _super.call(this, props) || this;
        _this._textElement = React54.createRef();
        _this._onFocus = function(ev) {
          if (_this.props.onFocus) {
            _this.props.onFocus(ev);
          }
          _this.setState({ isFocused: true }, function() {
            if (_this.props.validateOnFocusIn) {
              _this._validate(_this.value);
            }
          });
        };
        _this._onBlur = function(ev) {
          if (_this.props.onBlur) {
            _this.props.onBlur(ev);
          }
          _this.setState({ isFocused: false }, function() {
            if (_this.props.validateOnFocusOut) {
              _this._validate(_this.value);
            }
          });
        };
        _this._onRenderLabel = function(props2) {
          var label = props2.label, required = props2.required;
          var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : void 0;
          if (label) {
            return React54.createElement(Label, { required, htmlFor: _this._id, styles: labelStyles, disabled: props2.disabled, id: _this._labelId }, props2.label);
          }
          return null;
        };
        _this._onRenderDescription = function(props2) {
          if (props2.description) {
            return React54.createElement("span", { className: _this._classNames.description }, props2.description);
          }
          return null;
        };
        _this._onRevealButtonClick = function(event) {
          _this.setState(function(prevState) {
            return { isRevealingPassword: !prevState.isRevealingPassword };
          });
        };
        _this._onInputChange = function(event) {
          var _a8, _b3;
          var element = event.target;
          var value = element.value;
          var previousValue = _getValue(_this.props, _this.state) || "";
          if (value === void 0 || value === _this._lastChangeValue || value === previousValue) {
            _this._lastChangeValue = void 0;
            return;
          }
          _this._lastChangeValue = value;
          (_b3 = (_a8 = _this.props).onChange) === null || _b3 === void 0 ? void 0 : _b3.call(_a8, event, value);
          if (!_this._isControlled) {
            _this.setState({ uncontrolledValue: value });
          }
        };
        initializeComponentRef(_this);
        _this._async = new Async(_this);
        if (true) {
          warnMutuallyExclusive(COMPONENT_NAME5, props, {
            errorMessage: "onGetErrorMessage"
          });
        }
        _this._fallbackId = getId(COMPONENT_NAME5);
        _this._descriptionId = getId(COMPONENT_NAME5 + "Description");
        _this._labelId = getId(COMPONENT_NAME5 + "Label");
        _this._prefixId = getId(COMPONENT_NAME5 + "Prefix");
        _this._suffixId = getId(COMPONENT_NAME5 + "Suffix");
        _this._warnControlledUsage();
        var _a7 = props.defaultValue, defaultValue = _a7 === void 0 ? DEFAULT_STATE_VALUE : _a7;
        if (typeof defaultValue === "number") {
          defaultValue = String(defaultValue);
        }
        _this.state = {
          uncontrolledValue: _this._isControlled ? void 0 : defaultValue,
          isFocused: false,
          errorMessage: ""
        };
        _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);
        _this._lastValidation = 0;
        return _this;
      }
      Object.defineProperty(TextFieldBase2.prototype, "value", {
        /**
         * Gets the current value of the text field.
         */
        get: function() {
          return _getValue(this.props, this.state);
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype.componentDidMount = function() {
        this._adjustInputHeight();
        if (this.props.validateOnLoad) {
          this._validate(this.value);
        }
      };
      TextFieldBase2.prototype.componentWillUnmount = function() {
        this._async.dispose();
      };
      TextFieldBase2.prototype.getSnapshotBeforeUpdate = function(prevProps, prevState) {
        return {
          selection: [this.selectionStart, this.selectionEnd]
        };
      };
      TextFieldBase2.prototype.componentDidUpdate = function(prevProps, prevState, snapshot) {
        var props = this.props;
        var _a7 = (snapshot || {}).selection, selection = _a7 === void 0 ? [null, null] : _a7;
        var start = selection[0], end = selection[1];
        if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {
          this.focus();
          if (start !== null && end !== null && start >= 0 && end >= 0) {
            this.setSelectionRange(start, end);
          }
        }
        if (prevProps.value !== props.value) {
          this._lastChangeValue = void 0;
        }
        var prevValue = _getValue(prevProps, prevState);
        var value = this.value;
        if (prevValue !== value) {
          this._warnControlledUsage(prevProps);
          if (this.state.errorMessage && !props.errorMessage) {
            this.setState({ errorMessage: "" });
          }
          this._adjustInputHeight();
          if (_shouldValidateAllChanges(props)) {
            this._delayedValidate(value);
          }
        }
      };
      TextFieldBase2.prototype.render = function() {
        var _a7 = this.props, borderless = _a7.borderless, className = _a7.className, disabled = _a7.disabled, invalid = _a7.invalid, iconProps = _a7.iconProps, inputClassName = _a7.inputClassName, label = _a7.label, multiline = _a7.multiline, required = _a7.required, underlined = _a7.underlined, prefix = _a7.prefix, resizable = _a7.resizable, suffix = _a7.suffix, theme = _a7.theme, styles2 = _a7.styles, autoAdjustHeight = _a7.autoAdjustHeight, canRevealPassword = _a7.canRevealPassword, revealPasswordAriaLabel = _a7.revealPasswordAriaLabel, type = _a7.type, _b3 = _a7.onRenderPrefix, onRenderPrefix = _b3 === void 0 ? this._onRenderPrefix : _b3, _c3 = _a7.onRenderSuffix, onRenderSuffix = _c3 === void 0 ? this._onRenderSuffix : _c3, _d3 = _a7.onRenderLabel, onRenderLabel = _d3 === void 0 ? this._onRenderLabel : _d3, _e2 = _a7.onRenderDescription, onRenderDescription = _e2 === void 0 ? this._onRenderDescription : _e2;
        var _f = this.state, isFocused = _f.isFocused, isRevealingPassword = _f.isRevealingPassword;
        var errorMessage = this._errorMessage;
        var isInvalid = typeof invalid === "boolean" ? invalid : !!errorMessage;
        var hasRevealButton = !!canRevealPassword && type === "password" && _browserNeedsRevealButton();
        var classNames2 = this._classNames = getClassNames10(styles2, {
          theme,
          className,
          disabled,
          focused: isFocused,
          required,
          multiline,
          hasLabel: !!label,
          hasErrorMessage: isInvalid,
          borderless,
          resizable,
          hasIcon: !!iconProps,
          underlined,
          inputClassName,
          autoAdjustHeight,
          hasRevealButton
        });
        return (
          // eslint-disable-next-line deprecation/deprecation
          React54.createElement(
            "div",
            { ref: this.props.elementRef, className: classNames2.root },
            React54.createElement(
              "div",
              { className: classNames2.wrapper },
              onRenderLabel(this.props, this._onRenderLabel),
              React54.createElement(
                "div",
                { className: classNames2.fieldGroup },
                (prefix !== void 0 || this.props.onRenderPrefix) && React54.createElement("div", { className: classNames2.prefix, id: this._prefixId }, onRenderPrefix(this.props, this._onRenderPrefix)),
                multiline ? this._renderTextArea() : this._renderInput(),
                iconProps && React54.createElement(Icon, __assign({ className: classNames2.icon }, iconProps)),
                hasRevealButton && // Explicitly set type="button" since the default button type within a form is "submit"
                React54.createElement(
                  "button",
                  { "aria-label": revealPasswordAriaLabel, className: classNames2.revealButton, onClick: this._onRevealButtonClick, "aria-pressed": !!isRevealingPassword, type: "button" },
                  React54.createElement(
                    "span",
                    { className: classNames2.revealSpan },
                    React54.createElement(Icon, { className: classNames2.revealIcon, iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME })
                  )
                ),
                (suffix !== void 0 || this.props.onRenderSuffix) && React54.createElement("div", { className: classNames2.suffix, id: this._suffixId }, onRenderSuffix(this.props, this._onRenderSuffix))
              )
            ),
            this._isDescriptionAvailable && React54.createElement(
              "span",
              { id: this._descriptionId },
              onRenderDescription(this.props, this._onRenderDescription),
              errorMessage && React54.createElement(
                "div",
                { role: "alert" },
                React54.createElement(DelayedRender, null, this._renderErrorMessage())
              )
            )
          )
        );
      };
      TextFieldBase2.prototype.focus = function() {
        if (this._textElement.current) {
          this._textElement.current.focus();
        }
      };
      TextFieldBase2.prototype.blur = function() {
        if (this._textElement.current) {
          this._textElement.current.blur();
        }
      };
      TextFieldBase2.prototype.select = function() {
        if (this._textElement.current) {
          this._textElement.current.select();
        }
      };
      TextFieldBase2.prototype.setSelectionStart = function(value) {
        if (this._textElement.current) {
          this._textElement.current.selectionStart = value;
        }
      };
      TextFieldBase2.prototype.setSelectionEnd = function(value) {
        if (this._textElement.current) {
          this._textElement.current.selectionEnd = value;
        }
      };
      Object.defineProperty(TextFieldBase2.prototype, "selectionStart", {
        /**
         * Gets the selection start of the text field
         */
        get: function() {
          return this._textElement.current ? this._textElement.current.selectionStart : -1;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextFieldBase2.prototype, "selectionEnd", {
        /**
         * Gets the selection end of the text field
         */
        get: function() {
          return this._textElement.current ? this._textElement.current.selectionEnd : -1;
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype.setSelectionRange = function(start, end) {
        if (this._textElement.current) {
          this._textElement.current.setSelectionRange(start, end);
        }
      };
      TextFieldBase2.prototype._warnControlledUsage = function(prevProps) {
        warnControlledUsage({
          componentId: this._id,
          componentName: COMPONENT_NAME5,
          props: this.props,
          oldProps: prevProps,
          valueProp: "value",
          defaultValueProp: "defaultValue",
          onChangeProp: "onChange",
          readOnlyProp: "readOnly"
        });
        if (this.props.value === null && !this._hasWarnedNullValue) {
          this._hasWarnedNullValue = true;
          warn("Warning: 'value' prop on '".concat(COMPONENT_NAME5, "' should not be null. Consider using an ") + "empty string to clear the component or undefined to indicate an uncontrolled component.");
        }
      };
      Object.defineProperty(TextFieldBase2.prototype, "_id", {
        /** Returns `props.id` if available, or a fallback if not. */
        get: function() {
          return this.props.id || this._fallbackId;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextFieldBase2.prototype, "_isControlled", {
        get: function() {
          return isControlled(this.props, "value");
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype._onRenderPrefix = function(props) {
        var prefix = props.prefix;
        return React54.createElement("span", { style: { paddingBottom: "1px" } }, prefix);
      };
      TextFieldBase2.prototype._onRenderSuffix = function(props) {
        var suffix = props.suffix;
        return React54.createElement("span", { style: { paddingBottom: "1px" } }, suffix);
      };
      Object.defineProperty(TextFieldBase2.prototype, "_errorMessage", {
        /**
         * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.
         *
         * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.
         * - If we have done the validation and there is validation error, errorMessage is the validation error message.
         */
        get: function() {
          var _a7 = this.props.errorMessage, errorMessage = _a7 === void 0 ? this.state.errorMessage : _a7;
          return errorMessage || "";
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype._renderErrorMessage = function() {
        var errorMessage = this._errorMessage;
        return errorMessage ? typeof errorMessage === "string" ? React54.createElement(
          "p",
          { className: this._classNames.errorMessage },
          React54.createElement("span", { "data-automation-id": "error-message" }, errorMessage)
        ) : React54.createElement("div", { className: this._classNames.errorMessage, "data-automation-id": "error-message" }, errorMessage) : null;
      };
      Object.defineProperty(TextFieldBase2.prototype, "_isDescriptionAvailable", {
        /**
         * If a custom description render function is supplied then treat description as always available.
         * Otherwise defer to the presence of description or error message text.
         */
        get: function() {
          var props = this.props;
          return !!(props.onRenderDescription || props.description || this._errorMessage);
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype._renderTextArea = function() {
        var _a7 = this.props.invalid, invalid = _a7 === void 0 ? !!this._errorMessage : _a7;
        var textAreaProps = getNativeProps(this.props, textAreaProperties, ["defaultValue"]);
        var ariaLabelledBy = this.props["aria-labelledby"] || (this.props.label ? this._labelId : void 0);
        return React54.createElement("textarea", __assign({ id: this._id }, textAreaProps, { ref: this._textElement, value: this.value || "", onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, "aria-labelledby": ariaLabelledBy, "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : this.props["aria-describedby"], "aria-invalid": invalid, "aria-label": this.props.ariaLabel, readOnly: this.props.readOnly, onFocus: this._onFocus, onBlur: this._onBlur }));
      };
      TextFieldBase2.prototype._renderInput = function() {
        var _a7 = this.props, ariaLabel = _a7.ariaLabel, _b3 = _a7.invalid, invalid = _b3 === void 0 ? !!this._errorMessage : _b3, onRenderPrefix = _a7.onRenderPrefix, onRenderSuffix = _a7.onRenderSuffix, prefix = _a7.prefix, suffix = _a7.suffix, _c3 = _a7.type, type = _c3 === void 0 ? "text" : _c3, label = _a7.label;
        var labelIds = [];
        label && labelIds.push(this._labelId);
        (prefix !== void 0 || onRenderPrefix) && labelIds.push(this._prefixId);
        (suffix !== void 0 || onRenderSuffix) && labelIds.push(this._suffixId);
        var inputProps = __assign(__assign({ type: this.state.isRevealingPassword ? "text" : type, id: this._id }, getNativeProps(this.props, inputProperties, ["defaultValue", "type"])), { "aria-labelledby": this.props["aria-labelledby"] || (labelIds.length > 0 ? labelIds.join(" ") : void 0), ref: this._textElement, value: this.value || "", onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, "aria-label": ariaLabel, "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : this.props["aria-describedby"], "aria-invalid": invalid, onFocus: this._onFocus, onBlur: this._onBlur });
        var defaultRender = function(updatedInputProps) {
          return React54.createElement("input", __assign({}, updatedInputProps));
        };
        var onRenderInput = this.props.onRenderInput || defaultRender;
        return onRenderInput(inputProps, defaultRender);
      };
      TextFieldBase2.prototype._validate = function(value) {
        var _this = this;
        if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {
          return;
        }
        this._latestValidateValue = value;
        var onGetErrorMessage = this.props.onGetErrorMessage;
        var result = onGetErrorMessage && onGetErrorMessage(value || "");
        if (result !== void 0) {
          if (typeof result === "string" || !("then" in result)) {
            this.setState({ errorMessage: result });
            this._notifyAfterValidate(value, result);
          } else {
            var currentValidation_1 = ++this._lastValidation;
            result.then(function(errorMessage) {
              if (currentValidation_1 === _this._lastValidation) {
                _this.setState({ errorMessage });
              }
              _this._notifyAfterValidate(value, errorMessage);
            });
          }
        } else {
          this._notifyAfterValidate(value, "");
        }
      };
      TextFieldBase2.prototype._notifyAfterValidate = function(value, errorMessage) {
        if (value === this.value && this.props.onNotifyValidationResult) {
          this.props.onNotifyValidationResult(errorMessage, value);
        }
      };
      TextFieldBase2.prototype._adjustInputHeight = function() {
        if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {
          var textField = this._textElement.current;
          textField.style.height = "";
          textField.style.height = textField.scrollHeight + "px";
        }
      };
      TextFieldBase2.defaultProps = {
        resizable: true,
        deferredValidationTime: 200,
        validateOnLoad: true
      };
      return TextFieldBase2;
    }(React54.Component)
  );
  function _getValue(props, state) {
    var _a7 = props.value, value = _a7 === void 0 ? state.uncontrolledValue : _a7;
    if (typeof value === "number") {
      return String(value);
    }
    return value;
  }
  function _shouldValidateAllChanges(props) {
    return !(props.validateOnFocusIn || props.validateOnFocusOut);
  }
  var __browserNeedsRevealButton;
  function _browserNeedsRevealButton() {
    if (typeof __browserNeedsRevealButton !== "boolean") {
      var win2 = getWindow();
      if (win2 === null || win2 === void 0 ? void 0 : win2.navigator) {
        var isEdge = /Edg/.test(win2.navigator.userAgent || "");
        __browserNeedsRevealButton = !(isIE11() || isEdge);
      } else {
        __browserNeedsRevealButton = true;
      }
    }
    return __browserNeedsRevealButton;
  }

  // ../node_modules/@fluentui/react/lib/components/TextField/TextField.styles.js
  var globalClassNames = {
    root: "ms-TextField",
    description: "ms-TextField-description",
    errorMessage: "ms-TextField-errorMessage",
    field: "ms-TextField-field",
    fieldGroup: "ms-TextField-fieldGroup",
    prefix: "ms-TextField-prefix",
    suffix: "ms-TextField-suffix",
    wrapper: "ms-TextField-wrapper",
    revealButton: "ms-TextField-reveal",
    multiline: "ms-TextField--multiline",
    borderless: "ms-TextField--borderless",
    underlined: "ms-TextField--underlined",
    unresizable: "ms-TextField--unresizable",
    required: "is-required",
    disabled: "is-disabled",
    active: "is-active"
  };
  function getLabelStyles(props) {
    var underlined = props.underlined, disabled = props.disabled, focused = props.focused, theme = props.theme;
    var palette = theme.palette, fonts = theme.fonts;
    return function() {
      var _a7;
      return {
        root: [
          underlined && disabled && {
            color: palette.neutralTertiary
          },
          underlined && {
            fontSize: fonts.medium.fontSize,
            marginRight: 8,
            paddingLeft: 12,
            paddingRight: 0,
            lineHeight: "22px",
            height: 32
          },
          underlined && focused && {
            selectors: (_a7 = {}, _a7[HighContrastSelector] = {
              height: 31
              // -1px to prevent jumpiness in HC with the increased border-width to 2px
            }, _a7)
          }
        ]
      };
    };
  }
  function getStyles15(props) {
    var _a7, _b3, _c3, _d3, _e2, _f, _g, _h, _j, _k, _l, _m;
    var theme = props.theme, className = props.className, disabled = props.disabled, focused = props.focused, required = props.required, multiline = props.multiline, hasLabel = props.hasLabel, borderless = props.borderless, underlined = props.underlined, hasIcon = props.hasIcon, resizable = props.resizable, hasErrorMessage = props.hasErrorMessage, inputClassName = props.inputClassName, autoAdjustHeight = props.autoAdjustHeight, hasRevealButton = props.hasRevealButton;
    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
    var classNames2 = getGlobalClassNames(globalClassNames, theme);
    var fieldPrefixSuffix = {
      // Suffix/Prefix are not editable so the disabled slot perfectly fits.
      background: semanticColors.disabledBackground,
      color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,
      display: "flex",
      alignItems: "center",
      padding: "0 10px",
      lineHeight: 1,
      whiteSpace: "nowrap",
      flexShrink: 0,
      selectors: (_a7 = {}, _a7[HighContrastSelector] = {
        background: "Window",
        color: disabled ? "GrayText" : "WindowText"
      }, _a7)
    };
    var placeholderStyles = [
      {
        color: semanticColors.inputPlaceholderText,
        opacity: 1,
        selectors: (_b3 = {}, _b3[HighContrastSelector] = {
          color: "GrayText"
        }, _b3)
      }
    ];
    var disabledPlaceholderStyles = {
      color: semanticColors.disabledText,
      selectors: (_c3 = {}, _c3[HighContrastSelector] = {
        color: "GrayText"
      }, _c3)
    };
    return {
      root: [
        classNames2.root,
        fonts.medium,
        required && classNames2.required,
        disabled && classNames2.disabled,
        focused && classNames2.active,
        multiline && classNames2.multiline,
        borderless && classNames2.borderless,
        underlined && classNames2.underlined,
        normalize,
        {
          position: "relative"
        },
        className
      ],
      wrapper: [
        classNames2.wrapper,
        underlined && [
          {
            display: "flex",
            borderBottom: "1px solid ".concat(!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText),
            width: "100%"
          },
          disabled && {
            borderBottomColor: semanticColors.disabledBackground,
            selectors: (_d3 = {}, _d3[HighContrastSelector] = __assign({ borderColor: "GrayText" }, getHighContrastNoAdjustStyle()), _d3)
          },
          !disabled && {
            selectors: {
              ":hover": {
                borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,
                selectors: (_e2 = {}, _e2[HighContrastSelector] = __assign({ borderBottomColor: "Highlight" }, getHighContrastNoAdjustStyle()), _e2)
              }
            }
          },
          focused && [
            {
              position: "relative"
            },
            getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, 0, "borderBottom")
          ]
        ]
      ],
      fieldGroup: [
        classNames2.fieldGroup,
        normalize,
        {
          border: "1px solid ".concat(semanticColors.inputBorder),
          borderRadius: effects.roundedCorner2,
          background: semanticColors.inputBackground,
          cursor: "text",
          height: 32,
          display: "flex",
          flexDirection: "row",
          alignItems: "stretch",
          position: "relative"
        },
        multiline && {
          minHeight: "60px",
          height: "auto",
          display: "flex"
        },
        !focused && !disabled && {
          selectors: {
            ":hover": {
              borderColor: semanticColors.inputBorderHovered,
              selectors: (_f = {}, _f[HighContrastSelector] = __assign({ borderColor: "Highlight" }, getHighContrastNoAdjustStyle()), _f)
            }
          }
        },
        focused && !underlined && getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, effects.roundedCorner2),
        disabled && {
          borderColor: semanticColors.disabledBackground,
          selectors: (_g = {}, _g[HighContrastSelector] = __assign({ borderColor: "GrayText" }, getHighContrastNoAdjustStyle()), _g),
          cursor: "default"
        },
        borderless && {
          border: "none"
        },
        borderless && focused && {
          border: "none",
          selectors: {
            ":after": {
              border: "none"
            }
          }
        },
        underlined && {
          flex: "1 1 0px",
          border: "none",
          textAlign: "left"
        },
        underlined && disabled && {
          backgroundColor: "transparent"
        },
        hasErrorMessage && !underlined && {
          borderColor: semanticColors.errorText,
          selectors: {
            "&:hover": {
              borderColor: semanticColors.errorText
            }
          }
        },
        !hasLabel && required && {
          selectors: (_h = {
            ":before": {
              content: "'*'",
              color: semanticColors.errorText,
              position: "absolute",
              top: -5,
              right: -10
            }
          }, _h[HighContrastSelector] = {
            selectors: {
              ":before": {
                color: "WindowText",
                right: -14
                // moving the * 4 pixel to right to alleviate border clipping in HC mode.
              }
            }
          }, _h)
        }
      ],
      field: [
        fonts.medium,
        classNames2.field,
        normalize,
        {
          borderRadius: 0,
          border: "none",
          background: "none",
          backgroundColor: "transparent",
          color: semanticColors.inputText,
          padding: "0 8px",
          width: "100%",
          minWidth: 0,
          textOverflow: "ellipsis",
          outline: 0,
          selectors: (_j = {
            "&:active, &:focus, &:hover": { outline: 0 },
            "::-ms-clear": {
              display: "none"
            }
          }, _j[HighContrastSelector] = {
            background: "Window",
            color: disabled ? "GrayText" : "WindowText"
          }, _j)
        },
        getPlaceholderStyles(placeholderStyles),
        multiline && !resizable && [
          classNames2.unresizable,
          {
            resize: "none"
          }
        ],
        multiline && {
          minHeight: "inherit",
          lineHeight: 17,
          flexGrow: 1,
          paddingTop: 6,
          paddingBottom: 6,
          overflow: "auto",
          width: "100%"
        },
        multiline && autoAdjustHeight && {
          overflow: "hidden"
        },
        hasIcon && !hasRevealButton && {
          paddingRight: 24
        },
        multiline && hasIcon && {
          paddingRight: 40
        },
        disabled && [
          {
            backgroundColor: semanticColors.disabledBackground,
            color: semanticColors.disabledText,
            borderColor: semanticColors.disabledBackground
          },
          getPlaceholderStyles(disabledPlaceholderStyles)
        ],
        underlined && {
          textAlign: "left"
        },
        focused && !borderless && {
          selectors: (_k = {}, _k[HighContrastSelector] = {
            paddingLeft: 11,
            paddingRight: 11
          }, _k)
        },
        focused && multiline && !borderless && {
          selectors: (_l = {}, _l[HighContrastSelector] = {
            paddingTop: 4
            // take into consideration the 2px increased border-width (not when borderless).
          }, _l)
        },
        inputClassName
      ],
      icon: [
        multiline && {
          paddingRight: 24,
          alignItems: "flex-end"
        },
        {
          pointerEvents: "none",
          position: "absolute",
          bottom: 6,
          right: 8,
          top: "auto",
          fontSize: IconFontSizes.medium,
          lineHeight: 18
        },
        disabled && {
          color: semanticColors.disabledText
        }
      ],
      description: [
        classNames2.description,
        {
          color: semanticColors.bodySubtext,
          fontSize: fonts.xSmall.fontSize
        }
      ],
      errorMessage: [
        classNames2.errorMessage,
        AnimationClassNames.slideDownIn20,
        fonts.small,
        {
          color: semanticColors.errorText,
          margin: 0,
          paddingTop: 5,
          display: "flex",
          alignItems: "center"
        }
      ],
      prefix: [classNames2.prefix, fieldPrefixSuffix],
      suffix: [classNames2.suffix, fieldPrefixSuffix],
      revealButton: [
        classNames2.revealButton,
        "ms-Button",
        "ms-Button--icon",
        getFocusStyle(theme, { inset: 1 }),
        {
          height: 30,
          width: 32,
          border: "none",
          padding: "0px 4px",
          backgroundColor: "transparent",
          color: semanticColors.link,
          selectors: {
            ":hover": {
              outline: 0,
              color: semanticColors.primaryButtonBackgroundHovered,
              backgroundColor: semanticColors.buttonBackgroundHovered,
              selectors: (_m = {}, _m[HighContrastSelector] = {
                borderColor: "Highlight",
                color: "Highlight"
              }, _m)
            },
            ":focus": { outline: 0 }
          }
        },
        hasIcon && {
          marginRight: 28
        }
      ],
      revealSpan: {
        display: "flex",
        height: "100%",
        alignItems: "center"
      },
      revealIcon: {
        margin: "0px 4px",
        pointerEvents: "none",
        bottom: 6,
        right: 8,
        top: "auto",
        fontSize: IconFontSizes.medium,
        lineHeight: 18
      },
      subComponentStyles: {
        label: getLabelStyles(props)
      }
    };
  }

  // ../node_modules/@fluentui/react/lib/components/TextField/TextField.js
  var TextField = styled(TextFieldBase, getStyles15, void 0, {
    scope: "TextField"
  });

  // ../node_modules/@fluentui/react/lib/utilities/selectableOption/SelectableOption.js
  function getAllSelectedOptions(options, selectedIndices) {
    var selectedOptions = [];
    for (var _i = 0, selectedIndices_1 = selectedIndices; _i < selectedIndices_1.length; _i++) {
      var index = selectedIndices_1[_i];
      var option = options[index];
      if (option) {
        selectedOptions.push(option);
      }
    }
    return selectedOptions;
  }

  // ../node_modules/@fluentui/react/lib/utilities/selectableOption/SelectableOption.types.js
  var SelectableOptionMenuItemType;
  (function(SelectableOptionMenuItemType2) {
    SelectableOptionMenuItemType2[SelectableOptionMenuItemType2["Normal"] = 0] = "Normal";
    SelectableOptionMenuItemType2[SelectableOptionMenuItemType2["Divider"] = 1] = "Divider";
    SelectableOptionMenuItemType2[SelectableOptionMenuItemType2["Header"] = 2] = "Header";
    SelectableOptionMenuItemType2[SelectableOptionMenuItemType2["SelectAll"] = 3] = "SelectAll";
  })(SelectableOptionMenuItemType || (SelectableOptionMenuItemType = {}));

  // ../node_modules/@fluentui/react/lib/components/Overlay/Overlay.base.js
  var React55 = __toESM(require_react());
  var getClassNames11 = classNamesFunction();
  var OverlayBase = (
    /** @class */
    function(_super) {
      __extends(OverlayBase2, _super);
      function OverlayBase2(props) {
        var _this = _super.call(this, props) || this;
        initializeComponentRef(_this);
        var _a7 = _this.props.allowTouchBodyScroll, allowTouchBodyScroll = _a7 === void 0 ? false : _a7;
        _this._allowTouchBodyScroll = allowTouchBodyScroll;
        return _this;
      }
      OverlayBase2.prototype.componentDidMount = function() {
        !this._allowTouchBodyScroll && disableBodyScroll();
      };
      OverlayBase2.prototype.componentWillUnmount = function() {
        !this._allowTouchBodyScroll && enableBodyScroll();
      };
      OverlayBase2.prototype.render = function() {
        var _a7 = this.props, isDark = _a7.isDarkThemed, className = _a7.className, theme = _a7.theme, styles2 = _a7.styles;
        var divProps = getNativeProps(this.props, divProperties);
        var classNames2 = getClassNames11(styles2, {
          theme,
          className,
          isDark
        });
        return React55.createElement("div", __assign({}, divProps, { className: classNames2.root }));
      };
      return OverlayBase2;
    }(React55.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Overlay/Overlay.styles.js
  var GlobalClassNames8 = {
    root: "ms-Overlay",
    rootDark: "ms-Overlay--dark"
  };
  var getStyles16 = function(props) {
    var _a7;
    var className = props.className, theme = props.theme, isNone = props.isNone, isDark = props.isDark;
    var palette = theme.palette;
    var classNames2 = getGlobalClassNames(GlobalClassNames8, theme);
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          backgroundColor: palette.whiteTranslucent40,
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          position: "absolute",
          selectors: (_a7 = {}, _a7[HighContrastSelector] = {
            border: "1px solid WindowText",
            opacity: 0
          }, _a7)
        },
        isNone && {
          visibility: "hidden"
        },
        isDark && [
          classNames2.rootDark,
          {
            backgroundColor: palette.blackTranslucent40
          }
        ],
        className
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Overlay/Overlay.js
  var Overlay = styled(OverlayBase, getStyles16, void 0, {
    scope: "Overlay"
  });

  // ../node_modules/@fluentui/react/lib/components/Dropdown/Dropdown.base.js
  var React57 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Dropdown/utilities/DropdownSizePosCache.js
  var DropdownSizePosCache = (
    /** @class */
    function() {
      function DropdownSizePosCache2() {
        this._size = 0;
      }
      DropdownSizePosCache2.prototype.updateOptions = function(options) {
        var displayOnlyOptionsCache = [];
        var notSelectableOptionsCache = [];
        var size = 0;
        for (var i2 = 0; i2 < options.length; i2++) {
          var _a7 = options[i2], itemType = _a7.itemType, hidden = _a7.hidden;
          if (itemType === SelectableOptionMenuItemType.Divider || itemType === SelectableOptionMenuItemType.Header) {
            displayOnlyOptionsCache.push(i2);
            notSelectableOptionsCache.push(i2);
          } else if (hidden) {
            notSelectableOptionsCache.push(i2);
          } else {
            size++;
          }
        }
        this._size = size;
        this._displayOnlyOptionsCache = displayOnlyOptionsCache;
        this._notSelectableOptionsCache = notSelectableOptionsCache;
        this._cachedOptions = __spreadArray([], options, true);
      };
      Object.defineProperty(DropdownSizePosCache2.prototype, "optionSetSize", {
        /**
         * The size of all the selectable options.
         */
        get: function() {
          return this._size;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(DropdownSizePosCache2.prototype, "cachedOptions", {
        /**
         * The chached options array.
         */
        get: function() {
          return this._cachedOptions;
        },
        enumerable: false,
        configurable: true
      });
      DropdownSizePosCache2.prototype.positionInSet = function(index) {
        if (index === void 0) {
          return void 0;
        }
        var offset = 0;
        while (index > this._notSelectableOptionsCache[offset]) {
          offset++;
        }
        if (this._displayOnlyOptionsCache[offset] === index) {
          throw new Error("Unexpected: Option at index ".concat(index, " is not a selectable element."));
        }
        if (this._notSelectableOptionsCache[offset] === index) {
          return void 0;
        }
        return index - offset + 1;
      };
      return DropdownSizePosCache2;
    }()
  );

  // ../node_modules/@fluentui/react/lib/components/Panel/Panel.base.js
  var React56 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Panel/Panel.types.js
  var PanelType;
  (function(PanelType2) {
    PanelType2[PanelType2["smallFluid"] = 0] = "smallFluid";
    PanelType2[PanelType2["smallFixedFar"] = 1] = "smallFixedFar";
    PanelType2[PanelType2["smallFixedNear"] = 2] = "smallFixedNear";
    PanelType2[PanelType2["medium"] = 3] = "medium";
    PanelType2[PanelType2["large"] = 4] = "large";
    PanelType2[PanelType2["largeFixed"] = 5] = "largeFixed";
    PanelType2[PanelType2["extraLarge"] = 6] = "extraLarge";
    PanelType2[PanelType2["custom"] = 7] = "custom";
    PanelType2[PanelType2["customNear"] = 8] = "customNear";
  })(PanelType || (PanelType = {}));

  // ../node_modules/@fluentui/react/lib/components/Panel/Panel.base.js
  var getClassNames12 = classNamesFunction();
  var COMPONENT_NAME6 = "Panel";
  var PanelVisibilityState;
  (function(PanelVisibilityState2) {
    PanelVisibilityState2[PanelVisibilityState2["closed"] = 0] = "closed";
    PanelVisibilityState2[PanelVisibilityState2["animatingOpen"] = 1] = "animatingOpen";
    PanelVisibilityState2[PanelVisibilityState2["open"] = 2] = "open";
    PanelVisibilityState2[PanelVisibilityState2["animatingClosed"] = 3] = "animatingClosed";
  })(PanelVisibilityState || (PanelVisibilityState = {}));
  var PanelBase = (
    /** @class */
    function(_super) {
      __extends(PanelBase2, _super);
      function PanelBase2(props) {
        var _this = _super.call(this, props) || this;
        _this._panel = React56.createRef();
        _this._animationCallback = null;
        _this._hasCustomNavigation = !!(_this.props.onRenderNavigation || _this.props.onRenderNavigationContent);
        _this.dismiss = function(ev) {
          if (_this.props.onDismiss && _this.isActive) {
            _this.props.onDismiss(ev);
          }
          if (!ev || ev && !ev.defaultPrevented) {
            _this.close();
          }
        };
        _this._allowScrollOnPanel = function(elt) {
          if (elt) {
            if (_this._allowTouchBodyScroll) {
              allowOverscrollOnElement(elt, _this._events);
            } else {
              allowScrollOnElement(elt, _this._events);
            }
          } else {
            _this._events.off(_this._scrollableContent);
          }
          _this._scrollableContent = elt;
        };
        _this._onRenderNavigation = function(props2) {
          if (!_this.props.onRenderNavigationContent && !_this.props.onRenderNavigation && !_this.props.hasCloseButton) {
            return null;
          }
          var _a8 = _this.props.onRenderNavigationContent, onRenderNavigationContent = _a8 === void 0 ? _this._onRenderNavigationContent : _a8;
          return React56.createElement("div", { className: _this._classNames.navigation }, onRenderNavigationContent(props2, _this._onRenderNavigationContent));
        };
        _this._onRenderNavigationContent = function(props2) {
          var _a8;
          var closeButtonAriaLabel = props2.closeButtonAriaLabel, hasCloseButton = props2.hasCloseButton, _b3 = props2.onRenderHeader, onRenderHeader = _b3 === void 0 ? _this._onRenderHeader : _b3;
          if (hasCloseButton) {
            var iconButtonStyles = (_a8 = _this._classNames.subComponentStyles) === null || _a8 === void 0 ? void 0 : _a8.closeButton();
            return React56.createElement(
              React56.Fragment,
              null,
              !_this._hasCustomNavigation && onRenderHeader(_this.props, _this._onRenderHeader, _this._headerTextId),
              React56.createElement(IconButton, { styles: iconButtonStyles, className: _this._classNames.closeButton, onClick: _this._onPanelClick, ariaLabel: closeButtonAriaLabel, title: closeButtonAriaLabel, "data-is-visible": true, iconProps: { iconName: "Cancel" } })
            );
          }
          return null;
        };
        _this._onRenderHeader = function(props2, defaultRender, headerTextId) {
          var headerText = props2.headerText, _a8 = props2.headerTextProps, headerTextProps = _a8 === void 0 ? {} : _a8;
          if (headerText) {
            return React56.createElement(
              "div",
              { className: _this._classNames.header },
              React56.createElement("div", __assign({ id: headerTextId, role: "heading", "aria-level": 1 }, headerTextProps, { className: css(_this._classNames.headerText, headerTextProps.className) }), headerText)
            );
          }
          return null;
        };
        _this._onRenderBody = function(props2) {
          return React56.createElement("div", { className: _this._classNames.content }, props2.children);
        };
        _this._onRenderFooter = function(props2) {
          var _a8 = _this.props.onRenderFooterContent, onRenderFooterContent = _a8 === void 0 ? null : _a8;
          if (onRenderFooterContent) {
            return React56.createElement(
              "div",
              { className: _this._classNames.footer },
              React56.createElement("div", { className: _this._classNames.footerInner }, onRenderFooterContent())
            );
          }
          return null;
        };
        _this._animateTo = function(newVisibilityState) {
          if (newVisibilityState === PanelVisibilityState.open && _this.props.onOpen) {
            _this.props.onOpen();
          }
          _this._animationCallback = _this._async.setTimeout(function() {
            _this.setState({ visibility: newVisibilityState });
            _this._onTransitionComplete(newVisibilityState);
          }, 200);
        };
        _this._clearExistingAnimationTimer = function() {
          if (_this._animationCallback !== null) {
            _this._async.clearTimeout(_this._animationCallback);
          }
        };
        _this._onPanelClick = function(ev) {
          _this.dismiss(ev);
        };
        _this._onTransitionComplete = function(newVisibilityState) {
          _this._updateFooterPosition();
          if (newVisibilityState === PanelVisibilityState.open && _this.props.onOpened) {
            _this.props.onOpened();
          }
          if (newVisibilityState === PanelVisibilityState.closed && _this.props.onDismissed) {
            _this.props.onDismissed();
          }
        };
        var _a7 = _this.props.allowTouchBodyScroll, allowTouchBodyScroll = _a7 === void 0 ? false : _a7;
        _this._allowTouchBodyScroll = allowTouchBodyScroll;
        initializeComponentRef(_this);
        warnDeprecations(COMPONENT_NAME6, props, {
          ignoreExternalFocusing: "focusTrapZoneProps",
          forceFocusInsideTrap: "focusTrapZoneProps",
          firstFocusableSelector: "focusTrapZoneProps"
        });
        _this.state = {
          isFooterSticky: false,
          // intentionally ignore props so animation takes place during componentDidMount
          visibility: PanelVisibilityState.closed,
          id: getId("Panel")
        };
        return _this;
      }
      PanelBase2.getDerivedStateFromProps = function(nextProps, prevState) {
        if (nextProps.isOpen === void 0) {
          return null;
        }
        if (nextProps.isOpen && (prevState.visibility === PanelVisibilityState.closed || prevState.visibility === PanelVisibilityState.animatingClosed)) {
          return { visibility: PanelVisibilityState.animatingOpen };
        }
        if (!nextProps.isOpen && (prevState.visibility === PanelVisibilityState.open || prevState.visibility === PanelVisibilityState.animatingOpen)) {
          return { visibility: PanelVisibilityState.animatingClosed };
        }
        return null;
      };
      PanelBase2.prototype.componentDidMount = function() {
        this._async = new Async(this);
        this._events = new EventGroup(this);
        this._events.on(window, "resize", this._updateFooterPosition);
        if (this._shouldListenForOuterClick(this.props)) {
          this._events.on(document.body, "mousedown", this._dismissOnOuterClick, true);
        }
        if (this.props.isOpen) {
          this.setState({ visibility: PanelVisibilityState.animatingOpen });
        }
      };
      PanelBase2.prototype.componentDidUpdate = function(previousProps, previousState) {
        var shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);
        var previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);
        if (this.state.visibility !== previousState.visibility) {
          this._clearExistingAnimationTimer();
          if (this.state.visibility === PanelVisibilityState.animatingOpen) {
            this._animateTo(PanelVisibilityState.open);
          } else if (this.state.visibility === PanelVisibilityState.animatingClosed) {
            this._animateTo(PanelVisibilityState.closed);
          }
        }
        if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {
          this._events.on(document.body, "mousedown", this._dismissOnOuterClick, true);
        } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {
          this._events.off(document.body, "mousedown", this._dismissOnOuterClick, true);
        }
      };
      PanelBase2.prototype.componentWillUnmount = function() {
        this._async.dispose();
        this._events.dispose();
      };
      PanelBase2.prototype.render = function() {
        var _a7 = this.props, _b3 = _a7.className, className = _b3 === void 0 ? "" : _b3, elementToFocusOnDismiss = _a7.elementToFocusOnDismiss, firstFocusableSelector = _a7.firstFocusableSelector, focusTrapZoneProps = _a7.focusTrapZoneProps, forceFocusInsideTrap = _a7.forceFocusInsideTrap, hasCloseButton = _a7.hasCloseButton, headerText = _a7.headerText, _c3 = _a7.headerClassName, headerClassName = _c3 === void 0 ? "" : _c3, ignoreExternalFocusing = _a7.ignoreExternalFocusing, isBlocking = _a7.isBlocking, isFooterAtBottom = _a7.isFooterAtBottom, isLightDismiss = _a7.isLightDismiss, isHiddenOnDismiss = _a7.isHiddenOnDismiss, layerProps = _a7.layerProps, overlayProps = _a7.overlayProps, popupProps = _a7.popupProps, type = _a7.type, styles2 = _a7.styles, theme = _a7.theme, customWidth = _a7.customWidth, _d3 = _a7.onLightDismissClick, onLightDismissClick = _d3 === void 0 ? this._onPanelClick : _d3, _e2 = _a7.onRenderNavigation, onRenderNavigation = _e2 === void 0 ? this._onRenderNavigation : _e2, _f = _a7.onRenderHeader, onRenderHeader = _f === void 0 ? this._onRenderHeader : _f, _g = _a7.onRenderBody, onRenderBody = _g === void 0 ? this._onRenderBody : _g, _h = _a7.onRenderFooter, onRenderFooter = _h === void 0 ? this._onRenderFooter : _h;
        var _j = this.state, isFooterSticky = _j.isFooterSticky, visibility = _j.visibility, id = _j.id;
        var isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;
        var isRTL = getRTL2(theme);
        var isOnRightSide = isRTL ? isLeft : !isLeft;
        var customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? { width: customWidth } : {};
        var nativeProps = getNativeProps(this.props, divProperties);
        var isOpen = this.isActive;
        var isAnimating = visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;
        this._headerTextId = headerText && id + "-headerText";
        if (!isOpen && !isAnimating && !isHiddenOnDismiss) {
          return null;
        }
        this._classNames = getClassNames12(styles2, {
          theme,
          className,
          focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : void 0,
          hasCloseButton,
          headerClassName,
          isAnimating,
          isFooterSticky,
          isFooterAtBottom,
          isOnRightSide,
          isOpen,
          isHiddenOnDismiss,
          type,
          hasCustomNavigation: this._hasCustomNavigation
        });
        var _k = this, _classNames = _k._classNames, _allowTouchBodyScroll = _k._allowTouchBodyScroll;
        var overlay;
        if (isBlocking && isOpen) {
          overlay = React56.createElement(Overlay, __assign({ className: _classNames.overlay, isDarkThemed: false, onClick: isLightDismiss ? onLightDismissClick : void 0, allowTouchBodyScroll: _allowTouchBodyScroll }, overlayProps));
        }
        return React56.createElement(
          Layer,
          __assign({}, layerProps),
          React56.createElement(
            Popup,
            __assign({ role: "dialog", "aria-modal": isBlocking ? "true" : void 0, ariaLabelledBy: this._headerTextId ? this._headerTextId : void 0, onDismiss: this.dismiss, className: _classNames.hiddenPanel, enableAriaHiddenSiblings: isOpen ? true : false }, popupProps),
            React56.createElement(
              "div",
              __assign({ "aria-hidden": !isOpen && isAnimating }, nativeProps, { ref: this._panel, className: _classNames.root }),
              overlay,
              React56.createElement(
                FocusTrapZone,
                __assign({ ignoreExternalFocusing, forceFocusInsideTrap: !isBlocking || isHiddenOnDismiss && !isOpen ? false : forceFocusInsideTrap, firstFocusableSelector, isClickableOutsideFocusTrap: true }, focusTrapZoneProps, { className: _classNames.main, style: customWidthStyles, elementToFocusOnDismiss }),
                React56.createElement(
                  "div",
                  { className: _classNames.contentInner },
                  React56.createElement(
                    "div",
                    { ref: this._allowScrollOnPanel, className: _classNames.scrollableContent, "data-is-scrollable": true },
                    React56.createElement("div", { className: _classNames.commands, "data-is-visible": true }, onRenderNavigation(this.props, this._onRenderNavigation)),
                    (this._hasCustomNavigation || !hasCloseButton) && onRenderHeader(this.props, this._onRenderHeader, this._headerTextId),
                    onRenderBody(this.props, this._onRenderBody),
                    onRenderFooter(this.props, this._onRenderFooter)
                  )
                )
              )
            )
          )
        );
      };
      PanelBase2.prototype.open = function() {
        if (this.props.isOpen !== void 0) {
          return;
        }
        if (this.isActive) {
          return;
        }
        this.setState({ visibility: PanelVisibilityState.animatingOpen });
      };
      PanelBase2.prototype.close = function() {
        if (this.props.isOpen !== void 0) {
          return;
        }
        if (!this.isActive) {
          return;
        }
        this.setState({ visibility: PanelVisibilityState.animatingClosed });
      };
      Object.defineProperty(PanelBase2.prototype, "isActive", {
        /** isActive is true when panel is open or opening. */
        get: function() {
          return this.state.visibility === PanelVisibilityState.open || this.state.visibility === PanelVisibilityState.animatingOpen;
        },
        enumerable: false,
        configurable: true
      });
      PanelBase2.prototype._shouldListenForOuterClick = function(props) {
        return !!props.isBlocking && !!props.isOpen;
      };
      PanelBase2.prototype._updateFooterPosition = function() {
        var scrollableContent = this._scrollableContent;
        if (scrollableContent) {
          var height = scrollableContent.clientHeight;
          var innerHeight_1 = scrollableContent.scrollHeight;
          this.setState({
            isFooterSticky: height < innerHeight_1 ? true : false
          });
        }
      };
      PanelBase2.prototype._dismissOnOuterClick = function(ev) {
        var panel = this._panel.current;
        if (this.isActive && panel && !ev.defaultPrevented) {
          if (!elementContains(panel, ev.target)) {
            if (this.props.onOuterClick) {
              this.props.onOuterClick(ev);
            } else {
              this.dismiss(ev);
            }
          }
        }
      };
      PanelBase2.defaultProps = {
        isHiddenOnDismiss: false,
        isOpen: void 0,
        isBlocking: true,
        hasCloseButton: true,
        type: PanelType.smallFixedFar
      };
      return PanelBase2;
    }(React56.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Panel/Panel.styles.js
  var _a5;
  var _b;
  var _c;
  var _d;
  var _e;
  var GlobalClassNames9 = {
    root: "ms-Panel",
    main: "ms-Panel-main",
    commands: "ms-Panel-commands",
    contentInner: "ms-Panel-contentInner",
    scrollableContent: "ms-Panel-scrollableContent",
    navigation: "ms-Panel-navigation",
    closeButton: "ms-Panel-closeButton ms-PanelAction-close",
    header: "ms-Panel-header",
    headerText: "ms-Panel-headerText",
    content: "ms-Panel-content",
    footer: "ms-Panel-footer",
    footerInner: "ms-Panel-footerInner",
    isOpen: "is-open",
    hasCloseButton: "ms-Panel--hasCloseButton",
    smallFluid: "ms-Panel--smFluid",
    smallFixedNear: "ms-Panel--smLeft",
    smallFixedFar: "ms-Panel--sm",
    medium: "ms-Panel--md",
    large: "ms-Panel--lg",
    largeFixed: "ms-Panel--fixed",
    extraLarge: "ms-Panel--xl",
    custom: "ms-Panel--custom",
    customNear: "ms-Panel--customLeft"
  };
  var panelWidth = {
    full: "100%",
    auto: "auto",
    xs: 272,
    sm: 340,
    md1: 592,
    md2: 644,
    lg: 940
  };
  var panelMargin = {
    auto: "auto",
    none: 0,
    md: 48,
    lg: 428,
    xl: 176
  };
  var smallPanelSelectors = (_a5 = {}, _a5["@media (min-width: ".concat(ScreenWidthMinMedium, "px)")] = {
    width: panelWidth.sm
  }, _a5);
  var mediumPanelSelectors = (_b = {}, _b["@media (min-width: ".concat(ScreenWidthMinLarge, "px)")] = {
    width: panelWidth.md1
  }, _b["@media (min-width: ".concat(ScreenWidthMinXLarge, "px)")] = {
    width: panelWidth.md2
  }, _b);
  var largePanelSelectors = (_c = {}, _c["@media (min-width: ".concat(ScreenWidthMinUhfMobile, "px)")] = {
    left: panelMargin.md,
    width: panelWidth.auto
  }, _c["@media (min-width: ".concat(ScreenWidthMinXXLarge, "px)")] = {
    left: panelMargin.lg
  }, _c);
  var largeFixedPanelSelectors = (_d = {}, _d["@media (min-width: ".concat(ScreenWidthMinXXLarge, "px)")] = {
    left: panelMargin.auto,
    width: panelWidth.lg
  }, _d);
  var extraLargePanelSelectors = (_e = {}, _e["@media (min-width: ".concat(ScreenWidthMinXXLarge, "px)")] = {
    left: panelMargin.xl
  }, _e);
  var getPanelBreakpoints = function(type) {
    var selectors;
    switch (type) {
      case PanelType.smallFixedFar:
        selectors = __assign({}, smallPanelSelectors);
        break;
      case PanelType.medium:
        selectors = __assign(__assign({}, smallPanelSelectors), mediumPanelSelectors);
        break;
      case PanelType.large:
        selectors = __assign(__assign(__assign({}, smallPanelSelectors), mediumPanelSelectors), largePanelSelectors);
        break;
      case PanelType.largeFixed:
        selectors = __assign(__assign(__assign(__assign({}, smallPanelSelectors), mediumPanelSelectors), largePanelSelectors), largeFixedPanelSelectors);
        break;
      case PanelType.extraLarge:
        selectors = __assign(__assign(__assign(__assign({}, smallPanelSelectors), mediumPanelSelectors), largePanelSelectors), extraLargePanelSelectors);
        break;
      default:
        break;
    }
    return selectors;
  };
  var commandBarHeight = "44px";
  var sharedPaddingStyles = {
    paddingLeft: "24px",
    paddingRight: "24px"
  };
  var getStyles17 = function(props) {
    var _a7, _b3, _c3, _d3;
    var className = props.className, focusTrapZoneClassName = props.focusTrapZoneClassName, hasCloseButton = props.hasCloseButton, headerClassName = props.headerClassName, isAnimating = props.isAnimating, isFooterSticky = props.isFooterSticky, isFooterAtBottom = props.isFooterAtBottom, isOnRightSide = props.isOnRightSide, isOpen = props.isOpen, isHiddenOnDismiss = props.isHiddenOnDismiss, hasCustomNavigation = props.hasCustomNavigation, theme = props.theme, _e2 = props.type, type = _e2 === void 0 ? PanelType.smallFixedFar : _e2;
    var effects = theme.effects, fonts = theme.fonts, semanticColors = theme.semanticColors;
    var classNames2 = getGlobalClassNames(GlobalClassNames9, theme);
    var isCustomPanel = type === PanelType.custom || type === PanelType.customNear;
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        isOpen && classNames2.isOpen,
        hasCloseButton && classNames2.hasCloseButton,
        {
          pointerEvents: "none",
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0
        },
        isCustomPanel && isOnRightSide && classNames2.custom,
        isCustomPanel && !isOnRightSide && classNames2.customNear,
        className
      ],
      overlay: [
        {
          pointerEvents: "auto",
          cursor: "pointer"
        },
        isOpen && isAnimating && AnimationClassNames.fadeIn100,
        !isOpen && isAnimating && AnimationClassNames.fadeOut100
      ],
      hiddenPanel: [
        !isOpen && !isAnimating && isHiddenOnDismiss && {
          visibility: "hidden"
        }
      ],
      main: [
        classNames2.main,
        {
          backgroundColor: semanticColors.bodyBackground,
          boxShadow: effects.elevation64,
          pointerEvents: "auto",
          position: "absolute",
          display: "flex",
          flexDirection: "column",
          overflowX: "hidden",
          overflowY: "auto",
          WebkitOverflowScrolling: "touch",
          bottom: 0,
          top: 0,
          // left, right, width are overridden depending on the type of the Panel and the screen breakpoint.
          left: panelMargin.auto,
          right: panelMargin.none,
          width: panelWidth.full,
          selectors: __assign((_a7 = {}, _a7[HighContrastSelector] = {
            borderLeft: "3px solid ".concat(semanticColors.variantBorder),
            borderRight: "3px solid ".concat(semanticColors.variantBorder)
          }, _a7), getPanelBreakpoints(type))
        },
        type === PanelType.smallFluid && {
          left: panelMargin.none
        },
        type === PanelType.smallFixedNear && {
          left: panelMargin.none,
          right: panelMargin.auto,
          width: panelWidth.xs
        },
        type === PanelType.customNear && {
          right: "auto",
          left: 0
        },
        isCustomPanel && {
          maxWidth: "100vw"
        },
        isOpen && isAnimating && !isOnRightSide && AnimationClassNames.slideRightIn40,
        isOpen && isAnimating && isOnRightSide && AnimationClassNames.slideLeftIn40,
        !isOpen && isAnimating && !isOnRightSide && AnimationClassNames.slideLeftOut40,
        !isOpen && isAnimating && isOnRightSide && AnimationClassNames.slideRightOut40,
        focusTrapZoneClassName
      ],
      commands: [
        classNames2.commands,
        {
          // Ensures that the sticky header always has a background to prevent overlaps on scroll.
          backgroundColor: semanticColors.bodyBackground,
          paddingTop: 18,
          selectors: (_b3 = {}, _b3["@media (min-height: ".concat(ScreenWidthMinMedium, "px)")] = {
            position: "sticky",
            top: 0,
            zIndex: 1
          }, _b3)
        },
        hasCustomNavigation && {
          paddingTop: "inherit"
        }
      ],
      navigation: [
        classNames2.navigation,
        {
          display: "flex",
          justifyContent: "flex-end"
        },
        hasCustomNavigation && {
          height: commandBarHeight
        }
      ],
      contentInner: [
        classNames2.contentInner,
        {
          display: "flex",
          flexDirection: "column",
          flexGrow: 1,
          overflowY: "hidden"
        }
      ],
      header: [
        classNames2.header,
        sharedPaddingStyles,
        {
          alignSelf: "flex-start"
        },
        hasCloseButton && !hasCustomNavigation && {
          flexGrow: 1
        },
        hasCustomNavigation && {
          // Ensure that title doesn't shrink if screen is too small
          flexShrink: 0
        }
      ],
      headerText: [
        classNames2.headerText,
        fonts.xLarge,
        {
          color: semanticColors.bodyText,
          lineHeight: "27px",
          overflowWrap: "break-word",
          wordWrap: "break-word",
          wordBreak: "break-word",
          hyphens: "auto"
        },
        headerClassName
      ],
      scrollableContent: [
        classNames2.scrollableContent,
        {
          overflowY: "auto"
        },
        isFooterAtBottom && {
          flexGrow: 1,
          display: "inherit",
          flexDirection: "inherit"
        }
      ],
      content: [
        classNames2.content,
        sharedPaddingStyles,
        {
          paddingBottom: 20
        },
        isFooterAtBottom && {
          selectors: (_c3 = {}, _c3["@media (min-height: ".concat(ScreenWidthMinMedium, "px)")] = {
            flexGrow: 1
          }, _c3)
        }
      ],
      footer: [
        classNames2.footer,
        {
          // Ensure that footer doesn't shrink if screen is too small
          flexShrink: 0,
          borderTop: "1px solid transparent",
          transition: "opacity ".concat(AnimationVariables.durationValue3, " ").concat(AnimationVariables.easeFunction2),
          selectors: (_d3 = {}, _d3["@media (min-height: ".concat(ScreenWidthMinMedium, "px)")] = {
            position: "sticky",
            bottom: 0
          }, _d3)
        },
        isFooterSticky && {
          backgroundColor: semanticColors.bodyBackground,
          borderTopColor: semanticColors.variantBorder
        }
      ],
      footerInner: [
        classNames2.footerInner,
        sharedPaddingStyles,
        {
          paddingBottom: 16,
          paddingTop: 16
        }
      ],
      subComponentStyles: {
        closeButton: {
          root: [
            classNames2.closeButton,
            {
              marginRight: 14,
              color: theme.palette.neutralSecondary,
              fontSize: IconFontSizes.large
            },
            hasCustomNavigation && {
              marginRight: 0,
              height: "auto",
              width: "44px"
            }
          ],
          rootHovered: {
            color: theme.palette.neutralPrimary
          }
        }
      }
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Panel/Panel.js
  var Panel = styled(PanelBase, getStyles17, void 0, {
    scope: "Panel"
  });

  // ../node_modules/@fluentui/react/lib/components/Dropdown/Dropdown.base.js
  var COMPONENT_NAME7 = "Dropdown";
  var getClassNames13 = classNamesFunction();
  var DEFAULT_PROPS4 = {
    options: []
  };
  function useSelectedItemsState(_a7) {
    var defaultSelectedKeys = _a7.defaultSelectedKeys, selectedKeys = _a7.selectedKeys, defaultSelectedKey = _a7.defaultSelectedKey, selectedKey = _a7.selectedKey, options = _a7.options, multiSelect = _a7.multiSelect;
    var oldOptions = usePrevious(options);
    var _b3 = React57.useState([]), selectedIndices = _b3[0], setSelectedIndices = _b3[1];
    var selectedKeyPropToUse;
    var didOptionsChange = options !== oldOptions;
    if (multiSelect) {
      if (didOptionsChange && defaultSelectedKeys !== void 0) {
        selectedKeyPropToUse = defaultSelectedKeys;
      } else {
        selectedKeyPropToUse = selectedKeys;
      }
    } else {
      if (didOptionsChange && defaultSelectedKey !== void 0) {
        selectedKeyPropToUse = defaultSelectedKey;
      } else {
        selectedKeyPropToUse = selectedKey;
      }
    }
    var oldSelectedKeyProp = usePrevious(selectedKeyPropToUse);
    React57.useEffect(function() {
      var getSelectedIndexes = function() {
        if (selectedKeyPropToUse === void 0) {
          if (multiSelect) {
            return getAllSelectedIndices();
          }
          var selectedIndex = getSelectedIndex(null);
          return selectedIndex !== -1 ? [selectedIndex] : [];
        } else if (!Array.isArray(selectedKeyPropToUse)) {
          var selectedIndex = getSelectedIndex(selectedKeyPropToUse);
          return selectedIndex !== -1 ? [selectedIndex] : [];
        }
        var returnValue = [];
        for (var _i = 0, selectedKeyPropToUse_1 = selectedKeyPropToUse; _i < selectedKeyPropToUse_1.length; _i++) {
          var key = selectedKeyPropToUse_1[_i];
          var selectedIndex = getSelectedIndex(key);
          selectedIndex !== -1 && returnValue.push(selectedIndex);
        }
        return returnValue;
      };
      var getAllSelectedIndices = function() {
        return options.map(function(option, index) {
          return option.selected ? index : -1;
        }).filter(function(index) {
          return index !== -1;
        });
      };
      var getSelectedIndex = function(searchKey) {
        return findIndex(options, function(option) {
          if (searchKey != null) {
            return option.key === searchKey;
          } else {
            return !!option.selected || !!option.isSelected;
          }
        });
      };
      if ((selectedKeyPropToUse !== void 0 || !oldOptions) && (selectedKeyPropToUse !== oldSelectedKeyProp || didOptionsChange)) {
        setSelectedIndices(getSelectedIndexes());
      }
    }, [didOptionsChange, multiSelect, oldOptions, oldSelectedKeyProp, options, selectedKeyPropToUse]);
    return [selectedIndices, setSelectedIndices];
  }
  var DropdownBase = React57.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var props = getPropsWithDefaults(DEFAULT_PROPS4, propsWithoutDefaults);
    var rootRef = React57.useRef(null);
    var mergedRootRef = useMergedRefs(forwardedRef, rootRef);
    var responsiveMode = useResponsiveMode(rootRef, props.responsiveMode);
    var _a7 = useSelectedItemsState(props), selectedIndices = _a7[0], setSelectedIndices = _a7[1];
    return React57.createElement(DropdownInternal, __assign({}, props, { responsiveMode, hoisted: { rootRef: mergedRootRef, selectedIndices, setSelectedIndices } }));
  });
  DropdownBase.displayName = "DropdownBase";
  var DropdownInternal = (
    /** @class */
    function(_super) {
      __extends(DropdownInternal2, _super);
      function DropdownInternal2(props) {
        var _this = _super.call(this, props) || this;
        _this._host = React57.createRef();
        _this._focusZone = React57.createRef();
        _this._dropDown = React57.createRef();
        _this._scrollIdleDelay = 250;
        _this._sizePosCache = new DropdownSizePosCache();
        _this._requestAnimationFrame = safeRequestAnimationFrame(_this);
        _this.dismissMenu = function() {
          var isOpen = _this.state.isOpen;
          isOpen && _this.setState({ isOpen: false });
        };
        _this._onChange = function(event, options2, index, checked, multiSelect2) {
          var _a7 = _this.props, onChange = _a7.onChange, onChanged = _a7.onChanged;
          if (onChange || onChanged) {
            var changedOpt = multiSelect2 ? __assign(__assign({}, options2[index]), { selected: !checked }) : options2[index];
            onChange && onChange(__assign(__assign({}, event), { target: _this._dropDown.current }), changedOpt, index);
            onChanged && onChanged(changedOpt, index);
          }
        };
        _this._getPlaceholder = function() {
          return _this.props.placeholder || _this.props.placeHolder;
        };
        _this._getTitle = function(items, _unused) {
          var _a7 = _this.props.multiSelectDelimiter, multiSelectDelimiter = _a7 === void 0 ? ", " : _a7;
          return items.map(function(i2) {
            return i2.text;
          }).join(multiSelectDelimiter);
        };
        _this._onRenderTitle = function(items) {
          return React57.createElement(React57.Fragment, null, _this._getTitle(items));
        };
        _this._onRenderPlaceholder = function(props2) {
          if (!_this._getPlaceholder()) {
            return null;
          }
          return React57.createElement(React57.Fragment, null, _this._getPlaceholder());
        };
        _this._onRenderContainer = function(props2) {
          var calloutProps = props2.calloutProps, panelProps = props2.panelProps;
          var _a7 = _this.props, responsiveMode = _a7.responsiveMode, dropdownWidth = _a7.dropdownWidth;
          var isSmall = responsiveMode <= ResponsiveMode.medium;
          var focusTrapZoneProps = { firstFocusableTarget: "#".concat(_this._listId, "1") };
          var panelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.panel : void 0;
          var calloutWidth = void 0;
          var calloutMinWidth = void 0;
          if (dropdownWidth === "auto") {
            calloutMinWidth = _this._dropDown.current ? _this._dropDown.current.clientWidth : 0;
          } else {
            calloutWidth = dropdownWidth || (_this._dropDown.current ? _this._dropDown.current.clientWidth : 0);
          }
          return isSmall ? React57.createElement(Panel, __assign({ closeButtonAriaLabel: "Close", focusTrapZoneProps, hasCloseButton: true, isOpen: true, isLightDismiss: true, onDismiss: _this._onDismiss, styles: panelStyles }, panelProps), _this._renderFocusableList(props2)) : React57.createElement(Callout, __assign({ isBeakVisible: false, gapSpace: 0, doNotLayer: false, directionalHintFixed: false, directionalHint: DirectionalHint.bottomLeftEdge, calloutWidth, calloutMinWidth }, calloutProps, { className: _this._classNames.callout, target: _this._dropDown.current, onDismiss: _this._onDismiss, onScroll: _this._onScroll, onPositioned: _this._onPositioned }), _this._renderFocusableList(props2));
        };
        _this._onRenderCaretDown = function(props2) {
          return React57.createElement(Icon, { className: _this._classNames.caretDown, iconName: "ChevronDown", "aria-hidden": true });
        };
        _this._onRenderList = function(props2) {
          var _a7 = props2.onRenderItem, onRenderItem = _a7 === void 0 ? _this._onRenderItem : _a7;
          var queue = { items: [] };
          var renderedList = [];
          var emptyQueue = function() {
            var newGroup = queue.id ? [
              React57.createElement("div", { role: "group", key: queue.id, "aria-labelledby": queue.id }, queue.items)
            ] : queue.items;
            renderedList = __spreadArray(__spreadArray([], renderedList, true), newGroup, true);
            queue = { items: [] };
          };
          var placeRenderedOptionIntoQueue = function(item, index) {
            switch (item.itemType) {
              case SelectableOptionMenuItemType.Header:
                queue.items.length > 0 && emptyQueue();
                var id = _this._id + item.key;
                queue.items.push(onRenderItem(__assign(__assign({ id }, item), { index }), _this._onRenderItem));
                queue.id = id;
                break;
              case SelectableOptionMenuItemType.Divider:
                index > 0 && queue.items.push(onRenderItem(__assign(__assign({}, item), { index }), _this._onRenderItem));
                queue.items.length > 0 && emptyQueue();
                break;
              default:
                queue.items.push(onRenderItem(__assign(__assign({}, item), { index }), _this._onRenderItem));
            }
          };
          props2.options.forEach(function(item, index) {
            placeRenderedOptionIntoQueue(item, index);
          });
          queue.items.length > 0 && emptyQueue();
          return React57.createElement(React57.Fragment, null, renderedList);
        };
        _this._onRenderItem = function(item) {
          switch (item.itemType) {
            case SelectableOptionMenuItemType.Divider:
              return _this._renderSeparator(item);
            case SelectableOptionMenuItemType.Header:
              return _this._renderHeader(item);
            default:
              return _this._renderOption(item);
          }
        };
        _this._renderOption = function(item) {
          var _a7;
          var _b3 = _this.props, _c3 = _b3.onRenderOption, onRenderOption = _c3 === void 0 ? _this._onRenderOption : _c3, _d3 = _b3.hoisted.selectedIndices, selectedIndices = _d3 === void 0 ? [] : _d3;
          var isItemSelected = item.index !== void 0 && selectedIndices ? selectedIndices.indexOf(item.index) > -1 : false;
          var itemClassName = item.hidden ? _this._classNames.dropdownItemHidden : isItemSelected && item.disabled === true ? _this._classNames.dropdownItemSelectedAndDisabled : isItemSelected ? _this._classNames.dropdownItemSelected : item.disabled === true ? _this._classNames.dropdownItemDisabled : _this._classNames.dropdownItem;
          var title = item.title;
          var id = _this._listId + item.index;
          var labelId = (_a7 = item.id) !== null && _a7 !== void 0 ? _a7 : id + "-label";
          var multiSelectItemStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.multiSelectItem : void 0;
          return !_this.props.multiSelect ? React57.createElement(CommandButton, {
            id,
            key: item.key,
            "data-index": item.index,
            "data-is-focusable": !item.disabled,
            disabled: item.disabled,
            className: itemClassName,
            onClick: _this._onItemClick(item),
            // eslint-disable-next-line react/jsx-no-bind
            onMouseEnter: _this._onItemMouseEnter.bind(_this, item),
            // eslint-disable-next-line react/jsx-no-bind
            onMouseLeave: _this._onMouseItemLeave.bind(_this, item),
            // eslint-disable-next-line react/jsx-no-bind
            onMouseMove: _this._onItemMouseMove.bind(_this, item),
            role: "option",
            "aria-selected": isItemSelected ? "true" : "false",
            ariaLabel: item.ariaLabel,
            title,
            "aria-posinset": _this._sizePosCache.positionInSet(item.index),
            "aria-setsize": _this._sizePosCache.optionSetSize
          }, onRenderOption(item, _this._onRenderOption)) : React57.createElement(Checkbox, {
            id,
            key: item.key,
            disabled: item.disabled,
            onChange: _this._onItemClick(item),
            inputProps: __assign({ "aria-selected": isItemSelected, onMouseEnter: _this._onItemMouseEnter.bind(_this, item), onMouseLeave: _this._onMouseItemLeave.bind(_this, item), onMouseMove: _this._onItemMouseMove.bind(_this, item), role: "option" }, {
              "data-index": item.index,
              "data-is-focusable": !(item.disabled || item.hidden)
            }),
            label: item.text,
            title,
            // eslint-disable-next-line react/jsx-no-bind
            onRenderLabel: _this._onRenderItemLabel.bind(_this, __assign(__assign({}, item), { id: labelId })),
            className: css(itemClassName, "is-multi-select"),
            checked: isItemSelected,
            styles: multiSelectItemStyles,
            ariaPositionInSet: !item.hidden ? _this._sizePosCache.positionInSet(item.index) : void 0,
            ariaSetSize: !item.hidden ? _this._sizePosCache.optionSetSize : void 0,
            ariaLabel: item.ariaLabel,
            ariaLabelledBy: item.ariaLabel ? void 0 : labelId
          });
        };
        _this._onRenderOption = function(item) {
          return React57.createElement("span", { className: _this._classNames.dropdownOptionText }, item.text);
        };
        _this._onRenderMultiselectOption = function(item) {
          return React57.createElement("span", { id: item.id, "aria-hidden": "true", className: _this._classNames.dropdownOptionText }, item.text);
        };
        _this._onRenderItemLabel = function(item) {
          var _a7 = _this.props.onRenderOption, onRenderOption = _a7 === void 0 ? _this._onRenderMultiselectOption : _a7;
          return onRenderOption(item, _this._onRenderMultiselectOption);
        };
        _this._onPositioned = function(positions) {
          if (_this._focusZone.current) {
            _this._requestAnimationFrame(function() {
              var selectedIndices = _this.props.hoisted.selectedIndices;
              if (_this._focusZone.current) {
                if (!_this._hasBeenPositioned && selectedIndices && selectedIndices[0] && !_this.props.options[selectedIndices[0]].disabled) {
                  var element = getDocument().getElementById("".concat(_this._id, "-list").concat(selectedIndices[0]));
                  if (element) {
                    _this._focusZone.current.focusElement(element);
                  }
                  _this._hasBeenPositioned = true;
                } else {
                  _this._focusZone.current.focus();
                }
              }
            });
          }
          if (!_this.state.calloutRenderEdge || _this.state.calloutRenderEdge !== positions.targetEdge) {
            _this.setState({
              calloutRenderEdge: positions.targetEdge
            });
          }
        };
        _this._onItemClick = function(item) {
          return function(event) {
            if (!item.disabled) {
              _this.setSelectedIndex(event, item.index);
              if (!_this.props.multiSelect) {
                _this.setState({
                  isOpen: false
                });
              }
            }
          };
        };
        _this._onScroll = function() {
          if (!_this._isScrollIdle && _this._scrollIdleTimeoutId !== void 0) {
            clearTimeout(_this._scrollIdleTimeoutId);
            _this._scrollIdleTimeoutId = void 0;
          } else {
            _this._isScrollIdle = false;
          }
          _this._scrollIdleTimeoutId = window.setTimeout(function() {
            _this._isScrollIdle = true;
          }, _this._scrollIdleDelay);
        };
        _this._onMouseItemLeave = function(item, ev) {
          if (_this._shouldIgnoreMouseEvent()) {
            return;
          }
          if (_this._host.current) {
            if (_this._host.current.setActive) {
              try {
                _this._host.current.setActive();
              } catch (e2) {
              }
            } else {
              _this._host.current.focus();
            }
          }
        };
        _this._onDismiss = function() {
          _this.setState({ isOpen: false });
        };
        _this._onDropdownBlur = function(ev) {
          var disabled = _this._isDisabled();
          if (disabled) {
            return;
          }
          if (_this.state.isOpen) {
            return;
          }
          _this.setState({ hasFocus: false });
          if (_this.props.onBlur) {
            _this.props.onBlur(ev);
          }
        };
        _this._onDropdownKeyDown = function(ev) {
          var disabled = _this._isDisabled();
          if (disabled) {
            return;
          }
          _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);
          if (_this.props.onKeyDown) {
            _this.props.onKeyDown(ev);
            if (ev.defaultPrevented) {
              return;
            }
          }
          var newIndex;
          var selectedIndex = _this.props.hoisted.selectedIndices.length ? _this.props.hoisted.selectedIndices[0] : -1;
          var containsExpandCollapseModifier = ev.altKey || ev.metaKey;
          var isOpen = _this.state.isOpen;
          switch (ev.which) {
            case KeyCodes.enter:
              _this.setState({
                isOpen: !isOpen
              });
              break;
            case KeyCodes.escape:
              if (!isOpen) {
                return;
              }
              _this.setState({
                isOpen: false
              });
              break;
            case KeyCodes.up:
              if (containsExpandCollapseModifier) {
                if (isOpen) {
                  _this.setState({ isOpen: false });
                  break;
                }
                return;
              }
              if (_this.props.multiSelect) {
                _this.setState({ isOpen: true });
              } else if (!_this._isDisabled()) {
                newIndex = _this._moveIndex(ev, -1, selectedIndex - 1, selectedIndex);
              }
              break;
            case KeyCodes.down:
              if (containsExpandCollapseModifier) {
                ev.stopPropagation();
                ev.preventDefault();
              }
              if (containsExpandCollapseModifier && !isOpen || _this.props.multiSelect) {
                _this.setState({ isOpen: true });
              } else if (!_this._isDisabled()) {
                newIndex = _this._moveIndex(ev, 1, selectedIndex + 1, selectedIndex);
              }
              break;
            case KeyCodes.home:
              if (!_this.props.multiSelect) {
                newIndex = _this._moveIndex(ev, 1, 0, selectedIndex);
              }
              break;
            case KeyCodes.end:
              if (!_this.props.multiSelect) {
                newIndex = _this._moveIndex(ev, -1, _this.props.options.length - 1, selectedIndex);
              }
              break;
            case KeyCodes.space:
              break;
            default:
              return;
          }
          if (newIndex !== selectedIndex) {
            ev.stopPropagation();
            ev.preventDefault();
          }
        };
        _this._onDropdownKeyUp = function(ev) {
          var disabled = _this._isDisabled();
          if (disabled) {
            return;
          }
          var shouldHandleKey = _this._shouldHandleKeyUp(ev);
          var isOpen = _this.state.isOpen;
          if (_this.props.onKeyUp) {
            _this.props.onKeyUp(ev);
            if (ev.defaultPrevented) {
              return;
            }
          }
          switch (ev.which) {
            case KeyCodes.space:
              _this.setState({
                isOpen: !isOpen
              });
              break;
            default:
              if (shouldHandleKey && isOpen) {
                _this.setState({ isOpen: false });
              }
              return;
          }
          ev.stopPropagation();
          ev.preventDefault();
        };
        _this._onZoneKeyDown = function(ev) {
          var _a7, _b3;
          var elementToFocus;
          _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);
          var containsExpandCollapseModifier = ev.altKey || ev.metaKey;
          switch (ev.which) {
            case KeyCodes.up:
              if (containsExpandCollapseModifier) {
                _this.setState({ isOpen: false });
              } else {
                if (_this._host.current) {
                  elementToFocus = getLastFocusable(_this._host.current, _this._host.current.lastChild, true);
                }
              }
              break;
            case KeyCodes.home:
            case KeyCodes.end:
            case KeyCodes.pageUp:
            case KeyCodes.pageDown:
              break;
            case KeyCodes.down:
              if (!containsExpandCollapseModifier && _this._host.current) {
                elementToFocus = getFirstFocusable(_this._host.current, _this._host.current.firstChild, true);
              }
              break;
            case KeyCodes.escape:
              _this.setState({ isOpen: false });
              break;
            case KeyCodes.tab:
              _this.setState({ isOpen: false });
              var document_1 = getDocument();
              if (document_1) {
                if (ev.shiftKey) {
                  (_a7 = getPreviousElement(document_1.body, _this._dropDown.current, false, false, true, true)) === null || _a7 === void 0 ? void 0 : _a7.focus();
                } else {
                  (_b3 = getNextElement(document_1.body, _this._dropDown.current, false, false, true, true)) === null || _b3 === void 0 ? void 0 : _b3.focus();
                }
              }
              break;
            default:
              return;
          }
          if (elementToFocus) {
            elementToFocus.focus();
          }
          ev.stopPropagation();
          ev.preventDefault();
        };
        _this._onZoneKeyUp = function(ev) {
          var shouldHandleKey = _this._shouldHandleKeyUp(ev);
          if (shouldHandleKey && _this.state.isOpen) {
            _this.setState({ isOpen: false });
            ev.preventDefault();
          }
        };
        _this._onDropdownClick = function(ev) {
          if (_this.props.onClick) {
            _this.props.onClick(ev);
            if (ev.defaultPrevented) {
              return;
            }
          }
          var isOpen = _this.state.isOpen;
          var disabled = _this._isDisabled();
          if (!disabled && !_this._shouldOpenOnFocus()) {
            _this.setState({
              isOpen: !isOpen
            });
          }
          _this._isFocusedByClick = false;
        };
        _this._onDropdownMouseDown = function() {
          _this._isFocusedByClick = true;
        };
        _this._onFocus = function(ev) {
          var disabled = _this._isDisabled();
          if (!disabled) {
            if (_this.props.onFocus) {
              _this.props.onFocus(ev);
            }
            var state = { hasFocus: true };
            if (_this._shouldOpenOnFocus()) {
              state.isOpen = true;
            }
            _this.setState(state);
          }
        };
        _this._isDisabled = function() {
          var disabled = _this.props.disabled;
          var isDisabled = _this.props.isDisabled;
          if (disabled === void 0) {
            disabled = isDisabled;
          }
          return disabled;
        };
        _this._onRenderLabel = function(props2) {
          var label = props2.label, required = props2.required, disabled = props2.disabled;
          var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : void 0;
          return label ? React57.createElement(Label, { className: _this._classNames.label, id: _this._labelId, required, styles: labelStyles, disabled }, label) : null;
        };
        initializeComponentRef(_this);
        var multiSelect = props.multiSelect, selectedKey = props.selectedKey, selectedKeys = props.selectedKeys, defaultSelectedKey = props.defaultSelectedKey, defaultSelectedKeys = props.defaultSelectedKeys, options = props.options;
        if (true) {
          warnDeprecations(COMPONENT_NAME7, props, {
            isDisabled: "disabled",
            onChanged: "onChange",
            placeHolder: "placeholder",
            onRenderPlaceHolder: "onRenderPlaceholder"
          });
          warnMutuallyExclusive(COMPONENT_NAME7, props, {
            defaultSelectedKey: "selectedKey",
            defaultSelectedKeys: "selectedKeys",
            selectedKeys: "selectedKey"
          });
          if (multiSelect) {
            var warnMultiSelect = function(prop) {
              return warn("Dropdown property '".concat(prop, "' cannot be used when 'multiSelect' is true. Use '").concat(prop, "s' instead."));
            };
            if (selectedKey !== void 0) {
              warnMultiSelect("selectedKey");
            }
            if (defaultSelectedKey !== void 0) {
              warnMultiSelect("defaultSelectedKey");
            }
          } else {
            var warnNotMultiSelect = function(prop) {
              return warn("Dropdown property '".concat(prop, "s' cannot be used when 'multiSelect' is false/unset. Use '").concat(prop, "' instead."));
            };
            if (selectedKeys !== void 0) {
              warnNotMultiSelect("selectedKey");
            }
            if (defaultSelectedKeys !== void 0) {
              warnNotMultiSelect("defaultSelectedKey");
            }
          }
        }
        _this._id = props.id || getId("Dropdown");
        _this._labelId = _this._id + "-label";
        _this._listId = _this._id + "-list";
        _this._optionId = _this._id + "-option";
        _this._isScrollIdle = true;
        _this._hasBeenPositioned = false;
        _this._sizePosCache.updateOptions(options);
        _this.state = {
          isOpen: false,
          hasFocus: false,
          calloutRenderEdge: void 0
        };
        return _this;
      }
      Object.defineProperty(DropdownInternal2.prototype, "selectedOptions", {
        /**
         * All selected options
         */
        get: function() {
          var _a7 = this.props, options = _a7.options, selectedIndices = _a7.hoisted.selectedIndices;
          return getAllSelectedOptions(options, selectedIndices);
        },
        enumerable: false,
        configurable: true
      });
      DropdownInternal2.prototype.componentWillUnmount = function() {
        clearTimeout(this._scrollIdleTimeoutId);
      };
      DropdownInternal2.prototype.componentDidUpdate = function(prevProps, prevState) {
        if (prevState.isOpen === true && this.state.isOpen === false) {
          this._gotMouseMove = false;
          this._hasBeenPositioned = false;
          if (this.props.onDismiss) {
            this.props.onDismiss();
          }
        }
      };
      DropdownInternal2.prototype.render = function() {
        var id = this._id;
        var props = this.props;
        var className = props.className, label = props.label, options = props.options, ariaLabel = props.ariaLabel, required = props.required, errorMessage = props.errorMessage, propStyles = props.styles, theme = props.theme, panelProps = props.panelProps, calloutProps = props.calloutProps, _a7 = props.onRenderTitle, onRenderTitle = _a7 === void 0 ? this._getTitle : _a7, _b3 = props.onRenderContainer, onRenderContainer = _b3 === void 0 ? this._onRenderContainer : _b3, _c3 = props.onRenderCaretDown, onRenderCaretDown = _c3 === void 0 ? this._onRenderCaretDown : _c3, _d3 = props.onRenderLabel, onRenderLabel = _d3 === void 0 ? this._onRenderLabel : _d3, _e2 = props.onRenderItem, onRenderItem = _e2 === void 0 ? this._onRenderItem : _e2, selectedIndices = props.hoisted.selectedIndices;
        var _f = this.state, isOpen = _f.isOpen, calloutRenderEdge = _f.calloutRenderEdge, hasFocus = _f.hasFocus;
        var onRenderPlaceholder = props.onRenderPlaceholder || props.onRenderPlaceHolder || this._getPlaceholder;
        if (options !== this._sizePosCache.cachedOptions) {
          this._sizePosCache.updateOptions(options);
        }
        var selectedOptions = getAllSelectedOptions(options, selectedIndices);
        var divProps = getNativeProps(props, divProperties);
        var disabled = this._isDisabled();
        var errorMessageId = id + "-errorMessage";
        this._classNames = getClassNames13(propStyles, {
          theme,
          className,
          hasError: !!(errorMessage && errorMessage.length > 0),
          hasLabel: !!label,
          isOpen,
          required,
          disabled,
          isRenderingPlaceholder: !selectedOptions.length,
          panelClassName: panelProps ? panelProps.className : void 0,
          calloutClassName: calloutProps ? calloutProps.className : void 0,
          calloutRenderEdge
        });
        var hasErrorMessage = !!errorMessage && errorMessage.length > 0;
        return React57.createElement(
          "div",
          { className: this._classNames.root, ref: this.props.hoisted.rootRef, "aria-owns": isOpen ? this._listId : void 0 },
          onRenderLabel(this.props, this._onRenderLabel),
          React57.createElement(
            "div",
            __assign({ "data-is-focusable": !disabled, "data-ktp-target": true, ref: this._dropDown, id, tabIndex: disabled ? -1 : 0, role: "combobox", "aria-haspopup": "listbox", "aria-expanded": isOpen ? "true" : "false", "aria-label": ariaLabel, "aria-labelledby": label && !ariaLabel ? mergeAriaAttributeValues(this._labelId, this._optionId) : void 0, "aria-describedby": hasErrorMessage ? this._id + "-errorMessage" : void 0, "aria-required": required, "aria-disabled": disabled, "aria-controls": isOpen ? this._listId : void 0 }, divProps, { className: this._classNames.dropdown, onBlur: this._onDropdownBlur, onKeyDown: this._onDropdownKeyDown, onKeyUp: this._onDropdownKeyUp, onClick: this._onDropdownClick, onMouseDown: this._onDropdownMouseDown, onFocus: this._onFocus }),
            React57.createElement(
              "span",
              { id: this._optionId, className: this._classNames.title, "aria-live": hasFocus ? "polite" : void 0, "aria-atomic": hasFocus ? true : void 0, "aria-invalid": hasErrorMessage },
              // If option is selected render title, otherwise render the placeholder text
              selectedOptions.length ? onRenderTitle(selectedOptions, this._onRenderTitle) : onRenderPlaceholder(props, this._onRenderPlaceholder)
            ),
            React57.createElement("span", { className: this._classNames.caretDownWrapper }, onRenderCaretDown(props, this._onRenderCaretDown))
          ),
          isOpen && onRenderContainer(__assign(__assign({}, props), { onDismiss: this._onDismiss, onRenderItem }), this._onRenderContainer),
          hasErrorMessage && React57.createElement("div", { role: "alert", id: errorMessageId, className: this._classNames.errorMessage }, errorMessage)
        );
      };
      DropdownInternal2.prototype.focus = function(shouldOpenOnFocus) {
        if (this._dropDown.current) {
          this._dropDown.current.focus();
          if (shouldOpenOnFocus) {
            this.setState({
              isOpen: true
            });
          }
        }
      };
      DropdownInternal2.prototype.setSelectedIndex = function(event, index) {
        var _a7 = this.props, options = _a7.options, selectedKey = _a7.selectedKey, selectedKeys = _a7.selectedKeys, multiSelect = _a7.multiSelect, notifyOnReselect = _a7.notifyOnReselect, _b3 = _a7.hoisted.selectedIndices, selectedIndices = _b3 === void 0 ? [] : _b3;
        var checked = selectedIndices ? selectedIndices.indexOf(index) > -1 : false;
        var newIndexes = [];
        index = Math.max(0, Math.min(options.length - 1, index));
        if (selectedKey !== void 0 || selectedKeys !== void 0) {
          this._onChange(event, options, index, checked, multiSelect);
          return;
        }
        if (!multiSelect && !notifyOnReselect && index === selectedIndices[0]) {
          return;
        } else if (multiSelect) {
          newIndexes = selectedIndices ? this._copyArray(selectedIndices) : [];
          if (checked) {
            var position = newIndexes.indexOf(index);
            if (position > -1) {
              newIndexes.splice(position, 1);
            }
          } else {
            newIndexes.push(index);
          }
        } else {
          newIndexes = [index];
        }
        event.persist();
        this.props.hoisted.setSelectedIndices(newIndexes);
        this._onChange(event, options, index, checked, multiSelect);
      };
      DropdownInternal2.prototype._copyArray = function(array) {
        var newArray = [];
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
          var element = array_1[_i];
          newArray.push(element);
        }
        return newArray;
      };
      DropdownInternal2.prototype._moveIndex = function(event, stepValue, index, selectedIndex) {
        var options = this.props.options;
        if (selectedIndex === index || options.length === 0) {
          return selectedIndex;
        }
        if (index >= options.length) {
          index = 0;
        } else if (index < 0) {
          index = options.length - 1;
        }
        var stepCounter = 0;
        while (options[index].itemType === SelectableOptionMenuItemType.Header || options[index].itemType === SelectableOptionMenuItemType.Divider || options[index].disabled) {
          if (stepCounter >= options.length) {
            return selectedIndex;
          }
          if (index + stepValue < 0) {
            index = options.length;
          } else if (index + stepValue >= options.length) {
            index = -1;
          }
          index = index + stepValue;
          stepCounter++;
        }
        this.setSelectedIndex(event, index);
        return index;
      };
      DropdownInternal2.prototype._renderFocusableList = function(props) {
        var _a7 = props.onRenderList, onRenderList = _a7 === void 0 ? this._onRenderList : _a7, label = props.label, ariaLabel = props.ariaLabel, multiSelect = props.multiSelect;
        return React57.createElement(
          "div",
          { className: this._classNames.dropdownItemsWrapper, onKeyDown: this._onZoneKeyDown, onKeyUp: this._onZoneKeyUp, ref: this._host, tabIndex: 0 },
          React57.createElement(FocusZone, { ref: this._focusZone, direction: FocusZoneDirection.vertical, id: this._listId, className: this._classNames.dropdownItems, role: "listbox", "aria-label": ariaLabel, "aria-labelledby": label && !ariaLabel ? this._labelId : void 0, "aria-multiselectable": multiSelect }, onRenderList(props, this._onRenderList))
        );
      };
      DropdownInternal2.prototype._renderSeparator = function(item) {
        var index = item.index, key = item.key;
        var separatorClassName = item.hidden ? this._classNames.dropdownDividerHidden : this._classNames.dropdownDivider;
        if (index > 0) {
          return React57.createElement("div", { role: "presentation", key, className: separatorClassName });
        }
        return null;
      };
      DropdownInternal2.prototype._renderHeader = function(item) {
        var _a7 = this.props.onRenderOption, onRenderOption = _a7 === void 0 ? this._onRenderOption : _a7;
        var key = item.key, id = item.id;
        var headerClassName = item.hidden ? this._classNames.dropdownItemHeaderHidden : this._classNames.dropdownItemHeader;
        return React57.createElement("div", { id, key, className: headerClassName }, onRenderOption(item, this._onRenderOption));
      };
      DropdownInternal2.prototype._onItemMouseEnter = function(item, ev) {
        if (this._shouldIgnoreMouseEvent()) {
          return;
        }
        var targetElement = ev.currentTarget;
        targetElement.focus();
      };
      DropdownInternal2.prototype._onItemMouseMove = function(item, ev) {
        var targetElement = ev.currentTarget;
        this._gotMouseMove = true;
        if (!this._isScrollIdle || document.activeElement === targetElement) {
          return;
        }
        targetElement.focus();
      };
      DropdownInternal2.prototype._shouldIgnoreMouseEvent = function() {
        return !this._isScrollIdle || !this._gotMouseMove;
      };
      DropdownInternal2.prototype._isAltOrMeta = function(ev) {
        return ev.which === KeyCodes.alt || ev.key === "Meta";
      };
      DropdownInternal2.prototype._shouldHandleKeyUp = function(ev) {
        var keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);
        this._lastKeyDownWasAltOrMeta = false;
        return !!keyPressIsAltOrMetaAlone && !(isMac() || isIOS());
      };
      DropdownInternal2.prototype._shouldOpenOnFocus = function() {
        var hasFocus = this.state.hasFocus;
        var openOnKeyboardFocus = this.props.openOnKeyboardFocus;
        return !this._isFocusedByClick && openOnKeyboardFocus === true && !hasFocus;
      };
      DropdownInternal2.defaultProps = {
        options: []
      };
      return DropdownInternal2;
    }(React57.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Dropdown/Dropdown.styles.js
  var _a6;
  var _b2;
  var _c2;
  var _d2;
  var GlobalClassNames10 = {
    root: "ms-Dropdown-container",
    label: "ms-Dropdown-label",
    dropdown: "ms-Dropdown",
    title: "ms-Dropdown-title",
    caretDownWrapper: "ms-Dropdown-caretDownWrapper",
    caretDown: "ms-Dropdown-caretDown",
    callout: "ms-Dropdown-callout",
    panel: "ms-Dropdown-panel",
    dropdownItems: "ms-Dropdown-items",
    dropdownItem: "ms-Dropdown-item",
    dropdownDivider: "ms-Dropdown-divider",
    dropdownOptionText: "ms-Dropdown-optionText",
    dropdownItemHeader: "ms-Dropdown-header",
    titleIsPlaceHolder: "ms-Dropdown-titleIsPlaceHolder",
    titleHasError: "ms-Dropdown-title--hasError"
  };
  var DROPDOWN_HEIGHT = 32;
  var DROPDOWN_ITEM_HEIGHT = 36;
  var highContrastAdjustMixin = (_a6 = {}, _a6["".concat(HighContrastSelector, ", ").concat(HighContrastSelectorWhite.replace("@media ", ""))] = __assign({}, getHighContrastNoAdjustStyle()), _a6);
  var highContrastItemAndTitleStateMixin = {
    selectors: __assign((_b2 = {}, _b2[HighContrastSelector] = {
      backgroundColor: "Highlight",
      borderColor: "Highlight",
      color: "HighlightText"
    }, _b2[".ms-Checkbox-checkbox"] = (_c2 = {}, _c2[HighContrastSelector] = {
      borderColor: "HighlightText"
    }, _c2), _b2), highContrastAdjustMixin)
  };
  var highContrastBorderState = {
    selectors: (_d2 = {}, _d2[HighContrastSelector] = {
      borderColor: "Highlight"
    }, _d2)
  };
  var MinimumScreenSelector = getScreenSelector(0, ScreenWidthMinMedium);
  var getStyles18 = function(props) {
    var _a7, _b3, _c3, _d3, _e2, _f, _g, _h, _j, _k, _l, _m;
    var theme = props.theme, hasError = props.hasError, hasLabel = props.hasLabel, className = props.className, isOpen = props.isOpen, disabled = props.disabled, required = props.required, isRenderingPlaceholder = props.isRenderingPlaceholder, panelClassName = props.panelClassName, calloutClassName = props.calloutClassName, calloutRenderEdge = props.calloutRenderEdge;
    if (!theme) {
      throw new Error("theme is undefined or null in base Dropdown getStyles function.");
    }
    var globalClassnames = getGlobalClassNames(GlobalClassNames10, theme);
    var palette = theme.palette, semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
    var rootHoverFocusActiveSelectorNeutralDarkMixin = {
      color: semanticColors.menuItemTextHovered
    };
    var rootHoverFocusActiveSelectorNeutralPrimaryMixin = {
      color: semanticColors.menuItemText
    };
    var borderColorError = {
      borderColor: semanticColors.errorText
    };
    var dropdownItemStyle = [
      globalClassnames.dropdownItem,
      {
        backgroundColor: "transparent",
        boxSizing: "border-box",
        cursor: "pointer",
        display: "flex",
        alignItems: "center",
        padding: "0 8px",
        width: "100%",
        minHeight: DROPDOWN_ITEM_HEIGHT,
        lineHeight: 20,
        height: 0,
        position: "relative",
        border: "1px solid transparent",
        borderRadius: 0,
        wordWrap: "break-word",
        overflowWrap: "break-word",
        textAlign: "left",
        ".ms-Button-flexContainer": {
          width: "100%"
        }
      }
    ];
    var dropdownHeaderStyle = [
      globalClassnames.dropdownItemHeader,
      __assign(__assign({}, fonts.medium), { fontWeight: FontWeights.semibold, color: semanticColors.menuHeader, background: "none", backgroundColor: "transparent", border: "none", height: DROPDOWN_ITEM_HEIGHT, lineHeight: DROPDOWN_ITEM_HEIGHT, cursor: "default", padding: "0 8px", userSelect: "none", textAlign: "left", selectors: (_a7 = {}, _a7[HighContrastSelector] = __assign({ color: "GrayText" }, getHighContrastNoAdjustStyle()), _a7) })
    ];
    var selectedItemBackgroundColor = semanticColors.menuItemBackgroundPressed;
    var itemSelectors = function(isSelected) {
      var _a8, _b4;
      if (isSelected === void 0) {
        isSelected = false;
      }
      return {
        selectors: (_a8 = {
          "&:hover": [
            {
              color: semanticColors.menuItemTextHovered,
              backgroundColor: !isSelected ? semanticColors.menuItemBackgroundHovered : selectedItemBackgroundColor
            },
            highContrastItemAndTitleStateMixin
          ],
          "&.is-multi-select:hover": [
            { backgroundColor: !isSelected ? "transparent" : selectedItemBackgroundColor },
            highContrastItemAndTitleStateMixin
          ],
          "&:active:hover": [
            {
              color: semanticColors.menuItemTextHovered,
              backgroundColor: !isSelected ? semanticColors.menuItemBackgroundPressed : semanticColors.menuItemBackgroundHovered
            },
            highContrastItemAndTitleStateMixin
          ]
        }, _a8[".".concat(IsFocusVisibleClassName, " &:focus:after")] = (_b4 = {
          left: 0,
          top: 0,
          bottom: 0,
          right: 0
        }, _b4[HighContrastSelector] = {
          inset: "2px"
        }, _b4), _a8[HighContrastSelector] = {
          border: "none"
        }, _a8)
      };
    };
    var dropdownItemSelected = __spreadArray(__spreadArray([], dropdownItemStyle, true), [
      {
        backgroundColor: selectedItemBackgroundColor,
        color: semanticColors.menuItemTextHovered
      },
      itemSelectors(true),
      highContrastItemAndTitleStateMixin
    ], false);
    var dropdownItemDisabled = __spreadArray(__spreadArray([], dropdownItemStyle, true), [
      {
        color: semanticColors.disabledText,
        cursor: "default",
        selectors: (_b3 = {}, _b3[HighContrastSelector] = {
          color: "GrayText",
          border: "none"
        }, _b3)
      }
    ], false);
    var titleOpenBorderRadius = calloutRenderEdge === RectangleEdge.bottom ? "".concat(effects.roundedCorner2, " ").concat(effects.roundedCorner2, " 0 0") : "0 0 ".concat(effects.roundedCorner2, " ").concat(effects.roundedCorner2);
    var calloutOpenBorderRadius = calloutRenderEdge === RectangleEdge.bottom ? "0 0 ".concat(effects.roundedCorner2, " ").concat(effects.roundedCorner2) : "".concat(effects.roundedCorner2, " ").concat(effects.roundedCorner2, " 0 0");
    return {
      root: [globalClassnames.root, className],
      label: globalClassnames.label,
      dropdown: [
        globalClassnames.dropdown,
        normalize,
        fonts.medium,
        {
          color: semanticColors.menuItemText,
          borderColor: semanticColors.focusBorder,
          position: "relative",
          outline: 0,
          userSelect: "none",
          selectors: (_c3 = {}, _c3["&:hover ." + globalClassnames.title] = [
            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
            { borderColor: isOpen ? palette.neutralSecondary : palette.neutralPrimary },
            highContrastBorderState
          ], _c3["&:focus ." + globalClassnames.title] = [
            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
            { selectors: (_d3 = {}, _d3[HighContrastSelector] = { color: "Highlight" }, _d3) }
          ], _c3["&:focus:after"] = [
            {
              pointerEvents: "none",
              content: "''",
              position: "absolute",
              boxSizing: "border-box",
              top: "0px",
              left: "0px",
              width: "100%",
              height: "100%",
              // see https://github.com/microsoft/fluentui/pull/9182 for semantic color disc
              border: !disabled ? "2px solid ".concat(palette.themePrimary) : "none",
              borderRadius: "2px",
              selectors: (_e2 = {}, _e2[HighContrastSelector] = {
                color: "Highlight"
              }, _e2)
            }
          ], _c3["&:active ." + globalClassnames.title] = [
            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
            { borderColor: palette.themePrimary },
            highContrastBorderState
          ], _c3["&:hover ." + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _c3["&:focus ." + globalClassnames.caretDown] = [
            !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin,
            { selectors: (_f = {}, _f[HighContrastSelector] = { color: "Highlight" }, _f) }
          ], _c3["&:active ." + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _c3["&:hover ." + globalClassnames.titleIsPlaceHolder] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _c3["&:focus ." + globalClassnames.titleIsPlaceHolder] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _c3["&:active ." + globalClassnames.titleIsPlaceHolder] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _c3["&:hover ." + globalClassnames.titleHasError] = borderColorError, _c3["&:active ." + globalClassnames.titleHasError] = borderColorError, _c3)
        },
        isOpen && "is-open",
        disabled && "is-disabled",
        required && "is-required",
        required && !hasLabel && {
          selectors: (_g = {
            ":before": {
              content: "'*'",
              color: semanticColors.errorText,
              position: "absolute",
              top: -5,
              right: -10
            }
          }, _g[HighContrastSelector] = {
            selectors: {
              ":after": {
                right: -14
                // moving the * 4 pixel to right to alleviate border clipping in HC mode.
              }
            }
          }, _g)
        }
      ],
      title: [
        globalClassnames.title,
        normalize,
        {
          backgroundColor: semanticColors.inputBackground,
          borderWidth: 1,
          borderStyle: "solid",
          borderColor: semanticColors.inputBorder,
          borderRadius: isOpen ? titleOpenBorderRadius : effects.roundedCorner2,
          cursor: "pointer",
          display: "block",
          height: DROPDOWN_HEIGHT,
          lineHeight: DROPDOWN_HEIGHT - 2,
          padding: "0 28px 0 8px",
          position: "relative",
          overflow: "hidden",
          whiteSpace: "nowrap",
          textOverflow: "ellipsis"
        },
        isRenderingPlaceholder && [globalClassnames.titleIsPlaceHolder, { color: semanticColors.inputPlaceholderText }],
        hasError && [globalClassnames.titleHasError, borderColorError],
        disabled && {
          backgroundColor: semanticColors.disabledBackground,
          border: "none",
          color: semanticColors.disabledText,
          cursor: "default",
          selectors: (_h = {}, _h[HighContrastSelector] = __assign({ border: "1px solid GrayText", color: "GrayText", backgroundColor: "Window" }, getHighContrastNoAdjustStyle()), _h)
        }
      ],
      caretDownWrapper: [
        globalClassnames.caretDownWrapper,
        {
          height: DROPDOWN_HEIGHT,
          lineHeight: DROPDOWN_HEIGHT - 2,
          paddingTop: 1,
          position: "absolute",
          right: 8,
          top: 0
        },
        !disabled && {
          cursor: "pointer"
        }
      ],
      caretDown: [
        globalClassnames.caretDown,
        { color: palette.neutralSecondary, fontSize: fonts.small.fontSize, pointerEvents: "none" },
        disabled && {
          color: semanticColors.disabledText,
          selectors: (_j = {}, _j[HighContrastSelector] = __assign({ color: "GrayText" }, getHighContrastNoAdjustStyle()), _j)
        }
      ],
      errorMessage: __assign(__assign({ color: semanticColors.errorText }, theme.fonts.small), { paddingTop: 5 }),
      callout: [
        globalClassnames.callout,
        {
          boxShadow: effects.elevation8,
          borderRadius: calloutOpenBorderRadius,
          selectors: (_k = {}, _k[".ms-Callout-main"] = { borderRadius: calloutOpenBorderRadius }, _k)
        },
        calloutClassName
      ],
      dropdownItemsWrapper: { selectors: { "&:focus": { outline: 0 } } },
      dropdownItems: [globalClassnames.dropdownItems, { display: "block" }],
      dropdownItem: __spreadArray(__spreadArray([], dropdownItemStyle, true), [itemSelectors()], false),
      dropdownItemSelected,
      dropdownItemDisabled,
      dropdownItemSelectedAndDisabled: [dropdownItemSelected, dropdownItemDisabled, { backgroundColor: "transparent" }],
      dropdownItemHidden: __spreadArray(__spreadArray([], dropdownItemStyle, true), [{ display: "none" }], false),
      dropdownDivider: [globalClassnames.dropdownDivider, { height: 1, backgroundColor: semanticColors.bodyDivider }],
      dropdownDividerHidden: [globalClassnames.dropdownDivider, { display: "none" }],
      dropdownOptionText: [
        globalClassnames.dropdownOptionText,
        {
          overflow: "hidden",
          whiteSpace: "nowrap",
          textOverflow: "ellipsis",
          minWidth: 0,
          maxWidth: "100%",
          wordWrap: "break-word",
          overflowWrap: "break-word",
          margin: "1px"
        }
      ],
      dropdownItemHeader: dropdownHeaderStyle,
      dropdownItemHeaderHidden: __spreadArray(__spreadArray([], dropdownHeaderStyle, true), [{ display: "none" }], false),
      subComponentStyles: {
        label: { root: { display: "inline-block" } },
        multiSelectItem: {
          root: {
            padding: 0
          },
          label: {
            alignSelf: "stretch",
            padding: "0 8px",
            width: "100%"
          },
          input: {
            selectors: (_l = {}, _l[".".concat(IsFocusVisibleClassName, " &:focus + label::before")] = {
              outlineOffset: "0px"
            }, _l)
          }
        },
        panel: {
          root: [panelClassName],
          main: {
            selectors: (_m = {}, // In case of extra small screen sizes
            _m[MinimumScreenSelector] = {
              // panelWidth xs
              width: 272
            }, _m)
          },
          contentInner: { padding: "0 0 20px" }
        }
      }
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Dropdown/Dropdown.js
  var Dropdown = styled(DropdownBase, getStyles18, void 0, {
    scope: "Dropdown"
  });
  Dropdown.displayName = "Dropdown";

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons.js
  function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons"',
        src: "url('".concat(baseUrl, "fabric-icons-a13498cf.woff') format('woff')")
      },
      icons: {
        GlobalNavButton: "\uE700",
        ChevronDown: "\uE70D",
        ChevronUp: "\uE70E",
        Edit: "\uE70F",
        Add: "\uE710",
        Cancel: "\uE711",
        More: "\uE712",
        Settings: "\uE713",
        Mail: "\uE715",
        Filter: "\uE71C",
        Search: "\uE721",
        Share: "\uE72D",
        BlockedSite: "\uE72F",
        FavoriteStar: "\uE734",
        FavoriteStarFill: "\uE735",
        CheckMark: "\uE73E",
        Delete: "\uE74D",
        ChevronLeft: "\uE76B",
        ChevronRight: "\uE76C",
        Calendar: "\uE787",
        Megaphone: "\uE789",
        Undo: "\uE7A7",
        Flag: "\uE7C1",
        Page: "\uE7C3",
        Pinned: "\uE840",
        View: "\uE890",
        Clear: "\uE894",
        Download: "\uE896",
        Upload: "\uE898",
        Folder: "\uE8B7",
        Sort: "\uE8CB",
        AlignRight: "\uE8E2",
        AlignLeft: "\uE8E4",
        Tag: "\uE8EC",
        AddFriend: "\uE8FA",
        Info: "\uE946",
        SortLines: "\uE9D0",
        List: "\uEA37",
        CircleRing: "\uEA3A",
        Heart: "\uEB51",
        HeartFill: "\uEB52",
        Tiles: "\uECA5",
        Embed: "\uECCE",
        Glimmer: "\uECF4",
        Ascending: "\uEDC0",
        Descending: "\uEDC1",
        SortUp: "\uEE68",
        SortDown: "\uEE69",
        SyncToPC: "\uEE6E",
        LargeGrid: "\uEECB",
        SkypeCheck: "\uEF80",
        SkypeClock: "\uEF81",
        SkypeMinus: "\uEF82",
        ClearFilter: "\uEF8F",
        Flow: "\uEF90",
        StatusCircleCheckmark: "\uF13E",
        MoreVertical: "\uF2BC"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-0.js
  function initializeIcons2(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-0"',
        src: "url('".concat(baseUrl, "fabric-icons-0-467ee27f.woff') format('woff')")
      },
      icons: {
        "PageLink": "\uE302",
        "CommentSolid": "\uE30E",
        "ChangeEntitlements": "\uE310",
        "Installation": "\uE311",
        "WebAppBuilderModule": "\uE313",
        "WebAppBuilderFragment": "\uE314",
        "WebAppBuilderSlot": "\uE315",
        "BullseyeTargetEdit": "\uE319",
        "WebAppBuilderFragmentCreate": "\uE31B",
        "PageData": "\uE31C",
        "PageHeaderEdit": "\uE31D",
        "ProductList": "\uE31E",
        "UnpublishContent": "\uE31F",
        "DependencyAdd": "\uE344",
        "DependencyRemove": "\uE345",
        "EntitlementPolicy": "\uE346",
        "EntitlementRedemption": "\uE347",
        "SchoolDataSyncLogo": "\uE34C",
        "PinSolid12": "\uE352",
        "PinSolidOff12": "\uE353",
        "AddLink": "\uE35E",
        "SharepointAppIcon16": "\uE365",
        "DataflowsLink": "\uE366",
        "TimePicker": "\uE367",
        "UserWarning": "\uE368",
        "ComplianceAudit": "\uE369",
        "InternetSharing": "\uE704",
        "Brightness": "\uE706",
        "MapPin": "\uE707",
        "Airplane": "\uE709",
        "Tablet": "\uE70A",
        "QuickNote": "\uE70B",
        "Video": "\uE714",
        "People": "\uE716",
        "Phone": "\uE717",
        "Pin": "\uE718",
        "Shop": "\uE719",
        "Stop": "\uE71A",
        "Link": "\uE71B",
        "AllApps": "\uE71D",
        "Zoom": "\uE71E",
        "ZoomOut": "\uE71F",
        "Microphone": "\uE720",
        "Camera": "\uE722",
        "Attach": "\uE723",
        "Send": "\uE724",
        "FavoriteList": "\uE728",
        "PageSolid": "\uE729",
        "Forward": "\uE72A",
        "Back": "\uE72B",
        "Refresh": "\uE72C",
        "Lock": "\uE72E",
        "ReportHacked": "\uE730",
        "EMI": "\uE731",
        "MiniLink": "\uE732",
        "Blocked": "\uE733",
        "ReadingMode": "\uE736",
        "Favicon": "\uE737",
        "Remove": "\uE738",
        "Checkbox": "\uE739",
        "CheckboxComposite": "\uE73A",
        "CheckboxFill": "\uE73B",
        "CheckboxIndeterminate": "\uE73C",
        "CheckboxCompositeReversed": "\uE73D",
        "BackToWindow": "\uE73F",
        "FullScreen": "\uE740",
        "Print": "\uE749",
        "Up": "\uE74A",
        "Down": "\uE74B",
        "OEM": "\uE74C",
        "Save": "\uE74E",
        "ReturnKey": "\uE751",
        "Cloud": "\uE753",
        "Flashlight": "\uE754",
        "CommandPrompt": "\uE756",
        "Sad": "\uE757",
        "RealEstate": "\uE758",
        "SIPMove": "\uE759",
        "EraseTool": "\uE75C",
        "GripperTool": "\uE75E",
        "Dialpad": "\uE75F",
        "PageLeft": "\uE760",
        "PageRight": "\uE761",
        "MultiSelect": "\uE762",
        "KeyboardClassic": "\uE765",
        "Play": "\uE768",
        "Pause": "\uE769",
        "InkingTool": "\uE76D",
        "Emoji2": "\uE76E",
        "GripperBarHorizontal": "\uE76F",
        "System": "\uE770",
        "Personalize": "\uE771",
        "SearchAndApps": "\uE773",
        "Globe": "\uE774",
        "EaseOfAccess": "\uE776",
        "ContactInfo": "\uE779",
        "Unpin": "\uE77A",
        "Contact": "\uE77B",
        "Memo": "\uE77C",
        "IncomingCall": "\uE77E"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-1.js
  function initializeIcons3(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-1"',
        src: "url('".concat(baseUrl, "fabric-icons-1-4d521695.woff') format('woff')")
      },
      icons: {
        "Paste": "\uE77F",
        "WindowsLogo": "\uE782",
        "Error": "\uE783",
        "GripperBarVertical": "\uE784",
        "Unlock": "\uE785",
        "Slideshow": "\uE786",
        "Trim": "\uE78A",
        "AutoEnhanceOn": "\uE78D",
        "AutoEnhanceOff": "\uE78E",
        "Color": "\uE790",
        "SaveAs": "\uE792",
        "Light": "\uE793",
        "Filters": "\uE795",
        "AspectRatio": "\uE799",
        "Contrast": "\uE7A1",
        "Redo": "\uE7A6",
        "Crop": "\uE7A8",
        "PhotoCollection": "\uE7AA",
        "Album": "\uE7AB",
        "Rotate": "\uE7AD",
        "PanoIndicator": "\uE7B0",
        "Translate": "\uE7B2",
        "RedEye": "\uE7B3",
        "ViewOriginal": "\uE7B4",
        "ThumbnailView": "\uE7B6",
        "Package": "\uE7B8",
        "Telemarketer": "\uE7B9",
        "Warning": "\uE7BA",
        "Financial": "\uE7BB",
        "Education": "\uE7BE",
        "ShoppingCart": "\uE7BF",
        "Train": "\uE7C0",
        "Move": "\uE7C2",
        "TouchPointer": "\uE7C9",
        "Merge": "\uE7D5",
        "TurnRight": "\uE7DB",
        "Ferry": "\uE7E3",
        "Highlight": "\uE7E6",
        "PowerButton": "\uE7E8",
        "Tab": "\uE7E9",
        "Admin": "\uE7EF",
        "TVMonitor": "\uE7F4",
        "Speakers": "\uE7F5",
        "Game": "\uE7FC",
        "HorizontalTabKey": "\uE7FD",
        "UnstackSelected": "\uE7FE",
        "StackIndicator": "\uE7FF",
        "Nav2DMapView": "\uE800",
        "StreetsideSplitMinimize": "\uE802",
        "Car": "\uE804",
        "Bus": "\uE806",
        "EatDrink": "\uE807",
        "SeeDo": "\uE808",
        "LocationCircle": "\uE80E",
        "Home": "\uE80F",
        "SwitcherStartEnd": "\uE810",
        "ParkingLocation": "\uE811",
        "IncidentTriangle": "\uE814",
        "Touch": "\uE815",
        "MapDirections": "\uE816",
        "CaretHollow": "\uE817",
        "CaretSolid": "\uE818",
        "History": "\uE81C",
        "Location": "\uE81D",
        "MapLayers": "\uE81E",
        "SearchNearby": "\uE820",
        "Work": "\uE821",
        "Recent": "\uE823",
        "Hotel": "\uE824",
        "Bank": "\uE825",
        "LocationDot": "\uE827",
        "Dictionary": "\uE82D",
        "ChromeBack": "\uE830",
        "FolderOpen": "\uE838",
        "PinnedFill": "\uE842",
        "RevToggleKey": "\uE845",
        "USB": "\uE88E",
        "Previous": "\uE892",
        "Next": "\uE893",
        "Sync": "\uE895",
        "Help": "\uE897",
        "Emoji": "\uE899",
        "MailForward": "\uE89C",
        "ClosePane": "\uE89F",
        "OpenPane": "\uE8A0",
        "PreviewLink": "\uE8A1",
        "ZoomIn": "\uE8A3",
        "Bookmarks": "\uE8A4",
        "Document": "\uE8A5",
        "ProtectedDocument": "\uE8A6",
        "OpenInNewWindow": "\uE8A7",
        "MailFill": "\uE8A8",
        "ViewAll": "\uE8A9",
        "Switch": "\uE8AB",
        "Rename": "\uE8AC",
        "Go": "\uE8AD",
        "Remote": "\uE8AF",
        "SelectAll": "\uE8B3",
        "Orientation": "\uE8B4",
        "Import": "\uE8B5"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-2.js
  function initializeIcons4(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-2"',
        src: "url('".concat(baseUrl, "fabric-icons-2-63c99abf.woff') format('woff')")
      },
      icons: {
        "Picture": "\uE8B9",
        "ChromeClose": "\uE8BB",
        "ShowResults": "\uE8BC",
        "Message": "\uE8BD",
        "CalendarDay": "\uE8BF",
        "CalendarWeek": "\uE8C0",
        "MailReplyAll": "\uE8C2",
        "Read": "\uE8C3",
        "Cut": "\uE8C6",
        "PaymentCard": "\uE8C7",
        "Copy": "\uE8C8",
        "Important": "\uE8C9",
        "MailReply": "\uE8CA",
        "GotoToday": "\uE8D1",
        "Font": "\uE8D2",
        "FontColor": "\uE8D3",
        "FolderFill": "\uE8D5",
        "Permissions": "\uE8D7",
        "DisableUpdates": "\uE8D8",
        "Unfavorite": "\uE8D9",
        "Italic": "\uE8DB",
        "Underline": "\uE8DC",
        "Bold": "\uE8DD",
        "MoveToFolder": "\uE8DE",
        "Dislike": "\uE8E0",
        "Like": "\uE8E1",
        "AlignCenter": "\uE8E3",
        "OpenFile": "\uE8E5",
        "ClearSelection": "\uE8E6",
        "FontDecrease": "\uE8E7",
        "FontIncrease": "\uE8E8",
        "FontSize": "\uE8E9",
        "CellPhone": "\uE8EA",
        "RepeatOne": "\uE8ED",
        "RepeatAll": "\uE8EE",
        "Calculator": "\uE8EF",
        "Library": "\uE8F1",
        "PostUpdate": "\uE8F3",
        "NewFolder": "\uE8F4",
        "CalendarReply": "\uE8F5",
        "UnsyncFolder": "\uE8F6",
        "SyncFolder": "\uE8F7",
        "BlockContact": "\uE8F8",
        "Accept": "\uE8FB",
        "BulletedList": "\uE8FD",
        "Preview": "\uE8FF",
        "News": "\uE900",
        "Chat": "\uE901",
        "Group": "\uE902",
        "World": "\uE909",
        "Comment": "\uE90A",
        "DockLeft": "\uE90C",
        "DockRight": "\uE90D",
        "Repair": "\uE90F",
        "Accounts": "\uE910",
        "Street": "\uE913",
        "RadioBullet": "\uE915",
        "Stopwatch": "\uE916",
        "Clock": "\uE917",
        "WorldClock": "\uE918",
        "AlarmClock": "\uE919",
        "Photo": "\uE91B",
        "ActionCenter": "\uE91C",
        "Hospital": "\uE91D",
        "Timer": "\uE91E",
        "FullCircleMask": "\uE91F",
        "LocationFill": "\uE920",
        "ChromeMinimize": "\uE921",
        "ChromeRestore": "\uE923",
        "Annotation": "\uE924",
        "Fingerprint": "\uE928",
        "Handwriting": "\uE929",
        "ChromeFullScreen": "\uE92D",
        "Completed": "\uE930",
        "Label": "\uE932",
        "FlickDown": "\uE935",
        "FlickUp": "\uE936",
        "FlickLeft": "\uE937",
        "FlickRight": "\uE938",
        "MiniExpand": "\uE93A",
        "MiniContract": "\uE93B",
        "Streaming": "\uE93E",
        "MusicInCollection": "\uE940",
        "OneDriveLogo": "\uE941",
        "CompassNW": "\uE942",
        "Code": "\uE943",
        "LightningBolt": "\uE945",
        "CalculatorMultiply": "\uE947",
        "CalculatorAddition": "\uE948",
        "CalculatorSubtract": "\uE949",
        "CalculatorPercentage": "\uE94C",
        "CalculatorEqualTo": "\uE94E",
        "PrintfaxPrinterFile": "\uE956",
        "StorageOptical": "\uE958",
        "Communications": "\uE95A",
        "Headset": "\uE95B",
        "Health": "\uE95E",
        "Webcam2": "\uE960",
        "FrontCamera": "\uE96B",
        "ChevronUpSmall": "\uE96D"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-3.js
  function initializeIcons5(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-3"',
        src: "url('".concat(baseUrl, "fabric-icons-3-089e217a.woff') format('woff')")
      },
      icons: {
        "ChevronDownSmall": "\uE96E",
        "ChevronLeftSmall": "\uE96F",
        "ChevronRightSmall": "\uE970",
        "ChevronUpMed": "\uE971",
        "ChevronDownMed": "\uE972",
        "ChevronLeftMed": "\uE973",
        "ChevronRightMed": "\uE974",
        "Devices2": "\uE975",
        "PC1": "\uE977",
        "PresenceChickletVideo": "\uE979",
        "Reply": "\uE97A",
        "HalfAlpha": "\uE97E",
        "ConstructionCone": "\uE98F",
        "DoubleChevronLeftMed": "\uE991",
        "Volume0": "\uE992",
        "Volume1": "\uE993",
        "Volume2": "\uE994",
        "Volume3": "\uE995",
        "Chart": "\uE999",
        "Robot": "\uE99A",
        "Manufacturing": "\uE99C",
        "LockSolid": "\uE9A2",
        "FitPage": "\uE9A6",
        "FitWidth": "\uE9A7",
        "BidiLtr": "\uE9AA",
        "BidiRtl": "\uE9AB",
        "RightDoubleQuote": "\uE9B1",
        "Sunny": "\uE9BD",
        "CloudWeather": "\uE9BE",
        "Cloudy": "\uE9BF",
        "PartlyCloudyDay": "\uE9C0",
        "PartlyCloudyNight": "\uE9C1",
        "ClearNight": "\uE9C2",
        "RainShowersDay": "\uE9C3",
        "Rain": "\uE9C4",
        "Thunderstorms": "\uE9C6",
        "RainSnow": "\uE9C7",
        "Snow": "\uE9C8",
        "BlowingSnow": "\uE9C9",
        "Frigid": "\uE9CA",
        "Fog": "\uE9CB",
        "Squalls": "\uE9CC",
        "Duststorm": "\uE9CD",
        "Unknown": "\uE9CE",
        "Precipitation": "\uE9CF",
        "Ribbon": "\uE9D1",
        "AreaChart": "\uE9D2",
        "Assign": "\uE9D3",
        "FlowChart": "\uE9D4",
        "CheckList": "\uE9D5",
        "Diagnostic": "\uE9D9",
        "Generate": "\uE9DA",
        "LineChart": "\uE9E6",
        "Equalizer": "\uE9E9",
        "BarChartHorizontal": "\uE9EB",
        "BarChartVertical": "\uE9EC",
        "Freezing": "\uE9EF",
        "FunnelChart": "\uE9F1",
        "Processing": "\uE9F5",
        "Quantity": "\uE9F8",
        "ReportDocument": "\uE9F9",
        "StackColumnChart": "\uE9FC",
        "SnowShowerDay": "\uE9FD",
        "HailDay": "\uEA00",
        "WorkFlow": "\uEA01",
        "HourGlass": "\uEA03",
        "StoreLogoMed20": "\uEA04",
        "TimeSheet": "\uEA05",
        "TriangleSolid": "\uEA08",
        "UpgradeAnalysis": "\uEA0B",
        "VideoSolid": "\uEA0C",
        "RainShowersNight": "\uEA0F",
        "SnowShowerNight": "\uEA11",
        "Teamwork": "\uEA12",
        "HailNight": "\uEA13",
        "PeopleAdd": "\uEA15",
        "Glasses": "\uEA16",
        "DateTime2": "\uEA17",
        "Shield": "\uEA18",
        "Header1": "\uEA19",
        "PageAdd": "\uEA1A",
        "NumberedList": "\uEA1C",
        "PowerBILogo": "\uEA1E",
        "Info2": "\uEA1F",
        "MusicInCollectionFill": "\uEA36",
        "Asterisk": "\uEA38",
        "ErrorBadge": "\uEA39",
        "CircleFill": "\uEA3B",
        "Record2": "\uEA3F",
        "AllAppsMirrored": "\uEA40",
        "BookmarksMirrored": "\uEA41",
        "BulletedListMirrored": "\uEA42",
        "CaretHollowMirrored": "\uEA45",
        "CaretSolidMirrored": "\uEA46",
        "ChromeBackMirrored": "\uEA47",
        "ClearSelectionMirrored": "\uEA48",
        "ClosePaneMirrored": "\uEA49",
        "DockLeftMirrored": "\uEA4C",
        "DoubleChevronLeftMedMirrored": "\uEA4D",
        "GoMirrored": "\uEA4F"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-4.js
  function initializeIcons6(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-4"',
        src: "url('".concat(baseUrl, "fabric-icons-4-a656cc0a.woff') format('woff')")
      },
      icons: {
        "HelpMirrored": "\uEA51",
        "ImportMirrored": "\uEA52",
        "ImportAllMirrored": "\uEA53",
        "ListMirrored": "\uEA55",
        "MailForwardMirrored": "\uEA56",
        "MailReplyMirrored": "\uEA57",
        "MailReplyAllMirrored": "\uEA58",
        "MiniContractMirrored": "\uEA59",
        "MiniExpandMirrored": "\uEA5A",
        "OpenPaneMirrored": "\uEA5B",
        "ParkingLocationMirrored": "\uEA5E",
        "SendMirrored": "\uEA63",
        "ShowResultsMirrored": "\uEA65",
        "ThumbnailViewMirrored": "\uEA67",
        "Media": "\uEA69",
        "Devices3": "\uEA6C",
        "Focus": "\uEA6F",
        "VideoLightOff": "\uEA74",
        "Lightbulb": "\uEA80",
        "StatusTriangle": "\uEA82",
        "VolumeDisabled": "\uEA85",
        "Puzzle": "\uEA86",
        "EmojiNeutral": "\uEA87",
        "EmojiDisappointed": "\uEA88",
        "HomeSolid": "\uEA8A",
        "Ringer": "\uEA8F",
        "PDF": "\uEA90",
        "HeartBroken": "\uEA92",
        "StoreLogo16": "\uEA96",
        "MultiSelectMirrored": "\uEA98",
        "Broom": "\uEA99",
        "AddToShoppingList": "\uEA9A",
        "Cocktails": "\uEA9D",
        "Wines": "\uEABF",
        "Articles": "\uEAC1",
        "Cycling": "\uEAC7",
        "DietPlanNotebook": "\uEAC8",
        "Pill": "\uEACB",
        "ExerciseTracker": "\uEACC",
        "HandsFree": "\uEAD0",
        "Medical": "\uEAD4",
        "Running": "\uEADA",
        "Weights": "\uEADB",
        "Trackers": "\uEADF",
        "AddNotes": "\uEAE3",
        "AllCurrency": "\uEAE4",
        "BarChart4": "\uEAE7",
        "CirclePlus": "\uEAEE",
        "Coffee": "\uEAEF",
        "Cotton": "\uEAF3",
        "Market": "\uEAFC",
        "Money": "\uEAFD",
        "PieDouble": "\uEB04",
        "PieSingle": "\uEB05",
        "RemoveFilter": "\uEB08",
        "Savings": "\uEB0B",
        "Sell": "\uEB0C",
        "StockDown": "\uEB0F",
        "StockUp": "\uEB11",
        "Lamp": "\uEB19",
        "Source": "\uEB1B",
        "MSNVideos": "\uEB1C",
        "Cricket": "\uEB1E",
        "Golf": "\uEB1F",
        "Baseball": "\uEB20",
        "Soccer": "\uEB21",
        "MoreSports": "\uEB22",
        "AutoRacing": "\uEB24",
        "CollegeHoops": "\uEB25",
        "CollegeFootball": "\uEB26",
        "ProFootball": "\uEB27",
        "ProHockey": "\uEB28",
        "Rugby": "\uEB2D",
        "SubstitutionsIn": "\uEB31",
        "Tennis": "\uEB33",
        "Arrivals": "\uEB34",
        "Design": "\uEB3C",
        "Website": "\uEB41",
        "Drop": "\uEB42",
        "HistoricalWeather": "\uEB43",
        "SkiResorts": "\uEB45",
        "Snowflake": "\uEB46",
        "BusSolid": "\uEB47",
        "FerrySolid": "\uEB48",
        "AirplaneSolid": "\uEB4C",
        "TrainSolid": "\uEB4D",
        "Ticket": "\uEB54",
        "WifiWarning4": "\uEB63",
        "Devices4": "\uEB66",
        "AzureLogo": "\uEB6A",
        "BingLogo": "\uEB6B",
        "MSNLogo": "\uEB6C",
        "OutlookLogoInverse": "\uEB6D",
        "OfficeLogo": "\uEB6E",
        "SkypeLogo": "\uEB6F",
        "Door": "\uEB75",
        "EditMirrored": "\uEB7E",
        "GiftCard": "\uEB8E",
        "DoubleBookmark": "\uEB8F",
        "StatusErrorFull": "\uEB90"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-5.js
  function initializeIcons7(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-5"',
        src: "url('".concat(baseUrl, "fabric-icons-5-f95ba260.woff') format('woff')")
      },
      icons: {
        "Certificate": "\uEB95",
        "FastForward": "\uEB9D",
        "Rewind": "\uEB9E",
        "Photo2": "\uEB9F",
        "OpenSource": "\uEBC2",
        "Movers": "\uEBCD",
        "CloudDownload": "\uEBD3",
        "Family": "\uEBDA",
        "WindDirection": "\uEBE6",
        "Bug": "\uEBE8",
        "SiteScan": "\uEBEC",
        "BrowserScreenShot": "\uEBED",
        "F12DevTools": "\uEBEE",
        "CSS": "\uEBEF",
        "JS": "\uEBF0",
        "DeliveryTruck": "\uEBF4",
        "ReminderPerson": "\uEBF7",
        "ReminderGroup": "\uEBF8",
        "ReminderTime": "\uEBF9",
        "TabletMode": "\uEBFC",
        "Umbrella": "\uEC04",
        "NetworkTower": "\uEC05",
        "CityNext": "\uEC06",
        "CityNext2": "\uEC07",
        "Section": "\uEC0C",
        "OneNoteLogoInverse": "\uEC0D",
        "ToggleFilled": "\uEC11",
        "ToggleBorder": "\uEC12",
        "SliderThumb": "\uEC13",
        "ToggleThumb": "\uEC14",
        "Documentation": "\uEC17",
        "Badge": "\uEC1B",
        "Giftbox": "\uEC1F",
        "VisualStudioLogo": "\uEC22",
        "HomeGroup": "\uEC26",
        "ExcelLogoInverse": "\uEC28",
        "WordLogoInverse": "\uEC29",
        "PowerPointLogoInverse": "\uEC2A",
        "Cafe": "\uEC32",
        "SpeedHigh": "\uEC4A",
        "Commitments": "\uEC4D",
        "ThisPC": "\uEC4E",
        "MusicNote": "\uEC4F",
        "MicOff": "\uEC54",
        "PlaybackRate1x": "\uEC57",
        "EdgeLogo": "\uEC60",
        "CompletedSolid": "\uEC61",
        "AlbumRemove": "\uEC62",
        "MessageFill": "\uEC70",
        "TabletSelected": "\uEC74",
        "MobileSelected": "\uEC75",
        "LaptopSelected": "\uEC76",
        "TVMonitorSelected": "\uEC77",
        "DeveloperTools": "\uEC7A",
        "Shapes": "\uEC7C",
        "InsertTextBox": "\uEC7D",
        "LowerBrightness": "\uEC8A",
        "WebComponents": "\uEC8B",
        "OfflineStorage": "\uEC8C",
        "DOM": "\uEC8D",
        "CloudUpload": "\uEC8E",
        "ScrollUpDown": "\uEC8F",
        "DateTime": "\uEC92",
        "Event": "\uECA3",
        "Cake": "\uECA4",
        "Org": "\uECA6",
        "PartyLeader": "\uECA7",
        "DRM": "\uECA8",
        "CloudAdd": "\uECA9",
        "AppIconDefault": "\uECAA",
        "Photo2Add": "\uECAB",
        "Photo2Remove": "\uECAC",
        "Calories": "\uECAD",
        "POI": "\uECAF",
        "AddTo": "\uECC8",
        "RadioBtnOff": "\uECCA",
        "RadioBtnOn": "\uECCB",
        "ExploreContent": "\uECCD",
        "Product": "\uECDC",
        "ProgressLoopInner": "\uECDE",
        "ProgressLoopOuter": "\uECDF",
        "Blocked2": "\uECE4",
        "FangBody": "\uECEB",
        "Toolbox": "\uECED",
        "PageHeader": "\uECEE",
        "ChatInviteFriend": "\uECFE",
        "Brush": "\uECFF",
        "Shirt": "\uED00",
        "Crown": "\uED01",
        "Diamond": "\uED02",
        "ScaleUp": "\uED09",
        "QRCode": "\uED14",
        "Feedback": "\uED15",
        "SharepointLogoInverse": "\uED18",
        "YammerLogo": "\uED19",
        "Hide": "\uED1A",
        "Uneditable": "\uED1D",
        "ReturnToSession": "\uED24",
        "OpenFolderHorizontal": "\uED25",
        "CalendarMirrored": "\uED28"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-6.js
  function initializeIcons8(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-6"',
        src: "url('".concat(baseUrl, "fabric-icons-6-ef6fd590.woff') format('woff')")
      },
      icons: {
        "SwayLogoInverse": "\uED29",
        "OutOfOffice": "\uED34",
        "Trophy": "\uED3F",
        "ReopenPages": "\uED50",
        "EmojiTabSymbols": "\uED58",
        "AADLogo": "\uED68",
        "AccessLogo": "\uED69",
        "AdminALogoInverse32": "\uED6A",
        "AdminCLogoInverse32": "\uED6B",
        "AdminDLogoInverse32": "\uED6C",
        "AdminELogoInverse32": "\uED6D",
        "AdminLLogoInverse32": "\uED6E",
        "AdminMLogoInverse32": "\uED6F",
        "AdminOLogoInverse32": "\uED70",
        "AdminPLogoInverse32": "\uED71",
        "AdminSLogoInverse32": "\uED72",
        "AdminYLogoInverse32": "\uED73",
        "DelveLogoInverse": "\uED76",
        "ExchangeLogoInverse": "\uED78",
        "LyncLogo": "\uED79",
        "OfficeVideoLogoInverse": "\uED7A",
        "SocialListeningLogo": "\uED7C",
        "VisioLogoInverse": "\uED7D",
        "Balloons": "\uED7E",
        "Cat": "\uED7F",
        "MailAlert": "\uED80",
        "MailCheck": "\uED81",
        "MailLowImportance": "\uED82",
        "MailPause": "\uED83",
        "MailRepeat": "\uED84",
        "SecurityGroup": "\uED85",
        "Table": "\uED86",
        "VoicemailForward": "\uED87",
        "VoicemailReply": "\uED88",
        "Waffle": "\uED89",
        "RemoveEvent": "\uED8A",
        "EventInfo": "\uED8B",
        "ForwardEvent": "\uED8C",
        "WipePhone": "\uED8D",
        "AddOnlineMeeting": "\uED8E",
        "JoinOnlineMeeting": "\uED8F",
        "RemoveLink": "\uED90",
        "PeopleBlock": "\uED91",
        "PeopleRepeat": "\uED92",
        "PeopleAlert": "\uED93",
        "PeoplePause": "\uED94",
        "TransferCall": "\uED95",
        "AddPhone": "\uED96",
        "UnknownCall": "\uED97",
        "NoteReply": "\uED98",
        "NoteForward": "\uED99",
        "NotePinned": "\uED9A",
        "RemoveOccurrence": "\uED9B",
        "Timeline": "\uED9C",
        "EditNote": "\uED9D",
        "CircleHalfFull": "\uED9E",
        "Room": "\uED9F",
        "Unsubscribe": "\uEDA0",
        "Subscribe": "\uEDA1",
        "HardDrive": "\uEDA2",
        "RecurringTask": "\uEDB2",
        "TaskManager": "\uEDB7",
        "TaskManagerMirrored": "\uEDB8",
        "Combine": "\uEDBB",
        "Split": "\uEDBC",
        "DoubleChevronUp": "\uEDBD",
        "DoubleChevronLeft": "\uEDBE",
        "DoubleChevronRight": "\uEDBF",
        "TextBox": "\uEDC2",
        "TextField": "\uEDC3",
        "NumberField": "\uEDC4",
        "Dropdown": "\uEDC5",
        "PenWorkspace": "\uEDC6",
        "BookingsLogo": "\uEDC7",
        "ClassNotebookLogoInverse": "\uEDC8",
        "DelveAnalyticsLogo": "\uEDCA",
        "DocsLogoInverse": "\uEDCB",
        "Dynamics365Logo": "\uEDCC",
        "DynamicSMBLogo": "\uEDCD",
        "OfficeAssistantLogo": "\uEDCE",
        "OfficeStoreLogo": "\uEDCF",
        "OneNoteEduLogoInverse": "\uEDD0",
        "PlannerLogo": "\uEDD1",
        "PowerApps": "\uEDD2",
        "Suitcase": "\uEDD3",
        "ProjectLogoInverse": "\uEDD4",
        "CaretLeft8": "\uEDD5",
        "CaretRight8": "\uEDD6",
        "CaretUp8": "\uEDD7",
        "CaretDown8": "\uEDD8",
        "CaretLeftSolid8": "\uEDD9",
        "CaretRightSolid8": "\uEDDA",
        "CaretUpSolid8": "\uEDDB",
        "CaretDownSolid8": "\uEDDC",
        "ClearFormatting": "\uEDDD",
        "Superscript": "\uEDDE",
        "Subscript": "\uEDDF",
        "Strikethrough": "\uEDE0",
        "Export": "\uEDE1",
        "ExportMirrored": "\uEDE2"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-7.js
  function initializeIcons9(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-7"',
        src: "url('".concat(baseUrl, "fabric-icons-7-2b97bb99.woff') format('woff')")
      },
      icons: {
        "SingleBookmark": "\uEDFF",
        "SingleBookmarkSolid": "\uEE00",
        "DoubleChevronDown": "\uEE04",
        "FollowUser": "\uEE05",
        "ReplyAll": "\uEE0A",
        "WorkforceManagement": "\uEE0F",
        "RecruitmentManagement": "\uEE12",
        "Questionnaire": "\uEE19",
        "ManagerSelfService": "\uEE23",
        "ProductionFloorManagement": "\uEE29",
        "ProductRelease": "\uEE2E",
        "ProductVariant": "\uEE30",
        "ReplyMirrored": "\uEE35",
        "ReplyAllMirrored": "\uEE36",
        "Medal": "\uEE38",
        "AddGroup": "\uEE3D",
        "QuestionnaireMirrored": "\uEE4B",
        "CloudImportExport": "\uEE55",
        "TemporaryUser": "\uEE58",
        "CaretSolid16": "\uEE62",
        "GroupedDescending": "\uEE66",
        "GroupedAscending": "\uEE67",
        "AwayStatus": "\uEE6A",
        "MyMoviesTV": "\uEE6C",
        "GenericScan": "\uEE6F",
        "AustralianRules": "\uEE70",
        "WifiEthernet": "\uEE77",
        "TrackersMirrored": "\uEE92",
        "DateTimeMirrored": "\uEE93",
        "StopSolid": "\uEE95",
        "DoubleChevronUp12": "\uEE96",
        "DoubleChevronDown12": "\uEE97",
        "DoubleChevronLeft12": "\uEE98",
        "DoubleChevronRight12": "\uEE99",
        "CalendarAgenda": "\uEE9A",
        "ConnectVirtualMachine": "\uEE9D",
        "AddEvent": "\uEEB5",
        "AssetLibrary": "\uEEB6",
        "DataConnectionLibrary": "\uEEB7",
        "DocLibrary": "\uEEB8",
        "FormLibrary": "\uEEB9",
        "FormLibraryMirrored": "\uEEBA",
        "ReportLibrary": "\uEEBB",
        "ReportLibraryMirrored": "\uEEBC",
        "ContactCard": "\uEEBD",
        "CustomList": "\uEEBE",
        "CustomListMirrored": "\uEEBF",
        "IssueTracking": "\uEEC0",
        "IssueTrackingMirrored": "\uEEC1",
        "PictureLibrary": "\uEEC2",
        "OfficeAddinsLogo": "\uEEC7",
        "OfflineOneDriveParachute": "\uEEC8",
        "OfflineOneDriveParachuteDisabled": "\uEEC9",
        "TriangleSolidUp12": "\uEECC",
        "TriangleSolidDown12": "\uEECD",
        "TriangleSolidLeft12": "\uEECE",
        "TriangleSolidRight12": "\uEECF",
        "TriangleUp12": "\uEED0",
        "TriangleDown12": "\uEED1",
        "TriangleLeft12": "\uEED2",
        "TriangleRight12": "\uEED3",
        "ArrowUpRight8": "\uEED4",
        "ArrowDownRight8": "\uEED5",
        "DocumentSet": "\uEED6",
        "GoToDashboard": "\uEEED",
        "DelveAnalytics": "\uEEEE",
        "ArrowUpRightMirrored8": "\uEEEF",
        "ArrowDownRightMirrored8": "\uEEF0",
        "CompanyDirectory": "\uEF0D",
        "OpenEnrollment": "\uEF1C",
        "CompanyDirectoryMirrored": "\uEF2B",
        "OneDriveAdd": "\uEF32",
        "ProfileSearch": "\uEF35",
        "Header2": "\uEF36",
        "Header3": "\uEF37",
        "Header4": "\uEF38",
        "RingerSolid": "\uEF3A",
        "Eyedropper": "\uEF3C",
        "MarketDown": "\uEF42",
        "CalendarWorkWeek": "\uEF51",
        "SidePanel": "\uEF52",
        "GlobeFavorite": "\uEF53",
        "CaretTopLeftSolid8": "\uEF54",
        "CaretTopRightSolid8": "\uEF55",
        "ViewAll2": "\uEF56",
        "DocumentReply": "\uEF57",
        "PlayerSettings": "\uEF58",
        "ReceiptForward": "\uEF59",
        "ReceiptReply": "\uEF5A",
        "ReceiptCheck": "\uEF5B",
        "Fax": "\uEF5C",
        "RecurringEvent": "\uEF5D",
        "ReplyAlt": "\uEF5E",
        "ReplyAllAlt": "\uEF5F",
        "EditStyle": "\uEF60",
        "EditMail": "\uEF61",
        "Lifesaver": "\uEF62",
        "LifesaverLock": "\uEF63",
        "InboxCheck": "\uEF64",
        "FolderSearch": "\uEF65"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-8.js
  function initializeIcons10(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-8"',
        src: "url('".concat(baseUrl, "fabric-icons-8-6fdf1528.woff') format('woff')")
      },
      icons: {
        "CollapseMenu": "\uEF66",
        "ExpandMenu": "\uEF67",
        "Boards": "\uEF68",
        "SunAdd": "\uEF69",
        "SunQuestionMark": "\uEF6A",
        "LandscapeOrientation": "\uEF6B",
        "DocumentSearch": "\uEF6C",
        "PublicCalendar": "\uEF6D",
        "PublicContactCard": "\uEF6E",
        "PublicEmail": "\uEF6F",
        "PublicFolder": "\uEF70",
        "WordDocument": "\uEF71",
        "PowerPointDocument": "\uEF72",
        "ExcelDocument": "\uEF73",
        "GroupedList": "\uEF74",
        "ClassroomLogo": "\uEF75",
        "Sections": "\uEF76",
        "EditPhoto": "\uEF77",
        "Starburst": "\uEF78",
        "ShareiOS": "\uEF79",
        "AirTickets": "\uEF7A",
        "PencilReply": "\uEF7B",
        "Tiles2": "\uEF7C",
        "SkypeCircleCheck": "\uEF7D",
        "SkypeCircleClock": "\uEF7E",
        "SkypeCircleMinus": "\uEF7F",
        "SkypeMessage": "\uEF83",
        "ClosedCaption": "\uEF84",
        "ATPLogo": "\uEF85",
        "OfficeFormsLogoInverse": "\uEF86",
        "RecycleBin": "\uEF87",
        "EmptyRecycleBin": "\uEF88",
        "Hide2": "\uEF89",
        "Breadcrumb": "\uEF8C",
        "BirthdayCake": "\uEF8D",
        "TimeEntry": "\uEF95",
        "CRMProcesses": "\uEFB1",
        "PageEdit": "\uEFB6",
        "PageArrowRight": "\uEFB8",
        "PageRemove": "\uEFBA",
        "Database": "\uEFC7",
        "DataManagementSettings": "\uEFC8",
        "CRMServices": "\uEFD2",
        "EditContact": "\uEFD3",
        "ConnectContacts": "\uEFD4",
        "AppIconDefaultAdd": "\uEFDA",
        "AppIconDefaultList": "\uEFDE",
        "ActivateOrders": "\uEFE0",
        "DeactivateOrders": "\uEFE1",
        "ProductCatalog": "\uEFE8",
        "ScatterChart": "\uEFEB",
        "AccountActivity": "\uEFF4",
        "DocumentManagement": "\uEFFC",
        "CRMReport": "\uEFFE",
        "KnowledgeArticle": "\uF000",
        "Relationship": "\uF003",
        "HomeVerify": "\uF00E",
        "ZipFolder": "\uF012",
        "SurveyQuestions": "\uF01B",
        "TextDocument": "\uF029",
        "TextDocumentShared": "\uF02B",
        "PageCheckedOut": "\uF02C",
        "PageShared": "\uF02D",
        "SaveAndClose": "\uF038",
        "Script": "\uF03A",
        "Archive": "\uF03F",
        "ActivityFeed": "\uF056",
        "Compare": "\uF057",
        "EventDate": "\uF059",
        "ArrowUpRight": "\uF069",
        "CaretRight": "\uF06B",
        "SetAction": "\uF071",
        "ChatBot": "\uF08B",
        "CaretSolidLeft": "\uF08D",
        "CaretSolidDown": "\uF08E",
        "CaretSolidRight": "\uF08F",
        "CaretSolidUp": "\uF090",
        "PowerAppsLogo": "\uF091",
        "PowerApps2Logo": "\uF092",
        "SearchIssue": "\uF09A",
        "SearchIssueMirrored": "\uF09B",
        "FabricAssetLibrary": "\uF09C",
        "FabricDataConnectionLibrary": "\uF09D",
        "FabricDocLibrary": "\uF09E",
        "FabricFormLibrary": "\uF09F",
        "FabricFormLibraryMirrored": "\uF0A0",
        "FabricReportLibrary": "\uF0A1",
        "FabricReportLibraryMirrored": "\uF0A2",
        "FabricPublicFolder": "\uF0A3",
        "FabricFolderSearch": "\uF0A4",
        "FabricMovetoFolder": "\uF0A5",
        "FabricUnsyncFolder": "\uF0A6",
        "FabricSyncFolder": "\uF0A7",
        "FabricOpenFolderHorizontal": "\uF0A8",
        "FabricFolder": "\uF0A9",
        "FabricFolderFill": "\uF0AA",
        "FabricNewFolder": "\uF0AB",
        "FabricPictureLibrary": "\uF0AC",
        "PhotoVideoMedia": "\uF0B1",
        "AddFavorite": "\uF0C8"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-9.js
  function initializeIcons11(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-9"',
        src: "url('".concat(baseUrl, "fabric-icons-9-c6162b42.woff') format('woff')")
      },
      icons: {
        "AddFavoriteFill": "\uF0C9",
        "BufferTimeBefore": "\uF0CF",
        "BufferTimeAfter": "\uF0D0",
        "BufferTimeBoth": "\uF0D1",
        "PublishContent": "\uF0D4",
        "ClipboardList": "\uF0E3",
        "ClipboardListMirrored": "\uF0E4",
        "CannedChat": "\uF0F2",
        "SkypeForBusinessLogo": "\uF0FC",
        "TabCenter": "\uF100",
        "PageCheckedin": "\uF104",
        "PageList": "\uF106",
        "ReadOutLoud": "\uF112",
        "CaretBottomLeftSolid8": "\uF121",
        "CaretBottomRightSolid8": "\uF122",
        "FolderHorizontal": "\uF12B",
        "MicrosoftStaffhubLogo": "\uF130",
        "GiftboxOpen": "\uF133",
        "StatusCircleOuter": "\uF136",
        "StatusCircleInner": "\uF137",
        "StatusCircleRing": "\uF138",
        "StatusTriangleOuter": "\uF139",
        "StatusTriangleInner": "\uF13A",
        "StatusTriangleExclamation": "\uF13B",
        "StatusCircleExclamation": "\uF13C",
        "StatusCircleErrorX": "\uF13D",
        "StatusCircleInfo": "\uF13F",
        "StatusCircleBlock": "\uF140",
        "StatusCircleBlock2": "\uF141",
        "StatusCircleQuestionMark": "\uF142",
        "StatusCircleSync": "\uF143",
        "Toll": "\uF160",
        "ExploreContentSingle": "\uF164",
        "CollapseContent": "\uF165",
        "CollapseContentSingle": "\uF166",
        "InfoSolid": "\uF167",
        "GroupList": "\uF168",
        "ProgressRingDots": "\uF16A",
        "CaloriesAdd": "\uF172",
        "BranchFork": "\uF173",
        "MuteChat": "\uF17A",
        "AddHome": "\uF17B",
        "AddWork": "\uF17C",
        "MobileReport": "\uF18A",
        "ScaleVolume": "\uF18C",
        "HardDriveGroup": "\uF18F",
        "FastMode": "\uF19A",
        "ToggleLeft": "\uF19E",
        "ToggleRight": "\uF19F",
        "TriangleShape": "\uF1A7",
        "RectangleShape": "\uF1A9",
        "CubeShape": "\uF1AA",
        "Trophy2": "\uF1AE",
        "BucketColor": "\uF1B6",
        "BucketColorFill": "\uF1B7",
        "Taskboard": "\uF1C2",
        "SingleColumn": "\uF1D3",
        "DoubleColumn": "\uF1D4",
        "TripleColumn": "\uF1D5",
        "ColumnLeftTwoThirds": "\uF1D6",
        "ColumnRightTwoThirds": "\uF1D7",
        "AccessLogoFill": "\uF1DB",
        "AnalyticsLogo": "\uF1DE",
        "AnalyticsQuery": "\uF1DF",
        "NewAnalyticsQuery": "\uF1E0",
        "AnalyticsReport": "\uF1E1",
        "WordLogo": "\uF1E3",
        "WordLogoFill": "\uF1E4",
        "ExcelLogo": "\uF1E5",
        "ExcelLogoFill": "\uF1E6",
        "OneNoteLogo": "\uF1E7",
        "OneNoteLogoFill": "\uF1E8",
        "OutlookLogo": "\uF1E9",
        "OutlookLogoFill": "\uF1EA",
        "PowerPointLogo": "\uF1EB",
        "PowerPointLogoFill": "\uF1EC",
        "PublisherLogo": "\uF1ED",
        "PublisherLogoFill": "\uF1EE",
        "ScheduleEventAction": "\uF1EF",
        "FlameSolid": "\uF1F3",
        "ServerProcesses": "\uF1FE",
        "Server": "\uF201",
        "SaveAll": "\uF203",
        "LinkedInLogo": "\uF20A",
        "Decimals": "\uF218",
        "SidePanelMirrored": "\uF221",
        "ProtectRestrict": "\uF22A",
        "Blog": "\uF22B",
        "UnknownMirrored": "\uF22E",
        "PublicContactCardMirrored": "\uF230",
        "GridViewSmall": "\uF232",
        "GridViewMedium": "\uF233",
        "GridViewLarge": "\uF234",
        "Step": "\uF241",
        "StepInsert": "\uF242",
        "StepShared": "\uF243",
        "StepSharedAdd": "\uF244",
        "StepSharedInsert": "\uF245",
        "ViewDashboard": "\uF246",
        "ViewList": "\uF247"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-10.js
  function initializeIcons12(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-10"',
        src: "url('".concat(baseUrl, "fabric-icons-10-c4ded8e4.woff') format('woff')")
      },
      icons: {
        "ViewListGroup": "\uF248",
        "ViewListTree": "\uF249",
        "TriggerAuto": "\uF24A",
        "TriggerUser": "\uF24B",
        "PivotChart": "\uF24C",
        "StackedBarChart": "\uF24D",
        "StackedLineChart": "\uF24E",
        "BuildQueue": "\uF24F",
        "BuildQueueNew": "\uF250",
        "UserFollowed": "\uF25C",
        "ContactLink": "\uF25F",
        "Stack": "\uF26F",
        "Bullseye": "\uF272",
        "VennDiagram": "\uF273",
        "FiveTileGrid": "\uF274",
        "FocalPoint": "\uF277",
        "Insert": "\uF278",
        "RingerRemove": "\uF279",
        "TeamsLogoInverse": "\uF27A",
        "TeamsLogo": "\uF27B",
        "TeamsLogoFill": "\uF27C",
        "SkypeForBusinessLogoFill": "\uF27D",
        "SharepointLogo": "\uF27E",
        "SharepointLogoFill": "\uF27F",
        "DelveLogo": "\uF280",
        "DelveLogoFill": "\uF281",
        "OfficeVideoLogo": "\uF282",
        "OfficeVideoLogoFill": "\uF283",
        "ExchangeLogo": "\uF284",
        "ExchangeLogoFill": "\uF285",
        "Signin": "\uF286",
        "DocumentApproval": "\uF28B",
        "CloneToDesktop": "\uF28C",
        "InstallToDrive": "\uF28D",
        "Blur": "\uF28E",
        "Build": "\uF28F",
        "ProcessMetaTask": "\uF290",
        "BranchFork2": "\uF291",
        "BranchLocked": "\uF292",
        "BranchCommit": "\uF293",
        "BranchCompare": "\uF294",
        "BranchMerge": "\uF295",
        "BranchPullRequest": "\uF296",
        "BranchSearch": "\uF297",
        "BranchShelveset": "\uF298",
        "RawSource": "\uF299",
        "MergeDuplicate": "\uF29A",
        "RowsGroup": "\uF29B",
        "RowsChild": "\uF29C",
        "Deploy": "\uF29D",
        "Redeploy": "\uF29E",
        "ServerEnviroment": "\uF29F",
        "VisioDiagram": "\uF2A0",
        "HighlightMappedShapes": "\uF2A1",
        "TextCallout": "\uF2A2",
        "IconSetsFlag": "\uF2A4",
        "VisioLogo": "\uF2A7",
        "VisioLogoFill": "\uF2A8",
        "VisioDocument": "\uF2A9",
        "TimelineProgress": "\uF2AA",
        "TimelineDelivery": "\uF2AB",
        "Backlog": "\uF2AC",
        "TeamFavorite": "\uF2AD",
        "TaskGroup": "\uF2AE",
        "TaskGroupMirrored": "\uF2AF",
        "ScopeTemplate": "\uF2B0",
        "AssessmentGroupTemplate": "\uF2B1",
        "NewTeamProject": "\uF2B2",
        "CommentAdd": "\uF2B3",
        "CommentNext": "\uF2B4",
        "CommentPrevious": "\uF2B5",
        "ShopServer": "\uF2B6",
        "LocaleLanguage": "\uF2B7",
        "QueryList": "\uF2B8",
        "UserSync": "\uF2B9",
        "UserPause": "\uF2BA",
        "StreamingOff": "\uF2BB",
        "ArrowTallUpLeft": "\uF2BD",
        "ArrowTallUpRight": "\uF2BE",
        "ArrowTallDownLeft": "\uF2BF",
        "ArrowTallDownRight": "\uF2C0",
        "FieldEmpty": "\uF2C1",
        "FieldFilled": "\uF2C2",
        "FieldChanged": "\uF2C3",
        "FieldNotChanged": "\uF2C4",
        "RingerOff": "\uF2C5",
        "PlayResume": "\uF2C6",
        "BulletedList2": "\uF2C7",
        "BulletedList2Mirrored": "\uF2C8",
        "ImageCrosshair": "\uF2C9",
        "GitGraph": "\uF2CA",
        "Repo": "\uF2CB",
        "RepoSolid": "\uF2CC",
        "FolderQuery": "\uF2CD",
        "FolderList": "\uF2CE",
        "FolderListMirrored": "\uF2CF",
        "LocationOutline": "\uF2D0",
        "POISolid": "\uF2D1",
        "CalculatorNotEqualTo": "\uF2D2",
        "BoxSubtractSolid": "\uF2D3"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-11.js
  function initializeIcons13(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-11"',
        src: "url('".concat(baseUrl, "fabric-icons-11-2a8393d6.woff') format('woff')")
      },
      icons: {
        "BoxAdditionSolid": "\uF2D4",
        "BoxMultiplySolid": "\uF2D5",
        "BoxPlaySolid": "\uF2D6",
        "BoxCheckmarkSolid": "\uF2D7",
        "CirclePauseSolid": "\uF2D8",
        "CirclePause": "\uF2D9",
        "MSNVideosSolid": "\uF2DA",
        "CircleStopSolid": "\uF2DB",
        "CircleStop": "\uF2DC",
        "NavigateBack": "\uF2DD",
        "NavigateBackMirrored": "\uF2DE",
        "NavigateForward": "\uF2DF",
        "NavigateForwardMirrored": "\uF2E0",
        "UnknownSolid": "\uF2E1",
        "UnknownMirroredSolid": "\uF2E2",
        "CircleAddition": "\uF2E3",
        "CircleAdditionSolid": "\uF2E4",
        "FilePDB": "\uF2E5",
        "FileTemplate": "\uF2E6",
        "FileSQL": "\uF2E7",
        "FileJAVA": "\uF2E8",
        "FileASPX": "\uF2E9",
        "FileCSS": "\uF2EA",
        "FileSass": "\uF2EB",
        "FileLess": "\uF2EC",
        "FileHTML": "\uF2ED",
        "JavaScriptLanguage": "\uF2EE",
        "CSharpLanguage": "\uF2EF",
        "CSharp": "\uF2F0",
        "VisualBasicLanguage": "\uF2F1",
        "VB": "\uF2F2",
        "CPlusPlusLanguage": "\uF2F3",
        "CPlusPlus": "\uF2F4",
        "FSharpLanguage": "\uF2F5",
        "FSharp": "\uF2F6",
        "TypeScriptLanguage": "\uF2F7",
        "PythonLanguage": "\uF2F8",
        "PY": "\uF2F9",
        "CoffeeScript": "\uF2FA",
        "MarkDownLanguage": "\uF2FB",
        "FullWidth": "\uF2FE",
        "FullWidthEdit": "\uF2FF",
        "Plug": "\uF300",
        "PlugSolid": "\uF301",
        "PlugConnected": "\uF302",
        "PlugDisconnected": "\uF303",
        "UnlockSolid": "\uF304",
        "Variable": "\uF305",
        "Parameter": "\uF306",
        "CommentUrgent": "\uF307",
        "Storyboard": "\uF308",
        "DiffInline": "\uF309",
        "DiffSideBySide": "\uF30A",
        "ImageDiff": "\uF30B",
        "ImagePixel": "\uF30C",
        "FileBug": "\uF30D",
        "FileCode": "\uF30E",
        "FileComment": "\uF30F",
        "BusinessHoursSign": "\uF310",
        "FileImage": "\uF311",
        "FileSymlink": "\uF312",
        "AutoFillTemplate": "\uF313",
        "WorkItem": "\uF314",
        "WorkItemBug": "\uF315",
        "LogRemove": "\uF316",
        "ColumnOptions": "\uF317",
        "Packages": "\uF318",
        "BuildIssue": "\uF319",
        "AssessmentGroup": "\uF31A",
        "VariableGroup": "\uF31B",
        "FullHistory": "\uF31C",
        "Wheelchair": "\uF31F",
        "SingleColumnEdit": "\uF321",
        "DoubleColumnEdit": "\uF322",
        "TripleColumnEdit": "\uF323",
        "ColumnLeftTwoThirdsEdit": "\uF324",
        "ColumnRightTwoThirdsEdit": "\uF325",
        "StreamLogo": "\uF329",
        "PassiveAuthentication": "\uF32A",
        "AlertSolid": "\uF331",
        "MegaphoneSolid": "\uF332",
        "TaskSolid": "\uF333",
        "ConfigurationSolid": "\uF334",
        "BugSolid": "\uF335",
        "CrownSolid": "\uF336",
        "Trophy2Solid": "\uF337",
        "QuickNoteSolid": "\uF338",
        "ConstructionConeSolid": "\uF339",
        "PageListSolid": "\uF33A",
        "PageListMirroredSolid": "\uF33B",
        "StarburstSolid": "\uF33C",
        "ReadingModeSolid": "\uF33D",
        "SadSolid": "\uF33E",
        "HealthSolid": "\uF33F",
        "ShieldSolid": "\uF340",
        "GiftBoxSolid": "\uF341",
        "ShoppingCartSolid": "\uF342",
        "MailSolid": "\uF343",
        "ChatSolid": "\uF344",
        "RibbonSolid": "\uF345"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-12.js
  function initializeIcons14(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-12"',
        src: "url('".concat(baseUrl, "fabric-icons-12-7e945a1e.woff') format('woff')")
      },
      icons: {
        "FinancialSolid": "\uF346",
        "FinancialMirroredSolid": "\uF347",
        "HeadsetSolid": "\uF348",
        "PermissionsSolid": "\uF349",
        "ParkingSolid": "\uF34A",
        "ParkingMirroredSolid": "\uF34B",
        "DiamondSolid": "\uF34C",
        "AsteriskSolid": "\uF34D",
        "OfflineStorageSolid": "\uF34E",
        "BankSolid": "\uF34F",
        "DecisionSolid": "\uF350",
        "Parachute": "\uF351",
        "ParachuteSolid": "\uF352",
        "FiltersSolid": "\uF353",
        "ColorSolid": "\uF354",
        "ReviewSolid": "\uF355",
        "ReviewRequestSolid": "\uF356",
        "ReviewRequestMirroredSolid": "\uF357",
        "ReviewResponseSolid": "\uF358",
        "FeedbackRequestSolid": "\uF359",
        "FeedbackRequestMirroredSolid": "\uF35A",
        "FeedbackResponseSolid": "\uF35B",
        "WorkItemBar": "\uF35C",
        "WorkItemBarSolid": "\uF35D",
        "Separator": "\uF35E",
        "NavigateExternalInline": "\uF35F",
        "PlanView": "\uF360",
        "TimelineMatrixView": "\uF361",
        "EngineeringGroup": "\uF362",
        "ProjectCollection": "\uF363",
        "CaretBottomRightCenter8": "\uF364",
        "CaretBottomLeftCenter8": "\uF365",
        "CaretTopRightCenter8": "\uF366",
        "CaretTopLeftCenter8": "\uF367",
        "DonutChart": "\uF368",
        "ChevronUnfold10": "\uF369",
        "ChevronFold10": "\uF36A",
        "DoubleChevronDown8": "\uF36B",
        "DoubleChevronUp8": "\uF36C",
        "DoubleChevronLeft8": "\uF36D",
        "DoubleChevronRight8": "\uF36E",
        "ChevronDownEnd6": "\uF36F",
        "ChevronUpEnd6": "\uF370",
        "ChevronLeftEnd6": "\uF371",
        "ChevronRightEnd6": "\uF372",
        "ContextMenu": "\uF37C",
        "AzureAPIManagement": "\uF37F",
        "AzureServiceEndpoint": "\uF380",
        "VSTSLogo": "\uF381",
        "VSTSAltLogo1": "\uF382",
        "VSTSAltLogo2": "\uF383",
        "FileTypeSolution": "\uF387",
        "WordLogoInverse16": "\uF390",
        "WordLogo16": "\uF391",
        "WordLogoFill16": "\uF392",
        "PowerPointLogoInverse16": "\uF393",
        "PowerPointLogo16": "\uF394",
        "PowerPointLogoFill16": "\uF395",
        "ExcelLogoInverse16": "\uF396",
        "ExcelLogo16": "\uF397",
        "ExcelLogoFill16": "\uF398",
        "OneNoteLogoInverse16": "\uF399",
        "OneNoteLogo16": "\uF39A",
        "OneNoteLogoFill16": "\uF39B",
        "OutlookLogoInverse16": "\uF39C",
        "OutlookLogo16": "\uF39D",
        "OutlookLogoFill16": "\uF39E",
        "PublisherLogoInverse16": "\uF39F",
        "PublisherLogo16": "\uF3A0",
        "PublisherLogoFill16": "\uF3A1",
        "VisioLogoInverse16": "\uF3A2",
        "VisioLogo16": "\uF3A3",
        "VisioLogoFill16": "\uF3A4",
        "TestBeaker": "\uF3A5",
        "TestBeakerSolid": "\uF3A6",
        "TestExploreSolid": "\uF3A7",
        "TestAutoSolid": "\uF3A8",
        "TestUserSolid": "\uF3A9",
        "TestImpactSolid": "\uF3AA",
        "TestPlan": "\uF3AB",
        "TestStep": "\uF3AC",
        "TestParameter": "\uF3AD",
        "TestSuite": "\uF3AE",
        "TestCase": "\uF3AF",
        "Sprint": "\uF3B0",
        "SignOut": "\uF3B1",
        "TriggerApproval": "\uF3B2",
        "Rocket": "\uF3B3",
        "AzureKeyVault": "\uF3B4",
        "Onboarding": "\uF3BA",
        "Transition": "\uF3BC",
        "LikeSolid": "\uF3BF",
        "DislikeSolid": "\uF3C0",
        "CRMCustomerInsightsApp": "\uF3C8",
        "EditCreate": "\uF3C9",
        "PlayReverseResume": "\uF3E4",
        "PlayReverse": "\uF3E5",
        "SearchData": "\uF3F1",
        "UnSetColor": "\uF3F9",
        "DeclineCall": "\uF405"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-13.js
  function initializeIcons15(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-13"',
        src: "url('".concat(baseUrl, "fabric-icons-13-c3989a02.woff') format('woff')")
      },
      icons: {
        "RectangularClipping": "\uF407",
        "TeamsLogo16": "\uF40A",
        "TeamsLogoFill16": "\uF40B",
        "Spacer": "\uF40D",
        "SkypeLogo16": "\uF40E",
        "SkypeForBusinessLogo16": "\uF40F",
        "SkypeForBusinessLogoFill16": "\uF410",
        "FilterSolid": "\uF412",
        "MailUndelivered": "\uF415",
        "MailTentative": "\uF416",
        "MailTentativeMirrored": "\uF417",
        "MailReminder": "\uF418",
        "ReceiptUndelivered": "\uF419",
        "ReceiptTentative": "\uF41A",
        "ReceiptTentativeMirrored": "\uF41B",
        "Inbox": "\uF41C",
        "IRMReply": "\uF41D",
        "IRMReplyMirrored": "\uF41E",
        "IRMForward": "\uF41F",
        "IRMForwardMirrored": "\uF420",
        "VoicemailIRM": "\uF421",
        "EventAccepted": "\uF422",
        "EventTentative": "\uF423",
        "EventTentativeMirrored": "\uF424",
        "EventDeclined": "\uF425",
        "IDBadge": "\uF427",
        "BackgroundColor": "\uF42B",
        "OfficeFormsLogoInverse16": "\uF433",
        "OfficeFormsLogo": "\uF434",
        "OfficeFormsLogoFill": "\uF435",
        "OfficeFormsLogo16": "\uF436",
        "OfficeFormsLogoFill16": "\uF437",
        "OfficeFormsLogoInverse24": "\uF43A",
        "OfficeFormsLogo24": "\uF43B",
        "OfficeFormsLogoFill24": "\uF43C",
        "PageLock": "\uF43F",
        "NotExecuted": "\uF440",
        "NotImpactedSolid": "\uF441",
        "FieldReadOnly": "\uF442",
        "FieldRequired": "\uF443",
        "BacklogBoard": "\uF444",
        "ExternalBuild": "\uF445",
        "ExternalTFVC": "\uF446",
        "ExternalXAML": "\uF447",
        "IssueSolid": "\uF448",
        "DefectSolid": "\uF449",
        "LadybugSolid": "\uF44A",
        "NugetLogo": "\uF44C",
        "TFVCLogo": "\uF44D",
        "ProjectLogo32": "\uF47E",
        "ProjectLogoFill32": "\uF47F",
        "ProjectLogo16": "\uF480",
        "ProjectLogoFill16": "\uF481",
        "SwayLogo32": "\uF482",
        "SwayLogoFill32": "\uF483",
        "SwayLogo16": "\uF484",
        "SwayLogoFill16": "\uF485",
        "ClassNotebookLogo32": "\uF486",
        "ClassNotebookLogoFill32": "\uF487",
        "ClassNotebookLogo16": "\uF488",
        "ClassNotebookLogoFill16": "\uF489",
        "ClassNotebookLogoInverse32": "\uF48A",
        "ClassNotebookLogoInverse16": "\uF48B",
        "StaffNotebookLogo32": "\uF48C",
        "StaffNotebookLogoFill32": "\uF48D",
        "StaffNotebookLogo16": "\uF48E",
        "StaffNotebookLogoFill16": "\uF48F",
        "StaffNotebookLogoInverted32": "\uF490",
        "StaffNotebookLogoInverted16": "\uF491",
        "KaizalaLogo": "\uF492",
        "TaskLogo": "\uF493",
        "ProtectionCenterLogo32": "\uF494",
        "GallatinLogo": "\uF496",
        "Globe2": "\uF49A",
        "Guitar": "\uF49B",
        "Breakfast": "\uF49C",
        "Brunch": "\uF49D",
        "BeerMug": "\uF49E",
        "Vacation": "\uF49F",
        "Teeth": "\uF4A0",
        "Taxi": "\uF4A1",
        "Chopsticks": "\uF4A2",
        "SyncOccurence": "\uF4A3",
        "UnsyncOccurence": "\uF4A4",
        "GIF": "\uF4A9",
        "PrimaryCalendar": "\uF4AE",
        "SearchCalendar": "\uF4AF",
        "VideoOff": "\uF4B0",
        "MicrosoftFlowLogo": "\uF4B1",
        "BusinessCenterLogo": "\uF4B2",
        "ToDoLogoBottom": "\uF4B3",
        "ToDoLogoTop": "\uF4B4",
        "EditSolid12": "\uF4B5",
        "EditSolidMirrored12": "\uF4B6",
        "UneditableSolid12": "\uF4B7",
        "UneditableSolidMirrored12": "\uF4B8",
        "UneditableMirrored": "\uF4B9",
        "AdminALogo32": "\uF4BA",
        "AdminALogoFill32": "\uF4BB",
        "ToDoLogoInverse": "\uF4BC"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-14.js
  function initializeIcons16(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-14"',
        src: "url('".concat(baseUrl, "fabric-icons-14-5cf58db8.woff') format('woff')")
      },
      icons: {
        "Snooze": "\uF4BD",
        "WaffleOffice365": "\uF4E0",
        "ImageSearch": "\uF4E8",
        "NewsSearch": "\uF4E9",
        "VideoSearch": "\uF4EA",
        "R": "\uF4EB",
        "FontColorA": "\uF4EC",
        "FontColorSwatch": "\uF4ED",
        "LightWeight": "\uF4EE",
        "NormalWeight": "\uF4EF",
        "SemiboldWeight": "\uF4F0",
        "GroupObject": "\uF4F1",
        "UngroupObject": "\uF4F2",
        "AlignHorizontalLeft": "\uF4F3",
        "AlignHorizontalCenter": "\uF4F4",
        "AlignHorizontalRight": "\uF4F5",
        "AlignVerticalTop": "\uF4F6",
        "AlignVerticalCenter": "\uF4F7",
        "AlignVerticalBottom": "\uF4F8",
        "HorizontalDistributeCenter": "\uF4F9",
        "VerticalDistributeCenter": "\uF4FA",
        "Ellipse": "\uF4FB",
        "Line": "\uF4FC",
        "Octagon": "\uF4FD",
        "Hexagon": "\uF4FE",
        "Pentagon": "\uF4FF",
        "RightTriangle": "\uF500",
        "HalfCircle": "\uF501",
        "QuarterCircle": "\uF502",
        "ThreeQuarterCircle": "\uF503",
        "6PointStar": "\uF504",
        "12PointStar": "\uF505",
        "ArrangeBringToFront": "\uF506",
        "ArrangeSendToBack": "\uF507",
        "ArrangeSendBackward": "\uF508",
        "ArrangeBringForward": "\uF509",
        "BorderDash": "\uF50A",
        "BorderDot": "\uF50B",
        "LineStyle": "\uF50C",
        "LineThickness": "\uF50D",
        "WindowEdit": "\uF50E",
        "HintText": "\uF50F",
        "MediaAdd": "\uF510",
        "AnchorLock": "\uF511",
        "AutoHeight": "\uF512",
        "ChartSeries": "\uF513",
        "ChartXAngle": "\uF514",
        "ChartYAngle": "\uF515",
        "Combobox": "\uF516",
        "LineSpacing": "\uF517",
        "Padding": "\uF518",
        "PaddingTop": "\uF519",
        "PaddingBottom": "\uF51A",
        "PaddingLeft": "\uF51B",
        "PaddingRight": "\uF51C",
        "NavigationFlipper": "\uF51D",
        "AlignJustify": "\uF51E",
        "TextOverflow": "\uF51F",
        "VisualsFolder": "\uF520",
        "VisualsStore": "\uF521",
        "PictureCenter": "\uF522",
        "PictureFill": "\uF523",
        "PicturePosition": "\uF524",
        "PictureStretch": "\uF525",
        "PictureTile": "\uF526",
        "Slider": "\uF527",
        "SliderHandleSize": "\uF528",
        "DefaultRatio": "\uF529",
        "NumberSequence": "\uF52A",
        "GUID": "\uF52B",
        "ReportAdd": "\uF52C",
        "DashboardAdd": "\uF52D",
        "MapPinSolid": "\uF52E",
        "WebPublish": "\uF52F",
        "PieSingleSolid": "\uF530",
        "BlockedSolid": "\uF531",
        "DrillDown": "\uF532",
        "DrillDownSolid": "\uF533",
        "DrillExpand": "\uF534",
        "DrillShow": "\uF535",
        "SpecialEvent": "\uF536",
        "OneDriveFolder16": "\uF53B",
        "FunctionalManagerDashboard": "\uF542",
        "BIDashboard": "\uF543",
        "CodeEdit": "\uF544",
        "RenewalCurrent": "\uF545",
        "RenewalFuture": "\uF546",
        "SplitObject": "\uF547",
        "BulkUpload": "\uF548",
        "DownloadDocument": "\uF549",
        "GreetingCard": "\uF54B",
        "Flower": "\uF54E",
        "WaitlistConfirm": "\uF550",
        "WaitlistConfirmMirrored": "\uF551",
        "LaptopSecure": "\uF552",
        "DragObject": "\uF553",
        "EntryView": "\uF554",
        "EntryDecline": "\uF555",
        "ContactCardSettings": "\uF556",
        "ContactCardSettingsMirrored": "\uF557"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-15.js
  function initializeIcons17(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-15"',
        src: "url('".concat(baseUrl, "fabric-icons-15-3807251b.woff') format('woff')")
      },
      icons: {
        "CalendarSettings": "\uF558",
        "CalendarSettingsMirrored": "\uF559",
        "HardDriveLock": "\uF55A",
        "HardDriveUnlock": "\uF55B",
        "AccountManagement": "\uF55C",
        "ReportWarning": "\uF569",
        "TransitionPop": "\uF5B2",
        "TransitionPush": "\uF5B3",
        "TransitionEffect": "\uF5B4",
        "LookupEntities": "\uF5B5",
        "ExploreData": "\uF5B6",
        "AddBookmark": "\uF5B7",
        "SearchBookmark": "\uF5B8",
        "DrillThrough": "\uF5B9",
        "MasterDatabase": "\uF5BA",
        "CertifiedDatabase": "\uF5BB",
        "MaximumValue": "\uF5BC",
        "MinimumValue": "\uF5BD",
        "VisualStudioIDELogo32": "\uF5D0",
        "PasteAsText": "\uF5D5",
        "PasteAsCode": "\uF5D6",
        "BrowserTab": "\uF5D7",
        "BrowserTabScreenshot": "\uF5D8",
        "DesktopScreenshot": "\uF5D9",
        "FileYML": "\uF5DA",
        "ClipboardSolid": "\uF5DC",
        "FabricUserFolder": "\uF5E5",
        "FabricNetworkFolder": "\uF5E6",
        "BullseyeTarget": "\uF5F0",
        "AnalyticsView": "\uF5F1",
        "Video360Generic": "\uF609",
        "Untag": "\uF60B",
        "Leave": "\uF627",
        "Trending12": "\uF62D",
        "Blocked12": "\uF62E",
        "Warning12": "\uF62F",
        "CheckedOutByOther12": "\uF630",
        "CheckedOutByYou12": "\uF631",
        "CircleShapeSolid": "\uF63C",
        "SquareShapeSolid": "\uF63D",
        "TriangleShapeSolid": "\uF63E",
        "DropShapeSolid": "\uF63F",
        "RectangleShapeSolid": "\uF640",
        "ZoomToFit": "\uF649",
        "InsertColumnsLeft": "\uF64A",
        "InsertColumnsRight": "\uF64B",
        "InsertRowsAbove": "\uF64C",
        "InsertRowsBelow": "\uF64D",
        "DeleteColumns": "\uF64E",
        "DeleteRows": "\uF64F",
        "DeleteRowsMirrored": "\uF650",
        "DeleteTable": "\uF651",
        "AccountBrowser": "\uF652",
        "VersionControlPush": "\uF664",
        "StackedColumnChart2": "\uF666",
        "TripleColumnWide": "\uF66E",
        "QuadColumn": "\uF66F",
        "WhiteBoardApp16": "\uF673",
        "WhiteBoardApp32": "\uF674",
        "PinnedSolid": "\uF676",
        "InsertSignatureLine": "\uF677",
        "ArrangeByFrom": "\uF678",
        "Phishing": "\uF679",
        "CreateMailRule": "\uF67A",
        "PublishCourse": "\uF699",
        "DictionaryRemove": "\uF69A",
        "UserRemove": "\uF69B",
        "UserEvent": "\uF69C",
        "Encryption": "\uF69D",
        "PasswordField": "\uF6AA",
        "OpenInNewTab": "\uF6AB",
        "Hide3": "\uF6AC",
        "VerifiedBrandSolid": "\uF6AD",
        "MarkAsProtected": "\uF6AE",
        "AuthenticatorApp": "\uF6B1",
        "WebTemplate": "\uF6B2",
        "DefenderTVM": "\uF6B3",
        "MedalSolid": "\uF6B9",
        "D365TalentLearn": "\uF6BB",
        "D365TalentInsight": "\uF6BC",
        "D365TalentHRCore": "\uF6BD",
        "BacklogList": "\uF6BF",
        "ButtonControl": "\uF6C0",
        "TableGroup": "\uF6D9",
        "MountainClimbing": "\uF6DB",
        "TagUnknown": "\uF6DF",
        "TagUnknownMirror": "\uF6E0",
        "TagUnknown12": "\uF6E1",
        "TagUnknown12Mirror": "\uF6E2",
        "Link12": "\uF6E3",
        "Presentation": "\uF6E4",
        "Presentation12": "\uF6E5",
        "Lock12": "\uF6E6",
        "BuildDefinition": "\uF6E9",
        "ReleaseDefinition": "\uF6EA",
        "SaveTemplate": "\uF6EC",
        "UserGauge": "\uF6ED",
        "BlockedSiteSolid12": "\uF70A",
        "TagSolid": "\uF70E",
        "OfficeChat": "\uF70F"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-16.js
  function initializeIcons18(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-16"',
        src: "url('".concat(baseUrl, "fabric-icons-16-9cf93f3b.woff') format('woff')")
      },
      icons: {
        "OfficeChatSolid": "\uF710",
        "MailSchedule": "\uF72E",
        "WarningSolid": "\uF736",
        "Blocked2Solid": "\uF737",
        "SkypeCircleArrow": "\uF747",
        "SkypeArrow": "\uF748",
        "SyncStatus": "\uF751",
        "SyncStatusSolid": "\uF752",
        "ProjectDocument": "\uF759",
        "ToDoLogoOutline": "\uF75B",
        "VisioOnlineLogoFill32": "\uF75F",
        "VisioOnlineLogo32": "\uF760",
        "VisioOnlineLogoCloud32": "\uF761",
        "VisioDiagramSync": "\uF762",
        "Event12": "\uF763",
        "EventDateMissed12": "\uF764",
        "UserOptional": "\uF767",
        "ResponsesMenu": "\uF768",
        "DoubleDownArrow": "\uF769",
        "DistributeDown": "\uF76A",
        "BookmarkReport": "\uF76B",
        "FilterSettings": "\uF76C",
        "GripperDotsVertical": "\uF772",
        "MailAttached": "\uF774",
        "AddIn": "\uF775",
        "LinkedDatabase": "\uF779",
        "TableLink": "\uF77A",
        "PromotedDatabase": "\uF77D",
        "BarChartVerticalFilter": "\uF77E",
        "BarChartVerticalFilterSolid": "\uF77F",
        "MicOff2": "\uF781",
        "MicrosoftTranslatorLogo": "\uF782",
        "ShowTimeAs": "\uF787",
        "FileRequest": "\uF789",
        "WorkItemAlert": "\uF78F",
        "PowerBILogo16": "\uF790",
        "PowerBILogoBackplate16": "\uF791",
        "BulletedListText": "\uF792",
        "BulletedListBullet": "\uF793",
        "BulletedListTextMirrored": "\uF794",
        "BulletedListBulletMirrored": "\uF795",
        "NumberedListText": "\uF796",
        "NumberedListNumber": "\uF797",
        "NumberedListTextMirrored": "\uF798",
        "NumberedListNumberMirrored": "\uF799",
        "RemoveLinkChain": "\uF79A",
        "RemoveLinkX": "\uF79B",
        "FabricTextHighlight": "\uF79C",
        "ClearFormattingA": "\uF79D",
        "ClearFormattingEraser": "\uF79E",
        "Photo2Fill": "\uF79F",
        "IncreaseIndentText": "\uF7A0",
        "IncreaseIndentArrow": "\uF7A1",
        "DecreaseIndentText": "\uF7A2",
        "DecreaseIndentArrow": "\uF7A3",
        "IncreaseIndentTextMirrored": "\uF7A4",
        "IncreaseIndentArrowMirrored": "\uF7A5",
        "DecreaseIndentTextMirrored": "\uF7A6",
        "DecreaseIndentArrowMirrored": "\uF7A7",
        "CheckListText": "\uF7A8",
        "CheckListCheck": "\uF7A9",
        "CheckListTextMirrored": "\uF7AA",
        "CheckListCheckMirrored": "\uF7AB",
        "NumberSymbol": "\uF7AC",
        "Coupon": "\uF7BC",
        "VerifiedBrand": "\uF7BD",
        "ReleaseGate": "\uF7BE",
        "ReleaseGateCheck": "\uF7BF",
        "ReleaseGateError": "\uF7C0",
        "M365InvoicingLogo": "\uF7C1",
        "RemoveFromShoppingList": "\uF7D5",
        "ShieldAlert": "\uF7D7",
        "FabricTextHighlightComposite": "\uF7DA",
        "Dataflows": "\uF7DD",
        "GenericScanFilled": "\uF7DE",
        "DiagnosticDataBarTooltip": "\uF7DF",
        "SaveToMobile": "\uF7E0",
        "Orientation2": "\uF7E1",
        "ScreenCast": "\uF7E2",
        "ShowGrid": "\uF7E3",
        "SnapToGrid": "\uF7E4",
        "ContactList": "\uF7E5",
        "NewMail": "\uF7EA",
        "EyeShadow": "\uF7EB",
        "FabricFolderConfirm": "\uF7FF",
        "InformationBarriers": "\uF803",
        "CommentActive": "\uF804",
        "ColumnVerticalSectionEdit": "\uF806",
        "WavingHand": "\uF807",
        "ShakeDevice": "\uF80A",
        "SmartGlassRemote": "\uF80B",
        "Rotate90Clockwise": "\uF80D",
        "Rotate90CounterClockwise": "\uF80E",
        "CampaignTemplate": "\uF811",
        "ChartTemplate": "\uF812",
        "PageListFilter": "\uF813",
        "SecondaryNav": "\uF814",
        "ColumnVerticalSection": "\uF81E",
        "SkypeCircleSlash": "\uF825",
        "SkypeSlash": "\uF826"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-17.js
  function initializeIcons19(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-17"',
        src: "url('".concat(baseUrl, "fabric-icons-17-0c4ed701.woff') format('woff')")
      },
      icons: {
        "CustomizeToolbar": "\uF828",
        "DuplicateRow": "\uF82A",
        "RemoveFromTrash": "\uF82B",
        "MailOptions": "\uF82C",
        "Childof": "\uF82D",
        "Footer": "\uF82E",
        "Header": "\uF82F",
        "BarChartVerticalFill": "\uF830",
        "StackedColumnChart2Fill": "\uF831",
        "PlainText": "\uF834",
        "AccessibiltyChecker": "\uF835",
        "DatabaseSync": "\uF842",
        "ReservationOrders": "\uF845",
        "TabOneColumn": "\uF849",
        "TabTwoColumn": "\uF84A",
        "TabThreeColumn": "\uF84B",
        "BulletedTreeList": "\uF84C",
        "MicrosoftTranslatorLogoGreen": "\uF852",
        "MicrosoftTranslatorLogoBlue": "\uF853",
        "InternalInvestigation": "\uF854",
        "AddReaction": "\uF85D",
        "ContactHeart": "\uF862",
        "VisuallyImpaired": "\uF866",
        "EventToDoLogo": "\uF869",
        "Variable2": "\uF86D",
        "ModelingView": "\uF871",
        "DisconnectVirtualMachine": "\uF873",
        "ReportLock": "\uF875",
        "Uneditable2": "\uF876",
        "Uneditable2Mirrored": "\uF877",
        "BarChartVerticalEdit": "\uF89D",
        "GlobalNavButtonActive": "\uF89F",
        "PollResults": "\uF8A0",
        "Rerun": "\uF8A1",
        "QandA": "\uF8A2",
        "QandAMirror": "\uF8A3",
        "BookAnswers": "\uF8A4",
        "AlertSettings": "\uF8B6",
        "TrimStart": "\uF8BB",
        "TrimEnd": "\uF8BC",
        "TableComputed": "\uF8F5",
        "DecreaseIndentLegacy": "\uE290",
        "IncreaseIndentLegacy": "\uE291",
        "SizeLegacy": "\uE2B2"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/iconAliases.js
  var registerIconAliases = function() {
    registerIconAlias("trash", "delete");
    registerIconAlias("onedrive", "onedrivelogo");
    registerIconAlias("alertsolid12", "eventdatemissed12");
    registerIconAlias("sixpointstar", "6pointstar");
    registerIconAlias("twelvepointstar", "12pointstar");
    registerIconAlias("toggleon", "toggleleft");
    registerIconAlias("toggleoff", "toggleright");
  };

  // ../node_modules/@fluentui/font-icons-mdl2/lib/version.js
  setVersion("@fluentui/font-icons-mdl2", "8.5.24");

  // ../node_modules/@fluentui/font-icons-mdl2/lib/index.js
  var DEFAULT_BASE_URL = "".concat(FLUENT_CDN_BASE_URL, "/assets/icons/");
  var win = getWindow();
  function initializeIcons20(baseUrl, options) {
    var _a7, _b3;
    if (baseUrl === void 0) {
      baseUrl = ((_a7 = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _a7 === void 0 ? void 0 : _a7.iconBaseUrl) || ((_b3 = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b3 === void 0 ? void 0 : _b3.fontBaseUrl) || DEFAULT_BASE_URL;
    }
    [initializeIcons, initializeIcons2, initializeIcons3, initializeIcons4, initializeIcons5, initializeIcons6, initializeIcons7, initializeIcons8, initializeIcons9, initializeIcons10, initializeIcons11, initializeIcons12, initializeIcons13, initializeIcons14, initializeIcons15, initializeIcons16, initializeIcons17, initializeIcons18, initializeIcons19].forEach(function(initialize) {
      return initialize(baseUrl, options);
    });
    registerIconAliases();
  }

  // ../node_modules/@fluentui/foundation-legacy/lib/createComponent.js
  var React59 = __toESM(require_react());

  // ../node_modules/@fluentui/foundation-legacy/lib/slots.js
  var React58 = __toESM(require_react());

  // ../node_modules/@fluentui/foundation-legacy/lib/utilities.js
  var assign2 = __assign;

  // ../node_modules/@fluentui/foundation-legacy/lib/slots.js
  function withSlots(type, props) {
    var children = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      children[_i - 2] = arguments[_i];
    }
    var slotType = type;
    if (slotType.isSlot) {
      children = React58.Children.toArray(children);
      if (children.length === 0) {
        return slotType(props);
      }
      return slotType(__assign(__assign({}, props), { children }));
    } else {
      return React58.createElement.apply(React58, __spreadArray([type, props], children, false));
    }
  }
  function createFactory(DefaultComponent, options) {
    if (options === void 0) {
      options = {};
    }
    var _a7 = options.defaultProp, defaultProp = _a7 === void 0 ? "children" : _a7;
    var result = function(componentProps, userProps, userSlotOptions, defaultStyles, theme) {
      if (React58.isValidElement(userProps)) {
        return userProps;
      }
      var flattenedUserProps = _translateShorthand(defaultProp, userProps);
      var finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);
      if (userSlotOptions) {
        if (userSlotOptions.component) {
          var UserComponent = userSlotOptions.component;
          return React58.createElement(UserComponent, __assign({}, finalProps));
        }
        if (userSlotOptions.render) {
          return userSlotOptions.render(finalProps, DefaultComponent);
        }
      }
      return React58.createElement(DefaultComponent, __assign({}, finalProps));
    };
    return result;
  }
  var defaultFactory = memoizeFunction(function(type) {
    return createFactory(type);
  });
  function getSlots(userProps, slots) {
    var result = {};
    var mixedProps = userProps;
    var _loop_1 = function(name_12) {
      if (slots.hasOwnProperty(name_12)) {
        var slot = function(componentProps) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          if (args.length > 0) {
            throw new Error("Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.");
          }
          return _renderSlot(
            slots[name_12],
            // TODO: this cast to any is hiding a relationship issue between the first two args
            componentProps,
            mixedProps[name_12],
            mixedProps.slots && mixedProps.slots[name_12],
            // _defaultStyles should always be present, but a check for existence is added to make view tests
            // easier to use.
            mixedProps._defaultStyles && mixedProps._defaultStyles[name_12],
            mixedProps.theme
          );
        };
        slot.isSlot = true;
        result[name_12] = slot;
      }
    };
    for (var name_1 in slots) {
      _loop_1(name_1);
    }
    return result;
  }
  function _translateShorthand(defaultProp, slotProps) {
    var _a7;
    var transformedProps;
    if (typeof slotProps === "string" || typeof slotProps === "number" || typeof slotProps === "boolean") {
      transformedProps = (_a7 = {}, _a7[defaultProp] = slotProps, _a7);
    } else {
      transformedProps = slotProps;
    }
    return transformedProps;
  }
  function _constructFinalProps(defaultStyles, theme) {
    var allProps = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      allProps[_i - 2] = arguments[_i];
    }
    var finalProps = {};
    var classNames2 = [];
    for (var _a7 = 0, allProps_1 = allProps; _a7 < allProps_1.length; _a7++) {
      var props = allProps_1[_a7];
      classNames2.push(props && props.className);
      assign2(finalProps, props);
    }
    finalProps.className = mergeCss([defaultStyles, classNames2], { rtl: getRTL2(theme) });
    return finalProps;
  }
  function _renderSlot(ComponentType, componentProps, userProps, slotOptions, defaultStyles, theme) {
    if (ComponentType.create !== void 0) {
      return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);
    } else {
      return defaultFactory(ComponentType)(componentProps, userProps, slotOptions, defaultStyles, theme);
    }
  }

  // ../node_modules/@fluentui/foundation-legacy/lib/createComponent.js
  function createComponent(view, options) {
    if (options === void 0) {
      options = {};
    }
    var _a7 = options.factoryOptions, factoryOptions = _a7 === void 0 ? {} : _a7;
    var defaultProp = factoryOptions.defaultProp;
    var ResultComponent = function(componentProps) {
      var settings = _getCustomizations(options.displayName, React59.useContext(CustomizerContext), options.fields);
      var stateReducer = options.state;
      if (stateReducer) {
        componentProps = __assign(__assign({}, componentProps), stateReducer(componentProps));
      }
      var theme = componentProps.theme || settings.theme;
      var tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);
      var styles2 = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles, componentProps.styles);
      var viewProps = __assign(__assign({}, componentProps), { styles: styles2, tokens, _defaultStyles: styles2, theme });
      return view(viewProps);
    };
    ResultComponent.displayName = options.displayName || view.name;
    if (defaultProp) {
      ResultComponent.create = createFactory(ResultComponent, { defaultProp });
    }
    assign2(ResultComponent, options.statics);
    return ResultComponent;
  }
  function _resolveStyles(props, theme, tokens) {
    var allStyles = [];
    for (var _i = 3; _i < arguments.length; _i++) {
      allStyles[_i - 3] = arguments[_i];
    }
    return concatStyleSets.apply(void 0, allStyles.map(function(styles2) {
      return typeof styles2 === "function" ? styles2(props, theme, tokens) : styles2;
    }));
  }
  function _resolveTokens(props, theme) {
    var allTokens = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      allTokens[_i - 2] = arguments[_i];
    }
    var tokens = {};
    for (var _a7 = 0, allTokens_1 = allTokens; _a7 < allTokens_1.length; _a7++) {
      var currentTokens = allTokens_1[_a7];
      if (currentTokens) {
        currentTokens = typeof currentTokens === "function" ? currentTokens(props, theme) : currentTokens;
        if (Array.isArray(currentTokens)) {
          currentTokens = _resolveTokens.apply(void 0, __spreadArray([props, theme], currentTokens, false));
        }
        assign2(tokens, currentTokens);
      }
    }
    return tokens;
  }
  function _getCustomizations(displayName, context, fields) {
    var DefaultFields2 = ["theme", "styles", "tokens"];
    return Customizations.getSettings(fields || DefaultFields2, displayName, context.customizations);
  }

  // ../node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.styles.js
  var GlobalClassNames11 = {
    root: "ms-StackItem"
  };
  var alignMap = {
    start: "flex-start",
    end: "flex-end"
  };
  var StackItemStyles = function(props, theme, tokens) {
    var grow = props.grow, shrink = props.shrink, disableShrink = props.disableShrink, align = props.align, verticalFill = props.verticalFill, order = props.order, className = props.className, _a7 = props.basis, basis = _a7 === void 0 ? "auto" : _a7;
    var classNames2 = getGlobalClassNames(GlobalClassNames11, theme);
    return {
      root: [
        theme.fonts.medium,
        classNames2.root,
        {
          flexBasis: basis,
          margin: tokens.margin,
          padding: tokens.padding,
          height: verticalFill ? "100%" : "auto",
          width: "auto"
        },
        grow && {
          flexGrow: grow === true ? 1 : grow
        },
        (disableShrink || !grow && !shrink) && {
          flexShrink: 0
        },
        shrink && !disableShrink && {
          flexShrink: 1
        },
        align && {
          alignSelf: alignMap[align] || align
        },
        order && {
          order
        },
        className
      ]
      // TODO: this cast may be hiding some potential issues with styling and name
      //        lookups and should be removed
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.js
  var StackItemView = function(props) {
    var children = props.children;
    var nativeProps = getNativeProps(props, htmlElementProperties);
    if (children == null) {
      return null;
    }
    var Slots = getSlots(props, {
      root: "div"
    });
    return withSlots(Slots.root, __assign({}, nativeProps), children);
  };
  var StackItem = createComponent(StackItemView, {
    displayName: "StackItem",
    styles: StackItemStyles
  });

  // ../node_modules/@fluentui/react/lib/components/Stack/Stack.js
  var React60 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Stack/StackUtils.js
  var _getThemedSpacing = function(space, theme) {
    if (theme.spacing.hasOwnProperty(space)) {
      return theme.spacing[space];
    }
    return space;
  };
  var _getValueUnitGap = function(gap) {
    var numericalPart = parseFloat(gap);
    var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;
    var numericalString = isNaN(numericalPart) ? "" : numericalPart.toString();
    var unitPart = gap.substring(numericalString.toString().length);
    return {
      value: numericalValue,
      unit: unitPart || "px"
    };
  };
  var parseGap = function(gap, theme) {
    if (gap === void 0 || gap === "") {
      return {
        rowGap: {
          value: 0,
          unit: "px"
        },
        columnGap: {
          value: 0,
          unit: "px"
        }
      };
    }
    if (typeof gap === "number") {
      return {
        rowGap: {
          value: gap,
          unit: "px"
        },
        columnGap: {
          value: gap,
          unit: "px"
        }
      };
    }
    var splitGap = gap.split(" ");
    if (splitGap.length > 2) {
      return {
        rowGap: {
          value: 0,
          unit: "px"
        },
        columnGap: {
          value: 0,
          unit: "px"
        }
      };
    }
    if (splitGap.length === 2) {
      return {
        rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),
        columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))
      };
    }
    var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));
    return {
      rowGap: calculatedGap,
      columnGap: calculatedGap
    };
  };
  var parsePadding = function(padding, theme) {
    if (padding === void 0 || typeof padding === "number" || padding === "") {
      return padding;
    }
    var paddingValues = padding.split(" ");
    if (paddingValues.length < 2) {
      return _getThemedSpacing(padding, theme);
    }
    return paddingValues.reduce(function(padding1, padding2) {
      return _getThemedSpacing(padding1, theme) + " " + _getThemedSpacing(padding2, theme);
    });
  };

  // ../node_modules/@fluentui/react/lib/components/Stack/Stack.styles.js
  var nameMap = {
    start: "flex-start",
    end: "flex-end"
  };
  var GlobalClassNames12 = {
    root: "ms-Stack",
    inner: "ms-Stack-inner",
    child: "ms-Stack-child"
  };
  var styles = function(props, theme, tokens) {
    var _a7, _b3, _c3, _d3, _e2, _f, _g, _h, _j, _k, _l, _m, _o;
    var className = props.className, disableShrink = props.disableShrink, enableScopedSelectors = props.enableScopedSelectors, grow = props.grow, horizontal = props.horizontal, horizontalAlign = props.horizontalAlign, reversed = props.reversed, verticalAlign = props.verticalAlign, verticalFill = props.verticalFill, wrap = props.wrap;
    var classNames2 = getGlobalClassNames(GlobalClassNames12, theme);
    var childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;
    var maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;
    var maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;
    var padding = tokens && tokens.padding ? tokens.padding : props.padding;
    var _p = parseGap(childrenGap, theme), rowGap = _p.rowGap, columnGap = _p.columnGap;
    var horizontalMargin = "".concat(-0.5 * columnGap.value).concat(columnGap.unit);
    var verticalMargin = "".concat(-0.5 * rowGap.value).concat(rowGap.unit);
    var childStyles = {
      textOverflow: "ellipsis"
    };
    var childSelector = "> " + (enableScopedSelectors ? "." + GlobalClassNames12.child : "*");
    var disableShrinkStyles = (_a7 = {}, // flexShrink styles are applied by the StackItem
    _a7["".concat(childSelector, ":not(.").concat(GlobalClassNames11.root, ")")] = {
      flexShrink: 0
    }, _a7);
    if (wrap) {
      return {
        root: [
          classNames2.root,
          {
            flexWrap: "wrap",
            maxWidth,
            maxHeight,
            width: "auto",
            overflow: "visible",
            height: "100%"
          },
          horizontalAlign && (_b3 = {}, _b3[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _b3),
          verticalAlign && (_c3 = {}, _c3[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _c3),
          className,
          {
            // not allowed to be overridden by className
            // since this is necessary in order to prevent collapsing margins
            display: "flex"
          },
          horizontal && {
            height: verticalFill ? "100%" : "auto"
          }
        ],
        inner: [
          classNames2.inner,
          (_d3 = {
            display: "flex",
            flexWrap: "wrap",
            marginLeft: horizontalMargin,
            marginRight: horizontalMargin,
            marginTop: verticalMargin,
            marginBottom: verticalMargin,
            overflow: "visible",
            boxSizing: "border-box",
            padding: parsePadding(padding, theme),
            // avoid unnecessary calc() calls if horizontal gap is 0
            width: columnGap.value === 0 ? "100%" : "calc(100% + ".concat(columnGap.value).concat(columnGap.unit, ")"),
            maxWidth: "100vw"
          }, _d3[childSelector] = __assign({ margin: "".concat(0.5 * rowGap.value).concat(rowGap.unit, " ").concat(0.5 * columnGap.value).concat(columnGap.unit) }, childStyles), _d3),
          disableShrink && disableShrinkStyles,
          horizontalAlign && (_e2 = {}, _e2[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _e2),
          verticalAlign && (_f = {}, _f[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _f),
          horizontal && (_g = {
            flexDirection: reversed ? "row-reverse" : "row",
            // avoid unnecessary calc() calls if vertical gap is 0
            height: rowGap.value === 0 ? "100%" : "calc(100% + ".concat(rowGap.value).concat(rowGap.unit, ")")
          }, _g[childSelector] = {
            maxWidth: columnGap.value === 0 ? "100%" : "calc(100% - ".concat(columnGap.value).concat(columnGap.unit, ")")
          }, _g),
          !horizontal && (_h = {
            flexDirection: reversed ? "column-reverse" : "column",
            height: "calc(100% + ".concat(rowGap.value).concat(rowGap.unit, ")")
          }, _h[childSelector] = {
            maxHeight: rowGap.value === 0 ? "100%" : "calc(100% - ".concat(rowGap.value).concat(rowGap.unit, ")")
          }, _h)
        ]
      };
    }
    return {
      root: [
        classNames2.root,
        (_j = {
          display: "flex",
          flexDirection: horizontal ? reversed ? "row-reverse" : "row" : reversed ? "column-reverse" : "column",
          flexWrap: "nowrap",
          width: "auto",
          height: verticalFill ? "100%" : "auto",
          maxWidth,
          maxHeight,
          padding: parsePadding(padding, theme),
          boxSizing: "border-box"
        }, _j[childSelector] = childStyles, _j),
        disableShrink && disableShrinkStyles,
        grow && {
          flexGrow: grow === true ? 1 : grow
        },
        horizontalAlign && (_k = {}, _k[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _k),
        verticalAlign && (_l = {}, _l[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _l),
        horizontal && columnGap.value > 0 && (_m = {}, // apply gap margin to every direct child except the first direct child if the direction is not reversed,
        // and the last direct one if it is
        _m[reversed ? "".concat(childSelector, ":not(:last-child)") : "".concat(childSelector, ":not(:first-child)")] = {
          marginLeft: "".concat(columnGap.value).concat(columnGap.unit)
        }, _m),
        !horizontal && rowGap.value > 0 && (_o = {}, // apply gap margin to every direct child except the first direct child if the direction is not reversed,
        // and the last direct one if it is
        _o[reversed ? "".concat(childSelector, ":not(:last-child)") : "".concat(childSelector, ":not(:first-child)")] = {
          marginTop: "".concat(rowGap.value).concat(rowGap.unit)
        }, _o),
        className
      ]
      // TODO: this cast may be hiding some potential issues with styling and name
      //        lookups and should be removed
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Stack/Stack.js
  var StackView = function(props) {
    var _a7 = props.as, RootType = _a7 === void 0 ? "div" : _a7, _b3 = props.disableShrink, disableShrink = _b3 === void 0 ? false : _b3, _c3 = props.doNotRenderFalsyValues, doNotRenderFalsyValues = _c3 === void 0 ? false : _c3, _d3 = props.enableScopedSelectors, enableScopedSelectors = _d3 === void 0 ? false : _d3, wrap = props.wrap, rest = __rest(props, ["as", "disableShrink", "doNotRenderFalsyValues", "enableScopedSelectors", "wrap"]);
    warnDeprecations("Stack", props, {
      gap: "tokens.childrenGap",
      maxHeight: "tokens.maxHeight",
      maxWidth: "tokens.maxWidth",
      padding: "tokens.padding"
    });
    var stackChildren = _processStackChildren(props.children, {
      disableShrink,
      enableScopedSelectors,
      doNotRenderFalsyValues
    });
    var nativeProps = getNativeProps(rest, htmlElementProperties);
    var Slots = getSlots(props, {
      root: RootType,
      inner: "div"
    });
    if (wrap) {
      return withSlots(
        Slots.root,
        __assign({}, nativeProps),
        withSlots(Slots.inner, null, stackChildren)
      );
    }
    return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);
  };
  function _processStackChildren(children, _a7) {
    var disableShrink = _a7.disableShrink, enableScopedSelectors = _a7.enableScopedSelectors, doNotRenderFalsyValues = _a7.doNotRenderFalsyValues;
    var childrenArray = React60.Children.toArray(children);
    childrenArray = React60.Children.map(childrenArray, function(child) {
      if (!child || !React60.isValidElement(child)) {
        return doNotRenderFalsyValues ? null : child;
      }
      if (child.type === React60.Fragment) {
        return child.props.children ? _processStackChildren(child.props.children, { disableShrink, enableScopedSelectors, doNotRenderFalsyValues }) : null;
      }
      var childAsReactElement = child;
      var defaultItemProps = {};
      if (_isStackItem(child)) {
        defaultItemProps = { shrink: !disableShrink };
      }
      var childClassName = childAsReactElement.props.className;
      return React60.cloneElement(childAsReactElement, __assign(__assign(__assign(__assign({}, defaultItemProps), childAsReactElement.props), childClassName && { className: childClassName }), enableScopedSelectors && { className: css(GlobalClassNames12.child, childClassName) }));
    });
    return childrenArray;
  }
  function _isStackItem(item) {
    return !!item && typeof item === "object" && !!item.type && // StackItem is generated by createComponent, so we need to check its displayName instead of name
    item.type.displayName === StackItem.displayName;
  }
  var StackStatics = {
    Item: StackItem
  };
  var Stack = createComponent(StackView, {
    displayName: "Stack",
    styles,
    statics: StackStatics
  });

  // ../node_modules/@griffel/core/constants.esm.js
  var __GLOBAL__ = typeof window === "undefined" ? window : window;
  var __NAMESPACE_PREFIX__ = "@griffel/";
  function getGlobalVar(name, defaultValue) {
    if (!__GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)]) {
      __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)] = defaultValue;
    }
    return __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)];
  }
  var DEBUG_RESET_CLASSES = /* @__PURE__ */ getGlobalVar("DEBUG_RESET_CLASSES", {});
  var DEFINITION_LOOKUP_TABLE = /* @__PURE__ */ getGlobalVar("DEFINITION_LOOKUP_TABLE", {});
  var DATA_BUCKET_ATTR = "data-make-styles-bucket";
  var RESET_HASH_PREFIX = "r";
  var SEQUENCE_HASH_LENGTH = 7;
  var SEQUENCE_PREFIX = "___";
  var DEBUG_SEQUENCE_SEPARATOR = "_";
  var SEQUENCE_SIZE = false ? SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH : SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH + DEBUG_SEQUENCE_SEPARATOR.length + SEQUENCE_HASH_LENGTH;
  var LOOKUP_DEFINITIONS_INDEX = 0;
  var LOOKUP_DIR_INDEX = 1;

  // ../node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h3 = 0;
    var k, i2 = 0, len = str.length;
    for (; len >= 4; ++i2, len -= 4) {
      k = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h3 = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h3 ^= (str.charCodeAt(i2 + 2) & 255) << 16;
      case 2:
        h3 ^= (str.charCodeAt(i2 + 1) & 255) << 8;
      case 1:
        h3 ^= str.charCodeAt(i2) & 255;
        h3 = /* Math.imul(h, m): */
        (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
    }
    h3 ^= h3 >>> 13;
    h3 = /* Math.imul(h, m): */
    (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
    return ((h3 ^ h3 >>> 15) >>> 0).toString(36);
  }

  // ../node_modules/@griffel/core/runtime/utils/hashSequence.esm.js
  function padEndHash(value) {
    const hashLength = value.length;
    if (hashLength === SEQUENCE_HASH_LENGTH) {
      return value;
    }
    for (let i2 = hashLength; i2 < SEQUENCE_HASH_LENGTH; i2++) {
      value += "0";
    }
    return value;
  }
  function hashSequence(classes, dir, sequenceIds = []) {
    if (false) {
      return SEQUENCE_PREFIX + padEndHash(murmur2(classes + dir));
    }
    return SEQUENCE_PREFIX + padEndHash(murmur2(classes + dir)) + DEBUG_SEQUENCE_SEPARATOR + padEndHash(murmur2(sequenceIds.join("")));
  }

  // ../node_modules/@griffel/core/runtime/reduceToClassNameForSlots.esm.js
  function reduceToClassName(classMap, dir) {
    let className = "";
    for (const propertyHash in classMap) {
      const classNameMapping = classMap[propertyHash];
      if (classNameMapping) {
        const hasRTLClassName = Array.isArray(classNameMapping);
        if (dir === "rtl") {
          className += (hasRTLClassName ? classNameMapping[1] : classNameMapping) + " ";
        } else {
          className += (hasRTLClassName ? classNameMapping[0] : classNameMapping) + " ";
        }
      }
    }
    return className.slice(0, -1);
  }
  function reduceToClassNameForSlots(classesMapBySlot, dir) {
    const classNamesForSlots = {};
    for (const slotName in classesMapBySlot) {
      const slotClasses = reduceToClassName(classesMapBySlot[slotName], dir);
      if (slotClasses === "") {
        classNamesForSlots[slotName] = "";
        continue;
      }
      const sequenceHash = hashSequence(slotClasses, dir);
      const resultSlotClasses = sequenceHash + " " + slotClasses;
      DEFINITION_LOOKUP_TABLE[sequenceHash] = [classesMapBySlot[slotName], dir];
      classNamesForSlots[slotName] = resultSlotClasses;
    }
    return classNamesForSlots;
  }

  // ../node_modules/@griffel/core/mergeClasses.esm.js
  var mergeClassesCachedResults = {};
  function mergeClasses() {
    let dir = null;
    let resultClassName = "";
    let sequenceMatch = "";
    const sequencesIds = new Array(arguments.length);
    let containsResetClassName = "";
    for (let i2 = 0; i2 < arguments.length; i2++) {
      const className = arguments[i2];
      if (typeof className === "string" && className !== "") {
        const sequenceIndex = className.indexOf(SEQUENCE_PREFIX);
        if (sequenceIndex === -1) {
          if (true) {
            className.split(" ").forEach((entry) => {
              if (entry.startsWith(RESET_HASH_PREFIX) && DEBUG_RESET_CLASSES[entry]) {
                if (containsResetClassName) {
                  console.error(`mergeClasses(): a passed string contains multiple classes produced by makeResetStyles (${className} & ${resultClassName}, this will lead to non-deterministic behavior. Learn more:https://griffel.js.org/react/api/make-reset-styles#limitations
Source string: ${className}`);
                } else {
                  containsResetClassName = entry;
                }
              }
            });
          }
          resultClassName += className + " ";
        } else {
          const sequenceId = className.substr(sequenceIndex, SEQUENCE_SIZE);
          if (sequenceIndex > 0) {
            resultClassName += className.slice(0, sequenceIndex);
          }
          sequenceMatch += sequenceId;
          sequencesIds[i2] = sequenceId;
        }
        if (true) {
          if (className.indexOf(SEQUENCE_PREFIX, sequenceIndex + 1) !== -1) {
            console.error(`mergeClasses(): a passed string contains multiple identifiers of atomic classes (classes that start with "${SEQUENCE_PREFIX}"), it's possible that passed classes were concatenated in a wrong way. Source string: ${className}`);
          }
        }
      }
    }
    if (sequenceMatch === "") {
      return resultClassName.slice(0, -1);
    }
    const mergeClassesResult = mergeClassesCachedResults[sequenceMatch];
    if (mergeClassesResult !== void 0) {
      return resultClassName + mergeClassesResult;
    }
    const sequenceMappings = [];
    for (let i2 = 0; i2 < arguments.length; i2++) {
      const sequenceId = sequencesIds[i2];
      if (sequenceId) {
        const sequenceMapping = DEFINITION_LOOKUP_TABLE[sequenceId];
        if (sequenceMapping) {
          sequenceMappings.push(sequenceMapping[LOOKUP_DEFINITIONS_INDEX]);
          if (true) {
            if (dir !== null && dir !== sequenceMapping[LOOKUP_DIR_INDEX]) {
              console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that has different direction (dir="${sequenceMapping[1] ? "rtl" : "ltr"}") setting than other classes. This is not supported. Source string: ${arguments[i2]}`);
            }
          }
          dir = sequenceMapping[LOOKUP_DIR_INDEX];
        } else {
          if (true) {
            console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that does not match any entry in cache. Source string: ${arguments[i2]}`);
          }
        }
      }
    }
    const resultDefinitions = Object.assign.apply(
      Object,
      // .assign() mutates the first object, we can't mutate mappings as it will produce invalid results later
      [{}].concat(sequenceMappings)
    );
    let atomicClassNames = reduceToClassName(resultDefinitions, dir);
    const newSequenceHash = hashSequence(atomicClassNames, dir, sequencesIds);
    atomicClassNames = newSequenceHash + " " + atomicClassNames;
    mergeClassesCachedResults[sequenceMatch] = atomicClassNames;
    DEFINITION_LOOKUP_TABLE[newSequenceHash] = [resultDefinitions, dir];
    return resultClassName + atomicClassNames;
  }

  // ../node_modules/@griffel/core/devtools/store.esm.js
  var sequenceDetails = {};
  var cssRules = /* @__PURE__ */ new Set();
  var debugData = {
    getChildrenSequences: (debugSequenceHash) => {
      const key = Object.keys(mergeClassesCachedResults).find((key2) => mergeClassesCachedResults[key2].startsWith(debugSequenceHash));
      if (key) {
        return key.split(SEQUENCE_PREFIX).filter((sequence) => sequence.length).map((sequence) => SEQUENCE_PREFIX + sequence);
      }
      return [];
    },
    addCSSRule: (rule) => {
      cssRules.add(rule);
    },
    addSequenceDetails: (classNamesForSlots, sourceURL) => {
      Object.entries(classNamesForSlots).forEach(([slotName, sequenceHash]) => {
        sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = {
          slotName,
          sourceURL
        };
      });
    },
    getCSSRules: () => {
      return Array.from(cssRules);
    },
    getSequenceDetails: (sequenceHash) => {
      return sequenceDetails[sequenceHash];
    }
  };

  // ../node_modules/@griffel/core/devtools/utils.esm.js
  function getDirectionalClassName(classes, direction) {
    return Array.isArray(classes) ? direction === "rtl" ? classes[1] : classes[0] : classes;
  }
  function getDebugClassNames(lookupItem, parentLookupItem, parentDebugClassNames, overridingSiblings) {
    const classesMapping = lookupItem[0];
    const direction = lookupItem[1];
    return Object.entries(classesMapping).map(([propertyHash, classes]) => {
      const className = getDirectionalClassName(classes, direction);
      let overriddenBy;
      if (parentDebugClassNames && parentLookupItem) {
        const matching = parentDebugClassNames.find(({
          className: parentClassName
        }) => parentClassName === className);
        if (!matching && parentLookupItem[0][propertyHash]) {
          overriddenBy = getDirectionalClassName(parentLookupItem[0][propertyHash], parentLookupItem[1]);
        } else if (matching && parentLookupItem[0][propertyHash]) {
          const siblingHasSameRule = overridingSiblings ? overridingSiblings.filter(({
            debugClassNames
          }) => debugClassNames.filter(({
            className: siblingClassName
          }) => siblingClassName === className).length > 0).length > 0 : false;
          overriddenBy = siblingHasSameRule ? matching.className : matching.overriddenBy;
        } else if (!matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        } else if (matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        }
      }
      return {
        className,
        overriddenBy
      };
    });
  }

  // ../node_modules/@griffel/core/devtools/getDebugTree.esm.js
  function getDebugTree(debugSequenceHash, parentNode) {
    const lookupItem = DEFINITION_LOOKUP_TABLE[debugSequenceHash];
    if (lookupItem === void 0) {
      return void 0;
    }
    const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : void 0;
    const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode === null || parentNode === void 0 ? void 0 : parentNode.debugClassNames, parentNode === null || parentNode === void 0 ? void 0 : parentNode.children);
    const node = {
      sequenceHash: debugSequenceHash,
      direction: lookupItem[1],
      children: [],
      debugClassNames
    };
    const childrenSequences = debugData.getChildrenSequences(node.sequenceHash);
    childrenSequences.reverse().forEach((sequence) => {
      const child = getDebugTree(sequence, node);
      if (child) {
        node.children.push(child);
      }
    });
    if (!node.children.length) {
      node.rules = {};
      node.debugClassNames.forEach(({
        className
      }) => {
        const mapData = debugData.getSequenceDetails(debugSequenceHash);
        if (mapData) {
          node.slot = mapData.slotName;
          node.sourceURL = mapData.sourceURL;
        }
        const cssRule = debugData.getCSSRules().find((cssRule2) => {
          return cssRule2.includes(className);
        });
        node.rules[className] = cssRule;
      });
    }
    return node;
  }

  // ../node_modules/@griffel/core/devtools/injectDevTools.esm.js
  function injectDevTools(document2) {
    const window2 = document2.defaultView;
    if (!window2 || window2.__GRIFFEL_DEVTOOLS__) {
      return;
    }
    const devtools = {
      getInfo: (element) => {
        const rootDebugSequenceHash = Array.from(element.classList).find((className) => className.startsWith(SEQUENCE_PREFIX));
        if (rootDebugSequenceHash === void 0) {
          return void 0;
        }
        return getDebugTree(rootDebugSequenceHash);
      }
    };
    Object.defineProperty(window2, "__GRIFFEL_DEVTOOLS__", {
      configurable: false,
      enumerable: false,
      get() {
        return devtools;
      }
    });
  }

  // ../node_modules/@griffel/core/devtools/isDevToolsEnabled.esm.js
  var isDevToolsEnabled = /* @__PURE__ */ (() => {
    var _a7;
    try {
      return Boolean(typeof window !== "undefined" && ((_a7 = window.sessionStorage) === null || _a7 === void 0 ? void 0 : _a7.getItem("__GRIFFEL_DEVTOOLS__")));
    } catch (e2) {
      return false;
    }
  })();

  // ../node_modules/@griffel/core/runtime/utils/normalizeCSSBucketEntry.esm.js
  function normalizeCSSBucketEntry(entry) {
    if (!Array.isArray(entry)) {
      return [entry];
    }
    if (entry.length > 2) {
      throw new Error("CSS Bucket contains an entry with greater than 2 items, please report this to https://github.com/microsoft/griffel/issues");
    }
    return entry;
  }

  // ../node_modules/@griffel/core/renderer/createIsomorphicStyleSheet.esm.js
  function createIsomorphicStyleSheet(styleElement, bucketName, elementAttributes) {
    const __cssRulesForSSR = [];
    elementAttributes[DATA_BUCKET_ATTR] = bucketName;
    if (styleElement) {
      for (const attrName in elementAttributes) {
        styleElement.setAttribute(attrName, elementAttributes[attrName]);
      }
    }
    function insertRule(rule) {
      if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
        return styleElement.sheet.insertRule(rule, styleElement.sheet.cssRules.length);
      }
      return __cssRulesForSSR.push(rule);
    }
    return {
      elementAttributes,
      insertRule,
      element: styleElement,
      bucketName,
      cssRules() {
        if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
          return Array.from(styleElement.sheet.cssRules).map((cssRule) => cssRule.cssText);
        }
        return __cssRulesForSSR;
      }
    };
  }

  // ../node_modules/@griffel/core/renderer/getStyleSheetForBucket.esm.js
  var styleBucketOrdering = [
    // reset styles
    "r",
    // catch-all
    "d",
    // link
    "l",
    // visited
    "v",
    // focus-within
    "w",
    // focus
    "f",
    // focus-visible
    "i",
    // hover
    "h",
    // active
    "a",
    // at rules for reset styles
    "s",
    // keyframes
    "k",
    // at-rules
    "t",
    // @media rules
    "m",
    // @container rules
    "c"
  ];
  var styleBucketOrderingMap = /* @__PURE__ */ styleBucketOrdering.reduce((acc, cur, j3) => {
    acc[cur] = j3;
    return acc;
  }, {});
  function getStyleSheetForBucket(bucketName, targetDocument, insertionPoint, renderer, metadata = {}) {
    const isMediaBucket = bucketName === "m";
    const stylesheetKey = isMediaBucket ? bucketName + metadata["m"] : bucketName;
    if (!renderer.stylesheets[stylesheetKey]) {
      const tag = targetDocument && targetDocument.createElement("style");
      const stylesheet3 = createIsomorphicStyleSheet(tag, bucketName, {
        ...renderer.styleElementAttributes,
        ...isMediaBucket && {
          media: metadata["m"]
        }
      });
      renderer.stylesheets[stylesheetKey] = stylesheet3;
      if (targetDocument && tag) {
        targetDocument.head.insertBefore(tag, findInsertionPoint(targetDocument, insertionPoint, bucketName, renderer, metadata));
      }
    }
    return renderer.stylesheets[stylesheetKey];
  }
  function findInsertionPoint(targetDocument, insertionPoint, targetBucket, renderer, metadata) {
    const targetOrder = styleBucketOrderingMap[targetBucket];
    let comparer = (el) => targetOrder - styleBucketOrderingMap[el.getAttribute(DATA_BUCKET_ATTR)];
    let styleElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}]`);
    if (targetBucket === "m" && metadata) {
      const mediaElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}="${targetBucket}"]`);
      if (mediaElements.length) {
        styleElements = mediaElements;
        comparer = (el) => renderer.compareMediaQueries(metadata["m"], el.media);
      }
    }
    const length = styleElements.length;
    let index = length - 1;
    while (index >= 0) {
      const styleElement = styleElements.item(index);
      if (comparer(styleElement) > 0) {
        return styleElement.nextSibling;
      }
      index--;
    }
    if (length > 0) {
      return styleElements.item(0);
    }
    return insertionPoint ? insertionPoint.nextSibling : null;
  }

  // ../node_modules/@griffel/core/renderer/safeInsertRule.esm.js
  var ignoreSuffixes = /* @__PURE__ */ ["-moz-placeholder", "-moz-focus-inner", "-moz-focusring", "-ms-input-placeholder", "-moz-read-write", "-moz-read-only"].join("|");
  var ignoreSuffixesRegex = /* @__PURE__ */ new RegExp(`:(${ignoreSuffixes})`);
  function safeInsertRule(sheet, ruleCSS) {
    try {
      sheet.insertRule(ruleCSS);
    } catch (e2) {
      if (!ignoreSuffixesRegex.test(ruleCSS)) {
        console.error(`There was a problem inserting the following rule: "${ruleCSS}"`, e2);
      }
    }
  }

  // ../node_modules/@griffel/core/renderer/createDOMRenderer.esm.js
  var lastIndex = 0;
  var defaultCompareMediaQueries = (a2, b3) => a2 < b3 ? -1 : a2 > b3 ? 1 : 0;
  function createDOMRenderer(targetDocument = typeof document === "undefined" ? void 0 : document, options = {}) {
    const {
      unstable_filterCSSRule,
      insertionPoint,
      styleElementAttributes,
      compareMediaQueries = defaultCompareMediaQueries
    } = options;
    const renderer = {
      insertionCache: {},
      stylesheets: {},
      styleElementAttributes: Object.freeze(styleElementAttributes),
      compareMediaQueries,
      id: `d${lastIndex++}`,
      insertCSSRules(cssRules2) {
        for (const styleBucketName in cssRules2) {
          const cssRulesForBucket = cssRules2[styleBucketName];
          for (let i2 = 0, l3 = cssRulesForBucket.length; i2 < l3; i2++) {
            const [ruleCSS, metadata] = normalizeCSSBucketEntry(cssRulesForBucket[i2]);
            const sheet = getStyleSheetForBucket(styleBucketName, targetDocument, insertionPoint || null, renderer, metadata);
            if (renderer.insertionCache[ruleCSS]) {
              continue;
            }
            renderer.insertionCache[ruleCSS] = styleBucketName;
            if (isDevToolsEnabled) {
              debugData.addCSSRule(ruleCSS);
            }
            if (unstable_filterCSSRule) {
              if (unstable_filterCSSRule(ruleCSS)) {
                safeInsertRule(sheet, ruleCSS);
              }
            } else {
              safeInsertRule(sheet, ruleCSS);
            }
          }
        }
      }
    };
    if (targetDocument && true && isDevToolsEnabled) {
      injectDevTools(targetDocument);
    }
    return renderer;
  }

  // ../node_modules/@griffel/core/devtools/react-render-tracker/stackTrace.esm.js
  var UNKNOWN_FUNCTION = "<unknown>";
  function parseStackTraceLine(line) {
    return parseChrome(line) || parseGecko(line) || parseJSC(line);
  }
  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)?\)?\s*$/i;
  var chromeRe2 = /^\s*at ()((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)\s*$/i;
  var chromeEvalRe = /\((\S*)\)/;
  function parseChrome(line) {
    const parts = chromeRe.exec(line) || chromeRe2.exec(line);
    if (!parts) {
      return null;
    }
    let loc = parts[2];
    const isNative = loc && loc.indexOf("native") === 0;
    const isEval = loc && loc.indexOf("eval") === 0;
    const submatch = chromeEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: !isNative ? parts[2] : null,
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  function parseGecko(line) {
    const parts = geckoRe.exec(line);
    if (!parts) {
      return null;
    }
    let loc = parts[3];
    const isEval = loc && loc.indexOf(" > eval") > -1;
    const submatch = geckoEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?)\s*$/i;
  function parseJSC(line) {
    const parts = javaScriptCoreRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }

  // ../node_modules/@griffel/core/devtools/getSourceURLfromError.esm.js
  function getSourceURLfromError() {
    const stacks = String(new Error().stack).split("\n");
    const userMakeStyleCallLine = findUserMakeStyleCallInStacks(stacks);
    if (userMakeStyleCallLine === void 0) {
      return void 0;
    }
    const result = parseStackTraceLine(userMakeStyleCallLine);
    return result === null || result === void 0 ? void 0 : result.loc;
  }
  function findUserMakeStyleCallInStacks(stacks) {
    for (let i2 = stacks.length - 1; i2 >= 0; --i2) {
      if (stacks[i2].includes("at getSourceURLfromError")) {
        return stacks[i2 + 3];
      }
    }
    return void 0;
  }

  // ../node_modules/@griffel/core/insertionFactory.esm.js
  var insertionFactory = () => {
    const insertionCache = {};
    return function insertStyles(renderer, cssRules2) {
      if (insertionCache[renderer.id] === void 0) {
        renderer.insertCSSRules(cssRules2);
        insertionCache[renderer.id] = true;
      }
    };
  };

  // ../node_modules/@griffel/core/__styles.esm.js
  function __styles(classesMapBySlot, cssRules2, factory = insertionFactory) {
    const insertStyles = factory();
    let ltrClassNamesForSlots = null;
    let rtlClassNamesForSlots = null;
    let sourceURL;
    if (isDevToolsEnabled) {
      sourceURL = getSourceURLfromError();
    }
    function computeClasses(options) {
      const {
        dir,
        renderer
      } = options;
      const isLTR = dir === "ltr";
      if (isLTR) {
        if (ltrClassNamesForSlots === null) {
          ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      } else {
        if (rtlClassNamesForSlots === null) {
          rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      }
      insertStyles(renderer, cssRules2);
      const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
      if (isDevToolsEnabled) {
        debugData.addSequenceDetails(classNamesForSlots, sourceURL);
      }
      return classNamesForSlots;
    }
    return computeClasses;
  }

  // ../node_modules/@griffel/core/__resetStyles.esm.js
  function __resetStyles(ltrClassName, rtlClassName, cssRules2, factory = insertionFactory) {
    const insertStyles = factory();
    function computeClassName(options) {
      const {
        dir,
        renderer
      } = options;
      const className = dir === "ltr" ? ltrClassName : rtlClassName || ltrClassName;
      insertStyles(renderer, Array.isArray(cssRules2) ? {
        r: cssRules2
      } : cssRules2);
      if (true) {
        DEBUG_RESET_CLASSES[className] = 1;
      }
      return className;
    }
    return computeClassName;
  }

  // ../node_modules/@griffel/react/utils/canUseDOM.esm.js
  function canUseDOM2() {
    return typeof window !== "undefined" && !!(window.document && window.document.createElement);
  }

  // ../node_modules/@griffel/react/useInsertionEffect.esm.js
  var React61 = __toESM(require_react());
  var useInsertionEffect2 = (
    // @ts-expect-error Hack to make sure that `useInsertionEffect` will not cause bundling issues in older React versions
    // eslint-disable-next-line no-useless-concat
    React61["useInsertionEffect"] ? React61["useInsertionEffect"] : void 0
  );

  // ../node_modules/@griffel/react/insertionFactory.esm.js
  var insertionFactory2 = () => {
    const insertionCache = {};
    return function insert(renderer, cssRules2) {
      if (useInsertionEffect2 && canUseDOM2()) {
        useInsertionEffect2(() => {
          renderer.insertCSSRules(cssRules2);
        }, [renderer, cssRules2]);
        return;
      }
      if (insertionCache[renderer.id] === void 0) {
        renderer.insertCSSRules(cssRules2);
        insertionCache[renderer.id] = true;
      }
    };
  };

  // ../node_modules/@griffel/react/RendererContext.esm.js
  var React62 = __toESM(require_react());
  var RendererContext = /* @__PURE__ */ React62.createContext(/* @__PURE__ */ createDOMRenderer());
  function useRenderer() {
    return React62.useContext(RendererContext);
  }

  // ../node_modules/@griffel/react/TextDirectionContext.esm.js
  var React63 = __toESM(require_react());
  var TextDirectionContext = /* @__PURE__ */ React63.createContext("ltr");
  function useTextDirection() {
    return React63.useContext(TextDirectionContext);
  }

  // ../node_modules/@griffel/react/__styles.esm.js
  function __styles2(classesMapBySlot, cssRules2) {
    const getStyles19 = __styles(classesMapBySlot, cssRules2, insertionFactory2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles19({
        dir,
        renderer
      });
    };
  }

  // ../node_modules/@griffel/react/__resetStyles.esm.js
  function __resetStyles2(ltrClassName, rtlClassName, cssRules2) {
    const getStyles19 = __resetStyles(ltrClassName, rtlClassName, cssRules2, insertionFactory2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles19({
        dir,
        renderer
      });
    };
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/utils/Runtime.js
  var ReactRuntime = __toESM(require_jsx_runtime());
  var Runtime = ReactRuntime;

  // ../node_modules/@fluentui/react-jsx-runtime/lib/jsx/createJSX.js
  var React70 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/compose/slot.js
  var slot_exports = {};
  __export(slot_exports, {
    always: () => always,
    optional: () => optional,
    resolveShorthand: () => resolveShorthand
  });
  var React64 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/compose/constants.js
  var SLOT_RENDER_FUNCTION_SYMBOL = Symbol("fui.slotRenderFunction");
  var SLOT_ELEMENT_TYPE_SYMBOL = Symbol("fui.slotElementType");

  // ../node_modules/@fluentui/react-utilities/lib/compose/slot.js
  function always(value, options) {
    const { defaultProps, elementType } = options;
    const props = resolveShorthand(value);
    const propsWithMetadata = {
      ...defaultProps,
      ...props,
      [SLOT_ELEMENT_TYPE_SYMBOL]: elementType
    };
    if (props && typeof props.children === "function") {
      var _defaultProps;
      propsWithMetadata[SLOT_RENDER_FUNCTION_SYMBOL] = props.children;
      propsWithMetadata.children = (_defaultProps = defaultProps) === null || _defaultProps === void 0 ? void 0 : _defaultProps.children;
    }
    return propsWithMetadata;
  }
  function optional(value, options) {
    if (value === null || value === void 0 && !options.renderByDefault) {
      return void 0;
    }
    return always(value, options);
  }
  function resolveShorthand(value) {
    if (typeof value === "string" || typeof value === "number" || Array.isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    React64.isValidElement(value)) {
      return {
        children: value
      };
    }
    if (value && typeof value !== "object" && true) {
      console.error(`@fluentui/react-utilities [slot.${resolveShorthand.name}]:
A slot got an invalid value "${value}" (${typeof value}).
A valid value for a slot is a slot shorthand or slot properties object.
Slot shorthands can be strings, numbers, arrays or JSX elements`);
    }
    return value;
  }

  // ../node_modules/@fluentui/react-utilities/lib/compose/isSlot.js
  function isSlot(element) {
    var _element;
    return Boolean((_element = element) === null || _element === void 0 ? void 0 : _element.hasOwnProperty(SLOT_ELEMENT_TYPE_SYMBOL));
  }

  // ../node_modules/@fluentui/react-utilities/lib/compose/resolveShorthand.js
  var resolveShorthand2 = (value, options) => {
    var _options;
    return optional(value, {
      ...options,
      renderByDefault: (_options = options) === null || _options === void 0 ? void 0 : _options.required,
      // elementType as undefined is the way to identify between a slot and a resolveShorthand call
      // in the case elementType is undefined assertSlots will fail, ensuring it'll only work with slot method.
      elementType: void 0
    });
  };

  // ../node_modules/@fluentui/react-utilities/lib/compose/assertSlots.js
  var React65 = __toESM(require_react());
  function assertSlots(state) {
    if (true) {
      const typedState = state;
      for (const slotName of Object.keys(typedState.components)) {
        const slotElement = typedState[slotName];
        if (slotElement === void 0) {
          continue;
        }
        if (!isSlot(slotElement)) {
          typedState[slotName] = slot_exports.always(slotElement, {
            elementType: typedState.components[slotName]
          });
          console.warn(`@fluentui/react-utilities [${assertSlots.name}]:
"state.${slotName}" is not a slot!
Be sure to create slots properly by using "slot.always" or "slot.optional".`);
        } else {
          const { [SLOT_ELEMENT_TYPE_SYMBOL]: elementType } = slotElement;
          if (elementType !== typedState.components[slotName]) {
            slotElement[SLOT_ELEMENT_TYPE_SYMBOL] = typedState.components[slotName];
            console.warn(`@fluentui/react-utilities [${assertSlots.name}]:
"state.${slotName}" element type differs from "state.components.${slotName}",
${elementType} !== ${typedState.components[slotName]}.
Be sure to create slots properly by using "slot.always" or "slot.optional" with the correct elementType.`);
          }
        }
      }
    }
  }

  // ../node_modules/@fluentui/react-utilities/lib/ssr/canUseDOM.js
  function canUseDOM3() {
    return typeof window !== "undefined" && !!(window.document && // eslint-disable-next-line deprecation/deprecation
    window.document.createElement);
  }

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js
  var React67 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useIsomorphicLayoutEffect.js
  var React66 = __toESM(require_react());
  var useIsomorphicLayoutEffect2 = canUseDOM3() ? React66.useLayoutEffect : React66.useEffect;

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js
  var useEventCallback2 = (fn) => {
    const callbackRef = React67.useRef(() => {
      throw new Error("Cannot call an event handler while rendering");
    });
    useIsomorphicLayoutEffect2(() => {
      callbackRef.current = fn;
    }, [
      fn
    ]);
    return React67.useCallback((...args) => {
      const callback = callbackRef.current;
      return callback(...args);
    }, [
      callbackRef
    ]);
  };

  // ../node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js
  var React68 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/utils/properties.js
  var toObjectMap2 = (...items) => {
    const result = {};
    for (const item of items) {
      const keys = Array.isArray(item) ? item : Object.keys(item);
      for (const key of keys) {
        result[key] = 1;
      }
    }
    return result;
  };
  var baseElementEvents2 = toObjectMap2([
    "onAuxClick",
    "onAnimationEnd",
    "onAnimationStart",
    "onCopy",
    "onCut",
    "onPaste",
    "onCompositionEnd",
    "onCompositionStart",
    "onCompositionUpdate",
    "onFocus",
    "onFocusCapture",
    "onBlur",
    "onBlurCapture",
    "onChange",
    "onInput",
    "onSubmit",
    "onLoad",
    "onError",
    "onKeyDown",
    "onKeyDownCapture",
    "onKeyPress",
    "onKeyUp",
    "onAbort",
    "onCanPlay",
    "onCanPlayThrough",
    "onDurationChange",
    "onEmptied",
    "onEncrypted",
    "onEnded",
    "onLoadedData",
    "onLoadedMetadata",
    "onLoadStart",
    "onPause",
    "onPlay",
    "onPlaying",
    "onProgress",
    "onRateChange",
    "onSeeked",
    "onSeeking",
    "onStalled",
    "onSuspend",
    "onTimeUpdate",
    "onVolumeChange",
    "onWaiting",
    "onClick",
    "onClickCapture",
    "onContextMenu",
    "onDoubleClick",
    "onDrag",
    "onDragEnd",
    "onDragEnter",
    "onDragExit",
    "onDragLeave",
    "onDragOver",
    "onDragStart",
    "onDrop",
    "onMouseDown",
    "onMouseDownCapture",
    "onMouseEnter",
    "onMouseLeave",
    "onMouseMove",
    "onMouseOut",
    "onMouseOver",
    "onMouseUp",
    "onMouseUpCapture",
    "onSelect",
    "onTouchCancel",
    "onTouchEnd",
    "onTouchMove",
    "onTouchStart",
    "onScroll",
    "onWheel",
    "onPointerCancel",
    "onPointerDown",
    "onPointerEnter",
    "onPointerLeave",
    "onPointerMove",
    "onPointerOut",
    "onPointerOver",
    "onPointerUp",
    "onGotPointerCapture",
    "onLostPointerCapture"
  ]);
  var baseElementProperties2 = toObjectMap2([
    "accessKey",
    "children",
    "className",
    "contentEditable",
    "dir",
    "draggable",
    "hidden",
    "htmlFor",
    "id",
    "lang",
    "ref",
    "role",
    "style",
    "tabIndex",
    "title",
    "translate",
    "spellCheck",
    "name"
  ]);
  var microdataProperties = toObjectMap2([
    "itemID",
    "itemProp",
    "itemRef",
    "itemScope",
    "itemType"
  ]);
  var htmlElementProperties2 = toObjectMap2(baseElementProperties2, baseElementEvents2, microdataProperties);
  var labelProperties2 = toObjectMap2(htmlElementProperties2, [
    "form"
  ]);
  var audioProperties2 = toObjectMap2(htmlElementProperties2, [
    "height",
    "loop",
    "muted",
    "preload",
    "src",
    "width"
  ]);
  var videoProperties2 = toObjectMap2(audioProperties2, [
    "poster"
  ]);
  var olProperties2 = toObjectMap2(htmlElementProperties2, [
    "start"
  ]);
  var liProperties2 = toObjectMap2(htmlElementProperties2, [
    "value"
  ]);
  var anchorProperties2 = toObjectMap2(htmlElementProperties2, [
    "download",
    "href",
    "hrefLang",
    "media",
    "rel",
    "target",
    "type"
  ]);
  var timeProperties = toObjectMap2(htmlElementProperties2, [
    "dateTime"
  ]);
  var buttonProperties2 = toObjectMap2(htmlElementProperties2, [
    "autoFocus",
    "disabled",
    "form",
    "formAction",
    "formEncType",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "type",
    "value"
  ]);
  var inputProperties2 = toObjectMap2(buttonProperties2, [
    "accept",
    "alt",
    "autoCapitalize",
    "autoComplete",
    "checked",
    "dirname",
    "form",
    "height",
    "inputMode",
    "list",
    "max",
    "maxLength",
    "min",
    "multiple",
    "pattern",
    "placeholder",
    "readOnly",
    "required",
    "src",
    "step",
    "size",
    "type",
    "value",
    "width"
  ]);
  var textAreaProperties2 = toObjectMap2(buttonProperties2, [
    "autoCapitalize",
    "cols",
    "dirname",
    "form",
    "maxLength",
    "placeholder",
    "readOnly",
    "required",
    "rows",
    "wrap"
  ]);
  var selectProperties2 = toObjectMap2(buttonProperties2, [
    "form",
    "multiple",
    "required"
  ]);
  var optionProperties2 = toObjectMap2(htmlElementProperties2, [
    "selected",
    "value"
  ]);
  var tableProperties2 = toObjectMap2(htmlElementProperties2, [
    "cellPadding",
    "cellSpacing"
  ]);
  var trProperties2 = htmlElementProperties2;
  var thProperties2 = toObjectMap2(htmlElementProperties2, [
    "colSpan",
    "rowSpan",
    "scope"
  ]);
  var tdProperties2 = toObjectMap2(htmlElementProperties2, [
    "colSpan",
    "headers",
    "rowSpan",
    "scope"
  ]);
  var colGroupProperties2 = toObjectMap2(htmlElementProperties2, [
    "span"
  ]);
  var colProperties2 = toObjectMap2(htmlElementProperties2, [
    "span"
  ]);
  var fieldsetProperties = toObjectMap2(htmlElementProperties2, [
    "disabled",
    "form"
  ]);
  var formProperties2 = toObjectMap2(htmlElementProperties2, [
    "acceptCharset",
    "action",
    "encType",
    "encType",
    "method",
    "noValidate",
    "target"
  ]);
  var iframeProperties2 = toObjectMap2(htmlElementProperties2, [
    "allow",
    "allowFullScreen",
    "allowPaymentRequest",
    "allowTransparency",
    "csp",
    "height",
    "importance",
    "referrerPolicy",
    "sandbox",
    "src",
    "srcDoc",
    "width"
  ]);
  var imgProperties2 = toObjectMap2(htmlElementProperties2, [
    "alt",
    "crossOrigin",
    "height",
    "src",
    "srcSet",
    "useMap",
    "width"
  ]);
  var dialogProperties = toObjectMap2(htmlElementProperties2, [
    "open",
    "onCancel",
    "onClose"
  ]);
  function getNativeProps2(props, allowedPropNames, excludedPropNames) {
    const isArray = Array.isArray(allowedPropNames);
    const result = {};
    const keys = Object.keys(props);
    for (const key of keys) {
      var _excludedPropNames;
      const isNativeProp = !isArray && allowedPropNames[key] || isArray && allowedPropNames.indexOf(key) >= 0 || key.indexOf("data-") === 0 || key.indexOf("aria-") === 0;
      if (isNativeProp && (!excludedPropNames || ((_excludedPropNames = excludedPropNames) === null || _excludedPropNames === void 0 ? void 0 : _excludedPropNames.indexOf(key)) === -1)) {
        result[key] = props[key];
      }
    }
    return result;
  }

  // ../node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js
  var nativeElementMap = {
    label: labelProperties2,
    audio: audioProperties2,
    video: videoProperties2,
    ol: olProperties2,
    li: liProperties2,
    a: anchorProperties2,
    button: buttonProperties2,
    input: inputProperties2,
    textarea: textAreaProperties2,
    select: selectProperties2,
    option: optionProperties2,
    table: tableProperties2,
    tr: trProperties2,
    th: thProperties2,
    td: tdProperties2,
    colGroup: colGroupProperties2,
    col: colProperties2,
    fieldset: fieldsetProperties,
    form: formProperties2,
    iframe: iframeProperties2,
    img: imgProperties2,
    time: timeProperties,
    dialog: dialogProperties
  };
  function getNativeElementProps2(tagName, props, excludedPropNames) {
    const allowedPropNames = tagName && nativeElementMap[tagName] || htmlElementProperties2;
    allowedPropNames.as = 1;
    return getNativeProps2(props, allowedPropNames, excludedPropNames);
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/utils/getMetadataFromSlotComponent.js
  function getMetadataFromSlotComponent(type) {
    const { as, [SLOT_ELEMENT_TYPE_SYMBOL]: baseElementType, [SLOT_RENDER_FUNCTION_SYMBOL]: renderFunction, ...propsWithoutMetadata } = type;
    const props = propsWithoutMetadata;
    const elementType = typeof baseElementType === "string" ? as !== null && as !== void 0 ? as : baseElementType : baseElementType;
    if (typeof elementType !== "string" && as) {
      props.as = as;
    }
    return {
      elementType,
      props,
      renderFunction
    };
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/utils/createCompatSlotComponent.js
  var React69 = __toESM(require_react());
  function createCompatSlotComponent(type, props) {
    return {
      ...props,
      [SLOT_ELEMENT_TYPE_SYMBOL]: type
    };
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/jsx/createJSX.js
  var createJSX = (runtime) => {
    const jsxFromSlotComponent = (type, overrideProps, key, source, self) => {
      const { elementType, renderFunction, props: slotProps } = getMetadataFromSlotComponent(type);
      const props = {
        ...slotProps,
        ...overrideProps
      };
      if (renderFunction) {
        return runtime(React70.Fragment, {
          children: renderFunction(elementType, props)
        }, key, source, self);
      }
      return runtime(elementType, props, key, source, self);
    };
    return (type, overrideProps, key, source, self) => {
      if (isSlot(overrideProps)) {
        return jsxFromSlotComponent(createCompatSlotComponent(type, overrideProps), null, key, source, self);
      }
      if (isSlot(type)) {
        return jsxFromSlotComponent(type, overrideProps, key, source, self);
      }
      return runtime(type, overrideProps, key, source, self);
    };
  };

  // ../node_modules/@fluentui/react-jsx-runtime/lib/jsx-runtime.js
  var import_react2 = __toESM(require_react());
  var jsx = createJSX(Runtime.jsx);
  var jsxs = createJSX(Runtime.jsxs);

  // ../node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext/CustomStyleHooksContext.js
  var React71 = __toESM(require_react());
  var CustomStyleHooksContext = React71.createContext(void 0);
  var noop = () => {
  };
  var CustomStyleHooksProvider = CustomStyleHooksContext.Provider;
  var useCustomStyleHook = (hook) => {
    var _React_useContext2;
    var _React_useContext_hook;
    return (_React_useContext_hook = (_React_useContext2 = React71.useContext(CustomStyleHooksContext)) === null || _React_useContext2 === void 0 ? void 0 : _React_useContext2[hook]) !== null && _React_useContext_hook !== void 0 ? _React_useContext_hook : noop;
  };

  // ../node_modules/@fluentui/keyboard-keys/lib/keys.js
  var Enter = "Enter";
  var Space = " ";

  // ../node_modules/@fluentui/react-aria/lib/button/useARIAButtonProps.js
  var React72 = __toESM(require_react());
  function useARIAButtonProps(type, props) {
    const { disabled, disabledFocusable = false, ["aria-disabled"]: ariaDisabled, onClick, onKeyDown, onKeyUp, ...rest } = props !== null && props !== void 0 ? props : {};
    const normalizedARIADisabled = typeof ariaDisabled === "string" ? ariaDisabled === "true" : ariaDisabled;
    const isDisabled = disabled || disabledFocusable || normalizedARIADisabled;
    const handleClick = useEventCallback2((ev) => {
      if (isDisabled) {
        ev.preventDefault();
        ev.stopPropagation();
      } else {
        var _onClick;
        (_onClick = onClick) === null || _onClick === void 0 ? void 0 : _onClick(ev);
      }
    });
    const handleKeyDown = useEventCallback2((ev) => {
      var _onKeyDown2;
      (_onKeyDown2 = onKeyDown) === null || _onKeyDown2 === void 0 ? void 0 : _onKeyDown2(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        return;
      } else if (key === Enter) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    const handleKeyUp = useEventCallback2((ev) => {
      var _onKeyUp2;
      (_onKeyUp2 = onKeyUp) === null || _onKeyUp2 === void 0 ? void 0 : _onKeyUp2(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    if (type === "button" || type === void 0) {
      return {
        ...rest,
        disabled: disabled && !disabledFocusable,
        "aria-disabled": disabledFocusable ? true : normalizedARIADisabled,
        // onclick should still use internal handler to ensure prevention if disabled
        // if disabledFocusable then there's no requirement for handlers as those events should not be propagated
        onClick: disabledFocusable ? void 0 : handleClick,
        onKeyUp: disabledFocusable ? void 0 : onKeyUp,
        onKeyDown: disabledFocusable ? void 0 : onKeyDown
      };
    } else {
      const resultProps = {
        role: "button",
        tabIndex: disabled && !disabledFocusable ? void 0 : 0,
        ...rest,
        // If it's not a <button> than listeners are required even with disabledFocusable
        // Since you cannot assure the default behavior of the element
        // E.g: <a> will redirect on click
        onClick: handleClick,
        onKeyUp: handleKeyUp,
        onKeyDown: handleKeyDown,
        "aria-disabled": disabled || disabledFocusable || normalizedARIADisabled
      };
      if (type === "a" && isDisabled) {
        resultProps.href = void 0;
      }
      return resultProps;
    }
  }

  // ../node_modules/@fluentui/react-aria/lib/button/useARIAButtonShorthand.js
  var useARIAButtonShorthand = (value, options) => {
    var _shorthand;
    const shorthand = resolveShorthand2(value, options);
    var _shorthand_as;
    const shorthandARIAButton = useARIAButtonProps((_shorthand_as = (_shorthand = shorthand) === null || _shorthand === void 0 ? void 0 : _shorthand.as) !== null && _shorthand_as !== void 0 ? _shorthand_as : "button", shorthand);
    return shorthand && shorthandARIAButton;
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/Button.js
  var React75 = __toESM(require_react());

  // ../node_modules/@fluentui/react-button/lib/components/Button/renderButton.js
  var renderButton_unstable = (state) => {
    assertSlots(state);
    const { iconOnly, iconPosition } = state;
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        iconPosition !== "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {}),
        !iconOnly && state.root.children,
        iconPosition === "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/useButton.js
  var React74 = __toESM(require_react());

  // ../node_modules/@fluentui/react-button/lib/contexts/ButtonContext.js
  var React73 = __toESM(require_react());
  var buttonContext = React73.createContext(void 0);
  var buttonContextDefaultValue = {};
  var ButtonContextProvider = buttonContext.Provider;
  var _React_useContext;
  var useButtonContext = () => (_React_useContext = React73.useContext(buttonContext)) !== null && _React_useContext !== void 0 ? _React_useContext : buttonContextDefaultValue;

  // ../node_modules/@fluentui/react-button/lib/components/Button/useButton.js
  var useButton_unstable = (props, ref) => {
    var _iconShorthand;
    const { size: contextSize } = useButtonContext();
    const { appearance = "secondary", as = "button", disabled = false, disabledFocusable = false, icon, iconPosition = "before", shape = "rounded", size = contextSize !== null && contextSize !== void 0 ? contextSize : "medium" } = props;
    const iconShorthand = slot_exports.optional(icon, {
      elementType: "span"
    });
    return {
      // Props passed at the top-level
      appearance,
      disabled,
      disabledFocusable,
      iconPosition,
      shape,
      size,
      iconOnly: Boolean(((_iconShorthand = iconShorthand) === null || _iconShorthand === void 0 ? void 0 : _iconShorthand.children) && !props.children),
      components: {
        root: "button",
        icon: "span"
      },
      root: slot_exports.always(getNativeElementProps2(as, useARIAButtonShorthand(props, {
        required: true,
        defaultProps: {
          ref,
          type: "button"
        }
      })), {
        elementType: "button"
      }),
      icon: iconShorthand
    };
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/useButtonStyles.styles.js
  var buttonClassNames = {
    root: "fui-Button",
    icon: "fui-Button__icon"
  };
  var useRootBaseClassName = /* @__PURE__ */ __resetStyles2("rlr4yyk", "r1hbzg6e", {
    r: [".rlr4yyk{align-items:center;box-sizing:border-box;display:inline-flex;justify-content:center;text-decoration-line:none;vertical-align:middle;margin:0;overflow:hidden;background-color:var(--colorNeutralBackground1);color:var(--colorNeutralForeground1);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);font-family:var(--fontFamilyBase);outline-style:none;padding:5px var(--spacingHorizontalM);min-width:96px;border-radius:var(--borderRadiusMedium);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);transition-duration:var(--durationFaster);transition-property:background,border,color;transition-timing-function:var(--curveEasyEase);}", ".rlr4yyk:hover{background-color:var(--colorNeutralBackground1Hover);border-color:var(--colorNeutralStroke1Hover);color:var(--colorNeutralForeground1Hover);cursor:pointer;}", ".rlr4yyk:hover:active{background-color:var(--colorNeutralBackground1Pressed);border-color:var(--colorNeutralStroke1Pressed);color:var(--colorNeutralForeground1Pressed);outline-style:none;}", ".rlr4yyk[data-fui-focus-visible]{border-color:var(--colorTransparentStroke);border-radius:var(--borderRadiusMedium);outline:var(--strokeWidthThick) solid var(--colorTransparentStroke);box-shadow:var(--shadow4),0 0 0 2px var(--colorStrokeFocus2);z-index:1;}", ".r1hbzg6e{align-items:center;box-sizing:border-box;display:inline-flex;justify-content:center;text-decoration-line:none;vertical-align:middle;margin:0;overflow:hidden;background-color:var(--colorNeutralBackground1);color:var(--colorNeutralForeground1);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);font-family:var(--fontFamilyBase);outline-style:none;padding:5px var(--spacingHorizontalM);min-width:96px;border-radius:var(--borderRadiusMedium);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);transition-duration:var(--durationFaster);transition-property:background,border,color;transition-timing-function:var(--curveEasyEase);}", ".r1hbzg6e:hover{background-color:var(--colorNeutralBackground1Hover);border-color:var(--colorNeutralStroke1Hover);color:var(--colorNeutralForeground1Hover);cursor:pointer;}", ".r1hbzg6e:hover:active{background-color:var(--colorNeutralBackground1Pressed);border-color:var(--colorNeutralStroke1Pressed);color:var(--colorNeutralForeground1Pressed);outline-style:none;}", ".r1hbzg6e[data-fui-focus-visible]{border-color:var(--colorTransparentStroke);border-radius:var(--borderRadiusMedium);outline:var(--strokeWidthThick) solid var(--colorTransparentStroke);box-shadow:var(--shadow4),0 0 0 2px var(--colorStrokeFocus2);z-index:1;}"],
    s: ["@media screen and (prefers-reduced-motion: reduce){.rlr4yyk{transition-duration:0.01ms;}}", "@media (forced-colors: active){.rlr4yyk:focus{border-color:ButtonText;}.rlr4yyk:hover{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}.rlr4yyk:hover:active{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}}", "@media screen and (prefers-reduced-motion: reduce){.r1hbzg6e{transition-duration:0.01ms;}}", "@media (forced-colors: active){.r1hbzg6e:focus{border-color:ButtonText;}.r1hbzg6e:hover{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}.r1hbzg6e:hover:active{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}}"]
  });
  var useIconBaseClassName = /* @__PURE__ */ __resetStyles2("rywnvv2", null, [".rywnvv2{align-items:center;display:inline-flex;justify-content:center;font-size:20px;height:20px;width:20px;--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}"]);
  var useRootStyles = /* @__PURE__ */ __styles2({
    outline: {
      De3pzq: "f1c21dwh",
      Jwef8y: "fjxutwb",
      iro3zm: "fwiml72"
    },
    primary: {
      De3pzq: "ffp7eso",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "f1phragk",
      Jwef8y: "f15wkkf3",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f1rq72xc",
      iro3zm: "fnp9lpt",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1d6v5y2",
      Bsw6fvg: "f1rirnrt",
      Bjwas2f: "f1uu00uk",
      Bn1d65q: ["fkvaka8", "f9a0qzu"],
      Bxeuatn: "f1ux7til",
      n51gp8: ["f9a0qzu", "fkvaka8"],
      Bbusuzp: "f1lkg8j3",
      ycbfsm: "fkc42ay",
      Bqrx1nm: "fq7113v",
      pgvf35: "ff1wgvm",
      Bh7lczh: ["fiob0tu", "f1x4h75k"],
      dpv3f4: "f1j6scgf",
      Bpnjhaq: ["f1x4h75k", "fiob0tu"],
      ze5xyy: "f4xjyn1",
      g2kj27: "fbgcvur",
      Bf756sw: "f1ks1yx8",
      Bow2dr7: ["f1o6qegi", "fmxjhhp"],
      Bvhedfk: "fcnxywj",
      Gye4lf: ["fmxjhhp", "f1o6qegi"],
      pc6evw: "f9ddjv3"
    },
    secondary: {},
    subtle: {
      De3pzq: "fhovq9v",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "fkfq4zb",
      Jwef8y: "f1t94bn6",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "fnwyq0v",
      Bk3fhr4: "ft1hn21",
      Bmfj8id: "fuxngvv",
      Bbdnnc7: "fy5bs14",
      iro3zm: "fsv2rcd",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1omzyqd",
      em6i61: "f1dfjoow",
      vm6p8p: "f1j98vj9",
      x3br3k: "fj8yq94",
      ze5xyy: "f4xjyn1",
      Bx3q9su: "f1et0tmh",
      pc6evw: "f9ddjv3",
      xd2cci: "f1wi8ngl"
    },
    transparent: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "fkfq4zb",
      Jwef8y: "fjxutwb",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f139oj5f",
      Bk3fhr4: "ft1hn21",
      Bmfj8id: "fuxngvv",
      iro3zm: "fwiml72",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1fg1p5m",
      em6i61: "f1dfjoow",
      vm6p8p: "f1j98vj9",
      Bqrx1nm: "fwa4z56",
      pgvf35: "fe5wyld",
      Bh7lczh: ["ffrv2ww", "f9dg1pr"],
      dpv3f4: "f1rnfj6r",
      Bpnjhaq: ["f9dg1pr", "ffrv2ww"],
      ze5xyy: "f4xjyn1",
      g2kj27: "f19ot1t3",
      Bf756sw: "fjaevkr",
      Bow2dr7: ["f1yrt24w", "f11cxmw1"],
      Bvhedfk: "f1lym4af",
      Gye4lf: ["f11cxmw1", "f1yrt24w"],
      pc6evw: "f9ddjv3"
    },
    circular: {
      Bbmb7ep: ["f8fbkgy", "f1nfllo7"],
      Beyfa6y: ["f1nfllo7", "f8fbkgy"],
      B7oj6ja: ["f1djnp8u", "f1s8kh49"],
      Btl43ni: ["f1s8kh49", "f1djnp8u"]
    },
    rounded: {},
    square: {
      Bbmb7ep: ["fzi6hpg", "fyowgf4"],
      Beyfa6y: ["fyowgf4", "fzi6hpg"],
      B7oj6ja: ["f3fg2lr", "f13av6d4"],
      Btl43ni: ["f13av6d4", "f3fg2lr"]
    },
    small: {
      Bf4jedk: "fh7ncta",
      z8tnut: "f1khb0e9",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f1jnq6q7",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    smallWithIcon: {
      Byoj8tv: "f1brlhvm",
      z8tnut: "f1sl3k7w"
    },
    medium: {},
    large: {
      Bf4jedk: "f14es27b",
      z8tnut: "fp9bwmr",
      z189sj: ["fjodcmx", "fhx4nu"],
      Byoj8tv: "f150uoa4",
      uwmqm3: ["fhx4nu", "fjodcmx"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    },
    largeWithIcon: {
      Byoj8tv: "fy7v416",
      z8tnut: "f1a1bwwz"
    }
  }, {
    d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".ffp7eso{background-color:var(--colorBrandBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".f8fbkgy{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1nfllo7{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1djnp8u{border-top-right-radius:var(--borderRadiusCircular);}", ".f1s8kh49{border-top-left-radius:var(--borderRadiusCircular);}", ".fzi6hpg{border-bottom-right-radius:var(--borderRadiusNone);}", ".fyowgf4{border-bottom-left-radius:var(--borderRadiusNone);}", ".f3fg2lr{border-top-right-radius:var(--borderRadiusNone);}", ".f13av6d4{border-top-left-radius:var(--borderRadiusNone);}", ".fh7ncta{min-width:64px;}", ".f1khb0e9{padding-top:3px;}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f1jnq6q7{padding-bottom:3px;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1brlhvm{padding-bottom:1px;}", ".f1sl3k7w{padding-top:1px;}", ".f14es27b{min-width:96px;}", ".fp9bwmr{padding-top:8px;}", ".fjodcmx{padding-right:var(--spacingHorizontalL);}", ".fhx4nu{padding-left:var(--spacingHorizontalL);}", ".f150uoa4{padding-bottom:8px;}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fy7v416{padding-bottom:7px;}", ".f1a1bwwz{padding-top:7px;}"],
    h: [".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".fwiml72:hover:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f15wkkf3:hover{background-color:var(--colorBrandBackgroundHover);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1rq72xc:hover{color:var(--colorNeutralForegroundOnBrand);}", ".fnp9lpt:hover:active{background-color:var(--colorBrandBackgroundPressed);}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}", ".f1d6v5y2:hover:active{color:var(--colorNeutralForegroundOnBrand);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".ft1hn21:hover .fui-Icon-filled{display:inline;}", ".fuxngvv:hover .fui-Icon-regular{display:none;}", ".fy5bs14:hover .fui-Button__icon{color:var(--colorNeutralForeground2BrandHover);}", ".fsv2rcd:hover:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f1omzyqd:hover:active{color:var(--colorNeutralForeground2Pressed);}", ".f1dfjoow:hover:active .fui-Icon-filled{display:inline;}", ".f1j98vj9:hover:active .fui-Icon-regular{display:none;}", ".fj8yq94:hover:active .fui-Button__icon{color:var(--colorNeutralForeground2BrandPressed);}", ".f139oj5f:hover{color:var(--colorNeutralForeground2BrandHover);}", ".f1fg1p5m:hover:active{color:var(--colorNeutralForeground2BrandPressed);}"],
    m: [["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1uu00uk{border-top-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9a0qzu{border-left-color:HighlightText;}.fkvaka8{border-right-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ux7til{border-bottom-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fq7113v:hover{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.ff1wgvm:hover{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1x4h75k:hover{border-left-color:Highlight;}.fiob0tu:hover{border-right-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1j6scgf:hover{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f4xjyn1:hover{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fbgcvur:hover:active{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ks1yx8:hover:active{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1o6qegi:hover:active{border-right-color:Highlight;}.fmxjhhp:hover:active{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fcnxywj:hover:active{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9ddjv3:hover:active{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1et0tmh:hover .fui-Button__icon{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1wi8ngl:hover:active .fui-Button__icon{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fwa4z56:hover{background-color:var(--colorTransparentBackgroundHover);}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fe5wyld:hover{border-top-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9dg1pr:hover{border-left-color:transparent;}.ffrv2ww:hover{border-right-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rnfj6r:hover{border-bottom-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f19ot1t3:hover:active{background-color:var(--colorTransparentBackgroundHover);}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fjaevkr:hover:active{border-top-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f11cxmw1:hover:active{border-left-color:transparent;}.f1yrt24w:hover:active{border-right-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lym4af:hover:active{border-bottom-color:transparent;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useRootDisabledStyles = /* @__PURE__ */ __styles2({
    base: {
      De3pzq: "f1bg9a2p",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      sj55zd: "f1s2aq7o",
      Bceei9c: "fdrzuqr",
      Jwef8y: "f1falr9n",
      Bgoe8wy: "f12mpcsy",
      Bwzppfd: ["f1gwvigk", "f18rmfxp"],
      oetu4i: "f1jnshp0",
      gg5e9n: ["f18rmfxp", "f1gwvigk"],
      Bi91k9c: "fvgxktp",
      eoavqd: "fphbwmw",
      Bk3fhr4: "f19vpps7",
      Bmfj8id: "fv5swzo",
      iro3zm: "f1t6o4dc",
      b661bw: "f10ztigi",
      Bk6r4ia: ["f1ft5sdu", "f1gzf82w"],
      B9zn80p: "f12zbtn2",
      Bpld233: ["f1gzf82w", "f1ft5sdu"],
      B2d53fq: "fcvwxyo",
      c3iz72: "f8w4c43",
      em6i61: "f1ol4fw6",
      vm6p8p: "f1q1lw4e"
    },
    highContrast: {
      Bsw6fvg: "f4lkoma",
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"],
      Bbusuzp: "f1dcs8yz",
      G867l3: "fjwq6ea",
      gdbnj: ["f1lr3nhc", "f1mbxvi6"],
      mxns5l: "fn5gmvv",
      o3nasb: ["f1mbxvi6", "f1lr3nhc"],
      Bqrx1nm: "f1vmkb5g",
      pgvf35: "f53ppgq",
      Bh7lczh: ["f1663y11", "f80fkiy"],
      dpv3f4: "f18v5270",
      Bpnjhaq: ["f80fkiy", "f1663y11"],
      ze5xyy: "f1kc2mi9",
      g2kj27: "f1y0svfh",
      Bf756sw: "fihuait",
      Bow2dr7: ["fnxhupq", "fyd6l6x"],
      Bvhedfk: "fx507ft",
      Gye4lf: ["fyd6l6x", "fnxhupq"],
      pc6evw: "fb3rf2x"
    },
    outline: {
      De3pzq: "f1c21dwh",
      Jwef8y: "f9ql6rf",
      iro3zm: "f3h1zc4"
    },
    primary: {
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    secondary: {},
    subtle: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "f9ql6rf",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "f3h1zc4",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    transparent: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "f9ql6rf",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "f3h1zc4",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    }
  }, {
    d: [".f1bg9a2p{background-color:var(--colorNeutralBackgroundDisabled);}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}"],
    h: [".f1falr9n:hover{background-color:var(--colorNeutralBackgroundDisabled);}", ".f12mpcsy:hover{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1gwvigk:hover{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f18rmfxp:hover{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f1jnshp0:hover{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fvgxktp:hover{color:var(--colorNeutralForegroundDisabled);}", ".fphbwmw:hover{cursor:not-allowed;}", ".f19vpps7:hover .fui-Icon-filled{display:none;}", ".fv5swzo:hover .fui-Icon-regular{display:inline;}", ".f1t6o4dc:hover:active{background-color:var(--colorNeutralBackgroundDisabled);}", ".f10ztigi:hover:active{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1ft5sdu:hover:active{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f1gzf82w:hover:active{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f12zbtn2:hover:active{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fcvwxyo:hover:active{color:var(--colorNeutralForegroundDisabled);}", ".f8w4c43:hover:active{cursor:not-allowed;}", ".f1ol4fw6:hover:active .fui-Icon-filled{display:none;}", ".f1q1lw4e:hover:active .fui-Icon-regular{display:inline;}", ".f9ql6rf:hover{background-color:var(--colorTransparentBackground);}", ".f3h1zc4:hover:active{background-color:var(--colorTransparentBackground);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}"],
    m: [["@media (forced-colors: active){.f4lkoma{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fjwq6ea:focus{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lr3nhc:focus{border-right-color:GrayText;}.f1mbxvi6:focus{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fn5gmvv:focus{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1vmkb5g:hover{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f53ppgq:hover{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1663y11:hover{border-right-color:GrayText;}.f80fkiy:hover{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f18v5270:hover{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1kc2mi9:hover{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1y0svfh:hover:active{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fihuait:hover:active{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fnxhupq:hover:active{border-right-color:GrayText;}.fyd6l6x:hover:active{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fx507ft:hover:active{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fb3rf2x:hover:active{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useRootFocusStyles = /* @__PURE__ */ __styles2({
    circular: {
      kdpuga: ["fanj13w", "f1gou5sz"],
      Bw81rd7: ["f1gou5sz", "fanj13w"],
      B6xbmo0: ["fulf6x3", "foeb2x"],
      dm238s: ["foeb2x", "fulf6x3"]
    },
    rounded: {},
    square: {
      kdpuga: ["f1ndz5i7", "f1co4qro"],
      Bw81rd7: ["f1co4qro", "f1ndz5i7"],
      B6xbmo0: ["f146y5a9", "f1k2ftg"],
      dm238s: ["f1k2ftg", "f146y5a9"]
    },
    primary: {
      B8q5s1w: "f15my96h",
      Bci5o5g: ["f8yq1e5", "f59w28j"],
      n8qw10: "f1mze7uc",
      Bdrgwmp: ["f59w28j", "f8yq1e5"],
      j6ew2k: "ftbnf46"
    },
    small: {
      kdpuga: ["fg3gtdo", "fwii5mg"],
      Bw81rd7: ["fwii5mg", "fg3gtdo"],
      B6xbmo0: ["f1palphq", "f12nxie7"],
      dm238s: ["f12nxie7", "f1palphq"]
    },
    medium: {},
    large: {
      kdpuga: ["ft3lys4", "f1la4x2g"],
      Bw81rd7: ["f1la4x2g", "ft3lys4"],
      B6xbmo0: ["f156y0zm", "fakimq4"],
      dm238s: ["fakimq4", "f156y0zm"]
    }
  }, {
    d: [".fanj13w[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1gou5sz[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusCircular);}", ".fulf6x3[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusCircular);}", ".foeb2x[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusCircular);}", ".f1ndz5i7[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusNone);}", ".f1co4qro[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusNone);}", ".f146y5a9[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusNone);}", ".f1k2ftg[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusNone);}", ".f15my96h[data-fui-focus-visible]{border-top-color:var(--colorNeutralForegroundOnBrand);}", ".f8yq1e5[data-fui-focus-visible]{border-right-color:var(--colorNeutralForegroundOnBrand);}", ".f59w28j[data-fui-focus-visible]{border-left-color:var(--colorNeutralForegroundOnBrand);}", ".f1mze7uc[data-fui-focus-visible]{border-bottom-color:var(--colorNeutralForegroundOnBrand);}", ".ftbnf46[data-fui-focus-visible]{box-shadow:var(--shadow2),0 0 0 2px var(--colorStrokeFocus2);}", ".fg3gtdo[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusSmall);}", ".fwii5mg[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusSmall);}", ".f1palphq[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusSmall);}", ".f12nxie7[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusSmall);}", ".ft3lys4[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusLarge);}", ".f1la4x2g[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusLarge);}", ".f156y0zm[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusLarge);}", ".fakimq4[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusLarge);}"]
  });
  var useRootIconOnlyStyles = /* @__PURE__ */ __styles2({
    small: {
      z8tnut: "f1sl3k7w",
      z189sj: ["f136y8j8", "f10xn8zz"],
      Byoj8tv: "f1brlhvm",
      uwmqm3: ["f10xn8zz", "f136y8j8"],
      Bf4jedk: "f17fgpbq",
      B2u0y6b: "f1jt17bm"
    },
    medium: {
      z8tnut: "f1sbtcvk",
      z189sj: ["fwiuce9", "f15vdbe4"],
      Byoj8tv: "fdghr9",
      uwmqm3: ["f15vdbe4", "fwiuce9"],
      Bf4jedk: "fwbmr0d",
      B2u0y6b: "f44c6la"
    },
    large: {
      z8tnut: "f1a1bwwz",
      z189sj: ["f18k1jr3", "f1rtp3s9"],
      Byoj8tv: "fy7v416",
      uwmqm3: ["f1rtp3s9", "f18k1jr3"],
      Bf4jedk: "f12clzc2",
      B2u0y6b: "fjy1crr"
    }
  }, {
    d: [".f1sl3k7w{padding-top:1px;}", ".f136y8j8{padding-right:1px;}", ".f10xn8zz{padding-left:1px;}", ".f1brlhvm{padding-bottom:1px;}", ".f17fgpbq{min-width:24px;}", ".f1jt17bm{max-width:24px;}", ".f1sbtcvk{padding-top:5px;}", ".fwiuce9{padding-right:5px;}", ".f15vdbe4{padding-left:5px;}", ".fdghr9{padding-bottom:5px;}", ".fwbmr0d{min-width:32px;}", ".f44c6la{max-width:32px;}", ".f1a1bwwz{padding-top:7px;}", ".f18k1jr3{padding-right:7px;}", ".f1rtp3s9{padding-left:7px;}", ".fy7v416{padding-bottom:7px;}", ".f12clzc2{min-width:40px;}", ".fjy1crr{max-width:40px;}"]
  });
  var useIconStyles = /* @__PURE__ */ __styles2({
    small: {
      Be2twd7: "fe5j1ua",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3",
      Bqrlyyl: "fbaiahx"
    },
    medium: {},
    large: {
      Be2twd7: "f1rt2boy",
      Bqenvij: "frvgh55",
      a9b677: "fq4mcun",
      Bqrlyyl: "f1exjqw5"
    },
    before: {
      t21cq0: ["f1nizpg2", "f1a695kz"]
    },
    after: {
      Frg6f3: ["f1a695kz", "f1nizpg2"]
    }
  }, {
    d: [".fe5j1ua{font-size:20px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".fbaiahx{--fui-Button__icon--spacing:var(--spacingHorizontalXS);}", ".f1rt2boy{font-size:24px;}", ".frvgh55{height:24px;}", ".fq4mcun{width:24px;}", ".f1exjqw5{--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}", ".f1nizpg2{margin-right:var(--fui-Button__icon--spacing);}", ".f1a695kz{margin-left:var(--fui-Button__icon--spacing);}"]
  });
  var useButtonStyles_unstable = (state) => {
    const rootBaseClassName = useRootBaseClassName();
    const iconBaseClassName = useIconBaseClassName();
    const rootStyles = useRootStyles();
    const rootDisabledStyles = useRootDisabledStyles();
    const rootFocusStyles = useRootFocusStyles();
    const rootIconOnlyStyles = useRootIconOnlyStyles();
    const iconStyles = useIconStyles();
    const {
      appearance,
      disabled,
      disabledFocusable,
      icon,
      iconOnly,
      iconPosition,
      shape,
      size
    } = state;
    state.root.className = mergeClasses(
      buttonClassNames.root,
      rootBaseClassName,
      appearance && rootStyles[appearance],
      rootStyles[size],
      icon && size === "small" && rootStyles.smallWithIcon,
      icon && size === "large" && rootStyles.largeWithIcon,
      rootStyles[shape],
      // Disabled styles
      (disabled || disabledFocusable) && rootDisabledStyles.base,
      (disabled || disabledFocusable) && rootDisabledStyles.highContrast,
      appearance && (disabled || disabledFocusable) && rootDisabledStyles[appearance],
      // Focus styles
      appearance === "primary" && rootFocusStyles.primary,
      rootFocusStyles[size],
      rootFocusStyles[shape],
      // Icon-only styles
      iconOnly && rootIconOnlyStyles[size],
      // User provided class name
      state.root.className
    );
    if (state.icon) {
      state.icon.className = mergeClasses(buttonClassNames.icon, iconBaseClassName, !!state.root.children && iconStyles[iconPosition], iconStyles[size], state.icon.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/Button.js
  var Button2 = /* @__PURE__ */ React75.forwardRef((props, ref) => {
    const state = useButton_unstable(props, ref);
    useButtonStyles_unstable(state);
    useCustomStyleHook("useButtonStyles_unstable")(state);
    return renderButton_unstable(state);
  });
  Button2.displayName = "Button";

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/assert.js
  function assert(condition, msg) {
    if (!condition) {
      throw new Error(msg);
    }
  }
  var FLOAT32_MAX = 34028234663852886e22;
  var FLOAT32_MIN = -34028234663852886e22;
  var UINT32_MAX = 4294967295;
  var INT32_MAX = 2147483647;
  var INT32_MIN = -2147483648;
  function assertInt32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid int 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
      throw new Error("invalid int 32: " + arg);
  }
  function assertUInt32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid uint 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
      throw new Error("invalid uint 32: " + arg);
  }
  function assertFloat32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid float 32: " + typeof arg);
    if (!Number.isFinite(arg))
      return;
    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)
      throw new Error("invalid float 32: " + arg);
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/enum.js
  var enumTypeSymbol = Symbol("@bufbuild/protobuf/enum-type");
  function getEnumType(enumObject) {
    const t2 = enumObject[enumTypeSymbol];
    assert(t2, "missing enum type on enum object");
    return t2;
  }
  function setEnumType(enumObject, typeName, values2, opt) {
    enumObject[enumTypeSymbol] = makeEnumType(typeName, values2.map((v2) => ({
      no: v2.no,
      name: v2.name,
      localName: enumObject[v2.no]
    })), opt);
  }
  function makeEnumType(typeName, values2, _opt) {
    const names = /* @__PURE__ */ Object.create(null);
    const numbers = /* @__PURE__ */ Object.create(null);
    const normalValues = [];
    for (const value of values2) {
      const n3 = normalizeEnumValue(value);
      normalValues.push(n3);
      names[value.name] = n3;
      numbers[value.no] = n3;
    }
    return {
      typeName,
      values: normalValues,
      // We do not surface options at this time
      // options: opt?.options ?? Object.create(null),
      findName(name) {
        return names[name];
      },
      findNumber(no) {
        return numbers[no];
      }
    };
  }
  function makeEnum(typeName, values2, opt) {
    const enumObject = {};
    for (const value of values2) {
      const n3 = normalizeEnumValue(value);
      enumObject[n3.localName] = n3.no;
      enumObject[n3.no] = n3.localName;
    }
    setEnumType(enumObject, typeName, values2, opt);
    return enumObject;
  }
  function normalizeEnumValue(value) {
    if ("localName" in value) {
      return value;
    }
    return Object.assign(Object.assign({}, value), { localName: value.name });
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/message.js
  var Message = class {
    /**
     * Compare with a message of the same type.
     */
    equals(other) {
      return this.getType().runtime.util.equals(this.getType(), this, other);
    }
    /**
     * Create a deep copy.
     */
    clone() {
      return this.getType().runtime.util.clone(this);
    }
    /**
     * Parse from binary data, merging fields.
     *
     * Repeated fields are appended. Map entries are added, overwriting
     * existing keys.
     *
     * If a message field is already present, it will be merged with the
     * new data.
     */
    fromBinary(bytes, options) {
      const type = this.getType(), format2 = type.runtime.bin, opt = format2.makeReadOptions(options);
      format2.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);
      return this;
    }
    /**
     * Parse a message from a JSON value.
     */
    fromJson(jsonValue, options) {
      const type = this.getType(), format2 = type.runtime.json, opt = format2.makeReadOptions(options);
      format2.readMessage(type, jsonValue, opt, this);
      return this;
    }
    /**
     * Parse a message from a JSON string.
     */
    fromJsonString(jsonString, options) {
      let json;
      try {
        json = JSON.parse(jsonString);
      } catch (e2) {
        throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e2 instanceof Error ? e2.message : String(e2)}`);
      }
      return this.fromJson(json, options);
    }
    /**
     * Serialize the message to binary data.
     */
    toBinary(options) {
      const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();
      bin.writeMessage(this, writer, opt);
      return writer.finish();
    }
    /**
     * Serialize the message to a JSON value, a JavaScript value that can be
     * passed to JSON.stringify().
     */
    toJson(options) {
      const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);
      return json.writeMessage(this, opt);
    }
    /**
     * Serialize the message to a JSON string.
     */
    toJsonString(options) {
      var _a7;
      const value = this.toJson(options);
      return JSON.stringify(value, null, (_a7 = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a7 !== void 0 ? _a7 : 0);
    }
    /**
     * Override for serialization behavior. This will be invoked when calling
     * JSON.stringify on this message (i.e. JSON.stringify(msg)).
     *
     * Note that this will not serialize google.protobuf.Any with a packed
     * message because the protobuf JSON format specifies that it needs to be
     * unpacked, and this is only possible with a type registry to look up the
     * message type.  As a result, attempting to serialize a message with this
     * type will throw an Error.
     *
     * This method is protected because you should not need to invoke it
     * directly -- instead use JSON.stringify or toJsonString for
     * stringified JSON.  Alternatively, if actual JSON is desired, you should
     * use toJson.
     */
    toJSON() {
      return this.toJson({
        emitDefaultValues: true
      });
    }
    /**
     * Retrieve the MessageType of this message - a singleton that represents
     * the protobuf message declaration and provides metadata for reflection-
     * based operations.
     */
    getType() {
      return Object.getPrototypeOf(this).constructor;
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js
  function makeMessageType(runtime, typeName, fields, opt) {
    var _a7;
    const localName = (_a7 = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a7 !== void 0 ? _a7 : typeName.substring(typeName.lastIndexOf(".") + 1);
    const type = {
      [localName]: function(data) {
        runtime.util.initFields(this);
        runtime.util.initPartial(data, this);
      }
    }[localName];
    Object.setPrototypeOf(type.prototype, new Message());
    Object.assign(type, {
      runtime,
      typeName,
      fields: runtime.util.newFieldList(fields),
      fromBinary(bytes, options) {
        return new type().fromBinary(bytes, options);
      },
      fromJson(jsonValue, options) {
        return new type().fromJson(jsonValue, options);
      },
      fromJsonString(jsonString, options) {
        return new type().fromJsonString(jsonString, options);
      },
      equals(a2, b3) {
        return runtime.util.equals(type, a2, b3);
      }
    });
    return type;
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js
  function makeProtoRuntime(syntax, json, bin, util) {
    return {
      syntax,
      json,
      bin,
      util,
      makeMessageType(typeName, fields, opt) {
        return makeMessageType(this, typeName, fields, opt);
      },
      makeEnum,
      makeEnumType,
      getEnumType
    };
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/field.js
  var ScalarType;
  (function(ScalarType2) {
    ScalarType2[ScalarType2["DOUBLE"] = 1] = "DOUBLE";
    ScalarType2[ScalarType2["FLOAT"] = 2] = "FLOAT";
    ScalarType2[ScalarType2["INT64"] = 3] = "INT64";
    ScalarType2[ScalarType2["UINT64"] = 4] = "UINT64";
    ScalarType2[ScalarType2["INT32"] = 5] = "INT32";
    ScalarType2[ScalarType2["FIXED64"] = 6] = "FIXED64";
    ScalarType2[ScalarType2["FIXED32"] = 7] = "FIXED32";
    ScalarType2[ScalarType2["BOOL"] = 8] = "BOOL";
    ScalarType2[ScalarType2["STRING"] = 9] = "STRING";
    ScalarType2[ScalarType2["BYTES"] = 12] = "BYTES";
    ScalarType2[ScalarType2["UINT32"] = 13] = "UINT32";
    ScalarType2[ScalarType2["SFIXED32"] = 15] = "SFIXED32";
    ScalarType2[ScalarType2["SFIXED64"] = 16] = "SFIXED64";
    ScalarType2[ScalarType2["SINT32"] = 17] = "SINT32";
    ScalarType2[ScalarType2["SINT64"] = 18] = "SINT64";
  })(ScalarType || (ScalarType = {}));

  // ../node_modules/@bufbuild/protobuf/dist/esm/google/varint.js
  function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift = 0; shift < 28; shift += 7) {
      let b3 = this.buf[this.pos++];
      lowBits |= (b3 & 127) << shift;
      if ((b3 & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    let middleByte = this.buf[this.pos++];
    lowBits |= (middleByte & 15) << 28;
    highBits = (middleByte & 112) >> 4;
    if ((middleByte & 128) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
    for (let shift = 3; shift <= 31; shift += 7) {
      let b3 = this.buf[this.pos++];
      highBits |= (b3 & 127) << shift;
      if ((b3 & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    throw new Error("invalid varint");
  }
  function varint64write(lo, hi, bytes) {
    for (let i2 = 0; i2 < 28; i2 = i2 + 7) {
      const shift = lo >>> i2;
      const hasNext = !(shift >>> 7 == 0 && hi == 0);
      const byte = (hasNext ? shift | 128 : shift) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    const splitBits = lo >>> 28 & 15 | (hi & 7) << 4;
    const hasMoreBits = !(hi >> 3 == 0);
    bytes.push((hasMoreBits ? splitBits | 128 : splitBits) & 255);
    if (!hasMoreBits) {
      return;
    }
    for (let i2 = 3; i2 < 31; i2 = i2 + 7) {
      const shift = hi >>> i2;
      const hasNext = !(shift >>> 7 == 0);
      const byte = (hasNext ? shift | 128 : shift) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    bytes.push(hi >>> 31 & 1);
  }
  var TWO_PWR_32_DBL = 4294967296;
  function int64FromString(dec) {
    const minus = dec[0] === "-";
    if (minus) {
      dec = dec.slice(1);
    }
    const base = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end) {
      const digit1e6 = Number(dec.slice(begin, end));
      highBits *= base;
      lowBits = lowBits * base + digit1e6;
      if (lowBits >= TWO_PWR_32_DBL) {
        highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);
        lowBits = lowBits % TWO_PWR_32_DBL;
      }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
  }
  function int64ToString(lo, hi) {
    let bits = newBits(lo, hi);
    const negative = bits.hi & 2147483648;
    if (negative) {
      bits = negate(bits.lo, bits.hi);
    }
    const result = uInt64ToString(bits.lo, bits.hi);
    return negative ? "-" + result : result;
  }
  function uInt64ToString(lo, hi) {
    ({ lo, hi } = toUnsigned(lo, hi));
    if (hi <= 2097151) {
      return String(TWO_PWR_32_DBL * hi + lo);
    }
    const low = lo & 16777215;
    const mid = (lo >>> 24 | hi << 8) & 16777215;
    const high = hi >> 16 & 65535;
    let digitA = low + mid * 6777216 + high * 6710656;
    let digitB = mid + high * 8147497;
    let digitC = high * 2;
    const base = 1e7;
    if (digitA >= base) {
      digitB += Math.floor(digitA / base);
      digitA %= base;
    }
    if (digitB >= base) {
      digitC += Math.floor(digitB / base);
      digitB %= base;
    }
    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);
  }
  function toUnsigned(lo, hi) {
    return { lo: lo >>> 0, hi: hi >>> 0 };
  }
  function newBits(lo, hi) {
    return { lo: lo | 0, hi: hi | 0 };
  }
  function negate(lowBits, highBits) {
    highBits = ~highBits;
    if (lowBits) {
      lowBits = ~lowBits + 1;
    } else {
      highBits += 1;
    }
    return newBits(lowBits, highBits);
  }
  var decimalFrom1e7WithLeadingZeros = (digit1e7) => {
    const partial = String(digit1e7);
    return "0000000".slice(partial.length) + partial;
  };
  function varint32write(value, bytes) {
    if (value >= 0) {
      while (value > 127) {
        bytes.push(value & 127 | 128);
        value = value >>> 7;
      }
      bytes.push(value);
    } else {
      for (let i2 = 0; i2 < 9; i2++) {
        bytes.push(value & 127 | 128);
        value = value >> 7;
      }
      bytes.push(1);
    }
  }
  function varint32read() {
    let b3 = this.buf[this.pos++];
    let result = b3 & 127;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b3 = this.buf[this.pos++];
    result |= (b3 & 127) << 7;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b3 = this.buf[this.pos++];
    result |= (b3 & 127) << 14;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b3 = this.buf[this.pos++];
    result |= (b3 & 127) << 21;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b3 = this.buf[this.pos++];
    result |= (b3 & 15) << 28;
    for (let readBytes = 5; (b3 & 128) !== 0 && readBytes < 10; readBytes++)
      b3 = this.buf[this.pos++];
    if ((b3 & 128) != 0)
      throw new Error("invalid varint");
    this.assertBounds();
    return result >>> 0;
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js
  function makeInt64Support() {
    const dv = new DataView(new ArrayBuffer(8));
    const ok = typeof BigInt === "function" && typeof dv.getBigInt64 === "function" && typeof dv.getBigUint64 === "function" && typeof dv.setBigInt64 === "function" && typeof dv.setBigUint64 === "function" && (typeof process != "object" || typeof process.env != "object" || process.env.BUF_BIGINT_DISABLE !== "1");
    if (ok) {
      const MIN = BigInt("-9223372036854775808"), MAX = BigInt("9223372036854775807"), UMIN = BigInt("0"), UMAX = BigInt("18446744073709551615");
      return {
        zero: BigInt(0),
        supported: true,
        parse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > MAX || bi < MIN) {
            throw new Error(`int64 invalid: ${value}`);
          }
          return bi;
        },
        uParse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > UMAX || bi < UMIN) {
            throw new Error(`uint64 invalid: ${value}`);
          }
          return bi;
        },
        enc(value) {
          dv.setBigInt64(0, this.parse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        uEnc(value) {
          dv.setBigInt64(0, this.uParse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        dec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigInt64(0, true);
        },
        uDec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigUint64(0, true);
        }
      };
    }
    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);
    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);
    return {
      zero: "0",
      supported: false,
      parse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return value;
      },
      uParse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return value;
      },
      enc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return int64FromString(value);
      },
      uEnc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return int64FromString(value);
      },
      dec(lo, hi) {
        return int64ToString(lo, hi);
      },
      uDec(lo, hi) {
        return uInt64ToString(lo, hi);
      }
    };
  }
  var protoInt64 = makeInt64Support();

  // ../node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js
  var WireType;
  (function(WireType2) {
    WireType2[WireType2["Varint"] = 0] = "Varint";
    WireType2[WireType2["Bit64"] = 1] = "Bit64";
    WireType2[WireType2["LengthDelimited"] = 2] = "LengthDelimited";
    WireType2[WireType2["StartGroup"] = 3] = "StartGroup";
    WireType2[WireType2["EndGroup"] = 4] = "EndGroup";
    WireType2[WireType2["Bit32"] = 5] = "Bit32";
  })(WireType || (WireType = {}));
  var BinaryWriter = class {
    constructor(textEncoder) {
      this.stack = [];
      this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
      this.chunks = [];
      this.buf = [];
    }
    /**
     * Return all bytes written and reset this writer.
     */
    finish() {
      this.chunks.push(new Uint8Array(this.buf));
      let len = 0;
      for (let i2 = 0; i2 < this.chunks.length; i2++)
        len += this.chunks[i2].length;
      let bytes = new Uint8Array(len);
      let offset = 0;
      for (let i2 = 0; i2 < this.chunks.length; i2++) {
        bytes.set(this.chunks[i2], offset);
        offset += this.chunks[i2].length;
      }
      this.chunks = [];
      return bytes;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
    fork() {
      this.stack.push({ chunks: this.chunks, buf: this.buf });
      this.chunks = [];
      this.buf = [];
      return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
    join() {
      let chunk = this.finish();
      let prev = this.stack.pop();
      if (!prev)
        throw new Error("invalid state, fork stack empty");
      this.chunks = prev.chunks;
      this.buf = prev.buf;
      this.uint32(chunk.byteLength);
      return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
    tag(fieldNo, type) {
      return this.uint32((fieldNo << 3 | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
    raw(chunk) {
      if (this.buf.length) {
        this.chunks.push(new Uint8Array(this.buf));
        this.buf = [];
      }
      this.chunks.push(chunk);
      return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
    uint32(value) {
      assertUInt32(value);
      while (value > 127) {
        this.buf.push(value & 127 | 128);
        value = value >>> 7;
      }
      this.buf.push(value);
      return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
    int32(value) {
      assertInt32(value);
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
    bool(value) {
      this.buf.push(value ? 1 : 0);
      return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
    bytes(value) {
      this.uint32(value.byteLength);
      return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
    string(value) {
      let chunk = this.textEncoder.encode(value);
      this.uint32(chunk.byteLength);
      return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
    float(value) {
      assertFloat32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setFloat32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
    double(value) {
      let chunk = new Uint8Array(8);
      new DataView(chunk.buffer).setFloat64(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
    fixed32(value) {
      assertUInt32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setUint32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
    sfixed32(value) {
      assertInt32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setInt32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
    sint32(value) {
      assertInt32(value);
      value = (value << 1 ^ value >> 31) >>> 0;
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
    sfixed64(value) {
      let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
    fixed64(value) {
      let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
    int64(value) {
      let tc = protoInt64.enc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64(value) {
      let tc = protoInt64.enc(value), sign = tc.hi >> 31, lo = tc.lo << 1 ^ sign, hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;
      varint64write(lo, hi, this.buf);
      return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
    uint64(value) {
      let tc = protoInt64.uEnc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
  };
  var BinaryReader = class {
    constructor(buf, textDecoder) {
      this.varint64 = varint64read;
      this.uint32 = varint32read;
      this.buf = buf;
      this.len = buf.length;
      this.pos = 0;
      this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
      this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();
    }
    /**
     * Reads a tag - field number and wire type.
     */
    tag() {
      let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
      if (fieldNo <= 0 || wireType < 0 || wireType > 5)
        throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
      return [fieldNo, wireType];
    }
    /**
     * Skip one element on the wire and return the skipped data.
     * Supports WireType.StartGroup since v2.0.0-alpha.23.
     */
    skip(wireType) {
      let start = this.pos;
      switch (wireType) {
        case WireType.Varint:
          while (this.buf[this.pos++] & 128) {
          }
          break;
        case WireType.Bit64:
          this.pos += 4;
        case WireType.Bit32:
          this.pos += 4;
          break;
        case WireType.LengthDelimited:
          let len = this.uint32();
          this.pos += len;
          break;
        case WireType.StartGroup:
          let t2;
          while ((t2 = this.tag()[1]) !== WireType.EndGroup) {
            this.skip(t2);
          }
          break;
        default:
          throw new Error("cant skip wire type " + wireType);
      }
      this.assertBounds();
      return this.buf.subarray(start, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
    assertBounds() {
      if (this.pos > this.len)
        throw new RangeError("premature EOF");
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
    int32() {
      return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
    sint32() {
      let zze = this.uint32();
      return zze >>> 1 ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
    int64() {
      return protoInt64.dec(...this.varint64());
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
    uint64() {
      return protoInt64.uDec(...this.varint64());
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64() {
      let [lo, hi] = this.varint64();
      let s2 = -(lo & 1);
      lo = (lo >>> 1 | (hi & 1) << 31) ^ s2;
      hi = hi >>> 1 ^ s2;
      return protoInt64.dec(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
    bool() {
      let [lo, hi] = this.varint64();
      return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
    fixed32() {
      return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
    sfixed32() {
      return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
    fixed64() {
      return protoInt64.uDec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
    sfixed64() {
      return protoInt64.dec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
    float() {
      return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
    double() {
      return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
    bytes() {
      let len = this.uint32(), start = this.pos;
      this.pos += len;
      this.assertBounds();
      return this.buf.subarray(start, start + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
    string() {
      return this.textDecoder.decode(this.bytes());
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js
  function wrapField(type, value) {
    if (value instanceof Message || !type.fieldWrapper) {
      return value;
    }
    return type.fieldWrapper.wrapField(value);
  }
  var wktWrapperToScalarType = {
    "google.protobuf.DoubleValue": ScalarType.DOUBLE,
    "google.protobuf.FloatValue": ScalarType.FLOAT,
    "google.protobuf.Int64Value": ScalarType.INT64,
    "google.protobuf.UInt64Value": ScalarType.UINT64,
    "google.protobuf.Int32Value": ScalarType.INT32,
    "google.protobuf.UInt32Value": ScalarType.UINT32,
    "google.protobuf.BoolValue": ScalarType.BOOL,
    "google.protobuf.StringValue": ScalarType.STRING,
    "google.protobuf.BytesValue": ScalarType.BYTES
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js
  function scalarEquals(type, a2, b3) {
    if (a2 === b3) {
      return true;
    }
    if (type == ScalarType.BYTES) {
      if (!(a2 instanceof Uint8Array) || !(b3 instanceof Uint8Array)) {
        return false;
      }
      if (a2.length !== b3.length) {
        return false;
      }
      for (let i2 = 0; i2 < a2.length; i2++) {
        if (a2[i2] !== b3[i2]) {
          return false;
        }
      }
      return true;
    }
    switch (type) {
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return a2 == b3;
    }
    return false;
  }
  function scalarDefaultValue(type) {
    switch (type) {
      case ScalarType.BOOL:
        return false;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return protoInt64.zero;
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        return 0;
      case ScalarType.BYTES:
        return new Uint8Array(0);
      case ScalarType.STRING:
        return "";
      default:
        return 0;
    }
  }
  function scalarTypeInfo(type, value) {
    const isUndefined = value === void 0;
    let wireType = WireType.Varint;
    let isIntrinsicDefault = value === 0;
    switch (type) {
      case ScalarType.STRING:
        isIntrinsicDefault = isUndefined || !value.length;
        wireType = WireType.LengthDelimited;
        break;
      case ScalarType.BOOL:
        isIntrinsicDefault = value === false;
        break;
      case ScalarType.DOUBLE:
        wireType = WireType.Bit64;
        break;
      case ScalarType.FLOAT:
        wireType = WireType.Bit32;
        break;
      case ScalarType.INT64:
        isIntrinsicDefault = isUndefined || value == 0;
        break;
      case ScalarType.UINT64:
        isIntrinsicDefault = isUndefined || value == 0;
        break;
      case ScalarType.FIXED64:
        isIntrinsicDefault = isUndefined || value == 0;
        wireType = WireType.Bit64;
        break;
      case ScalarType.BYTES:
        isIntrinsicDefault = isUndefined || !value.byteLength;
        wireType = WireType.LengthDelimited;
        break;
      case ScalarType.FIXED32:
        wireType = WireType.Bit32;
        break;
      case ScalarType.SFIXED32:
        wireType = WireType.Bit32;
        break;
      case ScalarType.SFIXED64:
        isIntrinsicDefault = isUndefined || value == 0;
        wireType = WireType.Bit64;
        break;
      case ScalarType.SINT64:
        isIntrinsicDefault = isUndefined || value == 0;
        break;
    }
    const method = ScalarType[type].toLowerCase();
    return [wireType, method, isUndefined || isIntrinsicDefault];
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-common.js
  var unknownFieldsSymbol = Symbol("@bufbuild/protobuf/unknown-fields");
  var readDefaults = {
    readUnknownFields: true,
    readerFactory: (bytes) => new BinaryReader(bytes)
  };
  var writeDefaults = {
    writeUnknownFields: true,
    writerFactory: () => new BinaryWriter()
  };
  function makeReadOptions(options) {
    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;
  }
  function makeWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;
  }
  function makeBinaryFormatCommon() {
    return {
      makeReadOptions,
      makeWriteOptions,
      listUnknownFields(message) {
        var _a7;
        return (_a7 = message[unknownFieldsSymbol]) !== null && _a7 !== void 0 ? _a7 : [];
      },
      discardUnknownFields(message) {
        delete message[unknownFieldsSymbol];
      },
      writeUnknownFields(message, writer) {
        const m2 = message;
        const c2 = m2[unknownFieldsSymbol];
        if (c2) {
          for (const f3 of c2) {
            writer.tag(f3.no, f3.wireType).raw(f3.data);
          }
        }
      },
      onUnknownField(message, no, wireType, data) {
        const m2 = message;
        if (!Array.isArray(m2[unknownFieldsSymbol])) {
          m2[unknownFieldsSymbol] = [];
        }
        m2[unknownFieldsSymbol].push({ no, wireType, data });
      },
      readMessage(message, reader, length, options) {
        const type = message.getType();
        const end = length === void 0 ? reader.len : reader.pos + length;
        while (reader.pos < end) {
          const [fieldNo, wireType] = reader.tag(), field = type.fields.find(fieldNo);
          if (!field) {
            const data = reader.skip(wireType);
            if (options.readUnknownFields) {
              this.onUnknownField(message, fieldNo, wireType, data);
            }
            continue;
          }
          let target = message, repeated = field.repeated, localName = field.localName;
          if (field.oneof) {
            target = target[field.oneof.localName];
            if (target.case != localName) {
              delete target.value;
            }
            target.case = localName;
            localName = "value";
          }
          switch (field.kind) {
            case "scalar":
            case "enum":
              const scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
              if (repeated) {
                let arr = target[localName];
                if (wireType == WireType.LengthDelimited && scalarType != ScalarType.STRING && scalarType != ScalarType.BYTES) {
                  let e2 = reader.uint32() + reader.pos;
                  while (reader.pos < e2) {
                    arr.push(readScalar(reader, scalarType));
                  }
                } else {
                  arr.push(readScalar(reader, scalarType));
                }
              } else {
                target[localName] = readScalar(reader, scalarType);
              }
              break;
            case "message":
              const messageType = field.T;
              if (repeated) {
                target[localName].push(readMessageField(reader, new messageType(), options));
              } else {
                if (target[localName] instanceof Message) {
                  readMessageField(reader, target[localName], options);
                } else {
                  target[localName] = readMessageField(reader, new messageType(), options);
                  if (messageType.fieldWrapper && !field.oneof && !field.repeated) {
                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                  }
                }
              }
              break;
            case "map":
              let [mapKey, mapVal] = readMapEntry(field, reader, options);
              target[localName][mapKey] = mapVal;
              break;
          }
        }
      }
    };
  }
  function readMessageField(reader, message, options) {
    const format2 = message.getType().runtime.bin;
    format2.readMessage(message, reader, reader.uint32(), options);
    return message;
  }
  function readMapEntry(field, reader, options) {
    const length = reader.uint32(), end = reader.pos + length;
    let key, val;
    while (reader.pos < end) {
      let [fieldNo] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = readScalar(reader, field.K);
          break;
        case 2:
          switch (field.V.kind) {
            case "scalar":
              val = readScalar(reader, field.V.T);
              break;
            case "enum":
              val = reader.int32();
              break;
            case "message":
              val = readMessageField(reader, new field.V.T(), options);
              break;
          }
          break;
      }
    }
    if (key === void 0) {
      let keyRaw = scalarDefaultValue(field.K);
      key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;
    }
    if (typeof key != "string" && typeof key != "number") {
      key = key.toString();
    }
    if (val === void 0) {
      switch (field.V.kind) {
        case "scalar":
          val = scalarDefaultValue(field.V.T);
          break;
        case "enum":
          val = 0;
          break;
        case "message":
          val = new field.V.T();
          break;
      }
    }
    return [key, val];
  }
  function readScalar(reader, type) {
    switch (type) {
      case ScalarType.STRING:
        return reader.string();
      case ScalarType.BOOL:
        return reader.bool();
      case ScalarType.DOUBLE:
        return reader.double();
      case ScalarType.FLOAT:
        return reader.float();
      case ScalarType.INT32:
        return reader.int32();
      case ScalarType.INT64:
        return reader.int64();
      case ScalarType.UINT64:
        return reader.uint64();
      case ScalarType.FIXED64:
        return reader.fixed64();
      case ScalarType.BYTES:
        return reader.bytes();
      case ScalarType.FIXED32:
        return reader.fixed32();
      case ScalarType.SFIXED32:
        return reader.sfixed32();
      case ScalarType.SFIXED64:
        return reader.sfixed64();
      case ScalarType.SINT64:
        return reader.sint64();
      case ScalarType.UINT32:
        return reader.uint32();
      case ScalarType.SINT32:
        return reader.sint32();
    }
  }
  function writeMapEntry(writer, options, field, key, value) {
    writer.tag(field.no, WireType.LengthDelimited);
    writer.fork();
    let keyValue = key;
    switch (field.K) {
      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
        keyValue = Number.parseInt(key);
        break;
      case ScalarType.BOOL:
        assert(key == "true" || key == "false");
        keyValue = key == "true";
        break;
    }
    writeScalar(writer, field.K, 1, keyValue, true);
    switch (field.V.kind) {
      case "scalar":
        writeScalar(writer, field.V.T, 2, value, true);
        break;
      case "enum":
        writeScalar(writer, ScalarType.INT32, 2, value, true);
        break;
      case "message":
        writeMessageField(writer, options, field.V.T, 2, value);
        break;
    }
    writer.join();
  }
  function writeMessageField(writer, options, type, fieldNo, value) {
    if (value !== void 0) {
      const message = wrapField(type, value);
      writer.tag(fieldNo, WireType.LengthDelimited).bytes(message.toBinary(options));
    }
  }
  function writeScalar(writer, type, fieldNo, value, emitIntrinsicDefault) {
    let [wireType, method, isIntrinsicDefault] = scalarTypeInfo(type, value);
    if (!isIntrinsicDefault || emitIntrinsicDefault) {
      writer.tag(fieldNo, wireType)[method](value);
    }
  }
  function writePacked(writer, type, fieldNo, value) {
    if (!value.length) {
      return;
    }
    writer.tag(fieldNo, WireType.LengthDelimited).fork();
    let [, method] = scalarTypeInfo(type);
    for (let i2 = 0; i2 < value.length; i2++) {
      writer[method](value[i2]);
    }
    writer.join();
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-proto3.js
  function makeBinaryFormatProto3() {
    return Object.assign(Object.assign({}, makeBinaryFormatCommon()), { writeMessage(message, writer, options) {
      const type = message.getType();
      for (const field of type.fields.byNumber()) {
        let value, repeated = field.repeated, localName = field.localName;
        if (field.oneof) {
          const oneof = message[field.oneof.localName];
          if (oneof.case !== localName) {
            continue;
          }
          value = oneof.value;
        } else {
          value = message[localName];
        }
        switch (field.kind) {
          case "scalar":
          case "enum":
            let scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
            if (repeated) {
              if (field.packed) {
                writePacked(writer, scalarType, field.no, value);
              } else {
                for (const item of value) {
                  writeScalar(writer, scalarType, field.no, item, true);
                }
              }
            } else {
              if (value !== void 0) {
                writeScalar(writer, scalarType, field.no, value, !!field.oneof || field.opt);
              }
            }
            break;
          case "message":
            if (repeated) {
              for (const item of value) {
                writeMessageField(writer, options, field.T, field.no, item);
              }
            } else {
              writeMessageField(writer, options, field.T, field.no, value);
            }
            break;
          case "map":
            for (const [key, val] of Object.entries(value)) {
              writeMapEntry(writer, options, field, key, val);
            }
            break;
        }
      }
      if (options.writeUnknownFields) {
        this.writeUnknownFields(message, writer);
      }
      return writer;
    } });
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js
  var encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  var decTable = [];
  for (let i2 = 0; i2 < encTable.length; i2++)
    decTable[encTable[i2].charCodeAt(0)] = i2;
  decTable["-".charCodeAt(0)] = encTable.indexOf("+");
  decTable["_".charCodeAt(0)] = encTable.indexOf("/");
  var protoBase64 = {
    /**
     * Decodes a base64 string to a byte array.
     *
     * - ignores white-space, including line breaks and tabs
     * - allows inner padding (can decode concatenated base64 strings)
     * - does not require padding
     * - understands base64url encoding:
     *   "-" instead of "+",
     *   "_" instead of "/",
     *   no padding
     */
    dec(base64Str) {
      let es = base64Str.length * 3 / 4;
      if (base64Str[base64Str.length - 2] == "=")
        es -= 2;
      else if (base64Str[base64Str.length - 1] == "=")
        es -= 1;
      let bytes = new Uint8Array(es), bytePos = 0, groupPos = 0, b3, p2 = 0;
      for (let i2 = 0; i2 < base64Str.length; i2++) {
        b3 = decTable[base64Str.charCodeAt(i2)];
        if (b3 === void 0) {
          switch (base64Str[i2]) {
            case "=":
              groupPos = 0;
            case "\n":
            case "\r":
            case "	":
            case " ":
              continue;
            default:
              throw Error("invalid base64 string.");
          }
        }
        switch (groupPos) {
          case 0:
            p2 = b3;
            groupPos = 1;
            break;
          case 1:
            bytes[bytePos++] = p2 << 2 | (b3 & 48) >> 4;
            p2 = b3;
            groupPos = 2;
            break;
          case 2:
            bytes[bytePos++] = (p2 & 15) << 4 | (b3 & 60) >> 2;
            p2 = b3;
            groupPos = 3;
            break;
          case 3:
            bytes[bytePos++] = (p2 & 3) << 6 | b3;
            groupPos = 0;
            break;
        }
      }
      if (groupPos == 1)
        throw Error("invalid base64 string.");
      return bytes.subarray(0, bytePos);
    },
    /**
     * Encode a byte array to a base64 string.
     */
    enc(bytes) {
      let base64 = "", groupPos = 0, b3, p2 = 0;
      for (let i2 = 0; i2 < bytes.length; i2++) {
        b3 = bytes[i2];
        switch (groupPos) {
          case 0:
            base64 += encTable[b3 >> 2];
            p2 = (b3 & 3) << 4;
            groupPos = 1;
            break;
          case 1:
            base64 += encTable[p2 | b3 >> 4];
            p2 = (b3 & 15) << 2;
            groupPos = 2;
            break;
          case 2:
            base64 += encTable[p2 | b3 >> 6];
            base64 += encTable[b3 & 63];
            groupPos = 0;
            break;
        }
      }
      if (groupPos) {
        base64 += encTable[p2];
        base64 += "=";
        if (groupPos == 1)
          base64 += "=";
      }
      return base64;
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-common.js
  var jsonReadDefaults = {
    ignoreUnknownFields: false
  };
  var jsonWriteDefaults = {
    emitDefaultValues: false,
    enumAsInteger: false,
    useProtoFieldName: false,
    prettySpaces: 0
  };
  function makeReadOptions2(options) {
    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;
  }
  function makeWriteOptions2(options) {
    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;
  }
  function makeJsonFormatCommon(makeWriteField) {
    const writeField = makeWriteField(writeEnum, writeScalar2);
    return {
      makeReadOptions: makeReadOptions2,
      makeWriteOptions: makeWriteOptions2,
      readMessage(type, json, options, message) {
        if (json == null || Array.isArray(json) || typeof json != "object") {
          throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json)}`);
        }
        message = message !== null && message !== void 0 ? message : new type();
        const oneofSeen = {};
        for (const [jsonKey, jsonValue] of Object.entries(json)) {
          const field = type.fields.findJsonName(jsonKey);
          if (!field) {
            if (!options.ignoreUnknownFields) {
              throw new Error(`cannot decode message ${type.typeName} from JSON: key "${jsonKey}" is unknown`);
            }
            continue;
          }
          let localName = field.localName;
          let target = message;
          if (field.oneof) {
            if (jsonValue === null && field.kind == "scalar") {
              continue;
            }
            const seen = oneofSeen[field.oneof.localName];
            if (seen) {
              throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof "${field.oneof.name}" present: "${seen}", "${jsonKey}"`);
            }
            oneofSeen[field.oneof.localName] = jsonKey;
            target = target[field.oneof.localName] = { case: localName };
            localName = "value";
          }
          if (field.repeated) {
            if (jsonValue === null) {
              continue;
            }
            if (!Array.isArray(jsonValue)) {
              throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
            }
            const targetArray = target[localName];
            for (const jsonItem of jsonValue) {
              if (jsonItem === null) {
                throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);
              }
              let val;
              switch (field.kind) {
                case "message":
                  val = field.T.fromJson(jsonItem, options);
                  break;
                case "enum":
                  val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);
                  if (val === void 0)
                    continue;
                  break;
                case "scalar":
                  try {
                    val = readScalar2(field.T, jsonItem);
                  } catch (e2) {
                    let m2 = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;
                    if (e2 instanceof Error && e2.message.length > 0) {
                      m2 += `: ${e2.message}`;
                    }
                    throw new Error(m2);
                  }
                  break;
              }
              targetArray.push(val);
            }
          } else if (field.kind == "map") {
            if (jsonValue === null) {
              continue;
            }
            if (Array.isArray(jsonValue) || typeof jsonValue != "object") {
              throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
            }
            const targetMap = target[localName];
            for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {
              if (jsonMapValue === null) {
                throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);
              }
              let val;
              switch (field.V.kind) {
                case "message":
                  val = field.V.T.fromJson(jsonMapValue, options);
                  break;
                case "enum":
                  val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);
                  if (val === void 0)
                    continue;
                  break;
                case "scalar":
                  try {
                    val = readScalar2(field.V.T, jsonMapValue);
                  } catch (e2) {
                    let m2 = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                    if (e2 instanceof Error && e2.message.length > 0) {
                      m2 += `: ${e2.message}`;
                    }
                    throw new Error(m2);
                  }
                  break;
              }
              try {
                targetMap[readScalar2(field.K, field.K == ScalarType.BOOL ? jsonMapKey == "true" ? true : jsonMapKey == "false" ? false : jsonMapKey : jsonMapKey).toString()] = val;
              } catch (e2) {
                let m2 = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                if (e2 instanceof Error && e2.message.length > 0) {
                  m2 += `: ${e2.message}`;
                }
                throw new Error(m2);
              }
            }
          } else {
            switch (field.kind) {
              case "message":
                const messageType = field.T;
                if (jsonValue === null && messageType.typeName != "google.protobuf.Value") {
                  if (field.oneof) {
                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field "${jsonKey}"`);
                  }
                  continue;
                }
                if (target[localName] instanceof Message) {
                  target[localName].fromJson(jsonValue, options);
                } else {
                  target[localName] = messageType.fromJson(jsonValue, options);
                  if (messageType.fieldWrapper && !field.oneof) {
                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                  }
                }
                break;
              case "enum":
                const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);
                if (enumValue !== void 0) {
                  target[localName] = enumValue;
                }
                break;
              case "scalar":
                try {
                  target[localName] = readScalar2(field.T, jsonValue);
                } catch (e2) {
                  let m2 = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                  if (e2 instanceof Error && e2.message.length > 0) {
                    m2 += `: ${e2.message}`;
                  }
                  throw new Error(m2);
                }
                break;
            }
          }
        }
        return message;
      },
      writeMessage(message, options) {
        const type = message.getType();
        const json = {};
        let field;
        try {
          for (const member of type.fields.byMember()) {
            let jsonValue;
            if (member.kind == "oneof") {
              const oneof = message[member.localName];
              if (oneof.value === void 0) {
                continue;
              }
              field = member.findField(oneof.case);
              if (!field) {
                throw "oneof case not found: " + oneof.case;
              }
              jsonValue = writeField(field, oneof.value, options);
            } else {
              field = member;
              jsonValue = writeField(field, message[field.localName], options);
            }
            if (jsonValue !== void 0) {
              json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;
            }
          }
        } catch (e2) {
          const m2 = field ? `cannot encode field ${type.typeName}.${field.name} to JSON` : `cannot encode message ${type.typeName} to JSON`;
          const r = e2 instanceof Error ? e2.message : String(e2);
          throw new Error(m2 + (r.length > 0 ? `: ${r}` : ""));
        }
        return json;
      },
      readScalar: readScalar2,
      writeScalar: writeScalar2,
      debug: debugJsonValue
    };
  }
  function debugJsonValue(json) {
    if (json === null) {
      return "null";
    }
    switch (typeof json) {
      case "object":
        return Array.isArray(json) ? "array" : "object";
      case "string":
        return json.length > 100 ? "string" : `"${json.split('"').join('\\"')}"`;
      default:
        return String(json);
    }
  }
  function readScalar2(type, json) {
    switch (type) {
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        if (json === null)
          return 0;
        if (json === "NaN")
          return Number.NaN;
        if (json === "Infinity")
          return Number.POSITIVE_INFINITY;
        if (json === "-Infinity")
          return Number.NEGATIVE_INFINITY;
        if (json === "") {
          break;
        }
        if (typeof json == "string" && json.trim().length !== json.length) {
          break;
        }
        if (typeof json != "string" && typeof json != "number") {
          break;
        }
        const float = Number(json);
        if (Number.isNaN(float)) {
          break;
        }
        if (!Number.isFinite(float)) {
          break;
        }
        if (type == ScalarType.FLOAT)
          assertFloat32(float);
        return float;
      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.UINT32:
        if (json === null)
          return 0;
        let int32;
        if (typeof json == "number")
          int32 = json;
        else if (typeof json == "string" && json.length > 0) {
          if (json.trim().length === json.length)
            int32 = Number(json);
        }
        if (int32 === void 0)
          break;
        if (type == ScalarType.UINT32)
          assertUInt32(int32);
        else
          assertInt32(int32);
        return int32;
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        if (json === null)
          return protoInt64.zero;
        if (typeof json != "number" && typeof json != "string")
          break;
        return protoInt64.parse(json);
      case ScalarType.FIXED64:
      case ScalarType.UINT64:
        if (json === null)
          return protoInt64.zero;
        if (typeof json != "number" && typeof json != "string")
          break;
        return protoInt64.uParse(json);
      case ScalarType.BOOL:
        if (json === null)
          return false;
        if (typeof json !== "boolean")
          break;
        return json;
      case ScalarType.STRING:
        if (json === null)
          return "";
        if (typeof json !== "string") {
          break;
        }
        try {
          encodeURIComponent(json);
        } catch (e2) {
          throw new Error("invalid UTF8");
        }
        return json;
      case ScalarType.BYTES:
        if (json === null || json === "")
          return new Uint8Array(0);
        if (typeof json !== "string")
          break;
        return protoBase64.dec(json);
    }
    throw new Error();
  }
  function readEnum(type, json, ignoreUnknownFields) {
    if (json === null) {
      return 0;
    }
    switch (typeof json) {
      case "number":
        if (Number.isInteger(json)) {
          return json;
        }
        break;
      case "string":
        const value = type.findName(json);
        if (value || ignoreUnknownFields) {
          return value === null || value === void 0 ? void 0 : value.no;
        }
        break;
    }
    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);
  }
  function writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {
    var _a7;
    if (value === void 0) {
      return value;
    }
    if (value === 0 && !emitIntrinsicDefault) {
      return void 0;
    }
    if (enumAsInteger) {
      return value;
    }
    if (type.typeName == "google.protobuf.NullValue") {
      return null;
    }
    const val = type.findNumber(value);
    return (_a7 = val === null || val === void 0 ? void 0 : val.name) !== null && _a7 !== void 0 ? _a7 : value;
  }
  function writeScalar2(type, value, emitIntrinsicDefault) {
    if (value === void 0) {
      return void 0;
    }
    switch (type) {
      case ScalarType.INT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
        assert(typeof value == "number");
        return value != 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.FLOAT:
      case ScalarType.DOUBLE:
        assert(typeof value == "number");
        if (Number.isNaN(value))
          return "NaN";
        if (value === Number.POSITIVE_INFINITY)
          return "Infinity";
        if (value === Number.NEGATIVE_INFINITY)
          return "-Infinity";
        return value !== 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.STRING:
        assert(typeof value == "string");
        return value.length > 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.BOOL:
        assert(typeof value == "boolean");
        return value || emitIntrinsicDefault ? value : void 0;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        assert(typeof value == "bigint" || typeof value == "string" || typeof value == "number");
        return emitIntrinsicDefault || value != 0 ? value.toString(10) : void 0;
      case ScalarType.BYTES:
        assert(value instanceof Uint8Array);
        return emitIntrinsicDefault || value.byteLength > 0 ? protoBase64.enc(value) : void 0;
    }
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-proto3.js
  function makeJsonFormatProto3() {
    return makeJsonFormatCommon((writeEnum2, writeScalar3) => {
      return function writeField(field, value, options) {
        if (field.kind == "map") {
          const jsonObj = {};
          switch (field.V.kind) {
            case "scalar":
              for (const [entryKey, entryValue] of Object.entries(value)) {
                const val = writeScalar3(field.V.T, entryValue, true);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
            case "message":
              for (const [entryKey, entryValue] of Object.entries(value)) {
                jsonObj[entryKey.toString()] = entryValue.toJson(options);
              }
              break;
            case "enum":
              const enumType = field.V.T;
              for (const [entryKey, entryValue] of Object.entries(value)) {
                assert(entryValue === void 0 || typeof entryValue == "number");
                const val = writeEnum2(enumType, entryValue, true, options.enumAsInteger);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
          }
          return options.emitDefaultValues || Object.keys(jsonObj).length > 0 ? jsonObj : void 0;
        } else if (field.repeated) {
          const jsonArr = [];
          switch (field.kind) {
            case "scalar":
              for (let i2 = 0; i2 < value.length; i2++) {
                jsonArr.push(writeScalar3(field.T, value[i2], true));
              }
              break;
            case "enum":
              for (let i2 = 0; i2 < value.length; i2++) {
                jsonArr.push(writeEnum2(field.T, value[i2], true, options.enumAsInteger));
              }
              break;
            case "message":
              for (let i2 = 0; i2 < value.length; i2++) {
                jsonArr.push(wrapField(field.T, value[i2]).toJson(options));
              }
              break;
          }
          return options.emitDefaultValues || jsonArr.length > 0 ? jsonArr : void 0;
        } else {
          switch (field.kind) {
            case "scalar":
              return writeScalar3(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);
            case "enum":
              return writeEnum2(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);
            case "message":
              return value !== void 0 ? wrapField(field.T, value).toJson(options) : void 0;
          }
        }
      };
    });
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js
  function makeUtilCommon() {
    return {
      setEnumType,
      initPartial(source, target) {
        if (source === void 0) {
          return;
        }
        const type = target.getType();
        for (const member of type.fields.byMember()) {
          const localName = member.localName, t2 = target, s2 = source;
          if (s2[localName] === void 0) {
            continue;
          }
          switch (member.kind) {
            case "oneof":
              const sk = s2[localName].case;
              if (sk === void 0) {
                continue;
              }
              const sourceField = member.findField(sk);
              let val = s2[localName].value;
              if (sourceField && sourceField.kind == "message" && !(val instanceof sourceField.T)) {
                val = new sourceField.T(val);
              } else if (sourceField && sourceField.kind === "scalar" && sourceField.T === ScalarType.BYTES) {
                val = toU8Arr(val);
              }
              t2[localName] = { case: sk, value: val };
              break;
            case "scalar":
            case "enum":
              let copy = s2[localName];
              if (member.T === ScalarType.BYTES) {
                copy = member.repeated ? copy.map(toU8Arr) : toU8Arr(copy);
              }
              t2[localName] = copy;
              break;
            case "map":
              switch (member.V.kind) {
                case "scalar":
                case "enum":
                  if (member.V.T === ScalarType.BYTES) {
                    for (const [k, v2] of Object.entries(s2[localName])) {
                      t2[localName][k] = toU8Arr(v2);
                    }
                  } else {
                    Object.assign(t2[localName], s2[localName]);
                  }
                  break;
                case "message":
                  const messageType = member.V.T;
                  for (const k of Object.keys(s2[localName])) {
                    let val2 = s2[localName][k];
                    if (!messageType.fieldWrapper) {
                      val2 = new messageType(val2);
                    }
                    t2[localName][k] = val2;
                  }
                  break;
              }
              break;
            case "message":
              const mt = member.T;
              if (member.repeated) {
                t2[localName] = s2[localName].map((val2) => val2 instanceof mt ? val2 : new mt(val2));
              } else if (s2[localName] !== void 0) {
                const val2 = s2[localName];
                if (mt.fieldWrapper) {
                  if (
                    // We can't use BytesValue.typeName as that will create a circular import
                    mt.typeName === "google.protobuf.BytesValue"
                  ) {
                    t2[localName] = toU8Arr(val2);
                  } else {
                    t2[localName] = val2;
                  }
                } else {
                  t2[localName] = val2 instanceof mt ? val2 : new mt(val2);
                }
              }
              break;
          }
        }
      },
      equals(type, a2, b3) {
        if (a2 === b3) {
          return true;
        }
        if (!a2 || !b3) {
          return false;
        }
        return type.fields.byMember().every((m2) => {
          const va = a2[m2.localName];
          const vb = b3[m2.localName];
          if (m2.repeated) {
            if (va.length !== vb.length) {
              return false;
            }
            switch (m2.kind) {
              case "message":
                return va.every((a3, i2) => m2.T.equals(a3, vb[i2]));
              case "scalar":
                return va.every((a3, i2) => scalarEquals(m2.T, a3, vb[i2]));
              case "enum":
                return va.every((a3, i2) => scalarEquals(ScalarType.INT32, a3, vb[i2]));
            }
            throw new Error(`repeated cannot contain ${m2.kind}`);
          }
          switch (m2.kind) {
            case "message":
              return m2.T.equals(va, vb);
            case "enum":
              return scalarEquals(ScalarType.INT32, va, vb);
            case "scalar":
              return scalarEquals(m2.T, va, vb);
            case "oneof":
              if (va.case !== vb.case) {
                return false;
              }
              const s2 = m2.findField(va.case);
              if (s2 === void 0) {
                return true;
              }
              switch (s2.kind) {
                case "message":
                  return s2.T.equals(va.value, vb.value);
                case "enum":
                  return scalarEquals(ScalarType.INT32, va.value, vb.value);
                case "scalar":
                  return scalarEquals(s2.T, va.value, vb.value);
              }
              throw new Error(`oneof cannot contain ${s2.kind}`);
            case "map":
              const keys = Object.keys(va).concat(Object.keys(vb));
              switch (m2.V.kind) {
                case "message":
                  const messageType = m2.V.T;
                  return keys.every((k) => messageType.equals(va[k], vb[k]));
                case "enum":
                  return keys.every((k) => scalarEquals(ScalarType.INT32, va[k], vb[k]));
                case "scalar":
                  const scalarType = m2.V.T;
                  return keys.every((k) => scalarEquals(scalarType, va[k], vb[k]));
              }
              break;
          }
        });
      },
      clone(message) {
        const type = message.getType(), target = new type(), any = target;
        for (const member of type.fields.byMember()) {
          const source = message[member.localName];
          let copy;
          if (member.repeated) {
            copy = source.map(cloneSingularField);
          } else if (member.kind == "map") {
            copy = any[member.localName];
            for (const [key, v2] of Object.entries(source)) {
              copy[key] = cloneSingularField(v2);
            }
          } else if (member.kind == "oneof") {
            const f3 = member.findField(source.case);
            copy = f3 ? { case: source.case, value: cloneSingularField(source.value) } : { case: void 0 };
          } else {
            copy = cloneSingularField(source);
          }
          any[member.localName] = copy;
        }
        return target;
      }
    };
  }
  function cloneSingularField(value) {
    if (value === void 0) {
      return value;
    }
    if (value instanceof Message) {
      return value.clone();
    }
    if (value instanceof Uint8Array) {
      const c2 = new Uint8Array(value.byteLength);
      c2.set(value);
      return c2;
    }
    return value;
  }
  function toU8Arr(input) {
    return input instanceof Uint8Array ? input : new Uint8Array(input);
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js
  var InternalFieldList = class {
    constructor(fields, normalizer) {
      this._fields = fields;
      this._normalizer = normalizer;
    }
    findJsonName(jsonName) {
      if (!this.jsonNames) {
        const t2 = {};
        for (const f3 of this.list()) {
          t2[f3.jsonName] = t2[f3.name] = f3;
        }
        this.jsonNames = t2;
      }
      return this.jsonNames[jsonName];
    }
    find(fieldNo) {
      if (!this.numbers) {
        const t2 = {};
        for (const f3 of this.list()) {
          t2[f3.no] = f3;
        }
        this.numbers = t2;
      }
      return this.numbers[fieldNo];
    }
    list() {
      if (!this.all) {
        this.all = this._normalizer(this._fields);
      }
      return this.all;
    }
    byNumber() {
      if (!this.numbersAsc) {
        this.numbersAsc = this.list().concat().sort((a2, b3) => a2.no - b3.no);
      }
      return this.numbersAsc;
    }
    byMember() {
      if (!this.members) {
        this.members = [];
        const a2 = this.members;
        let o2;
        for (const f3 of this.list()) {
          if (f3.oneof) {
            if (f3.oneof !== o2) {
              o2 = f3.oneof;
              a2.push(o2);
            }
          } else {
            a2.push(f3);
          }
        }
      }
      return this.members;
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/names.js
  function localFieldName(protoName, inOneof) {
    const name = protoCamelCase(protoName);
    if (inOneof) {
      return name;
    }
    return safeObjectProperty(safeMessageProperty(name));
  }
  function localOneofName(protoName) {
    return localFieldName(protoName, false);
  }
  var fieldJsonName = protoCamelCase;
  function protoCamelCase(snakeCase) {
    let capNext = false;
    const b3 = [];
    for (let i2 = 0; i2 < snakeCase.length; i2++) {
      let c2 = snakeCase.charAt(i2);
      switch (c2) {
        case "_":
          capNext = true;
          break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          b3.push(c2);
          capNext = false;
          break;
        default:
          if (capNext) {
            capNext = false;
            c2 = c2.toUpperCase();
          }
          b3.push(c2);
          break;
      }
    }
    return b3.join("");
  }
  var reservedObjectProperties = /* @__PURE__ */ new Set([
    // names reserved by JavaScript
    "constructor",
    "toString",
    "toJSON",
    "valueOf"
  ]);
  var reservedMessageProperties = /* @__PURE__ */ new Set([
    // names reserved by the runtime
    "getType",
    "clone",
    "equals",
    "fromBinary",
    "fromJson",
    "fromJsonString",
    "toBinary",
    "toJson",
    "toJsonString",
    // names reserved by the runtime for the future
    "toObject"
  ]);
  var fallback = (name) => `${name}$`;
  var safeMessageProperty = (name) => {
    if (reservedMessageProperties.has(name)) {
      return fallback(name);
    }
    return name;
  };
  var safeObjectProperty = (name) => {
    if (reservedObjectProperties.has(name)) {
      return fallback(name);
    }
    return name;
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/field.js
  var InternalOneofInfo = class {
    constructor(name) {
      this.kind = "oneof";
      this.repeated = false;
      this.packed = false;
      this.opt = false;
      this.default = void 0;
      this.fields = [];
      this.name = name;
      this.localName = localOneofName(name);
    }
    addField(field) {
      assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);
      this.fields.push(field);
    }
    findField(localName) {
      if (!this._lookup) {
        this._lookup = /* @__PURE__ */ Object.create(null);
        for (let i2 = 0; i2 < this.fields.length; i2++) {
          this._lookup[this.fields[i2].localName] = this.fields[i2];
        }
      }
      return this._lookup[localName];
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/proto3.js
  var proto3 = makeProtoRuntime("proto3", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), {
    newFieldList(fields) {
      return new InternalFieldList(fields, normalizeFieldInfosProto3);
    },
    initFields(target) {
      for (const member of target.getType().fields.byMember()) {
        if (member.opt) {
          continue;
        }
        const name = member.localName, t2 = target;
        if (member.repeated) {
          t2[name] = [];
          continue;
        }
        switch (member.kind) {
          case "oneof":
            t2[name] = { case: void 0 };
            break;
          case "enum":
            t2[name] = 0;
            break;
          case "map":
            t2[name] = {};
            break;
          case "scalar":
            t2[name] = scalarDefaultValue(member.T);
            break;
          case "message":
            break;
        }
      }
    }
  }));
  function normalizeFieldInfosProto3(fieldInfos) {
    var _a7, _b3, _c3;
    const r = [];
    let o2;
    for (const field of typeof fieldInfos == "function" ? fieldInfos() : fieldInfos) {
      const f3 = field;
      f3.localName = localFieldName(field.name, field.oneof !== void 0);
      f3.jsonName = (_a7 = field.jsonName) !== null && _a7 !== void 0 ? _a7 : fieldJsonName(field.name);
      f3.repeated = (_b3 = field.repeated) !== null && _b3 !== void 0 ? _b3 : false;
      f3.packed = (_c3 = field.packed) !== null && _c3 !== void 0 ? _c3 : field.kind == "enum" || field.kind == "scalar" && field.T != ScalarType.BYTES && field.T != ScalarType.STRING;
      if (field.oneof !== void 0) {
        const ooname = typeof field.oneof == "string" ? field.oneof : field.oneof.name;
        if (!o2 || o2.name != ooname) {
          o2 = new InternalOneofInfo(ooname);
        }
        f3.oneof = o2;
        o2.addField(f3);
      }
      r.push(f3);
    }
    return r;
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/service-type.js
  var MethodKind;
  (function(MethodKind2) {
    MethodKind2[MethodKind2["Unary"] = 0] = "Unary";
    MethodKind2[MethodKind2["ServerStreaming"] = 1] = "ServerStreaming";
    MethodKind2[MethodKind2["ClientStreaming"] = 2] = "ClientStreaming";
    MethodKind2[MethodKind2["BiDiStreaming"] = 3] = "BiDiStreaming";
  })(MethodKind || (MethodKind = {}));
  var MethodIdempotency;
  (function(MethodIdempotency2) {
    MethodIdempotency2[MethodIdempotency2["NoSideEffects"] = 1] = "NoSideEffects";
    MethodIdempotency2[MethodIdempotency2["Idempotent"] = 2] = "Idempotent";
  })(MethodIdempotency || (MethodIdempotency = {}));

  // ../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/empty_pb.js
  var Empty = class _Empty extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Empty().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Empty().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Empty().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Empty, a2, b3);
    }
  };
  Empty.runtime = proto3;
  Empty.typeName = "google.protobuf.Empty";
  Empty.fields = proto3.util.newFieldList(() => []);

  // ../node_modules/@bufbuild/connect/dist/esm/code.js
  var Code;
  (function(Code2) {
    Code2[Code2["Canceled"] = 1] = "Canceled";
    Code2[Code2["Unknown"] = 2] = "Unknown";
    Code2[Code2["InvalidArgument"] = 3] = "InvalidArgument";
    Code2[Code2["DeadlineExceeded"] = 4] = "DeadlineExceeded";
    Code2[Code2["NotFound"] = 5] = "NotFound";
    Code2[Code2["AlreadyExists"] = 6] = "AlreadyExists";
    Code2[Code2["PermissionDenied"] = 7] = "PermissionDenied";
    Code2[Code2["ResourceExhausted"] = 8] = "ResourceExhausted";
    Code2[Code2["FailedPrecondition"] = 9] = "FailedPrecondition";
    Code2[Code2["Aborted"] = 10] = "Aborted";
    Code2[Code2["OutOfRange"] = 11] = "OutOfRange";
    Code2[Code2["Unimplemented"] = 12] = "Unimplemented";
    Code2[Code2["Internal"] = 13] = "Internal";
    Code2[Code2["Unavailable"] = 14] = "Unavailable";
    Code2[Code2["DataLoss"] = 15] = "DataLoss";
    Code2[Code2["Unauthenticated"] = 16] = "Unauthenticated";
  })(Code || (Code = {}));

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/code-string.js
  function codeToString(value) {
    const name = Code[value];
    if (typeof name != "string") {
      return value.toString();
    }
    return name[0].toLowerCase() + name.substring(1).replace(/[A-Z]/g, (c2) => "_" + c2.toLowerCase());
  }
  var stringToCode;
  function codeFromString(value) {
    if (!stringToCode) {
      stringToCode = {};
      for (const value2 of Object.values(Code)) {
        if (typeof value2 == "string") {
          continue;
        }
        stringToCode[codeToString(value2)] = value2;
      }
    }
    return stringToCode[value];
  }

  // ../node_modules/@bufbuild/connect/dist/esm/connect-error.js
  var ConnectError = class _ConnectError extends Error {
    /**
     * Create a new ConnectError.
     * If no code is provided, code "unknown" is used.
     * Outgoing details are only relevant for the server side - a service may
     * raise an error with details, and it is up to the protocol implementation
     * to encode and send the details along with error.
     */
    constructor(message, code = Code.Unknown, metadata, outgoingDetails, cause) {
      super(createMessage(message, code));
      this.name = "ConnectError";
      Object.setPrototypeOf(this, new.target.prototype);
      this.rawMessage = message;
      this.code = code;
      this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});
      this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];
      this.cause = cause;
    }
    /**
     * Convert any value - typically a caught error into a ConnectError,
     * following these rules:
     * - If the value is already a ConnectError, return it as is.
     * - If the value is an AbortError from the fetch API, return the message
     *   of the AbortError with code Canceled.
     * - For other Errors, return the error message with code Unknown by default.
     * - For other values, return the values String representation as a message,
     *   with the code Unknown by default.
     * The original value will be used for the "cause" property for the new
     * ConnectError.
     */
    static from(reason, code = Code.Unknown) {
      if (reason instanceof _ConnectError) {
        return reason;
      }
      if (reason instanceof Error) {
        if (reason.name == "AbortError") {
          return new _ConnectError(reason.message, Code.Canceled);
        }
        return new _ConnectError(reason.message, code, void 0, void 0, reason);
      }
      return new _ConnectError(String(reason), code, void 0, void 0, reason);
    }
    findDetails(typeOrRegistry) {
      const registry = "typeName" in typeOrRegistry ? {
        findMessage: (typeName) => typeName === typeOrRegistry.typeName ? typeOrRegistry : void 0
      } : typeOrRegistry;
      const details = [];
      for (const data of this.details) {
        if (data instanceof Message) {
          if (registry.findMessage(data.getType().typeName)) {
            details.push(data);
          }
          continue;
        }
        const type = registry.findMessage(data.type);
        if (type) {
          try {
            details.push(type.fromBinary(data.value));
          } catch (_2) {
          }
        }
      }
      return details;
    }
  };
  function createMessage(message, code) {
    return message.length ? `[${codeToString(code)}] ${message}` : `[${codeToString(code)}]`;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/http-headers.js
  function appendHeaders(...headers) {
    const h3 = new Headers();
    for (const e2 of headers) {
      e2.forEach((value, key) => {
        h3.append(key, value);
      });
    }
    return h3;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/any-client.js
  function makeAnyClient(service, createMethod) {
    const client = {};
    for (const [localName, methodInfo] of Object.entries(service.methods)) {
      const method = createMethod(Object.assign(Object.assign({}, methodInfo), {
        localName,
        service
      }));
      if (method != null) {
        client[localName] = method;
      }
    }
    return client;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/envelope.js
  function createEnvelopeReadableStream(stream) {
    let reader;
    let buffer = new Uint8Array(0);
    function append(chunk) {
      const n3 = new Uint8Array(buffer.length + chunk.length);
      n3.set(buffer);
      n3.set(chunk, buffer.length);
      buffer = n3;
    }
    return new ReadableStream({
      start() {
        reader = stream.getReader();
      },
      async pull(controller) {
        let header = void 0;
        for (; ; ) {
          if (header === void 0 && buffer.byteLength >= 5) {
            let length = 0;
            for (let i2 = 1; i2 < 5; i2++) {
              length = (length << 8) + buffer[i2];
            }
            header = { flags: buffer[0], length };
          }
          if (header !== void 0 && buffer.byteLength >= header.length + 5) {
            break;
          }
          const result = await reader.read();
          if (result.done) {
            break;
          }
          append(result.value);
        }
        if (header === void 0) {
          if (buffer.byteLength == 0) {
            controller.close();
            return;
          }
          controller.error(new ConnectError("premature end of stream", Code.DataLoss));
          return;
        }
        const data = buffer.subarray(5, 5 + header.length);
        buffer = buffer.subarray(5 + header.length);
        controller.enqueue({
          flags: header.flags,
          data
        });
      }
    });
  }
  function encodeEnvelope(flags, data) {
    const bytes = new Uint8Array(data.length + 5);
    bytes.set(data, 5);
    const v2 = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    v2.setUint8(0, flags);
    v2.setUint32(1, data.length);
    return bytes;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/async-iterable.js
  var __asyncValues = function(o2) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o2[Symbol.asyncIterator], i2;
    return m2 ? m2.call(o2) : (o2 = typeof __values === "function" ? __values(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2);
    function verb(n3) {
      i2[n3] = o2[n3] && function(v2) {
        return new Promise(function(resolve, reject) {
          v2 = o2[n3](v2), settle(resolve, reject, v2.done, v2.value);
        });
      };
    }
    function settle(resolve, reject, d2, v2) {
      Promise.resolve(v2).then(function(v3) {
        resolve({ value: v3, done: d2 });
      }, reject);
    }
  };
  var __await = function(v2) {
    return this instanceof __await ? (this.v = v2, this) : new __await(v2);
  };
  var __asyncGenerator = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i2, q = [];
    return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2;
    function verb(n3) {
      if (g2[n3])
        i2[n3] = function(v2) {
          return new Promise(function(a2, b3) {
            q.push([n3, v2, a2, b3]) > 1 || resume(n3, v2);
          });
        };
    }
    function resume(n3, v2) {
      try {
        step(g2[n3](v2));
      } catch (e2) {
        settle(q[0][3], e2);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f3, v2) {
      if (f3(v2), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  };
  var __asyncDelegator = function(o2) {
    var i2, p2;
    return i2 = {}, verb("next"), verb("throw", function(e2) {
      throw e2;
    }), verb("return"), i2[Symbol.iterator] = function() {
      return this;
    }, i2;
    function verb(n3, f3) {
      i2[n3] = o2[n3] ? function(v2) {
        return (p2 = !p2) ? { value: __await(o2[n3](v2)), done: false } : f3 ? f3(v2) : v2;
      } : f3;
    }
  };
  function createAsyncIterable(items) {
    return __asyncGenerator(this, arguments, function* createAsyncIterable_1() {
      yield __await(yield* __asyncDelegator(__asyncValues(items)));
    });
  }

  // ../node_modules/@bufbuild/connect/dist/esm/promise-client.js
  var __asyncValues2 = function(o2) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o2[Symbol.asyncIterator], i2;
    return m2 ? m2.call(o2) : (o2 = typeof __values === "function" ? __values(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2);
    function verb(n3) {
      i2[n3] = o2[n3] && function(v2) {
        return new Promise(function(resolve, reject) {
          v2 = o2[n3](v2), settle(resolve, reject, v2.done, v2.value);
        });
      };
    }
    function settle(resolve, reject, d2, v2) {
      Promise.resolve(v2).then(function(v3) {
        resolve({ value: v3, done: d2 });
      }, reject);
    }
  };
  var __await2 = function(v2) {
    return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
  };
  var __asyncDelegator2 = function(o2) {
    var i2, p2;
    return i2 = {}, verb("next"), verb("throw", function(e2) {
      throw e2;
    }), verb("return"), i2[Symbol.iterator] = function() {
      return this;
    }, i2;
    function verb(n3, f3) {
      i2[n3] = o2[n3] ? function(v2) {
        return (p2 = !p2) ? { value: __await2(o2[n3](v2)), done: false } : f3 ? f3(v2) : v2;
      } : f3;
    }
  };
  var __asyncGenerator2 = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i2, q = [];
    return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2;
    function verb(n3) {
      if (g2[n3])
        i2[n3] = function(v2) {
          return new Promise(function(a2, b3) {
            q.push([n3, v2, a2, b3]) > 1 || resume(n3, v2);
          });
        };
    }
    function resume(n3, v2) {
      try {
        step(g2[n3](v2));
      } catch (e2) {
        settle(q[0][3], e2);
      }
    }
    function step(r) {
      r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f3, v2) {
      if (f3(v2), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  };
  function createPromiseClient(service, transport2) {
    return makeAnyClient(service, (method) => {
      switch (method.kind) {
        case MethodKind.Unary:
          return createUnaryFn(transport2, service, method);
        case MethodKind.ServerStreaming:
          return createServerStreamingFn(transport2, service, method);
        case MethodKind.ClientStreaming:
          return createClientStreamingFn(transport2, service, method);
        case MethodKind.BiDiStreaming:
          return createBiDiStreamingFn(transport2, service, method);
        default:
          return null;
      }
    });
  }
  function createUnaryFn(transport2, service, method) {
    return async function(input, options) {
      var _a7, _b3;
      const response = await transport2.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input);
      (_a7 = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a7 === void 0 ? void 0 : _a7.call(options, response.header);
      (_b3 = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b3 === void 0 ? void 0 : _b3.call(options, response.trailer);
      return response.message;
    };
  }
  function createServerStreamingFn(transport2, service, method) {
    return function(input, options) {
      return handleStreamResponse(transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, createAsyncIterable([input])), options);
    };
  }
  function createClientStreamingFn(transport2, service, method) {
    return async function(request, options) {
      var _a7, e_1, _b3, _c3;
      var _d3, _e2;
      const response = await transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request);
      (_d3 = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d3 === void 0 ? void 0 : _d3.call(options, response.header);
      let singleMessage;
      try {
        for (var _f = true, _g = __asyncValues2(response.message), _h; _h = await _g.next(), _a7 = _h.done, !_a7; _f = true) {
          _c3 = _h.value;
          _f = false;
          const message = _c3;
          singleMessage = message;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (!_f && !_a7 && (_b3 = _g.return))
            await _b3.call(_g);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      if (!singleMessage) {
        throw new ConnectError("protocol error: missing response message", Code.Internal);
      }
      (_e2 = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e2 === void 0 ? void 0 : _e2.call(options, response.trailer);
      return singleMessage;
    };
  }
  function createBiDiStreamingFn(transport2, service, method) {
    return function(request, options) {
      return handleStreamResponse(transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request), options);
    };
  }
  function handleStreamResponse(stream, options) {
    const it = function() {
      var _a7, _b3;
      return __asyncGenerator2(this, arguments, function* () {
        const response = yield __await2(stream);
        (_a7 = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a7 === void 0 ? void 0 : _a7.call(options, response.header);
        yield __await2(yield* __asyncDelegator2(__asyncValues2(response.message)));
        (_b3 = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b3 === void 0 ? void 0 : _b3.call(options, response.trailer);
      });
    }()[Symbol.asyncIterator]();
    return {
      [Symbol.asyncIterator]: () => ({
        next: () => it.next()
      })
    };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/signals.js
  function createLinkedAbortController(...signals) {
    const controller = new AbortController();
    const sa = signals.filter((s2) => s2 !== void 0).concat(controller.signal);
    for (const signal of sa) {
      if (signal.aborted) {
        onAbort.apply(signal);
        break;
      }
      signal.addEventListener("abort", onAbort);
    }
    function onAbort() {
      if (!controller.signal.aborted) {
        controller.abort(getAbortSignalReason(this));
      }
      for (const signal of sa) {
        signal.removeEventListener("abort", onAbort);
      }
    }
    return controller;
  }
  function createDeadlineSignal(timeoutMs) {
    const controller = new AbortController();
    const listener = () => {
      controller.abort(new ConnectError("the operation timed out", Code.DeadlineExceeded));
    };
    let timeoutId;
    if (timeoutMs !== void 0) {
      if (timeoutMs <= 0)
        listener();
      else
        timeoutId = setTimeout(listener, timeoutMs);
    }
    return {
      signal: controller.signal,
      cleanup: () => clearTimeout(timeoutId)
    };
  }
  function getAbortSignalReason(signal) {
    if (!signal.aborted) {
      return void 0;
    }
    if (signal.reason !== void 0) {
      return signal.reason;
    }
    const e2 = new Error("This operation was aborted");
    e2.name = "AbortError";
    return e2;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/create-method-url.js
  function createMethodUrl(baseUrl, service, method) {
    const s2 = typeof service == "string" ? service : service.typeName;
    const m2 = typeof method == "string" ? method : method.name;
    return baseUrl.toString().replace(/\/?$/, `/${s2}/${m2}`);
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/serialization.js
  function getJsonOptions(options) {
    var _a7;
    const o2 = Object.assign({}, options);
    (_a7 = o2.ignoreUnknownFields) !== null && _a7 !== void 0 ? _a7 : o2.ignoreUnknownFields = true;
    return o2;
  }
  function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {
    const input = useBinaryFormat ? createBinarySerialization(method.I, binaryOptions) : createJsonSerialization(method.I, jsonOptions);
    const output = useBinaryFormat ? createBinarySerialization(method.O, binaryOptions) : createJsonSerialization(method.O, jsonOptions);
    return { parse: output.parse, serialize: input.serialize };
  }
  function createBinarySerialization(messageType, options) {
    return {
      parse(data) {
        try {
          return messageType.fromBinary(data, options);
        } catch (e2) {
          const m2 = e2 instanceof Error ? e2.message : String(e2);
          throw new ConnectError(`parse binary: ${m2}`, Code.InvalidArgument);
        }
      },
      serialize(data) {
        try {
          return data.toBinary(options);
        } catch (e2) {
          const m2 = e2 instanceof Error ? e2.message : String(e2);
          throw new ConnectError(`serialize binary: ${m2}`, Code.Internal);
        }
      }
    };
  }
  function createJsonSerialization(messageType, options) {
    var _a7, _b3;
    const textEncoder = (_a7 = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a7 !== void 0 ? _a7 : new TextEncoder();
    const textDecoder = (_b3 = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b3 !== void 0 ? _b3 : new TextDecoder();
    const o2 = getJsonOptions(options);
    return {
      parse(data) {
        try {
          const json = textDecoder.decode(data);
          return messageType.fromJsonString(json, o2);
        } catch (e2) {
          throw ConnectError.from(e2, Code.InvalidArgument);
        }
      },
      serialize(data) {
        try {
          const json = data.toJsonString(o2);
          return textEncoder.encode(json);
        } catch (e2) {
          throw ConnectError.from(e2, Code.Internal);
        }
      }
    };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/content-type.js
  var contentTypeRegExp = /^application\/(connect\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;
  var contentTypeUnaryProto = "application/proto";
  var contentTypeUnaryJson = "application/json";
  var contentTypeStreamProto = "application/connect+proto";
  var contentTypeStreamJson = "application/connect+json";
  function parseContentType(contentType) {
    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);
    if (!match) {
      return void 0;
    }
    const stream = !!match[1];
    const binary = !!match[3];
    return { stream, binary };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/error-json.js
  function errorFromJson(jsonValue, metadata, fallback2) {
    if (metadata) {
      new Headers(metadata).forEach((value, key) => fallback2.metadata.append(key, value));
    }
    if (typeof jsonValue !== "object" || jsonValue == null || Array.isArray(jsonValue) || !("code" in jsonValue) || typeof jsonValue.code !== "string") {
      throw fallback2;
    }
    const code = codeFromString(jsonValue.code);
    if (code === void 0) {
      throw fallback2;
    }
    const message = jsonValue.message;
    if (message != null && typeof message !== "string") {
      throw fallback2;
    }
    const error = new ConnectError(message !== null && message !== void 0 ? message : "", code, metadata);
    if ("details" in jsonValue && Array.isArray(jsonValue.details)) {
      for (const detail of jsonValue.details) {
        if (detail === null || typeof detail != "object" || Array.isArray(detail) || typeof detail.type != "string" || typeof detail.value != "string" || "debug" in detail && typeof detail.debug != "object") {
          throw fallback2;
        }
        try {
          error.details.push({
            type: detail.type,
            value: protoBase64.dec(detail.value),
            debug: detail.debug
          });
        } catch (e2) {
          throw fallback2;
        }
      }
    }
    return error;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/end-stream.js
  var endStreamFlag = 2;
  function endStreamFromJson(data) {
    const parseErr = new ConnectError("invalid end stream", Code.InvalidArgument);
    let jsonValue;
    try {
      jsonValue = JSON.parse(typeof data == "string" ? data : new TextDecoder().decode(data));
    } catch (e2) {
      throw parseErr;
    }
    if (typeof jsonValue != "object" || jsonValue == null || Array.isArray(jsonValue)) {
      throw parseErr;
    }
    const metadata = new Headers();
    if ("metadata" in jsonValue) {
      if (typeof jsonValue.metadata != "object" || jsonValue.metadata == null || Array.isArray(jsonValue.metadata)) {
        throw parseErr;
      }
      for (const [key, values2] of Object.entries(jsonValue.metadata)) {
        if (!Array.isArray(values2) || values2.some((value) => typeof value != "string")) {
          throw parseErr;
        }
        for (const value of values2) {
          metadata.append(key, value);
        }
      }
    }
    const error = "error" in jsonValue ? errorFromJson(jsonValue.error, metadata, parseErr) : void 0;
    return { metadata, error };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/headers.js
  var headerContentType = "Content-Type";
  var headerUnaryContentLength = "Content-Length";
  var headerUnaryEncoding = "Content-Encoding";
  var headerUnaryAcceptEncoding = "Accept-Encoding";
  var headerTimeout = "Connect-Timeout-Ms";
  var headerProtocolVersion = "Connect-Protocol-Version";

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/http-status.js
  function codeFromHttpStatus(httpStatus) {
    switch (httpStatus) {
      case 400:
        return Code.InvalidArgument;
      case 401:
        return Code.Unauthenticated;
      case 403:
        return Code.PermissionDenied;
      case 404:
        return Code.Unimplemented;
      case 408:
        return Code.DeadlineExceeded;
      case 409:
        return Code.Aborted;
      case 412:
        return Code.FailedPrecondition;
      case 413:
        return Code.ResourceExhausted;
      case 415:
        return Code.Internal;
      case 429:
        return Code.Unavailable;
      case 431:
        return Code.ResourceExhausted;
      case 502:
        return Code.Unavailable;
      case 503:
        return Code.Unavailable;
      case 504:
        return Code.Unavailable;
      default:
        return Code.Unknown;
    }
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/trailer-mux.js
  function trailerDemux(header) {
    const h3 = new Headers(), t2 = new Headers();
    header.forEach((value, key) => {
      if (key.toLowerCase().startsWith("trailer-")) {
        t2.set(key.substring(8), value);
      } else {
        h3.set(key, value);
      }
    });
    return [h3, t2];
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/version.js
  var protocolVersion = "1";

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/request-header.js
  function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders) {
    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});
    if (timeoutMs !== void 0) {
      result.set(headerTimeout, `${timeoutMs}`);
    }
    result.set(headerContentType, methodKind == MethodKind.Unary ? useBinaryFormat ? contentTypeUnaryProto : contentTypeUnaryJson : useBinaryFormat ? contentTypeStreamProto : contentTypeStreamJson);
    result.set(headerProtocolVersion, protocolVersion);
    return result;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/validate-response.js
  function validateResponse(methodKind, status, headers) {
    const mimeType = headers.get("Content-Type");
    const parsedType = parseContentType(mimeType);
    if (status !== 200) {
      const errorFromStatus = new ConnectError(`HTTP ${status}`, codeFromHttpStatus(status), headers);
      if (methodKind == MethodKind.Unary && parsedType && !parsedType.binary) {
        return { isUnaryError: true, unaryError: errorFromStatus };
      }
      throw errorFromStatus;
    }
    return { isUnaryError: false };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/get-request.js
  var contentTypePrefix = "application/";
  function encodeMessageForUrl(message, useBase64) {
    if (useBase64) {
      return protoBase64.enc(message).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
    } else {
      return encodeURIComponent(new TextDecoder().decode(message));
    }
  }
  function transformConnectPostToGetRequest(request, message, useBase64) {
    let query = `?connect=v${protocolVersion}`;
    const contentType = request.header.get(headerContentType);
    if ((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(contentTypePrefix)) === 0) {
      query += "&encoding=" + encodeURIComponent(contentType.slice(contentTypePrefix.length));
    }
    const compression = request.header.get(headerUnaryEncoding);
    if (compression !== null && compression !== "identity") {
      query += "&compression=" + encodeURIComponent(compression);
      useBase64 = true;
    }
    if (useBase64) {
      query += "&base64=1";
    }
    query += "&message=" + encodeMessageForUrl(message, useBase64);
    const url = request.url + query;
    const header = new Headers(request.header);
    header.delete(headerProtocolVersion);
    header.delete(headerContentType);
    header.delete(headerUnaryContentLength);
    header.delete(headerUnaryEncoding);
    header.delete(headerUnaryAcceptEncoding);
    return Object.assign(Object.assign({}, request), {
      init: Object.assign(Object.assign({}, request.init), { method: "GET" }),
      url,
      header
    });
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/run-call.js
  function runUnaryCall(opt) {
    const next = applyInterceptors(opt.next, opt.interceptors);
    const [signal, abort, done] = setupSignal(opt);
    const req = Object.assign(Object.assign({}, opt.req), { message: normalize2(opt.req.method.I, opt.req.message), signal });
    return next(req).then((res) => {
      done();
      return res;
    }, abort);
  }
  function runStreamingCall(opt) {
    const next = applyInterceptors(opt.next, opt.interceptors);
    const [signal, abort, done] = setupSignal(opt);
    const req = Object.assign(Object.assign({}, opt.req), { message: normalizeIterable(opt.req.method.I, opt.req.message), signal });
    let doneCalled = false;
    signal.addEventListener("abort", function() {
      var _a7, _b3;
      const it = opt.req.message[Symbol.asyncIterator]();
      if (!doneCalled) {
        (_a7 = it.throw) === null || _a7 === void 0 ? void 0 : _a7.call(it, this.reason).catch(() => {
        });
      }
      (_b3 = it.return) === null || _b3 === void 0 ? void 0 : _b3.call(it).catch(() => {
      });
    });
    return next(req).then((res) => {
      return Object.assign(Object.assign({}, res), { message: {
        [Symbol.asyncIterator]() {
          const it = res.message[Symbol.asyncIterator]();
          return {
            next() {
              return it.next().then((r) => {
                if (r.done == true) {
                  doneCalled = true;
                  done();
                }
                return r;
              }, abort);
            }
            // We deliberately omit throw/return.
          };
        }
      } });
    }, abort);
  }
  function setupSignal(opt) {
    const { signal, cleanup } = createDeadlineSignal(opt.timeoutMs);
    const controller = createLinkedAbortController(opt.signal, signal);
    return [
      controller.signal,
      function abort(reason) {
        const e2 = ConnectError.from(signal.aborted ? getAbortSignalReason(signal) : reason);
        controller.abort(e2);
        cleanup();
        return Promise.reject(e2);
      },
      function done() {
        cleanup();
        controller.abort();
      }
    ];
  }
  function applyInterceptors(next, interceptors) {
    var _a7;
    return (_a7 = interceptors === null || interceptors === void 0 ? void 0 : interceptors.concat().reverse().reduce(
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      (n3, i2) => i2(n3),
      next
    )) !== null && _a7 !== void 0 ? _a7 : next;
  }
  function normalize2(type, message) {
    return message instanceof type ? message : new type(message);
  }
  function normalizeIterable(messageType, input) {
    function transform(result) {
      if (result.done === true) {
        return result;
      }
      return {
        done: result.done,
        value: normalize2(messageType, result.value)
      };
    }
    return {
      [Symbol.asyncIterator]() {
        const it = input[Symbol.asyncIterator]();
        const res = {
          next: () => it.next().then(transform)
        };
        if (it.throw !== void 0) {
          res.throw = (e2) => it.throw(e2).then(transform);
        }
        if (it.return !== void 0) {
          res.return = (v2) => it.return(v2).then(transform);
        }
        return res;
      }
    };
  }

  // ../node_modules/@bufbuild/connect-web/dist/esm/assert-fetch-api.js
  function assertFetchApi() {
    try {
      new Headers();
    } catch (_2) {
      throw new Error("connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.");
    }
  }

  // ../node_modules/@bufbuild/connect-web/dist/esm/connect-transport.js
  var __await3 = function(v2) {
    return this instanceof __await3 ? (this.v = v2, this) : new __await3(v2);
  };
  var __asyncGenerator3 = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i2, q = [];
    return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2;
    function verb(n3) {
      if (g2[n3])
        i2[n3] = function(v2) {
          return new Promise(function(a2, b3) {
            q.push([n3, v2, a2, b3]) > 1 || resume(n3, v2);
          });
        };
    }
    function resume(n3, v2) {
      try {
        step(g2[n3](v2));
      } catch (e2) {
        settle(q[0][3], e2);
      }
    }
    function step(r) {
      r.value instanceof __await3 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f3, v2) {
      if (f3(v2), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  };
  function createConnectTransport(options) {
    var _a7;
    assertFetchApi();
    const useBinaryFormat = (_a7 = options.useBinaryFormat) !== null && _a7 !== void 0 ? _a7 : false;
    return {
      async unary(service, method, signal, timeoutMs, header, message) {
        var _a8;
        const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
        return await runUnaryCall({
          interceptors: options.interceptors,
          signal,
          timeoutMs,
          req: {
            stream: false,
            service,
            method,
            url: createMethodUrl(options.baseUrl, service, method),
            init: {
              method: "POST",
              credentials: (_a8 = options.credentials) !== null && _a8 !== void 0 ? _a8 : "same-origin",
              redirect: "error",
              mode: "cors"
            },
            header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),
            message
          },
          next: async (req) => {
            var _a9;
            const useGet = options.useHttpGet === true && method.idempotency === MethodIdempotency.NoSideEffects;
            let body = null;
            if (useGet) {
              req = transformConnectPostToGetRequest(req, serialize(req.message), useBinaryFormat);
            } else {
              body = serialize(req.message);
            }
            const fetch = (_a9 = options.fetch) !== null && _a9 !== void 0 ? _a9 : globalThis.fetch;
            const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body }));
            const { isUnaryError, unaryError } = validateResponse(method.kind, response.status, response.headers);
            if (isUnaryError) {
              throw errorFromJson(await response.json(), appendHeaders(...trailerDemux(response.headers)), unaryError);
            }
            const [demuxedHeader, demuxedTrailer] = trailerDemux(response.headers);
            return {
              stream: false,
              service,
              method,
              header: demuxedHeader,
              message: useBinaryFormat ? parse(new Uint8Array(await response.arrayBuffer())) : method.O.fromJson(await response.json(), getJsonOptions(options.jsonOptions)),
              trailer: demuxedTrailer
            };
          }
        });
      },
      async stream(service, method, signal, timeoutMs, header, input) {
        var _a8;
        const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
        function parseResponseBody(body, trailerTarget) {
          return __asyncGenerator3(this, arguments, function* parseResponseBody_1() {
            const reader = createEnvelopeReadableStream(body).getReader();
            let endStreamReceived = false;
            for (; ; ) {
              const result = yield __await3(reader.read());
              if (result.done) {
                break;
              }
              const { flags, data } = result.value;
              if ((flags & endStreamFlag) === endStreamFlag) {
                endStreamReceived = true;
                const endStream = endStreamFromJson(data);
                if (endStream.error) {
                  throw endStream.error;
                }
                endStream.metadata.forEach((value, key) => trailerTarget.set(key, value));
                continue;
              }
              yield yield __await3(parse(data));
            }
            if (!endStreamReceived) {
              throw "missing EndStreamResponse";
            }
          });
        }
        async function createRequestBody(input2) {
          if (method.kind != MethodKind.ServerStreaming) {
            throw "The fetch API does not support streaming request bodies";
          }
          const r = await input2[Symbol.asyncIterator]().next();
          if (r.done == true) {
            throw "missing request message";
          }
          return encodeEnvelope(0, serialize(r.value));
        }
        return await runStreamingCall({
          interceptors: options.interceptors,
          timeoutMs,
          signal,
          req: {
            stream: true,
            service,
            method,
            url: createMethodUrl(options.baseUrl, service, method),
            init: {
              method: "POST",
              credentials: (_a8 = options.credentials) !== null && _a8 !== void 0 ? _a8 : "same-origin",
              redirect: "error",
              mode: "cors"
            },
            header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),
            message: input
          },
          next: async (req) => {
            var _a9;
            const fetch = (_a9 = options.fetch) !== null && _a9 !== void 0 ? _a9 : globalThis.fetch;
            const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));
            validateResponse(method.kind, fRes.status, fRes.headers);
            if (fRes.body === null) {
              throw "missing response body";
            }
            const trailer = new Headers();
            const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, trailer) });
            return res;
          }
        });
      }
    };
  }

  // src/rpc/content/content_pb.ts
  var TagRequest = class _TagRequest extends Message {
    /**
     * @generated from field: string group_id = 1;
     */
    groupId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.TagRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "group_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _TagRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _TagRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _TagRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_TagRequest, a2, b3);
    }
  };
  var VoteRequest = class _VoteRequest extends Message {
    /**
     * @generated from field: string content_id = 1;
     */
    contentId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.VoteRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "content_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _VoteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _VoteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _VoteRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_VoteRequest, a2, b3);
    }
  };
  var VoteResponse = class _VoteResponse extends Message {
    /**
     * @generated from field: uint32 votes = 1;
     */
    votes = 0;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.VoteResponse";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "votes",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _VoteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _VoteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _VoteResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_VoteResponse, a2, b3);
    }
  };
  var Tags = class _Tags extends Message {
    /**
     * @generated from field: repeated content.Tag tags = 1;
     */
    tags = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Tags";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "tags", kind: "message", T: Tag, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Tags().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Tags().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Tags().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Tags, a2, b3);
    }
  };
  var Tag = class _Tag extends Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from field: repeated content.Tag sub_tags = 2;
     */
    subTags = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Tag";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 2, name: "sub_tags", kind: "message", T: _Tag, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Tag().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Tag().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Tag().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Tag, a2, b3);
    }
  };
  var ContentIDs = class _ContentIDs extends Message {
    /**
     * @generated from field: repeated string content_ids = 1;
     */
    contentIds = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.ContentIDs";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "content_ids", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _ContentIDs().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ContentIDs().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ContentIDs().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ContentIDs, a2, b3);
    }
  };
  var Contents = class _Contents extends Message {
    /**
     * @generated from field: content.Content content = 1;
     */
    content;
    /**
     * @generated from field: repeated content.Content related = 2;
     */
    related = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Contents";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "content", kind: "message", T: Content },
      { no: 2, name: "related", kind: "message", T: Content, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Contents().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Contents().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Contents().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Contents, a2, b3);
    }
  };
  var Query = class _Query extends Message {
    /**
     * @generated from field: string query = 1;
     */
    query = "";
    /**
     * @generated from field: uint32 page = 2;
     */
    page = 0;
    /**
     * @generated from field: string contentID = 3;
     */
    contentID = "";
    /**
     * @generated from field: string groupID = 4;
     */
    groupID = "";
    /**
     * @generated from field: repeated string tags = 5;
     */
    tags = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Query";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "query",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "page",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 3,
        name: "contentID",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 4,
        name: "groupID",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 5, name: "tags", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Query().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Query().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Query().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Query, a2, b3);
    }
  };
  var Results = class _Results extends Message {
    /**
     * @generated from field: repeated content.StoredContent storedContent = 1;
     */
    storedContent = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Results";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "storedContent", kind: "message", T: StoredContent, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Results().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Results().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Results().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Results, a2, b3);
    }
  };
  var StoredContent = class _StoredContent extends Message {
    /**
     * @generated from field: content.Content content = 1;
     */
    content;
    /**
     * @generated from field: string id = 2;
     */
    id = "";
    /**
     * @generated from field: repeated content.Content related = 3;
     */
    related = [];
    /**
     * @generated from field: string title = 4;
     */
    title = "";
    /**
     * @generated from field: string description = 5;
     */
    description = "";
    /**
     * @generated from field: string image = 6;
     */
    image = "";
    /**
     * @generated from field: string url = 7;
     */
    url = "";
    /**
     * @generated from field: int32 votes = 8;
     */
    votes = 0;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.StoredContent";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "content", kind: "message", T: Content },
      {
        no: 2,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "related", kind: "message", T: Content, repeated: true },
      {
        no: 4,
        name: "title",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 5,
        name: "description",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 6,
        name: "image",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 7,
        name: "url",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 8,
        name: "votes",
        kind: "scalar",
        T: 5
        /* ScalarType.INT32 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _StoredContent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _StoredContent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _StoredContent().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_StoredContent, a2, b3);
    }
  };
  var Edge = class _Edge extends Message {
    /**
     * @generated from field: string from = 1;
     */
    from = "";
    /**
     * @generated from field: string to = 2;
     */
    to = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Edge";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "from",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "to",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Edge().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Edge().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Edge().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Edge, a2, b3);
    }
  };
  var Content = class _Content extends Message {
    /**
     * @generated from field: repeated string tags = 1;
     */
    tags = [];
    /**
     * @generated from field: string created_at = 2;
     */
    createdAt = "";
    /**
     * @generated from field: string uri = 3;
     */
    uri = "";
    /**
     * @generated from oneof content.Content.type
     */
    type = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Content";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "tags", kind: "scalar", T: 9, repeated: true },
      {
        no: 2,
        name: "created_at",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 3,
        name: "uri",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 6, name: "data", kind: "message", T: Data, oneof: "type" },
      { no: 7, name: "normalized", kind: "message", T: Normalized, oneof: "type" },
      { no: 8, name: "transformed", kind: "message", T: Transformed, oneof: "type" }
    ]);
    static fromBinary(bytes, options) {
      return new _Content().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Content().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Content().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Content, a2, b3);
    }
  };
  var GitRepo = class _GitRepo extends Message {
    /**
     * @generated from field: string url = 1;
     */
    url = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.GitRepo";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "url",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GitRepo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GitRepo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GitRepo().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GitRepo, a2, b3);
    }
  };
  var Data = class _Data extends Message {
    /**
     * @generated from oneof content.Data.type
     */
    type = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Data";
    static fields = proto3.util.newFieldList(() => [
      { no: 4, name: "text", kind: "message", T: Text, oneof: "type" },
      { no: 5, name: "file", kind: "message", T: File, oneof: "type" },
      { no: 6, name: "url", kind: "message", T: URL2, oneof: "type" }
    ]);
    static fromBinary(bytes, options) {
      return new _Data().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Data().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Data().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Data, a2, b3);
    }
  };
  var Normalized = class _Normalized extends Message {
    /**
     * @generated from oneof content.Normalized.type
     */
    type = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Normalized";
    static fields = proto3.util.newFieldList(() => [
      { no: 3, name: "article", kind: "message", T: Article, oneof: "type" },
      { no: 4, name: "html", kind: "message", T: HTML, oneof: "type" },
      { no: 6, name: "transcript", kind: "message", T: Transcript, oneof: "type" },
      { no: 7, name: "readme", kind: "message", T: ReadMe, oneof: "type" }
    ]);
    static fromBinary(bytes, options) {
      return new _Normalized().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Normalized().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Normalized().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Normalized, a2, b3);
    }
  };
  var Transformed = class _Transformed extends Message {
    /**
     * @generated from oneof content.Transformed.type
     */
    type = { case: void 0 };
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Transformed";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "summary", kind: "message", T: Summary, oneof: "type" },
      { no: 2, name: "categories", kind: "message", T: Categories, oneof: "type" }
    ]);
    static fromBinary(bytes, options) {
      return new _Transformed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Transformed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Transformed().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Transformed, a2, b3);
    }
  };
  var Article = class _Article extends Message {
    /**
     * @generated from field: string title = 1;
     */
    title = "";
    /**
     * @generated from field: string author = 2;
     */
    author = "";
    /**
     * @generated from field: int32 length = 3;
     */
    length = 0;
    /**
     * @generated from field: string excerpt = 4;
     */
    excerpt = "";
    /**
     * @generated from field: string site_name = 5;
     */
    siteName = "";
    /**
     * @generated from field: string image = 6;
     */
    image = "";
    /**
     * @generated from field: string favicon = 7;
     */
    favicon = "";
    /**
     * @generated from field: string text = 8;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Article";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "title",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "author",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 3,
        name: "length",
        kind: "scalar",
        T: 5
        /* ScalarType.INT32 */
      },
      {
        no: 4,
        name: "excerpt",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 5,
        name: "site_name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 6,
        name: "image",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 7,
        name: "favicon",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 8,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Article().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Article().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Article().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Article, a2, b3);
    }
  };
  var HTML = class _HTML extends Message {
    /**
     * @generated from field: string html = 1;
     */
    html = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.HTML";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "html",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _HTML().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _HTML().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _HTML().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_HTML, a2, b3);
    }
  };
  var ReadMe = class _ReadMe extends Message {
    /**
     * @generated from field: string data = 1;
     */
    data = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.ReadMe";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "data",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _ReadMe().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ReadMe().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ReadMe().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ReadMe, a2, b3);
    }
  };
  var Summary = class _Summary extends Message {
    /**
     * @generated from field: string summary = 1;
     */
    summary = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Summary";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "summary",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Summary().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Summary().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Summary().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Summary, a2, b3);
    }
  };
  var Categories = class _Categories extends Message {
    /**
     * @generated from field: repeated string categories = 1;
     */
    categories = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Categories";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "categories", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Categories().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Categories().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Categories().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Categories, a2, b3);
    }
  };
  var File = class _File extends Message {
    /**
     * @generated from field: string file = 1;
     */
    file = "";
    /**
     * @generated from field: bytes data = 2;
     */
    data = new Uint8Array(0);
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.File";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "file",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "data",
        kind: "scalar",
        T: 12
        /* ScalarType.BYTES */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _File().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _File().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _File().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_File, a2, b3);
    }
  };
  var Text = class _Text extends Message {
    /**
     * @generated from field: string data = 1;
     */
    data = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Text";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "data",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Text().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Text().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Text().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Text, a2, b3);
    }
  };
  var URL2 = class _URL extends Message {
    /**
     * @generated from field: string url = 1;
     */
    url = "";
    /**
     * @generated from field: bool crawl = 2;
     */
    crawl = false;
    /**
     * @generated from field: string title = 3;
     */
    title = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.URL";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "url",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "crawl",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 3,
        name: "title",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _URL().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _URL().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _URL().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_URL, a2, b3);
    }
  };
  var Token = class _Token extends Message {
    /**
     * @generated from field: uint32 id = 1;
     */
    id = 0;
    /**
     * @generated from field: uint64 start_time = 2;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 3;
     */
    endTime = protoInt64.zero;
    /**
     * @generated from field: string text = 4;
     */
    text = "";
    /**
     * @generated from field: string p = 5;
     */
    p = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Token";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 2,
        name: "start_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 3,
        name: "end_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 4,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 5,
        name: "p",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Token().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Token().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Token().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Token, a2, b3);
    }
  };
  var Segment = class _Segment extends Message {
    /**
     * @generated from field: uint32 num = 1;
     */
    num = 0;
    /**
     * @generated from field: repeated content.Token tokens = 2;
     */
    tokens = [];
    /**
     * @generated from field: string text = 3;
     */
    text = "";
    /**
     * @generated from field: uint64 start_time = 4;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 5;
     */
    endTime = protoInt64.zero;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Segment";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "num",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      { no: 2, name: "tokens", kind: "message", T: Token, repeated: true },
      {
        no: 3,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 4,
        name: "start_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 5,
        name: "end_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Segment().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Segment().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Segment().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Segment, a2, b3);
    }
  };
  var Transcript = class _Transcript extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated content.Segment segments = 3;
     */
    segments = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "content.Transcript";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "segments", kind: "message", T: Segment, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Transcript().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Transcript().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Transcript().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Transcript, a2, b3);
    }
  };

  // src/rpc/protoflow_pb.ts
  var AnalyzeConversationRequest = class _AnalyzeConversationRequest extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.AnalyzeConversationRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _AnalyzeConversationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeConversationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeConversationRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_AnalyzeConversationRequest, a2, b3);
    }
  };
  var GenerateImagesRequest = class _GenerateImagesRequest extends Message {
    /**
     * @generated from field: string prompt = 1;
     */
    prompt = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GenerateImagesRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "prompt",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GenerateImagesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GenerateImagesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GenerateImagesRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GenerateImagesRequest, a2, b3);
    }
  };
  var GenerateImagesResponse = class _GenerateImagesResponse extends Message {
    /**
     * @generated from field: repeated string images = 1;
     */
    images = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GenerateImagesResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "images", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _GenerateImagesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GenerateImagesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GenerateImagesResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GenerateImagesResponse, a2, b3);
    }
  };
  var DeleteSessionRequest = class _DeleteSessionRequest extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.DeleteSessionRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _DeleteSessionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _DeleteSessionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _DeleteSessionRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_DeleteSessionRequest, a2, b3);
    }
  };
  var Prompt = class _Prompt extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string text = 2;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Prompt";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Prompt().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Prompt().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Prompt().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Prompt, a2, b3);
    }
  };
  var GetPromptsRequest = class _GetPromptsRequest extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetPromptsRequest";
    static fields = proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
      return new _GetPromptsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetPromptsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetPromptsRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetPromptsRequest, a2, b3);
    }
  };
  var GetPromptsResponse = class _GetPromptsResponse extends Message {
    /**
     * @generated from field: repeated protoflow.Prompt prompts = 1;
     */
    prompts = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetPromptsResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "prompts", kind: "message", T: Prompt, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _GetPromptsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetPromptsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetPromptsResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetPromptsResponse, a2, b3);
    }
  };
  var InferRequest = class _InferRequest extends Message {
    /**
     * @generated from field: string prompt = 1;
     */
    prompt = "";
    /**
     * @generated from field: repeated string text = 2;
     */
    text = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.InferRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "prompt",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 2, name: "text", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _InferRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _InferRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _InferRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_InferRequest, a2, b3);
    }
  };
  var InferResponse = class _InferResponse extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.InferResponse";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _InferResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _InferResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _InferResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_InferResponse, a2, b3);
    }
  };
  var UploadContentRequest = class _UploadContentRequest extends Message {
    /**
     * @generated from field: content.Content content = 1;
     */
    content;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.UploadContentRequest";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "content", kind: "message", T: Content }
    ]);
    static fromBinary(bytes, options) {
      return new _UploadContentRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _UploadContentRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _UploadContentRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_UploadContentRequest, a2, b3);
    }
  };
  var UploadContentResponse = class _UploadContentResponse extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.UploadContentResponse";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _UploadContentResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _UploadContentResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _UploadContentResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_UploadContentResponse, a2, b3);
    }
  };
  var GetSessionRequest = class _GetSessionRequest extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetSessionRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GetSessionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetSessionRequest, a2, b3);
    }
  };
  var GetSessionResponse = class _GetSessionResponse extends Message {
    /**
     * @generated from field: protoflow.Session session = 1;
     */
    session;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetSessionResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "session", kind: "message", T: Session }
    ]);
    static fromBinary(bytes, options) {
      return new _GetSessionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetSessionResponse, a2, b3);
    }
  };
  var GetSessionsRequest = class _GetSessionsRequest extends Message {
    /**
     * @generated from field: uint64 page = 1;
     */
    page = protoInt64.zero;
    /**
     * @generated from field: uint64 limit = 2;
     */
    limit = protoInt64.zero;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetSessionsRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "page",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 2,
        name: "limit",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GetSessionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetSessionsRequest, a2, b3);
    }
  };
  var GetSessionsResponse = class _GetSessionsResponse extends Message {
    /**
     * @generated from field: repeated protoflow.Session sessions = 1;
     */
    sessions = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.GetSessionsResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "sessions", kind: "message", T: Session, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _GetSessionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetSessionsResponse, a2, b3);
    }
  };
  var Token2 = class _Token extends Message {
    /**
     * @generated from field: uint32 id = 1;
     */
    id = 0;
    /**
     * @generated from field: uint64 start_time = 2;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 3;
     */
    endTime = protoInt64.zero;
    /**
     * @generated from field: string text = 4;
     */
    text = "";
    /**
     * @generated from field: string p = 5;
     */
    p = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Token";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 2,
        name: "start_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 3,
        name: "end_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 4,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 5,
        name: "p",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Token().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Token().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Token().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Token, a2, b3);
    }
  };
  var Segment2 = class _Segment extends Message {
    /**
     * @generated from field: uint32 num = 1;
     */
    num = 0;
    /**
     * @generated from field: repeated protoflow.Token tokens = 2;
     */
    tokens = [];
    /**
     * @generated from field: string text = 3;
     */
    text = "";
    /**
     * @generated from field: uint64 start_time = 4;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 5;
     */
    endTime = protoInt64.zero;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Segment";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "num",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      { no: 2, name: "tokens", kind: "message", T: Token2, repeated: true },
      {
        no: 3,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 4,
        name: "start_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      },
      {
        no: 5,
        name: "end_time",
        kind: "scalar",
        T: 4
        /* ScalarType.UINT64 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Segment().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Segment().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Segment().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Segment, a2, b3);
    }
  };
  var Session = class _Session extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated protoflow.Segment segments = 3;
     */
    segments = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Session";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "segments", kind: "message", T: Segment2, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Session().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Session().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Session().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Session, a2, b3);
    }
  };
  var TranscriptionRequest = class _TranscriptionRequest extends Message {
    /**
     * @generated from field: string file_path = 14;
     */
    filePath = "";
    /**
     * Path to the model file
     *
     * @generated from field: string model = 1;
     */
    model = "";
    /**
     * Spoken language
     *
     * @generated from field: string language = 2;
     */
    language = "";
    /**
     * Translate from source language to English
     *
     * @generated from field: bool translate = 3;
     */
    translate = false;
    /**
     * Time offset in nanoseconds to match Go's time.Duration
     *
     * @generated from field: int64 offset = 4;
     */
    offset = protoInt64.zero;
    /**
     * Duration of audio to process in nanoseconds
     *
     * @generated from field: int64 duration = 5;
     */
    duration = protoInt64.zero;
    /**
     * Number of threads to use
     *
     * @generated from field: uint32 threads = 6;
     */
    threads = 0;
    /**
     * Enable speedup
     *
     * @generated from field: bool speedup = 7;
     */
    speedup = false;
    /**
     * Maximum segment length in characters
     *
     * @generated from field: uint32 max_len = 8;
     */
    maxLen = 0;
    /**
     * Maximum tokens per segment
     *
     * @generated from field: uint32 max_tokens = 9;
     */
    maxTokens = 0;
    /**
     * Maximum segment score
     *
     * @generated from field: double word_threshold = 10;
     */
    wordThreshold = 0;
    /**
     * Display tokens
     *
     * @generated from field: bool tokens = 11;
     */
    tokens = false;
    /**
     * Colorize tokens
     *
     * @generated from field: bool colorize = 12;
     */
    colorize = false;
    /**
     * Output format (srt, none or leave as empty string)
     *
     * @generated from field: string out = 13;
     */
    out = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.TranscriptionRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 14,
        name: "file_path",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 1,
        name: "model",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "language",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 3,
        name: "translate",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 4,
        name: "offset",
        kind: "scalar",
        T: 3
        /* ScalarType.INT64 */
      },
      {
        no: 5,
        name: "duration",
        kind: "scalar",
        T: 3
        /* ScalarType.INT64 */
      },
      {
        no: 6,
        name: "threads",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 7,
        name: "speedup",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 8,
        name: "max_len",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 9,
        name: "max_tokens",
        kind: "scalar",
        T: 13
        /* ScalarType.UINT32 */
      },
      {
        no: 10,
        name: "word_threshold",
        kind: "scalar",
        T: 1
        /* ScalarType.DOUBLE */
      },
      {
        no: 11,
        name: "tokens",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 12,
        name: "colorize",
        kind: "scalar",
        T: 8
        /* ScalarType.BOOL */
      },
      {
        no: 13,
        name: "out",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _TranscriptionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _TranscriptionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _TranscriptionRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_TranscriptionRequest, a2, b3);
    }
  };
  var RegisterFlags = class _RegisterFlags extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.RegisterFlags";
    static fields = proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
      return new _RegisterFlags().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _RegisterFlags().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _RegisterFlags().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_RegisterFlags, a2, b3);
    }
  };
  var OCRText = class _OCRText extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.OCRText";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _OCRText().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _OCRText().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _OCRText().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_OCRText, a2, b3);
    }
  };
  var Image2 = class _Image extends Message {
    /**
     * @generated from field: bytes image = 1;
     */
    image = new Uint8Array(0);
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.Image";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "image",
        kind: "scalar",
        T: 12
        /* ScalarType.BYTES */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _Image().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Image().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Image().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Image, a2, b3);
    }
  };
  var ConvertFileRequest = class _ConvertFileRequest extends Message {
    /**
     * @generated from field: string from = 1;
     */
    from = "";
    /**
     * @generated from field: string to = 2;
     */
    to = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.ConvertFileRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "from",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "to",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _ConvertFileRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ConvertFileRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ConvertFileRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ConvertFileRequest, a2, b3);
    }
  };
  var ChatRequest = class _ChatRequest extends Message {
    /**
     * @generated from field: int32 capture_device = 1;
     */
    captureDevice = 0;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.ChatRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "capture_device",
        kind: "scalar",
        T: 5
        /* ScalarType.INT32 */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _ChatRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ChatRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ChatRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ChatRequest, a2, b3);
    }
  };
  var ChatResponse = class _ChatResponse extends Message {
    /**
     * @generated from field: protoflow.Segment segment = 1;
     */
    segment;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.ChatResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "segment", kind: "message", T: Segment2 }
    ]);
    static fromBinary(bytes, options) {
      return new _ChatResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ChatResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ChatResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ChatResponse, a2, b3);
    }
  };
  var YouTubeVideo = class _YouTubeVideo extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string file = 2;
     */
    file = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.YouTubeVideo";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "file",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _YouTubeVideo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _YouTubeVideo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _YouTubeVideo().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_YouTubeVideo, a2, b3);
    }
  };
  var FilePath = class _FilePath extends Message {
    /**
     * @generated from field: string file = 1;
     */
    file = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.FilePath";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "file",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _FilePath().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _FilePath().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _FilePath().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_FilePath, a2, b3);
    }
  };
  var YouTubeVideoResponse = class _YouTubeVideoResponse extends Message {
    /**
     * @generated from field: string title = 1;
     */
    title = "";
    /**
     * @generated from field: protoflow.FilePath file_path = 2;
     */
    filePath;
    /**
     * @generated from field: repeated protoflow.Segment transcript = 3;
     */
    transcript = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "protoflow.YouTubeVideoResponse";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "title",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 2, name: "file_path", kind: "message", T: FilePath },
      { no: 3, name: "transcript", kind: "message", T: Segment2, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _YouTubeVideoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _YouTubeVideoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _YouTubeVideoResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_YouTubeVideoResponse, a2, b3);
    }
  };

  // src/rpc/ai_pb.ts
  var AnalyzeConversationResponse = class _AnalyzeConversationResponse extends Message {
    /**
     * Phone numbers of the participants
     *
     * @generated from field: repeated string phone_numbers = 1;
     */
    phoneNumbers = [];
    /**
     * The summary of the conversation
     *
     * @generated from field: string summary = 2;
     */
    summary = "";
    /**
     * Based on the content of the conversation, the system will generate a list of questions
     *
     * @generated from field: repeated string questions = 3;
     */
    questions = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "ai.AnalyzeConversationResponse";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "phone_numbers", kind: "scalar", T: 9, repeated: true },
      {
        no: 2,
        name: "summary",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "questions", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _AnalyzeConversationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeConversationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeConversationResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_AnalyzeConversationResponse, a2, b3);
    }
  };
  var AnalyzeContent = class _AnalyzeContent extends Message {
    /**
     * Potential categories for the content in the form: category/subcategory/other-category. The category is all lowercase and spaces are replaced with dashes.
     *
     * @generated from field: repeated string categories = 1;
     */
    categories = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "ai.AnalyzeContent";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "categories", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _AnalyzeContent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeContent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeContent().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_AnalyzeContent, a2, b3);
    }
  };

  // src/rpc/protoflow_connect.ts
  var ProtoflowService = {
    typeName: "protoflow.ProtoflowService",
    methods: {
      /**
       * @generated from rpc protoflow.ProtoflowService.DownloadYouTubeVideo
       */
      downloadYouTubeVideo: {
        name: "DownloadYouTubeVideo",
        I: YouTubeVideo,
        O: YouTubeVideoResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GetSessions
       */
      getSessions: {
        name: "GetSessions",
        I: GetSessionsRequest,
        O: GetSessionsResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GetSession
       */
      getSession: {
        name: "GetSession",
        I: GetSessionRequest,
        O: GetSessionResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.DeleteSession
       */
      deleteSession: {
        name: "DeleteSession",
        I: DeleteSessionRequest,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GetPrompts
       */
      getPrompts: {
        name: "GetPrompts",
        I: GetPromptsRequest,
        O: GetPromptsResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.NewPrompt
       */
      newPrompt: {
        name: "NewPrompt",
        I: Prompt,
        O: Prompt,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.UploadContent
       */
      uploadContent: {
        name: "UploadContent",
        I: UploadContentRequest,
        O: ChatResponse,
        kind: MethodKind.ServerStreaming
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.Infer
       */
      infer: {
        name: "Infer",
        I: InferRequest,
        O: InferResponse,
        kind: MethodKind.ServerStreaming
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.Chat
       */
      chat: {
        name: "Chat",
        I: ChatRequest,
        O: ChatResponse,
        kind: MethodKind.ServerStreaming
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.ConvertFile
       */
      convertFile: {
        name: "ConvertFile",
        I: ConvertFileRequest,
        O: FilePath,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GenerateImages
       */
      generateImages: {
        name: "GenerateImages",
        I: GenerateImagesRequest,
        O: GenerateImagesResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.AnalyzeConversation
       */
      analyzeConversation: {
        name: "AnalyzeConversation",
        I: AnalyzeConversationRequest,
        O: AnalyzeConversationResponse,
        kind: MethodKind.Unary
      }
    }
  };

  // src/rpc/content/content_connect.ts
  var ContentService = {
    typeName: "content.ContentService",
    methods: {
      /**
       * @generated from rpc content.ContentService.Save
       */
      save: {
        name: "Save",
        I: Contents,
        O: ContentIDs,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.Search
       */
      search: {
        name: "Search",
        I: Query,
        O: Results,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.Analyze
       */
      analyze: {
        name: "Analyze",
        I: Content,
        O: Contents,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.Delete
       */
      delete: {
        name: "Delete",
        I: ContentIDs,
        O: ContentIDs,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.GetTags
       */
      getTags: {
        name: "GetTags",
        I: TagRequest,
        O: Tags,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc content.ContentService.Vote
       */
      vote: {
        name: "Vote",
        I: VoteRequest,
        O: VoteResponse,
        kind: MethodKind.Unary
      }
    }
  };

  // src/rpc/user/user_pb.ts
  var GroupInfoRequest = class _GroupInfoRequest extends Message {
    /**
     * @generated from field: string secret = 1;
     */
    secret = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.GroupInfoRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "secret",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GroupInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GroupInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GroupInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GroupInfoRequest, a2, b3);
    }
  };
  var GroupID = class _GroupID extends Message {
    /**
     * @generated from field: string group_id = 1;
     */
    groupId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.GroupID";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "group_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GroupID().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GroupID().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GroupID().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GroupID, a2, b3);
    }
  };
  var ShareRequest = class _ShareRequest extends Message {
    /**
     * @generated from field: string content_id = 1;
     */
    contentId = "";
    /**
     * @generated from field: string group_id = 2;
     */
    groupId = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.ShareRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "content_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "group_id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _ShareRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ShareRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ShareRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ShareRequest, a2, b3);
    }
  };
  var GroupInvite = class _GroupInvite extends Message {
    /**
     * @generated from field: string secret = 1;
     */
    secret = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.GroupInvite";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "secret",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _GroupInvite().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GroupInvite().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GroupInvite().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GroupInvite, a2, b3);
    }
  };
  var Groups = class _Groups extends Message {
    /**
     * @generated from field: repeated user.Group groups = 1;
     */
    groups = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.Groups";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "groups", kind: "message", T: Group, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Groups().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Groups().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Groups().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Groups, a2, b3);
    }
  };
  var AnalyzeConversationRequest2 = class _AnalyzeConversationRequest extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.AnalyzeConversationRequest";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "text",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      }
    ]);
    static fromBinary(bytes, options) {
      return new _AnalyzeConversationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeConversationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeConversationRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_AnalyzeConversationRequest, a2, b3);
    }
  };
  var User = class _User extends Message {
    /**
     * @generated from field: string email = 1;
     */
    email = "";
    /**
     * @generated from field: string password = 2;
     */
    password = "";
    /**
     * @generated from field: user.Config config = 3;
     */
    config;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.User";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "email",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "password",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "config", kind: "message", T: Config }
    ]);
    static fromBinary(bytes, options) {
      return new _User().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _User().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _User().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_User, a2, b3);
    }
  };
  var Group = class _Group extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated string users = 3;
     */
    users = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.Group";
    static fields = proto3.util.newFieldList(() => [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        T: 9
        /* ScalarType.STRING */
      },
      { no: 3, name: "users", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Group().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Group().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Group().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Group, a2, b3);
    }
  };
  var Config = class _Config extends Message {
    /**
     * @generated from field: repeated string domain_whitelist = 1;
     */
    domainWhitelist = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.Config";
    static fields = proto3.util.newFieldList(() => [
      { no: 1, name: "domain_whitelist", kind: "scalar", T: 9, repeated: true }
    ]);
    static fromBinary(bytes, options) {
      return new _Config().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Config().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Config().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Config, a2, b3);
    }
  };
  var LoginResponse = class _LoginResponse extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "user.LoginResponse";
    static fields = proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
      return new _LoginResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _LoginResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _LoginResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_LoginResponse, a2, b3);
    }
  };

  // src/rpc/user/user_connect.ts
  var UserService = {
    typeName: "user.UserService",
    methods: {
      /**
       * @generated from rpc user.UserService.Register
       */
      register: {
        name: "Register",
        I: User,
        O: User,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.Login
       */
      login: {
        name: "Login",
        I: User,
        O: User,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.Logout
       */
      logout: {
        name: "Logout",
        I: Empty,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.UpdateConfig
       */
      updateConfig: {
        name: "UpdateConfig",
        I: Config,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.CreateGroupInvite
       */
      createGroupInvite: {
        name: "CreateGroupInvite",
        I: GroupID,
        O: GroupInvite,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.JoinGroup
       */
      joinGroup: {
        name: "JoinGroup",
        I: GroupInvite,
        O: Group,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.GroupInfo
       */
      groupInfo: {
        name: "GroupInfo",
        I: GroupInfoRequest,
        O: Group,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.CreateGroup
       */
      createGroup: {
        name: "CreateGroup",
        I: Group,
        O: Group,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.GetGroups
       */
      getGroups: {
        name: "GetGroups",
        I: Empty,
        O: Groups,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.DeleteGroup
       */
      deleteGroup: {
        name: "DeleteGroup",
        I: Group,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc user.UserService.Share
       */
      share: {
        name: "Share",
        I: ShareRequest,
        O: Empty,
        kind: MethodKind.Unary
      }
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/subscribable.mjs
  var Subscribable = class {
    constructor() {
      this.listeners = /* @__PURE__ */ new Set();
      this.subscribe = this.subscribe.bind(this);
    }
    subscribe(listener) {
      const identity = {
        listener
      };
      this.listeners.add(identity);
      this.onSubscribe();
      return () => {
        this.listeners.delete(identity);
        this.onUnsubscribe();
      };
    }
    hasListeners() {
      return this.listeners.size > 0;
    }
    onSubscribe() {
    }
    onUnsubscribe() {
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/utils.mjs
  var isServer = typeof window === "undefined" || "Deno" in window;
  function noop2() {
    return void 0;
  }
  function functionalUpdate(updater, input) {
    return typeof updater === "function" ? updater(input) : updater;
  }
  function isValidTimeout(value) {
    return typeof value === "number" && value >= 0 && value !== Infinity;
  }
  function timeUntilStale(updatedAt, staleTime) {
    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
  }
  function parseQueryArgs(arg1, arg2, arg3) {
    if (!isQueryKey(arg1)) {
      return arg1;
    }
    if (typeof arg2 === "function") {
      return {
        ...arg3,
        queryKey: arg1,
        queryFn: arg2
      };
    }
    return {
      ...arg2,
      queryKey: arg1
    };
  }
  function parseFilterArgs(arg1, arg2, arg3) {
    return isQueryKey(arg1) ? [{
      ...arg2,
      queryKey: arg1
    }, arg3] : [arg1 || {}, arg2];
  }
  function matchQuery(filters, query) {
    const {
      type = "all",
      exact,
      fetchStatus,
      predicate,
      queryKey,
      stale
    } = filters;
    if (isQueryKey(queryKey)) {
      if (exact) {
        if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
          return false;
        }
      } else if (!partialMatchKey(query.queryKey, queryKey)) {
        return false;
      }
    }
    if (type !== "all") {
      const isActive = query.isActive();
      if (type === "active" && !isActive) {
        return false;
      }
      if (type === "inactive" && isActive) {
        return false;
      }
    }
    if (typeof stale === "boolean" && query.isStale() !== stale) {
      return false;
    }
    if (typeof fetchStatus !== "undefined" && fetchStatus !== query.state.fetchStatus) {
      return false;
    }
    if (predicate && !predicate(query)) {
      return false;
    }
    return true;
  }
  function matchMutation(filters, mutation) {
    const {
      exact,
      fetching,
      predicate,
      mutationKey
    } = filters;
    if (isQueryKey(mutationKey)) {
      if (!mutation.options.mutationKey) {
        return false;
      }
      if (exact) {
        if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
          return false;
        }
      } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
        return false;
      }
    }
    if (typeof fetching === "boolean" && mutation.state.status === "loading" !== fetching) {
      return false;
    }
    if (predicate && !predicate(mutation)) {
      return false;
    }
    return true;
  }
  function hashQueryKeyByOptions(queryKey, options) {
    const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
    return hashFn(queryKey);
  }
  function hashQueryKey(queryKey) {
    return JSON.stringify(queryKey, (_2, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {
      result[key] = val[key];
      return result;
    }, {}) : val);
  }
  function partialMatchKey(a2, b3) {
    return partialDeepEqual(a2, b3);
  }
  function partialDeepEqual(a2, b3) {
    if (a2 === b3) {
      return true;
    }
    if (typeof a2 !== typeof b3) {
      return false;
    }
    if (a2 && b3 && typeof a2 === "object" && typeof b3 === "object") {
      return !Object.keys(b3).some((key) => !partialDeepEqual(a2[key], b3[key]));
    }
    return false;
  }
  function replaceEqualDeep(a2, b3) {
    if (a2 === b3) {
      return a2;
    }
    const array = isPlainArray(a2) && isPlainArray(b3);
    if (array || isPlainObject(a2) && isPlainObject(b3)) {
      const aSize = array ? a2.length : Object.keys(a2).length;
      const bItems = array ? b3 : Object.keys(b3);
      const bSize = bItems.length;
      const copy = array ? [] : {};
      let equalItems = 0;
      for (let i2 = 0; i2 < bSize; i2++) {
        const key = array ? i2 : bItems[i2];
        copy[key] = replaceEqualDeep(a2[key], b3[key]);
        if (copy[key] === a2[key]) {
          equalItems++;
        }
      }
      return aSize === bSize && equalItems === aSize ? a2 : copy;
    }
    return b3;
  }
  function isPlainArray(value) {
    return Array.isArray(value) && value.length === Object.keys(value).length;
  }
  function isPlainObject(o2) {
    if (!hasObjectPrototype(o2)) {
      return false;
    }
    const ctor = o2.constructor;
    if (typeof ctor === "undefined") {
      return true;
    }
    const prot = ctor.prototype;
    if (!hasObjectPrototype(prot)) {
      return false;
    }
    if (!prot.hasOwnProperty("isPrototypeOf")) {
      return false;
    }
    return true;
  }
  function hasObjectPrototype(o2) {
    return Object.prototype.toString.call(o2) === "[object Object]";
  }
  function isQueryKey(value) {
    return Array.isArray(value);
  }
  function sleep(timeout) {
    return new Promise((resolve) => {
      setTimeout(resolve, timeout);
    });
  }
  function scheduleMicrotask(callback) {
    sleep(0).then(callback);
  }
  function getAbortController() {
    if (typeof AbortController === "function") {
      return new AbortController();
    }
    return;
  }
  function replaceData(prevData, data, options) {
    if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {
      return prevData;
    } else if (typeof options.structuralSharing === "function") {
      return options.structuralSharing(prevData, data);
    } else if (options.structuralSharing !== false) {
      return replaceEqualDeep(prevData, data);
    }
    return data;
  }

  // ../node_modules/@tanstack/query-core/build/lib/focusManager.mjs
  var FocusManager = class extends Subscribable {
    constructor() {
      super();
      this.setup = (onFocus) => {
        if (!isServer && window.addEventListener) {
          const listener = () => onFocus();
          window.addEventListener("visibilitychange", listener, false);
          window.addEventListener("focus", listener, false);
          return () => {
            window.removeEventListener("visibilitychange", listener);
            window.removeEventListener("focus", listener);
          };
        }
        return;
      };
    }
    onSubscribe() {
      if (!this.cleanup) {
        this.setEventListener(this.setup);
      }
    }
    onUnsubscribe() {
      if (!this.hasListeners()) {
        var _this$cleanup;
        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
        this.cleanup = void 0;
      }
    }
    setEventListener(setup) {
      var _this$cleanup2;
      this.setup = setup;
      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
      this.cleanup = setup((focused) => {
        if (typeof focused === "boolean") {
          this.setFocused(focused);
        } else {
          this.onFocus();
        }
      });
    }
    setFocused(focused) {
      const changed = this.focused !== focused;
      if (changed) {
        this.focused = focused;
        this.onFocus();
      }
    }
    onFocus() {
      this.listeners.forEach(({
        listener
      }) => {
        listener();
      });
    }
    isFocused() {
      if (typeof this.focused === "boolean") {
        return this.focused;
      }
      if (typeof document === "undefined") {
        return true;
      }
      return [void 0, "visible", "prerender"].includes(document.visibilityState);
    }
  };
  var focusManager = new FocusManager();

  // ../node_modules/@tanstack/query-core/build/lib/onlineManager.mjs
  var onlineEvents = ["online", "offline"];
  var OnlineManager = class extends Subscribable {
    constructor() {
      super();
      this.setup = (onOnline) => {
        if (!isServer && window.addEventListener) {
          const listener = () => onOnline();
          onlineEvents.forEach((event) => {
            window.addEventListener(event, listener, false);
          });
          return () => {
            onlineEvents.forEach((event) => {
              window.removeEventListener(event, listener);
            });
          };
        }
        return;
      };
    }
    onSubscribe() {
      if (!this.cleanup) {
        this.setEventListener(this.setup);
      }
    }
    onUnsubscribe() {
      if (!this.hasListeners()) {
        var _this$cleanup;
        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
        this.cleanup = void 0;
      }
    }
    setEventListener(setup) {
      var _this$cleanup2;
      this.setup = setup;
      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
      this.cleanup = setup((online) => {
        if (typeof online === "boolean") {
          this.setOnline(online);
        } else {
          this.onOnline();
        }
      });
    }
    setOnline(online) {
      const changed = this.online !== online;
      if (changed) {
        this.online = online;
        this.onOnline();
      }
    }
    onOnline() {
      this.listeners.forEach(({
        listener
      }) => {
        listener();
      });
    }
    isOnline() {
      if (typeof this.online === "boolean") {
        return this.online;
      }
      if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
        return true;
      }
      return navigator.onLine;
    }
  };
  var onlineManager = new OnlineManager();

  // ../node_modules/@tanstack/query-core/build/lib/retryer.mjs
  function defaultRetryDelay(failureCount) {
    return Math.min(1e3 * 2 ** failureCount, 3e4);
  }
  function canFetch(networkMode) {
    return (networkMode != null ? networkMode : "online") === "online" ? onlineManager.isOnline() : true;
  }
  var CancelledError = class {
    constructor(options) {
      this.revert = options == null ? void 0 : options.revert;
      this.silent = options == null ? void 0 : options.silent;
    }
  };
  function isCancelledError(value) {
    return value instanceof CancelledError;
  }
  function createRetryer(config) {
    let isRetryCancelled = false;
    let failureCount = 0;
    let isResolved = false;
    let continueFn;
    let promiseResolve;
    let promiseReject;
    const promise = new Promise((outerResolve, outerReject) => {
      promiseResolve = outerResolve;
      promiseReject = outerReject;
    });
    const cancel = (cancelOptions) => {
      if (!isResolved) {
        reject(new CancelledError(cancelOptions));
        config.abort == null ? void 0 : config.abort();
      }
    };
    const cancelRetry = () => {
      isRetryCancelled = true;
    };
    const continueRetry = () => {
      isRetryCancelled = false;
    };
    const shouldPause = () => !focusManager.isFocused() || config.networkMode !== "always" && !onlineManager.isOnline();
    const resolve = (value) => {
      if (!isResolved) {
        isResolved = true;
        config.onSuccess == null ? void 0 : config.onSuccess(value);
        continueFn == null ? void 0 : continueFn();
        promiseResolve(value);
      }
    };
    const reject = (value) => {
      if (!isResolved) {
        isResolved = true;
        config.onError == null ? void 0 : config.onError(value);
        continueFn == null ? void 0 : continueFn();
        promiseReject(value);
      }
    };
    const pause = () => {
      return new Promise((continueResolve) => {
        continueFn = (value) => {
          const canContinue = isResolved || !shouldPause();
          if (canContinue) {
            continueResolve(value);
          }
          return canContinue;
        };
        config.onPause == null ? void 0 : config.onPause();
      }).then(() => {
        continueFn = void 0;
        if (!isResolved) {
          config.onContinue == null ? void 0 : config.onContinue();
        }
      });
    };
    const run = () => {
      if (isResolved) {
        return;
      }
      let promiseOrValue;
      try {
        promiseOrValue = config.fn();
      } catch (error) {
        promiseOrValue = Promise.reject(error);
      }
      Promise.resolve(promiseOrValue).then(resolve).catch((error) => {
        var _config$retry, _config$retryDelay;
        if (isResolved) {
          return;
        }
        const retry = (_config$retry = config.retry) != null ? _config$retry : 3;
        const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
        const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
        const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
        if (isRetryCancelled || !shouldRetry) {
          reject(error);
          return;
        }
        failureCount++;
        config.onFail == null ? void 0 : config.onFail(failureCount, error);
        sleep(delay).then(() => {
          if (shouldPause()) {
            return pause();
          }
          return;
        }).then(() => {
          if (isRetryCancelled) {
            reject(error);
          } else {
            run();
          }
        });
      });
    };
    if (canFetch(config.networkMode)) {
      run();
    } else {
      pause().then(run);
    }
    return {
      promise,
      cancel,
      continue: () => {
        const didContinue = continueFn == null ? void 0 : continueFn();
        return didContinue ? promise : Promise.resolve();
      },
      cancelRetry,
      continueRetry
    };
  }

  // ../node_modules/@tanstack/query-core/build/lib/logger.mjs
  var defaultLogger = console;

  // ../node_modules/@tanstack/query-core/build/lib/notifyManager.mjs
  function createNotifyManager() {
    let queue = [];
    let transactions = 0;
    let notifyFn = (callback) => {
      callback();
    };
    let batchNotifyFn = (callback) => {
      callback();
    };
    const batch = (callback) => {
      let result;
      transactions++;
      try {
        result = callback();
      } finally {
        transactions--;
        if (!transactions) {
          flush();
        }
      }
      return result;
    };
    const schedule = (callback) => {
      if (transactions) {
        queue.push(callback);
      } else {
        scheduleMicrotask(() => {
          notifyFn(callback);
        });
      }
    };
    const batchCalls = (callback) => {
      return (...args) => {
        schedule(() => {
          callback(...args);
        });
      };
    };
    const flush = () => {
      const originalQueue = queue;
      queue = [];
      if (originalQueue.length) {
        scheduleMicrotask(() => {
          batchNotifyFn(() => {
            originalQueue.forEach((callback) => {
              notifyFn(callback);
            });
          });
        });
      }
    };
    const setNotifyFunction = (fn) => {
      notifyFn = fn;
    };
    const setBatchNotifyFunction = (fn) => {
      batchNotifyFn = fn;
    };
    return {
      batch,
      batchCalls,
      schedule,
      setNotifyFunction,
      setBatchNotifyFunction
    };
  }
  var notifyManager = createNotifyManager();

  // ../node_modules/@tanstack/query-core/build/lib/removable.mjs
  var Removable = class {
    destroy() {
      this.clearGcTimeout();
    }
    scheduleGc() {
      this.clearGcTimeout();
      if (isValidTimeout(this.cacheTime)) {
        this.gcTimeout = setTimeout(() => {
          this.optionalRemove();
        }, this.cacheTime);
      }
    }
    updateCacheTime(newCacheTime) {
      this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1e3);
    }
    clearGcTimeout() {
      if (this.gcTimeout) {
        clearTimeout(this.gcTimeout);
        this.gcTimeout = void 0;
      }
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/query.mjs
  var Query2 = class extends Removable {
    constructor(config) {
      super();
      this.abortSignalConsumed = false;
      this.defaultOptions = config.defaultOptions;
      this.setOptions(config.options);
      this.observers = [];
      this.cache = config.cache;
      this.logger = config.logger || defaultLogger;
      this.queryKey = config.queryKey;
      this.queryHash = config.queryHash;
      this.initialState = config.state || getDefaultState(this.options);
      this.state = this.initialState;
      this.scheduleGc();
    }
    get meta() {
      return this.options.meta;
    }
    setOptions(options) {
      this.options = {
        ...this.defaultOptions,
        ...options
      };
      this.updateCacheTime(this.options.cacheTime);
    }
    optionalRemove() {
      if (!this.observers.length && this.state.fetchStatus === "idle") {
        this.cache.remove(this);
      }
    }
    setData(newData, options) {
      const data = replaceData(this.state.data, newData, this.options);
      this.dispatch({
        data,
        type: "success",
        dataUpdatedAt: options == null ? void 0 : options.updatedAt,
        manual: options == null ? void 0 : options.manual
      });
      return data;
    }
    setState(state, setStateOptions) {
      this.dispatch({
        type: "setState",
        state,
        setStateOptions
      });
    }
    cancel(options) {
      var _this$retryer;
      const promise = this.promise;
      (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
      return promise ? promise.then(noop2).catch(noop2) : Promise.resolve();
    }
    destroy() {
      super.destroy();
      this.cancel({
        silent: true
      });
    }
    reset() {
      this.destroy();
      this.setState(this.initialState);
    }
    isActive() {
      return this.observers.some((observer) => observer.options.enabled !== false);
    }
    isDisabled() {
      return this.getObserversCount() > 0 && !this.isActive();
    }
    isStale() {
      return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some((observer) => observer.getCurrentResult().isStale);
    }
    isStaleByTime(staleTime = 0) {
      return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
    }
    onFocus() {
      var _this$retryer2;
      const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus());
      if (observer) {
        observer.refetch({
          cancelRefetch: false
        });
      }
      (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
    }
    onOnline() {
      var _this$retryer3;
      const observer = this.observers.find((x) => x.shouldFetchOnReconnect());
      if (observer) {
        observer.refetch({
          cancelRefetch: false
        });
      }
      (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
    }
    addObserver(observer) {
      if (!this.observers.includes(observer)) {
        this.observers.push(observer);
        this.clearGcTimeout();
        this.cache.notify({
          type: "observerAdded",
          query: this,
          observer
        });
      }
    }
    removeObserver(observer) {
      if (this.observers.includes(observer)) {
        this.observers = this.observers.filter((x) => x !== observer);
        if (!this.observers.length) {
          if (this.retryer) {
            if (this.abortSignalConsumed) {
              this.retryer.cancel({
                revert: true
              });
            } else {
              this.retryer.cancelRetry();
            }
          }
          this.scheduleGc();
        }
        this.cache.notify({
          type: "observerRemoved",
          query: this,
          observer
        });
      }
    }
    getObserversCount() {
      return this.observers.length;
    }
    invalidate() {
      if (!this.state.isInvalidated) {
        this.dispatch({
          type: "invalidate"
        });
      }
    }
    fetch(options, fetchOptions) {
      var _this$options$behavio, _context$fetchOptions;
      if (this.state.fetchStatus !== "idle") {
        if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {
          this.cancel({
            silent: true
          });
        } else if (this.promise) {
          var _this$retryer4;
          (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry();
          return this.promise;
        }
      }
      if (options) {
        this.setOptions(options);
      }
      if (!this.options.queryFn) {
        const observer = this.observers.find((x) => x.options.queryFn);
        if (observer) {
          this.setOptions(observer.options);
        }
      }
      if (true) {
        if (!Array.isArray(this.options.queryKey)) {
          this.logger.error("As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']");
        }
      }
      const abortController = getAbortController();
      const queryFnContext = {
        queryKey: this.queryKey,
        pageParam: void 0,
        meta: this.meta
      };
      const addSignalProperty = (object) => {
        Object.defineProperty(object, "signal", {
          enumerable: true,
          get: () => {
            if (abortController) {
              this.abortSignalConsumed = true;
              return abortController.signal;
            }
            return void 0;
          }
        });
      };
      addSignalProperty(queryFnContext);
      const fetchFn = () => {
        if (!this.options.queryFn) {
          return Promise.reject("Missing queryFn for queryKey '" + this.options.queryHash + "'");
        }
        this.abortSignalConsumed = false;
        return this.options.queryFn(queryFnContext);
      };
      const context = {
        fetchOptions,
        options: this.options,
        queryKey: this.queryKey,
        state: this.state,
        fetchFn
      };
      addSignalProperty(context);
      (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context);
      this.revertState = this.state;
      if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
        var _context$fetchOptions2;
        this.dispatch({
          type: "fetch",
          meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
        });
      }
      const onError = (error) => {
        if (!(isCancelledError(error) && error.silent)) {
          this.dispatch({
            type: "error",
            error
          });
        }
        if (!isCancelledError(error)) {
          var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;
          (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);
          (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);
          if (true) {
            this.logger.error(error);
          }
        }
        if (!this.isFetchingOptimistic) {
          this.scheduleGc();
        }
        this.isFetchingOptimistic = false;
      };
      this.retryer = createRetryer({
        fn: context.fetchFn,
        abort: abortController == null ? void 0 : abortController.abort.bind(abortController),
        onSuccess: (data) => {
          var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;
          if (typeof data === "undefined") {
            if (true) {
              this.logger.error("Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: " + this.queryHash);
            }
            onError(new Error(this.queryHash + " data is undefined"));
            return;
          }
          this.setData(data);
          (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, this);
          (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, this.state.error, this);
          if (!this.isFetchingOptimistic) {
            this.scheduleGc();
          }
          this.isFetchingOptimistic = false;
        },
        onError,
        onFail: (failureCount, error) => {
          this.dispatch({
            type: "failed",
            failureCount,
            error
          });
        },
        onPause: () => {
          this.dispatch({
            type: "pause"
          });
        },
        onContinue: () => {
          this.dispatch({
            type: "continue"
          });
        },
        retry: context.options.retry,
        retryDelay: context.options.retryDelay,
        networkMode: context.options.networkMode
      });
      this.promise = this.retryer.promise;
      return this.promise;
    }
    dispatch(action) {
      const reducer = (state) => {
        var _action$meta, _action$dataUpdatedAt;
        switch (action.type) {
          case "failed":
            return {
              ...state,
              fetchFailureCount: action.failureCount,
              fetchFailureReason: action.error
            };
          case "pause":
            return {
              ...state,
              fetchStatus: "paused"
            };
          case "continue":
            return {
              ...state,
              fetchStatus: "fetching"
            };
          case "fetch":
            return {
              ...state,
              fetchFailureCount: 0,
              fetchFailureReason: null,
              fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
              fetchStatus: canFetch(this.options.networkMode) ? "fetching" : "paused",
              ...!state.dataUpdatedAt && {
                error: null,
                status: "loading"
              }
            };
          case "success":
            return {
              ...state,
              data: action.data,
              dataUpdateCount: state.dataUpdateCount + 1,
              dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
              error: null,
              isInvalidated: false,
              status: "success",
              ...!action.manual && {
                fetchStatus: "idle",
                fetchFailureCount: 0,
                fetchFailureReason: null
              }
            };
          case "error":
            const error = action.error;
            if (isCancelledError(error) && error.revert && this.revertState) {
              return {
                ...this.revertState,
                fetchStatus: "idle"
              };
            }
            return {
              ...state,
              error,
              errorUpdateCount: state.errorUpdateCount + 1,
              errorUpdatedAt: Date.now(),
              fetchFailureCount: state.fetchFailureCount + 1,
              fetchFailureReason: error,
              fetchStatus: "idle",
              status: "error"
            };
          case "invalidate":
            return {
              ...state,
              isInvalidated: true
            };
          case "setState":
            return {
              ...state,
              ...action.state
            };
        }
      };
      this.state = reducer(this.state);
      notifyManager.batch(() => {
        this.observers.forEach((observer) => {
          observer.onQueryUpdate(action);
        });
        this.cache.notify({
          query: this,
          type: "updated",
          action
        });
      });
    }
  };
  function getDefaultState(options) {
    const data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
    const hasData = typeof data !== "undefined";
    const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
    return {
      data,
      dataUpdateCount: 0,
      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
      error: null,
      errorUpdateCount: 0,
      errorUpdatedAt: 0,
      fetchFailureCount: 0,
      fetchFailureReason: null,
      fetchMeta: null,
      isInvalidated: false,
      status: hasData ? "success" : "loading",
      fetchStatus: "idle"
    };
  }

  // ../node_modules/@tanstack/query-core/build/lib/queryCache.mjs
  var QueryCache = class extends Subscribable {
    constructor(config) {
      super();
      this.config = config || {};
      this.queries = [];
      this.queriesMap = {};
    }
    build(client, options, state) {
      var _options$queryHash;
      const queryKey = options.queryKey;
      const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
      let query = this.get(queryHash);
      if (!query) {
        query = new Query2({
          cache: this,
          logger: client.getLogger(),
          queryKey,
          queryHash,
          options: client.defaultQueryOptions(options),
          state,
          defaultOptions: client.getQueryDefaults(queryKey)
        });
        this.add(query);
      }
      return query;
    }
    add(query) {
      if (!this.queriesMap[query.queryHash]) {
        this.queriesMap[query.queryHash] = query;
        this.queries.push(query);
        this.notify({
          type: "added",
          query
        });
      }
    }
    remove(query) {
      const queryInMap = this.queriesMap[query.queryHash];
      if (queryInMap) {
        query.destroy();
        this.queries = this.queries.filter((x) => x !== query);
        if (queryInMap === query) {
          delete this.queriesMap[query.queryHash];
        }
        this.notify({
          type: "removed",
          query
        });
      }
    }
    clear() {
      notifyManager.batch(() => {
        this.queries.forEach((query) => {
          this.remove(query);
        });
      });
    }
    get(queryHash) {
      return this.queriesMap[queryHash];
    }
    getAll() {
      return this.queries;
    }
    find(arg1, arg2) {
      const [filters] = parseFilterArgs(arg1, arg2);
      if (typeof filters.exact === "undefined") {
        filters.exact = true;
      }
      return this.queries.find((query) => matchQuery(filters, query));
    }
    findAll(arg1, arg2) {
      const [filters] = parseFilterArgs(arg1, arg2);
      return Object.keys(filters).length > 0 ? this.queries.filter((query) => matchQuery(filters, query)) : this.queries;
    }
    notify(event) {
      notifyManager.batch(() => {
        this.listeners.forEach(({
          listener
        }) => {
          listener(event);
        });
      });
    }
    onFocus() {
      notifyManager.batch(() => {
        this.queries.forEach((query) => {
          query.onFocus();
        });
      });
    }
    onOnline() {
      notifyManager.batch(() => {
        this.queries.forEach((query) => {
          query.onOnline();
        });
      });
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/mutation.mjs
  var Mutation = class extends Removable {
    constructor(config) {
      super();
      this.defaultOptions = config.defaultOptions;
      this.mutationId = config.mutationId;
      this.mutationCache = config.mutationCache;
      this.logger = config.logger || defaultLogger;
      this.observers = [];
      this.state = config.state || getDefaultState2();
      this.setOptions(config.options);
      this.scheduleGc();
    }
    setOptions(options) {
      this.options = {
        ...this.defaultOptions,
        ...options
      };
      this.updateCacheTime(this.options.cacheTime);
    }
    get meta() {
      return this.options.meta;
    }
    setState(state) {
      this.dispatch({
        type: "setState",
        state
      });
    }
    addObserver(observer) {
      if (!this.observers.includes(observer)) {
        this.observers.push(observer);
        this.clearGcTimeout();
        this.mutationCache.notify({
          type: "observerAdded",
          mutation: this,
          observer
        });
      }
    }
    removeObserver(observer) {
      this.observers = this.observers.filter((x) => x !== observer);
      this.scheduleGc();
      this.mutationCache.notify({
        type: "observerRemoved",
        mutation: this,
        observer
      });
    }
    optionalRemove() {
      if (!this.observers.length) {
        if (this.state.status === "loading") {
          this.scheduleGc();
        } else {
          this.mutationCache.remove(this);
        }
      }
    }
    continue() {
      var _this$retryer$continu, _this$retryer;
      return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();
    }
    async execute() {
      const executeMutation = () => {
        var _this$options$retry;
        this.retryer = createRetryer({
          fn: () => {
            if (!this.options.mutationFn) {
              return Promise.reject("No mutationFn found");
            }
            return this.options.mutationFn(this.state.variables);
          },
          onFail: (failureCount, error) => {
            this.dispatch({
              type: "failed",
              failureCount,
              error
            });
          },
          onPause: () => {
            this.dispatch({
              type: "pause"
            });
          },
          onContinue: () => {
            this.dispatch({
              type: "continue"
            });
          },
          retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
          retryDelay: this.options.retryDelay,
          networkMode: this.options.networkMode
        });
        return this.retryer.promise;
      };
      const restored = this.state.status === "loading";
      try {
        var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;
        if (!restored) {
          var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;
          this.dispatch({
            type: "loading",
            variables: this.options.variables
          });
          await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));
          const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));
          if (context !== this.state.context) {
            this.dispatch({
              type: "loading",
              context,
              variables: this.state.variables
            });
          }
        }
        const data = await executeMutation();
        await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));
        await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));
        await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));
        await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));
        this.dispatch({
          type: "success",
          data
        });
        return data;
      } catch (error) {
        try {
          var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;
          await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));
          if (true) {
            this.logger.error(error);
          }
          await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));
          await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, void 0, error, this.state.variables, this.state.context, this));
          await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, error, this.state.variables, this.state.context));
          throw error;
        } finally {
          this.dispatch({
            type: "error",
            error
          });
        }
      }
    }
    dispatch(action) {
      const reducer = (state) => {
        switch (action.type) {
          case "failed":
            return {
              ...state,
              failureCount: action.failureCount,
              failureReason: action.error
            };
          case "pause":
            return {
              ...state,
              isPaused: true
            };
          case "continue":
            return {
              ...state,
              isPaused: false
            };
          case "loading":
            return {
              ...state,
              context: action.context,
              data: void 0,
              failureCount: 0,
              failureReason: null,
              error: null,
              isPaused: !canFetch(this.options.networkMode),
              status: "loading",
              variables: action.variables
            };
          case "success":
            return {
              ...state,
              data: action.data,
              failureCount: 0,
              failureReason: null,
              error: null,
              status: "success",
              isPaused: false
            };
          case "error":
            return {
              ...state,
              data: void 0,
              error: action.error,
              failureCount: state.failureCount + 1,
              failureReason: action.error,
              isPaused: false,
              status: "error"
            };
          case "setState":
            return {
              ...state,
              ...action.state
            };
        }
      };
      this.state = reducer(this.state);
      notifyManager.batch(() => {
        this.observers.forEach((observer) => {
          observer.onMutationUpdate(action);
        });
        this.mutationCache.notify({
          mutation: this,
          type: "updated",
          action
        });
      });
    }
  };
  function getDefaultState2() {
    return {
      context: void 0,
      data: void 0,
      error: null,
      failureCount: 0,
      failureReason: null,
      isPaused: false,
      status: "idle",
      variables: void 0
    };
  }

  // ../node_modules/@tanstack/query-core/build/lib/mutationCache.mjs
  var MutationCache = class extends Subscribable {
    constructor(config) {
      super();
      this.config = config || {};
      this.mutations = [];
      this.mutationId = 0;
    }
    build(client, options, state) {
      const mutation = new Mutation({
        mutationCache: this,
        logger: client.getLogger(),
        mutationId: ++this.mutationId,
        options: client.defaultMutationOptions(options),
        state,
        defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : void 0
      });
      this.add(mutation);
      return mutation;
    }
    add(mutation) {
      this.mutations.push(mutation);
      this.notify({
        type: "added",
        mutation
      });
    }
    remove(mutation) {
      this.mutations = this.mutations.filter((x) => x !== mutation);
      this.notify({
        type: "removed",
        mutation
      });
    }
    clear() {
      notifyManager.batch(() => {
        this.mutations.forEach((mutation) => {
          this.remove(mutation);
        });
      });
    }
    getAll() {
      return this.mutations;
    }
    find(filters) {
      if (typeof filters.exact === "undefined") {
        filters.exact = true;
      }
      return this.mutations.find((mutation) => matchMutation(filters, mutation));
    }
    findAll(filters) {
      return this.mutations.filter((mutation) => matchMutation(filters, mutation));
    }
    notify(event) {
      notifyManager.batch(() => {
        this.listeners.forEach(({
          listener
        }) => {
          listener(event);
        });
      });
    }
    resumePausedMutations() {
      var _this$resuming;
      this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {
        const pausedMutations = this.mutations.filter((x) => x.state.isPaused);
        return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop2)), Promise.resolve()));
      }).then(() => {
        this.resuming = void 0;
      });
      return this.resuming;
    }
  };

  // ../node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs
  function infiniteQueryBehavior() {
    return {
      onFetch: (context) => {
        context.fetchFn = () => {
          var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;
          const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
          const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
          const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
          const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
          const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
          const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
          const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
          let newPageParams = oldPageParams;
          let cancelled = false;
          const addSignalProperty = (object) => {
            Object.defineProperty(object, "signal", {
              enumerable: true,
              get: () => {
                var _context$signal;
                if ((_context$signal = context.signal) != null && _context$signal.aborted) {
                  cancelled = true;
                } else {
                  var _context$signal2;
                  (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener("abort", () => {
                    cancelled = true;
                  });
                }
                return context.signal;
              }
            });
          };
          const queryFn = context.options.queryFn || (() => Promise.reject("Missing queryFn for queryKey '" + context.options.queryHash + "'"));
          const buildNewPages = (pages, param, page, previous) => {
            newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];
            return previous ? [page, ...pages] : [...pages, page];
          };
          const fetchPage = (pages, manual, param, previous) => {
            if (cancelled) {
              return Promise.reject("Cancelled");
            }
            if (typeof param === "undefined" && !manual && pages.length) {
              return Promise.resolve(pages);
            }
            const queryFnContext = {
              queryKey: context.queryKey,
              pageParam: param,
              meta: context.options.meta
            };
            addSignalProperty(queryFnContext);
            const queryFnResult = queryFn(queryFnContext);
            const promise2 = Promise.resolve(queryFnResult).then((page) => buildNewPages(pages, param, page, previous));
            return promise2;
          };
          let promise;
          if (!oldPages.length) {
            promise = fetchPage([]);
          } else if (isFetchingNextPage) {
            const manual = typeof pageParam !== "undefined";
            const param = manual ? pageParam : getNextPageParam(context.options, oldPages);
            promise = fetchPage(oldPages, manual, param);
          } else if (isFetchingPreviousPage) {
            const manual = typeof pageParam !== "undefined";
            const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);
            promise = fetchPage(oldPages, manual, param, true);
          } else {
            newPageParams = [];
            const manual = typeof context.options.getNextPageParam === "undefined";
            const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true;
            promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]));
            for (let i2 = 1; i2 < oldPages.length; i2++) {
              promise = promise.then((pages) => {
                const shouldFetchNextPage = refetchPage && oldPages[i2] ? refetchPage(oldPages[i2], i2, oldPages) : true;
                if (shouldFetchNextPage) {
                  const param = manual ? oldPageParams[i2] : getNextPageParam(context.options, pages);
                  return fetchPage(pages, manual, param);
                }
                return Promise.resolve(buildNewPages(pages, oldPageParams[i2], oldPages[i2]));
              });
            }
          }
          const finalPromise = promise.then((pages) => ({
            pages,
            pageParams: newPageParams
          }));
          return finalPromise;
        };
      }
    };
  }
  function getNextPageParam(options, pages) {
    return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
  }
  function getPreviousPageParam(options, pages) {
    return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
  }

  // ../node_modules/@tanstack/query-core/build/lib/queryClient.mjs
  var QueryClient = class {
    constructor(config = {}) {
      this.queryCache = config.queryCache || new QueryCache();
      this.mutationCache = config.mutationCache || new MutationCache();
      this.logger = config.logger || defaultLogger;
      this.defaultOptions = config.defaultOptions || {};
      this.queryDefaults = [];
      this.mutationDefaults = [];
      this.mountCount = 0;
      if (config.logger) {
        this.logger.error("Passing a custom logger has been deprecated and will be removed in the next major version.");
      }
    }
    mount() {
      this.mountCount++;
      if (this.mountCount !== 1)
        return;
      this.unsubscribeFocus = focusManager.subscribe(() => {
        if (focusManager.isFocused()) {
          this.resumePausedMutations();
          this.queryCache.onFocus();
        }
      });
      this.unsubscribeOnline = onlineManager.subscribe(() => {
        if (onlineManager.isOnline()) {
          this.resumePausedMutations();
          this.queryCache.onOnline();
        }
      });
    }
    unmount() {
      var _this$unsubscribeFocu, _this$unsubscribeOnli;
      this.mountCount--;
      if (this.mountCount !== 0)
        return;
      (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
      this.unsubscribeFocus = void 0;
      (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
      this.unsubscribeOnline = void 0;
    }
    isFetching(arg1, arg2) {
      const [filters] = parseFilterArgs(arg1, arg2);
      filters.fetchStatus = "fetching";
      return this.queryCache.findAll(filters).length;
    }
    isMutating(filters) {
      return this.mutationCache.findAll({
        ...filters,
        fetching: true
      }).length;
    }
    getQueryData(queryKey, filters) {
      var _this$queryCache$find;
      return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
    }
    ensureQueryData(arg1, arg2, arg3) {
      const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
      const cachedData = this.getQueryData(parsedOptions.queryKey);
      return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);
    }
    getQueriesData(queryKeyOrFilters) {
      return this.getQueryCache().findAll(queryKeyOrFilters).map(({
        queryKey,
        state
      }) => {
        const data = state.data;
        return [queryKey, data];
      });
    }
    setQueryData(queryKey, updater, options) {
      const query = this.queryCache.find(queryKey);
      const prevData = query == null ? void 0 : query.state.data;
      const data = functionalUpdate(updater, prevData);
      if (typeof data === "undefined") {
        return void 0;
      }
      const parsedOptions = parseQueryArgs(queryKey);
      const defaultedOptions = this.defaultQueryOptions(parsedOptions);
      return this.queryCache.build(this, defaultedOptions).setData(data, {
        ...options,
        manual: true
      });
    }
    setQueriesData(queryKeyOrFilters, updater, options) {
      return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({
        queryKey
      }) => [queryKey, this.setQueryData(queryKey, updater, options)]));
    }
    getQueryState(queryKey, filters) {
      var _this$queryCache$find2;
      return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
    }
    removeQueries(arg1, arg2) {
      const [filters] = parseFilterArgs(arg1, arg2);
      const queryCache = this.queryCache;
      notifyManager.batch(() => {
        queryCache.findAll(filters).forEach((query) => {
          queryCache.remove(query);
        });
      });
    }
    resetQueries(arg1, arg2, arg3) {
      const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
      const queryCache = this.queryCache;
      const refetchFilters = {
        type: "active",
        ...filters
      };
      return notifyManager.batch(() => {
        queryCache.findAll(filters).forEach((query) => {
          query.reset();
        });
        return this.refetchQueries(refetchFilters, options);
      });
    }
    cancelQueries(arg1, arg2, arg3) {
      const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);
      if (typeof cancelOptions.revert === "undefined") {
        cancelOptions.revert = true;
      }
      const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map((query) => query.cancel(cancelOptions)));
      return Promise.all(promises).then(noop2).catch(noop2);
    }
    invalidateQueries(arg1, arg2, arg3) {
      const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
      return notifyManager.batch(() => {
        var _ref, _filters$refetchType;
        this.queryCache.findAll(filters).forEach((query) => {
          query.invalidate();
        });
        if (filters.refetchType === "none") {
          return Promise.resolve();
        }
        const refetchFilters = {
          ...filters,
          type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : "active"
        };
        return this.refetchQueries(refetchFilters, options);
      });
    }
    refetchQueries(arg1, arg2, arg3) {
      const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
      const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
        var _options$cancelRefetc;
        return query.fetch(void 0, {
          ...options,
          cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,
          meta: {
            refetchPage: filters.refetchPage
          }
        });
      }));
      let promise = Promise.all(promises).then(noop2);
      if (!(options != null && options.throwOnError)) {
        promise = promise.catch(noop2);
      }
      return promise;
    }
    fetchQuery(arg1, arg2, arg3) {
      const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
      const defaultedOptions = this.defaultQueryOptions(parsedOptions);
      if (typeof defaultedOptions.retry === "undefined") {
        defaultedOptions.retry = false;
      }
      const query = this.queryCache.build(this, defaultedOptions);
      return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
    }
    prefetchQuery(arg1, arg2, arg3) {
      return this.fetchQuery(arg1, arg2, arg3).then(noop2).catch(noop2);
    }
    fetchInfiniteQuery(arg1, arg2, arg3) {
      const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
      parsedOptions.behavior = infiniteQueryBehavior();
      return this.fetchQuery(parsedOptions);
    }
    prefetchInfiniteQuery(arg1, arg2, arg3) {
      return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop2).catch(noop2);
    }
    resumePausedMutations() {
      return this.mutationCache.resumePausedMutations();
    }
    getQueryCache() {
      return this.queryCache;
    }
    getMutationCache() {
      return this.mutationCache;
    }
    getLogger() {
      return this.logger;
    }
    getDefaultOptions() {
      return this.defaultOptions;
    }
    setDefaultOptions(options) {
      this.defaultOptions = options;
    }
    setQueryDefaults(queryKey, options) {
      const result = this.queryDefaults.find((x) => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));
      if (result) {
        result.defaultOptions = options;
      } else {
        this.queryDefaults.push({
          queryKey,
          defaultOptions: options
        });
      }
    }
    getQueryDefaults(queryKey) {
      if (!queryKey) {
        return void 0;
      }
      const firstMatchingDefaults = this.queryDefaults.find((x) => partialMatchKey(queryKey, x.queryKey));
      if (true) {
        const matchingDefaults = this.queryDefaults.filter((x) => partialMatchKey(queryKey, x.queryKey));
        if (matchingDefaults.length > 1) {
          this.logger.error("[QueryClient] Several query defaults match with key '" + JSON.stringify(queryKey) + "'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.");
        }
      }
      return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
    }
    setMutationDefaults(mutationKey, options) {
      const result = this.mutationDefaults.find((x) => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));
      if (result) {
        result.defaultOptions = options;
      } else {
        this.mutationDefaults.push({
          mutationKey,
          defaultOptions: options
        });
      }
    }
    getMutationDefaults(mutationKey) {
      if (!mutationKey) {
        return void 0;
      }
      const firstMatchingDefaults = this.mutationDefaults.find((x) => partialMatchKey(mutationKey, x.mutationKey));
      if (true) {
        const matchingDefaults = this.mutationDefaults.filter((x) => partialMatchKey(mutationKey, x.mutationKey));
        if (matchingDefaults.length > 1) {
          this.logger.error("[QueryClient] Several mutation defaults match with key '" + JSON.stringify(mutationKey) + "'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.");
        }
      }
      return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
    }
    defaultQueryOptions(options) {
      if (options != null && options._defaulted) {
        return options;
      }
      const defaultedOptions = {
        ...this.defaultOptions.queries,
        ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),
        ...options,
        _defaulted: true
      };
      if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
        defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
      }
      if (typeof defaultedOptions.refetchOnReconnect === "undefined") {
        defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
      }
      if (typeof defaultedOptions.useErrorBoundary === "undefined") {
        defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;
      }
      return defaultedOptions;
    }
    defaultMutationOptions(options) {
      if (options != null && options._defaulted) {
        return options;
      }
      return {
        ...this.defaultOptions.mutations,
        ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),
        ...options,
        _defaulted: true
      };
    }
    clear() {
      this.queryCache.clear();
      this.mutationCache.clear();
    }
  };

  // src/service.ts
  var baseURL = "https://demo.lunabrain.com";
  var queryClient = new QueryClient();
  var transport = createConnectTransport({
    baseUrl: `${baseURL}/api` || "error"
    // credentials: "include",
  });
  var projectService = createPromiseClient(ProtoflowService, transport);
  var contentService = createPromiseClient(ContentService, transport);
  var userService = createPromiseClient(UserService, transport);

  // ../node_modules/react-hot-toast/dist/index.mjs
  var import_react4 = __toESM(require_react(), 1);
  var import_react5 = __toESM(require_react(), 1);
  var l2 = __toESM(require_react(), 1);

  // ../node_modules/goober/dist/goober.modern.js
  var e = { data: "" };
  var t = (t2) => "object" == typeof window ? ((t2 ? t2.querySelector("#_goober") : window._goober) || Object.assign((t2 || document.head).appendChild(document.createElement("style")), { innerHTML: " ", id: "_goober" })).firstChild : t2 || e;
  var l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g;
  var a = /\/\*[^]*?\*\/|  +/g;
  var n = /\n+/g;
  var o = (e2, t2) => {
    let r = "", l3 = "", a2 = "";
    for (let n3 in e2) {
      let c2 = e2[n3];
      "@" == n3[0] ? "i" == n3[1] ? r = n3 + " " + c2 + ";" : l3 += "f" == n3[1] ? o(c2, n3) : n3 + "{" + o(c2, "k" == n3[1] ? "" : t2) + "}" : "object" == typeof c2 ? l3 += o(c2, t2 ? t2.replace(/([^,])+/g, (e3) => n3.replace(/(^:.*)|([^,])+/g, (t3) => /&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + " " + t3 : t3)) : n3) : null != c2 && (n3 = /^--/.test(n3) ? n3 : n3.replace(/[A-Z]/g, "-$&").toLowerCase(), a2 += o.p ? o.p(n3, c2) : n3 + ":" + c2 + ";");
    }
    return r + (t2 && a2 ? t2 + "{" + a2 + "}" : a2) + l3;
  };
  var c = {};
  var s = (e2) => {
    if ("object" == typeof e2) {
      let t2 = "";
      for (let r in e2)
        t2 += r + s(e2[r]);
      return t2;
    }
    return e2;
  };
  var i = (e2, t2, r, i2, p2) => {
    let u3 = s(e2), d2 = c[u3] || (c[u3] = ((e3) => {
      let t3 = 0, r2 = 11;
      for (; t3 < e3.length; )
        r2 = 101 * r2 + e3.charCodeAt(t3++) >>> 0;
      return "go" + r2;
    })(u3));
    if (!c[d2]) {
      let t3 = u3 !== e2 ? e2 : ((e3) => {
        let t4, r2, o2 = [{}];
        for (; t4 = l.exec(e3.replace(a, "")); )
          t4[4] ? o2.shift() : t4[3] ? (r2 = t4[3].replace(n, " ").trim(), o2.unshift(o2[0][r2] = o2[0][r2] || {})) : o2[0][t4[1]] = t4[2].replace(n, " ").trim();
        return o2[0];
      })(e2);
      c[d2] = o(p2 ? { ["@keyframes " + d2]: t3 } : t3, r ? "" : "." + d2);
    }
    let f3 = r && c.g ? c.g : null;
    return r && (c.g = c[d2]), ((e3, t3, r2, l3) => {
      l3 ? t3.data = t3.data.replace(l3, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r2 ? e3 + t3.data : t3.data + e3);
    })(c[d2], t2, i2, f3), d2;
  };
  var p = (e2, t2, r) => e2.reduce((e3, l3, a2) => {
    let n3 = t2[a2];
    if (n3 && n3.call) {
      let e4 = n3(r), t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;
      n3 = t3 ? "." + t3 : e4 && "object" == typeof e4 ? e4.props ? "" : o(e4, "") : false === e4 ? "" : e4;
    }
    return e3 + l3 + (null == n3 ? "" : n3);
  }, "");
  function u(e2) {
    let r = this || {}, l3 = e2.call ? e2(r.p) : e2;
    return i(l3.unshift ? l3.raw ? p(l3, [].slice.call(arguments, 1), r.p) : l3.reduce((e3, t2) => Object.assign(e3, t2 && t2.call ? t2(r.p) : t2), {}) : l3, t(r.target), r.g, r.o, r.k);
  }
  var d;
  var f;
  var g;
  var b = u.bind({ g: 1 });
  var h = u.bind({ k: 1 });
  function m(e2, t2, r, l3) {
    o.p = t2, d = e2, f = r, g = l3;
  }
  function j(e2, t2) {
    let r = this || {};
    return function() {
      let l3 = arguments;
      function a2(n3, o2) {
        let c2 = Object.assign({}, n3), s2 = c2.className || a2.className;
        r.p = Object.assign({ theme: f && f() }, c2), r.o = / *go\d+/.test(s2), c2.className = u.apply(r, l3) + (s2 ? " " + s2 : ""), t2 && (c2.ref = o2);
        let i2 = e2;
        return e2[0] && (i2 = c2.as || e2, delete c2.as), g && i2[0] && g(c2), d(i2, c2);
      }
      return t2 ? t2(a2) : a2;
    };
  }

  // ../node_modules/react-hot-toast/dist/index.mjs
  var y = __toESM(require_react(), 1);
  var f2 = __toESM(require_react(), 1);
  var W = (e2) => typeof e2 == "function";
  var T = (e2, t2) => W(e2) ? e2(t2) : e2;
  var U = (() => {
    let e2 = 0;
    return () => (++e2).toString();
  })();
  var b2 = (() => {
    let e2;
    return () => {
      if (e2 === void 0 && typeof window < "u") {
        let t2 = matchMedia("(prefers-reduced-motion: reduce)");
        e2 = !t2 || t2.matches;
      }
      return e2;
    };
  })();
  var Q = 20;
  var S = /* @__PURE__ */ new Map();
  var X = 1e3;
  var $ = (e2) => {
    if (S.has(e2))
      return;
    let t2 = setTimeout(() => {
      S.delete(e2), u2({ type: 4, toastId: e2 });
    }, X);
    S.set(e2, t2);
  };
  var J = (e2) => {
    let t2 = S.get(e2);
    t2 && clearTimeout(t2);
  };
  var v = (e2, t2) => {
    switch (t2.type) {
      case 0:
        return { ...e2, toasts: [t2.toast, ...e2.toasts].slice(0, Q) };
      case 1:
        return t2.toast.id && J(t2.toast.id), { ...e2, toasts: e2.toasts.map((r) => r.id === t2.toast.id ? { ...r, ...t2.toast } : r) };
      case 2:
        let { toast: o2 } = t2;
        return e2.toasts.find((r) => r.id === o2.id) ? v(e2, { type: 1, toast: o2 }) : v(e2, { type: 0, toast: o2 });
      case 3:
        let { toastId: s2 } = t2;
        return s2 ? $(s2) : e2.toasts.forEach((r) => {
          $(r.id);
        }), { ...e2, toasts: e2.toasts.map((r) => r.id === s2 || s2 === void 0 ? { ...r, visible: false } : r) };
      case 4:
        return t2.toastId === void 0 ? { ...e2, toasts: [] } : { ...e2, toasts: e2.toasts.filter((r) => r.id !== t2.toastId) };
      case 5:
        return { ...e2, pausedAt: t2.time };
      case 6:
        let a2 = t2.time - (e2.pausedAt || 0);
        return { ...e2, pausedAt: void 0, toasts: e2.toasts.map((r) => ({ ...r, pauseDuration: r.pauseDuration + a2 })) };
    }
  };
  var A = [];
  var P = { toasts: [], pausedAt: void 0 };
  var u2 = (e2) => {
    P = v(P, e2), A.forEach((t2) => {
      t2(P);
    });
  };
  var Y = { blank: 4e3, error: 4e3, success: 2e3, loading: 1 / 0, custom: 4e3 };
  var I = (e2 = {}) => {
    let [t2, o2] = (0, import_react4.useState)(P);
    (0, import_react4.useEffect)(() => (A.push(o2), () => {
      let a2 = A.indexOf(o2);
      a2 > -1 && A.splice(a2, 1);
    }), [t2]);
    let s2 = t2.toasts.map((a2) => {
      var r, c2;
      return { ...e2, ...e2[a2.type], ...a2, duration: a2.duration || ((r = e2[a2.type]) == null ? void 0 : r.duration) || (e2 == null ? void 0 : e2.duration) || Y[a2.type], style: { ...e2.style, ...(c2 = e2[a2.type]) == null ? void 0 : c2.style, ...a2.style } };
    });
    return { ...t2, toasts: s2 };
  };
  var G = (e2, t2 = "blank", o2) => ({ createdAt: Date.now(), visible: true, type: t2, ariaProps: { role: "status", "aria-live": "polite" }, message: e2, pauseDuration: 0, ...o2, id: (o2 == null ? void 0 : o2.id) || U() });
  var h2 = (e2) => (t2, o2) => {
    let s2 = G(t2, e2, o2);
    return u2({ type: 2, toast: s2 }), s2.id;
  };
  var n2 = (e2, t2) => h2("blank")(e2, t2);
  n2.error = h2("error");
  n2.success = h2("success");
  n2.loading = h2("loading");
  n2.custom = h2("custom");
  n2.dismiss = (e2) => {
    u2({ type: 3, toastId: e2 });
  };
  n2.remove = (e2) => u2({ type: 4, toastId: e2 });
  n2.promise = (e2, t2, o2) => {
    let s2 = n2.loading(t2.loading, { ...o2, ...o2 == null ? void 0 : o2.loading });
    return e2.then((a2) => (n2.success(T(t2.success, a2), { id: s2, ...o2, ...o2 == null ? void 0 : o2.success }), a2)).catch((a2) => {
      n2.error(T(t2.error, a2), { id: s2, ...o2, ...o2 == null ? void 0 : o2.error });
    }), e2;
  };
  var Z = (e2, t2) => {
    u2({ type: 1, toast: { id: e2, height: t2 } });
  };
  var ee = () => {
    u2({ type: 5, time: Date.now() });
  };
  var D = (e2) => {
    let { toasts: t2, pausedAt: o2 } = I(e2);
    (0, import_react5.useEffect)(() => {
      if (o2)
        return;
      let r = Date.now(), c2 = t2.map((i2) => {
        if (i2.duration === 1 / 0)
          return;
        let d2 = (i2.duration || 0) + i2.pauseDuration - (r - i2.createdAt);
        if (d2 < 0) {
          i2.visible && n2.dismiss(i2.id);
          return;
        }
        return setTimeout(() => n2.dismiss(i2.id), d2);
      });
      return () => {
        c2.forEach((i2) => i2 && clearTimeout(i2));
      };
    }, [t2, o2]);
    let s2 = (0, import_react5.useCallback)(() => {
      o2 && u2({ type: 6, time: Date.now() });
    }, [o2]), a2 = (0, import_react5.useCallback)((r, c2) => {
      let { reverseOrder: i2 = false, gutter: d2 = 8, defaultPosition: p2 } = c2 || {}, g2 = t2.filter((m2) => (m2.position || p2) === (r.position || p2) && m2.height), E = g2.findIndex((m2) => m2.id === r.id), x = g2.filter((m2, R) => R < E && m2.visible).length;
      return g2.filter((m2) => m2.visible).slice(...i2 ? [x + 1] : [0, x]).reduce((m2, R) => m2 + (R.height || 0) + d2, 0);
    }, [t2]);
    return { toasts: t2, handlers: { updateHeight: Z, startPause: ee, endPause: s2, calculateOffset: a2 } };
  };
  var oe = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`;
  var re = h`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var se = h`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`;
  var _ = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e2) => e2.primary || "#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${oe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${re} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${(e2) => e2.secondary || "#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${se} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`;
  var ne = h`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;
  var V = j("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${(e2) => e2.secondary || "#e0e0e0"};
  border-right-color: ${(e2) => e2.primary || "#616161"};
  animation: ${ne} 1s linear infinite;
`;
  var pe = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`;
  var de = h`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`;
  var w = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e2) => e2.primary || "#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${pe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${de} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${(e2) => e2.secondary || "#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`;
  var ue = j("div")`
  position: absolute;
`;
  var le = j("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`;
  var Te = h`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var fe = j("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${Te} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`;
  var M = ({ toast: e2 }) => {
    let { icon: t2, type: o2, iconTheme: s2 } = e2;
    return t2 !== void 0 ? typeof t2 == "string" ? y.createElement(fe, null, t2) : t2 : o2 === "blank" ? null : y.createElement(le, null, y.createElement(V, { ...s2 }), o2 !== "loading" && y.createElement(ue, null, o2 === "error" ? y.createElement(_, { ...s2 }) : y.createElement(w, { ...s2 })));
  };
  var ye = (e2) => `
0% {transform: translate3d(0,${e2 * -200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`;
  var ge = (e2) => `
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${e2 * -150}%,-1px) scale(.6); opacity:0;}
`;
  var he = "0%{opacity:0;} 100%{opacity:1;}";
  var xe = "0%{opacity:1;} 100%{opacity:0;}";
  var be = j("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`;
  var Se = j("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`;
  var Ae = (e2, t2) => {
    let s2 = e2.includes("top") ? 1 : -1, [a2, r] = b2() ? [he, xe] : [ye(s2), ge(s2)];
    return { animation: t2 ? `${h(a2)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards` : `${h(r)} 0.4s forwards cubic-bezier(.06,.71,.55,1)` };
  };
  var F = l2.memo(({ toast: e2, position: t2, style: o2, children: s2 }) => {
    let a2 = e2.height ? Ae(e2.position || t2 || "top-center", e2.visible) : { opacity: 0 }, r = l2.createElement(M, { toast: e2 }), c2 = l2.createElement(Se, { ...e2.ariaProps }, T(e2.message, e2));
    return l2.createElement(be, { className: e2.className, style: { ...a2, ...o2, ...e2.style } }, typeof s2 == "function" ? s2({ icon: r, message: c2 }) : l2.createElement(l2.Fragment, null, r, c2));
  });
  m(f2.createElement);
  var Ee = ({ id: e2, className: t2, style: o2, onHeightUpdate: s2, children: a2 }) => {
    let r = f2.useCallback((c2) => {
      if (c2) {
        let i2 = () => {
          let d2 = c2.getBoundingClientRect().height;
          s2(e2, d2);
        };
        i2(), new MutationObserver(i2).observe(c2, { subtree: true, childList: true, characterData: true });
      }
    }, [e2, s2]);
    return f2.createElement("div", { ref: r, className: t2, style: o2 }, a2);
  };
  var Re = (e2, t2) => {
    let o2 = e2.includes("top"), s2 = o2 ? { top: 0 } : { bottom: 0 }, a2 = e2.includes("center") ? { justifyContent: "center" } : e2.includes("right") ? { justifyContent: "flex-end" } : {};
    return { left: 0, right: 0, display: "flex", position: "absolute", transition: b2() ? void 0 : "all 230ms cubic-bezier(.21,1.02,.73,1)", transform: `translateY(${t2 * (o2 ? 1 : -1)}px)`, ...s2, ...a2 };
  };
  var ve = u`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`;
  var O = 16;
  var Ie = ({ reverseOrder: e2, position: t2 = "top-center", toastOptions: o2, gutter: s2, children: a2, containerStyle: r, containerClassName: c2 }) => {
    let { toasts: i2, handlers: d2 } = D(o2);
    return f2.createElement("div", { style: { position: "fixed", zIndex: 9999, top: O, left: O, right: O, bottom: O, pointerEvents: "none", ...r }, className: c2, onMouseEnter: d2.startPause, onMouseLeave: d2.endPause }, i2.map((p2) => {
      let g2 = p2.position || t2, E = d2.calculateOffset(p2, { reverseOrder: e2, gutter: s2, defaultPosition: t2 }), x = Re(g2, E);
      return f2.createElement(Ee, { id: p2.id, key: p2.id, onHeightUpdate: d2.updateHeight, className: p2.visible ? ve : "", style: x }, p2.type === "custom" ? T(p2.message, p2) : a2 ? a2(p2) : f2.createElement(F, { toast: p2, position: g2 }));
    }));
  };
  var _t = n2;

  // src/extension/options.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
  initializeIcons20();
  var Options = () => {
    const [whitelist, setWhitelist] = (0, import_react6.useState)([]);
    const [currentDomain, setCurrentDomain] = (0, import_react6.useState)("");
    const [availableDomains, setAvailableDomains] = (0, import_react6.useState)([]);
    (0, import_react6.useEffect)(() => {
      (async () => {
        const res = await userService.login({});
        if (res.config) {
          setWhitelist(res.config.domainWhitelist || []);
        }
      })();
      if (!chrome) {
        return;
      }
      chrome.tabs.query({}, (tabs) => {
        const domainSet = /* @__PURE__ */ new Set();
        tabs.forEach((tab) => {
          const url = new URL(tab.url || "");
          domainSet.add(url.hostname);
        });
        setAvailableDomains([...domainSet]);
      });
    }, [setWhitelist]);
    const addDomain = () => {
      if (currentDomain && !whitelist.includes(currentDomain)) {
        setWhitelist([...whitelist, currentDomain]);
        setCurrentDomain("");
      }
    };
    const removeDomain = (domain) => {
      setWhitelist((prevWhitelist) => prevWhitelist.filter((d2) => d2 !== domain));
    };
    const saveWhitelist = async () => {
      try {
        await userService.updateConfig({
          domainWhitelist: whitelist
        });
        _t.success("Whitelist saved");
      } catch (e2) {
        console.error(e2);
        _t.error(e2.message);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Stack, { tokens: { childrenGap: 10 }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("h3", { children: "Whitelisted Domains" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        Dropdown,
        {
          placeholder: "Select domains from opened tabs",
          options: availableDomains.map((domain) => ({ key: domain, text: domain })),
          onChange: (e2, option) => setCurrentDomain(option?.text || "")
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        TextField,
        {
          placeholder: "Enter domain hostname",
          value: currentDomain,
          onChange: (e2, newValue) => setCurrentDomain(newValue || "")
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(PrimaryButton, { onClick: addDomain, children: "Add to Whitelist" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("ul", { children: whitelist.map((domain) => /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("li", { children: [
        domain,
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          IconButton,
          {
            iconProps: { iconName: "Delete" },
            onClick: () => removeDomain(domain)
          }
        )
      ] }, domain)) }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Button2, { onClick: saveWhitelist, children: "Save Whitelist" })
    ] });
  };
  var rootElem = document.createElement("div");
  document.body.appendChild(rootElem);
  var root = import_client.default.createRoot(rootElem);
  root.render(
    /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_react6.default.StrictMode, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Options, {}),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Ie, {})
    ] })
  );
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=options.js.map
